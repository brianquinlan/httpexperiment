// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/cocoahttp.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class CocoahttpBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CocoahttpBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CocoahttpBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void sum(
    int dart_port,
    ffi.Pointer<ffi.Int8> uri,
  ) {
    return _sum(
      dart_port,
      uri,
    );
  }

  late final _sumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_Port, ffi.Pointer<ffi.Int8>)>>('sum');
  late final _sum =
      _sumPtr.asFunction<void Function(int, ffi.Pointer<ffi.Int8>)>();

  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'InitDartApiDL');
  late final _InitDartApiDL =
      _InitDartApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();
}

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;
