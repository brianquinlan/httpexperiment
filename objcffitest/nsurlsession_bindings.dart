// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Double> _NSFoundationVersionNumber =
      _lookup<ffi.Double>('NSFoundationVersionNumber');

  double get NSFoundationVersionNumber => _NSFoundationVersionNumber.value;

  set NSFoundationVersionNumber(double value) =>
      _NSFoundationVersionNumber.value = value;

  ffi.Pointer<ObjCObject> NSStringFromSelector(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector(
      aSelector,
    );
  }

  late final _NSStringFromSelectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector = _NSStringFromSelectorPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString(
      aSelectorName,
    );
  }

  late final _NSSelectorFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString = _NSSelectorFromStringPtr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass(
      aClass,
    );
  }

  late final _NSStringFromClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass = _NSStringFromClassPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString(
      aClassName,
    );
  }

  late final _NSClassFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString = _NSClassFromStringPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol(
      proto,
    );
  }

  late final _NSStringFromProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol = _NSStringFromProtocolPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString(
      namestr,
    );
  }

  late final _NSProtocolFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString = _NSProtocolFromStringPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment = _NSGetSizeAndAlignmentPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog(
      format,
    );
  }

  late final _NSLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog =
      _NSLogPtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv(
      format,
      args,
    );
  }

  late final _NSLogvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv =
      _NSLogvPtr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  late final ffi.Pointer<NSInteger> _NSNotFound =
      _lookup<NSInteger>('NSNotFound');

  int get NSNotFound => _NSNotFound.value;

  set NSNotFound(int value) => _NSNotFound.value = value;

  late final ffi.Pointer<ffi.Double> _kCFCoreFoundationVersionNumber =
      _lookup<ffi.Double>('kCFCoreFoundationVersionNumber');

  double get kCFCoreFoundationVersionNumber =>
      _kCFCoreFoundationVersionNumber.value;

  set kCFCoreFoundationVersionNumber(double value) =>
      _kCFCoreFoundationVersionNumber.value = value;

  late final ffi.Pointer<CFIndex> _kCFNotFound =
      _lookup<CFIndex>('kCFNotFound');

  int get kCFNotFound => _kCFNotFound.value;

  set kCFNotFound(int value) => _kCFNotFound.value = value;

  CFRange __CFRangeMake(
    int loc,
    int len,
  ) {
    return ___CFRangeMake(
      loc,
      len,
    );
  }

  late final ___CFRangeMakePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake =
      ___CFRangeMakePtr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID() {
    return _CFNullGetTypeID();
  }

  late final _CFNullGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID =
      _CFNullGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFNullRef> _kCFNull = _lookup<CFNullRef>('kCFNull');

  CFNullRef get kCFNull => _kCFNull.value;

  set kCFNull(CFNullRef value) => _kCFNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorDefault');

  CFAllocatorRef get kCFAllocatorDefault => _kCFAllocatorDefault.value;

  set kCFAllocatorDefault(CFAllocatorRef value) =>
      _kCFAllocatorDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorSystemDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorSystemDefault');

  CFAllocatorRef get kCFAllocatorSystemDefault =>
      _kCFAllocatorSystemDefault.value;

  set kCFAllocatorSystemDefault(CFAllocatorRef value) =>
      _kCFAllocatorSystemDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMalloc =
      _lookup<CFAllocatorRef>('kCFAllocatorMalloc');

  CFAllocatorRef get kCFAllocatorMalloc => _kCFAllocatorMalloc.value;

  set kCFAllocatorMalloc(CFAllocatorRef value) =>
      _kCFAllocatorMalloc.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMallocZone =
      _lookup<CFAllocatorRef>('kCFAllocatorMallocZone');

  CFAllocatorRef get kCFAllocatorMallocZone => _kCFAllocatorMallocZone.value;

  set kCFAllocatorMallocZone(CFAllocatorRef value) =>
      _kCFAllocatorMallocZone.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorNull =
      _lookup<CFAllocatorRef>('kCFAllocatorNull');

  CFAllocatorRef get kCFAllocatorNull => _kCFAllocatorNull.value;

  set kCFAllocatorNull(CFAllocatorRef value) => _kCFAllocatorNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorUseContext =
      _lookup<CFAllocatorRef>('kCFAllocatorUseContext');

  CFAllocatorRef get kCFAllocatorUseContext => _kCFAllocatorUseContext.value;

  set kCFAllocatorUseContext(CFAllocatorRef value) =>
      _kCFAllocatorUseContext.value = value;

  int CFAllocatorGetTypeID() {
    return _CFAllocatorGetTypeID();
  }

  late final _CFAllocatorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID =
      _CFAllocatorGetTypeIDPtr.asFunction<int Function()>();

  void CFAllocatorSetDefault(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault(
      allocator,
    );
  }

  late final _CFAllocatorSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault =
      _CFAllocatorSetDefaultPtr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault() {
    return _CFAllocatorGetDefault();
  }

  late final _CFAllocatorGetDefaultPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault =
      _CFAllocatorGetDefaultPtr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate = _CFAllocatorCreatePtr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate = _CFAllocatorAllocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate = _CFAllocatorReallocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate = _CFAllocatorDeallocatePtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSizePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize =
      _CFAllocatorGetPreferredSizeForSizePtr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext = _CFAllocatorGetContextPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription =
      _CFCopyTypeIDDescriptionPtr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain(
    CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease(
    CFTypeRef arg,
  ) {
    return _CFAutorelease(
      arg,
    );
  }

  late final _CFAutoreleasePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease =
      _CFAutoreleasePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(CFTypeRef)>();

  int CFEqual(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash(
    CFTypeRef cf,
  ) {
    return _CFHash(
      cf,
    );
  }

  late final _CFHashPtr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash = _CFHashPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription =
      _CFCopyDescriptionPtr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator(
      cf,
    );
  }

  late final _CFGetAllocatorPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator =
      _CFGetAllocatorPtr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable(
      cf,
    );
  }

  late final _CFMakeCollectablePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable =
      _CFMakeCollectablePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone() {
    return _NSDefaultMallocZone();
  }

  late final _NSDefaultMallocZonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone =
      _NSDefaultMallocZonePtr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone = _NSCreateZonePtr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone(
      zone,
    );
  }

  late final _NSRecycleZonePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone =
      _NSRecycleZonePtr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName(
      zone,
      name,
    );
  }

  late final _NSSetZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName = _NSSetZoneNamePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName(
      zone,
    );
  }

  late final _NSZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName = _NSZoneNamePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer(
      ptr,
    );
  }

  late final _NSZoneFromPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer = _NSZoneFromPointerPtr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc(
      zone,
      size,
    );
  }

  late final _NSZoneMallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc = _NSZoneMallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc = _NSZoneCallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc = _NSZoneReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree(
      zone,
      ptr,
    );
  }

  late final _NSZoneFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree = _NSZoneFreePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable(
      size,
      options,
    );
  }

  late final _NSAllocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable = _NSAllocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable = _NSReallocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize() {
    return _NSPageSize();
  }

  late final _NSPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize = _NSPageSizePtr.asFunction<int Function()>();

  int NSLogPageSize() {
    return _NSLogPageSize();
  }

  late final _NSLogPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize = _NSLogPageSizePtr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize =
      _NSRoundUpToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize =
      _NSRoundDownToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages(
    int bytes,
  ) {
    return _NSAllocateMemoryPages(
      bytes,
    );
  }

  late final _NSAllocateMemoryPagesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages = _NSAllocateMemoryPagesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages = _NSDeallocateMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages = _NSCopyMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable() {
    return _NSRealMemoryAvailable();
  }

  late final _NSRealMemoryAvailablePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable =
      _NSRealMemoryAvailablePtr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject = _NSAllocateObjectPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject(
      object,
    );
  }

  late final _NSDeallocateObjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject = _NSDeallocateObjectPtr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject = _NSCopyObjectPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone = _NSShouldRetainWithZonePtr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount(
      object,
    );
  }

  late final _NSIncrementExtraRefCountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount = _NSIncrementExtraRefCountPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero =
      _NSDecrementExtraRefCountWasZeroPtr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount(
      object,
    );
  }

  late final _NSExtraRefCountPtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount =
      _NSExtraRefCountPtr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<pkg_ffi.Char>)>();

  void _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_3(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_4(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_NSZone>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_NSZone>)>();

  bool _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
          obj,
          sel,
          aSelector,
        ) !=
        0;
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_8(
          obj,
          sel,
          protocol,
        ) !=
        0;
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  IMP _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  IMP _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_10(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_16(
          obj,
          sel,
        ) !=
        0;
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return __objc_msgSend_17(
          obj,
          sel,
          aClass,
        ) !=
        0;
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> sel1,
  ) {
    return __objc_msgSend_18(
          obj,
          sel,
          sel1,
        ) !=
        0;
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> sel1,
  ) {
    return __objc_msgSend_19(
          obj,
          sel,
          sel1,
        ) !=
        0;
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> cString,
    int enc,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      cString,
      enc,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  NSNotificationName _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          NSNotificationName Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      NSNotificationName Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSNotificationName name,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> userInfo,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
      name,
      object,
      userInfo,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
    ffi.Pointer<ObjCSel> aSelector,
    NSNotificationName aName,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      observer,
      aSelector,
      aName,
      anObject,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> notification,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      notification,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSNotificationName aName,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      aName,
      anObject,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSNotificationName, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSNotificationName, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSNotificationName aName,
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<ObjCObject> aUserInfo,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
      aName,
      anObject,
      aUserInfo,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
      observer,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
    NSNotificationName aName,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
      observer,
      aName,
      anObject,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSNotificationName name,
    ffi.Pointer<ObjCObject> obj1,
    ffi.Pointer<ObjCObject> queue,
    ffi.Pointer<ObjCObject> block,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
      name,
      obj1,
      queue,
      block,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<NSNotificationName>
      _NSSystemClockDidChangeNotification =
      _lookup<NSNotificationName>('NSSystemClockDidChangeNotification');

  NSNotificationName get NSSystemClockDidChangeNotification =>
      _NSSystemClockDidChangeNotification.value;

  set NSSystemClockDidChangeNotification(NSNotificationName value) =>
      _NSSystemClockDidChangeNotification.value = value;

  double _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          NSTimeInterval Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double ti,
  ) {
    return __objc_msgSend_40(
      obj,
      sel,
      ti,
    );
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  instancetype _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_41(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
      URL,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      URL,
      cachePolicy,
      timeoutInterval,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, double)>();

  instancetype _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
      URL,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
      URL,
      cachePolicy,
      timeoutInterval,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, double)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  void _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_57(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  void _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      value ? 1 : 0,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  void _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_59(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_60(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> identifier,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      identifier,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> cookie,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
      cookie,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> cookie,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      cookie,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> date,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
      date,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> cookies,
    ffi.Pointer<ObjCObject> URL,
    ffi.Pointer<ObjCObject> mainDocumentURL,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
      cookies,
      URL,
      mainDocumentURL,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<NSNotificationName>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification =
      _lookup<NSNotificationName>(
          'NSHTTPCookieManagerAcceptPolicyChangedNotification');

  NSNotificationName get NSHTTPCookieManagerAcceptPolicyChangedNotification =>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification.value;

  set NSHTTPCookieManagerAcceptPolicyChangedNotification(
          NSNotificationName value) =>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification.value = value;

  late final ffi.Pointer<NSNotificationName>
      _NSHTTPCookieManagerCookiesChangedNotification =
      _lookup<NSNotificationName>(
          'NSHTTPCookieManagerCookiesChangedNotification');

  NSNotificationName get NSHTTPCookieManagerCookiesChangedNotification =>
      _NSHTTPCookieManagerCookiesChangedNotification.value;

  set NSHTTPCookieManagerCookiesChangedNotification(NSNotificationName value) =>
      _NSHTTPCookieManagerCookiesChangedNotification.value = value;

  ffi.Pointer<ObjCObject> _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_69(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
      aKey,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  instancetype _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
      aKey,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<ObjCObject> aKey,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
      anObject,
      aKey,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int numItems,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
      numItems,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  instancetype _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
      unitCount,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
    ffi.Pointer<ObjCObject> parent,
    int portionOfParentTotalUnitCount,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
      unitCount,
      parent,
      portionOfParentTotalUnitCount,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int64,
              ffi.Pointer<ObjCObject>,
              ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>, int)>();

  instancetype _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> parentProgressOrNil,
    ffi.Pointer<ObjCObject> userInfoOrNil,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
      parentProgressOrNil,
      userInfoOrNil,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
      unitCount,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  void _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
    ffi.Pointer<ObjCObject> work,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
      unitCount,
      work,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> child,
    int inUnitCount,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      child,
      inUnitCount,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  int _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_87(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> objectOrNil,
    NSProgressUserInfoKey key,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
      objectOrNil,
      key,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSProgressUserInfoKey)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSProgressUserInfoKey)>();

  double _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  NSProgressKind _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          NSProgressKind Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      NSProgressKind Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSProgressKind value,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSProgressKind)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSProgressKind)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_103(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  NSProgressFileOperationKind _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          NSProgressFileOperationKind Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      NSProgressFileOperationKind Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSProgressFileOperationKind value,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSProgressFileOperationKind)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSProgressFileOperationKind)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    NSProgressPublishingHandler publishingHandler,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
      url,
      publishingHandler,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSProgressPublishingHandler)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          NSProgressPublishingHandler)>();

  void _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> subscriber,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      subscriber,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressEstimatedTimeRemainingKey =
      _lookup<NSProgressUserInfoKey>('NSProgressEstimatedTimeRemainingKey');

  NSProgressUserInfoKey get NSProgressEstimatedTimeRemainingKey =>
      _NSProgressEstimatedTimeRemainingKey.value;

  set NSProgressEstimatedTimeRemainingKey(NSProgressUserInfoKey value) =>
      _NSProgressEstimatedTimeRemainingKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressThroughputKey =
      _lookup<NSProgressUserInfoKey>('NSProgressThroughputKey');

  NSProgressUserInfoKey get NSProgressThroughputKey =>
      _NSProgressThroughputKey.value;

  set NSProgressThroughputKey(NSProgressUserInfoKey value) =>
      _NSProgressThroughputKey.value = value;

  late final ffi.Pointer<NSProgressKind> _NSProgressKindFile =
      _lookup<NSProgressKind>('NSProgressKindFile');

  NSProgressKind get NSProgressKindFile => _NSProgressKindFile.value;

  set NSProgressKindFile(NSProgressKind value) =>
      _NSProgressKindFile.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileOperationKindKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileOperationKindKey');

  NSProgressUserInfoKey get NSProgressFileOperationKindKey =>
      _NSProgressFileOperationKindKey.value;

  set NSProgressFileOperationKindKey(NSProgressUserInfoKey value) =>
      _NSProgressFileOperationKindKey.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDownloading');

  NSProgressFileOperationKind get NSProgressFileOperationKindDownloading =>
      _NSProgressFileOperationKindDownloading.value;

  set NSProgressFileOperationKindDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDecompressingAfterDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDecompressingAfterDownloading');

  NSProgressFileOperationKind
      get NSProgressFileOperationKindDecompressingAfterDownloading =>
          _NSProgressFileOperationKindDecompressingAfterDownloading.value;

  set NSProgressFileOperationKindDecompressingAfterDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDecompressingAfterDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindReceiving =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindReceiving');

  NSProgressFileOperationKind get NSProgressFileOperationKindReceiving =>
      _NSProgressFileOperationKindReceiving.value;

  set NSProgressFileOperationKindReceiving(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindReceiving.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindCopying =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindCopying');

  NSProgressFileOperationKind get NSProgressFileOperationKindCopying =>
      _NSProgressFileOperationKindCopying.value;

  set NSProgressFileOperationKindCopying(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindCopying.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindUploading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindUploading');

  NSProgressFileOperationKind get NSProgressFileOperationKindUploading =>
      _NSProgressFileOperationKindUploading.value;

  set NSProgressFileOperationKindUploading(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindUploading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDuplicating =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDuplicating');

  NSProgressFileOperationKind get NSProgressFileOperationKindDuplicating =>
      _NSProgressFileOperationKindDuplicating.value;

  set NSProgressFileOperationKindDuplicating(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDuplicating.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileURLKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileURLKey');

  NSProgressUserInfoKey get NSProgressFileURLKey => _NSProgressFileURLKey.value;

  set NSProgressFileURLKey(NSProgressUserInfoKey value) =>
      _NSProgressFileURLKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileTotalCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileTotalCountKey');

  NSProgressUserInfoKey get NSProgressFileTotalCountKey =>
      _NSProgressFileTotalCountKey.value;

  set NSProgressFileTotalCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileTotalCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileCompletedCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileCompletedCountKey');

  NSProgressUserInfoKey get NSProgressFileCompletedCountKey =>
      _NSProgressFileCompletedCountKey.value;

  set NSProgressFileCompletedCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileCompletedCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileAnimationImageKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageKey =>
      _NSProgressFileAnimationImageKey.value;

  set NSProgressFileAnimationImageKey(NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageOriginalRectKey =
      _lookup<NSProgressUserInfoKey>(
          'NSProgressFileAnimationImageOriginalRectKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageOriginalRectKey =>
      _NSProgressFileAnimationImageOriginalRectKey.value;

  set NSProgressFileAnimationImageOriginalRectKey(
          NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageOriginalRectKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileIconKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileIconKey');

  NSProgressUserInfoKey get NSProgressFileIconKey =>
      _NSProgressFileIconKey.value;

  set NSProgressFileIconKey(NSProgressUserInfoKey value) =>
      _NSProgressFileIconKey.value = value;

  late final ffi.Pointer<CFArrayCallBacks> _kCFTypeArrayCallBacks =
      _lookup<CFArrayCallBacks>('kCFTypeArrayCallBacks');

  CFArrayCallBacks get kCFTypeArrayCallBacks => _kCFTypeArrayCallBacks.ref;

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFArrayGetTypeID');
  late final _CFArrayGetTypeID =
      _CFArrayGetTypeIDPtr.asFunction<int Function()>();

  CFArrayRef CFArrayCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFArrayCreatePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreate');
  late final _CFArrayCreate = _CFArrayCreatePtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int, ffi.Pointer<CFArrayCallBacks>)>();

  CFArrayRef CFArrayCreateCopy(
    CFAllocatorRef allocator,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateCopy(
      allocator,
      theArray,
    );
  }

  late final _CFArrayCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFAllocatorRef, CFArrayRef)>>(
      'CFArrayCreateCopy');
  late final _CFArrayCreateCopy = _CFArrayCreateCopyPtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, CFArrayRef)>();

  CFMutableArrayRef CFArrayCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFArrayCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreateMutable');
  late final _CFArrayCreateMutable = _CFArrayCreateMutablePtr.asFunction<
      CFMutableArrayRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFArrayCallBacks>)>();

  CFMutableArrayRef CFArrayCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateMutableCopy(
      allocator,
      capacity,
      theArray,
    );
  }

  late final _CFArrayCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              CFArrayRef)>>('CFArrayCreateMutableCopy');
  late final _CFArrayCreateMutableCopy =
      _CFArrayCreateMutableCopyPtr.asFunction<
          CFMutableArrayRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFArrayGetCount(
    CFArrayRef theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFArrayRef)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount =
      _CFArrayGetCountPtr.asFunction<int Function(CFArrayRef)>();

  int CFArrayGetCountOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetCountOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetCountOfValue');
  late final _CFArrayGetCountOfValue = _CFArrayGetCountOfValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayContainsValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayContainsValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayContainsValue');
  late final _CFArrayContainsValue = _CFArrayContainsValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    CFArrayRef theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFArrayRef, CFIndex)>>('CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex = _CFArrayGetValueAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFArrayRef, int)>();

  void CFArrayGetValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFArrayGetValues(
      theArray,
      range,
      values,
    );
  }

  late final _CFArrayGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFArrayGetValues');
  late final _CFArrayGetValues = _CFArrayGetValuesPtr.asFunction<
      void Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFArrayApplyFunction(
    CFArrayRef theArray,
    CFRange range,
    CFArrayApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayApplyFunction(
      theArray,
      range,
      applier,
      context,
    );
  }

  late final _CFArrayApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayApplyFunction');
  late final _CFArrayApplyFunction = _CFArrayApplyFunctionPtr.asFunction<
      void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
          ffi.Pointer<ffi.Void>)>();

  int CFArrayGetFirstIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetFirstIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetFirstIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetFirstIndexOfValue');
  late final _CFArrayGetFirstIndexOfValue = _CFArrayGetFirstIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayGetLastIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetLastIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetLastIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetLastIndexOfValue');
  late final _CFArrayGetLastIndexOfValue = _CFArrayGetLastIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayBSearchValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayBSearchValues(
      theArray,
      range,
      value,
      comparator,
      context,
    );
  }

  late final _CFArrayBSearchValuesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFArrayRef,
              CFRange,
              ffi.Pointer<ffi.Void>,
              CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayBSearchValues');
  late final _CFArrayBSearchValues = _CFArrayBSearchValuesPtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>,
          CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendValue(
    CFMutableArrayRef theArray,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayAppendValue(
      theArray,
      value,
    );
  }

  late final _CFArrayAppendValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, ffi.Pointer<ffi.Void>)>>('CFArrayAppendValue');
  late final _CFArrayAppendValue = _CFArrayAppendValuePtr.asFunction<
      void Function(CFMutableArrayRef, ffi.Pointer<ffi.Void>)>();

  void CFArrayInsertValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayInsertValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArrayInsertValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArrayInsertValueAtIndex');
  late final _CFArrayInsertValueAtIndex =
      _CFArrayInsertValueAtIndexPtr.asFunction<
          void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArraySetValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArraySetValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArraySetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArraySetValueAtIndex');
  late final _CFArraySetValueAtIndex = _CFArraySetValueAtIndexPtr.asFunction<
      void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArrayRemoveValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
  ) {
    return _CFArrayRemoveValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayRemoveValueAtIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef, CFIndex)>>(
      'CFArrayRemoveValueAtIndex');
  late final _CFArrayRemoveValueAtIndex = _CFArrayRemoveValueAtIndexPtr
      .asFunction<void Function(CFMutableArrayRef, int)>();

  void CFArrayRemoveAllValues(
    CFMutableArrayRef theArray,
  ) {
    return _CFArrayRemoveAllValues(
      theArray,
    );
  }

  late final _CFArrayRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef)>>(
          'CFArrayRemoveAllValues');
  late final _CFArrayRemoveAllValues =
      _CFArrayRemoveAllValuesPtr.asFunction<void Function(CFMutableArrayRef)>();

  void CFArrayReplaceValues(
    CFMutableArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> newValues,
    int newCount,
  ) {
    return _CFArrayReplaceValues(
      theArray,
      range,
      newValues,
      newCount,
    );
  }

  late final _CFArrayReplaceValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef,
              CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFArrayReplaceValues');
  late final _CFArrayReplaceValues = _CFArrayReplaceValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  void CFArrayExchangeValuesAtIndices(
    CFMutableArrayRef theArray,
    int idx1,
    int idx2,
  ) {
    return _CFArrayExchangeValuesAtIndices(
      theArray,
      idx1,
      idx2,
    );
  }

  late final _CFArrayExchangeValuesAtIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              CFIndex)>>('CFArrayExchangeValuesAtIndices');
  late final _CFArrayExchangeValuesAtIndices =
      _CFArrayExchangeValuesAtIndicesPtr.asFunction<
          void Function(CFMutableArrayRef, int, int)>();

  void CFArraySortValues(
    CFMutableArrayRef theArray,
    CFRange range,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArraySortValues(
      theArray,
      range,
      comparator,
      context,
    );
  }

  late final _CFArraySortValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArraySortValues');
  late final _CFArraySortValues = _CFArraySortValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
          ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendArray(
    CFMutableArrayRef theArray,
    CFArrayRef otherArray,
    CFRange otherRange,
  ) {
    return _CFArrayAppendArray(
      theArray,
      otherArray,
      otherRange,
    );
  }

  late final _CFArrayAppendArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, CFArrayRef, CFRange)>>('CFArrayAppendArray');
  late final _CFArrayAppendArray = _CFArrayAppendArrayPtr.asFunction<
      void Function(CFMutableArrayRef, CFArrayRef, CFRange)>();

  ffi.Pointer<ffi.Void> sec_retain(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_retain(
      obj,
    );
  }

  late final _sec_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('sec_retain');
  late final _sec_retain = _sec_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void sec_release(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_release(
      obj,
    );
  }

  late final _sec_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sec_release');
  late final _sec_release =
      _sec_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  CFStringRef SecCopyErrorMessageString(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              OSStatus, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString = _SecCopyErrorMessageStringPtr
      .asFunction<CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<CFBagCallBacks> _kCFTypeBagCallBacks =
      _lookup<CFBagCallBacks>('kCFTypeBagCallBacks');

  CFBagCallBacks get kCFTypeBagCallBacks => _kCFTypeBagCallBacks.ref;

  late final ffi.Pointer<CFBagCallBacks> _kCFCopyStringBagCallBacks =
      _lookup<CFBagCallBacks>('kCFCopyStringBagCallBacks');

  CFBagCallBacks get kCFCopyStringBagCallBacks =>
      _kCFCopyStringBagCallBacks.ref;

  int CFBagGetTypeID() {
    return _CFBagGetTypeID();
  }

  late final _CFBagGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBagGetTypeID');
  late final _CFBagGetTypeID = _CFBagGetTypeIDPtr.asFunction<int Function()>();

  CFBagRef CFBagCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFBagCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFBagCallBacks>)>>('CFBagCreate');
  late final _CFBagCreate = _CFBagCreatePtr.asFunction<
      CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFBagCallBacks>)>();

  CFBagRef CFBagCreateCopy(
    CFAllocatorRef allocator,
    CFBagRef theBag,
  ) {
    return _CFBagCreateCopy(
      allocator,
      theBag,
    );
  }

  late final _CFBagCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFBagRef Function(CFAllocatorRef, CFBagRef)>>(
          'CFBagCreateCopy');
  late final _CFBagCreateCopy = _CFBagCreateCopyPtr.asFunction<
      CFBagRef Function(CFAllocatorRef, CFBagRef)>();

  CFMutableBagRef CFBagCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFBagCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFBagCallBacks>)>>('CFBagCreateMutable');
  late final _CFBagCreateMutable = _CFBagCreateMutablePtr.asFunction<
      CFMutableBagRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFBagCallBacks>)>();

  CFMutableBagRef CFBagCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBagRef theBag,
  ) {
    return _CFBagCreateMutableCopy(
      allocator,
      capacity,
      theBag,
    );
  }

  late final _CFBagCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(
              CFAllocatorRef, CFIndex, CFBagRef)>>('CFBagCreateMutableCopy');
  late final _CFBagCreateMutableCopy = _CFBagCreateMutableCopyPtr.asFunction<
      CFMutableBagRef Function(CFAllocatorRef, int, CFBagRef)>();

  int CFBagGetCount(
    CFBagRef theBag,
  ) {
    return _CFBagGetCount(
      theBag,
    );
  }

  late final _CFBagGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBagRef)>>('CFBagGetCount');
  late final _CFBagGetCount =
      _CFBagGetCountPtr.asFunction<int Function(CFBagRef)>();

  int CFBagGetCountOfValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetCountOfValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetCountOfValue');
  late final _CFBagGetCountOfValue = _CFBagGetCountOfValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagContainsValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagContainsValue(
      theBag,
      value,
    );
  }

  late final _CFBagContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagContainsValue');
  late final _CFBagContainsValue = _CFBagContainsValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBagGetValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetValue');
  late final _CFBagGetValue = _CFBagGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagGetValueIfPresent(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBagGetValueIfPresent(
      theBag,
      candidate,
      value,
    );
  }

  late final _CFBagGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValueIfPresent');
  late final _CFBagGetValueIfPresent = _CFBagGetValueIfPresentPtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagGetValues(
    CFBagRef theBag,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBagGetValues(
      theBag,
      values,
    );
  }

  late final _CFBagGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValues');
  late final _CFBagGetValues = _CFBagGetValuesPtr.asFunction<
      void Function(CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagApplyFunction(
    CFBagRef theBag,
    CFBagApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBagApplyFunction(
      theBag,
      applier,
      context,
    );
  }

  late final _CFBagApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBagRef, CFBagApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBagApplyFunction');
  late final _CFBagApplyFunction = _CFBagApplyFunctionPtr.asFunction<
      void Function(CFBagRef, CFBagApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFBagAddValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagAddValue(
      theBag,
      value,
    );
  }

  late final _CFBagAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagAddValue');
  late final _CFBagAddValue = _CFBagAddValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagReplaceValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagReplaceValue(
      theBag,
      value,
    );
  }

  late final _CFBagReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagReplaceValue');
  late final _CFBagReplaceValue = _CFBagReplaceValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagSetValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagSetValue(
      theBag,
      value,
    );
  }

  late final _CFBagSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagSetValue');
  late final _CFBagSetValue = _CFBagSetValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagRemoveValue(
      theBag,
      value,
    );
  }

  late final _CFBagRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagRemoveValue');
  late final _CFBagRemoveValue = _CFBagRemoveValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveAllValues(
    CFMutableBagRef theBag,
  ) {
    return _CFBagRemoveAllValues(
      theBag,
    );
  }

  late final _CFBagRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableBagRef)>>(
          'CFBagRemoveAllValues');
  late final _CFBagRemoveAllValues =
      _CFBagRemoveAllValuesPtr.asFunction<void Function(CFMutableBagRef)>();

  late final ffi.Pointer<CFBinaryHeapCallBacks> _kCFStringBinaryHeapCallBacks =
      _lookup<CFBinaryHeapCallBacks>('kCFStringBinaryHeapCallBacks');

  CFBinaryHeapCallBacks get kCFStringBinaryHeapCallBacks =>
      _kCFStringBinaryHeapCallBacks.ref;

  int CFBinaryHeapGetTypeID() {
    return _CFBinaryHeapGetTypeID();
  }

  late final _CFBinaryHeapGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBinaryHeapGetTypeID');
  late final _CFBinaryHeapGetTypeID =
      _CFBinaryHeapGetTypeIDPtr.asFunction<int Function()>();

  CFBinaryHeapRef CFBinaryHeapCreate(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBinaryHeapCallBacks> callBacks,
    ffi.Pointer<CFBinaryHeapCompareContext> compareContext,
  ) {
    return _CFBinaryHeapCreate(
      allocator,
      capacity,
      callBacks,
      compareContext,
    );
  }

  late final _CFBinaryHeapCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(
              CFAllocatorRef,
              CFIndex,
              ffi.Pointer<CFBinaryHeapCallBacks>,
              ffi.Pointer<CFBinaryHeapCompareContext>)>>('CFBinaryHeapCreate');
  late final _CFBinaryHeapCreate = _CFBinaryHeapCreatePtr.asFunction<
      CFBinaryHeapRef Function(
          CFAllocatorRef,
          int,
          ffi.Pointer<CFBinaryHeapCallBacks>,
          ffi.Pointer<CFBinaryHeapCompareContext>)>();

  CFBinaryHeapRef CFBinaryHeapCreateCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapCreateCopy(
      allocator,
      capacity,
      heap,
    );
  }

  late final _CFBinaryHeapCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(CFAllocatorRef, CFIndex,
              CFBinaryHeapRef)>>('CFBinaryHeapCreateCopy');
  late final _CFBinaryHeapCreateCopy = _CFBinaryHeapCreateCopyPtr.asFunction<
      CFBinaryHeapRef Function(CFAllocatorRef, int, CFBinaryHeapRef)>();

  int CFBinaryHeapGetCount(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetCount(
      heap,
    );
  }

  late final _CFBinaryHeapGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapGetCount');
  late final _CFBinaryHeapGetCount =
      _CFBinaryHeapGetCountPtr.asFunction<int Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetCountOfValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapGetCountOfValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapGetCountOfValue');
  late final _CFBinaryHeapGetCountOfValue = _CFBinaryHeapGetCountOfValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  int CFBinaryHeapContainsValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapContainsValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapContainsValue');
  late final _CFBinaryHeapContainsValue = _CFBinaryHeapContainsValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBinaryHeapGetMinimum(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetMinimum(
      heap,
    );
  }

  late final _CFBinaryHeapGetMinimumPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>>(
      'CFBinaryHeapGetMinimum');
  late final _CFBinaryHeapGetMinimum = _CFBinaryHeapGetMinimumPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetMinimumIfPresent(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBinaryHeapGetMinimumIfPresent(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetMinimumIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBinaryHeapGetMinimumIfPresent');
  late final _CFBinaryHeapGetMinimumIfPresent =
      _CFBinaryHeapGetMinimumIfPresentPtr.asFunction<
          int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapGetValues(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBinaryHeapGetValues(
      heap,
      values,
    );
  }

  late final _CFBinaryHeapGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBinaryHeapGetValues');
  late final _CFBinaryHeapGetValues = _CFBinaryHeapGetValuesPtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapApplyFunction(
    CFBinaryHeapRef heap,
    CFBinaryHeapApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBinaryHeapApplyFunction(
      heap,
      applier,
      context,
    );
  }

  late final _CFBinaryHeapApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapApplyFunction');
  late final _CFBinaryHeapApplyFunction =
      _CFBinaryHeapApplyFunctionPtr.asFunction<
          void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapAddValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapAddValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>>('CFBinaryHeapAddValue');
  late final _CFBinaryHeapAddValue = _CFBinaryHeapAddValuePtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapRemoveMinimumValue(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveMinimumValue(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveMinimumValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveMinimumValue');
  late final _CFBinaryHeapRemoveMinimumValue =
      _CFBinaryHeapRemoveMinimumValuePtr.asFunction<
          void Function(CFBinaryHeapRef)>();

  void CFBinaryHeapRemoveAllValues(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveAllValues(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveAllValues');
  late final _CFBinaryHeapRemoveAllValues = _CFBinaryHeapRemoveAllValuesPtr
      .asFunction<void Function(CFBinaryHeapRef)>();

  int CFBitVectorGetTypeID() {
    return _CFBitVectorGetTypeID();
  }

  late final _CFBitVectorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBitVectorGetTypeID');
  late final _CFBitVectorGetTypeID =
      _CFBitVectorGetTypeIDPtr.asFunction<int Function()>();

  CFBitVectorRef CFBitVectorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int numBits,
  ) {
    return _CFBitVectorCreate(
      allocator,
      bytes,
      numBits,
    );
  }

  late final _CFBitVectorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFBitVectorCreate');
  late final _CFBitVectorCreate = _CFBitVectorCreatePtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFBitVectorRef CFBitVectorCreateCopy(
    CFAllocatorRef allocator,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateCopy(
      allocator,
      bv,
    );
  }

  late final _CFBitVectorCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(
              CFAllocatorRef, CFBitVectorRef)>>('CFBitVectorCreateCopy');
  late final _CFBitVectorCreateCopy = _CFBitVectorCreateCopyPtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, CFBitVectorRef)>();

  CFMutableBitVectorRef CFBitVectorCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFBitVectorCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFBitVectorCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, CFIndex)>>('CFBitVectorCreateMutable');
  late final _CFBitVectorCreateMutable = _CFBitVectorCreateMutablePtr
      .asFunction<CFMutableBitVectorRef Function(CFAllocatorRef, int)>();

  CFMutableBitVectorRef CFBitVectorCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateMutableCopy(
      allocator,
      capacity,
      bv,
    );
  }

  late final _CFBitVectorCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(CFAllocatorRef, CFIndex,
              CFBitVectorRef)>>('CFBitVectorCreateMutableCopy');
  late final _CFBitVectorCreateMutableCopy =
      _CFBitVectorCreateMutableCopyPtr.asFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, int, CFBitVectorRef)>();

  int CFBitVectorGetCount(
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorGetCount(
      bv,
    );
  }

  late final _CFBitVectorGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBitVectorRef)>>(
          'CFBitVectorGetCount');
  late final _CFBitVectorGetCount =
      _CFBitVectorGetCountPtr.asFunction<int Function(CFBitVectorRef)>();

  int CFBitVectorGetCountOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetCountOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetCountOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetCountOfBit');
  late final _CFBitVectorGetCountOfBit = _CFBitVectorGetCountOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorContainsBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorContainsBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorContainsBitPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorContainsBit');
  late final _CFBitVectorContainsBit = _CFBitVectorContainsBitPtr.asFunction<
      int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetBitAtIndex(
    CFBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorGetBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorGetBitAtIndexPtr =
      _lookup<ffi.NativeFunction<CFBit Function(CFBitVectorRef, CFIndex)>>(
          'CFBitVectorGetBitAtIndex');
  late final _CFBitVectorGetBitAtIndex = _CFBitVectorGetBitAtIndexPtr
      .asFunction<int Function(CFBitVectorRef, int)>();

  void CFBitVectorGetBits(
    CFBitVectorRef bv,
    CFRange range,
    ffi.Pointer<UInt8> bytes,
  ) {
    return _CFBitVectorGetBits(
      bv,
      range,
      bytes,
    );
  }

  late final _CFBitVectorGetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBitVectorRef, CFRange,
              ffi.Pointer<UInt8>)>>('CFBitVectorGetBits');
  late final _CFBitVectorGetBits = _CFBitVectorGetBitsPtr.asFunction<
      void Function(CFBitVectorRef, CFRange, ffi.Pointer<UInt8>)>();

  int CFBitVectorGetFirstIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetFirstIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetFirstIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetFirstIndexOfBit');
  late final _CFBitVectorGetFirstIndexOfBit = _CFBitVectorGetFirstIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetLastIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetLastIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetLastIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetLastIndexOfBit');
  late final _CFBitVectorGetLastIndexOfBit = _CFBitVectorGetLastIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  void CFBitVectorSetCount(
    CFMutableBitVectorRef bv,
    int count,
  ) {
    return _CFBitVectorSetCount(
      bv,
      count,
    );
  }

  late final _CFBitVectorSetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorSetCount');
  late final _CFBitVectorSetCount = _CFBitVectorSetCountPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorFlipBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorFlipBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorFlipBitAtIndex');
  late final _CFBitVectorFlipBitAtIndex = _CFBitVectorFlipBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBits(
    CFMutableBitVectorRef bv,
    CFRange range,
  ) {
    return _CFBitVectorFlipBits(
      bv,
      range,
    );
  }

  late final _CFBitVectorFlipBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange)>>('CFBitVectorFlipBits');
  late final _CFBitVectorFlipBits = _CFBitVectorFlipBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange)>();

  void CFBitVectorSetBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
    int value,
  ) {
    return _CFBitVectorSetBitAtIndex(
      bv,
      idx,
      value,
    );
  }

  late final _CFBitVectorSetBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableBitVectorRef, CFIndex,
              CFBit)>>('CFBitVectorSetBitAtIndex');
  late final _CFBitVectorSetBitAtIndex = _CFBitVectorSetBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int, int)>();

  void CFBitVectorSetBits(
    CFMutableBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorSetBits(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorSetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange, CFBit)>>('CFBitVectorSetBits');
  late final _CFBitVectorSetBits = _CFBitVectorSetBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange, int)>();

  void CFBitVectorSetAllBits(
    CFMutableBitVectorRef bv,
    int value,
  ) {
    return _CFBitVectorSetAllBits(
      bv,
      value,
    );
  }

  late final _CFBitVectorSetAllBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFBit)>>(
      'CFBitVectorSetAllBits');
  late final _CFBitVectorSetAllBits = _CFBitVectorSetAllBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFTypeDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFTypeDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFTypeDictionaryKeyCallBacks =>
      _kCFTypeDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFCopyStringDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFCopyStringDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFCopyStringDictionaryKeyCallBacks =>
      _kCFCopyStringDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryValueCallBacks>
      _kCFTypeDictionaryValueCallBacks =
      _lookup<CFDictionaryValueCallBacks>('kCFTypeDictionaryValueCallBacks');

  CFDictionaryValueCallBacks get kCFTypeDictionaryValueCallBacks =>
      _kCFTypeDictionaryValueCallBacks.ref;

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy(
    CFAllocatorRef allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef, CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy = _CFDictionaryCreateCopyPtr.asFunction<
      CFDictionaryRef Function(CFAllocatorRef, CFDictionaryRef)>();

  CFMutableDictionaryRef CFDictionaryCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutablePtr = _lookup<
          ffi.NativeFunction<
              CFMutableDictionaryRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable =
      _CFDictionaryCreateMutablePtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFMutableDictionaryRef CFDictionaryCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(CFAllocatorRef, CFIndex,
              CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy =
      _CFDictionaryCreateMutableCopyPtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef, int, CFDictionaryRef)>();

  int CFDictionaryGetCount(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount(
      theDict,
    );
  }

  late final _CFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount =
      _CFDictionaryGetCountPtr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKeyPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey = _CFDictionaryGetCountOfKeyPtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue = _CFDictionaryGetCountOfValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey = _CFDictionaryContainsKeyPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue = _CFDictionaryContainsValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent =
      _CFDictionaryGetValueIfPresentPtr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues =
      _CFDictionaryGetKeysAndValuesPtr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction =
      _CFDictionaryApplyFunctionPtr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue = _CFDictionaryAddValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue = _CFDictionarySetValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue =
      _CFDictionaryReplaceValuePtr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue = _CFDictionaryRemoveValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues(
    CFMutableDictionaryRef theDict,
  ) {
    return _CFDictionaryRemoveAllValues(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDictionaryRef)>>(
          'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues = _CFDictionaryRemoveAllValuesPtr
      .asFunction<void Function(CFMutableDictionaryRef)>();

  int CFNotificationCenterGetTypeID() {
    return _CFNotificationCenterGetTypeID();
  }

  late final _CFNotificationCenterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNotificationCenterGetTypeID');
  late final _CFNotificationCenterGetTypeID =
      _CFNotificationCenterGetTypeIDPtr.asFunction<int Function()>();

  CFNotificationCenterRef CFNotificationCenterGetLocalCenter() {
    return _CFNotificationCenterGetLocalCenter();
  }

  late final _CFNotificationCenterGetLocalCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetLocalCenter');
  late final _CFNotificationCenterGetLocalCenter =
      _CFNotificationCenterGetLocalCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDistributedCenter() {
    return _CFNotificationCenterGetDistributedCenter();
  }

  late final _CFNotificationCenterGetDistributedCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDistributedCenter');
  late final _CFNotificationCenterGetDistributedCenter =
      _CFNotificationCenterGetDistributedCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter() {
    return _CFNotificationCenterGetDarwinNotifyCenter();
  }

  late final _CFNotificationCenterGetDarwinNotifyCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDarwinNotifyCenter');
  late final _CFNotificationCenterGetDarwinNotifyCenter =
      _CFNotificationCenterGetDarwinNotifyCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  void CFNotificationCenterAddObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationCallback callBack,
    CFStringRef name,
    ffi.Pointer<ffi.Void> object,
    int suspensionBehavior,
  ) {
    return _CFNotificationCenterAddObserver(
      center,
      observer,
      callBack,
      name,
      object,
      suspensionBehavior,
    );
  }

  late final _CFNotificationCenterAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('CFNotificationCenterAddObserver');
  late final _CFNotificationCenterAddObserver =
      _CFNotificationCenterAddObserverPtr.asFunction<
          void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              int)>();

  void CFNotificationCenterRemoveObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
  ) {
    return _CFNotificationCenterRemoveObserver(
      center,
      observer,
      name,
      object,
    );
  }

  late final _CFNotificationCenterRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationName,
              ffi.Pointer<ffi.Void>)>>('CFNotificationCenterRemoveObserver');
  late final _CFNotificationCenterRemoveObserver =
      _CFNotificationCenterRemoveObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
              CFNotificationName, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterRemoveEveryObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
  ) {
    return _CFNotificationCenterRemoveEveryObserver(
      center,
      observer,
    );
  }

  late final _CFNotificationCenterRemoveEveryObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>>(
      'CFNotificationCenterRemoveEveryObserver');
  late final _CFNotificationCenterRemoveEveryObserver =
      _CFNotificationCenterRemoveEveryObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterPostNotification(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int deliverImmediately,
  ) {
    return _CFNotificationCenterPostNotification(
      center,
      name,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  late final _CFNotificationCenterPostNotificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              CFNotificationName,
              ffi.Pointer<ffi.Void>,
              CFDictionaryRef,
              Boolean)>>('CFNotificationCenterPostNotification');
  late final _CFNotificationCenterPostNotification =
      _CFNotificationCenterPostNotificationPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  void CFNotificationCenterPostNotificationWithOptions(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int options,
  ) {
    return _CFNotificationCenterPostNotificationWithOptions(
      center,
      name,
      object,
      userInfo,
      options,
    );
  }

  late final _CFNotificationCenterPostNotificationWithOptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFNotificationCenterRef, CFNotificationName,
                  ffi.Pointer<ffi.Void>, CFDictionaryRef, CFOptionFlags)>>(
      'CFNotificationCenterPostNotificationWithOptions');
  late final _CFNotificationCenterPostNotificationWithOptions =
      _CFNotificationCenterPostNotificationWithOptionsPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  int CFLocaleGetTypeID() {
    return _CFLocaleGetTypeID();
  }

  late final _CFLocaleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFLocaleGetTypeID');
  late final _CFLocaleGetTypeID =
      _CFLocaleGetTypeIDPtr.asFunction<int Function()>();

  CFLocaleRef CFLocaleGetSystem() {
    return _CFLocaleGetSystem();
  }

  late final _CFLocaleGetSystemPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>('CFLocaleGetSystem');
  late final _CFLocaleGetSystem =
      _CFLocaleGetSystemPtr.asFunction<CFLocaleRef Function()>();

  CFLocaleRef CFLocaleCopyCurrent() {
    return _CFLocaleCopyCurrent();
  }

  late final _CFLocaleCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>(
          'CFLocaleCopyCurrent');
  late final _CFLocaleCopyCurrent =
      _CFLocaleCopyCurrentPtr.asFunction<CFLocaleRef Function()>();

  CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers() {
    return _CFLocaleCopyAvailableLocaleIdentifiers();
  }

  late final _CFLocaleCopyAvailableLocaleIdentifiersPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyAvailableLocaleIdentifiers');
  late final _CFLocaleCopyAvailableLocaleIdentifiers =
      _CFLocaleCopyAvailableLocaleIdentifiersPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOLanguageCodes() {
    return _CFLocaleCopyISOLanguageCodes();
  }

  late final _CFLocaleCopyISOLanguageCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOLanguageCodes');
  late final _CFLocaleCopyISOLanguageCodes =
      _CFLocaleCopyISOLanguageCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCountryCodes() {
    return _CFLocaleCopyISOCountryCodes();
  }

  late final _CFLocaleCopyISOCountryCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCountryCodes');
  late final _CFLocaleCopyISOCountryCodes =
      _CFLocaleCopyISOCountryCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCurrencyCodes() {
    return _CFLocaleCopyISOCurrencyCodes();
  }

  late final _CFLocaleCopyISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCurrencyCodes');
  late final _CFLocaleCopyISOCurrencyCodes =
      _CFLocaleCopyISOCurrencyCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyCommonISOCurrencyCodes() {
    return _CFLocaleCopyCommonISOCurrencyCodes();
  }

  late final _CFLocaleCopyCommonISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyCommonISOCurrencyCodes');
  late final _CFLocaleCopyCommonISOCurrencyCodes =
      _CFLocaleCopyCommonISOCurrencyCodesPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyPreferredLanguages() {
    return _CFLocaleCopyPreferredLanguages();
  }

  late final _CFLocaleCopyPreferredLanguagesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyPreferredLanguages');
  late final _CFLocaleCopyPreferredLanguages =
      _CFLocaleCopyPreferredLanguagesPtr.asFunction<CFArrayRef Function()>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLanguageIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLanguageIdentifierFromString');
  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString =
      _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLocaleIdentifierFromString');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString =
      _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier
      CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
    CFAllocatorRef allocator,
    int lcode,
    int rcode,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
      allocator,
      lcode,
      rcode,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr =
      _lookup<
              ffi.NativeFunction<
                  CFLocaleIdentifier Function(
                      CFAllocatorRef, LangCode, RegionCode)>>(
          'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes =
      _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr
          .asFunction<CFLocaleIdentifier Function(CFAllocatorRef, int, int)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
    CFAllocatorRef allocator,
    int lcid,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
      allocator,
      lcid,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, ffi.Uint32)>>(
      'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode');
  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode =
      _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, int)>();

  int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
      localeIdentifier,
    );
  }

  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CFLocaleIdentifier)>>(
          'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier');
  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier =
      _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr.asFunction<
          int Function(CFLocaleIdentifier)>();

  int CFLocaleGetLanguageCharacterDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageCharacterDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageCharacterDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringRef)>>(
          'CFLocaleGetLanguageCharacterDirection');
  late final _CFLocaleGetLanguageCharacterDirection =
      _CFLocaleGetLanguageCharacterDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  int CFLocaleGetLanguageLineDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageLineDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageLineDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringRef)>>(
          'CFLocaleGetLanguageLineDirection');
  late final _CFLocaleGetLanguageLineDirection =
      _CFLocaleGetLanguageLineDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeID,
  ) {
    return _CFLocaleCreateComponentsFromLocaleIdentifier(
      allocator,
      localeID,
    );
  }

  late final _CFLocaleCreateComponentsFromLocaleIdentifierPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>>(
      'CFLocaleCreateComponentsFromLocaleIdentifier');
  late final _CFLocaleCreateComponentsFromLocaleIdentifier =
      _CFLocaleCreateComponentsFromLocaleIdentifierPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(
    CFAllocatorRef allocator,
    CFDictionaryRef dictionary,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromComponents(
      allocator,
      dictionary,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromComponentsPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>>(
      'CFLocaleCreateLocaleIdentifierFromComponents');
  late final _CFLocaleCreateLocaleIdentifierFromComponents =
      _CFLocaleCreateLocaleIdentifierFromComponentsPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>();

  CFLocaleRef CFLocaleCreate(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleCreate(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreatePtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleIdentifier)>>('CFLocaleCreate');
  late final _CFLocaleCreate = _CFLocaleCreatePtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleRef CFLocaleCreateCopy(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
  ) {
    return _CFLocaleCreateCopy(
      allocator,
      locale,
    );
  }

  late final _CFLocaleCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleRef)>>('CFLocaleCreateCopy');
  late final _CFLocaleCreateCopy = _CFLocaleCreateCopyPtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>();

  CFLocaleIdentifier CFLocaleGetIdentifier(
    CFLocaleRef locale,
  ) {
    return _CFLocaleGetIdentifier(
      locale,
    );
  }

  late final _CFLocaleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFLocaleIdentifier Function(CFLocaleRef)>>(
          'CFLocaleGetIdentifier');
  late final _CFLocaleGetIdentifier = _CFLocaleGetIdentifierPtr.asFunction<
      CFLocaleIdentifier Function(CFLocaleRef)>();

  CFTypeRef CFLocaleGetValue(
    CFLocaleRef locale,
    CFLocaleKey key,
  ) {
    return _CFLocaleGetValue(
      locale,
      key,
    );
  }

  late final _CFLocaleGetValuePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFLocaleRef, CFLocaleKey)>>(
          'CFLocaleGetValue');
  late final _CFLocaleGetValue = _CFLocaleGetValuePtr.asFunction<
      CFTypeRef Function(CFLocaleRef, CFLocaleKey)>();

  CFStringRef CFLocaleCopyDisplayNameForPropertyValue(
    CFLocaleRef displayLocale,
    CFLocaleKey key,
    CFStringRef value,
  ) {
    return _CFLocaleCopyDisplayNameForPropertyValue(
      displayLocale,
      key,
      value,
    );
  }

  late final _CFLocaleCopyDisplayNameForPropertyValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey,
              CFStringRef)>>('CFLocaleCopyDisplayNameForPropertyValue');
  late final _CFLocaleCopyDisplayNameForPropertyValue =
      _CFLocaleCopyDisplayNameForPropertyValuePtr.asFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey, CFStringRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFLocaleCurrentLocaleDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFLocaleCurrentLocaleDidChangeNotification');

  CFNotificationName get kCFLocaleCurrentLocaleDidChangeNotification =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value;

  set kCFLocaleCurrentLocaleDidChangeNotification(CFNotificationName value) =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleIdentifier');

  CFLocaleKey get kCFLocaleIdentifier => _kCFLocaleIdentifier.value;

  set kCFLocaleIdentifier(CFLocaleKey value) =>
      _kCFLocaleIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleLanguageCode =
      _lookup<CFLocaleKey>('kCFLocaleLanguageCode');

  CFLocaleKey get kCFLocaleLanguageCode => _kCFLocaleLanguageCode.value;

  set kCFLocaleLanguageCode(CFLocaleKey value) =>
      _kCFLocaleLanguageCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCountryCode =
      _lookup<CFLocaleKey>('kCFLocaleCountryCode');

  CFLocaleKey get kCFLocaleCountryCode => _kCFLocaleCountryCode.value;

  set kCFLocaleCountryCode(CFLocaleKey value) =>
      _kCFLocaleCountryCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleScriptCode =
      _lookup<CFLocaleKey>('kCFLocaleScriptCode');

  CFLocaleKey get kCFLocaleScriptCode => _kCFLocaleScriptCode.value;

  set kCFLocaleScriptCode(CFLocaleKey value) =>
      _kCFLocaleScriptCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleVariantCode =
      _lookup<CFLocaleKey>('kCFLocaleVariantCode');

  CFLocaleKey get kCFLocaleVariantCode => _kCFLocaleVariantCode.value;

  set kCFLocaleVariantCode(CFLocaleKey value) =>
      _kCFLocaleVariantCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleExemplarCharacterSet =
      _lookup<CFLocaleKey>('kCFLocaleExemplarCharacterSet');

  CFLocaleKey get kCFLocaleExemplarCharacterSet =>
      _kCFLocaleExemplarCharacterSet.value;

  set kCFLocaleExemplarCharacterSet(CFLocaleKey value) =>
      _kCFLocaleExemplarCharacterSet.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendarIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCalendarIdentifier');

  CFLocaleKey get kCFLocaleCalendarIdentifier =>
      _kCFLocaleCalendarIdentifier.value;

  set kCFLocaleCalendarIdentifier(CFLocaleKey value) =>
      _kCFLocaleCalendarIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendar =
      _lookup<CFLocaleKey>('kCFLocaleCalendar');

  CFLocaleKey get kCFLocaleCalendar => _kCFLocaleCalendar.value;

  set kCFLocaleCalendar(CFLocaleKey value) => _kCFLocaleCalendar.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollationIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollationIdentifier');

  CFLocaleKey get kCFLocaleCollationIdentifier =>
      _kCFLocaleCollationIdentifier.value;

  set kCFLocaleCollationIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollationIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleUsesMetricSystem =
      _lookup<CFLocaleKey>('kCFLocaleUsesMetricSystem');

  CFLocaleKey get kCFLocaleUsesMetricSystem => _kCFLocaleUsesMetricSystem.value;

  set kCFLocaleUsesMetricSystem(CFLocaleKey value) =>
      _kCFLocaleUsesMetricSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleMeasurementSystem =
      _lookup<CFLocaleKey>('kCFLocaleMeasurementSystem');

  CFLocaleKey get kCFLocaleMeasurementSystem =>
      _kCFLocaleMeasurementSystem.value;

  set kCFLocaleMeasurementSystem(CFLocaleKey value) =>
      _kCFLocaleMeasurementSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleDecimalSeparator =
      _lookup<CFLocaleKey>('kCFLocaleDecimalSeparator');

  CFLocaleKey get kCFLocaleDecimalSeparator => _kCFLocaleDecimalSeparator.value;

  set kCFLocaleDecimalSeparator(CFLocaleKey value) =>
      _kCFLocaleDecimalSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleGroupingSeparator =
      _lookup<CFLocaleKey>('kCFLocaleGroupingSeparator');

  CFLocaleKey get kCFLocaleGroupingSeparator =>
      _kCFLocaleGroupingSeparator.value;

  set kCFLocaleGroupingSeparator(CFLocaleKey value) =>
      _kCFLocaleGroupingSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencySymbol =
      _lookup<CFLocaleKey>('kCFLocaleCurrencySymbol');

  CFLocaleKey get kCFLocaleCurrencySymbol => _kCFLocaleCurrencySymbol.value;

  set kCFLocaleCurrencySymbol(CFLocaleKey value) =>
      _kCFLocaleCurrencySymbol.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencyCode =
      _lookup<CFLocaleKey>('kCFLocaleCurrencyCode');

  CFLocaleKey get kCFLocaleCurrencyCode => _kCFLocaleCurrencyCode.value;

  set kCFLocaleCurrencyCode(CFLocaleKey value) =>
      _kCFLocaleCurrencyCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollatorIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollatorIdentifier');

  CFLocaleKey get kCFLocaleCollatorIdentifier =>
      _kCFLocaleCollatorIdentifier.value;

  set kCFLocaleCollatorIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollatorIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationBeginDelimiterKey =>
      _kCFLocaleQuotationBeginDelimiterKey.value;

  set kCFLocaleQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationEndDelimiterKey =>
      _kCFLocaleQuotationEndDelimiterKey.value;

  set kCFLocaleQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationBeginDelimiterKey =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value;

  set kCFLocaleAlternateQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationEndDelimiterKey =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value;

  set kCFLocaleAlternateQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFGregorianCalendar =
      _lookup<CFCalendarIdentifier>('kCFGregorianCalendar');

  CFCalendarIdentifier get kCFGregorianCalendar => _kCFGregorianCalendar.value;

  set kCFGregorianCalendar(CFCalendarIdentifier value) =>
      _kCFGregorianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFBuddhistCalendar =
      _lookup<CFCalendarIdentifier>('kCFBuddhistCalendar');

  CFCalendarIdentifier get kCFBuddhistCalendar => _kCFBuddhistCalendar.value;

  set kCFBuddhistCalendar(CFCalendarIdentifier value) =>
      _kCFBuddhistCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFChineseCalendar =
      _lookup<CFCalendarIdentifier>('kCFChineseCalendar');

  CFCalendarIdentifier get kCFChineseCalendar => _kCFChineseCalendar.value;

  set kCFChineseCalendar(CFCalendarIdentifier value) =>
      _kCFChineseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFHebrewCalendar =
      _lookup<CFCalendarIdentifier>('kCFHebrewCalendar');

  CFCalendarIdentifier get kCFHebrewCalendar => _kCFHebrewCalendar.value;

  set kCFHebrewCalendar(CFCalendarIdentifier value) =>
      _kCFHebrewCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCalendar');

  CFCalendarIdentifier get kCFIslamicCalendar => _kCFIslamicCalendar.value;

  set kCFIslamicCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCivilCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCivilCalendar');

  CFCalendarIdentifier get kCFIslamicCivilCalendar =>
      _kCFIslamicCivilCalendar.value;

  set kCFIslamicCivilCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCivilCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFJapaneseCalendar =
      _lookup<CFCalendarIdentifier>('kCFJapaneseCalendar');

  CFCalendarIdentifier get kCFJapaneseCalendar => _kCFJapaneseCalendar.value;

  set kCFJapaneseCalendar(CFCalendarIdentifier value) =>
      _kCFJapaneseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFRepublicOfChinaCalendar =
      _lookup<CFCalendarIdentifier>('kCFRepublicOfChinaCalendar');

  CFCalendarIdentifier get kCFRepublicOfChinaCalendar =>
      _kCFRepublicOfChinaCalendar.value;

  set kCFRepublicOfChinaCalendar(CFCalendarIdentifier value) =>
      _kCFRepublicOfChinaCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFPersianCalendar =
      _lookup<CFCalendarIdentifier>('kCFPersianCalendar');

  CFCalendarIdentifier get kCFPersianCalendar => _kCFPersianCalendar.value;

  set kCFPersianCalendar(CFCalendarIdentifier value) =>
      _kCFPersianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIndianCalendar =
      _lookup<CFCalendarIdentifier>('kCFIndianCalendar');

  CFCalendarIdentifier get kCFIndianCalendar => _kCFIndianCalendar.value;

  set kCFIndianCalendar(CFCalendarIdentifier value) =>
      _kCFIndianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFISO8601Calendar =
      _lookup<CFCalendarIdentifier>('kCFISO8601Calendar');

  CFCalendarIdentifier get kCFISO8601Calendar => _kCFISO8601Calendar.value;

  set kCFISO8601Calendar(CFCalendarIdentifier value) =>
      _kCFISO8601Calendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicTabularCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicTabularCalendar');

  CFCalendarIdentifier get kCFIslamicTabularCalendar =>
      _kCFIslamicTabularCalendar.value;

  set kCFIslamicTabularCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicTabularCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicUmmAlQuraCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicUmmAlQuraCalendar');

  CFCalendarIdentifier get kCFIslamicUmmAlQuraCalendar =>
      _kCFIslamicUmmAlQuraCalendar.value;

  set kCFIslamicUmmAlQuraCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicUmmAlQuraCalendar.value = value;

  double CFAbsoluteTimeGetCurrent() {
    return _CFAbsoluteTimeGetCurrent();
  }

  late final _CFAbsoluteTimeGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function()>>(
          'CFAbsoluteTimeGetCurrent');
  late final _CFAbsoluteTimeGetCurrent =
      _CFAbsoluteTimeGetCurrentPtr.asFunction<double Function()>();

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1970 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1970');

  double get kCFAbsoluteTimeIntervalSince1970 =>
      _kCFAbsoluteTimeIntervalSince1970.value;

  set kCFAbsoluteTimeIntervalSince1970(double value) =>
      _kCFAbsoluteTimeIntervalSince1970.value = value;

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1904 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1904');

  double get kCFAbsoluteTimeIntervalSince1904 =>
      _kCFAbsoluteTimeIntervalSince1904.value;

  set kCFAbsoluteTimeIntervalSince1904(double value) =>
      _kCFAbsoluteTimeIntervalSince1904.value = value;

  int CFDateGetTypeID() {
    return _CFDateGetTypeID();
  }

  late final _CFDateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDateGetTypeID');
  late final _CFDateGetTypeID =
      _CFDateGetTypeIDPtr.asFunction<int Function()>();

  CFDateRef CFDateCreate(
    CFAllocatorRef allocator,
    double at,
  ) {
    return _CFDateCreate(
      allocator,
      at,
    );
  }

  late final _CFDateCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFAbsoluteTime)>>('CFDateCreate');
  late final _CFDateCreate =
      _CFDateCreatePtr.asFunction<CFDateRef Function(CFAllocatorRef, double)>();

  double CFDateGetAbsoluteTime(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime =
      _CFDateGetAbsoluteTimePtr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDatePtr = _lookup<
          ffi.NativeFunction<CFTimeInterval Function(CFDateRef, CFDateRef)>>(
      'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate =
      _CFDateGetTimeIntervalSinceDatePtr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  int CFDateCompare(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDateCompare(
      theDate,
      otherDate,
      context,
    );
  }

  late final _CFDateComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare = _CFDateComparePtr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFGregorianDateIsValid(
    CFGregorianDate gdate,
    int unitFlags,
  ) {
    return _CFGregorianDateIsValid(
      gdate,
      unitFlags,
    );
  }

  late final _CFGregorianDateIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFGregorianDate, CFOptionFlags)>>(
      'CFGregorianDateIsValid');
  late final _CFGregorianDateIsValid = _CFGregorianDateIsValidPtr.asFunction<
      int Function(CFGregorianDate, int)>();

  double CFGregorianDateGetAbsoluteTime(
    CFGregorianDate gdate,
    CFTimeZoneRef tz,
  ) {
    return _CFGregorianDateGetAbsoluteTime(
      gdate,
      tz,
    );
  }

  late final _CFGregorianDateGetAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFGregorianDate,
              CFTimeZoneRef)>>('CFGregorianDateGetAbsoluteTime');
  late final _CFGregorianDateGetAbsoluteTime =
      _CFGregorianDateGetAbsoluteTimePtr.asFunction<
          double Function(CFGregorianDate, CFTimeZoneRef)>();

  CFGregorianDate CFAbsoluteTimeGetGregorianDate(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetGregorianDate(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetGregorianDatePtr = _lookup<
      ffi.NativeFunction<
          CFGregorianDate Function(CFAbsoluteTime,
              CFTimeZoneRef)>>('CFAbsoluteTimeGetGregorianDate');
  late final _CFAbsoluteTimeGetGregorianDate =
      _CFAbsoluteTimeGetGregorianDatePtr.asFunction<
          CFGregorianDate Function(double, CFTimeZoneRef)>();

  double CFAbsoluteTimeAddGregorianUnits(
    double at,
    CFTimeZoneRef tz,
    CFGregorianUnits units,
  ) {
    return _CFAbsoluteTimeAddGregorianUnits(
      at,
      tz,
      units,
    );
  }

  late final _CFAbsoluteTimeAddGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFAbsoluteTime, CFTimeZoneRef,
              CFGregorianUnits)>>('CFAbsoluteTimeAddGregorianUnits');
  late final _CFAbsoluteTimeAddGregorianUnits =
      _CFAbsoluteTimeAddGregorianUnitsPtr.asFunction<
          double Function(double, CFTimeZoneRef, CFGregorianUnits)>();

  CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(
    double at1,
    double at2,
    CFTimeZoneRef tz,
    int unitFlags,
  ) {
    return _CFAbsoluteTimeGetDifferenceAsGregorianUnits(
      at1,
      at2,
      tz,
      unitFlags,
    );
  }

  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFGregorianUnits Function(
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFTimeZoneRef,
              CFOptionFlags)>>('CFAbsoluteTimeGetDifferenceAsGregorianUnits');
  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits =
      _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr.asFunction<
          CFGregorianUnits Function(double, double, CFTimeZoneRef, int)>();

  int CFAbsoluteTimeGetDayOfWeek(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfWeek(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfWeekPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfWeek');
  late final _CFAbsoluteTimeGetDayOfWeek = _CFAbsoluteTimeGetDayOfWeekPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetDayOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfYear');
  late final _CFAbsoluteTimeGetDayOfYear = _CFAbsoluteTimeGetDayOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetWeekOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetWeekOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetWeekOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetWeekOfYear');
  late final _CFAbsoluteTimeGetWeekOfYear = _CFAbsoluteTimeGetWeekOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFDataGetTypeID() {
    return _CFDataGetTypeID();
  }

  late final _CFDataGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID =
      _CFDataGetTypeIDPtr.asFunction<int Function()>();

  CFDataRef CFDataCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy =
      _CFDataCreateWithBytesNoCopyPtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy = _CFDataCreateCopyPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable = _CFDataCreateMutablePtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy = _CFDataCreateMutableCopyPtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength(
    CFDataRef theData,
  ) {
    return _CFDataGetLength(
      theData,
    );
  }

  late final _CFDataGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength =
      _CFDataGetLengthPtr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr =
      _CFDataGetBytePtrPtr.asFunction<ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr = _CFDataGetMutableBytePtrPtr.asFunction<
      ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes = _CFDataGetBytesPtr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength(
      theData,
      length,
    );
  }

  late final _CFDataSetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength =
      _CFDataSetLengthPtr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength = _CFDataIncreaseLengthPtr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes = _CFDataAppendBytesPtr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes = _CFDataReplaceBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes = _CFDataDeleteBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    int compareOptions,
  ) {
    return _CFDataFind(
      theData,
      dataToFind,
      searchRange,
      compareOptions,
    );
  }

  late final _CFDataFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, ffi.Int32)>>('CFDataFind');
  late final _CFDataFind = _CFDataFindPtr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID() {
    return _CFCharacterSetGetTypeID();
  }

  late final _CFCharacterSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID =
      _CFCharacterSetGetTypeIDPtr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined(
    int theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined(
      theSetIdentifier,
    );
  }

  late final _CFCharacterSetGetPredefinedPtr =
      _lookup<ffi.NativeFunction<CFCharacterSetRef Function(ffi.Int32)>>(
          'CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined = _CFCharacterSetGetPredefinedPtr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFRange)>>('CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange =
      _CFCharacterSetCreateWithCharactersInRangePtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString =
      _CFCharacterSetCreateWithCharactersInStringPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation =
      _CFCharacterSetCreateWithBitmapRepresentationPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSetPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet =
      _CFCharacterSetCreateInvertedSetPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet = _CFCharacterSetIsSupersetOfSetPtr
      .asFunction<int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlanePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane =
      _CFCharacterSetHasMemberInPlanePtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef)>>('CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable = _CFCharacterSetCreateMutablePtr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy =
      _CFCharacterSetCreateCopyPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy =
      _CFCharacterSetCreateMutableCopyPtr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMemberPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember =
      _CFCharacterSetIsCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMemberPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember =
      _CFCharacterSetIsLongCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation =
      _CFCharacterSetCreateBitmapRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange =
      _CFCharacterSetAddCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange =
      _CFCharacterSetRemoveCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString =
      _CFCharacterSetAddCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString =
      _CFCharacterSetRemoveCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion = _CFCharacterSetUnionPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect = _CFCharacterSetIntersectPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert(
      theSet,
    );
  }

  late final _CFCharacterSetInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert = _CFCharacterSetInvertPtr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString =
      _CFStringCreateWithPascalStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param, int)>();

  CFStringRef CFStringCreateWithCString(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, Boolean)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      CFStringRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharactersPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters =
      _CFStringCreateWithCharactersPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ConstStr255Param,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy =
      _CFStringCreateWithPascalStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ConstStr255Param, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCStringNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy =
      _CFStringCreateWithCStringNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int,
              CFAllocatorRef)>();

  CFStringRef CFStringCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              Boolean,
              CFAllocatorRef)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy =
      _CFStringCreateWithBytesNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int,
              int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, CFIndex,
              CFAllocatorRef)>>('CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy =
      _CFStringCreateWithCharactersNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UniChar>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring = _CFStringCreateWithSubstringPtr
      .asFunction<CFStringRef Function(CFAllocatorRef, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef)>>('CFStringCreateCopy');
  late final _CFStringCreateCopy = _CFStringCreateCopyPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormatPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat =
      _CFStringCreateWithFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments =
      _CFStringCreateWithFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDictionaryRef, CFStringRef, va_list)>();

  CFMutableStringRef CFStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable = _CFStringCreateMutablePtr.asFunction<
      CFMutableStringRef Function(CFAllocatorRef, int)>();

  CFMutableStringRef CFStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(CFAllocatorRef, CFIndex,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy =
      _CFStringCreateMutableCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, int, CFStringRef)>();

  CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    int capacity,
    CFAllocatorRef externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
                  CFIndex, CFIndex, CFAllocatorRef)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy =
      _CFStringCreateMutableWithExternalCharactersNoCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int,
              int, CFAllocatorRef)>();

  int CFStringGetLength(
    CFStringRef theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndexPtr =
      _lookup<ffi.NativeFunction<UniChar Function(CFStringRef, CFIndex)>>(
          'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex = _CFStringGetCharacterAtIndexPtr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<UniChar> buffer,
  ) {
    return _CFStringGetCharacters(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<UniChar>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters = _CFStringGetCharactersPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<UniChar>)>();

  int CFStringGetPascalString(
    CFStringRef theString,
    StringPtr buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, StringPtr, CFIndex,
              CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString = _CFStringGetPascalStringPtr.asFunction<
      int Function(CFStringRef, StringPtr, int, int)>();

  int CFStringGetCString(
    CFStringRef theString,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, CFIndex,
              CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString = _CFStringGetCStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  ConstStringPtr CFStringGetPascalStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ConstStringPtr Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr1 = _CFStringGetPascalStringPtrPtr
      .asFunction<ConstStringPtr Function(CFStringRef, int)>();

  ffi.Pointer<pkg_ffi.Char> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr1 = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<UniChar> CFStringGetCharactersPtr(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr1(
      theString,
    );
  }

  late final _CFStringGetCharactersPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UniChar> Function(CFStringRef)>>(
          'CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr1 = _CFStringGetCharactersPtrPtr
      .asFunction<ffi.Pointer<UniChar> Function(CFStringRef)>();

  int CFStringGetBytes(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
    ffi.Pointer<CFIndex> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              UInt8,
              Boolean,
              ffi.Pointer<UInt8>,
              CFIndex,
              ffi.Pointer<CFIndex>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int, ffi.Pointer<UInt8>, int,
          ffi.Pointer<CFIndex>)>();

  CFStringRef CFStringCreateFromExternalRepresentation(
    CFAllocatorRef alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation =
      _CFStringCreateFromExternalRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation(
    CFAllocatorRef alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, CFStringEncoding,
              UInt8)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation =
      _CFStringCreateExternalRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding(
      theString,
    );
  }

  late final _CFStringGetSmallestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding =
      _CFStringGetSmallestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding(
      theString,
    );
  }

  late final _CFStringGetFastestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding =
      _CFStringGetFastestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding() {
    return _CFStringGetSystemEncoding();
  }

  late final _CFStringGetSystemEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding =
      _CFStringGetSystemEncodingPtr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncodingPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFIndex, CFStringEncoding)>>(
          'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding =
      _CFStringGetMaximumSizeForEncodingPtr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation(
    CFStringRef string,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFIndex)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation =
      _CFStringGetFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation =
      _CFStringGetMaximumSizeOfFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentationPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation =
      _CFStringCreateWithFileSystemRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>();

  int CFStringCompareWithOptionsAndLocale(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
    CFLocaleRef locale,
  ) {
    return _CFStringCompareWithOptionsAndLocale(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
      locale,
    );
  }

  late final _CFStringCompareWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringRef, CFStringRef, CFRange, ffi.Int32,
              CFLocaleRef)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale =
      _CFStringCompareWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  int CFStringCompareWithOptions(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
  ) {
    return _CFStringCompareWithOptions(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
    );
  }

  late final _CFStringCompareWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringRef, CFStringRef, CFRange,
              ffi.Int32)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions = _CFStringCompareWithOptionsPtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  int CFStringCompare(
    CFStringRef theString1,
    CFStringRef theString2,
    int compareOptions,
  ) {
    return _CFStringCompare(
      theString1,
      theString2,
      compareOptions,
    );
  }

  late final _CFStringComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFStringRef, CFStringRef, ffi.Int32)>>('CFStringCompare');
  late final _CFStringCompare = _CFStringComparePtr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  int CFStringFindWithOptionsAndLocale(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    CFLocaleRef locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              ffi.Int32,
              CFLocaleRef,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale =
      _CFStringFindWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef,
              ffi.Pointer<CFRange>)>();

  int CFStringFindWithOptions(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef, CFRange, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions = _CFStringFindWithOptionsPtr.asFunction<
      int Function(
          CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  CFArrayRef CFStringCreateArrayWithFindResults(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringCreateArrayWithFindResultsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef, CFRange,
              ffi.Int32)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults =
      _CFStringCreateArrayWithFindResultsPtr.asFunction<
          CFArrayRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind(
    CFStringRef theString,
    CFStringRef stringToFind,
    int compareOptions,
  ) {
    return _CFStringFind(
      theString,
      stringToFind,
      compareOptions,
    );
  }

  late final _CFStringFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, ffi.Int32)>>('CFStringFind');
  late final _CFStringFind = _CFStringFindPtr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasPrefix');
  late final _CFStringHasPrefix = _CFStringHasPrefixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasSuffix');
  late final _CFStringHasSuffix = _CFStringHasSuffixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndexPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, CFIndex)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex =
      _CFStringGetRangeOfComposedCharactersAtIndexPtr.asFunction<
          CFRange Function(CFStringRef, int)>();

  int CFStringFindCharacterFromSet(
    CFStringRef theString,
    CFCharacterSetRef theSet,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet(
      theString,
      theSet,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindCharacterFromSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFCharacterSetRef, CFRange, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet =
      _CFStringFindCharacterFromSetPtr.asFunction<
          int Function(CFStringRef, CFCharacterSetRef, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<CFIndex> lineBeginIndex,
    ffi.Pointer<CFIndex> lineEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds = _CFStringGetLineBoundsPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
          ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  void CFStringGetParagraphBounds(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<CFIndex> parBeginIndex,
    ffi.Pointer<CFIndex> parEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds =
      _CFStringGetParagraphBoundsPtr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  int CFStringGetHyphenationLocationBeforeIndex(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    CFLocaleRef locale,
    ffi.Pointer<UTF32Char> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndexPtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(CFStringRef, CFIndex, CFRange, CFOptionFlags,
                  CFLocaleRef, ffi.Pointer<UTF32Char>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex =
      _CFStringGetHyphenationLocationBeforeIndexPtr.asFunction<
          int Function(CFStringRef, int, CFRange, int, CFLocaleRef,
              ffi.Pointer<UTF32Char>)>();

  int CFStringIsHyphenationAvailableForLocale(
    CFLocaleRef locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocalePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFLocaleRef)>>(
          'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale =
      _CFStringIsHyphenationAvailableForLocalePtr.asFunction<
          int Function(CFLocaleRef)>();

  CFStringRef CFStringCreateByCombiningStrings(
    CFAllocatorRef alloc,
    CFArrayRef theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStringsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings =
      _CFStringCreateByCombiningStringsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef, CFStringRef)>();

  CFArrayRef CFStringCreateArrayBySeparatingStrings(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStringsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings =
      _CFStringCreateArrayBySeparatingStringsPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue(
      str,
    );
  }

  late final _CFStringGetIntValuePtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue =
      _CFStringGetIntValuePtr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue(
      str,
    );
  }

  late final _CFStringGetDoubleValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue =
      _CFStringGetDoubleValuePtr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend(
    CFMutableStringRef theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringAppend');
  late final _CFStringAppend = _CFStringAppendPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringAppendCharacters(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters =
      _CFStringAppendCharactersPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int)>();

  void CFStringAppendPascalString(
    CFMutableStringRef theString,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString = _CFStringAppendPascalStringPtr
      .asFunction<void Function(CFMutableStringRef, ConstStr255Param, int)>();

  void CFStringAppendCString(
    CFMutableStringRef theString,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString = _CFStringAppendCStringPtr.asFunction<
      void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  void CFStringAppendFormat(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat = _CFStringAppendFormatPtr.asFunction<
      void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringAppendFormatAndArguments(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments =
      _CFStringAppendFormatAndArgumentsPtr.asFunction<
          void Function(
              CFMutableStringRef, CFDictionaryRef, CFStringRef, va_list)>();

  void CFStringInsert(
    CFMutableStringRef str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFIndex, CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert = _CFStringInsertPtr.asFunction<
      void Function(CFMutableStringRef, int, CFStringRef)>();

  void CFStringDelete(
    CFMutableStringRef theString,
    CFRange range,
  ) {
    return _CFStringDelete(
      theString,
      range,
    );
  }

  late final _CFStringDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete = _CFStringDeletePtr.asFunction<
      void Function(CFMutableStringRef, CFRange)>();

  void CFStringReplace(
    CFMutableStringRef theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFRange, CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace = _CFStringReplacePtr.asFunction<
      void Function(CFMutableStringRef, CFRange, CFStringRef)>();

  void CFStringReplaceAll(
    CFMutableStringRef theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringReplaceAll');
  late final _CFStringReplaceAll = _CFStringReplaceAllPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  int CFStringFindAndReplace(
    CFMutableStringRef theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringFindAndReplace(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringFindAndReplacePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFMutableStringRef, CFStringRef, CFStringRef,
              CFRange, ffi.Int32)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace = _CFStringFindAndReplacePtr.asFunction<
      int Function(
          CFMutableStringRef, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>, CFIndex,
              CFIndex)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy =
      _CFStringSetExternalCharactersNoCopyPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int, int)>();

  void CFStringPad(
    CFMutableStringRef theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef, CFIndex,
              CFIndex)>>('CFStringPad');
  late final _CFStringPad = _CFStringPadPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef, int, int)>();

  void CFStringTrim(
    CFMutableStringRef theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim(
      theString,
      trimString,
    );
  }

  late final _CFStringTrimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim = _CFStringTrimPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringTrimWhitespace(
    CFMutableStringRef theString,
  ) {
    return _CFStringTrimWhitespace(
      theString,
    );
  }

  late final _CFStringTrimWhitespacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableStringRef)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace = _CFStringTrimWhitespacePtr.asFunction<
      void Function(CFMutableStringRef)>();

  void CFStringLowercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringLowercase(
      theString,
      locale,
    );
  }

  late final _CFStringLowercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringLowercase');
  late final _CFStringLowercase = _CFStringLowercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringUppercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringUppercase(
      theString,
      locale,
    );
  }

  late final _CFStringUppercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringUppercase');
  late final _CFStringUppercase = _CFStringUppercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringCapitalize(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringCapitalize(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringCapitalize');
  late final _CFStringCapitalize = _CFStringCapitalizePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringNormalize(
    CFMutableStringRef theString,
    int theForm,
  ) {
    return _CFStringNormalize(
      theString,
      theForm,
    );
  }

  late final _CFStringNormalizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, ffi.Int32)>>(
      'CFStringNormalize');
  late final _CFStringNormalize = _CFStringNormalizePtr.asFunction<
      void Function(CFMutableStringRef, int)>();

  void CFStringFold(
    CFMutableStringRef theString,
    int theFlags,
    CFLocaleRef theLocale,
  ) {
    return _CFStringFold(
      theString,
      theFlags,
      theLocale,
    );
  }

  late final _CFStringFoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, ffi.Int32, CFLocaleRef)>>('CFStringFold');
  late final _CFStringFold = _CFStringFoldPtr.asFunction<
      void Function(CFMutableStringRef, int, CFLocaleRef)>();

  int CFStringTransform(
    CFMutableStringRef string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransformPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFMutableStringRef, ffi.Pointer<CFRange>,
              CFStringRef, Boolean)>>('CFStringTransform');
  late final _CFStringTransform = _CFStringTransformPtr.asFunction<
      int Function(
          CFMutableStringRef, ffi.Pointer<CFRange>, CFStringRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripCombiningMarks =
      _lookup<CFStringRef>('kCFStringTransformStripCombiningMarks');

  CFStringRef get kCFStringTransformStripCombiningMarks =>
      _kCFStringTransformStripCombiningMarks.value;

  set kCFStringTransformStripCombiningMarks(CFStringRef value) =>
      _kCFStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToLatin =
      _lookup<CFStringRef>('kCFStringTransformToLatin');

  CFStringRef get kCFStringTransformToLatin => _kCFStringTransformToLatin.value;

  set kCFStringTransformToLatin(CFStringRef value) =>
      _kCFStringTransformToLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformFullwidthHalfwidth =
      _lookup<CFStringRef>('kCFStringTransformFullwidthHalfwidth');

  CFStringRef get kCFStringTransformFullwidthHalfwidth =>
      _kCFStringTransformFullwidthHalfwidth.value;

  set kCFStringTransformFullwidthHalfwidth(CFStringRef value) =>
      _kCFStringTransformFullwidthHalfwidth.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinKatakana =
      _lookup<CFStringRef>('kCFStringTransformLatinKatakana');

  CFStringRef get kCFStringTransformLatinKatakana =>
      _kCFStringTransformLatinKatakana.value;

  set kCFStringTransformLatinKatakana(CFStringRef value) =>
      _kCFStringTransformLatinKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHiragana =
      _lookup<CFStringRef>('kCFStringTransformLatinHiragana');

  CFStringRef get kCFStringTransformLatinHiragana =>
      _kCFStringTransformLatinHiragana.value;

  set kCFStringTransformLatinHiragana(CFStringRef value) =>
      _kCFStringTransformLatinHiragana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformHiraganaKatakana =
      _lookup<CFStringRef>('kCFStringTransformHiraganaKatakana');

  CFStringRef get kCFStringTransformHiraganaKatakana =>
      _kCFStringTransformHiraganaKatakana.value;

  set kCFStringTransformHiraganaKatakana(CFStringRef value) =>
      _kCFStringTransformHiraganaKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformMandarinLatin =
      _lookup<CFStringRef>('kCFStringTransformMandarinLatin');

  CFStringRef get kCFStringTransformMandarinLatin =>
      _kCFStringTransformMandarinLatin.value;

  set kCFStringTransformMandarinLatin(CFStringRef value) =>
      _kCFStringTransformMandarinLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHangul =
      _lookup<CFStringRef>('kCFStringTransformLatinHangul');

  CFStringRef get kCFStringTransformLatinHangul =>
      _kCFStringTransformLatinHangul.value;

  set kCFStringTransformLatinHangul(CFStringRef value) =>
      _kCFStringTransformLatinHangul.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinArabic =
      _lookup<CFStringRef>('kCFStringTransformLatinArabic');

  CFStringRef get kCFStringTransformLatinArabic =>
      _kCFStringTransformLatinArabic.value;

  set kCFStringTransformLatinArabic(CFStringRef value) =>
      _kCFStringTransformLatinArabic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHebrew =
      _lookup<CFStringRef>('kCFStringTransformLatinHebrew');

  CFStringRef get kCFStringTransformLatinHebrew =>
      _kCFStringTransformLatinHebrew.value;

  set kCFStringTransformLatinHebrew(CFStringRef value) =>
      _kCFStringTransformLatinHebrew.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinThai =
      _lookup<CFStringRef>('kCFStringTransformLatinThai');

  CFStringRef get kCFStringTransformLatinThai =>
      _kCFStringTransformLatinThai.value;

  set kCFStringTransformLatinThai(CFStringRef value) =>
      _kCFStringTransformLatinThai.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinCyrillic =
      _lookup<CFStringRef>('kCFStringTransformLatinCyrillic');

  CFStringRef get kCFStringTransformLatinCyrillic =>
      _kCFStringTransformLatinCyrillic.value;

  set kCFStringTransformLatinCyrillic(CFStringRef value) =>
      _kCFStringTransformLatinCyrillic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinGreek =
      _lookup<CFStringRef>('kCFStringTransformLatinGreek');

  CFStringRef get kCFStringTransformLatinGreek =>
      _kCFStringTransformLatinGreek.value;

  set kCFStringTransformLatinGreek(CFStringRef value) =>
      _kCFStringTransformLatinGreek.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToXMLHex =
      _lookup<CFStringRef>('kCFStringTransformToXMLHex');

  CFStringRef get kCFStringTransformToXMLHex =>
      _kCFStringTransformToXMLHex.value;

  set kCFStringTransformToXMLHex(CFStringRef value) =>
      _kCFStringTransformToXMLHex.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToUnicodeName =
      _lookup<CFStringRef>('kCFStringTransformToUnicodeName');

  CFStringRef get kCFStringTransformToUnicodeName =>
      _kCFStringTransformToUnicodeName.value;

  set kCFStringTransformToUnicodeName(CFStringRef value) =>
      _kCFStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripDiacritics =
      _lookup<CFStringRef>('kCFStringTransformStripDiacritics');

  CFStringRef get kCFStringTransformStripDiacritics =>
      _kCFStringTransformStripDiacritics.value;

  set kCFStringTransformStripDiacritics(CFStringRef value) =>
      _kCFStringTransformStripDiacritics.value = value;

  int CFStringIsEncodingAvailable(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable =
      _CFStringIsEncodingAvailablePtr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings() {
    return _CFStringGetListOfAvailableEncodings();
  }

  late final _CFStringGetListOfAvailableEncodingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings =
      _CFStringGetListOfAvailableEncodingsPtr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding =
      _CFStringGetNameOfEncodingPtr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncodingPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.UnsignedLong Function(CFStringEncoding)>>(
      'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding =
      _CFStringConvertEncodingToNSStringEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncodingPtr = _lookup<
          ffi.NativeFunction<CFStringEncoding Function(pkg_ffi.UnsignedLong)>>(
      'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding =
      _CFStringConvertNSStringEncodingToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepagePtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage =
      _CFStringConvertEncodingToWindowsCodepagePtr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(UInt32)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding =
      _CFStringConvertWindowsCodepageToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding =
      _CFStringConvertIANACharSetNameToEncodingPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName =
      _CFStringConvertEncodingToIANACharSetNamePtr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding =
      _CFStringGetMostCompatibleMacStringEncodingPtr.asFunction<
          int Function(int)>();

  void CFShow(
    CFTypeRef obj,
  ) {
    return _CFShow(
      obj,
    );
  }

  late final _CFShowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFShow');
  late final _CFShow = _CFShowPtr.asFunction<void Function(CFTypeRef)>();

  void CFShowStr(
    CFStringRef str,
  ) {
    return _CFShowStr(
      str,
    );
  }

  late final _CFShowStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef)>>('CFShowStr');
  late final _CFShowStr =
      _CFShowStrPtr.asFunction<void Function(CFStringRef)>();

  CFStringRef __CFStringMakeConstantString(
    ffi.Pointer<pkg_ffi.Char> cStr,
  ) {
    return ___CFStringMakeConstantString(
      cStr,
    );
  }

  late final ___CFStringMakeConstantStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>>(
      '__CFStringMakeConstantString');
  late final ___CFStringMakeConstantString = ___CFStringMakeConstantStringPtr
      .asFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>();

  int CFTimeZoneGetTypeID() {
    return _CFTimeZoneGetTypeID();
  }

  late final _CFTimeZoneGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTimeZoneGetTypeID');
  late final _CFTimeZoneGetTypeID =
      _CFTimeZoneGetTypeIDPtr.asFunction<int Function()>();

  CFTimeZoneRef CFTimeZoneCopySystem() {
    return _CFTimeZoneCopySystem();
  }

  late final _CFTimeZoneCopySystemPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopySystem');
  late final _CFTimeZoneCopySystem =
      _CFTimeZoneCopySystemPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneResetSystem() {
    return _CFTimeZoneResetSystem();
  }

  late final _CFTimeZoneResetSystemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFTimeZoneResetSystem');
  late final _CFTimeZoneResetSystem =
      _CFTimeZoneResetSystemPtr.asFunction<void Function()>();

  CFTimeZoneRef CFTimeZoneCopyDefault() {
    return _CFTimeZoneCopyDefault();
  }

  late final _CFTimeZoneCopyDefaultPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopyDefault');
  late final _CFTimeZoneCopyDefault =
      _CFTimeZoneCopyDefaultPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneSetDefault(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneSetDefault(
      tz,
    );
  }

  late final _CFTimeZoneSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTimeZoneRef)>>(
          'CFTimeZoneSetDefault');
  late final _CFTimeZoneSetDefault =
      _CFTimeZoneSetDefaultPtr.asFunction<void Function(CFTimeZoneRef)>();

  CFArrayRef CFTimeZoneCopyKnownNames() {
    return _CFTimeZoneCopyKnownNames();
  }

  late final _CFTimeZoneCopyKnownNamesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFTimeZoneCopyKnownNames');
  late final _CFTimeZoneCopyKnownNames =
      _CFTimeZoneCopyKnownNamesPtr.asFunction<CFArrayRef Function()>();

  CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary() {
    return _CFTimeZoneCopyAbbreviationDictionary();
  }

  late final _CFTimeZoneCopyAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function()>>(
          'CFTimeZoneCopyAbbreviationDictionary');
  late final _CFTimeZoneCopyAbbreviationDictionary =
      _CFTimeZoneCopyAbbreviationDictionaryPtr.asFunction<
          CFDictionaryRef Function()>();

  void CFTimeZoneSetAbbreviationDictionary(
    CFDictionaryRef dict,
  ) {
    return _CFTimeZoneSetAbbreviationDictionary(
      dict,
    );
  }

  late final _CFTimeZoneSetAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFDictionaryRef)>>(
          'CFTimeZoneSetAbbreviationDictionary');
  late final _CFTimeZoneSetAbbreviationDictionary =
      _CFTimeZoneSetAbbreviationDictionaryPtr.asFunction<
          void Function(CFDictionaryRef)>();

  CFTimeZoneRef CFTimeZoneCreate(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFDataRef data,
  ) {
    return _CFTimeZoneCreate(
      allocator,
      name,
      data,
    );
  }

  late final _CFTimeZoneCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(
              CFAllocatorRef, CFStringRef, CFDataRef)>>('CFTimeZoneCreate');
  late final _CFTimeZoneCreate = _CFTimeZoneCreatePtr.asFunction<
      CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(
    CFAllocatorRef allocator,
    double ti,
  ) {
    return _CFTimeZoneCreateWithTimeIntervalFromGMT(
      allocator,
      ti,
    );
  }

  late final _CFTimeZoneCreateWithTimeIntervalFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef,
              CFTimeInterval)>>('CFTimeZoneCreateWithTimeIntervalFromGMT');
  late final _CFTimeZoneCreateWithTimeIntervalFromGMT =
      _CFTimeZoneCreateWithTimeIntervalFromGMTPtr.asFunction<
          CFTimeZoneRef Function(CFAllocatorRef, double)>();

  CFTimeZoneRef CFTimeZoneCreateWithName(
    CFAllocatorRef allocator,
    CFStringRef name,
    int tryAbbrev,
  ) {
    return _CFTimeZoneCreateWithName(
      allocator,
      name,
      tryAbbrev,
    );
  }

  late final _CFTimeZoneCreateWithNamePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef, CFStringRef,
              Boolean)>>('CFTimeZoneCreateWithName');
  late final _CFTimeZoneCreateWithName = _CFTimeZoneCreateWithNamePtr
      .asFunction<CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, int)>();

  CFStringRef CFTimeZoneGetName(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetName(
      tz,
    );
  }

  late final _CFTimeZoneGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetName');
  late final _CFTimeZoneGetName =
      _CFTimeZoneGetNamePtr.asFunction<CFStringRef Function(CFTimeZoneRef)>();

  CFDataRef CFTimeZoneGetData(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetData(
      tz,
    );
  }

  late final _CFTimeZoneGetDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetData');
  late final _CFTimeZoneGetData =
      _CFTimeZoneGetDataPtr.asFunction<CFDataRef Function(CFTimeZoneRef)>();

  double CFTimeZoneGetSecondsFromGMT(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetSecondsFromGMT(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetSecondsFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneGetSecondsFromGMT');
  late final _CFTimeZoneGetSecondsFromGMT = _CFTimeZoneGetSecondsFromGMTPtr
      .asFunction<double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyAbbreviation(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneCopyAbbreviation(
      tz,
      at,
    );
  }

  late final _CFTimeZoneCopyAbbreviationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneCopyAbbreviation');
  late final _CFTimeZoneCopyAbbreviation = _CFTimeZoneCopyAbbreviationPtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, double)>();

  int CFTimeZoneIsDaylightSavingTime(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneIsDaylightSavingTime(
      tz,
      at,
    );
  }

  late final _CFTimeZoneIsDaylightSavingTimePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneIsDaylightSavingTime');
  late final _CFTimeZoneIsDaylightSavingTime =
      _CFTimeZoneIsDaylightSavingTimePtr.asFunction<
          int Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetDaylightSavingTimeOffset(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetDaylightSavingTimeOffset(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetDaylightSavingTimeOffsetPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(CFTimeZoneRef,
              CFAbsoluteTime)>>('CFTimeZoneGetDaylightSavingTimeOffset');
  late final _CFTimeZoneGetDaylightSavingTimeOffset =
      _CFTimeZoneGetDaylightSavingTimeOffsetPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetNextDaylightSavingTimeTransition(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetNextDaylightSavingTimeTransition(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr = _lookup<
          ffi.NativeFunction<
              CFAbsoluteTime Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneGetNextDaylightSavingTimeTransition');
  late final _CFTimeZoneGetNextDaylightSavingTimeTransition =
      _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyLocalizedName(
    CFTimeZoneRef tz,
    int style,
    CFLocaleRef locale,
  ) {
    return _CFTimeZoneCopyLocalizedName(
      tz,
      style,
      locale,
    );
  }

  late final _CFTimeZoneCopyLocalizedNamePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFTimeZoneRef, ffi.Int32,
              CFLocaleRef)>>('CFTimeZoneCopyLocalizedName');
  late final _CFTimeZoneCopyLocalizedName = _CFTimeZoneCopyLocalizedNamePtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, int, CFLocaleRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFTimeZoneSystemTimeZoneDidChangeNotification');

  CFNotificationName get kCFTimeZoneSystemTimeZoneDidChangeNotification =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value;

  set kCFTimeZoneSystemTimeZoneDidChangeNotification(
          CFNotificationName value) =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value = value;

  int CFCalendarGetTypeID() {
    return _CFCalendarGetTypeID();
  }

  late final _CFCalendarGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFCalendarGetTypeID');
  late final _CFCalendarGetTypeID =
      _CFCalendarGetTypeIDPtr.asFunction<int Function()>();

  CFCalendarRef CFCalendarCopyCurrent() {
    return _CFCalendarCopyCurrent();
  }

  late final _CFCalendarCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFCalendarRef Function()>>(
          'CFCalendarCopyCurrent');
  late final _CFCalendarCopyCurrent =
      _CFCalendarCopyCurrentPtr.asFunction<CFCalendarRef Function()>();

  CFCalendarRef CFCalendarCreateWithIdentifier(
    CFAllocatorRef allocator,
    CFCalendarIdentifier identifier,
  ) {
    return _CFCalendarCreateWithIdentifier(
      allocator,
      identifier,
    );
  }

  late final _CFCalendarCreateWithIdentifierPtr = _lookup<
      ffi.NativeFunction<
          CFCalendarRef Function(CFAllocatorRef,
              CFCalendarIdentifier)>>('CFCalendarCreateWithIdentifier');
  late final _CFCalendarCreateWithIdentifier =
      _CFCalendarCreateWithIdentifierPtr.asFunction<
          CFCalendarRef Function(CFAllocatorRef, CFCalendarIdentifier)>();

  CFCalendarIdentifier CFCalendarGetIdentifier(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetIdentifier(
      calendar,
    );
  }

  late final _CFCalendarGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFCalendarIdentifier Function(CFCalendarRef)>>(
          'CFCalendarGetIdentifier');
  late final _CFCalendarGetIdentifier = _CFCalendarGetIdentifierPtr.asFunction<
      CFCalendarIdentifier Function(CFCalendarRef)>();

  CFLocaleRef CFCalendarCopyLocale(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyLocale(
      calendar,
    );
  }

  late final _CFCalendarCopyLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFCalendarRef)>>(
          'CFCalendarCopyLocale');
  late final _CFCalendarCopyLocale = _CFCalendarCopyLocalePtr.asFunction<
      CFLocaleRef Function(CFCalendarRef)>();

  void CFCalendarSetLocale(
    CFCalendarRef calendar,
    CFLocaleRef locale,
  ) {
    return _CFCalendarSetLocale(
      calendar,
      locale,
    );
  }

  late final _CFCalendarSetLocalePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFLocaleRef)>>(
      'CFCalendarSetLocale');
  late final _CFCalendarSetLocale = _CFCalendarSetLocalePtr.asFunction<
      void Function(CFCalendarRef, CFLocaleRef)>();

  CFTimeZoneRef CFCalendarCopyTimeZone(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyTimeZone(
      calendar,
    );
  }

  late final _CFCalendarCopyTimeZonePtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function(CFCalendarRef)>>(
          'CFCalendarCopyTimeZone');
  late final _CFCalendarCopyTimeZone = _CFCalendarCopyTimeZonePtr.asFunction<
      CFTimeZoneRef Function(CFCalendarRef)>();

  void CFCalendarSetTimeZone(
    CFCalendarRef calendar,
    CFTimeZoneRef tz,
  ) {
    return _CFCalendarSetTimeZone(
      calendar,
      tz,
    );
  }

  late final _CFCalendarSetTimeZonePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFTimeZoneRef)>>(
      'CFCalendarSetTimeZone');
  late final _CFCalendarSetTimeZone = _CFCalendarSetTimeZonePtr.asFunction<
      void Function(CFCalendarRef, CFTimeZoneRef)>();

  int CFCalendarGetFirstWeekday(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetFirstWeekday(
      calendar,
    );
  }

  late final _CFCalendarGetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetFirstWeekday');
  late final _CFCalendarGetFirstWeekday =
      _CFCalendarGetFirstWeekdayPtr.asFunction<int Function(CFCalendarRef)>();

  void CFCalendarSetFirstWeekday(
    CFCalendarRef calendar,
    int wkdy,
  ) {
    return _CFCalendarSetFirstWeekday(
      calendar,
      wkdy,
    );
  }

  late final _CFCalendarSetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetFirstWeekday');
  late final _CFCalendarSetFirstWeekday = _CFCalendarSetFirstWeekdayPtr
      .asFunction<void Function(CFCalendarRef, int)>();

  int CFCalendarGetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetMinimumDaysInFirstWeek(
      calendar,
    );
  }

  late final _CFCalendarGetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetMinimumDaysInFirstWeek');
  late final _CFCalendarGetMinimumDaysInFirstWeek =
      _CFCalendarGetMinimumDaysInFirstWeekPtr.asFunction<
          int Function(CFCalendarRef)>();

  void CFCalendarSetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
    int mwd,
  ) {
    return _CFCalendarSetMinimumDaysInFirstWeek(
      calendar,
      mwd,
    );
  }

  late final _CFCalendarSetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetMinimumDaysInFirstWeek');
  late final _CFCalendarSetMinimumDaysInFirstWeek =
      _CFCalendarSetMinimumDaysInFirstWeekPtr.asFunction<
          void Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMinimumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMinimumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMinimumRangeOfUnitPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFCalendarRef, ffi.Int32)>>(
          'CFCalendarGetMinimumRangeOfUnit');
  late final _CFCalendarGetMinimumRangeOfUnit =
      _CFCalendarGetMinimumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMaximumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMaximumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMaximumRangeOfUnitPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFCalendarRef, ffi.Int32)>>(
          'CFCalendarGetMaximumRangeOfUnit');
  late final _CFCalendarGetMaximumRangeOfUnit =
      _CFCalendarGetMaximumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetRangeOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetRangeOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFCalendarRef, ffi.Int32, ffi.Int32,
              CFAbsoluteTime)>>('CFCalendarGetRangeOfUnit');
  late final _CFCalendarGetRangeOfUnit = _CFCalendarGetRangeOfUnitPtr
      .asFunction<CFRange Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetOrdinalityOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetOrdinalityOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetOrdinalityOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFCalendarRef, ffi.Int32, ffi.Int32,
              CFAbsoluteTime)>>('CFCalendarGetOrdinalityOfUnit');
  late final _CFCalendarGetOrdinalityOfUnit = _CFCalendarGetOrdinalityOfUnitPtr
      .asFunction<int Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetTimeRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
    double at,
    ffi.Pointer<CFAbsoluteTime> startp,
    ffi.Pointer<CFTimeInterval> tip,
  ) {
    return _CFCalendarGetTimeRangeOfUnit(
      calendar,
      unit,
      at,
      startp,
      tip,
    );
  }

  late final _CFCalendarGetTimeRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Int32,
              CFAbsoluteTime,
              ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>>('CFCalendarGetTimeRangeOfUnit');
  late final _CFCalendarGetTimeRangeOfUnit =
      _CFCalendarGetTimeRangeOfUnitPtr.asFunction<
          int Function(CFCalendarRef, int, double, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>();

  int CFCalendarComposeAbsoluteTime(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarComposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarComposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarComposeAbsoluteTime');
  late final _CFCalendarComposeAbsoluteTime =
      _CFCalendarComposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarDecomposeAbsoluteTime(
    CFCalendarRef calendar,
    double at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarDecomposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarDecomposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, CFAbsoluteTime,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarDecomposeAbsoluteTime');
  late final _CFCalendarDecomposeAbsoluteTime =
      _CFCalendarDecomposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, double, ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarAddComponents(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarAddComponents(
      calendar,
      at,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarAddComponentsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Pointer<CFAbsoluteTime>,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarAddComponents');
  late final _CFCalendarAddComponents = _CFCalendarAddComponentsPtr.asFunction<
      int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>, int,
          ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarGetComponentDifference(
    CFCalendarRef calendar,
    double startingAT,
    double resultAT,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarGetComponentDifference(
      calendar,
      startingAT,
      resultAT,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarGetComponentDifferencePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarGetComponentDifference');
  late final _CFCalendarGetComponentDifference =
      _CFCalendarGetComponentDifferencePtr.asFunction<
          int Function(
              CFCalendarRef, double, double, int, ffi.Pointer<pkg_ffi.Char>)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate(
    CFAllocatorRef allocator,
    CFStringRef tmplate,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFOptionFlags,
              CFLocaleRef)>>('CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate =
      _CFDateFormatterCreateDateFormatFromTemplatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, int, CFLocaleRef)>();

  int CFDateFormatterGetTypeID() {
    return _CFDateFormatterGetTypeID();
  }

  late final _CFDateFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID =
      _CFDateFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(
    CFAllocatorRef allocator,
    int formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter(
      allocator,
      formatOptions,
    );
  }

  late final _CFDateFormatterCreateISO8601FormatterPtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef,
              ffi.Int32)>>('CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter =
      _CFDateFormatterCreateISO8601FormatterPtr.asFunction<
          CFDateFormatterRef Function(CFAllocatorRef, int)>();

  CFDateFormatterRef CFDateFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int dateStyle,
    int timeStyle,
  ) {
    return _CFDateFormatterCreate(
      allocator,
      locale,
      dateStyle,
      timeStyle,
    );
  }

  late final _CFDateFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, ffi.Int32,
              ffi.Int32)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate = _CFDateFormatterCreatePtr.asFunction<
      CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, int, int)>();

  CFLocaleRef CFDateFormatterGetLocale(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale = _CFDateFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFDateFormatterRef)>();

  int CFDateFormatterGetDateStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetDateStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetDateStylePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle = _CFDateFormatterGetDateStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  int CFDateFormatterGetTimeStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetTimeStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetTimeStylePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle = _CFDateFormatterGetTimeStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat = _CFDateFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDateFormatterRef, CFStringRef)>>('CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat = _CFDateFormatterSetFormatPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate =
      _CFDateFormatterCreateStringWithDatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFAbsoluteTime)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime =
      _CFDateFormatterCreateStringWithAbsoluteTimePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString =
      _CFDateFormatterCreateDateFromStringPtr.asFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<CFAbsoluteTime> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromStringPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<CFAbsoluteTime>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString =
      _CFDateFormatterGetAbsoluteTimeFromStringPtr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<CFAbsoluteTime>)>();

  void CFDateFormatterSetProperty(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty = _CFDateFormatterSetPropertyPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty = _CFDateFormatterCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterIsLenient =
      _lookup<CFDateFormatterKey>('kCFDateFormatterIsLenient');

  CFDateFormatterKey get kCFDateFormatterIsLenient =>
      _kCFDateFormatterIsLenient.value;

  set kCFDateFormatterIsLenient(CFDateFormatterKey value) =>
      _kCFDateFormatterIsLenient.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterTimeZone =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTimeZone');

  CFDateFormatterKey get kCFDateFormatterTimeZone =>
      _kCFDateFormatterTimeZone.value;

  set kCFDateFormatterTimeZone(CFDateFormatterKey value) =>
      _kCFDateFormatterTimeZone.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendarName =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendarName');

  CFDateFormatterKey get kCFDateFormatterCalendarName =>
      _kCFDateFormatterCalendarName.value;

  set kCFDateFormatterCalendarName(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendarName.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultFormat =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultFormat');

  CFDateFormatterKey get kCFDateFormatterDefaultFormat =>
      _kCFDateFormatterDefaultFormat.value;

  set kCFDateFormatterDefaultFormat(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterTwoDigitStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTwoDigitStartDate');

  CFDateFormatterKey get kCFDateFormatterTwoDigitStartDate =>
      _kCFDateFormatterTwoDigitStartDate.value;

  set kCFDateFormatterTwoDigitStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterTwoDigitStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultDate');

  CFDateFormatterKey get kCFDateFormatterDefaultDate =>
      _kCFDateFormatterDefaultDate.value;

  set kCFDateFormatterDefaultDate(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendar =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendar');

  CFDateFormatterKey get kCFDateFormatterCalendar =>
      _kCFDateFormatterCalendar.value;

  set kCFDateFormatterCalendar(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendar.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterEraSymbols');

  CFDateFormatterKey get kCFDateFormatterEraSymbols =>
      _kCFDateFormatterEraSymbols.value;

  set kCFDateFormatterEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterMonthSymbols =>
      _kCFDateFormatterMonthSymbols.value;

  set kCFDateFormatterMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortMonthSymbols =>
      _kCFDateFormatterShortMonthSymbols.value;

  set kCFDateFormatterShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterWeekdaySymbols =>
      _kCFDateFormatterWeekdaySymbols.value;

  set kCFDateFormatterWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortWeekdaySymbols =>
      _kCFDateFormatterShortWeekdaySymbols.value;

  set kCFDateFormatterShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterAMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterAMSymbol');

  CFDateFormatterKey get kCFDateFormatterAMSymbol =>
      _kCFDateFormatterAMSymbol.value;

  set kCFDateFormatterAMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterAMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterPMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterPMSymbol');

  CFDateFormatterKey get kCFDateFormatterPMSymbol =>
      _kCFDateFormatterPMSymbol.value;

  set kCFDateFormatterPMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterPMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterLongEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterLongEraSymbols');

  CFDateFormatterKey get kCFDateFormatterLongEraSymbols =>
      _kCFDateFormatterLongEraSymbols.value;

  set kCFDateFormatterLongEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterLongEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortMonthSymbols =>
      _kCFDateFormatterVeryShortMonthSymbols.value;

  set kCFDateFormatterVeryShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneMonthSymbols =>
      _kCFDateFormatterStandaloneMonthSymbols.value;

  set kCFDateFormatterStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneMonthSymbols =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value;

  set kCFDateFormatterShortStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneMonthSymbols =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value;

  set kCFDateFormatterVeryShortStandaloneMonthSymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortWeekdaySymbols =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value;

  set kCFDateFormatterVeryShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneWeekdaySymbols =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value;

  set kCFDateFormatterStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterShortStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterVeryShortStandaloneWeekdaySymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterQuarterSymbols =>
      _kCFDateFormatterQuarterSymbols.value;

  set kCFDateFormatterQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortQuarterSymbols =>
      _kCFDateFormatterShortQuarterSymbols.value;

  set kCFDateFormatterShortQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneQuarterSymbols =>
      _kCFDateFormatterStandaloneQuarterSymbols.value;

  set kCFDateFormatterStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneQuarterSymbols =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value;

  set kCFDateFormatterShortStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterGregorianStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterGregorianStartDate');

  CFDateFormatterKey get kCFDateFormatterGregorianStartDate =>
      _kCFDateFormatterGregorianStartDate.value;

  set kCFDateFormatterGregorianStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterGregorianStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterDoesRelativeDateFormattingKey =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterDoesRelativeDateFormattingKey');

  CFDateFormatterKey get kCFDateFormatterDoesRelativeDateFormattingKey =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value;

  set kCFDateFormatterDoesRelativeDateFormattingKey(CFDateFormatterKey value) =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value = value;

  int CFErrorGetTypeID() {
    return _CFErrorGetTypeID();
  }

  late final _CFErrorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFErrorGetTypeID');
  late final _CFErrorGetTypeID =
      _CFErrorGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainPOSIX =
      _lookup<CFErrorDomain>('kCFErrorDomainPOSIX');

  CFErrorDomain get kCFErrorDomainPOSIX => _kCFErrorDomainPOSIX.value;

  set kCFErrorDomainPOSIX(CFErrorDomain value) =>
      _kCFErrorDomainPOSIX.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainOSStatus =
      _lookup<CFErrorDomain>('kCFErrorDomainOSStatus');

  CFErrorDomain get kCFErrorDomainOSStatus => _kCFErrorDomainOSStatus.value;

  set kCFErrorDomainOSStatus(CFErrorDomain value) =>
      _kCFErrorDomainOSStatus.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainMach =
      _lookup<CFErrorDomain>('kCFErrorDomainMach');

  CFErrorDomain get kCFErrorDomainMach => _kCFErrorDomainMach.value;

  set kCFErrorDomainMach(CFErrorDomain value) =>
      _kCFErrorDomainMach.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainCocoa =
      _lookup<CFErrorDomain>('kCFErrorDomainCocoa');

  CFErrorDomain get kCFErrorDomainCocoa => _kCFErrorDomainCocoa.value;

  set kCFErrorDomainCocoa(CFErrorDomain value) =>
      _kCFErrorDomainCocoa.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedDescriptionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedDescriptionKey');

  CFStringRef get kCFErrorLocalizedDescriptionKey =>
      _kCFErrorLocalizedDescriptionKey.value;

  set kCFErrorLocalizedDescriptionKey(CFStringRef value) =>
      _kCFErrorLocalizedDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureKey');

  CFStringRef get kCFErrorLocalizedFailureKey =>
      _kCFErrorLocalizedFailureKey.value;

  set kCFErrorLocalizedFailureKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureReasonKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureReasonKey');

  CFStringRef get kCFErrorLocalizedFailureReasonKey =>
      _kCFErrorLocalizedFailureReasonKey.value;

  set kCFErrorLocalizedFailureReasonKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureReasonKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedRecoverySuggestionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedRecoverySuggestionKey');

  CFStringRef get kCFErrorLocalizedRecoverySuggestionKey =>
      _kCFErrorLocalizedRecoverySuggestionKey.value;

  set kCFErrorLocalizedRecoverySuggestionKey(CFStringRef value) =>
      _kCFErrorLocalizedRecoverySuggestionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorDescriptionKey =
      _lookup<CFStringRef>('kCFErrorDescriptionKey');

  CFStringRef get kCFErrorDescriptionKey => _kCFErrorDescriptionKey.value;

  set kCFErrorDescriptionKey(CFStringRef value) =>
      _kCFErrorDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorUnderlyingErrorKey =
      _lookup<CFStringRef>('kCFErrorUnderlyingErrorKey');

  CFStringRef get kCFErrorUnderlyingErrorKey =>
      _kCFErrorUnderlyingErrorKey.value;

  set kCFErrorUnderlyingErrorKey(CFStringRef value) =>
      _kCFErrorUnderlyingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorURLKey =
      _lookup<CFStringRef>('kCFErrorURLKey');

  CFStringRef get kCFErrorURLKey => _kCFErrorURLKey.value;

  set kCFErrorURLKey(CFStringRef value) => _kCFErrorURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorFilePathKey =
      _lookup<CFStringRef>('kCFErrorFilePathKey');

  CFStringRef get kCFErrorFilePathKey => _kCFErrorFilePathKey.value;

  set kCFErrorFilePathKey(CFStringRef value) =>
      _kCFErrorFilePathKey.value = value;

  CFErrorRef CFErrorCreate(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    CFDictionaryRef userInfo,
  ) {
    return _CFErrorCreate(
      allocator,
      domain,
      code,
      userInfo,
    );
  }

  late final _CFErrorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(CFAllocatorRef, CFErrorDomain, CFIndex,
              CFDictionaryRef)>>('CFErrorCreate');
  late final _CFErrorCreate = _CFErrorCreatePtr.asFunction<
      CFErrorRef Function(
          CFAllocatorRef, CFErrorDomain, int, CFDictionaryRef)>();

  CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoKeys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoValues,
    int numUserInfoValues,
  ) {
    return _CFErrorCreateWithUserInfoKeysAndValues(
      allocator,
      domain,
      code,
      userInfoKeys,
      userInfoValues,
      numUserInfoValues,
    );
  }

  late final _CFErrorCreateWithUserInfoKeysAndValuesPtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              CFIndex,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFErrorCreateWithUserInfoKeysAndValues');
  late final _CFErrorCreateWithUserInfoKeysAndValues =
      _CFErrorCreateWithUserInfoKeysAndValuesPtr.asFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int)>();

  CFErrorDomain CFErrorGetDomain(
    CFErrorRef err,
  ) {
    return _CFErrorGetDomain(
      err,
    );
  }

  late final _CFErrorGetDomainPtr =
      _lookup<ffi.NativeFunction<CFErrorDomain Function(CFErrorRef)>>(
          'CFErrorGetDomain');
  late final _CFErrorGetDomain =
      _CFErrorGetDomainPtr.asFunction<CFErrorDomain Function(CFErrorRef)>();

  int CFErrorGetCode(
    CFErrorRef err,
  ) {
    return _CFErrorGetCode(
      err,
    );
  }

  late final _CFErrorGetCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFErrorRef)>>(
          'CFErrorGetCode');
  late final _CFErrorGetCode =
      _CFErrorGetCodePtr.asFunction<int Function(CFErrorRef)>();

  CFDictionaryRef CFErrorCopyUserInfo(
    CFErrorRef err,
  ) {
    return _CFErrorCopyUserInfo(
      err,
    );
  }

  late final _CFErrorCopyUserInfoPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFErrorRef)>>(
          'CFErrorCopyUserInfo');
  late final _CFErrorCopyUserInfo = _CFErrorCopyUserInfoPtr.asFunction<
      CFDictionaryRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyDescription(
    CFErrorRef err,
  ) {
    return _CFErrorCopyDescription(
      err,
    );
  }

  late final _CFErrorCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyDescription');
  late final _CFErrorCopyDescription =
      _CFErrorCopyDescriptionPtr.asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyFailureReason(
    CFErrorRef err,
  ) {
    return _CFErrorCopyFailureReason(
      err,
    );
  }

  late final _CFErrorCopyFailureReasonPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyFailureReason');
  late final _CFErrorCopyFailureReason = _CFErrorCopyFailureReasonPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyRecoverySuggestion(
    CFErrorRef err,
  ) {
    return _CFErrorCopyRecoverySuggestion(
      err,
    );
  }

  late final _CFErrorCopyRecoverySuggestionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyRecoverySuggestion');
  late final _CFErrorCopyRecoverySuggestion = _CFErrorCopyRecoverySuggestionPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanTrue =
      _lookup<CFBooleanRef>('kCFBooleanTrue');

  CFBooleanRef get kCFBooleanTrue => _kCFBooleanTrue.value;

  set kCFBooleanTrue(CFBooleanRef value) => _kCFBooleanTrue.value = value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanFalse =
      _lookup<CFBooleanRef>('kCFBooleanFalse');

  CFBooleanRef get kCFBooleanFalse => _kCFBooleanFalse.value;

  set kCFBooleanFalse(CFBooleanRef value) => _kCFBooleanFalse.value = value;

  int CFBooleanGetTypeID() {
    return _CFBooleanGetTypeID();
  }

  late final _CFBooleanGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID =
      _CFBooleanGetTypeIDPtr.asFunction<int Function()>();

  int CFBooleanGetValue(
    CFBooleanRef boolean,
  ) {
    return _CFBooleanGetValue(
      boolean,
    );
  }

  late final _CFBooleanGetValuePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBooleanRef)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue =
      _CFBooleanGetValuePtr.asFunction<int Function(CFBooleanRef)>();

  late final ffi.Pointer<CFNumberRef> _kCFNumberPositiveInfinity =
      _lookup<CFNumberRef>('kCFNumberPositiveInfinity');

  CFNumberRef get kCFNumberPositiveInfinity => _kCFNumberPositiveInfinity.value;

  set kCFNumberPositiveInfinity(CFNumberRef value) =>
      _kCFNumberPositiveInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNegativeInfinity =
      _lookup<CFNumberRef>('kCFNumberNegativeInfinity');

  CFNumberRef get kCFNumberNegativeInfinity => _kCFNumberNegativeInfinity.value;

  set kCFNumberNegativeInfinity(CFNumberRef value) =>
      _kCFNumberNegativeInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNaN =
      _lookup<CFNumberRef>('kCFNumberNaN');

  CFNumberRef get kCFNumberNaN => _kCFNumberNaN.value;

  set kCFNumberNaN(CFNumberRef value) => _kCFNumberNaN.value = value;

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNumberGetTypeID');
  late final _CFNumberGetTypeID =
      _CFNumberGetTypeIDPtr.asFunction<int Function()>();

  CFNumberRef CFNumberCreate(
    CFAllocatorRef allocator,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberCreate(
      allocator,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(CFAllocatorRef, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberCreate');
  late final _CFNumberCreate = _CFNumberCreatePtr.asFunction<
      CFNumberRef Function(CFAllocatorRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberGetType(
    CFNumberRef number,
  ) {
    return _CFNumberGetType(
      number,
    );
  }

  late final _CFNumberGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFNumberRef)>>(
          'CFNumberGetType');
  late final _CFNumberGetType =
      _CFNumberGetTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetByteSize(
    CFNumberRef number,
  ) {
    return _CFNumberGetByteSize(
      number,
    );
  }

  late final _CFNumberGetByteSizePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetByteSize');
  late final _CFNumberGetByteSize =
      _CFNumberGetByteSizePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberIsFloatType(
    CFNumberRef number,
  ) {
    return _CFNumberIsFloatType(
      number,
    );
  }

  late final _CFNumberIsFloatTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFNumberRef)>>(
          'CFNumberIsFloatType');
  late final _CFNumberIsFloatType =
      _CFNumberIsFloatTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetValue(
    CFNumberRef number,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberGetValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFNumberRef, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue = _CFNumberGetValuePtr.asFunction<
      int Function(CFNumberRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberCompare(
    CFNumberRef number,
    CFNumberRef otherNumber,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFNumberCompare(
      number,
      otherNumber,
      context,
    );
  }

  late final _CFNumberComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFNumberRef, CFNumberRef,
              ffi.Pointer<ffi.Void>)>>('CFNumberCompare');
  late final _CFNumberCompare = _CFNumberComparePtr.asFunction<
      int Function(CFNumberRef, CFNumberRef, ffi.Pointer<ffi.Void>)>();

  int CFNumberFormatterGetTypeID() {
    return _CFNumberFormatterGetTypeID();
  }

  late final _CFNumberFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNumberFormatterGetTypeID');
  late final _CFNumberFormatterGetTypeID =
      _CFNumberFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFNumberFormatterRef CFNumberFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int style,
  ) {
    return _CFNumberFormatterCreate(
      allocator,
      locale,
      style,
    );
  }

  late final _CFNumberFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef,
              ffi.Int32)>>('CFNumberFormatterCreate');
  late final _CFNumberFormatterCreate = _CFNumberFormatterCreatePtr.asFunction<
      CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef, int)>();

  CFLocaleRef CFNumberFormatterGetLocale(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetLocale(
      formatter,
    );
  }

  late final _CFNumberFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetLocale');
  late final _CFNumberFormatterGetLocale = _CFNumberFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFNumberFormatterRef)>();

  int CFNumberFormatterGetStyle(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetStyle(
      formatter,
    );
  }

  late final _CFNumberFormatterGetStylePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetStyle');
  late final _CFNumberFormatterGetStyle = _CFNumberFormatterGetStylePtr
      .asFunction<int Function(CFNumberFormatterRef)>();

  CFStringRef CFNumberFormatterGetFormat(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetFormat(
      formatter,
    );
  }

  late final _CFNumberFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetFormat');
  late final _CFNumberFormatterGetFormat = _CFNumberFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFNumberFormatterRef)>();

  void CFNumberFormatterSetFormat(
    CFNumberFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFNumberFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFNumberFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef,
              CFStringRef)>>('CFNumberFormatterSetFormat');
  late final _CFNumberFormatterSetFormat = _CFNumberFormatterSetFormatPtr
      .asFunction<void Function(CFNumberFormatterRef, CFStringRef)>();

  CFStringRef CFNumberFormatterCreateStringWithNumber(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberRef number,
  ) {
    return _CFNumberFormatterCreateStringWithNumber(
      allocator,
      formatter,
      number,
    );
  }

  late final _CFNumberFormatterCreateStringWithNumberPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFNumberRef)>>('CFNumberFormatterCreateStringWithNumber');
  late final _CFNumberFormatterCreateStringWithNumber =
      _CFNumberFormatterCreateStringWithNumberPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFNumberFormatterRef, CFNumberRef)>();

  CFStringRef CFNumberFormatterCreateStringWithValue(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterCreateStringWithValue(
      allocator,
      formatter,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterCreateStringWithValuePtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>(
      'CFNumberFormatterCreateStringWithValue');
  late final _CFNumberFormatterCreateStringWithValue =
      _CFNumberFormatterCreateStringWithValuePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef, int,
              ffi.Pointer<ffi.Void>)>();

  CFNumberRef CFNumberFormatterCreateNumberFromString(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int options,
  ) {
    return _CFNumberFormatterCreateNumberFromString(
      allocator,
      formatter,
      string,
      rangep,
      options,
    );
  }

  late final _CFNumberFormatterCreateNumberFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(
              CFAllocatorRef,
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFOptionFlags)>>('CFNumberFormatterCreateNumberFromString');
  late final _CFNumberFormatterCreateNumberFromString =
      _CFNumberFormatterCreateNumberFromStringPtr.asFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>, int)>();

  int CFNumberFormatterGetValueFromString(
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterGetValueFromString(
      formatter,
      string,
      rangep,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterGetValueFromStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberFormatterGetValueFromString');
  late final _CFNumberFormatterGetValueFromString =
      _CFNumberFormatterGetValueFromStringPtr.asFunction<
          int Function(CFNumberFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              int, ffi.Pointer<ffi.Void>)>();

  void CFNumberFormatterSetProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
    CFTypeRef value,
  ) {
    return _CFNumberFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFNumberFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef, CFNumberFormatterKey,
              CFTypeRef)>>('CFNumberFormatterSetProperty');
  late final _CFNumberFormatterSetProperty =
      _CFNumberFormatterSetPropertyPtr.asFunction<
          void Function(
              CFNumberFormatterRef, CFNumberFormatterKey, CFTypeRef)>();

  CFTypeRef CFNumberFormatterCopyProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
  ) {
    return _CFNumberFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFNumberFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFNumberFormatterRef,
              CFNumberFormatterKey)>>('CFNumberFormatterCopyProperty');
  late final _CFNumberFormatterCopyProperty =
      _CFNumberFormatterCopyPropertyPtr.asFunction<
          CFTypeRef Function(CFNumberFormatterRef, CFNumberFormatterKey)>();

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterCurrencyCode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencyCode');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyCode =>
      _kCFNumberFormatterCurrencyCode.value;

  set kCFNumberFormatterCurrencyCode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyCode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDecimalSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterDecimalSeparator =>
      _kCFNumberFormatterDecimalSeparator.value;

  set kCFNumberFormatterDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyDecimalSeparator =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value;

  set kCFNumberFormatterCurrencyDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterAlwaysShowDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterAlwaysShowDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterAlwaysShowDecimalSeparator =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value;

  set kCFNumberFormatterAlwaysShowDecimalSeparator(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSeparator =>
      _kCFNumberFormatterGroupingSeparator.value;

  set kCFNumberFormatterGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterUseGroupingSeparator =>
      _kCFNumberFormatterUseGroupingSeparator.value;

  set kCFNumberFormatterUseGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPercentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPercentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPercentSymbol =>
      _kCFNumberFormatterPercentSymbol.value;

  set kCFNumberFormatterPercentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPercentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterZeroSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterZeroSymbol');

  CFNumberFormatterKey get kCFNumberFormatterZeroSymbol =>
      _kCFNumberFormatterZeroSymbol.value;

  set kCFNumberFormatterZeroSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterZeroSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterNaNSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNaNSymbol');

  CFNumberFormatterKey get kCFNumberFormatterNaNSymbol =>
      _kCFNumberFormatterNaNSymbol.value;

  set kCFNumberFormatterNaNSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNaNSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInfinitySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterInfinitySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInfinitySymbol =>
      _kCFNumberFormatterInfinitySymbol.value;

  set kCFNumberFormatterInfinitySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterInfinitySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMinusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinusSign');

  CFNumberFormatterKey get kCFNumberFormatterMinusSign =>
      _kCFNumberFormatterMinusSign.value;

  set kCFNumberFormatterMinusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterPlusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPlusSign');

  CFNumberFormatterKey get kCFNumberFormatterPlusSign =>
      _kCFNumberFormatterPlusSign.value;

  set kCFNumberFormatterPlusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPlusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterCurrencySymbol =>
      _kCFNumberFormatterCurrencySymbol.value;

  set kCFNumberFormatterCurrencySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterExponentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterExponentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterExponentSymbol =>
      _kCFNumberFormatterExponentSymbol.value;

  set kCFNumberFormatterExponentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterExponentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinIntegerDigits =>
      _kCFNumberFormatterMinIntegerDigits.value;

  set kCFNumberFormatterMinIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxIntegerDigits =>
      _kCFNumberFormatterMaxIntegerDigits.value;

  set kCFNumberFormatterMaxIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinFractionDigits =>
      _kCFNumberFormatterMinFractionDigits.value;

  set kCFNumberFormatterMinFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxFractionDigits =>
      _kCFNumberFormatterMaxFractionDigits.value;

  set kCFNumberFormatterMaxFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSize =>
      _kCFNumberFormatterGroupingSize.value;

  set kCFNumberFormatterGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterSecondaryGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterSecondaryGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterSecondaryGroupingSize =>
      _kCFNumberFormatterSecondaryGroupingSize.value;

  set kCFNumberFormatterSecondaryGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterSecondaryGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterRoundingMode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingMode');

  CFNumberFormatterKey get kCFNumberFormatterRoundingMode =>
      _kCFNumberFormatterRoundingMode.value;

  set kCFNumberFormatterRoundingMode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingMode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterRoundingIncrement =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingIncrement');

  CFNumberFormatterKey get kCFNumberFormatterRoundingIncrement =>
      _kCFNumberFormatterRoundingIncrement.value;

  set kCFNumberFormatterRoundingIncrement(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingIncrement.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterFormatWidth =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterFormatWidth');

  CFNumberFormatterKey get kCFNumberFormatterFormatWidth =>
      _kCFNumberFormatterFormatWidth.value;

  set kCFNumberFormatterFormatWidth(CFNumberFormatterKey value) =>
      _kCFNumberFormatterFormatWidth.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingPosition =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingPosition');

  CFNumberFormatterKey get kCFNumberFormatterPaddingPosition =>
      _kCFNumberFormatterPaddingPosition.value;

  set kCFNumberFormatterPaddingPosition(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingPosition.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingCharacter =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingCharacter');

  CFNumberFormatterKey get kCFNumberFormatterPaddingCharacter =>
      _kCFNumberFormatterPaddingCharacter.value;

  set kCFNumberFormatterPaddingCharacter(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingCharacter.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDefaultFormat =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDefaultFormat');

  CFNumberFormatterKey get kCFNumberFormatterDefaultFormat =>
      _kCFNumberFormatterDefaultFormat.value;

  set kCFNumberFormatterDefaultFormat(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMultiplier =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMultiplier');

  CFNumberFormatterKey get kCFNumberFormatterMultiplier =>
      _kCFNumberFormatterMultiplier.value;

  set kCFNumberFormatterMultiplier(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMultiplier.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositivePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositivePrefix');

  CFNumberFormatterKey get kCFNumberFormatterPositivePrefix =>
      _kCFNumberFormatterPositivePrefix.value;

  set kCFNumberFormatterPositivePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositivePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositiveSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositiveSuffix');

  CFNumberFormatterKey get kCFNumberFormatterPositiveSuffix =>
      _kCFNumberFormatterPositiveSuffix.value;

  set kCFNumberFormatterPositiveSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositiveSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativePrefix');

  CFNumberFormatterKey get kCFNumberFormatterNegativePrefix =>
      _kCFNumberFormatterNegativePrefix.value;

  set kCFNumberFormatterNegativePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativeSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativeSuffix');

  CFNumberFormatterKey get kCFNumberFormatterNegativeSuffix =>
      _kCFNumberFormatterNegativeSuffix.value;

  set kCFNumberFormatterNegativeSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativeSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPerMillSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPerMillSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPerMillSymbol =>
      _kCFNumberFormatterPerMillSymbol.value;

  set kCFNumberFormatterPerMillSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPerMillSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInternationalCurrencySymbol =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterInternationalCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInternationalCurrencySymbol =>
      _kCFNumberFormatterInternationalCurrencySymbol.value;

  set kCFNumberFormatterInternationalCurrencySymbol(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterInternationalCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyGroupingSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyGroupingSeparator =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value;

  set kCFNumberFormatterCurrencyGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterIsLenient =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterIsLenient');

  CFNumberFormatterKey get kCFNumberFormatterIsLenient =>
      _kCFNumberFormatterIsLenient.value;

  set kCFNumberFormatterIsLenient(CFNumberFormatterKey value) =>
      _kCFNumberFormatterIsLenient.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterUseSignificantDigits =>
      _kCFNumberFormatterUseSignificantDigits.value;

  set kCFNumberFormatterUseSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinSignificantDigits =>
      _kCFNumberFormatterMinSignificantDigits.value;

  set kCFNumberFormatterMinSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxSignificantDigits =>
      _kCFNumberFormatterMaxSignificantDigits.value;

  set kCFNumberFormatterMaxSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxSignificantDigits.value = value;

  int CFNumberFormatterGetDecimalInfoForCurrencyCode(
    CFStringRef currencyCode,
    ffi.Pointer<ffi.Int32> defaultFractionDigits,
    ffi.Pointer<ffi.Double> roundingIncrement,
  ) {
    return _CFNumberFormatterGetDecimalInfoForCurrencyCode(
      currencyCode,
      defaultFractionDigits,
      roundingIncrement,
    );
  }

  late final _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFStringRef, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Double>)>>(
      'CFNumberFormatterGetDecimalInfoForCurrencyCode');
  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode =
      _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr.asFunction<
          int Function(
              CFStringRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Double>)>();

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyApplication =
      _lookup<CFStringRef>('kCFPreferencesAnyApplication');

  CFStringRef get kCFPreferencesAnyApplication =>
      _kCFPreferencesAnyApplication.value;

  set kCFPreferencesAnyApplication(CFStringRef value) =>
      _kCFPreferencesAnyApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentApplication =
      _lookup<CFStringRef>('kCFPreferencesCurrentApplication');

  CFStringRef get kCFPreferencesCurrentApplication =>
      _kCFPreferencesCurrentApplication.value;

  set kCFPreferencesCurrentApplication(CFStringRef value) =>
      _kCFPreferencesCurrentApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyHost =
      _lookup<CFStringRef>('kCFPreferencesAnyHost');

  CFStringRef get kCFPreferencesAnyHost => _kCFPreferencesAnyHost.value;

  set kCFPreferencesAnyHost(CFStringRef value) =>
      _kCFPreferencesAnyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentHost =
      _lookup<CFStringRef>('kCFPreferencesCurrentHost');

  CFStringRef get kCFPreferencesCurrentHost => _kCFPreferencesCurrentHost.value;

  set kCFPreferencesCurrentHost(CFStringRef value) =>
      _kCFPreferencesCurrentHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyUser =
      _lookup<CFStringRef>('kCFPreferencesAnyUser');

  CFStringRef get kCFPreferencesAnyUser => _kCFPreferencesAnyUser.value;

  set kCFPreferencesAnyUser(CFStringRef value) =>
      _kCFPreferencesAnyUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentUser =
      _lookup<CFStringRef>('kCFPreferencesCurrentUser');

  CFStringRef get kCFPreferencesCurrentUser => _kCFPreferencesCurrentUser.value;

  set kCFPreferencesCurrentUser(CFStringRef value) =>
      _kCFPreferencesCurrentUser.value = value;

  CFPropertyListRef CFPreferencesCopyAppValue(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesCopyAppValue(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesCopyAppValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFStringRef, CFStringRef)>>('CFPreferencesCopyAppValue');
  late final _CFPreferencesCopyAppValue = _CFPreferencesCopyAppValuePtr
      .asFunction<CFPropertyListRef Function(CFStringRef, CFStringRef)>();

  int CFPreferencesGetAppBooleanValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppBooleanValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppBooleanValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppBooleanValue');
  late final _CFPreferencesGetAppBooleanValue =
      _CFPreferencesGetAppBooleanValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  int CFPreferencesGetAppIntegerValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppIntegerValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppIntegerValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppIntegerValue');
  late final _CFPreferencesGetAppIntegerValue =
      _CFPreferencesGetAppIntegerValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  void CFPreferencesSetAppValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesSetAppValue(
      key,
      value,
      applicationID,
    );
  }

  late final _CFPreferencesSetAppValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef,
              CFStringRef)>>('CFPreferencesSetAppValue');
  late final _CFPreferencesSetAppValue = _CFPreferencesSetAppValuePtr
      .asFunction<void Function(CFStringRef, CFPropertyListRef, CFStringRef)>();

  void CFPreferencesAddSuitePreferencesToApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesAddSuitePreferencesToApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesAddSuitePreferencesToAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAddSuitePreferencesToApp');
  late final _CFPreferencesAddSuitePreferencesToApp =
      _CFPreferencesAddSuitePreferencesToAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  void CFPreferencesRemoveSuitePreferencesFromApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesRemoveSuitePreferencesFromApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesRemoveSuitePreferencesFromAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesRemoveSuitePreferencesFromApp');
  late final _CFPreferencesRemoveSuitePreferencesFromApp =
      _CFPreferencesRemoveSuitePreferencesFromAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  int CFPreferencesAppSynchronize(
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppSynchronize(
      applicationID,
    );
  }

  late final _CFPreferencesAppSynchronizePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef)>>(
          'CFPreferencesAppSynchronize');
  late final _CFPreferencesAppSynchronize =
      _CFPreferencesAppSynchronizePtr.asFunction<int Function(CFStringRef)>();

  CFPropertyListRef CFPreferencesCopyValue(
    CFStringRef key,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyValue(
      key,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyValue');
  late final _CFPreferencesCopyValue = _CFPreferencesCopyValuePtr.asFunction<
      CFPropertyListRef Function(
          CFStringRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFPreferencesCopyMultiple(
    CFArrayRef keysToFetch,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyMultiple(
      keysToFetch,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyMultiplePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyMultiple');
  late final _CFPreferencesCopyMultiple =
      _CFPreferencesCopyMultiplePtr.asFunction<
          CFDictionaryRef Function(
              CFArrayRef, CFStringRef, CFStringRef, CFStringRef)>();

  void CFPreferencesSetValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetValue(
      key,
      value,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetValue');
  late final _CFPreferencesSetValue = _CFPreferencesSetValuePtr.asFunction<
      void Function(CFStringRef, CFPropertyListRef, CFStringRef, CFStringRef,
          CFStringRef)>();

  void CFPreferencesSetMultiple(
    CFDictionaryRef keysToSet,
    CFArrayRef keysToRemove,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetMultiple(
      keysToSet,
      keysToRemove,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetMultiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFArrayRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetMultiple');
  late final _CFPreferencesSetMultiple =
      _CFPreferencesSetMultiplePtr.asFunction<
          void Function(CFDictionaryRef, CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  int CFPreferencesSynchronize(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSynchronize(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSynchronizePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesSynchronize');
  late final _CFPreferencesSynchronize = _CFPreferencesSynchronizePtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyApplicationList(
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyApplicationList(
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyApplicationListPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFStringRef, CFStringRef)>>(
      'CFPreferencesCopyApplicationList');
  late final _CFPreferencesCopyApplicationList =
      _CFPreferencesCopyApplicationListPtr.asFunction<
          CFArrayRef Function(CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyKeyList(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyKeyList(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyKeyListPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyKeyList');
  late final _CFPreferencesCopyKeyList = _CFPreferencesCopyKeyListPtr
      .asFunction<CFArrayRef Function(CFStringRef, CFStringRef, CFStringRef)>();

  int CFPreferencesAppValueIsForced(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppValueIsForced(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesAppValueIsForcedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAppValueIsForced');
  late final _CFPreferencesAppValueIsForced = _CFPreferencesAppValueIsForcedPtr
      .asFunction<int Function(CFStringRef, CFStringRef)>();

  int CFURLGetTypeID() {
    return _CFURLGetTypeID();
  }

  late final _CFURLGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFURLGetTypeID');
  late final _CFURLGetTypeID = _CFURLGetTypeIDPtr.asFunction<int Function()>();

  CFURLRef CFURLCreateWithBytes(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> URLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithBytes(
      allocator,
      URLBytes,
      length,
      encoding,
      baseURL,
    );
  }

  late final _CFURLCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, CFURLRef)>>('CFURLCreateWithBytes');
  late final _CFURLCreateWithBytes = _CFURLCreateWithBytesPtr.asFunction<
      CFURLRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  CFDataRef CFURLCreateData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int encoding,
    int escapeWhitespace,
  ) {
    return _CFURLCreateData(
      allocator,
      url,
      encoding,
      escapeWhitespace,
    );
  }

  late final _CFURLCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, CFStringEncoding,
              Boolean)>>('CFURLCreateData');
  late final _CFURLCreateData = _CFURLCreateDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFURLRef CFURLCreateWithString(
    CFAllocatorRef allocator,
    CFStringRef URLString,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithString(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithStringPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, CFStringRef, CFURLRef)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString = _CFURLCreateWithStringPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLRef)>();

  CFURLRef CFURLCreateAbsoluteURLWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> relativeURLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
    int useCompatibilityMode,
  ) {
    return _CFURLCreateAbsoluteURLWithBytes(
      alloc,
      relativeURLBytes,
      length,
      encoding,
      baseURL,
      useCompatibilityMode,
    );
  }

  late final _CFURLCreateAbsoluteURLWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              CFURLRef,
              Boolean)>>('CFURLCreateAbsoluteURLWithBytes');
  late final _CFURLCreateAbsoluteURLWithBytes =
      _CFURLCreateAbsoluteURLWithBytesPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef, int)>();

  CFURLRef CFURLCreateWithFileSystemPath(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
  ) {
    return _CFURLCreateWithFileSystemPath(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
    );
  }

  late final _CFURLCreateWithFileSystemPathPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, ffi.Int32,
              Boolean)>>('CFURLCreateWithFileSystemPath');
  late final _CFURLCreateWithFileSystemPath = _CFURLCreateWithFileSystemPathPtr
      .asFunction<CFURLRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  CFURLRef CFURLCreateFromFileSystemRepresentation(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
  ) {
    return _CFURLCreateFromFileSystemRepresentation(
      allocator,
      buffer,
      bufLen,
      isDirectory,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              Boolean)>>('CFURLCreateFromFileSystemRepresentation');
  late final _CFURLCreateFromFileSystemRepresentation =
      _CFURLCreateFromFileSystemRepresentationPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int)>();

  CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithFileSystemPathRelativeToBase(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateWithFileSystemPathRelativeToBasePtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, ffi.Int32, Boolean,
              CFURLRef)>>('CFURLCreateWithFileSystemPathRelativeToBase');
  late final _CFURLCreateWithFileSystemPathRelativeToBase =
      _CFURLCreateWithFileSystemPathRelativeToBasePtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int, CFURLRef)>();

  CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateFromFileSystemRepresentationRelativeToBase(
      allocator,
      buffer,
      bufLen,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr =
      _lookup<
              ffi.NativeFunction<
                  CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
                      Boolean, CFURLRef)>>(
          'CFURLCreateFromFileSystemRepresentationRelativeToBase');
  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase =
      _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  int CFURLGetFileSystemRepresentation(
    CFURLRef url,
    int resolveAgainstBase,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
  ) {
    return _CFURLGetFileSystemRepresentation(
      url,
      resolveAgainstBase,
      buffer,
      maxBufLen,
    );
  }

  late final _CFURLGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, Boolean, ffi.Pointer<UInt8>,
              CFIndex)>>('CFURLGetFileSystemRepresentation');
  late final _CFURLGetFileSystemRepresentation =
      _CFURLGetFileSystemRepresentationPtr.asFunction<
          int Function(CFURLRef, int, ffi.Pointer<UInt8>, int)>();

  CFURLRef CFURLCopyAbsoluteURL(
    CFURLRef relativeURL,
  ) {
    return _CFURLCopyAbsoluteURL(
      relativeURL,
    );
  }

  late final _CFURLCopyAbsoluteURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLCopyAbsoluteURL');
  late final _CFURLCopyAbsoluteURL =
      _CFURLCopyAbsoluteURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  CFStringRef CFURLGetString(
    CFURLRef anURL,
  ) {
    return _CFURLGetString(
      anURL,
    );
  }

  late final _CFURLGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLGetString');
  late final _CFURLGetString =
      _CFURLGetStringPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLGetBaseURL(
    CFURLRef anURL,
  ) {
    return _CFURLGetBaseURL(
      anURL,
    );
  }

  late final _CFURLGetBaseURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLGetBaseURL');
  late final _CFURLGetBaseURL =
      _CFURLGetBaseURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  int CFURLCanBeDecomposed(
    CFURLRef anURL,
  ) {
    return _CFURLCanBeDecomposed(
      anURL,
    );
  }

  late final _CFURLCanBeDecomposedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLCanBeDecomposed');
  late final _CFURLCanBeDecomposed =
      _CFURLCanBeDecomposedPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyScheme(
    CFURLRef anURL,
  ) {
    return _CFURLCopyScheme(
      anURL,
    );
  }

  late final _CFURLCopySchemePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyScheme');
  late final _CFURLCopyScheme =
      _CFURLCopySchemePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyNetLocation(
    CFURLRef anURL,
  ) {
    return _CFURLCopyNetLocation(
      anURL,
    );
  }

  late final _CFURLCopyNetLocationPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyNetLocation');
  late final _CFURLCopyNetLocation =
      _CFURLCopyNetLocationPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPath(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPath(
      anURL,
    );
  }

  late final _CFURLCopyPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPath');
  late final _CFURLCopyPath =
      _CFURLCopyPathPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyStrictPath(
    CFURLRef anURL,
    ffi.Pointer<Boolean> isAbsolute,
  ) {
    return _CFURLCopyStrictPath(
      anURL,
      isAbsolute,
    );
  }

  late final _CFURLCopyStrictPathPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFURLRef, ffi.Pointer<Boolean>)>>('CFURLCopyStrictPath');
  late final _CFURLCopyStrictPath = _CFURLCopyStrictPathPtr.asFunction<
      CFStringRef Function(CFURLRef, ffi.Pointer<Boolean>)>();

  CFStringRef CFURLCopyFileSystemPath(
    CFURLRef anURL,
    int pathStyle,
  ) {
    return _CFURLCopyFileSystemPath(
      anURL,
      pathStyle,
    );
  }

  late final _CFURLCopyFileSystemPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, ffi.Int32)>>(
          'CFURLCopyFileSystemPath');
  late final _CFURLCopyFileSystemPath = _CFURLCopyFileSystemPathPtr.asFunction<
      CFStringRef Function(CFURLRef, int)>();

  int CFURLHasDirectoryPath(
    CFURLRef anURL,
  ) {
    return _CFURLHasDirectoryPath(
      anURL,
    );
  }

  late final _CFURLHasDirectoryPathPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLHasDirectoryPath');
  late final _CFURLHasDirectoryPath =
      _CFURLHasDirectoryPathPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyResourceSpecifier(
    CFURLRef anURL,
  ) {
    return _CFURLCopyResourceSpecifier(
      anURL,
    );
  }

  late final _CFURLCopyResourceSpecifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyResourceSpecifier');
  late final _CFURLCopyResourceSpecifier = _CFURLCopyResourceSpecifierPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyHostName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyHostName(
      anURL,
    );
  }

  late final _CFURLCopyHostNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyHostName');
  late final _CFURLCopyHostName =
      _CFURLCopyHostNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  int CFURLGetPortNumber(
    CFURLRef anURL,
  ) {
    return _CFURLGetPortNumber(
      anURL,
    );
  }

  late final _CFURLGetPortNumberPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFURLRef)>>(
          'CFURLGetPortNumber');
  late final _CFURLGetPortNumber =
      _CFURLGetPortNumberPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyUserName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyUserName(
      anURL,
    );
  }

  late final _CFURLCopyUserNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyUserName');
  late final _CFURLCopyUserName =
      _CFURLCopyUserNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPassword(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPassword(
      anURL,
    );
  }

  late final _CFURLCopyPasswordPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPassword');
  late final _CFURLCopyPassword =
      _CFURLCopyPasswordPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyParameterString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyParameterString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyParameterStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyParameterString');
  late final _CFURLCopyParameterString = _CFURLCopyParameterStringPtr
      .asFunction<CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyQueryString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyQueryString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyQueryStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyQueryString');
  late final _CFURLCopyQueryString = _CFURLCopyQueryStringPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyFragment(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyFragment(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyFragmentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyFragment');
  late final _CFURLCopyFragment = _CFURLCopyFragmentPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyLastPathComponent(
    CFURLRef url,
  ) {
    return _CFURLCopyLastPathComponent(
      url,
    );
  }

  late final _CFURLCopyLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyLastPathComponent');
  late final _CFURLCopyLastPathComponent = _CFURLCopyLastPathComponentPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPathExtension(
    CFURLRef url,
  ) {
    return _CFURLCopyPathExtension(
      url,
    );
  }

  late final _CFURLCopyPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPathExtension');
  late final _CFURLCopyPathExtension =
      _CFURLCopyPathExtensionPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef pathComponent,
    int isDirectory,
  ) {
    return _CFURLCreateCopyAppendingPathComponent(
      allocator,
      url,
      pathComponent,
      isDirectory,
    );
  }

  late final _CFURLCreateCopyAppendingPathComponentPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              Boolean)>>('CFURLCreateCopyAppendingPathComponent');
  late final _CFURLCreateCopyAppendingPathComponent =
      _CFURLCreateCopyAppendingPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef, int)>();

  CFURLRef CFURLCreateCopyDeletingLastPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingLastPathComponent(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingLastPathComponent');
  late final _CFURLCreateCopyDeletingLastPathComponent =
      _CFURLCreateCopyDeletingLastPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef extension1,
  ) {
    return _CFURLCreateCopyAppendingPathExtension(
      allocator,
      url,
      extension1,
    );
  }

  late final _CFURLCreateCopyAppendingPathExtensionPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFURLCreateCopyAppendingPathExtension');
  late final _CFURLCreateCopyAppendingPathExtension =
      _CFURLCreateCopyAppendingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFURLCreateCopyDeletingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingPathExtension(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingPathExtension');
  late final _CFURLCreateCopyDeletingPathExtension =
      _CFURLCreateCopyDeletingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  int CFURLGetBytes(
    CFURLRef url,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFURLGetBytes(
      url,
      buffer,
      bufferLength,
    );
  }

  late final _CFURLGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFURLRef, ffi.Pointer<UInt8>, CFIndex)>>('CFURLGetBytes');
  late final _CFURLGetBytes = _CFURLGetBytesPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<UInt8>, int)>();

  CFRange CFURLGetByteRangeForComponent(
    CFURLRef url,
    int component,
    ffi.Pointer<CFRange> rangeIncludingSeparators,
  ) {
    return _CFURLGetByteRangeForComponent(
      url,
      component,
      rangeIncludingSeparators,
    );
  }

  late final _CFURLGetByteRangeForComponentPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFURLRef, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFURLGetByteRangeForComponent');
  late final _CFURLGetByteRangeForComponent = _CFURLGetByteRangeForComponentPtr
      .asFunction<CFRange Function(CFURLRef, int, ffi.Pointer<CFRange>)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFURLCreateStringByReplacingPercentEscapes');
  late final _CFURLCreateStringByReplacingPercentEscapes =
      _CFURLCreateStringByReplacingPercentEscapesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
    CFAllocatorRef allocator,
    CFStringRef origString,
    CFStringRef charsToLeaveEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
      allocator,
      origString,
      charsToLeaveEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr =
      _lookup<
              ffi.NativeFunction<
                  CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef,
                      CFStringEncoding)>>(
          'CFURLCreateStringByReplacingPercentEscapesUsingEncoding');
  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding =
      _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, int)>();

  CFStringRef CFURLCreateStringByAddingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveUnescaped,
    CFStringRef legalURLCharactersToBeEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByAddingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveUnescaped,
      legalURLCharactersToBeEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByAddingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringEncoding)>>('CFURLCreateStringByAddingPercentEscapes');
  late final _CFURLCreateStringByAddingPercentEscapes =
      _CFURLCreateStringByAddingPercentEscapesPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFStringRef, int)>();

  int CFURLIsFileReferenceURL(
    CFURLRef url,
  ) {
    return _CFURLIsFileReferenceURL(
      url,
    );
  }

  late final _CFURLIsFileReferenceURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLIsFileReferenceURL');
  late final _CFURLIsFileReferenceURL =
      _CFURLIsFileReferenceURLPtr.asFunction<int Function(CFURLRef)>();

  CFURLRef CFURLCreateFileReferenceURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFileReferenceURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFileReferenceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFileReferenceURL');
  late final _CFURLCreateFileReferenceURL =
      _CFURLCreateFileReferenceURLPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFilePathURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFilePathURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFilePathURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFilePathURL');
  late final _CFURLCreateFilePathURL = _CFURLCreateFilePathURLPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFromFSRef(
    CFAllocatorRef allocator,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLCreateFromFSRef(
      allocator,
      fsRef,
    );
  }

  late final _CFURLCreateFromFSRefPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<FSRef>)>>('CFURLCreateFromFSRef');
  late final _CFURLCreateFromFSRef = _CFURLCreateFromFSRefPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, ffi.Pointer<FSRef>)>();

  int CFURLGetFSRef(
    CFURLRef url,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLGetFSRef(
      url,
      fsRef,
    );
  }

  late final _CFURLGetFSRefPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<FSRef>)>>(
      'CFURLGetFSRef');
  late final _CFURLGetFSRef = _CFURLGetFSRefPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<FSRef>)>();

  int CFURLCopyResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    ffi.Pointer<ffi.Void> propertyValueTypeRefPtr,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertyForKey(
      url,
      key,
      propertyValueTypeRefPtr,
      error,
    );
  }

  late final _CFURLCopyResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertyForKey');
  late final _CFURLCopyResourcePropertyForKey =
      _CFURLCopyResourcePropertyForKeyPtr.asFunction<
          int Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCopyResourcePropertiesForKeys(
    CFURLRef url,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertiesForKeys(
      url,
      keys,
      error,
    );
  }

  late final _CFURLCopyResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFURLRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertiesForKeys');
  late final _CFURLCopyResourcePropertiesForKeys =
      _CFURLCopyResourcePropertiesForKeysPtr.asFunction<
          CFDictionaryRef Function(
              CFURLRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertyForKey(
      url,
      key,
      propertyValue,
      error,
    );
  }

  late final _CFURLSetResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, CFTypeRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertyForKey');
  late final _CFURLSetResourcePropertyForKey =
      _CFURLSetResourcePropertyForKeyPtr.asFunction<
          int Function(
              CFURLRef, CFStringRef, CFTypeRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertiesForKeys(
    CFURLRef url,
    CFDictionaryRef keyedPropertyValues,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertiesForKeys(
      url,
      keyedPropertyValues,
      error,
    );
  }

  late final _CFURLSetResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertiesForKeys');
  late final _CFURLSetResourcePropertiesForKeys =
      _CFURLSetResourcePropertiesForKeysPtr.asFunction<
          int Function(CFURLRef, CFDictionaryRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLKeysOfUnsetValuesKey =
      _lookup<CFStringRef>('kCFURLKeysOfUnsetValuesKey');

  CFStringRef get kCFURLKeysOfUnsetValuesKey =>
      _kCFURLKeysOfUnsetValuesKey.value;

  set kCFURLKeysOfUnsetValuesKey(CFStringRef value) =>
      _kCFURLKeysOfUnsetValuesKey.value = value;

  void CFURLClearResourcePropertyCacheForKey(
    CFURLRef url,
    CFStringRef key,
  ) {
    return _CFURLClearResourcePropertyCacheForKey(
      url,
      key,
    );
  }

  late final _CFURLClearResourcePropertyCacheForKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef, CFStringRef)>>(
          'CFURLClearResourcePropertyCacheForKey');
  late final _CFURLClearResourcePropertyCacheForKey =
      _CFURLClearResourcePropertyCacheForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef)>();

  void CFURLClearResourcePropertyCache(
    CFURLRef url,
  ) {
    return _CFURLClearResourcePropertyCache(
      url,
    );
  }

  late final _CFURLClearResourcePropertyCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLClearResourcePropertyCache');
  late final _CFURLClearResourcePropertyCache =
      _CFURLClearResourcePropertyCachePtr.asFunction<void Function(CFURLRef)>();

  void CFURLSetTemporaryResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
  ) {
    return _CFURLSetTemporaryResourcePropertyForKey(
      url,
      key,
      propertyValue,
    );
  }

  late final _CFURLSetTemporaryResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFURLRef, CFStringRef,
              CFTypeRef)>>('CFURLSetTemporaryResourcePropertyForKey');
  late final _CFURLSetTemporaryResourcePropertyForKey =
      _CFURLSetTemporaryResourcePropertyForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef, CFTypeRef)>();

  int CFURLResourceIsReachable(
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLResourceIsReachable(
      url,
      error,
    );
  }

  late final _CFURLResourceIsReachablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLResourceIsReachable');
  late final _CFURLResourceIsReachable = _CFURLResourceIsReachablePtr
      .asFunction<int Function(CFURLRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLNameKey =
      _lookup<CFStringRef>('kCFURLNameKey');

  CFStringRef get kCFURLNameKey => _kCFURLNameKey.value;

  set kCFURLNameKey(CFStringRef value) => _kCFURLNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLLocalizedNameKey');

  CFStringRef get kCFURLLocalizedNameKey => _kCFURLLocalizedNameKey.value;

  set kCFURLLocalizedNameKey(CFStringRef value) =>
      _kCFURLLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsRegularFileKey =
      _lookup<CFStringRef>('kCFURLIsRegularFileKey');

  CFStringRef get kCFURLIsRegularFileKey => _kCFURLIsRegularFileKey.value;

  set kCFURLIsRegularFileKey(CFStringRef value) =>
      _kCFURLIsRegularFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsDirectoryKey =
      _lookup<CFStringRef>('kCFURLIsDirectoryKey');

  CFStringRef get kCFURLIsDirectoryKey => _kCFURLIsDirectoryKey.value;

  set kCFURLIsDirectoryKey(CFStringRef value) =>
      _kCFURLIsDirectoryKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSymbolicLinkKey =
      _lookup<CFStringRef>('kCFURLIsSymbolicLinkKey');

  CFStringRef get kCFURLIsSymbolicLinkKey => _kCFURLIsSymbolicLinkKey.value;

  set kCFURLIsSymbolicLinkKey(CFStringRef value) =>
      _kCFURLIsSymbolicLinkKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsVolumeKey =
      _lookup<CFStringRef>('kCFURLIsVolumeKey');

  CFStringRef get kCFURLIsVolumeKey => _kCFURLIsVolumeKey.value;

  set kCFURLIsVolumeKey(CFStringRef value) => _kCFURLIsVolumeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPackageKey =
      _lookup<CFStringRef>('kCFURLIsPackageKey');

  CFStringRef get kCFURLIsPackageKey => _kCFURLIsPackageKey.value;

  set kCFURLIsPackageKey(CFStringRef value) =>
      _kCFURLIsPackageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsApplicationKey =
      _lookup<CFStringRef>('kCFURLIsApplicationKey');

  CFStringRef get kCFURLIsApplicationKey => _kCFURLIsApplicationKey.value;

  set kCFURLIsApplicationKey(CFStringRef value) =>
      _kCFURLIsApplicationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLApplicationIsScriptableKey =
      _lookup<CFStringRef>('kCFURLApplicationIsScriptableKey');

  CFStringRef get kCFURLApplicationIsScriptableKey =>
      _kCFURLApplicationIsScriptableKey.value;

  set kCFURLApplicationIsScriptableKey(CFStringRef value) =>
      _kCFURLApplicationIsScriptableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSystemImmutableKey =
      _lookup<CFStringRef>('kCFURLIsSystemImmutableKey');

  CFStringRef get kCFURLIsSystemImmutableKey =>
      _kCFURLIsSystemImmutableKey.value;

  set kCFURLIsSystemImmutableKey(CFStringRef value) =>
      _kCFURLIsSystemImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUserImmutableKey =
      _lookup<CFStringRef>('kCFURLIsUserImmutableKey');

  CFStringRef get kCFURLIsUserImmutableKey => _kCFURLIsUserImmutableKey.value;

  set kCFURLIsUserImmutableKey(CFStringRef value) =>
      _kCFURLIsUserImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsHiddenKey =
      _lookup<CFStringRef>('kCFURLIsHiddenKey');

  CFStringRef get kCFURLIsHiddenKey => _kCFURLIsHiddenKey.value;

  set kCFURLIsHiddenKey(CFStringRef value) => _kCFURLIsHiddenKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHasHiddenExtensionKey =
      _lookup<CFStringRef>('kCFURLHasHiddenExtensionKey');

  CFStringRef get kCFURLHasHiddenExtensionKey =>
      _kCFURLHasHiddenExtensionKey.value;

  set kCFURLHasHiddenExtensionKey(CFStringRef value) =>
      _kCFURLHasHiddenExtensionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCreationDateKey =
      _lookup<CFStringRef>('kCFURLCreationDateKey');

  CFStringRef get kCFURLCreationDateKey => _kCFURLCreationDateKey.value;

  set kCFURLCreationDateKey(CFStringRef value) =>
      _kCFURLCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentAccessDateKey =
      _lookup<CFStringRef>('kCFURLContentAccessDateKey');

  CFStringRef get kCFURLContentAccessDateKey =>
      _kCFURLContentAccessDateKey.value;

  set kCFURLContentAccessDateKey(CFStringRef value) =>
      _kCFURLContentAccessDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentModificationDateKey =
      _lookup<CFStringRef>('kCFURLContentModificationDateKey');

  CFStringRef get kCFURLContentModificationDateKey =>
      _kCFURLContentModificationDateKey.value;

  set kCFURLContentModificationDateKey(CFStringRef value) =>
      _kCFURLContentModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAttributeModificationDateKey =
      _lookup<CFStringRef>('kCFURLAttributeModificationDateKey');

  CFStringRef get kCFURLAttributeModificationDateKey =>
      _kCFURLAttributeModificationDateKey.value;

  set kCFURLAttributeModificationDateKey(CFStringRef value) =>
      _kCFURLAttributeModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileContentIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileContentIdentifierKey');

  CFStringRef get kCFURLFileContentIdentifierKey =>
      _kCFURLFileContentIdentifierKey.value;

  set kCFURLFileContentIdentifierKey(CFStringRef value) =>
      _kCFURLFileContentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayShareFileContentKey =
      _lookup<CFStringRef>('kCFURLMayShareFileContentKey');

  CFStringRef get kCFURLMayShareFileContentKey =>
      _kCFURLMayShareFileContentKey.value;

  set kCFURLMayShareFileContentKey(CFStringRef value) =>
      _kCFURLMayShareFileContentKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayHaveExtendedAttributesKey =
      _lookup<CFStringRef>('kCFURLMayHaveExtendedAttributesKey');

  CFStringRef get kCFURLMayHaveExtendedAttributesKey =>
      _kCFURLMayHaveExtendedAttributesKey.value;

  set kCFURLMayHaveExtendedAttributesKey(CFStringRef value) =>
      _kCFURLMayHaveExtendedAttributesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPurgeableKey =
      _lookup<CFStringRef>('kCFURLIsPurgeableKey');

  CFStringRef get kCFURLIsPurgeableKey => _kCFURLIsPurgeableKey.value;

  set kCFURLIsPurgeableKey(CFStringRef value) =>
      _kCFURLIsPurgeableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSparseKey =
      _lookup<CFStringRef>('kCFURLIsSparseKey');

  CFStringRef get kCFURLIsSparseKey => _kCFURLIsSparseKey.value;

  set kCFURLIsSparseKey(CFStringRef value) => _kCFURLIsSparseKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLinkCountKey =
      _lookup<CFStringRef>('kCFURLLinkCountKey');

  CFStringRef get kCFURLLinkCountKey => _kCFURLLinkCountKey.value;

  set kCFURLLinkCountKey(CFStringRef value) =>
      _kCFURLLinkCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLParentDirectoryURLKey =
      _lookup<CFStringRef>('kCFURLParentDirectoryURLKey');

  CFStringRef get kCFURLParentDirectoryURLKey =>
      _kCFURLParentDirectoryURLKey.value;

  set kCFURLParentDirectoryURLKey(CFStringRef value) =>
      _kCFURLParentDirectoryURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLKey =
      _lookup<CFStringRef>('kCFURLVolumeURLKey');

  CFStringRef get kCFURLVolumeURLKey => _kCFURLVolumeURLKey.value;

  set kCFURLVolumeURLKey(CFStringRef value) =>
      _kCFURLVolumeURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTypeIdentifierKey =
      _lookup<CFStringRef>('kCFURLTypeIdentifierKey');

  CFStringRef get kCFURLTypeIdentifierKey => _kCFURLTypeIdentifierKey.value;

  set kCFURLTypeIdentifierKey(CFStringRef value) =>
      _kCFURLTypeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedTypeDescriptionKey =
      _lookup<CFStringRef>('kCFURLLocalizedTypeDescriptionKey');

  CFStringRef get kCFURLLocalizedTypeDescriptionKey =>
      _kCFURLLocalizedTypeDescriptionKey.value;

  set kCFURLLocalizedTypeDescriptionKey(CFStringRef value) =>
      _kCFURLLocalizedTypeDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelNumberKey =
      _lookup<CFStringRef>('kCFURLLabelNumberKey');

  CFStringRef get kCFURLLabelNumberKey => _kCFURLLabelNumberKey.value;

  set kCFURLLabelNumberKey(CFStringRef value) =>
      _kCFURLLabelNumberKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelColorKey =
      _lookup<CFStringRef>('kCFURLLabelColorKey');

  CFStringRef get kCFURLLabelColorKey => _kCFURLLabelColorKey.value;

  set kCFURLLabelColorKey(CFStringRef value) =>
      _kCFURLLabelColorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedLabelKey =
      _lookup<CFStringRef>('kCFURLLocalizedLabelKey');

  CFStringRef get kCFURLLocalizedLabelKey => _kCFURLLocalizedLabelKey.value;

  set kCFURLLocalizedLabelKey(CFStringRef value) =>
      _kCFURLLocalizedLabelKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLEffectiveIconKey =
      _lookup<CFStringRef>('kCFURLEffectiveIconKey');

  CFStringRef get kCFURLEffectiveIconKey => _kCFURLEffectiveIconKey.value;

  set kCFURLEffectiveIconKey(CFStringRef value) =>
      _kCFURLEffectiveIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCustomIconKey =
      _lookup<CFStringRef>('kCFURLCustomIconKey');

  CFStringRef get kCFURLCustomIconKey => _kCFURLCustomIconKey.value;

  set kCFURLCustomIconKey(CFStringRef value) =>
      _kCFURLCustomIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileResourceIdentifierKey');

  CFStringRef get kCFURLFileResourceIdentifierKey =>
      _kCFURLFileResourceIdentifierKey.value;

  set kCFURLFileResourceIdentifierKey(CFStringRef value) =>
      _kCFURLFileResourceIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIdentifierKey =
      _lookup<CFStringRef>('kCFURLVolumeIdentifierKey');

  CFStringRef get kCFURLVolumeIdentifierKey => _kCFURLVolumeIdentifierKey.value;

  set kCFURLVolumeIdentifierKey(CFStringRef value) =>
      _kCFURLVolumeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPreferredIOBlockSizeKey =
      _lookup<CFStringRef>('kCFURLPreferredIOBlockSizeKey');

  CFStringRef get kCFURLPreferredIOBlockSizeKey =>
      _kCFURLPreferredIOBlockSizeKey.value;

  set kCFURLPreferredIOBlockSizeKey(CFStringRef value) =>
      _kCFURLPreferredIOBlockSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsReadableKey =
      _lookup<CFStringRef>('kCFURLIsReadableKey');

  CFStringRef get kCFURLIsReadableKey => _kCFURLIsReadableKey.value;

  set kCFURLIsReadableKey(CFStringRef value) =>
      _kCFURLIsReadableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsWritableKey =
      _lookup<CFStringRef>('kCFURLIsWritableKey');

  CFStringRef get kCFURLIsWritableKey => _kCFURLIsWritableKey.value;

  set kCFURLIsWritableKey(CFStringRef value) =>
      _kCFURLIsWritableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExecutableKey =
      _lookup<CFStringRef>('kCFURLIsExecutableKey');

  CFStringRef get kCFURLIsExecutableKey => _kCFURLIsExecutableKey.value;

  set kCFURLIsExecutableKey(CFStringRef value) =>
      _kCFURLIsExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSecurityKey =
      _lookup<CFStringRef>('kCFURLFileSecurityKey');

  CFStringRef get kCFURLFileSecurityKey => _kCFURLFileSecurityKey.value;

  set kCFURLFileSecurityKey(CFStringRef value) =>
      _kCFURLFileSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExcludedFromBackupKey =
      _lookup<CFStringRef>('kCFURLIsExcludedFromBackupKey');

  CFStringRef get kCFURLIsExcludedFromBackupKey =>
      _kCFURLIsExcludedFromBackupKey.value;

  set kCFURLIsExcludedFromBackupKey(CFStringRef value) =>
      _kCFURLIsExcludedFromBackupKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTagNamesKey =
      _lookup<CFStringRef>('kCFURLTagNamesKey');

  CFStringRef get kCFURLTagNamesKey => _kCFURLTagNamesKey.value;

  set kCFURLTagNamesKey(CFStringRef value) => _kCFURLTagNamesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPathKey =
      _lookup<CFStringRef>('kCFURLPathKey');

  CFStringRef get kCFURLPathKey => _kCFURLPathKey.value;

  set kCFURLPathKey(CFStringRef value) => _kCFURLPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCanonicalPathKey =
      _lookup<CFStringRef>('kCFURLCanonicalPathKey');

  CFStringRef get kCFURLCanonicalPathKey => _kCFURLCanonicalPathKey.value;

  set kCFURLCanonicalPathKey(CFStringRef value) =>
      _kCFURLCanonicalPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsMountTriggerKey =
      _lookup<CFStringRef>('kCFURLIsMountTriggerKey');

  CFStringRef get kCFURLIsMountTriggerKey => _kCFURLIsMountTriggerKey.value;

  set kCFURLIsMountTriggerKey(CFStringRef value) =>
      _kCFURLIsMountTriggerKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLGenerationIdentifierKey =
      _lookup<CFStringRef>('kCFURLGenerationIdentifierKey');

  CFStringRef get kCFURLGenerationIdentifierKey =>
      _kCFURLGenerationIdentifierKey.value;

  set kCFURLGenerationIdentifierKey(CFStringRef value) =>
      _kCFURLGenerationIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLDocumentIdentifierKey =
      _lookup<CFStringRef>('kCFURLDocumentIdentifierKey');

  CFStringRef get kCFURLDocumentIdentifierKey =>
      _kCFURLDocumentIdentifierKey.value;

  set kCFURLDocumentIdentifierKey(CFStringRef value) =>
      _kCFURLDocumentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAddedToDirectoryDateKey =
      _lookup<CFStringRef>('kCFURLAddedToDirectoryDateKey');

  CFStringRef get kCFURLAddedToDirectoryDateKey =>
      _kCFURLAddedToDirectoryDateKey.value;

  set kCFURLAddedToDirectoryDateKey(CFStringRef value) =>
      _kCFURLAddedToDirectoryDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLQuarantinePropertiesKey =
      _lookup<CFStringRef>('kCFURLQuarantinePropertiesKey');

  CFStringRef get kCFURLQuarantinePropertiesKey =>
      _kCFURLQuarantinePropertiesKey.value;

  set kCFURLQuarantinePropertiesKey(CFStringRef value) =>
      _kCFURLQuarantinePropertiesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeKey =
      _lookup<CFStringRef>('kCFURLFileResourceTypeKey');

  CFStringRef get kCFURLFileResourceTypeKey => _kCFURLFileResourceTypeKey.value;

  set kCFURLFileResourceTypeKey(CFStringRef value) =>
      _kCFURLFileResourceTypeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeNamedPipe =
      _lookup<CFStringRef>('kCFURLFileResourceTypeNamedPipe');

  CFStringRef get kCFURLFileResourceTypeNamedPipe =>
      _kCFURLFileResourceTypeNamedPipe.value;

  set kCFURLFileResourceTypeNamedPipe(CFStringRef value) =>
      _kCFURLFileResourceTypeNamedPipe.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeCharacterSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeCharacterSpecial');

  CFStringRef get kCFURLFileResourceTypeCharacterSpecial =>
      _kCFURLFileResourceTypeCharacterSpecial.value;

  set kCFURLFileResourceTypeCharacterSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeCharacterSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeDirectory =
      _lookup<CFStringRef>('kCFURLFileResourceTypeDirectory');

  CFStringRef get kCFURLFileResourceTypeDirectory =>
      _kCFURLFileResourceTypeDirectory.value;

  set kCFURLFileResourceTypeDirectory(CFStringRef value) =>
      _kCFURLFileResourceTypeDirectory.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeBlockSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeBlockSpecial');

  CFStringRef get kCFURLFileResourceTypeBlockSpecial =>
      _kCFURLFileResourceTypeBlockSpecial.value;

  set kCFURLFileResourceTypeBlockSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeBlockSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeRegular =
      _lookup<CFStringRef>('kCFURLFileResourceTypeRegular');

  CFStringRef get kCFURLFileResourceTypeRegular =>
      _kCFURLFileResourceTypeRegular.value;

  set kCFURLFileResourceTypeRegular(CFStringRef value) =>
      _kCFURLFileResourceTypeRegular.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSymbolicLink =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSymbolicLink');

  CFStringRef get kCFURLFileResourceTypeSymbolicLink =>
      _kCFURLFileResourceTypeSymbolicLink.value;

  set kCFURLFileResourceTypeSymbolicLink(CFStringRef value) =>
      _kCFURLFileResourceTypeSymbolicLink.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSocket =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSocket');

  CFStringRef get kCFURLFileResourceTypeSocket =>
      _kCFURLFileResourceTypeSocket.value;

  set kCFURLFileResourceTypeSocket(CFStringRef value) =>
      _kCFURLFileResourceTypeSocket.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeUnknown =
      _lookup<CFStringRef>('kCFURLFileResourceTypeUnknown');

  CFStringRef get kCFURLFileResourceTypeUnknown =>
      _kCFURLFileResourceTypeUnknown.value;

  set kCFURLFileResourceTypeUnknown(CFStringRef value) =>
      _kCFURLFileResourceTypeUnknown.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSizeKey =
      _lookup<CFStringRef>('kCFURLFileSizeKey');

  CFStringRef get kCFURLFileSizeKey => _kCFURLFileSizeKey.value;

  set kCFURLFileSizeKey(CFStringRef value) => _kCFURLFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLFileAllocatedSizeKey');

  CFStringRef get kCFURLFileAllocatedSizeKey =>
      _kCFURLFileAllocatedSizeKey.value;

  set kCFURLFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileSizeKey');

  CFStringRef get kCFURLTotalFileSizeKey => _kCFURLTotalFileSizeKey.value;

  set kCFURLTotalFileSizeKey(CFStringRef value) =>
      _kCFURLTotalFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileAllocatedSizeKey');

  CFStringRef get kCFURLTotalFileAllocatedSizeKey =>
      _kCFURLTotalFileAllocatedSizeKey.value;

  set kCFURLTotalFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLTotalFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsAliasFileKey =
      _lookup<CFStringRef>('kCFURLIsAliasFileKey');

  CFStringRef get kCFURLIsAliasFileKey => _kCFURLIsAliasFileKey.value;

  set kCFURLIsAliasFileKey(CFStringRef value) =>
      _kCFURLIsAliasFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionKey =
      _lookup<CFStringRef>('kCFURLFileProtectionKey');

  CFStringRef get kCFURLFileProtectionKey => _kCFURLFileProtectionKey.value;

  set kCFURLFileProtectionKey(CFStringRef value) =>
      _kCFURLFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionNone =
      _lookup<CFStringRef>('kCFURLFileProtectionNone');

  CFStringRef get kCFURLFileProtectionNone => _kCFURLFileProtectionNone.value;

  set kCFURLFileProtectionNone(CFStringRef value) =>
      _kCFURLFileProtectionNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionComplete =
      _lookup<CFStringRef>('kCFURLFileProtectionComplete');

  CFStringRef get kCFURLFileProtectionComplete =>
      _kCFURLFileProtectionComplete.value;

  set kCFURLFileProtectionComplete(CFStringRef value) =>
      _kCFURLFileProtectionComplete.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionCompleteUnlessOpen =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteUnlessOpen');

  CFStringRef get kCFURLFileProtectionCompleteUnlessOpen =>
      _kCFURLFileProtectionCompleteUnlessOpen.value;

  set kCFURLFileProtectionCompleteUnlessOpen(CFStringRef value) =>
      _kCFURLFileProtectionCompleteUnlessOpen.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<CFStringRef>(
          'kCFURLFileProtectionCompleteUntilFirstUserAuthentication');

  CFStringRef get kCFURLFileProtectionCompleteUntilFirstUserAuthentication =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  set kCFURLFileProtectionCompleteUntilFirstUserAuthentication(
          CFStringRef value) =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeLocalizedFormatDescriptionKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedFormatDescriptionKey');

  CFStringRef get kCFURLVolumeLocalizedFormatDescriptionKey =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value;

  set kCFURLVolumeLocalizedFormatDescriptionKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTotalCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeTotalCapacityKey');

  CFStringRef get kCFURLVolumeTotalCapacityKey =>
      _kCFURLVolumeTotalCapacityKey.value;

  set kCFURLVolumeTotalCapacityKey(CFStringRef value) =>
      _kCFURLVolumeTotalCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeAvailableCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityKey');

  CFStringRef get kCFURLVolumeAvailableCapacityKey =>
      _kCFURLVolumeAvailableCapacityKey.value;

  set kCFURLVolumeAvailableCapacityKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityForImportantUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForImportantUsageKey =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value;

  set kCFURLVolumeAvailableCapacityForImportantUsageKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<CFStringRef>(
          'kCFURLVolumeAvailableCapacityForOpportunisticUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  set kCFURLVolumeAvailableCapacityForOpportunisticUsageKey(
          CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeResourceCountKey =
      _lookup<CFStringRef>('kCFURLVolumeResourceCountKey');

  CFStringRef get kCFURLVolumeResourceCountKey =>
      _kCFURLVolumeResourceCountKey.value;

  set kCFURLVolumeResourceCountKey(CFStringRef value) =>
      _kCFURLVolumeResourceCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsPersistentIDsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsPersistentIDsKey');

  CFStringRef get kCFURLVolumeSupportsPersistentIDsKey =>
      _kCFURLVolumeSupportsPersistentIDsKey.value;

  set kCFURLVolumeSupportsPersistentIDsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsPersistentIDsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSymbolicLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSymbolicLinksKey');

  CFStringRef get kCFURLVolumeSupportsSymbolicLinksKey =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value;

  set kCFURLVolumeSupportsSymbolicLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsHardLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsHardLinksKey');

  CFStringRef get kCFURLVolumeSupportsHardLinksKey =>
      _kCFURLVolumeSupportsHardLinksKey.value;

  set kCFURLVolumeSupportsHardLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsHardLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsJournalingKey');

  CFStringRef get kCFURLVolumeSupportsJournalingKey =>
      _kCFURLVolumeSupportsJournalingKey.value;

  set kCFURLVolumeSupportsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeIsJournalingKey');

  CFStringRef get kCFURLVolumeIsJournalingKey =>
      _kCFURLVolumeIsJournalingKey.value;

  set kCFURLVolumeIsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeIsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSparseFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSparseFilesKey');

  CFStringRef get kCFURLVolumeSupportsSparseFilesKey =>
      _kCFURLVolumeSupportsSparseFilesKey.value;

  set kCFURLVolumeSupportsSparseFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSparseFilesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsZeroRunsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsZeroRunsKey');

  CFStringRef get kCFURLVolumeSupportsZeroRunsKey =>
      _kCFURLVolumeSupportsZeroRunsKey.value;

  set kCFURLVolumeSupportsZeroRunsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsZeroRunsKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCaseSensitiveNamesKey');

  CFStringRef get kCFURLVolumeSupportsCaseSensitiveNamesKey =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value;

  set kCFURLVolumeSupportsCaseSensitiveNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCasePreservedNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCasePreservedNamesKey');

  CFStringRef get kCFURLVolumeSupportsCasePreservedNamesKey =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value;

  set kCFURLVolumeSupportsCasePreservedNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRootDirectoryDatesKey');

  CFStringRef get kCFURLVolumeSupportsRootDirectoryDatesKey =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value;

  set kCFURLVolumeSupportsRootDirectoryDatesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsVolumeSizesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsVolumeSizesKey');

  CFStringRef get kCFURLVolumeSupportsVolumeSizesKey =>
      _kCFURLVolumeSupportsVolumeSizesKey.value;

  set kCFURLVolumeSupportsVolumeSizesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsVolumeSizesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRenamingKey');

  CFStringRef get kCFURLVolumeSupportsRenamingKey =>
      _kCFURLVolumeSupportsRenamingKey.value;

  set kCFURLVolumeSupportsRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAdvisoryFileLockingKey');

  CFStringRef get kCFURLVolumeSupportsAdvisoryFileLockingKey =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value;

  set kCFURLVolumeSupportsAdvisoryFileLockingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsExtendedSecurityKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExtendedSecurityKey');

  CFStringRef get kCFURLVolumeSupportsExtendedSecurityKey =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value;

  set kCFURLVolumeSupportsExtendedSecurityKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsBrowsableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsBrowsableKey');

  CFStringRef get kCFURLVolumeIsBrowsableKey =>
      _kCFURLVolumeIsBrowsableKey.value;

  set kCFURLVolumeIsBrowsableKey(CFStringRef value) =>
      _kCFURLVolumeIsBrowsableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMaximumFileSizeKey =
      _lookup<CFStringRef>('kCFURLVolumeMaximumFileSizeKey');

  CFStringRef get kCFURLVolumeMaximumFileSizeKey =>
      _kCFURLVolumeMaximumFileSizeKey.value;

  set kCFURLVolumeMaximumFileSizeKey(CFStringRef value) =>
      _kCFURLVolumeMaximumFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEjectableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEjectableKey');

  CFStringRef get kCFURLVolumeIsEjectableKey =>
      _kCFURLVolumeIsEjectableKey.value;

  set kCFURLVolumeIsEjectableKey(CFStringRef value) =>
      _kCFURLVolumeIsEjectableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRemovableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRemovableKey');

  CFStringRef get kCFURLVolumeIsRemovableKey =>
      _kCFURLVolumeIsRemovableKey.value;

  set kCFURLVolumeIsRemovableKey(CFStringRef value) =>
      _kCFURLVolumeIsRemovableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsInternalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsInternalKey');

  CFStringRef get kCFURLVolumeIsInternalKey => _kCFURLVolumeIsInternalKey.value;

  set kCFURLVolumeIsInternalKey(CFStringRef value) =>
      _kCFURLVolumeIsInternalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsAutomountedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsAutomountedKey');

  CFStringRef get kCFURLVolumeIsAutomountedKey =>
      _kCFURLVolumeIsAutomountedKey.value;

  set kCFURLVolumeIsAutomountedKey(CFStringRef value) =>
      _kCFURLVolumeIsAutomountedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsLocalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsLocalKey');

  CFStringRef get kCFURLVolumeIsLocalKey => _kCFURLVolumeIsLocalKey.value;

  set kCFURLVolumeIsLocalKey(CFStringRef value) =>
      _kCFURLVolumeIsLocalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsReadOnlyKey =
      _lookup<CFStringRef>('kCFURLVolumeIsReadOnlyKey');

  CFStringRef get kCFURLVolumeIsReadOnlyKey => _kCFURLVolumeIsReadOnlyKey.value;

  set kCFURLVolumeIsReadOnlyKey(CFStringRef value) =>
      _kCFURLVolumeIsReadOnlyKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeCreationDateKey =
      _lookup<CFStringRef>('kCFURLVolumeCreationDateKey');

  CFStringRef get kCFURLVolumeCreationDateKey =>
      _kCFURLVolumeCreationDateKey.value;

  set kCFURLVolumeCreationDateKey(CFStringRef value) =>
      _kCFURLVolumeCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLForRemountingKey =
      _lookup<CFStringRef>('kCFURLVolumeURLForRemountingKey');

  CFStringRef get kCFURLVolumeURLForRemountingKey =>
      _kCFURLVolumeURLForRemountingKey.value;

  set kCFURLVolumeURLForRemountingKey(CFStringRef value) =>
      _kCFURLVolumeURLForRemountingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeUUIDStringKey =
      _lookup<CFStringRef>('kCFURLVolumeUUIDStringKey');

  CFStringRef get kCFURLVolumeUUIDStringKey => _kCFURLVolumeUUIDStringKey.value;

  set kCFURLVolumeUUIDStringKey(CFStringRef value) =>
      _kCFURLVolumeUUIDStringKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeNameKey');

  CFStringRef get kCFURLVolumeNameKey => _kCFURLVolumeNameKey.value;

  set kCFURLVolumeNameKey(CFStringRef value) =>
      _kCFURLVolumeNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedNameKey');

  CFStringRef get kCFURLVolumeLocalizedNameKey =>
      _kCFURLVolumeLocalizedNameKey.value;

  set kCFURLVolumeLocalizedNameKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEncryptedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEncryptedKey');

  CFStringRef get kCFURLVolumeIsEncryptedKey =>
      _kCFURLVolumeIsEncryptedKey.value;

  set kCFURLVolumeIsEncryptedKey(CFStringRef value) =>
      _kCFURLVolumeIsEncryptedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRootFileSystemKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRootFileSystemKey');

  CFStringRef get kCFURLVolumeIsRootFileSystemKey =>
      _kCFURLVolumeIsRootFileSystemKey.value;

  set kCFURLVolumeIsRootFileSystemKey(CFStringRef value) =>
      _kCFURLVolumeIsRootFileSystemKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsCompressionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCompressionKey');

  CFStringRef get kCFURLVolumeSupportsCompressionKey =>
      _kCFURLVolumeSupportsCompressionKey.value;

  set kCFURLVolumeSupportsCompressionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCompressionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileCloningKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileCloningKey');

  CFStringRef get kCFURLVolumeSupportsFileCloningKey =>
      _kCFURLVolumeSupportsFileCloningKey.value;

  set kCFURLVolumeSupportsFileCloningKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileCloningKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSwapRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSwapRenamingKey');

  CFStringRef get kCFURLVolumeSupportsSwapRenamingKey =>
      _kCFURLVolumeSupportsSwapRenamingKey.value;

  set kCFURLVolumeSupportsSwapRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSwapRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsExclusiveRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExclusiveRenamingKey');

  CFStringRef get kCFURLVolumeSupportsExclusiveRenamingKey =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value;

  set kCFURLVolumeSupportsExclusiveRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsImmutableFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsImmutableFilesKey');

  CFStringRef get kCFURLVolumeSupportsImmutableFilesKey =>
      _kCFURLVolumeSupportsImmutableFilesKey.value;

  set kCFURLVolumeSupportsImmutableFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsImmutableFilesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAccessPermissionsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAccessPermissionsKey');

  CFStringRef get kCFURLVolumeSupportsAccessPermissionsKey =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value;

  set kCFURLVolumeSupportsAccessPermissionsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileProtectionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileProtectionKey');

  CFStringRef get kCFURLVolumeSupportsFileProtectionKey =>
      _kCFURLVolumeSupportsFileProtectionKey.value;

  set kCFURLVolumeSupportsFileProtectionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUbiquitousItemKey =
      _lookup<CFStringRef>('kCFURLIsUbiquitousItemKey');

  CFStringRef get kCFURLIsUbiquitousItemKey => _kCFURLIsUbiquitousItemKey.value;

  set kCFURLIsUbiquitousItemKey(CFStringRef value) =>
      _kCFURLIsUbiquitousItemKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemHasUnresolvedConflictsKey');

  CFStringRef get kCFURLUbiquitousItemHasUnresolvedConflictsKey =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value;

  set kCFURLUbiquitousItemHasUnresolvedConflictsKey(CFStringRef value) =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadedKey =>
      _kCFURLUbiquitousItemIsDownloadedKey.value;

  set kCFURLUbiquitousItemIsDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadingKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadingKey =>
      _kCFURLUbiquitousItemIsDownloadingKey.value;

  set kCFURLUbiquitousItemIsDownloadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadedKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadedKey =>
      _kCFURLUbiquitousItemIsUploadedKey.value;

  set kCFURLUbiquitousItemIsUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadingKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadingKey =>
      _kCFURLUbiquitousItemIsUploadingKey.value;

  set kCFURLUbiquitousItemIsUploadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemPercentDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentDownloadedKey =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value;

  set kCFURLUbiquitousItemPercentDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemPercentUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentUploadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentUploadedKey =>
      _kCFURLUbiquitousItemPercentUploadedKey.value;

  set kCFURLUbiquitousItemPercentUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusKey =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value;

  set kCFURLUbiquitousItemDownloadingStatusKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemDownloadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingErrorKey =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value;

  set kCFURLUbiquitousItemDownloadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemUploadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemUploadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemUploadingErrorKey =>
      _kCFURLUbiquitousItemUploadingErrorKey.value;

  set kCFURLUbiquitousItemUploadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemUploadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsExcludedFromSyncKey');

  CFStringRef get kCFURLUbiquitousItemIsExcludedFromSyncKey =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value;

  set kCFURLUbiquitousItemIsExcludedFromSyncKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<CFStringRef>(
          'kCFURLUbiquitousItemDownloadingStatusNotDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusNotDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusNotDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusCurrent');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusCurrent =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value;

  set kCFURLUbiquitousItemDownloadingStatusCurrent(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value = value;

  CFDataRef CFURLCreateBookmarkData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int options,
    CFArrayRef resourcePropertiesToInclude,
    CFURLRef relativeToURL,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateBookmarkData(
      allocator,
      url,
      options,
      resourcePropertiesToInclude,
      relativeToURL,
      error,
    );
  }

  late final _CFURLCreateBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, ffi.Int32, CFArrayRef,
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkData');
  late final _CFURLCreateBookmarkData = _CFURLCreateBookmarkDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, CFArrayRef, CFURLRef,
          ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateByResolvingBookmarkData(
    CFAllocatorRef allocator,
    CFDataRef bookmark,
    int options,
    CFURLRef relativeToURL,
    CFArrayRef resourcePropertiesToInclude,
    ffi.Pointer<Boolean> isStale,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateByResolvingBookmarkData(
      allocator,
      bookmark,
      options,
      relativeToURL,
      resourcePropertiesToInclude,
      isStale,
      error,
    );
  }

  late final _CFURLCreateByResolvingBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFDataRef,
              ffi.Int32,
              CFURLRef,
              CFArrayRef,
              ffi.Pointer<Boolean>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateByResolvingBookmarkData');
  late final _CFURLCreateByResolvingBookmarkData =
      _CFURLCreateByResolvingBookmarkDataPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFDataRef, int, CFURLRef,
              CFArrayRef, ffi.Pointer<Boolean>, ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData(
    CFAllocatorRef allocator,
    CFArrayRef resourcePropertiesToReturn,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertiesForKeysFromBookmarkData(
      allocator,
      resourcePropertiesToReturn,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>>(
      'CFURLCreateResourcePropertiesForKeysFromBookmarkData');
  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData =
      _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>();

  CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData(
    CFAllocatorRef allocator,
    CFStringRef resourcePropertyKey,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertyForKeyFromBookmarkData(
      allocator,
      resourcePropertyKey,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef,
              CFDataRef)>>('CFURLCreateResourcePropertyForKeyFromBookmarkData');
  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData =
      _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr.asFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFDataRef CFURLCreateBookmarkDataFromFile(
    CFAllocatorRef allocator,
    CFURLRef fileURL,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLCreateBookmarkDataFromFile(
      allocator,
      fileURL,
      errorRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromFilePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkDataFromFile');
  late final _CFURLCreateBookmarkDataFromFile =
      _CFURLCreateBookmarkDataFromFilePtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLWriteBookmarkDataToFile(
    CFDataRef bookmarkRef,
    CFURLRef fileURL,
    int options,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLWriteBookmarkDataToFile(
      bookmarkRef,
      fileURL,
      options,
      errorRef,
    );
  }

  late final _CFURLWriteBookmarkDataToFilePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFDataRef,
              CFURLRef,
              CFURLBookmarkFileCreationOptions,
              ffi.Pointer<CFErrorRef>)>>('CFURLWriteBookmarkDataToFile');
  late final _CFURLWriteBookmarkDataToFile =
      _CFURLWriteBookmarkDataToFilePtr.asFunction<
          int Function(CFDataRef, CFURLRef, int, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkDataFromAliasRecord(
    CFAllocatorRef allocatorRef,
    CFDataRef aliasRecordDataRef,
  ) {
    return _CFURLCreateBookmarkDataFromAliasRecord(
      allocatorRef,
      aliasRecordDataRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromAliasRecordPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFURLCreateBookmarkDataFromAliasRecord');
  late final _CFURLCreateBookmarkDataFromAliasRecord =
      _CFURLCreateBookmarkDataFromAliasRecordPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  int CFURLStartAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStartAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStartAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLStartAccessingSecurityScopedResource');
  late final _CFURLStartAccessingSecurityScopedResource =
      _CFURLStartAccessingSecurityScopedResourcePtr.asFunction<
          int Function(CFURLRef)>();

  void CFURLStopAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStopAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStopAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLStopAccessingSecurityScopedResource');
  late final _CFURLStopAccessingSecurityScopedResource =
      _CFURLStopAccessingSecurityScopedResourcePtr.asFunction<
          void Function(CFURLRef)>();

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopDefaultMode =
      _lookup<CFRunLoopMode>('kCFRunLoopDefaultMode');

  CFRunLoopMode get kCFRunLoopDefaultMode => _kCFRunLoopDefaultMode.value;

  set kCFRunLoopDefaultMode(CFRunLoopMode value) =>
      _kCFRunLoopDefaultMode.value = value;

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopCommonModes =
      _lookup<CFRunLoopMode>('kCFRunLoopCommonModes');

  CFRunLoopMode get kCFRunLoopCommonModes => _kCFRunLoopCommonModes.value;

  set kCFRunLoopCommonModes(CFRunLoopMode value) =>
      _kCFRunLoopCommonModes.value = value;

  int CFRunLoopGetTypeID() {
    return _CFRunLoopGetTypeID();
  }

  late final _CFRunLoopGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFRunLoopGetTypeID');
  late final _CFRunLoopGetTypeID =
      _CFRunLoopGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGetCurrent();
  }

  late final _CFRunLoopGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent =
      _CFRunLoopGetCurrentPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGetMain();
  }

  late final _CFRunLoopGetMainPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>('CFRunLoopGetMain');
  late final _CFRunLoopGetMain =
      _CFRunLoopGetMainPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopMode CFRunLoopCopyCurrentMode(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyCurrentMode(
      rl,
    );
  }

  late final _CFRunLoopCopyCurrentModePtr =
      _lookup<ffi.NativeFunction<CFRunLoopMode Function(CFRunLoopRef)>>(
          'CFRunLoopCopyCurrentMode');
  late final _CFRunLoopCopyCurrentMode = _CFRunLoopCopyCurrentModePtr
      .asFunction<CFRunLoopMode Function(CFRunLoopRef)>();

  CFArrayRef CFRunLoopCopyAllModes(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyAllModes(
      rl,
    );
  }

  late final _CFRunLoopCopyAllModesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFRunLoopRef)>>(
          'CFRunLoopCopyAllModes');
  late final _CFRunLoopCopyAllModes =
      _CFRunLoopCopyAllModesPtr.asFunction<CFArrayRef Function(CFRunLoopRef)>();

  void CFRunLoopAddCommonMode(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddCommonMode(
      rl,
      mode,
    );
  }

  late final _CFRunLoopAddCommonModePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFRunLoopRef, CFRunLoopMode)>>(
      'CFRunLoopAddCommonMode');
  late final _CFRunLoopAddCommonMode = _CFRunLoopAddCommonModePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopMode)>();

  double CFRunLoopGetNextTimerFireDate(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopGetNextTimerFireDate(
      rl,
      mode,
    );
  }

  late final _CFRunLoopGetNextTimerFireDatePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(
              CFRunLoopRef, CFRunLoopMode)>>('CFRunLoopGetNextTimerFireDate');
  late final _CFRunLoopGetNextTimerFireDate = _CFRunLoopGetNextTimerFireDatePtr
      .asFunction<double Function(CFRunLoopRef, CFRunLoopMode)>();

  void CFRunLoopRun() {
    return _CFRunLoopRun();
  }

  late final _CFRunLoopRunPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFRunLoopRun');
  late final _CFRunLoopRun = _CFRunLoopRunPtr.asFunction<void Function()>();

  int CFRunLoopRunInMode(
    CFRunLoopMode mode,
    double seconds,
    int returnAfterSourceHandled,
  ) {
    return _CFRunLoopRunInMode(
      mode,
      seconds,
      returnAfterSourceHandled,
    );
  }

  late final _CFRunLoopRunInModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFRunLoopMode, CFTimeInterval, Boolean)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode = _CFRunLoopRunInModePtr.asFunction<
      int Function(CFRunLoopMode, double, int)>();

  int CFRunLoopIsWaiting(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopIsWaiting(
      rl,
    );
  }

  late final _CFRunLoopIsWaitingPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopRef)>>(
          'CFRunLoopIsWaiting');
  late final _CFRunLoopIsWaiting =
      _CFRunLoopIsWaitingPtr.asFunction<int Function(CFRunLoopRef)>();

  void CFRunLoopWakeUp(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopWakeUp(
      rl,
    );
  }

  late final _CFRunLoopWakeUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopWakeUp');
  late final _CFRunLoopWakeUp =
      _CFRunLoopWakeUpPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopStop(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopStop(
      rl,
    );
  }

  late final _CFRunLoopStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopStop');
  late final _CFRunLoopStop =
      _CFRunLoopStopPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopPerformBlock(
    CFRunLoopRef rl,
    CFTypeRef mode,
    ffi.Pointer<ObjCObject> block,
  ) {
    return _CFRunLoopPerformBlock(
      rl,
      mode,
      block,
    );
  }

  late final _CFRunLoopPerformBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFTypeRef,
              ffi.Pointer<ObjCObject>)>>('CFRunLoopPerformBlock');
  late final _CFRunLoopPerformBlock = _CFRunLoopPerformBlockPtr.asFunction<
      void Function(CFRunLoopRef, CFTypeRef, ffi.Pointer<ObjCObject>)>();

  int CFRunLoopContainsSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopContainsSourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopContainsSource');
  late final _CFRunLoopContainsSource = _CFRunLoopContainsSourcePtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopAddSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource = _CFRunLoopAddSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopRemoveSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopRemoveSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopRemoveSource');
  late final _CFRunLoopRemoveSource = _CFRunLoopRemoveSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  int CFRunLoopContainsObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopContainsObserverPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopContainsObserver');
  late final _CFRunLoopContainsObserver =
      _CFRunLoopContainsObserverPtr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopAddObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopAddObserver');
  late final _CFRunLoopAddObserver = _CFRunLoopAddObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopRemoveObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopRemoveObserver');
  late final _CFRunLoopRemoveObserver = _CFRunLoopRemoveObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  int CFRunLoopContainsTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopContainsTimerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopContainsTimer');
  late final _CFRunLoopContainsTimer = _CFRunLoopContainsTimerPtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopAddTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopAddTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopAddTimer');
  late final _CFRunLoopAddTimer = _CFRunLoopAddTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopRemoveTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopRemoveTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopRemoveTimer');
  late final _CFRunLoopRemoveTimer = _CFRunLoopRemoveTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  int CFRunLoopSourceGetTypeID() {
    return _CFRunLoopSourceGetTypeID();
  }

  late final _CFRunLoopSourceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopSourceGetTypeID');
  late final _CFRunLoopSourceGetTypeID =
      _CFRunLoopSourceGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopSourceRef CFRunLoopSourceCreate(
    CFAllocatorRef allocator,
    int order,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceCreate(
      allocator,
      order,
      context,
    );
  }

  late final _CFRunLoopSourceCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFRunLoopSourceContext>)>>('CFRunLoopSourceCreate');
  late final _CFRunLoopSourceCreate = _CFRunLoopSourceCreatePtr.asFunction<
      CFRunLoopSourceRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFRunLoopSourceContext>)>();

  int CFRunLoopSourceGetOrder(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceGetOrder(
      source,
    );
  }

  late final _CFRunLoopSourceGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceGetOrder');
  late final _CFRunLoopSourceGetOrder = _CFRunLoopSourceGetOrderPtr.asFunction<
      int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceInvalidate(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceInvalidate(
      source,
    );
  }

  late final _CFRunLoopSourceInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceInvalidate');
  late final _CFRunLoopSourceInvalidate = _CFRunLoopSourceInvalidatePtr
      .asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopSourceIsValid(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceIsValid(
      source,
    );
  }

  late final _CFRunLoopSourceIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceIsValid');
  late final _CFRunLoopSourceIsValid =
      _CFRunLoopSourceIsValidPtr.asFunction<int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceGetContext(
    CFRunLoopSourceRef source,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceGetContext(
      source,
      context,
    );
  }

  late final _CFRunLoopSourceGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>>(
      'CFRunLoopSourceGetContext');
  late final _CFRunLoopSourceGetContext =
      _CFRunLoopSourceGetContextPtr.asFunction<
          void Function(
              CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>();

  void CFRunLoopSourceSignal(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceSignal(
      source,
    );
  }

  late final _CFRunLoopSourceSignalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceSignal');
  late final _CFRunLoopSourceSignal =
      _CFRunLoopSourceSignalPtr.asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopObserverGetTypeID() {
    return _CFRunLoopObserverGetTypeID();
  }

  late final _CFRunLoopObserverGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopObserverGetTypeID');
  late final _CFRunLoopObserverGetTypeID =
      _CFRunLoopObserverGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopObserverRef CFRunLoopObserverCreate(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    CFRunLoopObserverCallBack callout,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverCreate(
      allocator,
      activities,
      repeats,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopObserverCreatePtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(
                  CFAllocatorRef,
                  CFOptionFlags,
                  Boolean,
                  CFIndex,
                  CFRunLoopObserverCallBack,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverCreate');
  late final _CFRunLoopObserverCreate = _CFRunLoopObserverCreatePtr.asFunction<
      CFRunLoopObserverRef Function(CFAllocatorRef, int, int, int,
          CFRunLoopObserverCallBack, ffi.Pointer<CFRunLoopObserverContext>)>();

  CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    ffi.Pointer<ObjCObject> block,
  ) {
    return _CFRunLoopObserverCreateWithHandler(
      allocator,
      activities,
      repeats,
      order,
      block,
    );
  }

  late final _CFRunLoopObserverCreateWithHandlerPtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef,
              CFOptionFlags,
              Boolean,
              CFIndex,
              ffi.Pointer<ObjCObject>)>>('CFRunLoopObserverCreateWithHandler');
  late final _CFRunLoopObserverCreateWithHandler =
      _CFRunLoopObserverCreateWithHandlerPtr.asFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef, int, int, int, ffi.Pointer<ObjCObject>)>();

  int CFRunLoopObserverGetActivities(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetActivities(
      observer,
    );
  }

  late final _CFRunLoopObserverGetActivitiesPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetActivities');
  late final _CFRunLoopObserverGetActivities =
      _CFRunLoopObserverGetActivitiesPtr.asFunction<
          int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverDoesRepeat(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverDoesRepeat(
      observer,
    );
  }

  late final _CFRunLoopObserverDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverDoesRepeat');
  late final _CFRunLoopObserverDoesRepeat = _CFRunLoopObserverDoesRepeatPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverGetOrder(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetOrder(
      observer,
    );
  }

  late final _CFRunLoopObserverGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetOrder');
  late final _CFRunLoopObserverGetOrder = _CFRunLoopObserverGetOrderPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverInvalidate(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverInvalidate(
      observer,
    );
  }

  late final _CFRunLoopObserverInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverInvalidate');
  late final _CFRunLoopObserverInvalidate = _CFRunLoopObserverInvalidatePtr
      .asFunction<void Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverIsValid(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverIsValid(
      observer,
    );
  }

  late final _CFRunLoopObserverIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverIsValid');
  late final _CFRunLoopObserverIsValid = _CFRunLoopObserverIsValidPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverGetContext(
    CFRunLoopObserverRef observer,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverGetContext(
      observer,
      context,
    );
  }

  late final _CFRunLoopObserverGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverGetContext');
  late final _CFRunLoopObserverGetContext =
      _CFRunLoopObserverGetContextPtr.asFunction<
          void Function(
              CFRunLoopObserverRef, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopTimerGetTypeID() {
    return _CFRunLoopTimerGetTypeID();
  }

  late final _CFRunLoopTimerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopTimerGetTypeID');
  late final _CFRunLoopTimerGetTypeID =
      _CFRunLoopTimerGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopTimerRef CFRunLoopTimerCreate(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    CFRunLoopTimerCallBack callout,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerCreate(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopTimerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              CFRunLoopTimerCallBack,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerCreate');
  late final _CFRunLoopTimerCreate = _CFRunLoopTimerCreatePtr.asFunction<
      CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
          CFRunLoopTimerCallBack, ffi.Pointer<CFRunLoopTimerContext>)>();

  CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    ffi.Pointer<ObjCObject> block,
  ) {
    return _CFRunLoopTimerCreateWithHandler(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      block,
    );
  }

  late final _CFRunLoopTimerCreateWithHandlerPtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<ObjCObject>)>>('CFRunLoopTimerCreateWithHandler');
  late final _CFRunLoopTimerCreateWithHandler =
      _CFRunLoopTimerCreateWithHandlerPtr.asFunction<
          CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
              ffi.Pointer<ObjCObject>)>();

  double CFRunLoopTimerGetNextFireDate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetNextFireDate(
      timer,
    );
  }

  late final _CFRunLoopTimerGetNextFireDatePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetNextFireDate');
  late final _CFRunLoopTimerGetNextFireDate = _CFRunLoopTimerGetNextFireDatePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetNextFireDate(
    CFRunLoopTimerRef timer,
    double fireDate,
  ) {
    return _CFRunLoopTimerSetNextFireDate(
      timer,
      fireDate,
    );
  }

  late final _CFRunLoopTimerSetNextFireDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFAbsoluteTime)>>('CFRunLoopTimerSetNextFireDate');
  late final _CFRunLoopTimerSetNextFireDate = _CFRunLoopTimerSetNextFireDatePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  double CFRunLoopTimerGetInterval(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetInterval(
      timer,
    );
  }

  late final _CFRunLoopTimerGetIntervalPtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetInterval');
  late final _CFRunLoopTimerGetInterval = _CFRunLoopTimerGetIntervalPtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerDoesRepeat(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerDoesRepeat(
      timer,
    );
  }

  late final _CFRunLoopTimerDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerDoesRepeat');
  late final _CFRunLoopTimerDoesRepeat = _CFRunLoopTimerDoesRepeatPtr
      .asFunction<int Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerGetOrder(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetOrder(
      timer,
    );
  }

  late final _CFRunLoopTimerGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetOrder');
  late final _CFRunLoopTimerGetOrder =
      _CFRunLoopTimerGetOrderPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerInvalidate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerInvalidate(
      timer,
    );
  }

  late final _CFRunLoopTimerInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerInvalidate');
  late final _CFRunLoopTimerInvalidate = _CFRunLoopTimerInvalidatePtr
      .asFunction<void Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerIsValid(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerIsValid(
      timer,
    );
  }

  late final _CFRunLoopTimerIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerIsValid');
  late final _CFRunLoopTimerIsValid =
      _CFRunLoopTimerIsValidPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerGetContext(
    CFRunLoopTimerRef timer,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerGetContext(
      timer,
      context,
    );
  }

  late final _CFRunLoopTimerGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerGetContext');
  late final _CFRunLoopTimerGetContext =
      _CFRunLoopTimerGetContextPtr.asFunction<
          void Function(
              CFRunLoopTimerRef, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetTolerance(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetTolerance(
      timer,
    );
  }

  late final _CFRunLoopTimerGetTolerancePtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetTolerance');
  late final _CFRunLoopTimerGetTolerance = _CFRunLoopTimerGetTolerancePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetTolerance(
    CFRunLoopTimerRef timer,
    double tolerance,
  ) {
    return _CFRunLoopTimerSetTolerance(
      timer,
      tolerance,
    );
  }

  late final _CFRunLoopTimerSetTolerancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFTimeInterval)>>('CFRunLoopTimerSetTolerance');
  late final _CFRunLoopTimerSetTolerance = _CFRunLoopTimerSetTolerancePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  int CFSocketGetTypeID() {
    return _CFSocketGetTypeID();
  }

  late final _CFSocketGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSocketGetTypeID');
  late final _CFSocketGetTypeID =
      _CFSocketGetTypeIDPtr.asFunction<int Function()>();

  CFSocketRef CFSocketCreate(
    CFAllocatorRef allocator,
    int protocolFamily,
    int socketType,
    int protocol,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreate(
      allocator,
      protocolFamily,
      socketType,
      protocol,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              SInt32,
              SInt32,
              SInt32,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreate');
  late final _CFSocketCreate = _CFSocketCreatePtr.asFunction<
      CFSocketRef Function(CFAllocatorRef, int, int, int, int, CFSocketCallBack,
          ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithNative(
    CFAllocatorRef allocator,
    int sock,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithNative(
      allocator,
      sock,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithNativePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreateWithNative');
  late final _CFSocketCreateWithNative =
      _CFSocketCreateWithNativePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, int, int, CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketRef Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  CFOptionFlags,
                  CFSocketCallBack,
                  ffi.Pointer<CFSocketContext>)>>(
      'CFSocketCreateWithSocketSignature');
  late final _CFSocketCreateWithSocketSignature =
      _CFSocketCreateWithSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateConnectedToSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
    double timeout,
  ) {
    return _CFSocketCreateConnectedToSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
      timeout,
    );
  }

  late final _CFSocketCreateConnectedToSocketSignaturePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              ffi.Pointer<CFSocketSignature>,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>,
              CFTimeInterval)>>('CFSocketCreateConnectedToSocketSignature');
  late final _CFSocketCreateConnectedToSocketSignature =
      _CFSocketCreateConnectedToSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>, double)>();

  int CFSocketSetAddress(
    CFSocketRef s,
    CFDataRef address,
  ) {
    return _CFSocketSetAddress(
      s,
      address,
    );
  }

  late final _CFSocketSetAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFSocketRef, CFDataRef)>>(
          'CFSocketSetAddress');
  late final _CFSocketSetAddress =
      _CFSocketSetAddressPtr.asFunction<int Function(CFSocketRef, CFDataRef)>();

  int CFSocketConnectToAddress(
    CFSocketRef s,
    CFDataRef address,
    double timeout,
  ) {
    return _CFSocketConnectToAddress(
      s,
      address,
      timeout,
    );
  }

  late final _CFSocketConnectToAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFSocketRef, CFDataRef,
              CFTimeInterval)>>('CFSocketConnectToAddress');
  late final _CFSocketConnectToAddress = _CFSocketConnectToAddressPtr
      .asFunction<int Function(CFSocketRef, CFDataRef, double)>();

  void CFSocketInvalidate(
    CFSocketRef s,
  ) {
    return _CFSocketInvalidate(
      s,
    );
  }

  late final _CFSocketInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFSocketRef)>>(
          'CFSocketInvalidate');
  late final _CFSocketInvalidate =
      _CFSocketInvalidatePtr.asFunction<void Function(CFSocketRef)>();

  int CFSocketIsValid(
    CFSocketRef s,
  ) {
    return _CFSocketIsValid(
      s,
    );
  }

  late final _CFSocketIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFSocketRef)>>(
          'CFSocketIsValid');
  late final _CFSocketIsValid =
      _CFSocketIsValidPtr.asFunction<int Function(CFSocketRef)>();

  CFDataRef CFSocketCopyAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyAddress(
      s,
    );
  }

  late final _CFSocketCopyAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyAddress');
  late final _CFSocketCopyAddress =
      _CFSocketCopyAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  CFDataRef CFSocketCopyPeerAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyPeerAddress(
      s,
    );
  }

  late final _CFSocketCopyPeerAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyPeerAddress');
  late final _CFSocketCopyPeerAddress =
      _CFSocketCopyPeerAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  void CFSocketGetContext(
    CFSocketRef s,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketGetContext(
      s,
      context,
    );
  }

  late final _CFSocketGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSocketRef,
              ffi.Pointer<CFSocketContext>)>>('CFSocketGetContext');
  late final _CFSocketGetContext = _CFSocketGetContextPtr.asFunction<
      void Function(CFSocketRef, ffi.Pointer<CFSocketContext>)>();

  int CFSocketGetNative(
    CFSocketRef s,
  ) {
    return _CFSocketGetNative(
      s,
    );
  }

  late final _CFSocketGetNativePtr =
      _lookup<ffi.NativeFunction<CFSocketNativeHandle Function(CFSocketRef)>>(
          'CFSocketGetNative');
  late final _CFSocketGetNative =
      _CFSocketGetNativePtr.asFunction<int Function(CFSocketRef)>();

  CFRunLoopSourceRef CFSocketCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFSocketRef s,
    int order,
  ) {
    return _CFSocketCreateRunLoopSource(
      allocator,
      s,
      order,
    );
  }

  late final _CFSocketCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef,
              CFIndex)>>('CFSocketCreateRunLoopSource');
  late final _CFSocketCreateRunLoopSource =
      _CFSocketCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef, int)>();

  int CFSocketGetSocketFlags(
    CFSocketRef s,
  ) {
    return _CFSocketGetSocketFlags(
      s,
    );
  }

  late final _CFSocketGetSocketFlagsPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFSocketRef)>>(
          'CFSocketGetSocketFlags');
  late final _CFSocketGetSocketFlags =
      _CFSocketGetSocketFlagsPtr.asFunction<int Function(CFSocketRef)>();

  void CFSocketSetSocketFlags(
    CFSocketRef s,
    int flags,
  ) {
    return _CFSocketSetSocketFlags(
      s,
      flags,
    );
  }

  late final _CFSocketSetSocketFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketSetSocketFlags');
  late final _CFSocketSetSocketFlags =
      _CFSocketSetSocketFlagsPtr.asFunction<void Function(CFSocketRef, int)>();

  void CFSocketDisableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketDisableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketDisableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketDisableCallBacks');
  late final _CFSocketDisableCallBacks = _CFSocketDisableCallBacksPtr
      .asFunction<void Function(CFSocketRef, int)>();

  void CFSocketEnableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketEnableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketEnableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketEnableCallBacks');
  late final _CFSocketEnableCallBacks =
      _CFSocketEnableCallBacksPtr.asFunction<void Function(CFSocketRef, int)>();

  int CFSocketSendData(
    CFSocketRef s,
    CFDataRef address,
    CFDataRef data,
    double timeout,
  ) {
    return _CFSocketSendData(
      s,
      address,
      data,
      timeout,
    );
  }

  late final _CFSocketSendDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFSocketRef, CFDataRef, CFDataRef,
              CFTimeInterval)>>('CFSocketSendData');
  late final _CFSocketSendData = _CFSocketSendDataPtr.asFunction<
      int Function(CFSocketRef, CFDataRef, CFDataRef, double)>();

  int CFSocketRegisterValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    CFPropertyListRef value,
  ) {
    return _CFSocketRegisterValue(
      nameServerSignature,
      timeout,
      name,
      value,
    );
  }

  late final _CFSocketRegisterValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef, CFPropertyListRef)>>('CFSocketRegisterValue');
  late final _CFSocketRegisterValue = _CFSocketRegisterValuePtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
          CFPropertyListRef)>();

  int CFSocketCopyRegisteredValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFPropertyListRef> value,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredValue(
      nameServerSignature,
      timeout,
      name,
      value,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CFSocketSignature>,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFPropertyListRef>,
              ffi.Pointer<CFDataRef>)>>('CFSocketCopyRegisteredValue');
  late final _CFSocketCopyRegisteredValue =
      _CFSocketCopyRegisteredValuePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFPropertyListRef>, ffi.Pointer<CFDataRef>)>();

  int CFSocketRegisterSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
  ) {
    return _CFSocketRegisterSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
    );
  }

  late final _CFSocketRegisterSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
                  CFStringRef, ffi.Pointer<CFSocketSignature>)>>(
      'CFSocketRegisterSocketSignature');
  late final _CFSocketRegisterSocketSignature =
      _CFSocketRegisterSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>)>();

  int CFSocketCopyRegisteredSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFDataRef>)>>(
      'CFSocketCopyRegisteredSocketSignature');
  late final _CFSocketCopyRegisteredSocketSignature =
      _CFSocketCopyRegisteredSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>, ffi.Pointer<CFDataRef>)>();

  int CFSocketUnregister(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
  ) {
    return _CFSocketUnregister(
      nameServerSignature,
      timeout,
      name,
    );
  }

  late final _CFSocketUnregisterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef)>>('CFSocketUnregister');
  late final _CFSocketUnregister = _CFSocketUnregisterPtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef)>();

  void CFSocketSetDefaultNameRegistryPortNumber(
    int port,
  ) {
    return _CFSocketSetDefaultNameRegistryPortNumber(
      port,
    );
  }

  late final _CFSocketSetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UInt16)>>(
          'CFSocketSetDefaultNameRegistryPortNumber');
  late final _CFSocketSetDefaultNameRegistryPortNumber =
      _CFSocketSetDefaultNameRegistryPortNumberPtr.asFunction<
          void Function(int)>();

  int CFSocketGetDefaultNameRegistryPortNumber() {
    return _CFSocketGetDefaultNameRegistryPortNumber();
  }

  late final _CFSocketGetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<UInt16 Function()>>(
          'CFSocketGetDefaultNameRegistryPortNumber');
  late final _CFSocketGetDefaultNameRegistryPortNumber =
      _CFSocketGetDefaultNameRegistryPortNumberPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCFSocketCommandKey =
      _lookup<CFStringRef>('kCFSocketCommandKey');

  CFStringRef get kCFSocketCommandKey => _kCFSocketCommandKey.value;

  set kCFSocketCommandKey(CFStringRef value) =>
      _kCFSocketCommandKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketNameKey =
      _lookup<CFStringRef>('kCFSocketNameKey');

  CFStringRef get kCFSocketNameKey => _kCFSocketNameKey.value;

  set kCFSocketNameKey(CFStringRef value) => _kCFSocketNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketValueKey =
      _lookup<CFStringRef>('kCFSocketValueKey');

  CFStringRef get kCFSocketValueKey => _kCFSocketValueKey.value;

  set kCFSocketValueKey(CFStringRef value) => _kCFSocketValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketResultKey =
      _lookup<CFStringRef>('kCFSocketResultKey');

  CFStringRef get kCFSocketResultKey => _kCFSocketResultKey.value;

  set kCFSocketResultKey(CFStringRef value) =>
      _kCFSocketResultKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketErrorKey =
      _lookup<CFStringRef>('kCFSocketErrorKey');

  CFStringRef get kCFSocketErrorKey => _kCFSocketErrorKey.value;

  set kCFSocketErrorKey(CFStringRef value) => _kCFSocketErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRegisterCommand =
      _lookup<CFStringRef>('kCFSocketRegisterCommand');

  CFStringRef get kCFSocketRegisterCommand => _kCFSocketRegisterCommand.value;

  set kCFSocketRegisterCommand(CFStringRef value) =>
      _kCFSocketRegisterCommand.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRetrieveCommand =
      _lookup<CFStringRef>('kCFSocketRetrieveCommand');

  CFStringRef get kCFSocketRetrieveCommand => _kCFSocketRetrieveCommand.value;

  set kCFSocketRetrieveCommand(CFStringRef value) =>
      _kCFSocketRetrieveCommand.value = value;

  int CFReadStreamGetTypeID() {
    return _CFReadStreamGetTypeID();
  }

  late final _CFReadStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFReadStreamGetTypeID');
  late final _CFReadStreamGetTypeID =
      _CFReadStreamGetTypeIDPtr.asFunction<int Function()>();

  int CFWriteStreamGetTypeID() {
    return _CFWriteStreamGetTypeID();
  }

  late final _CFWriteStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFWriteStreamGetTypeID');
  late final _CFWriteStreamGetTypeID =
      _CFWriteStreamGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyDataWritten =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyDataWritten');

  CFStreamPropertyKey get kCFStreamPropertyDataWritten =>
      _kCFStreamPropertyDataWritten.value;

  set kCFStreamPropertyDataWritten(CFStreamPropertyKey value) =>
      _kCFStreamPropertyDataWritten.value = value;

  CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFReadStreamCreateWithBytesNoCopy(
      alloc,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFReadStreamCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFReadStreamCreateWithBytesNoCopy');
  late final _CFReadStreamCreateWithBytesNoCopy =
      _CFReadStreamCreateWithBytesNoCopyPtr.asFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithBuffer(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> buffer,
    int bufferCapacity,
  ) {
    return _CFWriteStreamCreateWithBuffer(
      alloc,
      buffer,
      bufferCapacity,
    );
  }

  late final _CFWriteStreamCreateWithBufferPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamCreateWithBuffer');
  late final _CFWriteStreamCreateWithBuffer =
      _CFWriteStreamCreateWithBufferPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(
    CFAllocatorRef alloc,
    CFAllocatorRef bufferAllocator,
  ) {
    return _CFWriteStreamCreateWithAllocatedBuffers(
      alloc,
      bufferAllocator,
    );
  }

  late final _CFWriteStreamCreateWithAllocatedBuffersPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef,
              CFAllocatorRef)>>('CFWriteStreamCreateWithAllocatedBuffers');
  late final _CFWriteStreamCreateWithAllocatedBuffers =
      _CFWriteStreamCreateWithAllocatedBuffersPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, CFAllocatorRef)>();

  CFReadStreamRef CFReadStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFReadStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFReadStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFReadStreamCreateWithFile');
  late final _CFReadStreamCreateWithFile = _CFReadStreamCreateWithFilePtr
      .asFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFWriteStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFWriteStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFWriteStreamCreateWithFile');
  late final _CFWriteStreamCreateWithFile = _CFWriteStreamCreateWithFilePtr
      .asFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>();

  void CFStreamCreateBoundPair(
    CFAllocatorRef alloc,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
    int transferBufferSize,
  ) {
    return _CFStreamCreateBoundPair(
      alloc,
      readStream,
      writeStream,
      transferBufferSize,
    );
  }

  late final _CFStreamCreateBoundPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>,
              CFIndex)>>('CFStreamCreateBoundPair');
  late final _CFStreamCreateBoundPair = _CFStreamCreateBoundPairPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFReadStreamRef>,
          ffi.Pointer<CFWriteStreamRef>, int)>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyAppendToFile =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyAppendToFile');

  CFStreamPropertyKey get kCFStreamPropertyAppendToFile =>
      _kCFStreamPropertyAppendToFile.value;

  set kCFStreamPropertyAppendToFile(CFStreamPropertyKey value) =>
      _kCFStreamPropertyAppendToFile.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertyFileCurrentOffset =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyFileCurrentOffset');

  CFStreamPropertyKey get kCFStreamPropertyFileCurrentOffset =>
      _kCFStreamPropertyFileCurrentOffset.value;

  set kCFStreamPropertyFileCurrentOffset(CFStreamPropertyKey value) =>
      _kCFStreamPropertyFileCurrentOffset.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketNativeHandle =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketNativeHandle');

  CFStreamPropertyKey get kCFStreamPropertySocketNativeHandle =>
      _kCFStreamPropertySocketNativeHandle.value;

  set kCFStreamPropertySocketNativeHandle(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketNativeHandle.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemoteHostName =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemoteHostName');

  CFStreamPropertyKey get kCFStreamPropertySocketRemoteHostName =>
      _kCFStreamPropertySocketRemoteHostName.value;

  set kCFStreamPropertySocketRemoteHostName(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemoteHostName.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemotePortNumber =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemotePortNumber');

  CFStreamPropertyKey get kCFStreamPropertySocketRemotePortNumber =>
      _kCFStreamPropertySocketRemotePortNumber.value;

  set kCFStreamPropertySocketRemotePortNumber(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemotePortNumber.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _kCFStreamErrorDomainSOCKS =
      _lookup<pkg_ffi.Int>('kCFStreamErrorDomainSOCKS');

  int get kCFStreamErrorDomainSOCKS => _kCFStreamErrorDomainSOCKS.value;

  set kCFStreamErrorDomainSOCKS(int value) =>
      _kCFStreamErrorDomainSOCKS.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxy =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxy');

  CFStringRef get kCFStreamPropertySOCKSProxy =>
      _kCFStreamPropertySOCKSProxy.value;

  set kCFStreamPropertySOCKSProxy(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyHost =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyHost');

  CFStringRef get kCFStreamPropertySOCKSProxyHost =>
      _kCFStreamPropertySOCKSProxyHost.value;

  set kCFStreamPropertySOCKSProxyHost(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyPort =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyPort');

  CFStringRef get kCFStreamPropertySOCKSProxyPort =>
      _kCFStreamPropertySOCKSProxyPort.value;

  set kCFStreamPropertySOCKSProxyPort(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyPort.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSVersion =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSVersion');

  CFStringRef get kCFStreamPropertySOCKSVersion =>
      _kCFStreamPropertySOCKSVersion.value;

  set kCFStreamPropertySOCKSVersion(CFStringRef value) =>
      _kCFStreamPropertySOCKSVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion4 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion4');

  CFStringRef get kCFStreamSocketSOCKSVersion4 =>
      _kCFStreamSocketSOCKSVersion4.value;

  set kCFStreamSocketSOCKSVersion4(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion4.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion5 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion5');

  CFStringRef get kCFStreamSocketSOCKSVersion5 =>
      _kCFStreamSocketSOCKSVersion5.value;

  set kCFStreamSocketSOCKSVersion5(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion5.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSUser =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSUser');

  CFStringRef get kCFStreamPropertySOCKSUser =>
      _kCFStreamPropertySOCKSUser.value;

  set kCFStreamPropertySOCKSUser(CFStringRef value) =>
      _kCFStreamPropertySOCKSUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSPassword =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSPassword');

  CFStringRef get kCFStreamPropertySOCKSPassword =>
      _kCFStreamPropertySOCKSPassword.value;

  set kCFStreamPropertySOCKSPassword(CFStringRef value) =>
      _kCFStreamPropertySOCKSPassword.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _kCFStreamErrorDomainSSL =
      _lookup<pkg_ffi.Int>('kCFStreamErrorDomainSSL');

  int get kCFStreamErrorDomainSSL => _kCFStreamErrorDomainSSL.value;

  set kCFStreamErrorDomainSSL(int value) =>
      _kCFStreamErrorDomainSSL.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySocketSecurityLevel =
      _lookup<CFStringRef>('kCFStreamPropertySocketSecurityLevel');

  CFStringRef get kCFStreamPropertySocketSecurityLevel =>
      _kCFStreamPropertySocketSecurityLevel.value;

  set kCFStreamPropertySocketSecurityLevel(CFStringRef value) =>
      _kCFStreamPropertySocketSecurityLevel.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelNone =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNone');

  CFStringRef get kCFStreamSocketSecurityLevelNone =>
      _kCFStreamSocketSecurityLevelNone.value;

  set kCFStreamSocketSecurityLevelNone(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv2 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv2');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv2 =>
      _kCFStreamSocketSecurityLevelSSLv2.value;

  set kCFStreamSocketSecurityLevelSSLv2(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv2.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv3 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv3');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv3 =>
      _kCFStreamSocketSecurityLevelSSLv3.value;

  set kCFStreamSocketSecurityLevelSSLv3(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv3.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelTLSv1 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelTLSv1');

  CFStringRef get kCFStreamSocketSecurityLevelTLSv1 =>
      _kCFStreamSocketSecurityLevelTLSv1.value;

  set kCFStreamSocketSecurityLevelTLSv1(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelTLSv1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamSocketSecurityLevelNegotiatedSSL =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNegotiatedSSL');

  CFStringRef get kCFStreamSocketSecurityLevelNegotiatedSSL =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value;

  set kCFStreamSocketSecurityLevelNegotiatedSSL(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamPropertyShouldCloseNativeSocket =
      _lookup<CFStringRef>('kCFStreamPropertyShouldCloseNativeSocket');

  CFStringRef get kCFStreamPropertyShouldCloseNativeSocket =>
      _kCFStreamPropertyShouldCloseNativeSocket.value;

  set kCFStreamPropertyShouldCloseNativeSocket(CFStringRef value) =>
      _kCFStreamPropertyShouldCloseNativeSocket.value = value;

  void CFStreamCreatePairWithSocket(
    CFAllocatorRef alloc,
    int sock,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocket(
      alloc,
      sock,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>>('CFStreamCreatePairWithSocket');
  late final _CFStreamCreatePairWithSocket =
      _CFStreamCreatePairWithSocketPtr.asFunction<
          void Function(CFAllocatorRef, int, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithSocketToHost(
    CFAllocatorRef alloc,
    CFStringRef host,
    int port,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocketToHost(
      alloc,
      host,
      port,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketToHostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  CFStringRef,
                  UInt32,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithSocketToHost');
  late final _CFStreamCreatePairWithSocketToHost =
      _CFStreamCreatePairWithSocketToHostPtr.asFunction<
          void Function(CFAllocatorRef, CFStringRef, int,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithPeerSocketSignature(
    CFAllocatorRef alloc,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithPeerSocketSignature(
      alloc,
      signature,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithPeerSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithPeerSocketSignature');
  late final _CFStreamCreatePairWithPeerSocketSignature =
      _CFStreamCreatePairWithPeerSocketSignaturePtr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  int CFReadStreamGetStatus(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetStatus(
      stream,
    );
  }

  late final _CFReadStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFReadStreamRef)>>(
          'CFReadStreamGetStatus');
  late final _CFReadStreamGetStatus =
      _CFReadStreamGetStatusPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamGetStatus(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetStatus(
      stream,
    );
  }

  late final _CFWriteStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetStatus');
  late final _CFWriteStreamGetStatus =
      _CFWriteStreamGetStatusPtr.asFunction<int Function(CFWriteStreamRef)>();

  CFErrorRef CFReadStreamCopyError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyError(
      stream,
    );
  }

  late final _CFReadStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFReadStreamRef)>>(
          'CFReadStreamCopyError');
  late final _CFReadStreamCopyError = _CFReadStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFReadStreamRef)>();

  CFErrorRef CFWriteStreamCopyError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyError(
      stream,
    );
  }

  late final _CFWriteStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyError');
  late final _CFWriteStreamCopyError = _CFWriteStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFWriteStreamRef)>();

  int CFReadStreamOpen(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamOpen(
      stream,
    );
  }

  late final _CFReadStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamOpen');
  late final _CFReadStreamOpen =
      _CFReadStreamOpenPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamOpen(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamOpen(
      stream,
    );
  }

  late final _CFWriteStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamOpen');
  late final _CFWriteStreamOpen =
      _CFWriteStreamOpenPtr.asFunction<int Function(CFWriteStreamRef)>();

  void CFReadStreamClose(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamClose(
      stream,
    );
  }

  late final _CFReadStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFReadStreamRef)>>(
          'CFReadStreamClose');
  late final _CFReadStreamClose =
      _CFReadStreamClosePtr.asFunction<void Function(CFReadStreamRef)>();

  void CFWriteStreamClose(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamClose(
      stream,
    );
  }

  late final _CFWriteStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFWriteStreamRef)>>(
          'CFWriteStreamClose');
  late final _CFWriteStreamClose =
      _CFWriteStreamClosePtr.asFunction<void Function(CFWriteStreamRef)>();

  int CFReadStreamHasBytesAvailable(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamHasBytesAvailable(
      stream,
    );
  }

  late final _CFReadStreamHasBytesAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamHasBytesAvailable');
  late final _CFReadStreamHasBytesAvailable = _CFReadStreamHasBytesAvailablePtr
      .asFunction<int Function(CFReadStreamRef)>();

  int CFReadStreamRead(
    CFReadStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFReadStreamRead(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFReadStreamReadPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFReadStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFReadStreamRead');
  late final _CFReadStreamRead = _CFReadStreamReadPtr.asFunction<
      int Function(CFReadStreamRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFReadStreamGetBuffer(
    CFReadStreamRef stream,
    int maxBytesToRead,
    ffi.Pointer<CFIndex> numBytesRead,
  ) {
    return _CFReadStreamGetBuffer(
      stream,
      maxBytesToRead,
      numBytesRead,
    );
  }

  late final _CFReadStreamGetBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UInt8> Function(CFReadStreamRef, CFIndex,
              ffi.Pointer<CFIndex>)>>('CFReadStreamGetBuffer');
  late final _CFReadStreamGetBuffer = _CFReadStreamGetBufferPtr.asFunction<
      ffi.Pointer<UInt8> Function(
          CFReadStreamRef, int, ffi.Pointer<CFIndex>)>();

  int CFWriteStreamCanAcceptBytes(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCanAcceptBytes(
      stream,
    );
  }

  late final _CFWriteStreamCanAcceptBytesPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamCanAcceptBytes');
  late final _CFWriteStreamCanAcceptBytes = _CFWriteStreamCanAcceptBytesPtr
      .asFunction<int Function(CFWriteStreamRef)>();

  int CFWriteStreamWrite(
    CFWriteStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFWriteStreamWrite(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFWriteStreamWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFWriteStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamWrite');
  late final _CFWriteStreamWrite = _CFWriteStreamWritePtr.asFunction<
      int Function(CFWriteStreamRef, ffi.Pointer<UInt8>, int)>();

  CFTypeRef CFReadStreamCopyProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFReadStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFReadStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFReadStreamRef,
              CFStreamPropertyKey)>>('CFReadStreamCopyProperty');
  late final _CFReadStreamCopyProperty = _CFReadStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFReadStreamRef, CFStreamPropertyKey)>();

  CFTypeRef CFWriteStreamCopyProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFWriteStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFWriteStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFWriteStreamRef,
              CFStreamPropertyKey)>>('CFWriteStreamCopyProperty');
  late final _CFWriteStreamCopyProperty = _CFWriteStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFWriteStreamRef, CFStreamPropertyKey)>();

  int CFReadStreamSetProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFReadStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFReadStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFReadStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFReadStreamSetProperty');
  late final _CFReadStreamSetProperty = _CFReadStreamSetPropertyPtr.asFunction<
      int Function(CFReadStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFWriteStreamSetProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFWriteStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFWriteStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFWriteStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFWriteStreamSetProperty');
  late final _CFWriteStreamSetProperty =
      _CFWriteStreamSetPropertyPtr.asFunction<
          int Function(CFWriteStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFReadStreamSetClient(
    CFReadStreamRef stream,
    int streamEvents,
    CFReadStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFReadStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFReadStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFReadStreamRef,
              CFOptionFlags,
              CFReadStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFReadStreamSetClient');
  late final _CFReadStreamSetClient = _CFReadStreamSetClientPtr.asFunction<
      int Function(CFReadStreamRef, int, CFReadStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  int CFWriteStreamSetClient(
    CFWriteStreamRef stream,
    int streamEvents,
    CFWriteStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFWriteStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFWriteStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFWriteStreamRef,
              CFOptionFlags,
              CFWriteStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFWriteStreamSetClient');
  late final _CFWriteStreamSetClient = _CFWriteStreamSetClientPtr.asFunction<
      int Function(CFWriteStreamRef, int, CFWriteStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  void CFReadStreamScheduleWithRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamScheduleWithRunLoop');
  late final _CFReadStreamScheduleWithRunLoop =
      _CFReadStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamScheduleWithRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamScheduleWithRunLoop');
  late final _CFWriteStreamScheduleWithRunLoop =
      _CFWriteStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamUnscheduleFromRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamUnscheduleFromRunLoop');
  late final _CFReadStreamUnscheduleFromRunLoop =
      _CFReadStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamUnscheduleFromRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamUnscheduleFromRunLoop');
  late final _CFWriteStreamUnscheduleFromRunLoop =
      _CFWriteStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamSetDispatchQueue(
    CFReadStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFReadStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFReadStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef,
              dispatch_queue_t)>>('CFReadStreamSetDispatchQueue');
  late final _CFReadStreamSetDispatchQueue = _CFReadStreamSetDispatchQueuePtr
      .asFunction<void Function(CFReadStreamRef, dispatch_queue_t)>();

  void CFWriteStreamSetDispatchQueue(
    CFWriteStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFWriteStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFWriteStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef,
              dispatch_queue_t)>>('CFWriteStreamSetDispatchQueue');
  late final _CFWriteStreamSetDispatchQueue = _CFWriteStreamSetDispatchQueuePtr
      .asFunction<void Function(CFWriteStreamRef, dispatch_queue_t)>();

  dispatch_queue_t CFReadStreamCopyDispatchQueue(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFReadStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFReadStreamRef)>>(
          'CFReadStreamCopyDispatchQueue');
  late final _CFReadStreamCopyDispatchQueue = _CFReadStreamCopyDispatchQueuePtr
      .asFunction<dispatch_queue_t Function(CFReadStreamRef)>();

  dispatch_queue_t CFWriteStreamCopyDispatchQueue(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFWriteStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyDispatchQueue');
  late final _CFWriteStreamCopyDispatchQueue =
      _CFWriteStreamCopyDispatchQueuePtr.asFunction<
          dispatch_queue_t Function(CFWriteStreamRef)>();

  CFStreamError CFReadStreamGetError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetError(
      stream,
    );
  }

  late final _CFReadStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFReadStreamRef)>>(
          'CFReadStreamGetError');
  late final _CFReadStreamGetError = _CFReadStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFReadStreamRef)>();

  CFStreamError CFWriteStreamGetError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetError(
      stream,
    );
  }

  late final _CFWriteStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetError');
  late final _CFWriteStreamGetError = _CFWriteStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFWriteStreamRef)>();

  CFPropertyListRef CFPropertyListCreateFromXMLData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    int mutabilityOption,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromXMLData(
      allocator,
      xmlData,
      mutabilityOption,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, CFOptionFlags,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromXMLData');
  late final _CFPropertyListCreateFromXMLData =
      _CFPropertyListCreateFromXMLDataPtr.asFunction<
          CFPropertyListRef Function(
              CFAllocatorRef, CFDataRef, int, ffi.Pointer<CFStringRef>)>();

  CFDataRef CFPropertyListCreateXMLData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
  ) {
    return _CFPropertyListCreateXMLData(
      allocator,
      propertyList,
    );
  }

  late final _CFPropertyListCreateXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFPropertyListRef)>>('CFPropertyListCreateXMLData');
  late final _CFPropertyListCreateXMLData = _CFPropertyListCreateXMLDataPtr
      .asFunction<CFDataRef Function(CFAllocatorRef, CFPropertyListRef)>();

  CFPropertyListRef CFPropertyListCreateDeepCopy(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int mutabilityOption,
  ) {
    return _CFPropertyListCreateDeepCopy(
      allocator,
      propertyList,
      mutabilityOption,
    );
  }

  late final _CFPropertyListCreateDeepCopyPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef,
              CFOptionFlags)>>('CFPropertyListCreateDeepCopy');
  late final _CFPropertyListCreateDeepCopy =
      _CFPropertyListCreateDeepCopyPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef, int)>();

  int CFPropertyListIsValid(
    CFPropertyListRef plist,
    int format,
  ) {
    return _CFPropertyListIsValid(
      plist,
      format,
    );
  }

  late final _CFPropertyListIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFPropertyListRef, ffi.Int32)>>(
      'CFPropertyListIsValid');
  late final _CFPropertyListIsValid = _CFPropertyListIsValidPtr.asFunction<
      int Function(CFPropertyListRef, int)>();

  int CFPropertyListWriteToStream(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListWriteToStream(
      propertyList,
      stream,
      format,
      errorString,
    );
  }

  late final _CFPropertyListWriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, ffi.Int32,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListWriteToStream');
  late final _CFPropertyListWriteToStream =
      _CFPropertyListWriteToStreamPtr.asFunction<
          int Function(CFPropertyListRef, CFWriteStreamRef, int,
              ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateFromStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int mutabilityOption,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromStream(
      allocator,
      stream,
      streamLength,
      mutabilityOption,
      format,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromStream');
  late final _CFPropertyListCreateFromStream =
      _CFPropertyListCreateFromStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
    int options,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithData(
      allocator,
      data,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithData');
  late final _CFPropertyListCreateWithData =
      _CFPropertyListCreateWithDataPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFErrorRef>)>();

  CFPropertyListRef CFPropertyListCreateWithStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int options,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithStream(
      allocator,
      stream,
      streamLength,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithStream');
  late final _CFPropertyListCreateWithStream =
      _CFPropertyListCreateWithStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFErrorRef>)>();

  int CFPropertyListWrite(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListWrite(
      propertyList,
      stream,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, ffi.Int32,
              CFOptionFlags, ffi.Pointer<CFErrorRef>)>>('CFPropertyListWrite');
  late final _CFPropertyListWrite = _CFPropertyListWritePtr.asFunction<
      int Function(CFPropertyListRef, CFWriteStreamRef, int, int,
          ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFPropertyListCreateData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateData(
      allocator,
      propertyList,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFPropertyListRef,
              ffi.Int32,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateData');
  late final _CFPropertyListCreateData =
      _CFPropertyListCreateDataPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFPropertyListRef, int, int,
              ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFSetCallBacks> _kCFTypeSetCallBacks =
      _lookup<CFSetCallBacks>('kCFTypeSetCallBacks');

  CFSetCallBacks get kCFTypeSetCallBacks => _kCFTypeSetCallBacks.ref;

  late final ffi.Pointer<CFSetCallBacks> _kCFCopyStringSetCallBacks =
      _lookup<CFSetCallBacks>('kCFCopyStringSetCallBacks');

  CFSetCallBacks get kCFCopyStringSetCallBacks =>
      _kCFCopyStringSetCallBacks.ref;

  int CFSetGetTypeID() {
    return _CFSetGetTypeID();
  }

  late final _CFSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSetGetTypeID');
  late final _CFSetGetTypeID = _CFSetGetTypeIDPtr.asFunction<int Function()>();

  CFSetRef CFSetCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFSetCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFSetCallBacks>)>>('CFSetCreate');
  late final _CFSetCreate = _CFSetCreatePtr.asFunction<
      CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFSetCallBacks>)>();

  CFSetRef CFSetCreateCopy(
    CFAllocatorRef allocator,
    CFSetRef theSet,
  ) {
    return _CFSetCreateCopy(
      allocator,
      theSet,
    );
  }

  late final _CFSetCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFSetRef Function(CFAllocatorRef, CFSetRef)>>(
          'CFSetCreateCopy');
  late final _CFSetCreateCopy = _CFSetCreateCopyPtr.asFunction<
      CFSetRef Function(CFAllocatorRef, CFSetRef)>();

  CFMutableSetRef CFSetCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFSetCallBacks>)>>('CFSetCreateMutable');
  late final _CFSetCreateMutable = _CFSetCreateMutablePtr.asFunction<
      CFMutableSetRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFSetCallBacks>)>();

  CFMutableSetRef CFSetCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFSetRef theSet,
  ) {
    return _CFSetCreateMutableCopy(
      allocator,
      capacity,
      theSet,
    );
  }

  late final _CFSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(
              CFAllocatorRef, CFIndex, CFSetRef)>>('CFSetCreateMutableCopy');
  late final _CFSetCreateMutableCopy = _CFSetCreateMutableCopyPtr.asFunction<
      CFMutableSetRef Function(CFAllocatorRef, int, CFSetRef)>();

  int CFSetGetCount(
    CFSetRef theSet,
  ) {
    return _CFSetGetCount(
      theSet,
    );
  }

  late final _CFSetGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSetRef)>>('CFSetGetCount');
  late final _CFSetGetCount =
      _CFSetGetCountPtr.asFunction<int Function(CFSetRef)>();

  int CFSetGetCountOfValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetCountOfValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetCountOfValue');
  late final _CFSetGetCountOfValue = _CFSetGetCountOfValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetContainsValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetContainsValue(
      theSet,
      value,
    );
  }

  late final _CFSetContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetContainsValue');
  late final _CFSetContainsValue = _CFSetContainsValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFSetGetValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetValue');
  late final _CFSetGetValue = _CFSetGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetGetValueIfPresent(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFSetGetValueIfPresent(
      theSet,
      candidate,
      value,
    );
  }

  late final _CFSetGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValueIfPresent');
  late final _CFSetGetValueIfPresent = _CFSetGetValueIfPresentPtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetGetValues(
    CFSetRef theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues(
      theSet,
      values,
    );
  }

  late final _CFSetGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValues');
  late final _CFSetGetValues = _CFSetGetValuesPtr.asFunction<
      void Function(CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetApplyFunction(
    CFSetRef theSet,
    CFSetApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFSetApplyFunction(
      theSet,
      applier,
      context,
    );
  }

  late final _CFSetApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSetRef, CFSetApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFSetApplyFunction');
  late final _CFSetApplyFunction = _CFSetApplyFunctionPtr.asFunction<
      void Function(CFSetRef, CFSetApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFSetAddValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetAddValue(
      theSet,
      value,
    );
  }

  late final _CFSetAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetAddValue');
  late final _CFSetAddValue = _CFSetAddValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetReplaceValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetReplaceValue(
      theSet,
      value,
    );
  }

  late final _CFSetReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetReplaceValue');
  late final _CFSetReplaceValue = _CFSetReplaceValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetSetValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetSetValue(
      theSet,
      value,
    );
  }

  late final _CFSetSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetSetValue');
  late final _CFSetSetValue = _CFSetSetValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetRemoveValue(
      theSet,
      value,
    );
  }

  late final _CFSetRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetRemoveValue');
  late final _CFSetRemoveValue = _CFSetRemoveValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveAllValues(
    CFMutableSetRef theSet,
  ) {
    return _CFSetRemoveAllValues(
      theSet,
    );
  }

  late final _CFSetRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableSetRef)>>(
          'CFSetRemoveAllValues');
  late final _CFSetRemoveAllValues =
      _CFSetRemoveAllValuesPtr.asFunction<void Function(CFMutableSetRef)>();

  int CFTreeGetTypeID() {
    return _CFTreeGetTypeID();
  }

  late final _CFTreeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTreeGetTypeID');
  late final _CFTreeGetTypeID =
      _CFTreeGetTypeIDPtr.asFunction<int Function()>();

  CFTreeRef CFTreeCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeCreate(
      allocator,
      context,
    );
  }

  late final _CFTreeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTreeRef Function(
              CFAllocatorRef, ffi.Pointer<CFTreeContext>)>>('CFTreeCreate');
  late final _CFTreeCreate = _CFTreeCreatePtr.asFunction<
      CFTreeRef Function(CFAllocatorRef, ffi.Pointer<CFTreeContext>)>();

  CFTreeRef CFTreeGetParent(
    CFTreeRef tree,
  ) {
    return _CFTreeGetParent(
      tree,
    );
  }

  late final _CFTreeGetParentPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetParent');
  late final _CFTreeGetParent =
      _CFTreeGetParentPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetNextSibling(
    CFTreeRef tree,
  ) {
    return _CFTreeGetNextSibling(
      tree,
    );
  }

  late final _CFTreeGetNextSiblingPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetNextSibling');
  late final _CFTreeGetNextSibling =
      _CFTreeGetNextSiblingPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetFirstChild(
    CFTreeRef tree,
  ) {
    return _CFTreeGetFirstChild(
      tree,
    );
  }

  late final _CFTreeGetFirstChildPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetFirstChild');
  late final _CFTreeGetFirstChild =
      _CFTreeGetFirstChildPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeGetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeGetContext(
      tree,
      context,
    );
  }

  late final _CFTreeGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeGetContext');
  late final _CFTreeGetContext = _CFTreeGetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  int CFTreeGetChildCount(
    CFTreeRef tree,
  ) {
    return _CFTreeGetChildCount(
      tree,
    );
  }

  late final _CFTreeGetChildCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTreeRef)>>(
          'CFTreeGetChildCount');
  late final _CFTreeGetChildCount =
      _CFTreeGetChildCountPtr.asFunction<int Function(CFTreeRef)>();

  CFTreeRef CFTreeGetChildAtIndex(
    CFTreeRef tree,
    int idx,
  ) {
    return _CFTreeGetChildAtIndex(
      tree,
      idx,
    );
  }

  late final _CFTreeGetChildAtIndexPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef, CFIndex)>>(
          'CFTreeGetChildAtIndex');
  late final _CFTreeGetChildAtIndex = _CFTreeGetChildAtIndexPtr.asFunction<
      CFTreeRef Function(CFTreeRef, int)>();

  void CFTreeGetChildren(
    CFTreeRef tree,
    ffi.Pointer<CFTreeRef> children,
  ) {
    return _CFTreeGetChildren(
      tree,
      children,
    );
  }

  late final _CFTreeGetChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeRef>)>>('CFTreeGetChildren');
  late final _CFTreeGetChildren = _CFTreeGetChildrenPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeRef>)>();

  void CFTreeApplyFunctionToChildren(
    CFTreeRef tree,
    CFTreeApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeApplyFunctionToChildren(
      tree,
      applier,
      context,
    );
  }

  late final _CFTreeApplyFunctionToChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFTreeApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeApplyFunctionToChildren');
  late final _CFTreeApplyFunctionToChildren =
      _CFTreeApplyFunctionToChildrenPtr.asFunction<
          void Function(
              CFTreeRef, CFTreeApplierFunction, ffi.Pointer<ffi.Void>)>();

  CFTreeRef CFTreeFindRoot(
    CFTreeRef tree,
  ) {
    return _CFTreeFindRoot(
      tree,
    );
  }

  late final _CFTreeFindRootPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeFindRoot');
  late final _CFTreeFindRoot =
      _CFTreeFindRootPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeSetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeSetContext(
      tree,
      context,
    );
  }

  late final _CFTreeSetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeSetContext');
  late final _CFTreeSetContext = _CFTreeSetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  void CFTreePrependChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreePrependChild(
      tree,
      newChild,
    );
  }

  late final _CFTreePrependChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreePrependChild');
  late final _CFTreePrependChild =
      _CFTreePrependChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeAppendChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreeAppendChild(
      tree,
      newChild,
    );
  }

  late final _CFTreeAppendChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeAppendChild');
  late final _CFTreeAppendChild =
      _CFTreeAppendChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeInsertSibling(
    CFTreeRef tree,
    CFTreeRef newSibling,
  ) {
    return _CFTreeInsertSibling(
      tree,
      newSibling,
    );
  }

  late final _CFTreeInsertSiblingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeInsertSibling');
  late final _CFTreeInsertSibling =
      _CFTreeInsertSiblingPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeRemove(
    CFTreeRef tree,
  ) {
    return _CFTreeRemove(
      tree,
    );
  }

  late final _CFTreeRemovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>('CFTreeRemove');
  late final _CFTreeRemove =
      _CFTreeRemovePtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeRemoveAllChildren(
    CFTreeRef tree,
  ) {
    return _CFTreeRemoveAllChildren(
      tree,
    );
  }

  late final _CFTreeRemoveAllChildrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>(
          'CFTreeRemoveAllChildren');
  late final _CFTreeRemoveAllChildren =
      _CFTreeRemoveAllChildrenPtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeSortChildren(
    CFTreeRef tree,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeSortChildren(
      tree,
      comparator,
      context,
    );
  }

  late final _CFTreeSortChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeSortChildren');
  late final _CFTreeSortChildren = _CFTreeSortChildrenPtr.asFunction<
      void Function(CFTreeRef, CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  int CFURLCreateDataAndPropertiesFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    ffi.Pointer<CFDataRef> resourceData,
    ffi.Pointer<CFDictionaryRef> properties,
    CFArrayRef desiredProperties,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreateDataAndPropertiesFromResource(
      alloc,
      url,
      resourceData,
      properties,
      desiredProperties,
      errorCode,
    );
  }

  late final _CFURLCreateDataAndPropertiesFromResourcePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFAllocatorRef,
                  CFURLRef,
                  ffi.Pointer<CFDataRef>,
                  ffi.Pointer<CFDictionaryRef>,
                  CFArrayRef,
                  ffi.Pointer<SInt32>)>>(
      'CFURLCreateDataAndPropertiesFromResource');
  late final _CFURLCreateDataAndPropertiesFromResource =
      _CFURLCreateDataAndPropertiesFromResourcePtr.asFunction<
          int Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFDataRef>,
              ffi.Pointer<CFDictionaryRef>, CFArrayRef, ffi.Pointer<SInt32>)>();

  int CFURLWriteDataAndPropertiesToResource(
    CFURLRef url,
    CFDataRef dataToWrite,
    CFDictionaryRef propertiesToWrite,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLWriteDataAndPropertiesToResource(
      url,
      dataToWrite,
      propertiesToWrite,
      errorCode,
    );
  }

  late final _CFURLWriteDataAndPropertiesToResourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDataRef, CFDictionaryRef,
              ffi.Pointer<SInt32>)>>('CFURLWriteDataAndPropertiesToResource');
  late final _CFURLWriteDataAndPropertiesToResource =
      _CFURLWriteDataAndPropertiesToResourcePtr.asFunction<
          int Function(
              CFURLRef, CFDataRef, CFDictionaryRef, ffi.Pointer<SInt32>)>();

  int CFURLDestroyResource(
    CFURLRef url,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLDestroyResource(
      url,
      errorCode,
    );
  }

  late final _CFURLDestroyResourcePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<SInt32>)>>(
      'CFURLDestroyResource');
  late final _CFURLDestroyResource = _CFURLDestroyResourcePtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<SInt32>)>();

  CFTypeRef CFURLCreatePropertyFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    CFStringRef property,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreatePropertyFromResource(
      alloc,
      url,
      property,
      errorCode,
    );
  }

  late final _CFURLCreatePropertyFromResourcePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              ffi.Pointer<SInt32>)>>('CFURLCreatePropertyFromResource');
  late final _CFURLCreatePropertyFromResource =
      _CFURLCreatePropertyFromResourcePtr.asFunction<
          CFTypeRef Function(
              CFAllocatorRef, CFURLRef, CFStringRef, ffi.Pointer<SInt32>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLFileExists =
      _lookup<CFStringRef>('kCFURLFileExists');

  CFStringRef get kCFURLFileExists => _kCFURLFileExists.value;

  set kCFURLFileExists(CFStringRef value) => _kCFURLFileExists.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileDirectoryContents =
      _lookup<CFStringRef>('kCFURLFileDirectoryContents');

  CFStringRef get kCFURLFileDirectoryContents =>
      _kCFURLFileDirectoryContents.value;

  set kCFURLFileDirectoryContents(CFStringRef value) =>
      _kCFURLFileDirectoryContents.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLength =
      _lookup<CFStringRef>('kCFURLFileLength');

  CFStringRef get kCFURLFileLength => _kCFURLFileLength.value;

  set kCFURLFileLength(CFStringRef value) => _kCFURLFileLength.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLastModificationTime =
      _lookup<CFStringRef>('kCFURLFileLastModificationTime');

  CFStringRef get kCFURLFileLastModificationTime =>
      _kCFURLFileLastModificationTime.value;

  set kCFURLFileLastModificationTime(CFStringRef value) =>
      _kCFURLFileLastModificationTime.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFilePOSIXMode =
      _lookup<CFStringRef>('kCFURLFilePOSIXMode');

  CFStringRef get kCFURLFilePOSIXMode => _kCFURLFilePOSIXMode.value;

  set kCFURLFilePOSIXMode(CFStringRef value) =>
      _kCFURLFilePOSIXMode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileOwnerID =
      _lookup<CFStringRef>('kCFURLFileOwnerID');

  CFStringRef get kCFURLFileOwnerID => _kCFURLFileOwnerID.value;

  set kCFURLFileOwnerID(CFStringRef value) => _kCFURLFileOwnerID.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusCode =
      _lookup<CFStringRef>('kCFURLHTTPStatusCode');

  CFStringRef get kCFURLHTTPStatusCode => _kCFURLHTTPStatusCode.value;

  set kCFURLHTTPStatusCode(CFStringRef value) =>
      _kCFURLHTTPStatusCode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusLine =
      _lookup<CFStringRef>('kCFURLHTTPStatusLine');

  CFStringRef get kCFURLHTTPStatusLine => _kCFURLHTTPStatusLine.value;

  set kCFURLHTTPStatusLine(CFStringRef value) =>
      _kCFURLHTTPStatusLine.value = value;

  int CFUUIDGetTypeID() {
    return _CFUUIDGetTypeID();
  }

  late final _CFUUIDGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFUUIDGetTypeID');
  late final _CFUUIDGetTypeID =
      _CFUUIDGetTypeIDPtr.asFunction<int Function()>();

  CFUUIDRef CFUUIDCreate(
    CFAllocatorRef alloc,
  ) {
    return _CFUUIDCreate(
      alloc,
    );
  }

  late final _CFUUIDCreatePtr =
      _lookup<ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef)>>(
          'CFUUIDCreate');
  late final _CFUUIDCreate =
      _CFUUIDCreatePtr.asFunction<CFUUIDRef Function(CFAllocatorRef)>();

  CFUUIDRef CFUUIDCreateWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDCreateWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDCreateWithBytes');
  late final _CFUUIDCreateWithBytes = _CFUUIDCreateWithBytesPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int, int,
          int, int, int, int, int, int, int, int)>();

  CFUUIDRef CFUUIDCreateFromString(
    CFAllocatorRef alloc,
    CFStringRef uuidStr,
  ) {
    return _CFUUIDCreateFromString(
      alloc,
      uuidStr,
    );
  }

  late final _CFUUIDCreateFromStringPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFUUIDCreateFromString');
  late final _CFUUIDCreateFromString = _CFUUIDCreateFromStringPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFUUIDCreateString(
    CFAllocatorRef alloc,
    CFUUIDRef uuid,
  ) {
    return _CFUUIDCreateString(
      alloc,
      uuid,
    );
  }

  late final _CFUUIDCreateStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFAllocatorRef, CFUUIDRef)>>(
      'CFUUIDCreateString');
  late final _CFUUIDCreateString = _CFUUIDCreateStringPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFUUIDRef)>();

  CFUUIDRef CFUUIDGetConstantUUIDWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDGetConstantUUIDWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDGetConstantUUIDWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDGetConstantUUIDWithBytes');
  late final _CFUUIDGetConstantUUIDWithBytes =
      _CFUUIDGetConstantUUIDWithBytesPtr.asFunction<
          CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, int)>();

  CFUUIDBytes CFUUIDGetUUIDBytes(
    CFUUIDRef uuid,
  ) {
    return _CFUUIDGetUUIDBytes(
      uuid,
    );
  }

  late final _CFUUIDGetUUIDBytesPtr =
      _lookup<ffi.NativeFunction<CFUUIDBytes Function(CFUUIDRef)>>(
          'CFUUIDGetUUIDBytes');
  late final _CFUUIDGetUUIDBytes =
      _CFUUIDGetUUIDBytesPtr.asFunction<CFUUIDBytes Function(CFUUIDRef)>();

  CFUUIDRef CFUUIDCreateFromUUIDBytes(
    CFAllocatorRef alloc,
    CFUUIDBytes bytes,
  ) {
    return _CFUUIDCreateFromUUIDBytes(
      alloc,
      bytes,
    );
  }

  late final _CFUUIDCreateFromUUIDBytesPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>>(
      'CFUUIDCreateFromUUIDBytes');
  late final _CFUUIDCreateFromUUIDBytes = _CFUUIDCreateFromUUIDBytesPtr
      .asFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>();

  CFURLRef CFCopyHomeDirectoryURL() {
    return _CFCopyHomeDirectoryURL();
  }

  late final _CFCopyHomeDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function()>>(
          'CFCopyHomeDirectoryURL');
  late final _CFCopyHomeDirectoryURL =
      _CFCopyHomeDirectoryURLPtr.asFunction<CFURLRef Function()>();

  late final ffi.Pointer<CFStringRef> _kCFBundleInfoDictionaryVersionKey =
      _lookup<CFStringRef>('kCFBundleInfoDictionaryVersionKey');

  CFStringRef get kCFBundleInfoDictionaryVersionKey =>
      _kCFBundleInfoDictionaryVersionKey.value;

  set kCFBundleInfoDictionaryVersionKey(CFStringRef value) =>
      _kCFBundleInfoDictionaryVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleExecutableKey =
      _lookup<CFStringRef>('kCFBundleExecutableKey');

  CFStringRef get kCFBundleExecutableKey => _kCFBundleExecutableKey.value;

  set kCFBundleExecutableKey(CFStringRef value) =>
      _kCFBundleExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleIdentifierKey =
      _lookup<CFStringRef>('kCFBundleIdentifierKey');

  CFStringRef get kCFBundleIdentifierKey => _kCFBundleIdentifierKey.value;

  set kCFBundleIdentifierKey(CFStringRef value) =>
      _kCFBundleIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleVersionKey =
      _lookup<CFStringRef>('kCFBundleVersionKey');

  CFStringRef get kCFBundleVersionKey => _kCFBundleVersionKey.value;

  set kCFBundleVersionKey(CFStringRef value) =>
      _kCFBundleVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleDevelopmentRegionKey =
      _lookup<CFStringRef>('kCFBundleDevelopmentRegionKey');

  CFStringRef get kCFBundleDevelopmentRegionKey =>
      _kCFBundleDevelopmentRegionKey.value;

  set kCFBundleDevelopmentRegionKey(CFStringRef value) =>
      _kCFBundleDevelopmentRegionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleNameKey =
      _lookup<CFStringRef>('kCFBundleNameKey');

  CFStringRef get kCFBundleNameKey => _kCFBundleNameKey.value;

  set kCFBundleNameKey(CFStringRef value) => _kCFBundleNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleLocalizationsKey =
      _lookup<CFStringRef>('kCFBundleLocalizationsKey');

  CFStringRef get kCFBundleLocalizationsKey => _kCFBundleLocalizationsKey.value;

  set kCFBundleLocalizationsKey(CFStringRef value) =>
      _kCFBundleLocalizationsKey.value = value;

  CFBundleRef CFBundleGetMainBundle() {
    return _CFBundleGetMainBundle();
  }

  late final _CFBundleGetMainBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function()>>(
          'CFBundleGetMainBundle');
  late final _CFBundleGetMainBundle =
      _CFBundleGetMainBundlePtr.asFunction<CFBundleRef Function()>();

  CFBundleRef CFBundleGetBundleWithIdentifier(
    CFStringRef bundleID,
  ) {
    return _CFBundleGetBundleWithIdentifier(
      bundleID,
    );
  }

  late final _CFBundleGetBundleWithIdentifierPtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFStringRef)>>(
          'CFBundleGetBundleWithIdentifier');
  late final _CFBundleGetBundleWithIdentifier =
      _CFBundleGetBundleWithIdentifierPtr.asFunction<
          CFBundleRef Function(CFStringRef)>();

  CFArrayRef CFBundleGetAllBundles() {
    return _CFBundleGetAllBundles();
  }

  late final _CFBundleGetAllBundlesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFBundleGetAllBundles');
  late final _CFBundleGetAllBundles =
      _CFBundleGetAllBundlesPtr.asFunction<CFArrayRef Function()>();

  int CFBundleGetTypeID() {
    return _CFBundleGetTypeID();
  }

  late final _CFBundleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBundleGetTypeID');
  late final _CFBundleGetTypeID =
      _CFBundleGetTypeIDPtr.asFunction<int Function()>();

  CFBundleRef CFBundleCreate(
    CFAllocatorRef allocator,
    CFURLRef bundleURL,
  ) {
    return _CFBundleCreate(
      allocator,
      bundleURL,
    );
  }

  late final _CFBundleCreatePtr = _lookup<
          ffi.NativeFunction<CFBundleRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFBundleCreate');
  late final _CFBundleCreate = _CFBundleCreatePtr.asFunction<
      CFBundleRef Function(CFAllocatorRef, CFURLRef)>();

  CFArrayRef CFBundleCreateBundlesFromDirectory(
    CFAllocatorRef allocator,
    CFURLRef directoryURL,
    CFStringRef bundleType,
  ) {
    return _CFBundleCreateBundlesFromDirectory(
      allocator,
      directoryURL,
      bundleType,
    );
  }

  late final _CFBundleCreateBundlesFromDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFBundleCreateBundlesFromDirectory');
  late final _CFBundleCreateBundlesFromDirectory =
      _CFBundleCreateBundlesFromDirectoryPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFBundleCopyBundleURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleURL(
      bundle,
    );
  }

  late final _CFBundleCopyBundleURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleURL');
  late final _CFBundleCopyBundleURL =
      _CFBundleCopyBundleURLPtr.asFunction<CFURLRef Function(CFBundleRef)>();

  CFTypeRef CFBundleGetValueForInfoDictionaryKey(
    CFBundleRef bundle,
    CFStringRef key,
  ) {
    return _CFBundleGetValueForInfoDictionaryKey(
      bundle,
      key,
    );
  }

  late final _CFBundleGetValueForInfoDictionaryKeyPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleGetValueForInfoDictionaryKey');
  late final _CFBundleGetValueForInfoDictionaryKey =
      _CFBundleGetValueForInfoDictionaryKeyPtr.asFunction<
          CFTypeRef Function(CFBundleRef, CFStringRef)>();

  CFDictionaryRef CFBundleGetInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetInfoDictionary');
  late final _CFBundleGetInfoDictionary = _CFBundleGetInfoDictionaryPtr
      .asFunction<CFDictionaryRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleGetLocalInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetLocalInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetLocalInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetLocalInfoDictionary');
  late final _CFBundleGetLocalInfoDictionary =
      _CFBundleGetLocalInfoDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFBundleRef)>();

  void CFBundleGetPackageInfo(
    CFBundleRef bundle,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfo(
      bundle,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBundleRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfo');
  late final _CFBundleGetPackageInfo = _CFBundleGetPackageInfoPtr.asFunction<
      void Function(CFBundleRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFStringRef CFBundleGetIdentifier(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetIdentifier(
      bundle,
    );
  }

  late final _CFBundleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetIdentifier');
  late final _CFBundleGetIdentifier =
      _CFBundleGetIdentifierPtr.asFunction<CFStringRef Function(CFBundleRef)>();

  int CFBundleGetVersionNumber(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetVersionNumber(
      bundle,
    );
  }

  late final _CFBundleGetVersionNumberPtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFBundleRef)>>(
          'CFBundleGetVersionNumber');
  late final _CFBundleGetVersionNumber =
      _CFBundleGetVersionNumberPtr.asFunction<int Function(CFBundleRef)>();

  CFStringRef CFBundleGetDevelopmentRegion(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetDevelopmentRegion(
      bundle,
    );
  }

  late final _CFBundleGetDevelopmentRegionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetDevelopmentRegion');
  late final _CFBundleGetDevelopmentRegion = _CFBundleGetDevelopmentRegionPtr
      .asFunction<CFStringRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySupportFilesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySupportFilesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopySupportFilesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySupportFilesDirectoryURL');
  late final _CFBundleCopySupportFilesDirectoryURL =
      _CFBundleCopySupportFilesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyResourcesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyResourcesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopyResourcesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyResourcesDirectoryURL');
  late final _CFBundleCopyResourcesDirectoryURL =
      _CFBundleCopyResourcesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyPrivateFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyPrivateFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopyPrivateFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyPrivateFrameworksURL');
  late final _CFBundleCopyPrivateFrameworksURL =
      _CFBundleCopyPrivateFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedFrameworksURL');
  late final _CFBundleCopySharedFrameworksURL =
      _CFBundleCopySharedFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedSupportURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedSupportURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedSupportURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedSupportURL');
  late final _CFBundleCopySharedSupportURL = _CFBundleCopySharedSupportURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyBuiltInPlugInsURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBuiltInPlugInsURL(
      bundle,
    );
  }

  late final _CFBundleCopyBuiltInPlugInsURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBuiltInPlugInsURL');
  late final _CFBundleCopyBuiltInPlugInsURL = _CFBundleCopyBuiltInPlugInsURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(
    CFURLRef bundleURL,
  ) {
    return _CFBundleCopyInfoDictionaryInDirectory(
      bundleURL,
    );
  }

  late final _CFBundleCopyInfoDictionaryInDirectoryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryInDirectory');
  late final _CFBundleCopyInfoDictionaryInDirectory =
      _CFBundleCopyInfoDictionaryInDirectoryPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  int CFBundleGetPackageInfoInDirectory(
    CFURLRef url,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfoInDirectory(
      url,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfoInDirectory');
  late final _CFBundleGetPackageInfoInDirectory =
      _CFBundleGetPackageInfoInDirectoryPtr.asFunction<
          int Function(CFURLRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFURLRef CFBundleCopyResourceURL(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURL(
      bundle,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURL');
  late final _CFBundleCopyResourceURL = _CFBundleCopyResourceURLPtr.asFunction<
      CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfType(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfType(
      bundle,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfType');
  late final _CFBundleCopyResourceURLsOfType =
      _CFBundleCopyResourceURLsOfTypePtr.asFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef)>();

  CFStringRef CFBundleCopyLocalizedString(
    CFBundleRef bundle,
    CFStringRef key,
    CFStringRef value,
    CFStringRef tableName,
  ) {
    return _CFBundleCopyLocalizedString(
      bundle,
      key,
      value,
      tableName,
    );
  }

  late final _CFBundleCopyLocalizedStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyLocalizedString');
  late final _CFBundleCopyLocalizedString =
      _CFBundleCopyLocalizedStringPtr.asFunction<
          CFStringRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFURLRef CFBundleCopyResourceURLInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLInDirectory(
      bundleURL,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLInDirectory');
  late final _CFBundleCopyResourceURLInDirectory =
      _CFBundleCopyResourceURLInDirectoryPtr.asFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeInDirectory(
      bundleURL,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFURLRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeInDirectory');
  late final _CFBundleCopyResourceURLsOfTypeInDirectory =
      _CFBundleCopyResourceURLsOfTypeInDirectoryPtr.asFunction<
          CFArrayRef Function(CFURLRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyBundleLocalizations(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleLocalizations(
      bundle,
    );
  }

  late final _CFBundleCopyBundleLocalizationsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleLocalizations');
  late final _CFBundleCopyBundleLocalizations =
      _CFBundleCopyBundleLocalizationsPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(
    CFArrayRef locArray,
  ) {
    return _CFBundleCopyPreferredLocalizationsFromArray(
      locArray,
    );
  }

  late final _CFBundleCopyPreferredLocalizationsFromArrayPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef)>>(
          'CFBundleCopyPreferredLocalizationsFromArray');
  late final _CFBundleCopyPreferredLocalizationsFromArray =
      _CFBundleCopyPreferredLocalizationsFromArrayPtr.asFunction<
          CFArrayRef Function(CFArrayRef)>();

  CFArrayRef CFBundleCopyLocalizationsForPreferences(
    CFArrayRef locArray,
    CFArrayRef prefArray,
  ) {
    return _CFBundleCopyLocalizationsForPreferences(
      locArray,
      prefArray,
    );
  }

  late final _CFBundleCopyLocalizationsForPreferencesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef, CFArrayRef)>>(
          'CFBundleCopyLocalizationsForPreferences');
  late final _CFBundleCopyLocalizationsForPreferences =
      _CFBundleCopyLocalizationsForPreferencesPtr.asFunction<
          CFArrayRef Function(CFArrayRef, CFArrayRef)>();

  CFURLRef CFBundleCopyResourceURLForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLForLocalization(
      bundle,
      resourceName,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLForLocalization');
  late final _CFBundleCopyResourceURLForLocalization =
      _CFBundleCopyResourceURLForLocalizationPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeForLocalization(
      bundle,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeForLocalization');
  late final _CFBundleCopyResourceURLsOfTypeForLocalization =
      _CFBundleCopyResourceURLsOfTypeForLocalizationPtr.asFunction<
          CFArrayRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyInfoDictionaryForURL(
      url,
    );
  }

  late final _CFBundleCopyInfoDictionaryForURLPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryForURL');
  late final _CFBundleCopyInfoDictionaryForURL =
      _CFBundleCopyInfoDictionaryForURLPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyLocalizationsForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyLocalizationsForURL(
      url,
    );
  }

  late final _CFBundleCopyLocalizationsForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyLocalizationsForURL');
  late final _CFBundleCopyLocalizationsForURL =
      _CFBundleCopyLocalizationsForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyExecutableArchitecturesForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyExecutableArchitecturesForURL(
      url,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyExecutableArchitecturesForURL');
  late final _CFBundleCopyExecutableArchitecturesForURL =
      _CFBundleCopyExecutableArchitecturesForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFURLRef CFBundleCopyExecutableURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableURL(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableURL');
  late final _CFBundleCopyExecutableURL = _CFBundleCopyExecutableURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyExecutableArchitectures(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableArchitectures(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableArchitectures');
  late final _CFBundleCopyExecutableArchitectures =
      _CFBundleCopyExecutableArchitecturesPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  int CFBundlePreflightExecutable(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundlePreflightExecutable(
      bundle,
      error,
    );
  }

  late final _CFBundlePreflightExecutablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBundleRef,
              ffi.Pointer<CFErrorRef>)>>('CFBundlePreflightExecutable');
  late final _CFBundlePreflightExecutable = _CFBundlePreflightExecutablePtr
      .asFunction<int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutableAndReturnError(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundleLoadExecutableAndReturnError(
      bundle,
      error,
    );
  }

  late final _CFBundleLoadExecutableAndReturnErrorPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>>(
      'CFBundleLoadExecutableAndReturnError');
  late final _CFBundleLoadExecutableAndReturnError =
      _CFBundleLoadExecutableAndReturnErrorPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleLoadExecutable(
      bundle,
    );
  }

  late final _CFBundleLoadExecutablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleLoadExecutable');
  late final _CFBundleLoadExecutable =
      _CFBundleLoadExecutablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoaded(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoaded(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoaded');
  late final _CFBundleIsExecutableLoaded =
      _CFBundleIsExecutableLoadedPtr.asFunction<int Function(CFBundleRef)>();

  void CFBundleUnloadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleUnloadExecutable(
      bundle,
    );
  }

  late final _CFBundleUnloadExecutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBundleRef)>>(
          'CFBundleUnloadExecutable');
  late final _CFBundleUnloadExecutable =
      _CFBundleUnloadExecutablePtr.asFunction<void Function(CFBundleRef)>();

  ffi.Pointer<ffi.Void> CFBundleGetFunctionPointerForName(
    CFBundleRef bundle,
    CFStringRef functionName,
  ) {
    return _CFBundleGetFunctionPointerForName(
      bundle,
      functionName,
    );
  }

  late final _CFBundleGetFunctionPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetFunctionPointerForName');
  late final _CFBundleGetFunctionPointerForName =
      _CFBundleGetFunctionPointerForNamePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetFunctionPointersForNames(
    CFBundleRef bundle,
    CFArrayRef functionNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFBundleGetFunctionPointersForNames(
      bundle,
      functionNames,
      ftbl,
    );
  }

  late final _CFBundleGetFunctionPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetFunctionPointersForNames');
  late final _CFBundleGetFunctionPointersForNames =
      _CFBundleGetFunctionPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> CFBundleGetDataPointerForName(
    CFBundleRef bundle,
    CFStringRef symbolName,
  ) {
    return _CFBundleGetDataPointerForName(
      bundle,
      symbolName,
    );
  }

  late final _CFBundleGetDataPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetDataPointerForName');
  late final _CFBundleGetDataPointerForName = _CFBundleGetDataPointerForNamePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetDataPointersForNames(
    CFBundleRef bundle,
    CFArrayRef symbolNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> stbl,
  ) {
    return _CFBundleGetDataPointersForNames(
      bundle,
      symbolNames,
      stbl,
    );
  }

  late final _CFBundleGetDataPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetDataPointersForNames');
  late final _CFBundleGetDataPointersForNames =
      _CFBundleGetDataPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFURLRef CFBundleCopyAuxiliaryExecutableURL(
    CFBundleRef bundle,
    CFStringRef executableName,
  ) {
    return _CFBundleCopyAuxiliaryExecutableURL(
      bundle,
      executableName,
    );
  }

  late final _CFBundleCopyAuxiliaryExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleCopyAuxiliaryExecutableURL');
  late final _CFBundleCopyAuxiliaryExecutableURL =
      _CFBundleCopyAuxiliaryExecutableURLPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef)>();

  int CFBundleIsExecutableLoadable(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoadable(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoadable');
  late final _CFBundleIsExecutableLoadable =
      _CFBundleIsExecutableLoadablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoadableForURL(
    CFURLRef url,
  ) {
    return _CFBundleIsExecutableLoadableForURL(
      url,
    );
  }

  late final _CFBundleIsExecutableLoadableForURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFBundleIsExecutableLoadableForURL');
  late final _CFBundleIsExecutableLoadableForURL =
      _CFBundleIsExecutableLoadableForURLPtr.asFunction<
          int Function(CFURLRef)>();

  int CFBundleIsArchitectureLoadable(
    int arch,
  ) {
    return _CFBundleIsArchitectureLoadable(
      arch,
    );
  }

  late final _CFBundleIsArchitectureLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(cpu_type_t)>>(
          'CFBundleIsArchitectureLoadable');
  late final _CFBundleIsArchitectureLoadable =
      _CFBundleIsArchitectureLoadablePtr.asFunction<int Function(int)>();

  CFPlugInRef CFBundleGetPlugIn(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetPlugIn(
      bundle,
    );
  }

  late final _CFBundleGetPlugInPtr =
      _lookup<ffi.NativeFunction<CFPlugInRef Function(CFBundleRef)>>(
          'CFBundleGetPlugIn');
  late final _CFBundleGetPlugIn =
      _CFBundleGetPlugInPtr.asFunction<CFPlugInRef Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceMap(
    CFBundleRef bundle,
  ) {
    return _CFBundleOpenBundleResourceMap(
      bundle,
    );
  }

  late final _CFBundleOpenBundleResourceMapPtr =
      _lookup<ffi.NativeFunction<CFBundleRefNum Function(CFBundleRef)>>(
          'CFBundleOpenBundleResourceMap');
  late final _CFBundleOpenBundleResourceMap =
      _CFBundleOpenBundleResourceMapPtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceFiles(
    CFBundleRef bundle,
    ffi.Pointer<CFBundleRefNum> refNum,
    ffi.Pointer<CFBundleRefNum> localizedRefNum,
  ) {
    return _CFBundleOpenBundleResourceFiles(
      bundle,
      refNum,
      localizedRefNum,
    );
  }

  late final _CFBundleOpenBundleResourceFilesPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>>('CFBundleOpenBundleResourceFiles');
  late final _CFBundleOpenBundleResourceFiles =
      _CFBundleOpenBundleResourceFilesPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>();

  void CFBundleCloseBundleResourceMap(
    CFBundleRef bundle,
    int refNum,
  ) {
    return _CFBundleCloseBundleResourceMap(
      bundle,
      refNum,
    );
  }

  late final _CFBundleCloseBundleResourceMapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFBundleRef, CFBundleRefNum)>>(
      'CFBundleCloseBundleResourceMap');
  late final _CFBundleCloseBundleResourceMap =
      _CFBundleCloseBundleResourceMapPtr.asFunction<
          void Function(CFBundleRef, int)>();

  int CFMessagePortGetTypeID() {
    return _CFMessagePortGetTypeID();
  }

  late final _CFMessagePortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFMessagePortGetTypeID');
  late final _CFMessagePortGetTypeID =
      _CFMessagePortGetTypeIDPtr.asFunction<int Function()>();

  CFMessagePortRef CFMessagePortCreateLocal(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFMessagePortCallBack callout,
    ffi.Pointer<CFMessagePortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMessagePortCreateLocal(
      allocator,
      name,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMessagePortCreateLocalPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>>('CFMessagePortCreateLocal');
  late final _CFMessagePortCreateLocal =
      _CFMessagePortCreateLocalPtr.asFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>();

  CFMessagePortRef CFMessagePortCreateRemote(
    CFAllocatorRef allocator,
    CFStringRef name,
  ) {
    return _CFMessagePortCreateRemote(
      allocator,
      name,
    );
  }

  late final _CFMessagePortCreateRemotePtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef, CFStringRef)>>('CFMessagePortCreateRemote');
  late final _CFMessagePortCreateRemote = _CFMessagePortCreateRemotePtr
      .asFunction<CFMessagePortRef Function(CFAllocatorRef, CFStringRef)>();

  int CFMessagePortIsRemote(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsRemote(
      ms,
    );
  }

  late final _CFMessagePortIsRemotePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsRemote');
  late final _CFMessagePortIsRemote =
      _CFMessagePortIsRemotePtr.asFunction<int Function(CFMessagePortRef)>();

  CFStringRef CFMessagePortGetName(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetName(
      ms,
    );
  }

  late final _CFMessagePortGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFMessagePortRef)>>(
          'CFMessagePortGetName');
  late final _CFMessagePortGetName = _CFMessagePortGetNamePtr.asFunction<
      CFStringRef Function(CFMessagePortRef)>();

  int CFMessagePortSetName(
    CFMessagePortRef ms,
    CFStringRef newName,
  ) {
    return _CFMessagePortSetName(
      ms,
      newName,
    );
  }

  late final _CFMessagePortSetNamePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFMessagePortRef, CFStringRef)>>(
      'CFMessagePortSetName');
  late final _CFMessagePortSetName = _CFMessagePortSetNamePtr.asFunction<
      int Function(CFMessagePortRef, CFStringRef)>();

  void CFMessagePortGetContext(
    CFMessagePortRef ms,
    ffi.Pointer<CFMessagePortContext> context,
  ) {
    return _CFMessagePortGetContext(
      ms,
      context,
    );
  }

  late final _CFMessagePortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              ffi.Pointer<CFMessagePortContext>)>>('CFMessagePortGetContext');
  late final _CFMessagePortGetContext = _CFMessagePortGetContextPtr.asFunction<
      void Function(CFMessagePortRef, ffi.Pointer<CFMessagePortContext>)>();

  void CFMessagePortInvalidate(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortInvalidate(
      ms,
    );
  }

  late final _CFMessagePortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMessagePortRef)>>(
          'CFMessagePortInvalidate');
  late final _CFMessagePortInvalidate =
      _CFMessagePortInvalidatePtr.asFunction<void Function(CFMessagePortRef)>();

  int CFMessagePortIsValid(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsValid(
      ms,
    );
  }

  late final _CFMessagePortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsValid');
  late final _CFMessagePortIsValid =
      _CFMessagePortIsValidPtr.asFunction<int Function(CFMessagePortRef)>();

  CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetInvalidationCallBack(
      ms,
    );
  }

  late final _CFMessagePortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortInvalidationCallBack Function(
              CFMessagePortRef)>>('CFMessagePortGetInvalidationCallBack');
  late final _CFMessagePortGetInvalidationCallBack =
      _CFMessagePortGetInvalidationCallBackPtr.asFunction<
          CFMessagePortInvalidationCallBack Function(CFMessagePortRef)>();

  void CFMessagePortSetInvalidationCallBack(
    CFMessagePortRef ms,
    CFMessagePortInvalidationCallBack callout,
  ) {
    return _CFMessagePortSetInvalidationCallBack(
      ms,
      callout,
    );
  }

  late final _CFMessagePortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMessagePortRef, CFMessagePortInvalidationCallBack)>>(
      'CFMessagePortSetInvalidationCallBack');
  late final _CFMessagePortSetInvalidationCallBack =
      _CFMessagePortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMessagePortRef, CFMessagePortInvalidationCallBack)>();

  int CFMessagePortSendRequest(
    CFMessagePortRef remote,
    int msgid,
    CFDataRef data,
    double sendTimeout,
    double rcvTimeout,
    CFStringRef replyMode,
    ffi.Pointer<CFDataRef> returnData,
  ) {
    return _CFMessagePortSendRequest(
      remote,
      msgid,
      data,
      sendTimeout,
      rcvTimeout,
      replyMode,
      returnData,
    );
  }

  late final _CFMessagePortSendRequestPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFMessagePortRef,
              SInt32,
              CFDataRef,
              CFTimeInterval,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFDataRef>)>>('CFMessagePortSendRequest');
  late final _CFMessagePortSendRequest =
      _CFMessagePortSendRequestPtr.asFunction<
          int Function(CFMessagePortRef, int, CFDataRef, double, double,
              CFStringRef, ffi.Pointer<CFDataRef>)>();

  CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMessagePortRef local,
    int order,
  ) {
    return _CFMessagePortCreateRunLoopSource(
      allocator,
      local,
      order,
    );
  }

  late final _CFMessagePortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef,
              CFIndex)>>('CFMessagePortCreateRunLoopSource');
  late final _CFMessagePortCreateRunLoopSource =
      _CFMessagePortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef, int)>();

  void CFMessagePortSetDispatchQueue(
    CFMessagePortRef ms,
    dispatch_queue_t queue,
  ) {
    return _CFMessagePortSetDispatchQueue(
      ms,
      queue,
    );
  }

  late final _CFMessagePortSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              dispatch_queue_t)>>('CFMessagePortSetDispatchQueue');
  late final _CFMessagePortSetDispatchQueue = _CFMessagePortSetDispatchQueuePtr
      .asFunction<void Function(CFMessagePortRef, dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegistrationKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegistrationKey');

  CFStringRef get kCFPlugInDynamicRegistrationKey =>
      _kCFPlugInDynamicRegistrationKey.value;

  set kCFPlugInDynamicRegistrationKey(CFStringRef value) =>
      _kCFPlugInDynamicRegistrationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegisterFunctionKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegisterFunctionKey');

  CFStringRef get kCFPlugInDynamicRegisterFunctionKey =>
      _kCFPlugInDynamicRegisterFunctionKey.value;

  set kCFPlugInDynamicRegisterFunctionKey(CFStringRef value) =>
      _kCFPlugInDynamicRegisterFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInUnloadFunctionKey =
      _lookup<CFStringRef>('kCFPlugInUnloadFunctionKey');

  CFStringRef get kCFPlugInUnloadFunctionKey =>
      _kCFPlugInUnloadFunctionKey.value;

  set kCFPlugInUnloadFunctionKey(CFStringRef value) =>
      _kCFPlugInUnloadFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInFactoriesKey =
      _lookup<CFStringRef>('kCFPlugInFactoriesKey');

  CFStringRef get kCFPlugInFactoriesKey => _kCFPlugInFactoriesKey.value;

  set kCFPlugInFactoriesKey(CFStringRef value) =>
      _kCFPlugInFactoriesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInTypesKey =
      _lookup<CFStringRef>('kCFPlugInTypesKey');

  CFStringRef get kCFPlugInTypesKey => _kCFPlugInTypesKey.value;

  set kCFPlugInTypesKey(CFStringRef value) => _kCFPlugInTypesKey.value = value;

  int CFPlugInGetTypeID() {
    return _CFPlugInGetTypeID();
  }

  late final _CFPlugInGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFPlugInGetTypeID');
  late final _CFPlugInGetTypeID =
      _CFPlugInGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInRef CFPlugInCreate(
    CFAllocatorRef allocator,
    CFURLRef plugInURL,
  ) {
    return _CFPlugInCreate(
      allocator,
      plugInURL,
    );
  }

  late final _CFPlugInCreatePtr = _lookup<
          ffi.NativeFunction<CFPlugInRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFPlugInCreate');
  late final _CFPlugInCreate = _CFPlugInCreatePtr.asFunction<
      CFPlugInRef Function(CFAllocatorRef, CFURLRef)>();

  CFBundleRef CFPlugInGetBundle(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInGetBundle(
      plugIn,
    );
  }

  late final _CFPlugInGetBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFPlugInRef)>>(
          'CFPlugInGetBundle');
  late final _CFPlugInGetBundle =
      _CFPlugInGetBundlePtr.asFunction<CFBundleRef Function(CFPlugInRef)>();

  void CFPlugInSetLoadOnDemand(
    CFPlugInRef plugIn,
    int flag,
  ) {
    return _CFPlugInSetLoadOnDemand(
      plugIn,
      flag,
    );
  }

  late final _CFPlugInSetLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFPlugInRef, Boolean)>>(
          'CFPlugInSetLoadOnDemand');
  late final _CFPlugInSetLoadOnDemand =
      _CFPlugInSetLoadOnDemandPtr.asFunction<void Function(CFPlugInRef, int)>();

  int CFPlugInIsLoadOnDemand(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInIsLoadOnDemand(
      plugIn,
    );
  }

  late final _CFPlugInIsLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPlugInRef)>>(
          'CFPlugInIsLoadOnDemand');
  late final _CFPlugInIsLoadOnDemand =
      _CFPlugInIsLoadOnDemandPtr.asFunction<int Function(CFPlugInRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInType(
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInFindFactoriesForPlugInType(
      typeUUID,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypePtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef)>>(
          'CFPlugInFindFactoriesForPlugInType');
  late final _CFPlugInFindFactoriesForPlugInType =
      _CFPlugInFindFactoriesForPlugInTypePtr.asFunction<
          CFArrayRef Function(CFUUIDRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(
    CFUUIDRef typeUUID,
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInFindFactoriesForPlugInTypeInPlugIn(
      typeUUID,
      plugIn,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef, CFPlugInRef)>>(
          'CFPlugInFindFactoriesForPlugInTypeInPlugIn');
  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn =
      _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr.asFunction<
          CFArrayRef Function(CFUUIDRef, CFPlugInRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceCreate(
    CFAllocatorRef allocator,
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInInstanceCreate(
      allocator,
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInInstanceCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFUUIDRef, CFUUIDRef)>>('CFPlugInInstanceCreate');
  late final _CFPlugInInstanceCreate = _CFPlugInInstanceCreatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef, CFUUIDRef)>();

  int CFPlugInRegisterFactoryFunction(
    CFUUIDRef factoryUUID,
    CFPlugInFactoryFunction func,
  ) {
    return _CFPlugInRegisterFactoryFunction(
      factoryUUID,
      func,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef,
              CFPlugInFactoryFunction)>>('CFPlugInRegisterFactoryFunction');
  late final _CFPlugInRegisterFactoryFunction =
      _CFPlugInRegisterFactoryFunctionPtr.asFunction<
          int Function(CFUUIDRef, CFPlugInFactoryFunction)>();

  int CFPlugInRegisterFactoryFunctionByName(
    CFUUIDRef factoryUUID,
    CFPlugInRef plugIn,
    CFStringRef functionName,
  ) {
    return _CFPlugInRegisterFactoryFunctionByName(
      factoryUUID,
      plugIn,
      functionName,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionByNamePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef, CFPlugInRef,
              CFStringRef)>>('CFPlugInRegisterFactoryFunctionByName');
  late final _CFPlugInRegisterFactoryFunctionByName =
      _CFPlugInRegisterFactoryFunctionByNamePtr.asFunction<
          int Function(CFUUIDRef, CFPlugInRef, CFStringRef)>();

  int CFPlugInUnregisterFactory(
    CFUUIDRef factoryUUID,
  ) {
    return _CFPlugInUnregisterFactory(
      factoryUUID,
    );
  }

  late final _CFPlugInUnregisterFactoryPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef)>>(
          'CFPlugInUnregisterFactory');
  late final _CFPlugInUnregisterFactory =
      _CFPlugInUnregisterFactoryPtr.asFunction<int Function(CFUUIDRef)>();

  int CFPlugInRegisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInRegisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInRegisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInRegisterPlugInType');
  late final _CFPlugInRegisterPlugInType = _CFPlugInRegisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  int CFPlugInUnregisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInUnregisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInUnregisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInUnregisterPlugInType');
  late final _CFPlugInUnregisterPlugInType = _CFPlugInUnregisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  void CFPlugInAddInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInAddInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInAddInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInAddInstanceForFactory');
  late final _CFPlugInAddInstanceForFactory =
      _CFPlugInAddInstanceForFactoryPtr.asFunction<void Function(CFUUIDRef)>();

  void CFPlugInRemoveInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInRemoveInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInRemoveInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInRemoveInstanceForFactory');
  late final _CFPlugInRemoveInstanceForFactory =
      _CFPlugInRemoveInstanceForFactoryPtr.asFunction<
          void Function(CFUUIDRef)>();

  int CFPlugInInstanceGetInterfaceFunctionTable(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFPlugInInstanceGetInterfaceFunctionTable(
      instance,
      interfaceName,
      ftbl,
    );
  }

  late final _CFPlugInInstanceGetInterfaceFunctionTablePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFPlugInInstanceRef, CFStringRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFPlugInInstanceGetInterfaceFunctionTable');
  late final _CFPlugInInstanceGetInterfaceFunctionTable =
      _CFPlugInInstanceGetInterfaceFunctionTablePtr.asFunction<
          int Function(CFPlugInInstanceRef, CFStringRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFStringRef CFPlugInInstanceGetFactoryName(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetFactoryName(
      instance,
    );
  }

  late final _CFPlugInInstanceGetFactoryNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFPlugInInstanceRef)>>(
          'CFPlugInInstanceGetFactoryName');
  late final _CFPlugInInstanceGetFactoryName =
      _CFPlugInInstanceGetFactoryNamePtr.asFunction<
          CFStringRef Function(CFPlugInInstanceRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceGetInstanceData(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetInstanceData(
      instance,
    );
  }

  late final _CFPlugInInstanceGetInstanceDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFPlugInInstanceRef)>>('CFPlugInInstanceGetInstanceData');
  late final _CFPlugInInstanceGetInstanceData =
      _CFPlugInInstanceGetInstanceDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>();

  int CFPlugInInstanceGetTypeID() {
    return _CFPlugInInstanceGetTypeID();
  }

  late final _CFPlugInInstanceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFPlugInInstanceGetTypeID');
  late final _CFPlugInInstanceGetTypeID =
      _CFPlugInInstanceGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(
    CFAllocatorRef allocator,
    int instanceDataSize,
    CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction,
    CFStringRef factoryName,
    CFPlugInInstanceGetInterfaceFunction getInterfaceFunction,
  ) {
    return _CFPlugInInstanceCreateWithInstanceDataSize(
      allocator,
      instanceDataSize,
      deallocateInstanceFunction,
      factoryName,
      getInterfaceFunction,
    );
  }

  late final _CFPlugInInstanceCreateWithInstanceDataSizePtr = _lookup<
          ffi.NativeFunction<
              CFPlugInInstanceRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  CFPlugInInstanceDeallocateInstanceDataFunction,
                  CFStringRef,
                  CFPlugInInstanceGetInterfaceFunction)>>(
      'CFPlugInInstanceCreateWithInstanceDataSize');
  late final _CFPlugInInstanceCreateWithInstanceDataSize =
      _CFPlugInInstanceCreateWithInstanceDataSizePtr.asFunction<
          CFPlugInInstanceRef Function(
              CFAllocatorRef,
              int,
              CFPlugInInstanceDeallocateInstanceDataFunction,
              CFStringRef,
              CFPlugInInstanceGetInterfaceFunction)>();

  int CFMachPortGetTypeID() {
    return _CFMachPortGetTypeID();
  }

  late final _CFMachPortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFMachPortGetTypeID');
  late final _CFMachPortGetTypeID =
      _CFMachPortGetTypeIDPtr.asFunction<int Function()>();

  CFMachPortRef CFMachPortCreate(
    CFAllocatorRef allocator,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreate(
      allocator,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreatePtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreate');
  late final _CFMachPortCreate = _CFMachPortCreatePtr.asFunction<
      CFMachPortRef Function(CFAllocatorRef, CFMachPortCallBack,
          ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  CFMachPortRef CFMachPortCreateWithPort(
    CFAllocatorRef allocator,
    int portNum,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreateWithPort(
      allocator,
      portNum,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreateWithPortPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              mach_port_t,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreateWithPort');
  late final _CFMachPortCreateWithPort =
      _CFMachPortCreateWithPortPtr.asFunction<
          CFMachPortRef Function(CFAllocatorRef, int, CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  int CFMachPortGetPort(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetPort(
      port,
    );
  }

  late final _CFMachPortGetPortPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(CFMachPortRef)>>(
          'CFMachPortGetPort');
  late final _CFMachPortGetPort =
      _CFMachPortGetPortPtr.asFunction<int Function(CFMachPortRef)>();

  void CFMachPortGetContext(
    CFMachPortRef port,
    ffi.Pointer<CFMachPortContext> context,
  ) {
    return _CFMachPortGetContext(
      port,
      context,
    );
  }

  late final _CFMachPortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMachPortRef,
              ffi.Pointer<CFMachPortContext>)>>('CFMachPortGetContext');
  late final _CFMachPortGetContext = _CFMachPortGetContextPtr.asFunction<
      void Function(CFMachPortRef, ffi.Pointer<CFMachPortContext>)>();

  void CFMachPortInvalidate(
    CFMachPortRef port,
  ) {
    return _CFMachPortInvalidate(
      port,
    );
  }

  late final _CFMachPortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMachPortRef)>>(
          'CFMachPortInvalidate');
  late final _CFMachPortInvalidate =
      _CFMachPortInvalidatePtr.asFunction<void Function(CFMachPortRef)>();

  int CFMachPortIsValid(
    CFMachPortRef port,
  ) {
    return _CFMachPortIsValid(
      port,
    );
  }

  late final _CFMachPortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMachPortRef)>>(
          'CFMachPortIsValid');
  late final _CFMachPortIsValid =
      _CFMachPortIsValidPtr.asFunction<int Function(CFMachPortRef)>();

  CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetInvalidationCallBack(
      port,
    );
  }

  late final _CFMachPortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortInvalidationCallBack Function(
              CFMachPortRef)>>('CFMachPortGetInvalidationCallBack');
  late final _CFMachPortGetInvalidationCallBack =
      _CFMachPortGetInvalidationCallBackPtr.asFunction<
          CFMachPortInvalidationCallBack Function(CFMachPortRef)>();

  void CFMachPortSetInvalidationCallBack(
    CFMachPortRef port,
    CFMachPortInvalidationCallBack callout,
  ) {
    return _CFMachPortSetInvalidationCallBack(
      port,
      callout,
    );
  }

  late final _CFMachPortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMachPortRef, CFMachPortInvalidationCallBack)>>(
      'CFMachPortSetInvalidationCallBack');
  late final _CFMachPortSetInvalidationCallBack =
      _CFMachPortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMachPortRef, CFMachPortInvalidationCallBack)>();

  CFRunLoopSourceRef CFMachPortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMachPortRef port,
    int order,
  ) {
    return _CFMachPortCreateRunLoopSource(
      allocator,
      port,
      order,
    );
  }

  late final _CFMachPortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef,
              CFIndex)>>('CFMachPortCreateRunLoopSource');
  late final _CFMachPortCreateRunLoopSource =
      _CFMachPortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef, int)>();

  int CFAttributedStringGetTypeID() {
    return _CFAttributedStringGetTypeID();
  }

  late final _CFAttributedStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFAttributedStringGetTypeID');
  late final _CFAttributedStringGetTypeID =
      _CFAttributedStringGetTypeIDPtr.asFunction<int Function()>();

  CFAttributedStringRef CFAttributedStringCreate(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFDictionaryRef attributes,
  ) {
    return _CFAttributedStringCreate(
      alloc,
      str,
      attributes,
    );
  }

  late final _CFAttributedStringCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFAttributedStringCreate');
  late final _CFAttributedStringCreate =
      _CFAttributedStringCreatePtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFAttributedStringRef CFAttributedStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
    CFRange range,
  ) {
    return _CFAttributedStringCreateWithSubstring(
      alloc,
      aStr,
      range,
    );
  }

  late final _CFAttributedStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFAttributedStringRef,
              CFRange)>>('CFAttributedStringCreateWithSubstring');
  late final _CFAttributedStringCreateWithSubstring =
      _CFAttributedStringCreateWithSubstringPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef, CFRange)>();

  CFAttributedStringRef CFAttributedStringCreateCopy(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateCopy(
      alloc,
      aStr,
    );
  }

  late final _CFAttributedStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef,
              CFAttributedStringRef)>>('CFAttributedStringCreateCopy');
  late final _CFAttributedStringCreateCopy =
      _CFAttributedStringCreateCopyPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef)>();

  CFStringRef CFAttributedStringGetString(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetString(
      aStr,
    );
  }

  late final _CFAttributedStringGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetString');
  late final _CFAttributedStringGetString = _CFAttributedStringGetStringPtr
      .asFunction<CFStringRef Function(CFAttributedStringRef)>();

  int CFAttributedStringGetLength(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetLength(
      aStr,
    );
  }

  late final _CFAttributedStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetLength');
  late final _CFAttributedStringGetLength = _CFAttributedStringGetLengthPtr
      .asFunction<int Function(CFAttributedStringRef)>();

  CFDictionaryRef CFAttributedStringGetAttributes(
    CFAttributedStringRef aStr,
    int loc,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttributes(
      aStr,
      loc,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttributes');
  late final _CFAttributedStringGetAttributes =
      _CFAttributedStringGetAttributesPtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttribute(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttribute(
      aStr,
      loc,
      attrName,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAttributedStringRef, CFIndex, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttribute');
  late final _CFAttributedStringGetAttribute =
      _CFAttributedStringGetAttributePtr.asFunction<
          CFTypeRef Function(
              CFAttributedStringRef, int, CFStringRef, ffi.Pointer<CFRange>)>();

  CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributesAndLongestEffectiveRange(
      aStr,
      loc,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
                      CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributesAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange =
      _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, CFRange, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributeAndLongestEffectiveRange(
      aStr,
      loc,
      attrName,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFTypeRef Function(CFAttributedStringRef, CFIndex,
                      CFStringRef, CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributeAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange =
      _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr.asFunction<
          CFTypeRef Function(CFAttributedStringRef, int, CFStringRef, CFRange,
              ffi.Pointer<CFRange>)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateMutableCopy(
      alloc,
      maxLength,
      aStr,
    );
  }

  late final _CFAttributedStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, CFIndex,
              CFAttributedStringRef)>>('CFAttributedStringCreateMutableCopy');
  late final _CFAttributedStringCreateMutableCopy =
      _CFAttributedStringCreateMutableCopyPtr.asFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, int, CFAttributedStringRef)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFAttributedStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFAttributedStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFAttributedStringCreateMutable');
  late final _CFAttributedStringCreateMutable =
      _CFAttributedStringCreateMutablePtr.asFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, int)>();

  void CFAttributedStringReplaceString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFAttributedStringReplaceString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringReplaceString');
  late final _CFAttributedStringReplaceString =
      _CFAttributedStringReplaceStringPtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  CFMutableStringRef CFAttributedStringGetMutableString(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetMutableString(
      aStr,
    );
  }

  late final _CFAttributedStringGetMutableStringPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringGetMutableString');
  late final _CFAttributedStringGetMutableString =
      _CFAttributedStringGetMutableStringPtr.asFunction<
          CFMutableStringRef Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringSetAttributes(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFDictionaryRef replacement,
    int clearOtherAttributes,
  ) {
    return _CFAttributedStringSetAttributes(
      aStr,
      range,
      replacement,
      clearOtherAttributes,
    );
  }

  late final _CFAttributedStringSetAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFDictionaryRef, Boolean)>>('CFAttributedStringSetAttributes');
  late final _CFAttributedStringSetAttributes =
      _CFAttributedStringSetAttributesPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFDictionaryRef, int)>();

  void CFAttributedStringSetAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
    CFTypeRef value,
  ) {
    return _CFAttributedStringSetAttribute(
      aStr,
      range,
      attrName,
      value,
    );
  }

  late final _CFAttributedStringSetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange, CFStringRef,
              CFTypeRef)>>('CFAttributedStringSetAttribute');
  late final _CFAttributedStringSetAttribute =
      _CFAttributedStringSetAttributePtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFStringRef, CFTypeRef)>();

  void CFAttributedStringRemoveAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
  ) {
    return _CFAttributedStringRemoveAttribute(
      aStr,
      range,
      attrName,
    );
  }

  late final _CFAttributedStringRemoveAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringRemoveAttribute');
  late final _CFAttributedStringRemoveAttribute =
      _CFAttributedStringRemoveAttributePtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  void CFAttributedStringReplaceAttributedString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFAttributedStringRef replacement,
  ) {
    return _CFAttributedStringReplaceAttributedString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceAttributedStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFMutableAttributedStringRef, CFRange,
                  CFAttributedStringRef)>>(
      'CFAttributedStringReplaceAttributedString');
  late final _CFAttributedStringReplaceAttributedString =
      _CFAttributedStringReplaceAttributedStringPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFAttributedStringRef)>();

  void CFAttributedStringBeginEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringBeginEditing(
      aStr,
    );
  }

  late final _CFAttributedStringBeginEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringBeginEditing');
  late final _CFAttributedStringBeginEditing =
      _CFAttributedStringBeginEditingPtr.asFunction<
          void Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringEndEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringEndEditing(
      aStr,
    );
  }

  late final _CFAttributedStringEndEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringEndEditing');
  late final _CFAttributedStringEndEditing = _CFAttributedStringEndEditingPtr
      .asFunction<void Function(CFMutableAttributedStringRef)>();

  int CFURLEnumeratorGetTypeID() {
    return _CFURLEnumeratorGetTypeID();
  }

  late final _CFURLEnumeratorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFURLEnumeratorGetTypeID');
  late final _CFURLEnumeratorGetTypeID =
      _CFURLEnumeratorGetTypeIDPtr.asFunction<int Function()>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(
    CFAllocatorRef alloc,
    CFURLRef directoryURL,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForDirectoryURL(
      alloc,
      directoryURL,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForDirectoryURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFURLRef, ffi.Int32,
              CFArrayRef)>>('CFURLEnumeratorCreateForDirectoryURL');
  late final _CFURLEnumeratorCreateForDirectoryURL =
      _CFURLEnumeratorCreateForDirectoryURLPtr.asFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef, CFURLRef, int, CFArrayRef)>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes(
    CFAllocatorRef alloc,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForMountedVolumes(
      alloc,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForMountedVolumesPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, ffi.Int32,
              CFArrayRef)>>('CFURLEnumeratorCreateForMountedVolumes');
  late final _CFURLEnumeratorCreateForMountedVolumes =
      _CFURLEnumeratorCreateForMountedVolumesPtr.asFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFURLEnumeratorGetNextURL(
    CFURLEnumeratorRef enumerator,
    ffi.Pointer<CFURLRef> url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLEnumeratorGetNextURL(
      enumerator,
      url,
      error,
    );
  }

  late final _CFURLEnumeratorGetNextURLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>>('CFURLEnumeratorGetNextURL');
  late final _CFURLEnumeratorGetNextURL =
      _CFURLEnumeratorGetNextURLPtr.asFunction<
          int Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>();

  void CFURLEnumeratorSkipDescendents(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorSkipDescendents(
      enumerator,
    );
  }

  late final _CFURLEnumeratorSkipDescendentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorSkipDescendents');
  late final _CFURLEnumeratorSkipDescendents =
      _CFURLEnumeratorSkipDescendentsPtr.asFunction<
          void Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetDescendentLevel(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetDescendentLevel(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetDescendentLevelPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetDescendentLevel');
  late final _CFURLEnumeratorGetDescendentLevel =
      _CFURLEnumeratorGetDescendentLevelPtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetSourceDidChange(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetSourceDidChange(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetSourceDidChangePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetSourceDidChange');
  late final _CFURLEnumeratorGetSourceDidChange =
      _CFURLEnumeratorGetSourceDidChangePtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFFileSecurityGetTypeID() {
    return _CFFileSecurityGetTypeID();
  }

  late final _CFFileSecurityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileSecurityGetTypeID');
  late final _CFFileSecurityGetTypeID =
      _CFFileSecurityGetTypeIDPtr.asFunction<int Function()>();

  CFFileSecurityRef CFFileSecurityCreate(
    CFAllocatorRef allocator,
  ) {
    return _CFFileSecurityCreate(
      allocator,
    );
  }

  late final _CFFileSecurityCreatePtr =
      _lookup<ffi.NativeFunction<CFFileSecurityRef Function(CFAllocatorRef)>>(
          'CFFileSecurityCreate');
  late final _CFFileSecurityCreate = _CFFileSecurityCreatePtr.asFunction<
      CFFileSecurityRef Function(CFAllocatorRef)>();

  CFFileSecurityRef CFFileSecurityCreateCopy(
    CFAllocatorRef allocator,
    CFFileSecurityRef fileSec,
  ) {
    return _CFFileSecurityCreateCopy(
      allocator,
      fileSec,
    );
  }

  late final _CFFileSecurityCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFFileSecurityRef Function(
              CFAllocatorRef, CFFileSecurityRef)>>('CFFileSecurityCreateCopy');
  late final _CFFileSecurityCreateCopy =
      _CFFileSecurityCreateCopyPtr.asFunction<
          CFFileSecurityRef Function(CFAllocatorRef, CFFileSecurityRef)>();

  int CFFileSecurityCopyOwnerUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> ownerUUID,
  ) {
    return _CFFileSecurityCopyOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecurityCopyOwnerUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyOwnerUUID');
  late final _CFFileSecurityCopyOwnerUUID = _CFFileSecurityCopyOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetOwnerUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef ownerUUID,
  ) {
    return _CFFileSecuritySetOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecuritySetOwnerUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetOwnerUUID');
  late final _CFFileSecuritySetOwnerUUID = _CFFileSecuritySetOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyGroupUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> groupUUID,
  ) {
    return _CFFileSecurityCopyGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecurityCopyGroupUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyGroupUUID');
  late final _CFFileSecurityCopyGroupUUID = _CFFileSecurityCopyGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetGroupUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef groupUUID,
  ) {
    return _CFFileSecuritySetGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecuritySetGroupUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetGroupUUID');
  late final _CFFileSecuritySetGroupUUID = _CFFileSecuritySetGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyAccessControlList(
    CFFileSecurityRef fileSec,
    ffi.Pointer<acl_t> accessControlList,
  ) {
    return _CFFileSecurityCopyAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecurityCopyAccessControlListPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<acl_t>)>>('CFFileSecurityCopyAccessControlList');
  late final _CFFileSecurityCopyAccessControlList =
      _CFFileSecurityCopyAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, ffi.Pointer<acl_t>)>();

  int CFFileSecuritySetAccessControlList(
    CFFileSecurityRef fileSec,
    acl_t accessControlList,
  ) {
    return _CFFileSecuritySetAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecuritySetAccessControlListPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, acl_t)>>(
          'CFFileSecuritySetAccessControlList');
  late final _CFFileSecuritySetAccessControlList =
      _CFFileSecuritySetAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, acl_t)>();

  int CFFileSecurityGetOwner(
    CFFileSecurityRef fileSec,
    ffi.Pointer<uid_t> owner,
  ) {
    return _CFFileSecurityGetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecurityGetOwnerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<uid_t>)>>('CFFileSecurityGetOwner');
  late final _CFFileSecurityGetOwner = _CFFileSecurityGetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<uid_t>)>();

  int CFFileSecuritySetOwner(
    CFFileSecurityRef fileSec,
    int owner,
  ) {
    return _CFFileSecuritySetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecuritySetOwnerPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, uid_t)>>(
          'CFFileSecuritySetOwner');
  late final _CFFileSecuritySetOwner = _CFFileSecuritySetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetGroup(
    CFFileSecurityRef fileSec,
    ffi.Pointer<gid_t> group,
  ) {
    return _CFFileSecurityGetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecurityGetGroupPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<gid_t>)>>('CFFileSecurityGetGroup');
  late final _CFFileSecurityGetGroup = _CFFileSecurityGetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<gid_t>)>();

  int CFFileSecuritySetGroup(
    CFFileSecurityRef fileSec,
    int group,
  ) {
    return _CFFileSecuritySetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecuritySetGroupPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, gid_t)>>(
          'CFFileSecuritySetGroup');
  late final _CFFileSecuritySetGroup = _CFFileSecuritySetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetMode(
    CFFileSecurityRef fileSec,
    ffi.Pointer<mode_t> mode,
  ) {
    return _CFFileSecurityGetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecurityGetModePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<mode_t>)>>('CFFileSecurityGetMode');
  late final _CFFileSecurityGetMode = _CFFileSecurityGetModePtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<mode_t>)>();

  int CFFileSecuritySetMode(
    CFFileSecurityRef fileSec,
    int mode,
  ) {
    return _CFFileSecuritySetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecuritySetModePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, mode_t)>>(
          'CFFileSecuritySetMode');
  late final _CFFileSecuritySetMode = _CFFileSecuritySetModePtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityClearProperties(
    CFFileSecurityRef fileSec,
    int clearPropertyMask,
  ) {
    return _CFFileSecurityClearProperties(
      fileSec,
      clearPropertyMask,
    );
  }

  late final _CFFileSecurityClearPropertiesPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, ffi.Int32)>>(
      'CFFileSecurityClearProperties');
  late final _CFFileSecurityClearProperties = _CFFileSecurityClearPropertiesPtr
      .asFunction<int Function(CFFileSecurityRef, int)>();

  CFStringRef CFStringTokenizerCopyBestStringLanguage(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguagePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage =
      _CFStringTokenizerCopyBestStringLanguagePtr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID() {
    return _CFStringTokenizerGetTypeID();
  }

  late final _CFStringTokenizerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID =
      _CFStringTokenizerGetTypeIDPtr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate(
    CFAllocatorRef alloc,
    CFStringRef string,
    CFRange range,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFStringTokenizerCreate(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(CFAllocatorRef, CFStringRef, CFRange,
              CFOptionFlags, CFLocaleRef)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate = _CFStringTokenizerCreatePtr.asFunction<
      CFStringTokenizerRef Function(
          CFAllocatorRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  void CFStringTokenizerSetString(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString = _CFStringTokenizerSetStringPtr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  int CFStringTokenizerGoToTokenAtIndex(
    CFStringTokenizerRef tokenizer,
    int index,
  ) {
    return _CFStringTokenizerGoToTokenAtIndex(
      tokenizer,
      index,
    );
  }

  late final _CFStringTokenizerGoToTokenAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringTokenizerRef,
              CFIndex)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex =
      _CFStringTokenizerGoToTokenAtIndexPtr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerAdvanceToNextToken(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerAdvanceToNextToken(
      tokenizer,
    );
  }

  late final _CFStringTokenizerAdvanceToNextTokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken =
      _CFStringTokenizerAdvanceToNextTokenPtr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRangePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange =
      _CFStringTokenizerGetCurrentTokenRangePtr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              CFOptionFlags)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute =
      _CFStringTokenizerCopyCurrentTokenAttributePtr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    CFMutableArrayRef derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokensPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, CFIndex,
              CFMutableArrayRef)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens =
      _CFStringTokenizerGetCurrentSubTokensPtr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              CFMutableArrayRef)>();

  int CFFileDescriptorGetTypeID() {
    return _CFFileDescriptorGetTypeID();
  }

  late final _CFFileDescriptorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileDescriptorGetTypeID');
  late final _CFFileDescriptorGetTypeID =
      _CFFileDescriptorGetTypeIDPtr.asFunction<int Function()>();

  CFFileDescriptorRef CFFileDescriptorCreate(
    CFAllocatorRef allocator,
    int fd,
    int closeOnInvalidate,
    CFFileDescriptorCallBack callout,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorCreate(
      allocator,
      fd,
      closeOnInvalidate,
      callout,
      context,
    );
  }

  late final _CFFileDescriptorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorRef Function(
              CFAllocatorRef,
              CFFileDescriptorNativeDescriptor,
              Boolean,
              CFFileDescriptorCallBack,
              ffi.Pointer<CFFileDescriptorContext>)>>('CFFileDescriptorCreate');
  late final _CFFileDescriptorCreate = _CFFileDescriptorCreatePtr.asFunction<
      CFFileDescriptorRef Function(CFAllocatorRef, int, int,
          CFFileDescriptorCallBack, ffi.Pointer<CFFileDescriptorContext>)>();

  int CFFileDescriptorGetNativeDescriptor(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorGetNativeDescriptor(
      f,
    );
  }

  late final _CFFileDescriptorGetNativeDescriptorPtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorNativeDescriptor Function(
              CFFileDescriptorRef)>>('CFFileDescriptorGetNativeDescriptor');
  late final _CFFileDescriptorGetNativeDescriptor =
      _CFFileDescriptorGetNativeDescriptorPtr.asFunction<
          int Function(CFFileDescriptorRef)>();

  void CFFileDescriptorGetContext(
    CFFileDescriptorRef f,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorGetContext(
      f,
      context,
    );
  }

  late final _CFFileDescriptorGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>>(
      'CFFileDescriptorGetContext');
  late final _CFFileDescriptorGetContext =
      _CFFileDescriptorGetContextPtr.asFunction<
          void Function(
              CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>();

  void CFFileDescriptorEnableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorEnableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorEnableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorEnableCallBacks');
  late final _CFFileDescriptorEnableCallBacks =
      _CFFileDescriptorEnableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorDisableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorDisableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorDisableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorDisableCallBacks');
  late final _CFFileDescriptorDisableCallBacks =
      _CFFileDescriptorDisableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorInvalidate(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorInvalidate(
      f,
    );
  }

  late final _CFFileDescriptorInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorInvalidate');
  late final _CFFileDescriptorInvalidate = _CFFileDescriptorInvalidatePtr
      .asFunction<void Function(CFFileDescriptorRef)>();

  int CFFileDescriptorIsValid(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorIsValid(
      f,
    );
  }

  late final _CFFileDescriptorIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorIsValid');
  late final _CFFileDescriptorIsValid = _CFFileDescriptorIsValidPtr.asFunction<
      int Function(CFFileDescriptorRef)>();

  CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFFileDescriptorRef f,
    int order,
  ) {
    return _CFFileDescriptorCreateRunLoopSource(
      allocator,
      f,
      order,
    );
  }

  late final _CFFileDescriptorCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFFileDescriptorRef,
              CFIndex)>>('CFFileDescriptorCreateRunLoopSource');
  late final _CFFileDescriptorCreateRunLoopSource =
      _CFFileDescriptorCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef, CFFileDescriptorRef, int)>();

  int CFUserNotificationGetTypeID() {
    return _CFUserNotificationGetTypeID();
  }

  late final _CFUserNotificationGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFUserNotificationGetTypeID');
  late final _CFUserNotificationGetTypeID =
      _CFUserNotificationGetTypeIDPtr.asFunction<int Function()>();

  CFUserNotificationRef CFUserNotificationCreate(
    CFAllocatorRef allocator,
    double timeout,
    int flags,
    ffi.Pointer<SInt32> error,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationCreate(
      allocator,
      timeout,
      flags,
      error,
      dictionary,
    );
  }

  late final _CFUserNotificationCreatePtr = _lookup<
      ffi.NativeFunction<
          CFUserNotificationRef Function(
              CFAllocatorRef,
              CFTimeInterval,
              CFOptionFlags,
              ffi.Pointer<SInt32>,
              CFDictionaryRef)>>('CFUserNotificationCreate');
  late final _CFUserNotificationCreate =
      _CFUserNotificationCreatePtr.asFunction<
          CFUserNotificationRef Function(CFAllocatorRef, double, int,
              ffi.Pointer<SInt32>, CFDictionaryRef)>();

  int CFUserNotificationReceiveResponse(
    CFUserNotificationRef userNotification,
    double timeout,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationReceiveResponse(
      userNotification,
      timeout,
      responseFlags,
    );
  }

  late final _CFUserNotificationReceiveResponsePtr = _lookup<
          ffi.NativeFunction<
              SInt32 Function(CFUserNotificationRef, CFTimeInterval,
                  ffi.Pointer<CFOptionFlags>)>>(
      'CFUserNotificationReceiveResponse');
  late final _CFUserNotificationReceiveResponse =
      _CFUserNotificationReceiveResponsePtr.asFunction<
          int Function(
              CFUserNotificationRef, double, ffi.Pointer<CFOptionFlags>)>();

  CFStringRef CFUserNotificationGetResponseValue(
    CFUserNotificationRef userNotification,
    CFStringRef key,
    int idx,
  ) {
    return _CFUserNotificationGetResponseValue(
      userNotification,
      key,
      idx,
    );
  }

  late final _CFUserNotificationGetResponseValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef,
              CFIndex)>>('CFUserNotificationGetResponseValue');
  late final _CFUserNotificationGetResponseValue =
      _CFUserNotificationGetResponseValuePtr.asFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef, int)>();

  CFDictionaryRef CFUserNotificationGetResponseDictionary(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationGetResponseDictionary(
      userNotification,
    );
  }

  late final _CFUserNotificationGetResponseDictionaryPtr = _lookup<
          ffi.NativeFunction<CFDictionaryRef Function(CFUserNotificationRef)>>(
      'CFUserNotificationGetResponseDictionary');
  late final _CFUserNotificationGetResponseDictionary =
      _CFUserNotificationGetResponseDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFUserNotificationRef)>();

  int CFUserNotificationUpdate(
    CFUserNotificationRef userNotification,
    double timeout,
    int flags,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationUpdate(
      userNotification,
      timeout,
      flags,
      dictionary,
    );
  }

  late final _CFUserNotificationUpdatePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFUserNotificationRef, CFTimeInterval, CFOptionFlags,
              CFDictionaryRef)>>('CFUserNotificationUpdate');
  late final _CFUserNotificationUpdate =
      _CFUserNotificationUpdatePtr.asFunction<
          int Function(CFUserNotificationRef, double, int, CFDictionaryRef)>();

  int CFUserNotificationCancel(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationCancel(
      userNotification,
    );
  }

  late final _CFUserNotificationCancelPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFUserNotificationRef)>>(
          'CFUserNotificationCancel');
  late final _CFUserNotificationCancel = _CFUserNotificationCancelPtr
      .asFunction<int Function(CFUserNotificationRef)>();

  CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFUserNotificationRef userNotification,
    CFUserNotificationCallBack callout,
    int order,
  ) {
    return _CFUserNotificationCreateRunLoopSource(
      allocator,
      userNotification,
      callout,
      order,
    );
  }

  late final _CFUserNotificationCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef,
              CFUserNotificationRef,
              CFUserNotificationCallBack,
              CFIndex)>>('CFUserNotificationCreateRunLoopSource');
  late final _CFUserNotificationCreateRunLoopSource =
      _CFUserNotificationCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFUserNotificationRef,
              CFUserNotificationCallBack, int)>();

  int CFUserNotificationDisplayNotice(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
  ) {
    return _CFUserNotificationDisplayNotice(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
    );
  }

  late final _CFUserNotificationDisplayNoticePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef)>>('CFUserNotificationDisplayNotice');
  late final _CFUserNotificationDisplayNotice =
      _CFUserNotificationDisplayNoticePtr.asFunction<
          int Function(double, int, CFURLRef, CFURLRef, CFURLRef, CFStringRef,
              CFStringRef, CFStringRef)>();

  int CFUserNotificationDisplayAlert(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
    CFStringRef alternateButtonTitle,
    CFStringRef otherButtonTitle,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationDisplayAlert(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
      alternateButtonTitle,
      otherButtonTitle,
      responseFlags,
    );
  }

  late final _CFUserNotificationDisplayAlertPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>>('CFUserNotificationDisplayAlert');
  late final _CFUserNotificationDisplayAlert =
      _CFUserNotificationDisplayAlertPtr.asFunction<
          int Function(
              double,
              int,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>();

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationIconURLKey =
      _lookup<CFStringRef>('kCFUserNotificationIconURLKey');

  CFStringRef get kCFUserNotificationIconURLKey =>
      _kCFUserNotificationIconURLKey.value;

  set kCFUserNotificationIconURLKey(CFStringRef value) =>
      _kCFUserNotificationIconURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationSoundURLKey =
      _lookup<CFStringRef>('kCFUserNotificationSoundURLKey');

  CFStringRef get kCFUserNotificationSoundURLKey =>
      _kCFUserNotificationSoundURLKey.value;

  set kCFUserNotificationSoundURLKey(CFStringRef value) =>
      _kCFUserNotificationSoundURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationLocalizationURLKey =
      _lookup<CFStringRef>('kCFUserNotificationLocalizationURLKey');

  CFStringRef get kCFUserNotificationLocalizationURLKey =>
      _kCFUserNotificationLocalizationURLKey.value;

  set kCFUserNotificationLocalizationURLKey(CFStringRef value) =>
      _kCFUserNotificationLocalizationURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertHeaderKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertHeaderKey');

  CFStringRef get kCFUserNotificationAlertHeaderKey =>
      _kCFUserNotificationAlertHeaderKey.value;

  set kCFUserNotificationAlertHeaderKey(CFStringRef value) =>
      _kCFUserNotificationAlertHeaderKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertMessageKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertMessageKey');

  CFStringRef get kCFUserNotificationAlertMessageKey =>
      _kCFUserNotificationAlertMessageKey.value;

  set kCFUserNotificationAlertMessageKey(CFStringRef value) =>
      _kCFUserNotificationAlertMessageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationDefaultButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationDefaultButtonTitleKey');

  CFStringRef get kCFUserNotificationDefaultButtonTitleKey =>
      _kCFUserNotificationDefaultButtonTitleKey.value;

  set kCFUserNotificationDefaultButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationDefaultButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationAlternateButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationAlternateButtonTitleKey');

  CFStringRef get kCFUserNotificationAlternateButtonTitleKey =>
      _kCFUserNotificationAlternateButtonTitleKey.value;

  set kCFUserNotificationAlternateButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationAlternateButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationOtherButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationOtherButtonTitleKey');

  CFStringRef get kCFUserNotificationOtherButtonTitleKey =>
      _kCFUserNotificationOtherButtonTitleKey.value;

  set kCFUserNotificationOtherButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationOtherButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationProgressIndicatorValueKey =
      _lookup<CFStringRef>('kCFUserNotificationProgressIndicatorValueKey');

  CFStringRef get kCFUserNotificationProgressIndicatorValueKey =>
      _kCFUserNotificationProgressIndicatorValueKey.value;

  set kCFUserNotificationProgressIndicatorValueKey(CFStringRef value) =>
      _kCFUserNotificationProgressIndicatorValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpTitlesKey');

  CFStringRef get kCFUserNotificationPopUpTitlesKey =>
      _kCFUserNotificationPopUpTitlesKey.value;

  set kCFUserNotificationPopUpTitlesKey(CFStringRef value) =>
      _kCFUserNotificationPopUpTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldTitlesKey');

  CFStringRef get kCFUserNotificationTextFieldTitlesKey =>
      _kCFUserNotificationTextFieldTitlesKey.value;

  set kCFUserNotificationTextFieldTitlesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationCheckBoxTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationCheckBoxTitlesKey');

  CFStringRef get kCFUserNotificationCheckBoxTitlesKey =>
      _kCFUserNotificationCheckBoxTitlesKey.value;

  set kCFUserNotificationCheckBoxTitlesKey(CFStringRef value) =>
      _kCFUserNotificationCheckBoxTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldValuesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldValuesKey');

  CFStringRef get kCFUserNotificationTextFieldValuesKey =>
      _kCFUserNotificationTextFieldValuesKey.value;

  set kCFUserNotificationTextFieldValuesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldValuesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpSelectionKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpSelectionKey');

  CFStringRef get kCFUserNotificationPopUpSelectionKey =>
      _kCFUserNotificationPopUpSelectionKey.value;

  set kCFUserNotificationPopUpSelectionKey(CFStringRef value) =>
      _kCFUserNotificationPopUpSelectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertTopMostKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertTopMostKey');

  CFStringRef get kCFUserNotificationAlertTopMostKey =>
      _kCFUserNotificationAlertTopMostKey.value;

  set kCFUserNotificationAlertTopMostKey(CFStringRef value) =>
      _kCFUserNotificationAlertTopMostKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationKeyboardTypesKey =
      _lookup<CFStringRef>('kCFUserNotificationKeyboardTypesKey');

  CFStringRef get kCFUserNotificationKeyboardTypesKey =>
      _kCFUserNotificationKeyboardTypesKey.value;

  set kCFUserNotificationKeyboardTypesKey(CFStringRef value) =>
      _kCFUserNotificationKeyboardTypesKey.value = value;

  int CFXMLNodeGetTypeID() {
    return _CFXMLNodeGetTypeID();
  }

  late final _CFXMLNodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLNodeGetTypeID');
  late final _CFXMLNodeGetTypeID =
      _CFXMLNodeGetTypeIDPtr.asFunction<int Function()>();

  CFXMLNodeRef CFXMLNodeCreate(
    CFAllocatorRef alloc,
    int xmlType,
    CFStringRef dataString,
    ffi.Pointer<ffi.Void> additionalInfoPtr,
    int version,
  ) {
    return _CFXMLNodeCreate(
      alloc,
      xmlType,
      dataString,
      additionalInfoPtr,
      version,
    );
  }

  late final _CFXMLNodeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(CFAllocatorRef, ffi.Int32, CFStringRef,
              ffi.Pointer<ffi.Void>, CFIndex)>>('CFXMLNodeCreate');
  late final _CFXMLNodeCreate = _CFXMLNodeCreatePtr.asFunction<
      CFXMLNodeRef Function(
          CFAllocatorRef, int, CFStringRef, ffi.Pointer<ffi.Void>, int)>();

  CFXMLNodeRef CFXMLNodeCreateCopy(
    CFAllocatorRef alloc,
    CFXMLNodeRef origNode,
  ) {
    return _CFXMLNodeCreateCopy(
      alloc,
      origNode,
    );
  }

  late final _CFXMLNodeCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLNodeCreateCopy');
  late final _CFXMLNodeCreateCopy = _CFXMLNodeCreateCopyPtr.asFunction<
      CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  int CFXMLNodeGetTypeCode(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetTypeCode(
      node,
    );
  }

  late final _CFXMLNodeGetTypeCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetTypeCode');
  late final _CFXMLNodeGetTypeCode =
      _CFXMLNodeGetTypeCodePtr.asFunction<int Function(CFXMLNodeRef)>();

  CFStringRef CFXMLNodeGetString(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetString(
      node,
    );
  }

  late final _CFXMLNodeGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetString');
  late final _CFXMLNodeGetString =
      _CFXMLNodeGetStringPtr.asFunction<CFStringRef Function(CFXMLNodeRef)>();

  ffi.Pointer<ffi.Void> CFXMLNodeGetInfoPtr(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetInfoPtr(
      node,
    );
  }

  late final _CFXMLNodeGetInfoPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetInfoPtr');
  late final _CFXMLNodeGetInfoPtr = _CFXMLNodeGetInfoPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>();

  int CFXMLNodeGetVersion(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetVersion(
      node,
    );
  }

  late final _CFXMLNodeGetVersionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetVersion');
  late final _CFXMLNodeGetVersion =
      _CFXMLNodeGetVersionPtr.asFunction<int Function(CFXMLNodeRef)>();

  CFXMLTreeRef CFXMLTreeCreateWithNode(
    CFAllocatorRef allocator,
    CFXMLNodeRef node,
  ) {
    return _CFXMLTreeCreateWithNode(
      allocator,
      node,
    );
  }

  late final _CFXMLTreeCreateWithNodePtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLTreeCreateWithNode');
  late final _CFXMLTreeCreateWithNode = _CFXMLTreeCreateWithNodePtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeRef CFXMLTreeGetNode(
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeGetNode(
      xmlTree,
    );
  }

  late final _CFXMLTreeGetNodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeRef Function(CFXMLTreeRef)>>(
          'CFXMLTreeGetNode');
  late final _CFXMLTreeGetNode =
      _CFXMLTreeGetNodePtr.asFunction<CFXMLNodeRef Function(CFXMLTreeRef)>();

  int CFXMLParserGetTypeID() {
    return _CFXMLParserGetTypeID();
  }

  late final _CFXMLParserGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLParserGetTypeID');
  late final _CFXMLParserGetTypeID =
      _CFXMLParserGetTypeIDPtr.asFunction<int Function()>();

  CFXMLParserRef CFXMLParserCreate(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreate(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLRef,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserCreate');
  late final _CFXMLParserCreate = _CFXMLParserCreatePtr.asFunction<
      CFXMLParserRef Function(
          CFAllocatorRef,
          CFDataRef,
          CFURLRef,
          int,
          int,
          ffi.Pointer<CFXMLParserCallBacks>,
          ffi.Pointer<CFXMLParserContext>)>();

  CFXMLParserRef CFXMLParserCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreateWithDataFromURLPtr = _lookup<
          ffi.NativeFunction<
              CFXMLParserRef Function(
                  CFAllocatorRef,
                  CFURLRef,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<CFXMLParserCallBacks>,
                  ffi.Pointer<CFXMLParserContext>)>>(
      'CFXMLParserCreateWithDataFromURL');
  late final _CFXMLParserCreateWithDataFromURL =
      _CFXMLParserCreateWithDataFromURLPtr.asFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFURLRef,
              int,
              int,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetContext(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserGetContext(
      parser,
      context,
    );
  }

  late final _CFXMLParserGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserGetContext');
  late final _CFXMLParserGetContext = _CFXMLParserGetContextPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetCallBacks(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
  ) {
    return _CFXMLParserGetCallBacks(
      parser,
      callBacks,
    );
  }

  late final _CFXMLParserGetCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserCallBacks>)>>('CFXMLParserGetCallBacks');
  late final _CFXMLParserGetCallBacks = _CFXMLParserGetCallBacksPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserCallBacks>)>();

  CFURLRef CFXMLParserGetSourceURL(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetSourceURL(
      parser,
    );
  }

  late final _CFXMLParserGetSourceURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFXMLParserRef)>>(
          'CFXMLParserGetSourceURL');
  late final _CFXMLParserGetSourceURL = _CFXMLParserGetSourceURLPtr.asFunction<
      CFURLRef Function(CFXMLParserRef)>();

  int CFXMLParserGetLocation(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLocation(
      parser,
    );
  }

  late final _CFXMLParserGetLocationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLocation');
  late final _CFXMLParserGetLocation =
      _CFXMLParserGetLocationPtr.asFunction<int Function(CFXMLParserRef)>();

  int CFXMLParserGetLineNumber(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLineNumber(
      parser,
    );
  }

  late final _CFXMLParserGetLineNumberPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLineNumber');
  late final _CFXMLParserGetLineNumber =
      _CFXMLParserGetLineNumberPtr.asFunction<int Function(CFXMLParserRef)>();

  ffi.Pointer<ffi.Void> CFXMLParserGetDocument(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetDocument(
      parser,
    );
  }

  late final _CFXMLParserGetDocumentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>>(
      'CFXMLParserGetDocument');
  late final _CFXMLParserGetDocument = _CFXMLParserGetDocumentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>();

  int CFXMLParserGetStatusCode(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetStatusCode(
      parser,
    );
  }

  late final _CFXMLParserGetStatusCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFXMLParserRef)>>(
          'CFXMLParserGetStatusCode');
  late final _CFXMLParserGetStatusCode =
      _CFXMLParserGetStatusCodePtr.asFunction<int Function(CFXMLParserRef)>();

  CFStringRef CFXMLParserCopyErrorDescription(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserCopyErrorDescription(
      parser,
    );
  }

  late final _CFXMLParserCopyErrorDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLParserRef)>>(
          'CFXMLParserCopyErrorDescription');
  late final _CFXMLParserCopyErrorDescription =
      _CFXMLParserCopyErrorDescriptionPtr.asFunction<
          CFStringRef Function(CFXMLParserRef)>();

  void CFXMLParserAbort(
    CFXMLParserRef parser,
    int errorCode,
    CFStringRef errorDescription,
  ) {
    return _CFXMLParserAbort(
      parser,
      errorCode,
      errorDescription,
    );
  }

  late final _CFXMLParserAbortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFXMLParserRef, ffi.Int32, CFStringRef)>>('CFXMLParserAbort');
  late final _CFXMLParserAbort = _CFXMLParserAbortPtr.asFunction<
      void Function(CFXMLParserRef, int, CFStringRef)>();

  int CFXMLParserParse(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserParse(
      parser,
    );
  }

  late final _CFXMLParserParsePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFXMLParserRef)>>(
          'CFXMLParserParse');
  late final _CFXMLParserParse =
      _CFXMLParserParsePtr.asFunction<int Function(CFXMLParserRef)>();

  CFXMLTreeRef CFXMLTreeCreateFromData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateFromData(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
              CFOptionFlags, CFIndex)>>('CFXMLTreeCreateFromData');
  late final _CFXMLTreeCreateFromData = _CFXMLTreeCreateFromDataPtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int)>();

  CFXMLTreeRef CFXMLTreeCreateFromDataWithError(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFDictionaryRef> errorDict,
  ) {
    return _CFXMLTreeCreateFromDataWithError(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      errorDict,
    );
  }

  late final _CFXMLTreeCreateFromDataWithErrorPtr = _lookup<
          ffi.NativeFunction<
              CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
                  CFOptionFlags, CFIndex, ffi.Pointer<CFDictionaryRef>)>>(
      'CFXMLTreeCreateFromDataWithError');
  late final _CFXMLTreeCreateFromDataWithError =
      _CFXMLTreeCreateFromDataWithErrorPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int,
              ffi.Pointer<CFDictionaryRef>)>();

  CFXMLTreeRef CFXMLTreeCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateWithDataFromURLPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFIndex)>>('CFXMLTreeCreateWithDataFromURL');
  late final _CFXMLTreeCreateWithDataFromURL =
      _CFXMLTreeCreateWithDataFromURLPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFDataRef CFXMLTreeCreateXMLData(
    CFAllocatorRef allocator,
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeCreateXMLData(
      allocator,
      xmlTree,
    );
  }

  late final _CFXMLTreeCreateXMLDataPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>>(
      'CFXMLTreeCreateXMLData');
  late final _CFXMLTreeCreateXMLData = _CFXMLTreeCreateXMLDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>();

  CFStringRef CFXMLCreateStringByEscapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByEscapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByEscapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByEscapingEntities');
  late final _CFXMLCreateStringByEscapingEntities =
      _CFXMLCreateStringByEscapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFStringRef CFXMLCreateStringByUnescapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByUnescapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByUnescapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByUnescapingEntities');
  late final _CFXMLCreateStringByUnescapingEntities =
      _CFXMLCreateStringByUnescapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorDescription =
      _lookup<CFStringRef>('kCFXMLTreeErrorDescription');

  CFStringRef get kCFXMLTreeErrorDescription =>
      _kCFXMLTreeErrorDescription.value;

  set kCFXMLTreeErrorDescription(CFStringRef value) =>
      _kCFXMLTreeErrorDescription.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLineNumber =
      _lookup<CFStringRef>('kCFXMLTreeErrorLineNumber');

  CFStringRef get kCFXMLTreeErrorLineNumber => _kCFXMLTreeErrorLineNumber.value;

  set kCFXMLTreeErrorLineNumber(CFStringRef value) =>
      _kCFXMLTreeErrorLineNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLocation =
      _lookup<CFStringRef>('kCFXMLTreeErrorLocation');

  CFStringRef get kCFXMLTreeErrorLocation => _kCFXMLTreeErrorLocation.value;

  set kCFXMLTreeErrorLocation(CFStringRef value) =>
      _kCFXMLTreeErrorLocation.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorStatusCode =
      _lookup<CFStringRef>('kCFXMLTreeErrorStatusCode');

  CFStringRef get kCFXMLTreeErrorStatusCode => _kCFXMLTreeErrorStatusCode.value;

  set kCFXMLTreeErrorStatusCode(CFStringRef value) =>
      _kCFXMLTreeErrorStatusCode.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeTitle =
      _lookup<CFStringRef>('kSecPropertyTypeTitle');

  CFStringRef get kSecPropertyTypeTitle => _kSecPropertyTypeTitle.value;

  set kSecPropertyTypeTitle(CFStringRef value) =>
      _kSecPropertyTypeTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeError =
      _lookup<CFStringRef>('kSecPropertyTypeError');

  CFStringRef get kSecPropertyTypeError => _kSecPropertyTypeError.value;

  set kSecPropertyTypeError(CFStringRef value) =>
      _kSecPropertyTypeError.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustEvaluationDate =
      _lookup<CFStringRef>('kSecTrustEvaluationDate');

  CFStringRef get kSecTrustEvaluationDate => _kSecTrustEvaluationDate.value;

  set kSecTrustEvaluationDate(CFStringRef value) =>
      _kSecTrustEvaluationDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustExtendedValidation =
      _lookup<CFStringRef>('kSecTrustExtendedValidation');

  CFStringRef get kSecTrustExtendedValidation =>
      _kSecTrustExtendedValidation.value;

  set kSecTrustExtendedValidation(CFStringRef value) =>
      _kSecTrustExtendedValidation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustOrganizationName =
      _lookup<CFStringRef>('kSecTrustOrganizationName');

  CFStringRef get kSecTrustOrganizationName => _kSecTrustOrganizationName.value;

  set kSecTrustOrganizationName(CFStringRef value) =>
      _kSecTrustOrganizationName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustResultValue =
      _lookup<CFStringRef>('kSecTrustResultValue');

  CFStringRef get kSecTrustResultValue => _kSecTrustResultValue.value;

  set kSecTrustResultValue(CFStringRef value) =>
      _kSecTrustResultValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationChecked =
      _lookup<CFStringRef>('kSecTrustRevocationChecked');

  CFStringRef get kSecTrustRevocationChecked =>
      _kSecTrustRevocationChecked.value;

  set kSecTrustRevocationChecked(CFStringRef value) =>
      _kSecTrustRevocationChecked.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationValidUntilDate =
      _lookup<CFStringRef>('kSecTrustRevocationValidUntilDate');

  CFStringRef get kSecTrustRevocationValidUntilDate =>
      _kSecTrustRevocationValidUntilDate.value;

  set kSecTrustRevocationValidUntilDate(CFStringRef value) =>
      _kSecTrustRevocationValidUntilDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustCertificateTransparency =
      _lookup<CFStringRef>('kSecTrustCertificateTransparency');

  CFStringRef get kSecTrustCertificateTransparency =>
      _kSecTrustCertificateTransparency.value;

  set kSecTrustCertificateTransparency(CFStringRef value) =>
      _kSecTrustCertificateTransparency.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecTrustCertificateTransparencyWhiteList =
      _lookup<CFStringRef>('kSecTrustCertificateTransparencyWhiteList');

  CFStringRef get kSecTrustCertificateTransparencyWhiteList =>
      _kSecTrustCertificateTransparencyWhiteList.value;

  set kSecTrustCertificateTransparencyWhiteList(CFStringRef value) =>
      _kSecTrustCertificateTransparencyWhiteList.value = value;

  int SecTrustGetTypeID() {
    return _SecTrustGetTypeID();
  }

  late final _SecTrustGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecTrustGetTypeID');
  late final _SecTrustGetTypeID =
      _SecTrustGetTypeIDPtr.asFunction<int Function()>();

  int SecTrustCreateWithCertificates(
    CFTypeRef certificates,
    CFTypeRef policies,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SecTrustCreateWithCertificates(
      certificates,
      policies,
      trust,
    );
  }

  late final _SecTrustCreateWithCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFTypeRef, CFTypeRef,
              ffi.Pointer<SecTrustRef>)>>('SecTrustCreateWithCertificates');
  late final _SecTrustCreateWithCertificates =
      _SecTrustCreateWithCertificatesPtr.asFunction<
          int Function(CFTypeRef, CFTypeRef, ffi.Pointer<SecTrustRef>)>();

  int SecTrustSetPolicies(
    SecTrustRef trust,
    CFTypeRef policies,
  ) {
    return _SecTrustSetPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustSetPoliciesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetPolicies');
  late final _SecTrustSetPolicies = _SecTrustSetPoliciesPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustCopyPolicies(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> policies,
  ) {
    return _SecTrustCopyPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustCopyPoliciesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<CFArrayRef>)>>('SecTrustCopyPolicies');
  late final _SecTrustCopyPolicies = _SecTrustCopyPoliciesPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetNetworkFetchAllowed(
    SecTrustRef trust,
    int allowFetch,
  ) {
    return _SecTrustSetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustSetNetworkFetchAllowedPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetNetworkFetchAllowed');
  late final _SecTrustSetNetworkFetchAllowed =
      _SecTrustSetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustGetNetworkFetchAllowed(
    SecTrustRef trust,
    ffi.Pointer<Boolean> allowFetch,
  ) {
    return _SecTrustGetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustGetNetworkFetchAllowedPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<Boolean>)>>('SecTrustGetNetworkFetchAllowed');
  late final _SecTrustGetNetworkFetchAllowed =
      _SecTrustGetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<Boolean>)>();

  int SecTrustSetAnchorCertificates(
    SecTrustRef trust,
    CFArrayRef anchorCertificates,
  ) {
    return _SecTrustSetAnchorCertificates(
      trust,
      anchorCertificates,
    );
  }

  late final _SecTrustSetAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetAnchorCertificates');
  late final _SecTrustSetAnchorCertificates = _SecTrustSetAnchorCertificatesPtr
      .asFunction<int Function(SecTrustRef, CFArrayRef)>();

  int SecTrustSetAnchorCertificatesOnly(
    SecTrustRef trust,
    int anchorCertificatesOnly,
  ) {
    return _SecTrustSetAnchorCertificatesOnly(
      trust,
      anchorCertificatesOnly,
    );
  }

  late final _SecTrustSetAnchorCertificatesOnlyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetAnchorCertificatesOnly');
  late final _SecTrustSetAnchorCertificatesOnly =
      _SecTrustSetAnchorCertificatesOnlyPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustCopyCustomAnchorCertificates(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyCustomAnchorCertificates(
      trust,
      anchors,
    );
  }

  late final _SecTrustCopyCustomAnchorCertificatesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>>(
      'SecTrustCopyCustomAnchorCertificates');
  late final _SecTrustCopyCustomAnchorCertificates =
      _SecTrustCopyCustomAnchorCertificatesPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetVerifyDate(
    SecTrustRef trust,
    CFDateRef verifyDate,
  ) {
    return _SecTrustSetVerifyDate(
      trust,
      verifyDate,
    );
  }

  late final _SecTrustSetVerifyDatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFDateRef)>>(
          'SecTrustSetVerifyDate');
  late final _SecTrustSetVerifyDate = _SecTrustSetVerifyDatePtr.asFunction<
      int Function(SecTrustRef, CFDateRef)>();

  double SecTrustGetVerifyTime(
    SecTrustRef trust,
  ) {
    return _SecTrustGetVerifyTime(
      trust,
    );
  }

  late final _SecTrustGetVerifyTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(SecTrustRef)>>(
          'SecTrustGetVerifyTime');
  late final _SecTrustGetVerifyTime =
      _SecTrustGetVerifyTimePtr.asFunction<double Function(SecTrustRef)>();

  int SecTrustEvaluate(
    SecTrustRef trust,
    ffi.Pointer<ffi.Int32> result,
  ) {
    return _SecTrustEvaluate(
      trust,
      result,
    );
  }

  late final _SecTrustEvaluatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Int32>)>>('SecTrustEvaluate');
  late final _SecTrustEvaluate = _SecTrustEvaluatePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>)>();

  int SecTrustEvaluateAsync(
    SecTrustRef trust,
    dispatch_queue_t queue,
    SecTrustCallback result,
  ) {
    return _SecTrustEvaluateAsync(
      trust,
      queue,
      result,
    );
  }

  late final _SecTrustEvaluateAsyncPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustCallback)>>('SecTrustEvaluateAsync');
  late final _SecTrustEvaluateAsync = _SecTrustEvaluateAsyncPtr.asFunction<
      int Function(SecTrustRef, dispatch_queue_t, SecTrustCallback)>();

  bool SecTrustEvaluateWithError(
    SecTrustRef trust,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecTrustEvaluateWithError(
          trust,
          error,
        ) !=
        0;
  }

  late final _SecTrustEvaluateWithErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(SecTrustRef,
              ffi.Pointer<CFErrorRef>)>>('SecTrustEvaluateWithError');
  late final _SecTrustEvaluateWithError = _SecTrustEvaluateWithErrorPtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<CFErrorRef>)>();

  int SecTrustEvaluateAsyncWithError(
    SecTrustRef trust,
    dispatch_queue_t queue,
    SecTrustWithErrorCallback result,
  ) {
    return _SecTrustEvaluateAsyncWithError(
      trust,
      queue,
      result,
    );
  }

  late final _SecTrustEvaluateAsyncWithErrorPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustWithErrorCallback)>>('SecTrustEvaluateAsyncWithError');
  late final _SecTrustEvaluateAsyncWithError =
      _SecTrustEvaluateAsyncWithErrorPtr.asFunction<
          int Function(
              SecTrustRef, dispatch_queue_t, SecTrustWithErrorCallback)>();

  int SecTrustGetTrustResult(
    SecTrustRef trust,
    ffi.Pointer<ffi.Int32> result,
  ) {
    return _SecTrustGetTrustResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetTrustResultPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Int32>)>>('SecTrustGetTrustResult');
  late final _SecTrustGetTrustResult = _SecTrustGetTrustResultPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>)>();

  SecKeyRef SecTrustCopyPublicKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyPublicKey(
      trust,
    );
  }

  late final _SecTrustCopyPublicKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyPublicKey');
  late final _SecTrustCopyPublicKey =
      _SecTrustCopyPublicKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  SecKeyRef SecTrustCopyKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyKey(
      trust,
    );
  }

  late final _SecTrustCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyKey');
  late final _SecTrustCopyKey =
      _SecTrustCopyKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  int SecTrustGetCertificateCount(
    SecTrustRef trust,
  ) {
    return _SecTrustGetCertificateCount(
      trust,
    );
  }

  late final _SecTrustGetCertificateCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(SecTrustRef)>>(
          'SecTrustGetCertificateCount');
  late final _SecTrustGetCertificateCount =
      _SecTrustGetCertificateCountPtr.asFunction<int Function(SecTrustRef)>();

  SecCertificateRef SecTrustGetCertificateAtIndex(
    SecTrustRef trust,
    int ix,
  ) {
    return _SecTrustGetCertificateAtIndex(
      trust,
      ix,
    );
  }

  late final _SecTrustGetCertificateAtIndexPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(SecTrustRef, CFIndex)>>(
      'SecTrustGetCertificateAtIndex');
  late final _SecTrustGetCertificateAtIndex = _SecTrustGetCertificateAtIndexPtr
      .asFunction<SecCertificateRef Function(SecTrustRef, int)>();

  CFDataRef SecTrustCopyExceptions(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyExceptions(
      trust,
    );
  }

  late final _SecTrustCopyExceptionsPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecTrustRef)>>(
          'SecTrustCopyExceptions');
  late final _SecTrustCopyExceptions =
      _SecTrustCopyExceptionsPtr.asFunction<CFDataRef Function(SecTrustRef)>();

  bool SecTrustSetExceptions(
    SecTrustRef trust,
    CFDataRef exceptions,
  ) {
    return _SecTrustSetExceptions(
          trust,
          exceptions,
        ) !=
        0;
  }

  late final _SecTrustSetExceptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(SecTrustRef, CFDataRef)>>(
          'SecTrustSetExceptions');
  late final _SecTrustSetExceptions = _SecTrustSetExceptionsPtr.asFunction<
      int Function(SecTrustRef, CFDataRef)>();

  CFArrayRef SecTrustCopyProperties(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyProperties(
      trust,
    );
  }

  late final _SecTrustCopyPropertiesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyProperties');
  late final _SecTrustCopyProperties =
      _SecTrustCopyPropertiesPtr.asFunction<CFArrayRef Function(SecTrustRef)>();

  CFDictionaryRef SecTrustCopyResult(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyResult(
      trust,
    );
  }

  late final _SecTrustCopyResultPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(SecTrustRef)>>(
          'SecTrustCopyResult');
  late final _SecTrustCopyResult = _SecTrustCopyResultPtr.asFunction<
      CFDictionaryRef Function(SecTrustRef)>();

  int SecTrustSetOCSPResponse(
    SecTrustRef trust,
    CFTypeRef responseData,
  ) {
    return _SecTrustSetOCSPResponse(
      trust,
      responseData,
    );
  }

  late final _SecTrustSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetOCSPResponse');
  late final _SecTrustSetOCSPResponse = _SecTrustSetOCSPResponsePtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustSetSignedCertificateTimestamps(
    SecTrustRef trust,
    CFArrayRef sctArray,
  ) {
    return _SecTrustSetSignedCertificateTimestamps(
      trust,
      sctArray,
    );
  }

  late final _SecTrustSetSignedCertificateTimestampsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetSignedCertificateTimestamps');
  late final _SecTrustSetSignedCertificateTimestamps =
      _SecTrustSetSignedCertificateTimestampsPtr.asFunction<
          int Function(SecTrustRef, CFArrayRef)>();

  CFArrayRef SecTrustCopyCertificateChain(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyCertificateChain(
      trust,
    );
  }

  late final _SecTrustCopyCertificateChainPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyCertificateChain');
  late final _SecTrustCopyCertificateChain = _SecTrustCopyCertificateChainPtr
      .asFunction<CFArrayRef Function(SecTrustRef)>();

  late final ffi.Pointer<CSSM_GUID> _gGuidCssm =
      _lookup<CSSM_GUID>('gGuidCssm');

  CSSM_GUID get gGuidCssm => _gGuidCssm.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleFileDL =
      _lookup<CSSM_GUID>('gGuidAppleFileDL');

  CSSM_GUID get gGuidAppleFileDL => _gGuidAppleFileDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSP =
      _lookup<CSSM_GUID>('gGuidAppleCSP');

  CSSM_GUID get gGuidAppleCSP => _gGuidAppleCSP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleCSPDL');

  CSSM_GUID get gGuidAppleCSPDL => _gGuidAppleCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509CL =
      _lookup<CSSM_GUID>('gGuidAppleX509CL');

  CSSM_GUID get gGuidAppleX509CL => _gGuidAppleX509CL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509TP =
      _lookup<CSSM_GUID>('gGuidAppleX509TP');

  CSSM_GUID get gGuidAppleX509TP => _gGuidAppleX509TP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleLDAPDL =
      _lookup<CSSM_GUID>('gGuidAppleLDAPDL');

  CSSM_GUID get gGuidAppleLDAPDL => _gGuidAppleLDAPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacTP =
      _lookup<CSSM_GUID>('gGuidAppleDotMacTP');

  CSSM_GUID get gGuidAppleDotMacTP => _gGuidAppleDotMacTP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleSdCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleSdCSPDL');

  CSSM_GUID get gGuidAppleSdCSPDL => _gGuidAppleSdCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacDL =
      _lookup<CSSM_GUID>('gGuidAppleDotMacDL');

  CSSM_GUID get gGuidAppleDotMacDL => _gGuidAppleDotMacDL.ref;

  void cssmPerror(
    ffi.Pointer<pkg_ffi.Char> how,
    int error,
  ) {
    return _cssmPerror(
      how,
      error,
    );
  }

  late final _cssmPerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Char>, CSSM_RETURN)>>('cssmPerror');
  late final _cssmPerror = _cssmPerrorPtr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  bool cssmOidToAlg(
    ffi.Pointer<SecAsn1Oid> oid,
    ffi.Pointer<CSSM_ALGORITHMS> alg,
  ) {
    return _cssmOidToAlg(
          oid,
          alg,
        ) !=
        0;
  }

  late final _cssmOidToAlgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<SecAsn1Oid>,
              ffi.Pointer<CSSM_ALGORITHMS>)>>('cssmOidToAlg');
  late final _cssmOidToAlg = _cssmOidToAlgPtr.asFunction<
      int Function(ffi.Pointer<SecAsn1Oid>, ffi.Pointer<CSSM_ALGORITHMS>)>();

  ffi.Pointer<SecAsn1Oid> cssmAlgToOid(
    int algId,
  ) {
    return _cssmAlgToOid(
      algId,
    );
  }

  late final _cssmAlgToOidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SecAsn1Oid> Function(CSSM_ALGORITHMS)>>('cssmAlgToOid');
  late final _cssmAlgToOid =
      _cssmAlgToOidPtr.asFunction<ffi.Pointer<SecAsn1Oid> Function(int)>();

  int SecTrustSetOptions(
    SecTrustRef trustRef,
    int options,
  ) {
    return _SecTrustSetOptions(
      trustRef,
      options,
    );
  }

  late final _SecTrustSetOptionsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, ffi.Int32)>>(
          'SecTrustSetOptions');
  late final _SecTrustSetOptions =
      _SecTrustSetOptionsPtr.asFunction<int Function(SecTrustRef, int)>();

  int SecTrustSetParameters(
    SecTrustRef trustRef,
    int action,
    CFDataRef actionData,
  ) {
    return _SecTrustSetParameters(
      trustRef,
      action,
      actionData,
    );
  }

  late final _SecTrustSetParametersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, CSSM_TP_ACTION,
              CFDataRef)>>('SecTrustSetParameters');
  late final _SecTrustSetParameters = _SecTrustSetParametersPtr.asFunction<
      int Function(SecTrustRef, int, CFDataRef)>();

  int SecTrustSetKeychains(
    SecTrustRef trust,
    CFTypeRef keychainOrArray,
  ) {
    return _SecTrustSetKeychains(
      trust,
      keychainOrArray,
    );
  }

  late final _SecTrustSetKeychainsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetKeychains');
  late final _SecTrustSetKeychains = _SecTrustSetKeychainsPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustGetResult(
    SecTrustRef trustRef,
    ffi.Pointer<ffi.Int32> result,
    ffi.Pointer<CFArrayRef> certChain,
    ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>> statusChain,
  ) {
    return _SecTrustGetResult(
      trustRef,
      result,
      certChain,
      statusChain,
    );
  }

  late final _SecTrustGetResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustRef,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<CFArrayRef>,
                  ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>>(
      'SecTrustGetResult');
  late final _SecTrustGetResult = _SecTrustGetResultPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<CFArrayRef>,
          ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>();

  int SecTrustGetCssmResult(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR> result,
  ) {
    return _SecTrustGetCssmResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetCssmResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef,
                  ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>>(
      'SecTrustGetCssmResult');
  late final _SecTrustGetCssmResult = _SecTrustGetCssmResultPtr.asFunction<
      int Function(
          SecTrustRef, ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>();

  int SecTrustGetCssmResultCode(
    SecTrustRef trust,
    ffi.Pointer<OSStatus> resultCode,
  ) {
    return _SecTrustGetCssmResultCode(
      trust,
      resultCode,
    );
  }

  late final _SecTrustGetCssmResultCodePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<OSStatus>)>>('SecTrustGetCssmResultCode');
  late final _SecTrustGetCssmResultCode = _SecTrustGetCssmResultCodePtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<OSStatus>)>();

  int SecTrustGetTPHandle(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_HANDLE> handle,
  ) {
    return _SecTrustGetTPHandle(
      trust,
      handle,
    );
  }

  late final _SecTrustGetTPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<CSSM_TP_HANDLE>)>>('SecTrustGetTPHandle');
  late final _SecTrustGetTPHandle = _SecTrustGetTPHandlePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CSSM_TP_HANDLE>)>();

  int SecTrustCopyAnchorCertificates(
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyAnchorCertificates(
      anchors,
    );
  }

  late final _SecTrustCopyAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(ffi.Pointer<CFArrayRef>)>>(
          'SecTrustCopyAnchorCertificates');
  late final _SecTrustCopyAnchorCertificates =
      _SecTrustCopyAnchorCertificatesPtr.asFunction<
          int Function(ffi.Pointer<CFArrayRef>)>();

  int SecCertificateGetTypeID() {
    return _SecCertificateGetTypeID();
  }

  late final _SecCertificateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'SecCertificateGetTypeID');
  late final _SecCertificateGetTypeID =
      _SecCertificateGetTypeIDPtr.asFunction<int Function()>();

  SecCertificateRef SecCertificateCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
  ) {
    return _SecCertificateCreateWithData(
      allocator,
      data,
    );
  }

  late final _SecCertificateCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFAllocatorRef, CFDataRef)>>('SecCertificateCreateWithData');
  late final _SecCertificateCreateWithData = _SecCertificateCreateWithDataPtr
      .asFunction<SecCertificateRef Function(CFAllocatorRef, CFDataRef)>();

  CFDataRef SecCertificateCopyData(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyData(
      certificate,
    );
  }

  late final _SecCertificateCopyDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyData');
  late final _SecCertificateCopyData = _SecCertificateCopyDataPtr.asFunction<
      CFDataRef Function(SecCertificateRef)>();

  CFStringRef SecCertificateCopySubjectSummary(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopySubjectSummary(
      certificate,
    );
  }

  late final _SecCertificateCopySubjectSummaryPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(SecCertificateRef)>>(
          'SecCertificateCopySubjectSummary');
  late final _SecCertificateCopySubjectSummary =
      _SecCertificateCopySubjectSummaryPtr.asFunction<
          CFStringRef Function(SecCertificateRef)>();

  int SecCertificateCopyCommonName(
    SecCertificateRef certificate,
    ffi.Pointer<CFStringRef> commonName,
  ) {
    return _SecCertificateCopyCommonName(
      certificate,
      commonName,
    );
  }

  late final _SecCertificateCopyCommonNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFStringRef>)>>('SecCertificateCopyCommonName');
  late final _SecCertificateCopyCommonName = _SecCertificateCopyCommonNamePtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<CFStringRef>)>();

  int SecCertificateCopyEmailAddresses(
    SecCertificateRef certificate,
    ffi.Pointer<CFArrayRef> emailAddresses,
  ) {
    return _SecCertificateCopyEmailAddresses(
      certificate,
      emailAddresses,
    );
  }

  late final _SecCertificateCopyEmailAddressesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFArrayRef>)>>('SecCertificateCopyEmailAddresses');
  late final _SecCertificateCopyEmailAddresses =
      _SecCertificateCopyEmailAddressesPtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CFArrayRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedIssuerSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedIssuerSequence');
  late final _SecCertificateCopyNormalizedIssuerSequence =
      _SecCertificateCopyNormalizedIssuerSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  CFDataRef SecCertificateCopyNormalizedSubjectSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedSubjectSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedSubjectSequence');
  late final _SecCertificateCopyNormalizedSubjectSequence =
      _SecCertificateCopyNormalizedSubjectSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  SecKeyRef SecCertificateCopyKey(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyKey(
      certificate,
    );
  }

  late final _SecCertificateCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecCertificateRef)>>(
          'SecCertificateCopyKey');
  late final _SecCertificateCopyKey = _SecCertificateCopyKeyPtr.asFunction<
      SecKeyRef Function(SecCertificateRef)>();

  int SecCertificateCopyPublicKey(
    SecCertificateRef certificate,
    ffi.Pointer<SecKeyRef> key,
  ) {
    return _SecCertificateCopyPublicKey(
      certificate,
      key,
    );
  }

  late final _SecCertificateCopyPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<SecKeyRef>)>>('SecCertificateCopyPublicKey');
  late final _SecCertificateCopyPublicKey = _SecCertificateCopyPublicKeyPtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<SecKeyRef>)>();

  CFDataRef SecCertificateCopySerialNumberData(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumberData(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumberData');
  late final _SecCertificateCopySerialNumberData =
      _SecCertificateCopySerialNumberDataPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopySerialNumber(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumber(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumber');
  late final _SecCertificateCopySerialNumber =
      _SecCertificateCopySerialNumberPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecCertificateCreateFromData(
    ffi.Pointer<SecAsn1Item> data,
    int type,
    int encoding,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCreateFromData(
      data,
      type,
      encoding,
      certificate,
    );
  }

  late final _SecCertificateCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<SecAsn1Item>,
              CSSM_CERT_TYPE,
              CSSM_CERT_ENCODING,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCreateFromData');
  late final _SecCertificateCreateFromData =
      _SecCertificateCreateFromDataPtr.asFunction<
          int Function(ffi.Pointer<SecAsn1Item>, int, int,
              ffi.Pointer<SecCertificateRef>)>();

  int SecCertificateAddToKeychain(
    SecCertificateRef certificate,
    SecKeychainRef keychain,
  ) {
    return _SecCertificateAddToKeychain(
      certificate,
      keychain,
    );
  }

  late final _SecCertificateAddToKeychainPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              SecKeychainRef)>>('SecCertificateAddToKeychain');
  late final _SecCertificateAddToKeychain = _SecCertificateAddToKeychainPtr
      .asFunction<int Function(SecCertificateRef, SecKeychainRef)>();

  int SecCertificateGetData(
    SecCertificateRef certificate,
    CSSM_DATA_PTR data,
  ) {
    return _SecCertificateGetData(
      certificate,
      data,
    );
  }

  late final _SecCertificateGetDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCertificateRef, CSSM_DATA_PTR)>>('SecCertificateGetData');
  late final _SecCertificateGetData = _SecCertificateGetDataPtr.asFunction<
      int Function(SecCertificateRef, CSSM_DATA_PTR)>();

  int SecCertificateGetType(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CERT_TYPE> certificateType,
  ) {
    return _SecCertificateGetType(
      certificate,
      certificateType,
    );
  }

  late final _SecCertificateGetTypePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CERT_TYPE>)>>('SecCertificateGetType');
  late final _SecCertificateGetType = _SecCertificateGetTypePtr.asFunction<
      int Function(SecCertificateRef, ffi.Pointer<CSSM_CERT_TYPE>)>();

  int SecCertificateGetSubject(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> subject,
  ) {
    return _SecCertificateGetSubject(
      certificate,
      subject,
    );
  }

  late final _SecCertificateGetSubjectPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetSubject');
  late final _SecCertificateGetSubject =
      _SecCertificateGetSubjectPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetIssuer(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> issuer,
  ) {
    return _SecCertificateGetIssuer(
      certificate,
      issuer,
    );
  }

  late final _SecCertificateGetIssuerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetIssuer');
  late final _SecCertificateGetIssuer = _SecCertificateGetIssuerPtr.asFunction<
      int Function(
          SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetCLHandle(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CL_HANDLE> clHandle,
  ) {
    return _SecCertificateGetCLHandle(
      certificate,
      clHandle,
    );
  }

  late final _SecCertificateGetCLHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CL_HANDLE>)>>('SecCertificateGetCLHandle');
  late final _SecCertificateGetCLHandle =
      _SecCertificateGetCLHandlePtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CSSM_CL_HANDLE>)>();

  int SecCertificateGetAlgorithmID(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<SecAsn1AlgId>> algid,
  ) {
    return _SecCertificateGetAlgorithmID(
      certificate,
      algid,
    );
  }

  late final _SecCertificateGetAlgorithmIDPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>>(
      'SecCertificateGetAlgorithmID');
  late final _SecCertificateGetAlgorithmID =
      _SecCertificateGetAlgorithmIDPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>();

  int SecCertificateCopyPreference(
    CFStringRef name,
    int keyUsage,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCopyPreference(
      name,
      keyUsage,
      certificate,
    );
  }

  late final _SecCertificateCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, uint32,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCopyPreference');
  late final _SecCertificateCopyPreference =
      _SecCertificateCopyPreferencePtr.asFunction<
          int Function(CFStringRef, int, ffi.Pointer<SecCertificateRef>)>();

  SecCertificateRef SecCertificateCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateCopyPreferred(
      name,
      keyUsage,
    );
  }

  late final _SecCertificateCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFStringRef, CFArrayRef)>>('SecCertificateCopyPreferred');
  late final _SecCertificateCopyPreferred = _SecCertificateCopyPreferredPtr
      .asFunction<SecCertificateRef Function(CFStringRef, CFArrayRef)>();

  int SecCertificateSetPreference(
    SecCertificateRef certificate,
    CFStringRef name,
    int keyUsage,
    CFDateRef date,
  ) {
    return _SecCertificateSetPreference(
      certificate,
      name,
      keyUsage,
      date,
    );
  }

  late final _SecCertificateSetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef, uint32,
              CFDateRef)>>('SecCertificateSetPreference');
  late final _SecCertificateSetPreference =
      _SecCertificateSetPreferencePtr.asFunction<
          int Function(SecCertificateRef, CFStringRef, int, CFDateRef)>();

  int SecCertificateSetPreferred(
    SecCertificateRef certificate,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateSetPreferred(
      certificate,
      name,
      keyUsage,
    );
  }

  late final _SecCertificateSetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef,
              CFArrayRef)>>('SecCertificateSetPreferred');
  late final _SecCertificateSetPreferred = _SecCertificateSetPreferredPtr
      .asFunction<int Function(SecCertificateRef, CFStringRef, CFArrayRef)>();

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyType =
      _lookup<CFStringRef>('kSecPropertyKeyType');

  CFStringRef get kSecPropertyKeyType => _kSecPropertyKeyType.value;

  set kSecPropertyKeyType(CFStringRef value) =>
      _kSecPropertyKeyType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLabel');

  CFStringRef get kSecPropertyKeyLabel => _kSecPropertyKeyLabel.value;

  set kSecPropertyKeyLabel(CFStringRef value) =>
      _kSecPropertyKeyLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLocalizedLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLocalizedLabel');

  CFStringRef get kSecPropertyKeyLocalizedLabel =>
      _kSecPropertyKeyLocalizedLabel.value;

  set kSecPropertyKeyLocalizedLabel(CFStringRef value) =>
      _kSecPropertyKeyLocalizedLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyValue =
      _lookup<CFStringRef>('kSecPropertyKeyValue');

  CFStringRef get kSecPropertyKeyValue => _kSecPropertyKeyValue.value;

  set kSecPropertyKeyValue(CFStringRef value) =>
      _kSecPropertyKeyValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeWarning =
      _lookup<CFStringRef>('kSecPropertyTypeWarning');

  CFStringRef get kSecPropertyTypeWarning => _kSecPropertyTypeWarning.value;

  set kSecPropertyTypeWarning(CFStringRef value) =>
      _kSecPropertyTypeWarning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSuccess =
      _lookup<CFStringRef>('kSecPropertyTypeSuccess');

  CFStringRef get kSecPropertyTypeSuccess => _kSecPropertyTypeSuccess.value;

  set kSecPropertyTypeSuccess(CFStringRef value) =>
      _kSecPropertyTypeSuccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSection =
      _lookup<CFStringRef>('kSecPropertyTypeSection');

  CFStringRef get kSecPropertyTypeSection => _kSecPropertyTypeSection.value;

  set kSecPropertyTypeSection(CFStringRef value) =>
      _kSecPropertyTypeSection.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeData =
      _lookup<CFStringRef>('kSecPropertyTypeData');

  CFStringRef get kSecPropertyTypeData => _kSecPropertyTypeData.value;

  set kSecPropertyTypeData(CFStringRef value) =>
      _kSecPropertyTypeData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeString =
      _lookup<CFStringRef>('kSecPropertyTypeString');

  CFStringRef get kSecPropertyTypeString => _kSecPropertyTypeString.value;

  set kSecPropertyTypeString(CFStringRef value) =>
      _kSecPropertyTypeString.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeURL =
      _lookup<CFStringRef>('kSecPropertyTypeURL');

  CFStringRef get kSecPropertyTypeURL => _kSecPropertyTypeURL.value;

  set kSecPropertyTypeURL(CFStringRef value) =>
      _kSecPropertyTypeURL.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeDate =
      _lookup<CFStringRef>('kSecPropertyTypeDate');

  CFStringRef get kSecPropertyTypeDate => _kSecPropertyTypeDate.value;

  set kSecPropertyTypeDate(CFStringRef value) =>
      _kSecPropertyTypeDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeArray =
      _lookup<CFStringRef>('kSecPropertyTypeArray');

  CFStringRef get kSecPropertyTypeArray => _kSecPropertyTypeArray.value;

  set kSecPropertyTypeArray(CFStringRef value) =>
      _kSecPropertyTypeArray.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeNumber =
      _lookup<CFStringRef>('kSecPropertyTypeNumber');

  CFStringRef get kSecPropertyTypeNumber => _kSecPropertyTypeNumber.value;

  set kSecPropertyTypeNumber(CFStringRef value) =>
      _kSecPropertyTypeNumber.value = value;

  CFDictionaryRef SecCertificateCopyValues(
    SecCertificateRef certificate,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyValues(
      certificate,
      keys,
      error,
    );
  }

  late final _SecCertificateCopyValuesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(SecCertificateRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyValues');
  late final _SecCertificateCopyValues =
      _SecCertificateCopyValuesPtr.asFunction<
          CFDictionaryRef Function(
              SecCertificateRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyLongDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyLongDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyLongDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyLongDescription');
  late final _SecCertificateCopyLongDescription =
      _SecCertificateCopyLongDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyShortDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyShortDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyShortDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyShortDescription');
  late final _SecCertificateCopyShortDescription =
      _SecCertificateCopyShortDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedIssuerContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedIssuerContent');
  late final _SecCertificateCopyNormalizedIssuerContent =
      _SecCertificateCopyNormalizedIssuerContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedSubjectContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedSubjectContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedSubjectContent');
  late final _SecCertificateCopyNormalizedSubjectContent =
      _SecCertificateCopyNormalizedSubjectContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecIdentityGetTypeID() {
    return _SecIdentityGetTypeID();
  }

  late final _SecIdentityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecIdentityGetTypeID');
  late final _SecIdentityGetTypeID =
      _SecIdentityGetTypeIDPtr.asFunction<int Function()>();

  int SecIdentityCreateWithCertificate(
    CFTypeRef keychainOrArray,
    SecCertificateRef certificateRef,
    ffi.Pointer<SecIdentityRef> identityRef,
  ) {
    return _SecIdentityCreateWithCertificate(
      keychainOrArray,
      certificateRef,
      identityRef,
    );
  }

  late final _SecIdentityCreateWithCertificatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>>(
      'SecIdentityCreateWithCertificate');
  late final _SecIdentityCreateWithCertificate =
      _SecIdentityCreateWithCertificatePtr.asFunction<
          int Function(
              CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>();

  int SecIdentityCopyCertificate(
    SecIdentityRef identityRef,
    ffi.Pointer<SecCertificateRef> certificateRef,
  ) {
    return _SecIdentityCopyCertificate(
      identityRef,
      certificateRef,
    );
  }

  late final _SecIdentityCopyCertificatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecCertificateRef>)>>('SecIdentityCopyCertificate');
  late final _SecIdentityCopyCertificate =
      _SecIdentityCopyCertificatePtr.asFunction<
          int Function(SecIdentityRef, ffi.Pointer<SecCertificateRef>)>();

  int SecIdentityCopyPrivateKey(
    SecIdentityRef identityRef,
    ffi.Pointer<SecKeyRef> privateKeyRef,
  ) {
    return _SecIdentityCopyPrivateKey(
      identityRef,
      privateKeyRef,
    );
  }

  late final _SecIdentityCopyPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecKeyRef>)>>('SecIdentityCopyPrivateKey');
  late final _SecIdentityCopyPrivateKey = _SecIdentityCopyPrivateKeyPtr
      .asFunction<int Function(SecIdentityRef, ffi.Pointer<SecKeyRef>)>();

  int SecIdentityCopyPreference(
    CFStringRef name,
    int keyUsage,
    CFArrayRef validIssuers,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentityCopyPreference(
      name,
      keyUsage,
      validIssuers,
      identity,
    );
  }

  late final _SecIdentityCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, CSSM_KEYUSE, CFArrayRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentityCopyPreference');
  late final _SecIdentityCopyPreference =
      _SecIdentityCopyPreferencePtr.asFunction<
          int Function(
              CFStringRef, int, CFArrayRef, ffi.Pointer<SecIdentityRef>)>();

  SecIdentityRef SecIdentityCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
    CFArrayRef validIssuers,
  ) {
    return _SecIdentityCopyPreferred(
      name,
      keyUsage,
      validIssuers,
    );
  }

  late final _SecIdentityCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef,
              CFArrayRef)>>('SecIdentityCopyPreferred');
  late final _SecIdentityCopyPreferred =
      _SecIdentityCopyPreferredPtr.asFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef, CFArrayRef)>();

  int SecIdentitySetPreference(
    SecIdentityRef identity,
    CFStringRef name,
    int keyUsage,
  ) {
    return _SecIdentitySetPreference(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CSSM_KEYUSE)>>('SecIdentitySetPreference');
  late final _SecIdentitySetPreference = _SecIdentitySetPreferencePtr
      .asFunction<int Function(SecIdentityRef, CFStringRef, int)>();

  int SecIdentitySetPreferred(
    SecIdentityRef identity,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecIdentitySetPreferred(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CFArrayRef)>>('SecIdentitySetPreferred');
  late final _SecIdentitySetPreferred = _SecIdentitySetPreferredPtr.asFunction<
      int Function(SecIdentityRef, CFStringRef, CFArrayRef)>();

  int SecIdentityCopySystemIdentity(
    CFStringRef domain,
    ffi.Pointer<SecIdentityRef> idRef,
    ffi.Pointer<CFStringRef> actualDomain,
  ) {
    return _SecIdentityCopySystemIdentity(
      domain,
      idRef,
      actualDomain,
    );
  }

  late final _SecIdentityCopySystemIdentityPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>>('SecIdentityCopySystemIdentity');
  late final _SecIdentityCopySystemIdentity =
      _SecIdentityCopySystemIdentityPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>();

  int SecIdentitySetSystemIdentity(
    CFStringRef domain,
    SecIdentityRef idRef,
  ) {
    return _SecIdentitySetSystemIdentity(
      domain,
      idRef,
    );
  }

  late final _SecIdentitySetSystemIdentityPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(CFStringRef, SecIdentityRef)>>(
      'SecIdentitySetSystemIdentity');
  late final _SecIdentitySetSystemIdentity = _SecIdentitySetSystemIdentityPtr
      .asFunction<int Function(CFStringRef, SecIdentityRef)>();

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainDefault =
      _lookup<CFStringRef>('kSecIdentityDomainDefault');

  CFStringRef get kSecIdentityDomainDefault => _kSecIdentityDomainDefault.value;

  set kSecIdentityDomainDefault(CFStringRef value) =>
      _kSecIdentityDomainDefault.value = value;

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainKerberosKDC =
      _lookup<CFStringRef>('kSecIdentityDomainKerberosKDC');

  CFStringRef get kSecIdentityDomainKerberosKDC =>
      _kSecIdentityDomainKerberosKDC.value;

  set kSecIdentityDomainKerberosKDC(CFStringRef value) =>
      _kSecIdentityDomainKerberosKDC.value = value;

  sec_trust_t sec_trust_create(
    SecTrustRef trust,
  ) {
    return _sec_trust_create(
      trust,
    );
  }

  late final _sec_trust_createPtr =
      _lookup<ffi.NativeFunction<sec_trust_t Function(SecTrustRef)>>(
          'sec_trust_create');
  late final _sec_trust_create =
      _sec_trust_createPtr.asFunction<sec_trust_t Function(SecTrustRef)>();

  SecTrustRef sec_trust_copy_ref(
    sec_trust_t trust,
  ) {
    return _sec_trust_copy_ref(
      trust,
    );
  }

  late final _sec_trust_copy_refPtr =
      _lookup<ffi.NativeFunction<SecTrustRef Function(sec_trust_t)>>(
          'sec_trust_copy_ref');
  late final _sec_trust_copy_ref =
      _sec_trust_copy_refPtr.asFunction<SecTrustRef Function(sec_trust_t)>();

  sec_identity_t sec_identity_create(
    SecIdentityRef identity,
  ) {
    return _sec_identity_create(
      identity,
    );
  }

  late final _sec_identity_createPtr =
      _lookup<ffi.NativeFunction<sec_identity_t Function(SecIdentityRef)>>(
          'sec_identity_create');
  late final _sec_identity_create = _sec_identity_createPtr
      .asFunction<sec_identity_t Function(SecIdentityRef)>();

  sec_identity_t sec_identity_create_with_certificates(
    SecIdentityRef identity,
    CFArrayRef certificates,
  ) {
    return _sec_identity_create_with_certificates(
      identity,
      certificates,
    );
  }

  late final _sec_identity_create_with_certificatesPtr = _lookup<
      ffi.NativeFunction<
          sec_identity_t Function(SecIdentityRef,
              CFArrayRef)>>('sec_identity_create_with_certificates');
  late final _sec_identity_create_with_certificates =
      _sec_identity_create_with_certificatesPtr
          .asFunction<sec_identity_t Function(SecIdentityRef, CFArrayRef)>();

  bool sec_identity_access_certificates(
    sec_identity_t identity,
    ffi.Pointer<ObjCObject> handler,
  ) {
    return _sec_identity_access_certificates(
          identity,
          handler,
        ) !=
        0;
  }

  late final _sec_identity_access_certificatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(sec_identity_t,
              ffi.Pointer<ObjCObject>)>>('sec_identity_access_certificates');
  late final _sec_identity_access_certificates =
      _sec_identity_access_certificatesPtr
          .asFunction<int Function(sec_identity_t, ffi.Pointer<ObjCObject>)>();

  SecIdentityRef sec_identity_copy_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_ref(
      identity,
    );
  }

  late final _sec_identity_copy_refPtr =
      _lookup<ffi.NativeFunction<SecIdentityRef Function(sec_identity_t)>>(
          'sec_identity_copy_ref');
  late final _sec_identity_copy_ref = _sec_identity_copy_refPtr
      .asFunction<SecIdentityRef Function(sec_identity_t)>();

  CFArrayRef sec_identity_copy_certificates_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_certificates_ref(
      identity,
    );
  }

  late final _sec_identity_copy_certificates_refPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(sec_identity_t)>>(
          'sec_identity_copy_certificates_ref');
  late final _sec_identity_copy_certificates_ref =
      _sec_identity_copy_certificates_refPtr
          .asFunction<CFArrayRef Function(sec_identity_t)>();

  sec_certificate_t sec_certificate_create(
    SecCertificateRef certificate,
  ) {
    return _sec_certificate_create(
      certificate,
    );
  }

  late final _sec_certificate_createPtr = _lookup<
          ffi.NativeFunction<sec_certificate_t Function(SecCertificateRef)>>(
      'sec_certificate_create');
  late final _sec_certificate_create = _sec_certificate_createPtr
      .asFunction<sec_certificate_t Function(SecCertificateRef)>();

  SecCertificateRef sec_certificate_copy_ref(
    sec_certificate_t certificate,
  ) {
    return _sec_certificate_copy_ref(
      certificate,
    );
  }

  late final _sec_certificate_copy_refPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(sec_certificate_t)>>(
      'sec_certificate_copy_ref');
  late final _sec_certificate_copy_ref = _sec_certificate_copy_refPtr
      .asFunction<SecCertificateRef Function(sec_certificate_t)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_negotiated_protocol(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_protocol');
  late final _sec_protocol_metadata_get_negotiated_protocol =
      _sec_protocol_metadata_get_negotiated_protocolPtr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_copy_peer_public_key(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_copy_peer_public_key(
      metadata,
    );
  }

  late final _sec_protocol_metadata_copy_peer_public_keyPtr = _lookup<
          ffi.NativeFunction<
              dispatch_data_t Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_copy_peer_public_key');
  late final _sec_protocol_metadata_copy_peer_public_key =
      _sec_protocol_metadata_copy_peer_public_keyPtr
          .asFunction<dispatch_data_t Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_protocol_version(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_tls_protocol_version =
      _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol_version(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_protocol_version =
      _sec_protocol_metadata_get_negotiated_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_ciphersuite(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuite =
      _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_ciphersuite(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_ciphersuitePtr = _lookup<
          ffi.NativeFunction<SSLCipherSuite Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_ciphersuite =
      _sec_protocol_metadata_get_negotiated_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_get_early_data_accepted(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_early_data_accepted(
          metadata,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_get_early_data_acceptedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_early_data_accepted');
  late final _sec_protocol_metadata_get_early_data_accepted =
      _sec_protocol_metadata_get_early_data_acceptedPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_access_peer_certificate_chain(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<ObjCObject> handler,
  ) {
    return _sec_protocol_metadata_access_peer_certificate_chain(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_peer_certificate_chainPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>>(
      'sec_protocol_metadata_access_peer_certificate_chain');
  late final _sec_protocol_metadata_access_peer_certificate_chain =
      _sec_protocol_metadata_access_peer_certificate_chainPtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>();

  bool sec_protocol_metadata_access_ocsp_response(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<ObjCObject> handler,
  ) {
    return _sec_protocol_metadata_access_ocsp_response(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_ocsp_responsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>>(
      'sec_protocol_metadata_access_ocsp_response');
  late final _sec_protocol_metadata_access_ocsp_response =
      _sec_protocol_metadata_access_ocsp_responsePtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>();

  bool sec_protocol_metadata_access_supported_signature_algorithms(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<ObjCObject> handler,
  ) {
    return _sec_protocol_metadata_access_supported_signature_algorithms(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_supported_signature_algorithmsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>>(
          'sec_protocol_metadata_access_supported_signature_algorithms');
  late final _sec_protocol_metadata_access_supported_signature_algorithms =
      _sec_protocol_metadata_access_supported_signature_algorithmsPtr
          .asFunction<
              int Function(sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>();

  bool sec_protocol_metadata_access_distinguished_names(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<ObjCObject> handler,
  ) {
    return _sec_protocol_metadata_access_distinguished_names(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_distinguished_namesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>>(
      'sec_protocol_metadata_access_distinguished_names');
  late final _sec_protocol_metadata_access_distinguished_names =
      _sec_protocol_metadata_access_distinguished_namesPtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>();

  bool sec_protocol_metadata_access_pre_shared_keys(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<ObjCObject> handler,
  ) {
    return _sec_protocol_metadata_access_pre_shared_keys(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_pre_shared_keysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>>(
      'sec_protocol_metadata_access_pre_shared_keys');
  late final _sec_protocol_metadata_access_pre_shared_keys =
      _sec_protocol_metadata_access_pre_shared_keysPtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_server_name(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_server_name(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_server_name');
  late final _sec_protocol_metadata_get_server_name =
      _sec_protocol_metadata_get_server_namePtr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_peers_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_peers_are_equal(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_peers_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_peers_are_equal');
  late final _sec_protocol_metadata_peers_are_equal =
      _sec_protocol_metadata_peers_are_equalPtr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_challenge_parameters_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_challenge_parameters_are_equal(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_challenge_parameters_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_challenge_parameters_are_equal');
  late final _sec_protocol_metadata_challenge_parameters_are_equal =
      _sec_protocol_metadata_challenge_parameters_are_equalPtr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_create_secret(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret(
      metadata,
      label_len,
      label,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secretPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('sec_protocol_metadata_create_secret');
  late final _sec_protocol_metadata_create_secret =
      _sec_protocol_metadata_create_secretPtr.asFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t, int, ffi.Pointer<pkg_ffi.Char>, int)>();

  dispatch_data_t sec_protocol_metadata_create_secret_with_context(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int context_len,
    ffi.Pointer<ffi.Uint8> context,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret_with_context(
      metadata,
      label_len,
      label,
      context_len,
      context,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secret_with_contextPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              pkg_ffi
                  .Size)>>('sec_protocol_metadata_create_secret_with_context');
  late final _sec_protocol_metadata_create_secret_with_context =
      _sec_protocol_metadata_create_secret_with_contextPtr.asFunction<
          dispatch_data_t Function(sec_protocol_metadata_t, int,
              ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<ffi.Uint8>, int)>();

  bool sec_protocol_options_are_equal(
    sec_protocol_options_t optionsA,
    sec_protocol_options_t optionsB,
  ) {
    return _sec_protocol_options_are_equal(
          optionsA,
          optionsB,
        ) !=
        0;
  }

  late final _sec_protocol_options_are_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(sec_protocol_options_t,
              sec_protocol_options_t)>>('sec_protocol_options_are_equal');
  late final _sec_protocol_options_are_equal =
      _sec_protocol_options_are_equalPtr.asFunction<
          int Function(sec_protocol_options_t, sec_protocol_options_t)>();

  void sec_protocol_options_set_local_identity(
    sec_protocol_options_t options,
    sec_identity_t identity,
  ) {
    return _sec_protocol_options_set_local_identity(
      options,
      identity,
    );
  }

  late final _sec_protocol_options_set_local_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              sec_identity_t)>>('sec_protocol_options_set_local_identity');
  late final _sec_protocol_options_set_local_identity =
      _sec_protocol_options_set_local_identityPtr
          .asFunction<void Function(sec_protocol_options_t, sec_identity_t)>();

  void sec_protocol_options_append_tls_ciphersuite(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_append_tls_ciphersuite');
  late final _sec_protocol_options_append_tls_ciphersuite =
      _sec_protocol_options_append_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              SSLCipherSuite)>>('sec_protocol_options_add_tls_ciphersuite');
  late final _sec_protocol_options_add_tls_ciphersuite =
      _sec_protocol_options_add_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_append_tls_ciphersuite_group(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite_group(
      options,
      group,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuite_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_append_tls_ciphersuite_group');
  late final _sec_protocol_options_append_tls_ciphersuite_group =
      _sec_protocol_options_append_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite_group(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite_group(
      options,
      group,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuite_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_add_tls_ciphersuite_group');
  late final _sec_protocol_options_add_tls_ciphersuite_group =
      _sec_protocol_options_add_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_min_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_min_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_min_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_tls_min_version');
  late final _sec_protocol_options_set_tls_min_version =
      _sec_protocol_options_set_tls_min_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_min_tls_protocol_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_min_tls_protocol_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_min_tls_protocol_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_min_tls_protocol_version');
  late final _sec_protocol_options_set_min_tls_protocol_version =
      _sec_protocol_options_set_min_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_min_tls_protocol_version() {
    return _sec_protocol_options_get_default_min_tls_protocol_version();
  }

  late final _sec_protocol_options_get_default_min_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_min_tls_protocol_version');
  late final _sec_protocol_options_get_default_min_tls_protocol_version =
      _sec_protocol_options_get_default_min_tls_protocol_versionPtr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_min_dtls_protocol_version() {
    return _sec_protocol_options_get_default_min_dtls_protocol_version();
  }

  late final _sec_protocol_options_get_default_min_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_min_dtls_protocol_version');
  late final _sec_protocol_options_get_default_min_dtls_protocol_version =
      _sec_protocol_options_get_default_min_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  void sec_protocol_options_set_tls_max_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_max_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_max_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_tls_max_version');
  late final _sec_protocol_options_set_tls_max_version =
      _sec_protocol_options_set_tls_max_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_max_tls_protocol_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_max_tls_protocol_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_max_tls_protocol_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_max_tls_protocol_version');
  late final _sec_protocol_options_set_max_tls_protocol_version =
      _sec_protocol_options_set_max_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_max_tls_protocol_version() {
    return _sec_protocol_options_get_default_max_tls_protocol_version();
  }

  late final _sec_protocol_options_get_default_max_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_max_tls_protocol_version');
  late final _sec_protocol_options_get_default_max_tls_protocol_version =
      _sec_protocol_options_get_default_max_tls_protocol_versionPtr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_max_dtls_protocol_version() {
    return _sec_protocol_options_get_default_max_dtls_protocol_version();
  }

  late final _sec_protocol_options_get_default_max_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_max_dtls_protocol_version');
  late final _sec_protocol_options_get_default_max_dtls_protocol_version =
      _sec_protocol_options_get_default_max_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  bool sec_protocol_options_get_enable_encrypted_client_hello(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_enable_encrypted_client_hello(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_enable_encrypted_client_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_enable_encrypted_client_hello');
  late final _sec_protocol_options_get_enable_encrypted_client_hello =
      _sec_protocol_options_get_enable_encrypted_client_helloPtr
          .asFunction<int Function(sec_protocol_options_t)>();

  bool sec_protocol_options_get_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_quic_use_legacy_codepoint(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_quic_use_legacy_codepointPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_quic_use_legacy_codepoint');
  late final _sec_protocol_options_get_quic_use_legacy_codepoint =
      _sec_protocol_options_get_quic_use_legacy_codepointPtr
          .asFunction<int Function(sec_protocol_options_t)>();

  void sec_protocol_options_add_tls_application_protocol(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> application_protocol,
  ) {
    return _sec_protocol_options_add_tls_application_protocol(
      options,
      application_protocol,
    );
  }

  late final _sec_protocol_options_add_tls_application_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_add_tls_application_protocol');
  late final _sec_protocol_options_add_tls_application_protocol =
      _sec_protocol_options_add_tls_application_protocolPtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_server_name(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> server_name,
  ) {
    return _sec_protocol_options_set_tls_server_name(
      options,
      server_name,
    );
  }

  late final _sec_protocol_options_set_tls_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_set_tls_server_name');
  late final _sec_protocol_options_set_tls_server_name =
      _sec_protocol_options_set_tls_server_namePtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_diffie_hellman_parameters(
    sec_protocol_options_t options,
    dispatch_data_t params,
  ) {
    return _sec_protocol_options_set_tls_diffie_hellman_parameters(
      options,
      params,
    );
  }

  late final _sec_protocol_options_set_tls_diffie_hellman_parametersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_diffie_hellman_parameters');
  late final _sec_protocol_options_set_tls_diffie_hellman_parameters =
      _sec_protocol_options_set_tls_diffie_hellman_parametersPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_add_pre_shared_key(
    sec_protocol_options_t options,
    dispatch_data_t psk,
    dispatch_data_t psk_identity,
  ) {
    return _sec_protocol_options_add_pre_shared_key(
      options,
      psk,
      psk_identity,
    );
  }

  late final _sec_protocol_options_add_pre_shared_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, dispatch_data_t,
              dispatch_data_t)>>('sec_protocol_options_add_pre_shared_key');
  late final _sec_protocol_options_add_pre_shared_key =
      _sec_protocol_options_add_pre_shared_keyPtr.asFunction<
          void Function(
              sec_protocol_options_t, dispatch_data_t, dispatch_data_t)>();

  void sec_protocol_options_set_tls_pre_shared_key_identity_hint(
    sec_protocol_options_t options,
    dispatch_data_t psk_identity_hint,
  ) {
    return _sec_protocol_options_set_tls_pre_shared_key_identity_hint(
      options,
      psk_identity_hint,
    );
  }

  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_pre_shared_key_identity_hint');
  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hint =
      _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_set_pre_shared_key_selection_block(
    sec_protocol_options_t options,
    sec_protocol_pre_shared_key_selection_t psk_selection_block,
    dispatch_queue_t psk_selection_queue,
  ) {
    return _sec_protocol_options_set_pre_shared_key_selection_block(
      options,
      psk_selection_block,
      psk_selection_queue,
    );
  }

  late final _sec_protocol_options_set_pre_shared_key_selection_blockPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      sec_protocol_options_t,
                      sec_protocol_pre_shared_key_selection_t,
                      dispatch_queue_t)>>(
          'sec_protocol_options_set_pre_shared_key_selection_block');
  late final _sec_protocol_options_set_pre_shared_key_selection_block =
      _sec_protocol_options_set_pre_shared_key_selection_blockPtr.asFunction<
          void Function(sec_protocol_options_t,
              sec_protocol_pre_shared_key_selection_t, dispatch_queue_t)>();

  void sec_protocol_options_set_tls_tickets_enabled(
    sec_protocol_options_t options,
    bool tickets_enabled,
  ) {
    return _sec_protocol_options_set_tls_tickets_enabled(
      options,
      tickets_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_tickets_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_tickets_enabled');
  late final _sec_protocol_options_set_tls_tickets_enabled =
      _sec_protocol_options_set_tls_tickets_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_is_fallback_attempt(
    sec_protocol_options_t options,
    bool is_fallback_attempt,
  ) {
    return _sec_protocol_options_set_tls_is_fallback_attempt(
      options,
      is_fallback_attempt ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_is_fallback_attemptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_is_fallback_attempt');
  late final _sec_protocol_options_set_tls_is_fallback_attempt =
      _sec_protocol_options_set_tls_is_fallback_attemptPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_resumption_enabled(
    sec_protocol_options_t options,
    bool resumption_enabled,
  ) {
    return _sec_protocol_options_set_tls_resumption_enabled(
      options,
      resumption_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_resumption_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_resumption_enabled');
  late final _sec_protocol_options_set_tls_resumption_enabled =
      _sec_protocol_options_set_tls_resumption_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_false_start_enabled(
    sec_protocol_options_t options,
    bool false_start_enabled,
  ) {
    return _sec_protocol_options_set_tls_false_start_enabled(
      options,
      false_start_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_false_start_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_false_start_enabled');
  late final _sec_protocol_options_set_tls_false_start_enabled =
      _sec_protocol_options_set_tls_false_start_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_ocsp_enabled(
    sec_protocol_options_t options,
    bool ocsp_enabled,
  ) {
    return _sec_protocol_options_set_tls_ocsp_enabled(
      options,
      ocsp_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_ocsp_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_ocsp_enabled');
  late final _sec_protocol_options_set_tls_ocsp_enabled =
      _sec_protocol_options_set_tls_ocsp_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_sct_enabled(
    sec_protocol_options_t options,
    bool sct_enabled,
  ) {
    return _sec_protocol_options_set_tls_sct_enabled(
      options,
      sct_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_sct_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_sct_enabled');
  late final _sec_protocol_options_set_tls_sct_enabled =
      _sec_protocol_options_set_tls_sct_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_renegotiation_enabled(
    sec_protocol_options_t options,
    bool renegotiation_enabled,
  ) {
    return _sec_protocol_options_set_tls_renegotiation_enabled(
      options,
      renegotiation_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_renegotiation_enabledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_tls_renegotiation_enabled');
  late final _sec_protocol_options_set_tls_renegotiation_enabled =
      _sec_protocol_options_set_tls_renegotiation_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_required(
    sec_protocol_options_t options,
    bool peer_authentication_required,
  ) {
    return _sec_protocol_options_set_peer_authentication_required(
      options,
      peer_authentication_required ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_requiredPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_required');
  late final _sec_protocol_options_set_peer_authentication_required =
      _sec_protocol_options_set_peer_authentication_requiredPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_optional(
    sec_protocol_options_t options,
    bool peer_authentication_optional,
  ) {
    return _sec_protocol_options_set_peer_authentication_optional(
      options,
      peer_authentication_optional ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_optionalPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_optional');
  late final _sec_protocol_options_set_peer_authentication_optional =
      _sec_protocol_options_set_peer_authentication_optionalPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_enable_encrypted_client_hello(
    sec_protocol_options_t options,
    bool enable_encrypted_client_hello,
  ) {
    return _sec_protocol_options_set_enable_encrypted_client_hello(
      options,
      enable_encrypted_client_hello ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_enable_encrypted_client_helloPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_enable_encrypted_client_hello');
  late final _sec_protocol_options_set_enable_encrypted_client_hello =
      _sec_protocol_options_set_enable_encrypted_client_helloPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
    bool quic_use_legacy_codepoint,
  ) {
    return _sec_protocol_options_set_quic_use_legacy_codepoint(
      options,
      quic_use_legacy_codepoint ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_quic_use_legacy_codepointPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_quic_use_legacy_codepoint');
  late final _sec_protocol_options_set_quic_use_legacy_codepoint =
      _sec_protocol_options_set_quic_use_legacy_codepointPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_key_update_block(
    sec_protocol_options_t options,
    sec_protocol_key_update_t key_update_block,
    dispatch_queue_t key_update_queue,
  ) {
    return _sec_protocol_options_set_key_update_block(
      options,
      key_update_block,
      key_update_queue,
    );
  }

  late final _sec_protocol_options_set_key_update_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>>('sec_protocol_options_set_key_update_block');
  late final _sec_protocol_options_set_key_update_block =
      _sec_protocol_options_set_key_update_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_challenge_block(
    sec_protocol_options_t options,
    sec_protocol_challenge_t challenge_block,
    dispatch_queue_t challenge_queue,
  ) {
    return _sec_protocol_options_set_challenge_block(
      options,
      challenge_block,
      challenge_queue,
    );
  }

  late final _sec_protocol_options_set_challenge_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>>('sec_protocol_options_set_challenge_block');
  late final _sec_protocol_options_set_challenge_block =
      _sec_protocol_options_set_challenge_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_verify_block(
    sec_protocol_options_t options,
    sec_protocol_verify_t verify_block,
    dispatch_queue_t verify_block_queue,
  ) {
    return _sec_protocol_options_set_verify_block(
      options,
      verify_block,
      verify_block_queue,
    );
  }

  late final _sec_protocol_options_set_verify_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>>('sec_protocol_options_set_verify_block');
  late final _sec_protocol_options_set_verify_block =
      _sec_protocol_options_set_verify_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_default =
      _lookup<CFStringRef>('kSSLSessionConfig_default');

  CFStringRef get kSSLSessionConfig_default => _kSSLSessionConfig_default.value;

  set kSSLSessionConfig_default(CFStringRef value) =>
      _kSSLSessionConfig_default.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1 =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1');

  CFStringRef get kSSLSessionConfig_ATSv1 => _kSSLSessionConfig_ATSv1.value;

  set kSSLSessionConfig_ATSv1(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1_noPFS =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1_noPFS');

  CFStringRef get kSSLSessionConfig_ATSv1_noPFS =>
      _kSSLSessionConfig_ATSv1_noPFS.value;

  set kSSLSessionConfig_ATSv1_noPFS(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1_noPFS.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_standard =
      _lookup<CFStringRef>('kSSLSessionConfig_standard');

  CFStringRef get kSSLSessionConfig_standard =>
      _kSSLSessionConfig_standard.value;

  set kSSLSessionConfig_standard(CFStringRef value) =>
      _kSSLSessionConfig_standard.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_RC4_fallback');

  CFStringRef get kSSLSessionConfig_RC4_fallback =>
      _kSSLSessionConfig_RC4_fallback.value;

  set kSSLSessionConfig_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_fallback =>
      _kSSLSessionConfig_TLSv1_fallback.value;

  set kSSLSessionConfig_TLSv1_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_RC4_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_RC4_fallback =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value;

  set kSSLSessionConfig_TLSv1_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy');

  CFStringRef get kSSLSessionConfig_legacy => _kSSLSessionConfig_legacy.value;

  set kSSLSessionConfig_legacy(CFStringRef value) =>
      _kSSLSessionConfig_legacy.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy_DHE =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy_DHE');

  CFStringRef get kSSLSessionConfig_legacy_DHE =>
      _kSSLSessionConfig_legacy_DHE.value;

  set kSSLSessionConfig_legacy_DHE(CFStringRef value) =>
      _kSSLSessionConfig_legacy_DHE.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_anonymous =
      _lookup<CFStringRef>('kSSLSessionConfig_anonymous');

  CFStringRef get kSSLSessionConfig_anonymous =>
      _kSSLSessionConfig_anonymous.value;

  set kSSLSessionConfig_anonymous(CFStringRef value) =>
      _kSSLSessionConfig_anonymous.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_3DES_fallback');

  CFStringRef get kSSLSessionConfig_3DES_fallback =>
      _kSSLSessionConfig_3DES_fallback.value;

  set kSSLSessionConfig_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_3DES_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_3DES_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_3DES_fallback =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value;

  set kSSLSessionConfig_TLSv1_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value = value;

  int SSLContextGetTypeID() {
    return _SSLContextGetTypeID();
  }

  late final _SSLContextGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SSLContextGetTypeID');
  late final _SSLContextGetTypeID =
      _SSLContextGetTypeIDPtr.asFunction<int Function()>();

  SSLContextRef SSLCreateContext(
    CFAllocatorRef alloc,
    int protocolSide,
    int connectionType,
  ) {
    return _SSLCreateContext(
      alloc,
      protocolSide,
      connectionType,
    );
  }

  late final _SSLCreateContextPtr = _lookup<
      ffi.NativeFunction<
          SSLContextRef Function(
              CFAllocatorRef, ffi.Int32, ffi.Int32)>>('SSLCreateContext');
  late final _SSLCreateContext = _SSLCreateContextPtr.asFunction<
      SSLContextRef Function(CFAllocatorRef, int, int)>();

  int SSLNewContext(
    int isServer,
    ffi.Pointer<SSLContextRef> contextPtr,
  ) {
    return _SSLNewContext(
      isServer,
      contextPtr,
    );
  }

  late final _SSLNewContextPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              Boolean, ffi.Pointer<SSLContextRef>)>>('SSLNewContext');
  late final _SSLNewContext = _SSLNewContextPtr.asFunction<
      int Function(int, ffi.Pointer<SSLContextRef>)>();

  int SSLDisposeContext(
    SSLContextRef context,
  ) {
    return _SSLDisposeContext(
      context,
    );
  }

  late final _SSLDisposeContextPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLDisposeContext');
  late final _SSLDisposeContext =
      _SSLDisposeContextPtr.asFunction<int Function(SSLContextRef)>();

  int SSLGetSessionState(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _SSLGetSessionState(
      context,
      state,
    );
  }

  late final _SSLGetSessionStatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Int32>)>>('SSLGetSessionState');
  late final _SSLGetSessionState = _SSLGetSessionStatePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetSessionOption(
    SSLContextRef context,
    int option,
    int value,
  ) {
    return _SSLSetSessionOption(
      context,
      option,
      value,
    );
  }

  late final _SSLSetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Int32, Boolean)>>('SSLSetSessionOption');
  late final _SSLSetSessionOption = _SSLSetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, int)>();

  int SSLGetSessionOption(
    SSLContextRef context,
    int option,
    ffi.Pointer<Boolean> value,
  ) {
    return _SSLGetSessionOption(
      context,
      option,
      value,
    );
  }

  late final _SSLGetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              ffi.Pointer<Boolean>)>>('SSLGetSessionOption');
  late final _SSLGetSessionOption = _SSLGetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetIOFuncs(
    SSLContextRef context,
    SSLReadFunc readFunc,
    SSLWriteFunc writeFunc,
  ) {
    return _SSLSetIOFuncs(
      context,
      readFunc,
      writeFunc,
    );
  }

  late final _SSLSetIOFuncsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLReadFunc, SSLWriteFunc)>>('SSLSetIOFuncs');
  late final _SSLSetIOFuncs = _SSLSetIOFuncsPtr.asFunction<
      int Function(SSLContextRef, SSLReadFunc, SSLWriteFunc)>();

  int SSLSetSessionConfig(
    SSLContextRef context,
    CFStringRef config,
  ) {
    return _SSLSetSessionConfig(
      context,
      config,
    );
  }

  late final _SSLSetSessionConfigPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, CFStringRef)>>(
      'SSLSetSessionConfig');
  late final _SSLSetSessionConfig = _SSLSetSessionConfigPtr.asFunction<
      int Function(SSLContextRef, CFStringRef)>();

  int SSLSetProtocolVersionMin(
    SSLContextRef context,
    int minVersion,
  ) {
    return _SSLSetProtocolVersionMin(
      context,
      minVersion,
    );
  }

  late final _SSLSetProtocolVersionMinPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersionMin');
  late final _SSLSetProtocolVersionMin = _SSLSetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMin(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> minVersion,
  ) {
    return _SSLGetProtocolVersionMin(
      context,
      minVersion,
    );
  }

  late final _SSLGetProtocolVersionMinPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersionMin');
  late final _SSLGetProtocolVersionMin = _SSLGetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetProtocolVersionMax(
    SSLContextRef context,
    int maxVersion,
  ) {
    return _SSLSetProtocolVersionMax(
      context,
      maxVersion,
    );
  }

  late final _SSLSetProtocolVersionMaxPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersionMax');
  late final _SSLSetProtocolVersionMax = _SSLSetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMax(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> maxVersion,
  ) {
    return _SSLGetProtocolVersionMax(
      context,
      maxVersion,
    );
  }

  late final _SSLGetProtocolVersionMaxPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersionMax');
  late final _SSLGetProtocolVersionMax = _SSLGetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetProtocolVersionEnabled(
    SSLContextRef context,
    int protocol,
    int enable,
  ) {
    return _SSLSetProtocolVersionEnabled(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLSetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              Boolean)>>('SSLSetProtocolVersionEnabled');
  late final _SSLSetProtocolVersionEnabled = _SSLSetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, int)>();

  int SSLGetProtocolVersionEnabled(
    SSLContextRef context,
    int protocol,
    ffi.Pointer<Boolean> enable,
  ) {
    return _SSLGetProtocolVersionEnabled(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLGetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              ffi.Pointer<Boolean>)>>('SSLGetProtocolVersionEnabled');
  late final _SSLGetProtocolVersionEnabled = _SSLGetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetProtocolVersion(
    SSLContextRef context,
    int version,
  ) {
    return _SSLSetProtocolVersion(
      context,
      version,
    );
  }

  late final _SSLSetProtocolVersionPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersion');
  late final _SSLSetProtocolVersion =
      _SSLSetProtocolVersionPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> protocol,
  ) {
    return _SSLGetProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetProtocolVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersion');
  late final _SSLGetProtocolVersion = _SSLGetProtocolVersionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetCertificate');
  late final _SSLSetCertificate = _SSLSetCertificatePtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetConnection(
    SSLContextRef context,
    SSLConnectionRef connection,
  ) {
    return _SSLSetConnection(
      context,
      connection,
    );
  }

  late final _SSLSetConnectionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLConnectionRef)>>('SSLSetConnection');
  late final _SSLSetConnection = _SSLSetConnectionPtr.asFunction<
      int Function(SSLContextRef, SSLConnectionRef)>();

  int SSLGetConnection(
    SSLContextRef context,
    ffi.Pointer<SSLConnectionRef> connection,
  ) {
    return _SSLGetConnection(
      context,
      connection,
    );
  }

  late final _SSLGetConnectionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLConnectionRef>)>>('SSLGetConnection');
  late final _SSLGetConnection = _SSLGetConnectionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLConnectionRef>)>();

  int SSLSetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    int peerNameLen,
  ) {
    return _SSLSetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLSetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('SSLSetPeerDomainName');
  late final _SSLSetPeerDomainName = _SSLSetPeerDomainNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int SSLGetPeerDomainNameLength(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainNameLength(
      context,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainNameLength');
  late final _SSLGetPeerDomainNameLength = _SSLGetPeerDomainNameLengthPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainName');
  late final _SSLGetPeerDomainName = _SSLGetPeerDomainNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerNameLength(
    SSLContextRef ctx,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerNameLength(
      ctx,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerNameLength');
  late final _SSLCopyRequestedPeerNameLength =
      _SSLCopyRequestedPeerNameLengthPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerName');
  late final _SSLCopyRequestedPeerName =
      _SSLCopyRequestedPeerNamePtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetDatagramHelloCookie(
    SSLContextRef dtlsContext,
    ffi.Pointer<ffi.Void> cookie,
    int cookieLen,
  ) {
    return _SSLSetDatagramHelloCookie(
      dtlsContext,
      cookie,
      cookieLen,
    );
  }

  late final _SSLSetDatagramHelloCookiePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDatagramHelloCookie');
  late final _SSLSetDatagramHelloCookie = _SSLSetDatagramHelloCookiePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    int maxSize,
  ) {
    return _SSLSetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLSetMaxDatagramRecordSizePtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, pkg_ffi.Size)>>(
      'SSLSetMaxDatagramRecordSize');
  late final _SSLSetMaxDatagramRecordSize = _SSLSetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> maxSize,
  ) {
    return _SSLGetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLGetMaxDatagramRecordSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetMaxDatagramRecordSize');
  late final _SSLGetMaxDatagramRecordSize = _SSLGetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> protocol,
  ) {
    return _SSLGetNegotiatedProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetNegotiatedProtocolVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetNegotiatedProtocolVersion');
  late final _SSLGetNegotiatedProtocolVersion =
      _SSLGetNegotiatedProtocolVersionPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLGetNumberSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberSupportedCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberSupportedCiphers');
  late final _SSLGetNumberSupportedCiphers = _SSLGetNumberSupportedCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetSupportedCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetSupportedCiphers');
  late final _SSLGetSupportedCiphers = _SSLGetSupportedCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNumberEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberEnabledCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberEnabledCiphers');
  late final _SSLGetNumberEnabledCiphers = _SSLGetNumberEnabledCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    int numCiphers,
  ) {
    return _SSLSetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLSetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              pkg_ffi.Size)>>('SSLSetEnabledCiphers');
  late final _SSLSetEnabledCiphers = _SSLSetEnabledCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>, int)>();

  int SSLGetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetEnabledCiphers');
  late final _SSLGetEnabledCiphers = _SSLGetEnabledCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetSessionTicketsEnabled(
    SSLContextRef context,
    int enabled,
  ) {
    return _SSLSetSessionTicketsEnabled(
      context,
      enabled,
    );
  }

  late final _SSLSetSessionTicketsEnabledPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetSessionTicketsEnabled');
  late final _SSLSetSessionTicketsEnabled = _SSLSetSessionTicketsEnabledPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLSetEnableCertVerify(
    SSLContextRef context,
    int enableVerify,
  ) {
    return _SSLSetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLSetEnableCertVerifyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetEnableCertVerify');
  late final _SSLSetEnableCertVerify =
      _SSLSetEnableCertVerifyPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetEnableCertVerify(
    SSLContextRef context,
    ffi.Pointer<Boolean> enableVerify,
  ) {
    return _SSLGetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLGetEnableCertVerifyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetEnableCertVerify');
  late final _SSLGetEnableCertVerify = _SSLGetEnableCertVerifyPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredCerts(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredCertsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredCerts');
  late final _SSLSetAllowsExpiredCerts = _SSLSetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredCerts(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredCertsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredCerts');
  late final _SSLGetAllowsExpiredCerts = _SSLGetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredRoots(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredRootsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredRoots');
  late final _SSLSetAllowsExpiredRoots = _SSLSetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredRoots(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredRoots');
  late final _SSLGetAllowsExpiredRoots = _SSLGetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsAnyRoot(
    SSLContextRef context,
    int anyRoot,
  ) {
    return _SSLSetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLSetAllowsAnyRootPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsAnyRoot');
  late final _SSLSetAllowsAnyRoot =
      _SSLSetAllowsAnyRootPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsAnyRoot(
    SSLContextRef context,
    ffi.Pointer<Boolean> anyRoot,
  ) {
    return _SSLGetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLGetAllowsAnyRootPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetAllowsAnyRoot');
  late final _SSLGetAllowsAnyRoot = _SSLGetAllowsAnyRootPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetTrustedRoots(
    SSLContextRef context,
    CFArrayRef trustedRoots,
    int replaceExisting,
  ) {
    return _SSLSetTrustedRoots(
      context,
      trustedRoots,
      replaceExisting,
    );
  }

  late final _SSLSetTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, CFArrayRef, Boolean)>>('SSLSetTrustedRoots');
  late final _SSLSetTrustedRoots = _SSLSetTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef, int)>();

  int SSLCopyTrustedRoots(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> trustedRoots,
  ) {
    return _SSLCopyTrustedRoots(
      context,
      trustedRoots,
    );
  }

  late final _SSLCopyTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyTrustedRoots');
  late final _SSLCopyTrustedRoots = _SSLCopyTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerCertificates(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certs,
  ) {
    return _SSLCopyPeerCertificates(
      context,
      certs,
    );
  }

  late final _SSLCopyPeerCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyPeerCertificates');
  late final _SSLCopyPeerCertificates = _SSLCopyPeerCertificatesPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerTrust(
    SSLContextRef context,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SSLCopyPeerTrust(
      context,
      trust,
    );
  }

  late final _SSLCopyPeerTrustPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<SecTrustRef>)>>('SSLCopyPeerTrust');
  late final _SSLCopyPeerTrust = _SSLCopyPeerTrustPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SecTrustRef>)>();

  int SSLSetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> peerID,
    int peerIDLen,
  ) {
    return _SSLSetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLSetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetPeerID');
  late final _SSLSetPeerID = _SSLSetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peerID,
    ffi.Pointer<pkg_ffi.Size> peerIDLen,
  ) {
    return _SSLGetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLGetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerID');
  late final _SSLGetPeerID = _SSLGetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedCipher(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> cipherSuite,
  ) {
    return _SSLGetNegotiatedCipher(
      context,
      cipherSuite,
    );
  }

  late final _SSLGetNegotiatedCipherPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLCipherSuite>)>>('SSLGetNegotiatedCipher');
  late final _SSLGetNegotiatedCipher = _SSLGetNegotiatedCipherPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>)>();

  int SSLSetALPNProtocols(
    SSLContextRef context,
    CFArrayRef protocols,
  ) {
    return _SSLSetALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLSetALPNProtocolsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetALPNProtocols');
  late final _SSLSetALPNProtocols = _SSLSetALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLCopyALPNProtocols(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> protocols,
  ) {
    return _SSLCopyALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLCopyALPNProtocolsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyALPNProtocols');
  late final _SSLCopyALPNProtocols = _SSLCopyALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLSetOCSPResponse(
    SSLContextRef context,
    CFDataRef response,
  ) {
    return _SSLSetOCSPResponse(
      context,
      response,
    );
  }

  late final _SSLSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFDataRef)>>(
          'SSLSetOCSPResponse');
  late final _SSLSetOCSPResponse = _SSLSetOCSPResponsePtr.asFunction<
      int Function(SSLContextRef, CFDataRef)>();

  int SSLSetEncryptionCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetEncryptionCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetEncryptionCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetEncryptionCertificate');
  late final _SSLSetEncryptionCertificate = _SSLSetEncryptionCertificatePtr
      .asFunction<int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetClientSideAuthenticate(
    SSLContextRef context,
    int auth,
  ) {
    return _SSLSetClientSideAuthenticate(
      context,
      auth,
    );
  }

  late final _SSLSetClientSideAuthenticatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetClientSideAuthenticate');
  late final _SSLSetClientSideAuthenticate = _SSLSetClientSideAuthenticatePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLAddDistinguishedName(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> derDN,
    int derDNLen,
  ) {
    return _SSLAddDistinguishedName(
      context,
      derDN,
      derDNLen,
    );
  }

  late final _SSLAddDistinguishedNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLAddDistinguishedName');
  late final _SSLAddDistinguishedName = _SSLAddDistinguishedNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetCertificateAuthorities(
    SSLContextRef context,
    CFTypeRef certificateOrArray,
    int replaceExisting,
  ) {
    return _SSLSetCertificateAuthorities(
      context,
      certificateOrArray,
      replaceExisting,
    );
  }

  late final _SSLSetCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, CFTypeRef,
              Boolean)>>('SSLSetCertificateAuthorities');
  late final _SSLSetCertificateAuthorities = _SSLSetCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, CFTypeRef, int)>();

  int SSLCopyCertificateAuthorities(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certificates,
  ) {
    return _SSLCopyCertificateAuthorities(
      context,
      certificates,
    );
  }

  late final _SSLCopyCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyCertificateAuthorities');
  late final _SSLCopyCertificateAuthorities = _SSLCopyCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyDistinguishedNames(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> names,
  ) {
    return _SSLCopyDistinguishedNames(
      context,
      names,
    );
  }

  late final _SSLCopyDistinguishedNamesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyDistinguishedNames');
  late final _SSLCopyDistinguishedNames = _SSLCopyDistinguishedNamesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLGetClientCertificateState(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> clientState,
  ) {
    return _SSLGetClientCertificateState(
      context,
      clientState,
    );
  }

  late final _SSLGetClientCertificateStatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetClientCertificateState');
  late final _SSLGetClientCertificateState = _SSLGetClientCertificateStatePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> dhParams,
    int dhParamsLen,
  ) {
    return _SSLSetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLSetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDiffieHellmanParams');
  late final _SSLSetDiffieHellmanParams = _SSLSetDiffieHellmanParamsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dhParams,
    ffi.Pointer<pkg_ffi.Size> dhParamsLen,
  ) {
    return _SSLGetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLGetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDiffieHellmanParams');
  late final _SSLGetDiffieHellmanParams =
      _SSLGetDiffieHellmanParamsPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetRsaBlinding(
    SSLContextRef context,
    int blinding,
  ) {
    return _SSLSetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLSetRsaBlindingPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetRsaBlinding');
  late final _SSLSetRsaBlinding =
      _SSLSetRsaBlindingPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetRsaBlinding(
    SSLContextRef context,
    ffi.Pointer<Boolean> blinding,
  ) {
    return _SSLGetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLGetRsaBlindingPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetRsaBlinding');
  late final _SSLGetRsaBlinding = _SSLGetRsaBlindingPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLHandshake(
    SSLContextRef context,
  ) {
    return _SSLHandshake(
      context,
    );
  }

  late final _SSLHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLHandshake');
  late final _SSLHandshake =
      _SSLHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLReHandshake(
    SSLContextRef context,
  ) {
    return _SSLReHandshake(
      context,
    );
  }

  late final _SSLReHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLReHandshake');
  late final _SSLReHandshake =
      _SSLReHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLWrite(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLWrite(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLWritePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLWrite');
  late final _SSLWrite = _SSLWritePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLRead(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLRead(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLReadPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLRead');
  late final _SSLRead = _SSLReadPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetBufferedReadSize(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> bufferSize,
  ) {
    return _SSLGetBufferedReadSize(
      context,
      bufferSize,
    );
  }

  late final _SSLGetBufferedReadSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetBufferedReadSize');
  late final _SSLGetBufferedReadSize = _SSLGetBufferedReadSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetDatagramWriteSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> bufSize,
  ) {
    return _SSLGetDatagramWriteSize(
      dtlsContext,
      bufSize,
    );
  }

  late final _SSLGetDatagramWriteSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDatagramWriteSize');
  late final _SSLGetDatagramWriteSize = _SSLGetDatagramWriteSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLClose(
    SSLContextRef context,
  ) {
    return _SSLClose(
      context,
    );
  }

  late final _SSLClosePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>('SSLClose');
  late final _SSLClose = _SSLClosePtr.asFunction<int Function(SSLContextRef)>();

  int SSLSetError(
    SSLContextRef context,
    int status,
  ) {
    return _SSLSetError(
      context,
      status,
    );
  }

  late final _SSLSetErrorPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, OSStatus)>>(
          'SSLSetError');
  late final _SSLSetError =
      _SSLSetErrorPtr.asFunction<int Function(SSLContextRef, int)>();

  late final ffi.Pointer<ffi.Int64> _NSURLSessionTransferSizeUnknown =
      _lookup<ffi.Int64>('NSURLSessionTransferSizeUnknown');

  int get NSURLSessionTransferSizeUnknown =>
      _NSURLSessionTransferSizeUnknown.value;

  set NSURLSessionTransferSizeUnknown(int value) =>
      _NSURLSessionTransferSizeUnknown.value = value;

  ffi.Pointer<ObjCObject> _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> configuration,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
      configuration,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> configuration,
    ffi.Pointer<ObjCObject> delegate,
    ffi.Pointer<ObjCObject> queue,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      configuration,
      delegate,
      queue,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  double _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_136(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
      request,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<ObjCObject> fileURL,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
      request,
      fileURL,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<ObjCObject> bodyData,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      request,
      bodyData,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
      request,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
      request,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> resumeData,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      resumeData,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int minBytes,
    int maxBytes,
    double timeout,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
      minBytes,
      maxBytes,
      timeout,
      completionHandler,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              NSUInteger,
              NSTimeInterval,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int,
          double, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    double timeout,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      data,
      timeout,
      completionHandler,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSTimeInterval,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, double, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> hostname,
    int port,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
      hostname,
      port,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> service,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
      service,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> message,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
      message,
      completionHandler,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> pongReceiveHandler,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
      pongReceiveHandler,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int closeCode,
    ffi.Pointer<ObjCObject> reason,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
      closeCode,
      reason,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          NSInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  int _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ObjCObject> protocols,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
      url,
      protocols,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
      request,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityDefault =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityDefault');

  double get NSURLSessionTaskPriorityDefault =>
      _NSURLSessionTaskPriorityDefault.value;

  set NSURLSessionTaskPriorityDefault(double value) =>
      _NSURLSessionTaskPriorityDefault.value = value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityLow =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityLow');

  double get NSURLSessionTaskPriorityLow => _NSURLSessionTaskPriorityLow.value;

  set NSURLSessionTaskPriorityLow(double value) =>
      _NSURLSessionTaskPriorityLow.value = value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityHigh =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityHigh');

  double get NSURLSessionTaskPriorityHigh =>
      _NSURLSessionTaskPriorityHigh.value;

  set NSURLSessionTaskPriorityHigh(double value) =>
      _NSURLSessionTaskPriorityHigh.value = value;

  instancetype _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      data,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
      string,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> identifier,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
      identifier,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  int _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_181(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_186(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_186(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_186Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_186 = __objc_msgSend_186Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_187(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_187(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_187Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_187 = __objc_msgSend_187Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_188(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_188(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_188 = __objc_msgSend_188Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_189(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_189(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_189Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_189 = __objc_msgSend_189Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_190(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_190(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_190Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_190 = __objc_msgSend_190Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSURLSessionDownloadTaskResumeData =
      _lookup<ffi.Pointer<ObjCObject>>('NSURLSessionDownloadTaskResumeData');

  ffi.Pointer<ObjCObject> get NSURLSessionDownloadTaskResumeData =>
      _NSURLSessionDownloadTaskResumeData.value;

  set NSURLSessionDownloadTaskResumeData(ffi.Pointer<ObjCObject> value) =>
      _NSURLSessionDownloadTaskResumeData.value = value;

  ffi.Pointer<ObjCObject> _objc_msgSend_191(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_191(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_191Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_191 = __objc_msgSend_191Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_192(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_192(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_192 = __objc_msgSend_192Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_193(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_193(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_193 = __objc_msgSend_193Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_194(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_194(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_194Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_194 = __objc_msgSend_194Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_195(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_195(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_195 = __objc_msgSend_195Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_196(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_196(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_196 = __objc_msgSend_196Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_197(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_197(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_197 = __objc_msgSend_197Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_198(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_198(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_198Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_198 = __objc_msgSend_198Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_199(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_199(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_199Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_199 = __objc_msgSend_199Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_200(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_200(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_200 = __objc_msgSend_200Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_201(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_201(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_201Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_201 = __objc_msgSend_201Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_202(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_202(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_202Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_202 = __objc_msgSend_202Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_203(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_203(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_203Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_203 = __objc_msgSend_203Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_204(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_204(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_204Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_204 = __objc_msgSend_204Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_205(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_205(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_205Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_205 = __objc_msgSend_205Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_206(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_206 = __objc_msgSend_206Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_207(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_207(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_207 = __objc_msgSend_207Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_208(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_208(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_208Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_208 = __objc_msgSend_208Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_209(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_209(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_209Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_209 = __objc_msgSend_209Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_210(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_210(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_210 = __objc_msgSend_210Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_211(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_211(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_211 = __objc_msgSend_211Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_212(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_212(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_212 = __objc_msgSend_212Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_213(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_213(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_213Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_213 = __objc_msgSend_213Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_214(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_214(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_214Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_214 = __objc_msgSend_214Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> NSStringFromSelector1(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector1(
      aSelector,
    );
  }

  late final _NSStringFromSelector1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector1 = _NSStringFromSelector1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString1(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString1(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString1 = _NSSelectorFromString1Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass1(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass1(
      aClass,
    );
  }

  late final _NSStringFromClass1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass1 = _NSStringFromClass1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString1(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString1(
      aClassName,
    );
  }

  late final _NSClassFromString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString1 = _NSClassFromString1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol1(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol1(
      proto,
    );
  }

  late final _NSStringFromProtocol1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol1 = _NSStringFromProtocol1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString1(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString1(
      namestr,
    );
  }

  late final _NSProtocolFromString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString1 = _NSProtocolFromString1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment1(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment1(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment1 = _NSGetSizeAndAlignment1Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog1(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog1(
      format,
    );
  }

  late final _NSLog1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog1 =
      _NSLog1Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv1(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv1(
      format,
      args,
    );
  }

  late final _NSLogv1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv1 =
      _NSLogv1Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake1(
    int loc,
    int len,
  ) {
    return ___CFRangeMake1(
      loc,
      len,
    );
  }

  late final ___CFRangeMake1Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake1 =
      ___CFRangeMake1Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID1() {
    return _CFNullGetTypeID1();
  }

  late final _CFNullGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID1 =
      _CFNullGetTypeID1Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID1() {
    return _CFAllocatorGetTypeID1();
  }

  late final _CFAllocatorGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID1 =
      _CFAllocatorGetTypeID1Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault1(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault1(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault1 =
      _CFAllocatorSetDefault1Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault1() {
    return _CFAllocatorGetDefault1();
  }

  late final _CFAllocatorGetDefault1Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault1 =
      _CFAllocatorGetDefault1Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate1(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate1 = _CFAllocatorCreate1Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate1(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate1(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate1 = _CFAllocatorAllocate1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate1(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate1 = _CFAllocatorReallocate1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate1(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate1 = _CFAllocatorDeallocate1Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize1(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize1(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize1 =
      _CFAllocatorGetPreferredSizeForSize1Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext1(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext1(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext1 = _CFAllocatorGetContext1Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID1(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID1(
      cf,
    );
  }

  late final _CFGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID1 =
      _CFGetTypeID1Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription1(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription1(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription1 =
      _CFCopyTypeIDDescription1Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain1(
    CFTypeRef cf,
  ) {
    return _CFRetain1(
      cf,
    );
  }

  late final _CFRetain1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain1 =
      _CFRetain1Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease1(
    CFTypeRef cf,
  ) {
    return _CFRelease1(
      cf,
    );
  }

  late final _CFRelease1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease1 =
      _CFRelease1Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease1(
    CFTypeRef arg,
  ) {
    return _CFAutorelease1(
      arg,
    );
  }

  late final _CFAutorelease1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease1 =
      _CFAutorelease1Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount1(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount1(
      cf,
    );
  }

  late final _CFGetRetainCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount1 =
      _CFGetRetainCount1Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual1(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual1(
      cf1,
      cf2,
    );
  }

  late final _CFEqual1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual1 =
      _CFEqual1Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash1(
    CFTypeRef cf,
  ) {
    return _CFHash1(
      cf,
    );
  }

  late final _CFHash1Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash1 = _CFHash1Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription1(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription1(
      cf,
    );
  }

  late final _CFCopyDescription1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription1 =
      _CFCopyDescription1Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator1(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator1(
      cf,
    );
  }

  late final _CFGetAllocator1Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator1 =
      _CFGetAllocator1Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable1(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable1(
      cf,
    );
  }

  late final _CFMakeCollectable1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable1 =
      _CFMakeCollectable1Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone1() {
    return _NSDefaultMallocZone1();
  }

  late final _NSDefaultMallocZone1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone1 =
      _NSDefaultMallocZone1Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone1(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone1(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone1 = _NSCreateZone1Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone1(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone1(
      zone,
    );
  }

  late final _NSRecycleZone1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone1 =
      _NSRecycleZone1Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName1(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName1(
      zone,
      name,
    );
  }

  late final _NSSetZoneName1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName1 = _NSSetZoneName1Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName1(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName1(
      zone,
    );
  }

  late final _NSZoneName1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName1 = _NSZoneName1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer1(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer1(
      ptr,
    );
  }

  late final _NSZoneFromPointer1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer1 = _NSZoneFromPointer1Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc1(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc1(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc1 = _NSZoneMalloc1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc1(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc1(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc1 = _NSZoneCalloc1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc1(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc1(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc1 = _NSZoneRealloc1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree1(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree1(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree1 = _NSZoneFree1Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable1(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable1(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable1 = _NSAllocateCollectable1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable1(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable1(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable1 =
      _NSReallocateCollectable1Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize1() {
    return _NSPageSize1();
  }

  late final _NSPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize1 = _NSPageSize1Ptr.asFunction<int Function()>();

  int NSLogPageSize1() {
    return _NSLogPageSize1();
  }

  late final _NSLogPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize1 = _NSLogPageSize1Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize1(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize1(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize1 =
      _NSRoundUpToMultipleOfPageSize1Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize1(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize1(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize1 =
      _NSRoundDownToMultipleOfPageSize1Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages1(
    int bytes,
  ) {
    return _NSAllocateMemoryPages1(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages1 = _NSAllocateMemoryPages1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages1(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages1(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages1 = _NSDeallocateMemoryPages1Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages1(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages1(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages1 = _NSCopyMemoryPages1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable1() {
    return _NSRealMemoryAvailable1();
  }

  late final _NSRealMemoryAvailable1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable1 =
      _NSRealMemoryAvailable1Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject1(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject1(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject1 = _NSAllocateObject1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject1(
      object,
    );
  }

  late final _NSDeallocateObject1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject1 = _NSDeallocateObject1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject1(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject1(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject1 = _NSCopyObject1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone1(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone1(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone1 = _NSShouldRetainWithZone1Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount1(
      object,
    );
  }

  late final _NSIncrementExtraRefCount1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount1 = _NSIncrementExtraRefCount1Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero1(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero1 =
      _NSDecrementExtraRefCountWasZero1Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount1(
      object,
    );
  }

  late final _NSExtraRefCount1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount1 =
      _NSExtraRefCount1Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_215(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    int size,
  ) {
    return __objc_msgSend_215(
      obj,
      sel,
      value,
      size,
    );
  }

  late final __objc_msgSend_215Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_215 = __objc_msgSend_215Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<pkg_ffi.Char> _objc_msgSend_216(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_216(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_216 = __objc_msgSend_216Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_217(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<pkg_ffi.Char> type,
  ) {
    return __objc_msgSend_217(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_217Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<pkg_ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_217 = __objc_msgSend_217Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<pkg_ffi.Char>)>();

  instancetype _objc_msgSend_218(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_218(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_218Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_218 = __objc_msgSend_218Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_219(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_219(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_219Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_219 = __objc_msgSend_219Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_220(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_220(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_220Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_220 = __objc_msgSend_220Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_221(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_221(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_221Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_221 = __objc_msgSend_221Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_222(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_222(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_222Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_222 = __objc_msgSend_222Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_223(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_223(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_223Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_223 = __objc_msgSend_223Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_224(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_224(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_224 = __objc_msgSend_224Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_225(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_225(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_225Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_225 = __objc_msgSend_225Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_226(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_226(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_226Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_226 = __objc_msgSend_226Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_227(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_227(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_227Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_227 = __objc_msgSend_227Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_228(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_228(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_228Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_228 = __objc_msgSend_228Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_229(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_229(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_229Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_229 = __objc_msgSend_229Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_230(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_230(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_230Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_230 = __objc_msgSend_230Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_231(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_231(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_231Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_231 = __objc_msgSend_231Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_232(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_232(
      obj,
      sel,
      value ? 1 : 0,
    );
  }

  late final __objc_msgSend_232Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_232 = __objc_msgSend_232Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_233(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_233(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_233Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_233 = __objc_msgSend_233Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_234(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_234(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_234Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_234 = __objc_msgSend_234Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  int _objc_msgSend_235(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_235(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_235Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_235 = __objc_msgSend_235Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_236(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_236(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_236Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_236 = __objc_msgSend_236Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_237(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_237(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_237Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_237 = __objc_msgSend_237Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_238(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_238(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_238Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_238 = __objc_msgSend_238Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_239(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_239(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_239Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_239 = __objc_msgSend_239Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_240(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_240(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_240Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedInt Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_240 = __objc_msgSend_240Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_241(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_241(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_241Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Long Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_241 = __objc_msgSend_241Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_242(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_242(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_242Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_242 = __objc_msgSend_242Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_243(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_243(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_243Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_243 = __objc_msgSend_243Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_244(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_244(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_244Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_244 = __objc_msgSend_244Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_245(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_245(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_245Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_245 = __objc_msgSend_245Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_246(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherNumber,
  ) {
    return __objc_msgSend_246(
      obj,
      sel,
      otherNumber,
    );
  }

  late final __objc_msgSend_246Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_246 = __objc_msgSend_246Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_247(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> number,
  ) {
    return __objc_msgSend_247(
          obj,
          sel,
          number,
        ) !=
        0;
  }

  late final __objc_msgSend_247Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_247 = __objc_msgSend_247Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_248(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_248(
      obj,
      sel,
      locale,
    );
  }

  late final __objc_msgSend_248Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_248 = __objc_msgSend_248Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  NSRange NSUnionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSUnionRange(
      range1,
      range2,
    );
  }

  late final _NSUnionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSUnionRange');
  late final _NSUnionRange =
      _NSUnionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSRange NSIntersectionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSIntersectionRange(
      range1,
      range2,
    );
  }

  late final _NSIntersectionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSIntersectionRange');
  late final _NSIntersectionRange =
      _NSIntersectionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  ffi.Pointer<ObjCObject> NSStringFromRange(
    NSRange range,
  ) {
    return _NSStringFromRange(
      range,
    );
  }

  late final _NSStringFromRangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(NSRange)>>(
          'NSStringFromRange');
  late final _NSStringFromRange = _NSStringFromRangePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(NSRange)>();

  NSRange NSRangeFromString(
    ffi.Pointer<ObjCObject> aString,
  ) {
    return _NSRangeFromString(
      aString,
    );
  }

  late final _NSRangeFromStringPtr =
      _lookup<ffi.NativeFunction<NSRange Function(ffi.Pointer<ObjCObject>)>>(
          'NSRangeFromString');
  late final _NSRangeFromString = _NSRangeFromStringPtr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_249(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_249(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_249Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_249 = __objc_msgSend_249Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  int _objc_msgSend_250(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_250(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_250Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_250 = __objc_msgSend_250Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_251(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_251(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_251Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_251 = __objc_msgSend_251Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_252(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int type,
    int index,
  ) {
    return __objc_msgSend_252(
      obj,
      sel,
      anObject,
      type,
      index,
    );
  }

  late final __objc_msgSend_252Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_252 = __objc_msgSend_252Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int)>();

  instancetype _objc_msgSend_253(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int type,
    int index,
    int associatedIndex,
  ) {
    return __objc_msgSend_253(
      obj,
      sel,
      anObject,
      type,
      index,
      associatedIndex,
    );
  }

  late final __objc_msgSend_253Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSUInteger,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_253 = __objc_msgSend_253Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int, int)>();

  instancetype _objc_msgSend_254(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_254(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_254Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_254 = __objc_msgSend_254Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  instancetype _objc_msgSend_255(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_255(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_255Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_255 = __objc_msgSend_255Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_256(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_256(
          obj,
          sel,
          indexSet,
        ) !=
        0;
  }

  late final __objc_msgSend_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_256 = __objc_msgSend_256Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_257(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_257(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_257Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_257 = __objc_msgSend_257Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  int _objc_msgSend_258(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indexBuffer,
    int bufferSize,
    NSRangePointer range,
  ) {
    return __objc_msgSend_258(
      obj,
      sel,
      indexBuffer,
      bufferSize,
      range,
    );
  }

  late final __objc_msgSend_258Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>,
              NSUInteger,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_258 = __objc_msgSend_258Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, int, NSRangePointer)>();

  int _objc_msgSend_259(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_259(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_259Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_259 = __objc_msgSend_259Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  bool _objc_msgSend_260(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_260(
          obj,
          sel,
          value,
        ) !=
        0;
  }

  late final __objc_msgSend_260Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_260 = __objc_msgSend_260Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  bool _objc_msgSend_261(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_261(
          obj,
          sel,
          range,
        ) !=
        0;
  }

  late final __objc_msgSend_261Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_261 = __objc_msgSend_261Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  bool _objc_msgSend_262(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_262(
          obj,
          sel,
          indexSet,
        ) !=
        0;
  }

  late final __objc_msgSend_262Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_262 = __objc_msgSend_262Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_263(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> block,
  ) {
    return __objc_msgSend_263(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_263Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_263 = __objc_msgSend_263Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_264(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<ObjCObject> block,
  ) {
    return __objc_msgSend_264(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_264Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_264 = __objc_msgSend_264Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_265(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<ObjCObject> block,
  ) {
    return __objc_msgSend_265(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_265Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_265 = __objc_msgSend_265Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_266(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> predicate,
  ) {
    return __objc_msgSend_266(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_266Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_266 = __objc_msgSend_266Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_267(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<ObjCObject> predicate,
  ) {
    return __objc_msgSend_267(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_267Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_267 = __objc_msgSend_267Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_268(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<ObjCObject> predicate,
  ) {
    return __objc_msgSend_268(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_268Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_268 = __objc_msgSend_268Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_269(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> predicate,
  ) {
    return __objc_msgSend_269(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_269Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_269 = __objc_msgSend_269Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_270(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<ObjCObject> predicate,
  ) {
    return __objc_msgSend_270(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_270Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_270 = __objc_msgSend_270Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_271(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<ObjCObject> predicate,
  ) {
    return __objc_msgSend_271(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_271Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_271 = __objc_msgSend_271Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSRange, int, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_272(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> block,
  ) {
    return __objc_msgSend_272(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_272Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_272 = __objc_msgSend_272Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_273(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<ObjCObject> block,
  ) {
    return __objc_msgSend_273(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_273Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_273 = __objc_msgSend_273Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_274(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<ObjCObject> block,
  ) {
    return __objc_msgSend_274(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_274Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_274 = __objc_msgSend_274Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_275(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_275(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_275Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_275 = __objc_msgSend_275Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_276(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> indexSet,
  ) {
    return __objc_msgSend_276(
      obj,
      sel,
      indexSet,
    );
  }

  late final __objc_msgSend_276Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_276 = __objc_msgSend_276Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_277(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_277(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_277Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_277 = __objc_msgSend_277Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  void _objc_msgSend_278(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_278(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_278Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_278 = __objc_msgSend_278Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  void _objc_msgSend_279(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    int delta,
  ) {
    return __objc_msgSend_279(
      obj,
      sel,
      index,
      delta,
    );
  }

  late final __objc_msgSend_279Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_279 = __objc_msgSend_279Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  instancetype _objc_msgSend_280(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> changes,
  ) {
    return __objc_msgSend_280(
      obj,
      sel,
      changes,
    );
  }

  late final __objc_msgSend_280Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_280 = __objc_msgSend_280Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_281(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> inserts,
    ffi.Pointer<ObjCObject> insertedObjects,
    ffi.Pointer<ObjCObject> removes,
    ffi.Pointer<ObjCObject> removedObjects,
    ffi.Pointer<ObjCObject> changes,
  ) {
    return __objc_msgSend_281(
      obj,
      sel,
      inserts,
      insertedObjects,
      removes,
      removedObjects,
      changes,
    );
  }

  late final __objc_msgSend_281Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_281 = __objc_msgSend_281Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_282(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> inserts,
    ffi.Pointer<ObjCObject> insertedObjects,
    ffi.Pointer<ObjCObject> removes,
    ffi.Pointer<ObjCObject> removedObjects,
  ) {
    return __objc_msgSend_282(
      obj,
      sel,
      inserts,
      insertedObjects,
      removes,
      removedObjects,
    );
  }

  late final __objc_msgSend_282Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_282 = __objc_msgSend_282Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_283(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_283(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_283Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_283 = __objc_msgSend_283Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_284(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_284(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_284Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_284 = __objc_msgSend_284Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_285(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_285(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_285Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_285 = __objc_msgSend_285Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_286(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int index,
  ) {
    return __objc_msgSend_286(
      obj,
      sel,
      anObject,
      index,
    );
  }

  late final __objc_msgSend_286Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_286 = __objc_msgSend_286Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  void _objc_msgSend_287(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_287(
      obj,
      sel,
      index,
      anObject,
    );
  }

  late final __objc_msgSend_287Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_287 = __objc_msgSend_287Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_288(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_288(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_288Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_288 = __objc_msgSend_288Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_289(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int visibility,
    ffi.Pointer<ObjCObject> loadHandler,
  ) {
    return __objc_msgSend_289(
      obj,
      sel,
      typeIdentifier,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_289Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_289 = __objc_msgSend_289Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_290(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
    int visibility,
    ffi.Pointer<ObjCObject> loadHandler,
  ) {
    return __objc_msgSend_290(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_290Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_290 = __objc_msgSend_290Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_291(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_291(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_291Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_291 = __objc_msgSend_291Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_292(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
  ) {
    return __objc_msgSend_292(
          obj,
          sel,
          typeIdentifier,
        ) !=
        0;
  }

  late final __objc_msgSend_292Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_292 = __objc_msgSend_292Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_293(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
  ) {
    return __objc_msgSend_293(
          obj,
          sel,
          typeIdentifier,
          fileOptions,
        ) !=
        0;
  }

  late final __objc_msgSend_293Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_293 = __objc_msgSend_293Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_294(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_294(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_294Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_294 = __objc_msgSend_294Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_295(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_295(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_295Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_295 = __objc_msgSend_295Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_296(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_296(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_296Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_296 = __objc_msgSend_296Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_297(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_297(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_297Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_297 = __objc_msgSend_297Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_298(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_298(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_298Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_298 = __objc_msgSend_298Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_299(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
  ) {
    return __objc_msgSend_299(
      obj,
      sel,
      object,
    );
  }

  late final __objc_msgSend_299Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_299 = __objc_msgSend_299Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_300(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    int visibility,
  ) {
    return __objc_msgSend_300(
      obj,
      sel,
      object,
      visibility,
    );
  }

  late final __objc_msgSend_300Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_300 = __objc_msgSend_300Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  void _objc_msgSend_301(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    int visibility,
    ffi.Pointer<ObjCObject> loadHandler,
  ) {
    return __objc_msgSend_301(
      obj,
      sel,
      aClass,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_301Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_301 = __objc_msgSend_301Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_302(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return __objc_msgSend_302(
          obj,
          sel,
          aClass,
        ) !=
        0;
  }

  late final __objc_msgSend_302Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_302 = __objc_msgSend_302Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_303(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aClass,
    ffi.Pointer<ObjCObject> completionHandler,
  ) {
    return __objc_msgSend_303(
      obj,
      sel,
      aClass,
      completionHandler,
    );
  }

  late final __objc_msgSend_303Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_303 = __objc_msgSend_303Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_304(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> item,
    ffi.Pointer<ObjCObject> typeIdentifier,
  ) {
    return __objc_msgSend_304(
      obj,
      sel,
      item,
      typeIdentifier,
    );
  }

  late final __objc_msgSend_304Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_304 = __objc_msgSend_304Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_305(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> fileURL,
  ) {
    return __objc_msgSend_305(
      obj,
      sel,
      fileURL,
    );
  }

  late final __objc_msgSend_305Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_305 = __objc_msgSend_305Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_306(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    NSItemProviderLoadHandler loadHandler,
  ) {
    return __objc_msgSend_306(
      obj,
      sel,
      typeIdentifier,
      loadHandler,
    );
  }

  late final __objc_msgSend_306Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderLoadHandler)>>('objc_msgSend');
  late final __objc_msgSend_306 = __objc_msgSend_306Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSItemProviderLoadHandler)>();

  void _objc_msgSend_307(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> options,
    NSItemProviderCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_307(
      obj,
      sel,
      typeIdentifier,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_307Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_307 = __objc_msgSend_307Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          NSItemProviderCompletionHandler)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSItemProviderPreferredImageSizeKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSItemProviderPreferredImageSizeKey');

  ffi.Pointer<ObjCObject> get NSItemProviderPreferredImageSizeKey =>
      _NSItemProviderPreferredImageSizeKey.value;

  set NSItemProviderPreferredImageSizeKey(ffi.Pointer<ObjCObject> value) =>
      _NSItemProviderPreferredImageSizeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSExtensionJavaScriptPreprocessingResultsKey =
      _lookup<ffi.Pointer<ObjCObject>>(
          'NSExtensionJavaScriptPreprocessingResultsKey');

  ffi.Pointer<ObjCObject> get NSExtensionJavaScriptPreprocessingResultsKey =>
      _NSExtensionJavaScriptPreprocessingResultsKey.value;

  set NSExtensionJavaScriptPreprocessingResultsKey(
          ffi.Pointer<ObjCObject> value) =>
      _NSExtensionJavaScriptPreprocessingResultsKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSExtensionJavaScriptFinalizeArgumentKey =
      _lookup<ffi.Pointer<ObjCObject>>(
          'NSExtensionJavaScriptFinalizeArgumentKey');

  ffi.Pointer<ObjCObject> get NSExtensionJavaScriptFinalizeArgumentKey =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value;

  set NSExtensionJavaScriptFinalizeArgumentKey(ffi.Pointer<ObjCObject> value) =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSItemProviderErrorDomain =
      _lookup<ffi.Pointer<ObjCObject>>('NSItemProviderErrorDomain');

  ffi.Pointer<ObjCObject> get NSItemProviderErrorDomain =>
      _NSItemProviderErrorDomain.value;

  set NSItemProviderErrorDomain(ffi.Pointer<ObjCObject> value) =>
      _NSItemProviderErrorDomain.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToKatakana =
      _lookup<NSStringTransform>('NSStringTransformLatinToKatakana');

  NSStringTransform get NSStringTransformLatinToKatakana =>
      _NSStringTransformLatinToKatakana.value;

  set NSStringTransformLatinToKatakana(NSStringTransform value) =>
      _NSStringTransformLatinToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHiragana =
      _lookup<NSStringTransform>('NSStringTransformLatinToHiragana');

  NSStringTransform get NSStringTransformLatinToHiragana =>
      _NSStringTransformLatinToHiragana.value;

  set NSStringTransformLatinToHiragana(NSStringTransform value) =>
      _NSStringTransformLatinToHiragana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHangul =
      _lookup<NSStringTransform>('NSStringTransformLatinToHangul');

  NSStringTransform get NSStringTransformLatinToHangul =>
      _NSStringTransformLatinToHangul.value;

  set NSStringTransformLatinToHangul(NSStringTransform value) =>
      _NSStringTransformLatinToHangul.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToArabic =
      _lookup<NSStringTransform>('NSStringTransformLatinToArabic');

  NSStringTransform get NSStringTransformLatinToArabic =>
      _NSStringTransformLatinToArabic.value;

  set NSStringTransformLatinToArabic(NSStringTransform value) =>
      _NSStringTransformLatinToArabic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHebrew =
      _lookup<NSStringTransform>('NSStringTransformLatinToHebrew');

  NSStringTransform get NSStringTransformLatinToHebrew =>
      _NSStringTransformLatinToHebrew.value;

  set NSStringTransformLatinToHebrew(NSStringTransform value) =>
      _NSStringTransformLatinToHebrew.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToThai =
      _lookup<NSStringTransform>('NSStringTransformLatinToThai');

  NSStringTransform get NSStringTransformLatinToThai =>
      _NSStringTransformLatinToThai.value;

  set NSStringTransformLatinToThai(NSStringTransform value) =>
      _NSStringTransformLatinToThai.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToCyrillic =
      _lookup<NSStringTransform>('NSStringTransformLatinToCyrillic');

  NSStringTransform get NSStringTransformLatinToCyrillic =>
      _NSStringTransformLatinToCyrillic.value;

  set NSStringTransformLatinToCyrillic(NSStringTransform value) =>
      _NSStringTransformLatinToCyrillic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToGreek =
      _lookup<NSStringTransform>('NSStringTransformLatinToGreek');

  NSStringTransform get NSStringTransformLatinToGreek =>
      _NSStringTransformLatinToGreek.value;

  set NSStringTransformLatinToGreek(NSStringTransform value) =>
      _NSStringTransformLatinToGreek.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToLatin =
      _lookup<NSStringTransform>('NSStringTransformToLatin');

  NSStringTransform get NSStringTransformToLatin =>
      _NSStringTransformToLatin.value;

  set NSStringTransformToLatin(NSStringTransform value) =>
      _NSStringTransformToLatin.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformMandarinToLatin =
      _lookup<NSStringTransform>('NSStringTransformMandarinToLatin');

  NSStringTransform get NSStringTransformMandarinToLatin =>
      _NSStringTransformMandarinToLatin.value;

  set NSStringTransformMandarinToLatin(NSStringTransform value) =>
      _NSStringTransformMandarinToLatin.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformHiraganaToKatakana =
      _lookup<NSStringTransform>('NSStringTransformHiraganaToKatakana');

  NSStringTransform get NSStringTransformHiraganaToKatakana =>
      _NSStringTransformHiraganaToKatakana.value;

  set NSStringTransformHiraganaToKatakana(NSStringTransform value) =>
      _NSStringTransformHiraganaToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformFullwidthToHalfwidth =
      _lookup<NSStringTransform>('NSStringTransformFullwidthToHalfwidth');

  NSStringTransform get NSStringTransformFullwidthToHalfwidth =>
      _NSStringTransformFullwidthToHalfwidth.value;

  set NSStringTransformFullwidthToHalfwidth(NSStringTransform value) =>
      _NSStringTransformFullwidthToHalfwidth.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToXMLHex =
      _lookup<NSStringTransform>('NSStringTransformToXMLHex');

  NSStringTransform get NSStringTransformToXMLHex =>
      _NSStringTransformToXMLHex.value;

  set NSStringTransformToXMLHex(NSStringTransform value) =>
      _NSStringTransformToXMLHex.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToUnicodeName =
      _lookup<NSStringTransform>('NSStringTransformToUnicodeName');

  NSStringTransform get NSStringTransformToUnicodeName =>
      _NSStringTransformToUnicodeName.value;

  set NSStringTransformToUnicodeName(NSStringTransform value) =>
      _NSStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformStripCombiningMarks =
      _lookup<NSStringTransform>('NSStringTransformStripCombiningMarks');

  NSStringTransform get NSStringTransformStripCombiningMarks =>
      _NSStringTransformStripCombiningMarks.value;

  set NSStringTransformStripCombiningMarks(NSStringTransform value) =>
      _NSStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformStripDiacritics =
      _lookup<NSStringTransform>('NSStringTransformStripDiacritics');

  NSStringTransform get NSStringTransformStripDiacritics =>
      _NSStringTransformStripDiacritics.value;

  set NSStringTransformStripDiacritics(NSStringTransform value) =>
      _NSStringTransformStripDiacritics.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionSuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionSuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionSuggestedEncodingsKey =>
          _NSStringEncodingDetectionSuggestedEncodingsKey.value;

  set NSStringEncodingDetectionSuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionSuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionDisallowedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionDisallowedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionDisallowedEncodingsKey =>
          _NSStringEncodingDetectionDisallowedEncodingsKey.value;

  set NSStringEncodingDetectionDisallowedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionDisallowedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionUseOnlySuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =>
          _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value;

  set NSStringEncodingDetectionUseOnlySuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionAllowLossyKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionAllowLossyKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionAllowLossyKey =>
          _NSStringEncodingDetectionAllowLossyKey.value;

  set NSStringEncodingDetectionAllowLossyKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionAllowLossyKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionFromWindowsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionFromWindowsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionFromWindowsKey =>
          _NSStringEncodingDetectionFromWindowsKey.value;

  set NSStringEncodingDetectionFromWindowsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionFromWindowsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLossySubstitutionKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLossySubstitutionKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLossySubstitutionKey =>
          _NSStringEncodingDetectionLossySubstitutionKey.value;

  set NSStringEncodingDetectionLossySubstitutionKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLossySubstitutionKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLikelyLanguageKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLikelyLanguageKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLikelyLanguageKey =>
          _NSStringEncodingDetectionLikelyLanguageKey.value;

  set NSStringEncodingDetectionLikelyLanguageKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLikelyLanguageKey.value = value;

  void _objc_msgSend_308(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_308(
      obj,
      sel,
      range,
      aString,
    );
  }

  late final __objc_msgSend_308Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_308 = __objc_msgSend_308Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<NSExceptionName> _NSCharacterConversionException =
      _lookup<NSExceptionName>('NSCharacterConversionException');

  NSExceptionName get NSCharacterConversionException =>
      _NSCharacterConversionException.value;

  set NSCharacterConversionException(NSExceptionName value) =>
      _NSCharacterConversionException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSParseErrorException =
      _lookup<NSExceptionName>('NSParseErrorException');

  NSExceptionName get NSParseErrorException => _NSParseErrorException.value;

  set NSParseErrorException(NSExceptionName value) =>
      _NSParseErrorException.value = value;

  int CFDataGetTypeID1() {
    return _CFDataGetTypeID1();
  }

  late final _CFDataGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID1 =
      _CFDataGetTypeID1Ptr.asFunction<int Function()>();

  CFDataRef CFDataCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate1(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate1 = _CFDataCreate1Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy1(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy1 =
      _CFDataCreateWithBytesNoCopy1Ptr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy1(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy1(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopy1Ptr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy1 = _CFDataCreateCopy1Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable1(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable1(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable1 = _CFDataCreateMutable1Ptr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy1(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy1 = _CFDataCreateMutableCopy1Ptr
      .asFunction<CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength1(
    CFDataRef theData,
  ) {
    return _CFDataGetLength1(
      theData,
    );
  }

  late final _CFDataGetLength1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength1 =
      _CFDataGetLength1Ptr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr1(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr1(
      theData,
    );
  }

  late final _CFDataGetBytePtr1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr1 = _CFDataGetBytePtr1Ptr.asFunction<
      ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr1(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr1(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtr1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr1 = _CFDataGetMutableBytePtr1Ptr
      .asFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes1(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes1(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytes1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes1 = _CFDataGetBytes1Ptr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength1(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength1(
      theData,
      length,
    );
  }

  late final _CFDataSetLength1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength1 =
      _CFDataSetLength1Ptr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength1(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength1(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLength1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength1 = _CFDataIncreaseLength1Ptr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes1(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes1(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytes1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes1 = _CFDataAppendBytes1Ptr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes1(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes1(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytes1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes1 = _CFDataReplaceBytes1Ptr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes1(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes1(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytes1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes1 = _CFDataDeleteBytes1Ptr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind1(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    int compareOptions,
  ) {
    return _CFDataFind1(
      theData,
      dataToFind,
      searchRange,
      compareOptions,
    );
  }

  late final _CFDataFind1Ptr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, ffi.Int32)>>('CFDataFind');
  late final _CFDataFind1 = _CFDataFind1Ptr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID1() {
    return _CFCharacterSetGetTypeID1();
  }

  late final _CFCharacterSetGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID1 =
      _CFCharacterSetGetTypeID1Ptr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined1(
    int theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined1(
      theSetIdentifier,
    );
  }

  late final _CFCharacterSetGetPredefined1Ptr =
      _lookup<ffi.NativeFunction<CFCharacterSetRef Function(ffi.Int32)>>(
          'CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined1 = _CFCharacterSetGetPredefined1Ptr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange1(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange1(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRange1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFRange)>>('CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange1 =
      _CFCharacterSetCreateWithCharactersInRange1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString1(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString1(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInString1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString1 =
      _CFCharacterSetCreateWithCharactersInString1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation1(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation1(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation1 =
      _CFCharacterSetCreateWithBitmapRepresentation1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSet1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet1 =
      _CFCharacterSetCreateInvertedSet1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet1(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet1(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSet1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet1 =
      _CFCharacterSetIsSupersetOfSet1Ptr.asFunction<
          int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane1(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane1(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlane1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane1 =
      _CFCharacterSetHasMemberInPlane1Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable1(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable1(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef)>>('CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable1 = _CFCharacterSetCreateMutable1Ptr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy1 =
      _CFCharacterSetCreateCopy1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy1 =
      _CFCharacterSetCreateMutableCopy1Ptr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember1(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember1(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMember1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember1 =
      _CFCharacterSetIsCharacterMember1Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember1(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember1(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMember1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember1 =
      _CFCharacterSetIsLongCharacterMember1Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation1 =
      _CFCharacterSetCreateBitmapRepresentation1Ptr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange1(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange1(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRange1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange1 =
      _CFCharacterSetAddCharactersInRange1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange1(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange1(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRange1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange1 =
      _CFCharacterSetRemoveCharactersInRange1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString1(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString1(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString1 =
      _CFCharacterSetAddCharactersInString1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString1(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString1(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString1 =
      _CFCharacterSetRemoveCharactersInString1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion1(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion1(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnion1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion1 = _CFCharacterSetUnion1Ptr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect1(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect1(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersect1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect1 = _CFCharacterSetIntersect1Ptr
      .asFunction<void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert1(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert1(
      theSet,
    );
  }

  late final _CFCharacterSetInvert1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert1 = _CFCharacterSetInvert1Ptr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_309(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_309(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_309Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_309 = __objc_msgSend_309Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_310(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_310(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_310Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_310 = __objc_msgSend_310Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_311(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_311(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_311Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_311 = __objc_msgSend_311Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_312(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_312(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_312Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_312 = __objc_msgSend_312Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_313(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_313(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_313Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_313 = __objc_msgSend_313Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_314(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_314(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_314Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_314 = __objc_msgSend_314Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_315(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_315(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_315Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_315 = __objc_msgSend_315Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_316(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_316(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_316Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_316 = __objc_msgSend_316Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_317(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_317(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_317Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_317 = __objc_msgSend_317Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_318(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_318(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_318Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_318 = __objc_msgSend_318Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_319(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_319(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_319Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_319 = __objc_msgSend_319Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_320(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_320(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_320Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_320 = __objc_msgSend_320Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_321(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_321(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_321Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_321 = __objc_msgSend_321Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_322(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_322(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_322Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_322 = __objc_msgSend_322Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_323(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_323(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_323Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_323 = __objc_msgSend_323Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_324(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange aRange,
  ) {
    return __objc_msgSend_324(
      obj,
      sel,
      aRange,
    );
  }

  late final __objc_msgSend_324Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_324 = __objc_msgSend_324Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_325(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_325(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_325Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_325 = __objc_msgSend_325Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_326(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_326(
      obj,
      sel,
      data,
    );
  }

  late final __objc_msgSend_326Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_326 = __objc_msgSend_326Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_327(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> fName,
  ) {
    return __objc_msgSend_327(
      obj,
      sel,
      fName,
    );
  }

  late final __objc_msgSend_327Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_327 = __objc_msgSend_327Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_328(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_328(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_328Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_328 = __objc_msgSend_328Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_329(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aCharacter,
  ) {
    return __objc_msgSend_329(
          obj,
          sel,
          aCharacter,
        ) !=
        0;
  }

  late final __objc_msgSend_329Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              unichar)>>('objc_msgSend');
  late final __objc_msgSend_329 = __objc_msgSend_329Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_330(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_330(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_330Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_330 = __objc_msgSend_330Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_331(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_331(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_331Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_331 = __objc_msgSend_331Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_332(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int theLongChar,
  ) {
    return __objc_msgSend_332(
          obj,
          sel,
          theLongChar,
        ) !=
        0;
  }

  late final __objc_msgSend_332Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              UTF32Char)>>('objc_msgSend');
  late final __objc_msgSend_332 = __objc_msgSend_332Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  bool _objc_msgSend_333(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> theOtherSet,
  ) {
    return __objc_msgSend_333(
          obj,
          sel,
          theOtherSet,
        ) !=
        0;
  }

  late final __objc_msgSend_333Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_333 = __objc_msgSend_333Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_334(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int thePlane,
  ) {
    return __objc_msgSend_334(
          obj,
          sel,
          thePlane,
        ) !=
        0;
  }

  late final __objc_msgSend_334Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_334 = __objc_msgSend_334Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  void _objc_msgSend_335(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_335(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_335Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_335 = __objc_msgSend_335Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_336(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_336(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_336Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_336 = __objc_msgSend_336Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_337(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherSet,
  ) {
    return __objc_msgSend_337(
      obj,
      sel,
      otherSet,
    );
  }

  late final __objc_msgSend_337Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_337 = __objc_msgSend_337Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_338(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherSet,
  ) {
    return __objc_msgSend_338(
      obj,
      sel,
      otherSet,
    );
  }

  late final __objc_msgSend_338Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_338 = __objc_msgSend_338Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_339(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_339(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_339Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_339 = __objc_msgSend_339Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_340(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange aRange,
  ) {
    return __objc_msgSend_340(
      obj,
      sel,
      aRange,
    );
  }

  late final __objc_msgSend_340Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_340 = __objc_msgSend_340Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_341(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_341(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_341Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_341 = __objc_msgSend_341Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_342(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_342(
      obj,
      sel,
      data,
    );
  }

  late final __objc_msgSend_342Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_342 = __objc_msgSend_342Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_343(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> fName,
  ) {
    return __objc_msgSend_343(
      obj,
      sel,
      fName,
    );
  }

  late final __objc_msgSend_343Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_343 = __objc_msgSend_343Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSHTTPPropertyStatusCodeKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyStatusCodeKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyStatusCodeKey =>
      _NSHTTPPropertyStatusCodeKey.value;

  set NSHTTPPropertyStatusCodeKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyStatusCodeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyStatusReasonKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyStatusReasonKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyStatusReasonKey =>
      _NSHTTPPropertyStatusReasonKey.value;

  set NSHTTPPropertyStatusReasonKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyStatusReasonKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyServerHTTPVersionKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyServerHTTPVersionKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyServerHTTPVersionKey =>
      _NSHTTPPropertyServerHTTPVersionKey.value;

  set NSHTTPPropertyServerHTTPVersionKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyServerHTTPVersionKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyRedirectionHeadersKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyRedirectionHeadersKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyRedirectionHeadersKey =>
      _NSHTTPPropertyRedirectionHeadersKey.value;

  set NSHTTPPropertyRedirectionHeadersKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyRedirectionHeadersKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyErrorPageDataKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyErrorPageDataKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyErrorPageDataKey =>
      _NSHTTPPropertyErrorPageDataKey.value;

  set NSHTTPPropertyErrorPageDataKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyErrorPageDataKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSHTTPPropertyHTTPProxy =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyHTTPProxy');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyHTTPProxy =>
      _NSHTTPPropertyHTTPProxy.value;

  set NSHTTPPropertyHTTPProxy(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyHTTPProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSFTPPropertyUserLoginKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyUserLoginKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyUserLoginKey =>
      _NSFTPPropertyUserLoginKey.value;

  set NSFTPPropertyUserLoginKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyUserLoginKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSFTPPropertyUserPasswordKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyUserPasswordKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyUserPasswordKey =>
      _NSFTPPropertyUserPasswordKey.value;

  set NSFTPPropertyUserPasswordKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyUserPasswordKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSFTPPropertyActiveTransferModeKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyActiveTransferModeKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyActiveTransferModeKey =>
      _NSFTPPropertyActiveTransferModeKey.value;

  set NSFTPPropertyActiveTransferModeKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyActiveTransferModeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSFTPPropertyFileOffsetKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyFileOffsetKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyFileOffsetKey =>
      _NSFTPPropertyFileOffsetKey.value;

  set NSFTPPropertyFileOffsetKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyFileOffsetKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSFTPPropertyFTPProxy =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyFTPProxy');

  ffi.Pointer<ObjCObject> get NSFTPPropertyFTPProxy =>
      _NSFTPPropertyFTPProxy.value;

  set NSFTPPropertyFTPProxy(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyFTPProxy.value = value;

  void _objc_msgSend_344(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anURLHandleSubclass,
  ) {
    return __objc_msgSend_344(
      obj,
      sel,
      anURLHandleSubclass,
    );
  }

  late final __objc_msgSend_344Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_344 = __objc_msgSend_344Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_345(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anURL,
  ) {
    return __objc_msgSend_345(
      obj,
      sel,
      anURL,
    );
  }

  late final __objc_msgSend_345Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_345 = __objc_msgSend_345Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  int _objc_msgSend_346(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_346(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_346Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_346 = __objc_msgSend_346Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_347(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> client,
  ) {
    return __objc_msgSend_347(
      obj,
      sel,
      client,
    );
  }

  late final __objc_msgSend_347Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_347 = __objc_msgSend_347Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_348(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> client,
  ) {
    return __objc_msgSend_348(
      obj,
      sel,
      client,
    );
  }

  late final __objc_msgSend_348Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_348 = __objc_msgSend_348Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_349(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_349(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_349Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_349 = __objc_msgSend_349Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_350(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> reason,
  ) {
    return __objc_msgSend_350(
      obj,
      sel,
      reason,
    );
  }

  late final __objc_msgSend_350Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_350 = __objc_msgSend_350Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_351(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newBytes,
    bool yorn,
  ) {
    return __objc_msgSend_351(
      obj,
      sel,
      newBytes,
      yorn ? 1 : 0,
    );
  }

  late final __objc_msgSend_351Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_351 = __objc_msgSend_351Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  bool _objc_msgSend_352(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anURL,
  ) {
    return __objc_msgSend_352(
          obj,
          sel,
          anURL,
        ) !=
        0;
  }

  late final __objc_msgSend_352Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_352 = __objc_msgSend_352Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_353(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anURL,
  ) {
    return __objc_msgSend_353(
      obj,
      sel,
      anURL,
    );
  }

  late final __objc_msgSend_353Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_353 = __objc_msgSend_353Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  void _objc_msgSend_354(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anURL,
    bool willCache,
  ) {
    return __objc_msgSend_354(
      obj,
      sel,
      anURL,
      willCache ? 1 : 0,
    );
  }

  late final __objc_msgSend_354Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_354 = __objc_msgSend_354Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_355(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> propertyKey,
  ) {
    return __objc_msgSend_355(
      obj,
      sel,
      propertyKey,
    );
  }

  late final __objc_msgSend_355Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_355 = __objc_msgSend_355Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_356(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> propertyKey,
  ) {
    return __objc_msgSend_356(
      obj,
      sel,
      propertyKey,
    );
  }

  late final __objc_msgSend_356Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_356 = __objc_msgSend_356Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_357(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> propertyValue,
    ffi.Pointer<ObjCObject> propertyKey,
  ) {
    return __objc_msgSend_357(
          obj,
          sel,
          propertyValue,
          propertyKey,
        ) !=
        0;
  }

  late final __objc_msgSend_357Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_357 = __objc_msgSend_357Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  bool _objc_msgSend_358(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
  ) {
    return __objc_msgSend_358(
          obj,
          sel,
          data,
        ) !=
        0;
  }

  late final __objc_msgSend_358Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_358 = __objc_msgSend_358Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_359(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> scheme,
    ffi.Pointer<ObjCObject> host,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_359(
      obj,
      sel,
      scheme,
      host,
      path,
    );
  }

  late final __objc_msgSend_359Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_359 = __objc_msgSend_359Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_360(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_360(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_360Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_360 = __objc_msgSend_360Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_361(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_361(
      obj,
      sel,
      path,
      baseURL,
    );
  }

  late final __objc_msgSend_361Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_361 = __objc_msgSend_361Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_362(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
  ) {
    return __objc_msgSend_362(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
    );
  }

  late final __objc_msgSend_362Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_362 = __objc_msgSend_362Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  instancetype _objc_msgSend_363(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_363(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_363Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_363 = __objc_msgSend_363Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_364(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_364(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_364Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_364 = __objc_msgSend_364Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_365(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_365(
      obj,
      sel,
      path,
      baseURL,
    );
  }

  late final __objc_msgSend_365Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_365 = __objc_msgSend_365Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_366(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
  ) {
    return __objc_msgSend_366(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
    );
  }

  late final __objc_msgSend_366Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_366 = __objc_msgSend_366Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_367(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_367(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_367Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_367 = __objc_msgSend_367Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_368(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_368(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_368Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_368 = __objc_msgSend_368Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_369(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_369(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_369Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_369 = __objc_msgSend_369Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>,
          int,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_370(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
  ) {
    return __objc_msgSend_370(
      obj,
      sel,
      URLString,
    );
  }

  late final __objc_msgSend_370Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_370 = __objc_msgSend_370Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_371(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_371(
      obj,
      sel,
      URLString,
      baseURL,
    );
  }

  late final __objc_msgSend_371Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_371 = __objc_msgSend_371Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_372(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
  ) {
    return __objc_msgSend_372(
      obj,
      sel,
      URLString,
    );
  }

  late final __objc_msgSend_372Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_372 = __objc_msgSend_372Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_373(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_373(
      obj,
      sel,
      URLString,
      baseURL,
    );
  }

  late final __objc_msgSend_373Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_373 = __objc_msgSend_373Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_374(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_374(
      obj,
      sel,
      data,
      baseURL,
    );
  }

  late final __objc_msgSend_374Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_374 = __objc_msgSend_374Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_375(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_375(
      obj,
      sel,
      data,
      baseURL,
    );
  }

  late final __objc_msgSend_375Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_375 = __objc_msgSend_375Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_376(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_376(
      obj,
      sel,
      data,
      baseURL,
    );
  }

  late final __objc_msgSend_376Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_376 = __objc_msgSend_376Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_377(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_377(
      obj,
      sel,
      data,
      baseURL,
    );
  }

  late final __objc_msgSend_377Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_377 = __objc_msgSend_377Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_378(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_378(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_378Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_378 = __objc_msgSend_378Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_379(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_379(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_379Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_379 = __objc_msgSend_379Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_380(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_380(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_380Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_380 = __objc_msgSend_380Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_381(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_381(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_381Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_381 = __objc_msgSend_381Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_382(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_382(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_382Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_382 = __objc_msgSend_382Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_383(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_383(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_383Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_383 = __objc_msgSend_383Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_384(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_384(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_384Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_384 = __objc_msgSend_384Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_385(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_385(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_385Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_385 = __objc_msgSend_385Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_386(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_386(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_386Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_386 = __objc_msgSend_386Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_387(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_387(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_387Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_387 = __objc_msgSend_387Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_388(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_388(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_388Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_388 = __objc_msgSend_388Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_389(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_389(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_389Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_389 = __objc_msgSend_389Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_390(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_390(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_390Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_390 = __objc_msgSend_390Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_391(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_391(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_391Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_391 = __objc_msgSend_391Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_392(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_392(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_392Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_392 = __objc_msgSend_392Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_393(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_393(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_393Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_393 = __objc_msgSend_393Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_394(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int maxBufferLength,
  ) {
    return __objc_msgSend_394(
          obj,
          sel,
          buffer,
          maxBufferLength,
        ) !=
        0;
  }

  late final __objc_msgSend_394Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_394 = __objc_msgSend_394Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> _objc_msgSend_395(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_395(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_395Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_395 = __objc_msgSend_395Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_396(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_396(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_396Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_396 = __objc_msgSend_396Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_397(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_397(
          obj,
          sel,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_397Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_397 = __objc_msgSend_397Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_398(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_398(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_398Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_398 = __objc_msgSend_398Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_399(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_399(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_399Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_399 = __objc_msgSend_399Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  bool _objc_msgSend_400(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> value,
    NSURLResourceKey key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_400(
          obj,
          sel,
          value,
          key,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_400Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSURLResourceKey,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_400 = __objc_msgSend_400Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          NSURLResourceKey,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  bool _objc_msgSend_401(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    NSURLResourceKey key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_401(
          obj,
          sel,
          value,
          key,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_401Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSURLResourceKey,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_401 = __objc_msgSend_401Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          NSURLResourceKey,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  bool _objc_msgSend_402(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> keyedValues,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_402(
          obj,
          sel,
          keyedValues,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_402Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_402 = __objc_msgSend_402Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  void _objc_msgSend_403(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSURLResourceKey key,
  ) {
    return __objc_msgSend_403(
      obj,
      sel,
      key,
    );
  }

  late final __objc_msgSend_403Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSURLResourceKey)>>('objc_msgSend');
  late final __objc_msgSend_403 = __objc_msgSend_403Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSURLResourceKey)>();

  void _objc_msgSend_404(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    NSURLResourceKey key,
  ) {
    return __objc_msgSend_404(
      obj,
      sel,
      value,
      key,
    );
  }

  late final __objc_msgSend_404Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSURLResourceKey)>>('objc_msgSend');
  late final __objc_msgSend_404 = __objc_msgSend_404Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSURLResourceKey)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_405(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_405(
      obj,
      sel,
      options,
      keys,
      relativeURL,
      error,
    );
  }

  late final __objc_msgSend_405Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_405 = __objc_msgSend_405Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  instancetype _objc_msgSend_406(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    int options,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Uint8> isStale,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_406(
      obj,
      sel,
      bookmarkData,
      options,
      relativeURL,
      isStale,
      error,
    );
  }

  late final __objc_msgSend_406Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_406 = __objc_msgSend_406Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  instancetype _objc_msgSend_407(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    int options,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Uint8> isStale,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_407(
      obj,
      sel,
      bookmarkData,
      options,
      relativeURL,
      isStale,
      error,
    );
  }

  late final __objc_msgSend_407Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_407 = __objc_msgSend_407Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  bool _objc_msgSend_408(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    ffi.Pointer<ObjCObject> bookmarkFileURL,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_408(
          obj,
          sel,
          bookmarkData,
          bookmarkFileURL,
          options,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_408Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSURLBookmarkFileCreationOptions,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_408 = __objc_msgSend_408Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_409(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkFileURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_409(
      obj,
      sel,
      bookmarkFileURL,
      error,
    );
  }

  late final __objc_msgSend_409Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_409 = __objc_msgSend_409Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  instancetype _objc_msgSend_410(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_410(
      obj,
      sel,
      url,
      options,
      error,
    );
  }

  late final __objc_msgSend_410Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_410 = __objc_msgSend_410Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSURLFileScheme =
      _lookup<ffi.Pointer<ObjCObject>>('NSURLFileScheme');

  ffi.Pointer<ObjCObject> get NSURLFileScheme => _NSURLFileScheme.value;

  set NSURLFileScheme(ffi.Pointer<ObjCObject> value) =>
      _NSURLFileScheme.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLKeysOfUnsetValuesKey =
      _lookup<NSURLResourceKey>('NSURLKeysOfUnsetValuesKey');

  NSURLResourceKey get NSURLKeysOfUnsetValuesKey =>
      _NSURLKeysOfUnsetValuesKey.value;

  set NSURLKeysOfUnsetValuesKey(NSURLResourceKey value) =>
      _NSURLKeysOfUnsetValuesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLNameKey =
      _lookup<NSURLResourceKey>('NSURLNameKey');

  NSURLResourceKey get NSURLNameKey => _NSURLNameKey.value;

  set NSURLNameKey(NSURLResourceKey value) => _NSURLNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedNameKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedNameKey');

  NSURLResourceKey get NSURLLocalizedNameKey => _NSURLLocalizedNameKey.value;

  set NSURLLocalizedNameKey(NSURLResourceKey value) =>
      _NSURLLocalizedNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsRegularFileKey =
      _lookup<NSURLResourceKey>('NSURLIsRegularFileKey');

  NSURLResourceKey get NSURLIsRegularFileKey => _NSURLIsRegularFileKey.value;

  set NSURLIsRegularFileKey(NSURLResourceKey value) =>
      _NSURLIsRegularFileKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsDirectoryKey =
      _lookup<NSURLResourceKey>('NSURLIsDirectoryKey');

  NSURLResourceKey get NSURLIsDirectoryKey => _NSURLIsDirectoryKey.value;

  set NSURLIsDirectoryKey(NSURLResourceKey value) =>
      _NSURLIsDirectoryKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSymbolicLinkKey =
      _lookup<NSURLResourceKey>('NSURLIsSymbolicLinkKey');

  NSURLResourceKey get NSURLIsSymbolicLinkKey => _NSURLIsSymbolicLinkKey.value;

  set NSURLIsSymbolicLinkKey(NSURLResourceKey value) =>
      _NSURLIsSymbolicLinkKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsVolumeKey =
      _lookup<NSURLResourceKey>('NSURLIsVolumeKey');

  NSURLResourceKey get NSURLIsVolumeKey => _NSURLIsVolumeKey.value;

  set NSURLIsVolumeKey(NSURLResourceKey value) =>
      _NSURLIsVolumeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsPackageKey =
      _lookup<NSURLResourceKey>('NSURLIsPackageKey');

  NSURLResourceKey get NSURLIsPackageKey => _NSURLIsPackageKey.value;

  set NSURLIsPackageKey(NSURLResourceKey value) =>
      _NSURLIsPackageKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsApplicationKey =
      _lookup<NSURLResourceKey>('NSURLIsApplicationKey');

  NSURLResourceKey get NSURLIsApplicationKey => _NSURLIsApplicationKey.value;

  set NSURLIsApplicationKey(NSURLResourceKey value) =>
      _NSURLIsApplicationKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLApplicationIsScriptableKey =
      _lookup<NSURLResourceKey>('NSURLApplicationIsScriptableKey');

  NSURLResourceKey get NSURLApplicationIsScriptableKey =>
      _NSURLApplicationIsScriptableKey.value;

  set NSURLApplicationIsScriptableKey(NSURLResourceKey value) =>
      _NSURLApplicationIsScriptableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSystemImmutableKey =
      _lookup<NSURLResourceKey>('NSURLIsSystemImmutableKey');

  NSURLResourceKey get NSURLIsSystemImmutableKey =>
      _NSURLIsSystemImmutableKey.value;

  set NSURLIsSystemImmutableKey(NSURLResourceKey value) =>
      _NSURLIsSystemImmutableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsUserImmutableKey =
      _lookup<NSURLResourceKey>('NSURLIsUserImmutableKey');

  NSURLResourceKey get NSURLIsUserImmutableKey =>
      _NSURLIsUserImmutableKey.value;

  set NSURLIsUserImmutableKey(NSURLResourceKey value) =>
      _NSURLIsUserImmutableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsHiddenKey =
      _lookup<NSURLResourceKey>('NSURLIsHiddenKey');

  NSURLResourceKey get NSURLIsHiddenKey => _NSURLIsHiddenKey.value;

  set NSURLIsHiddenKey(NSURLResourceKey value) =>
      _NSURLIsHiddenKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLHasHiddenExtensionKey =
      _lookup<NSURLResourceKey>('NSURLHasHiddenExtensionKey');

  NSURLResourceKey get NSURLHasHiddenExtensionKey =>
      _NSURLHasHiddenExtensionKey.value;

  set NSURLHasHiddenExtensionKey(NSURLResourceKey value) =>
      _NSURLHasHiddenExtensionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLCreationDateKey =
      _lookup<NSURLResourceKey>('NSURLCreationDateKey');

  NSURLResourceKey get NSURLCreationDateKey => _NSURLCreationDateKey.value;

  set NSURLCreationDateKey(NSURLResourceKey value) =>
      _NSURLCreationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLContentAccessDateKey =
      _lookup<NSURLResourceKey>('NSURLContentAccessDateKey');

  NSURLResourceKey get NSURLContentAccessDateKey =>
      _NSURLContentAccessDateKey.value;

  set NSURLContentAccessDateKey(NSURLResourceKey value) =>
      _NSURLContentAccessDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLContentModificationDateKey =
      _lookup<NSURLResourceKey>('NSURLContentModificationDateKey');

  NSURLResourceKey get NSURLContentModificationDateKey =>
      _NSURLContentModificationDateKey.value;

  set NSURLContentModificationDateKey(NSURLResourceKey value) =>
      _NSURLContentModificationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLAttributeModificationDateKey =
      _lookup<NSURLResourceKey>('NSURLAttributeModificationDateKey');

  NSURLResourceKey get NSURLAttributeModificationDateKey =>
      _NSURLAttributeModificationDateKey.value;

  set NSURLAttributeModificationDateKey(NSURLResourceKey value) =>
      _NSURLAttributeModificationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLinkCountKey =
      _lookup<NSURLResourceKey>('NSURLLinkCountKey');

  NSURLResourceKey get NSURLLinkCountKey => _NSURLLinkCountKey.value;

  set NSURLLinkCountKey(NSURLResourceKey value) =>
      _NSURLLinkCountKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLParentDirectoryURLKey =
      _lookup<NSURLResourceKey>('NSURLParentDirectoryURLKey');

  NSURLResourceKey get NSURLParentDirectoryURLKey =>
      _NSURLParentDirectoryURLKey.value;

  set NSURLParentDirectoryURLKey(NSURLResourceKey value) =>
      _NSURLParentDirectoryURLKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeURLKey =
      _lookup<NSURLResourceKey>('NSURLVolumeURLKey');

  NSURLResourceKey get NSURLVolumeURLKey => _NSURLVolumeURLKey.value;

  set NSURLVolumeURLKey(NSURLResourceKey value) =>
      _NSURLVolumeURLKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTypeIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLTypeIdentifierKey');

  NSURLResourceKey get NSURLTypeIdentifierKey => _NSURLTypeIdentifierKey.value;

  set NSURLTypeIdentifierKey(NSURLResourceKey value) =>
      _NSURLTypeIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLContentTypeKey =
      _lookup<NSURLResourceKey>('NSURLContentTypeKey');

  NSURLResourceKey get NSURLContentTypeKey => _NSURLContentTypeKey.value;

  set NSURLContentTypeKey(NSURLResourceKey value) =>
      _NSURLContentTypeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedTypeDescriptionKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedTypeDescriptionKey');

  NSURLResourceKey get NSURLLocalizedTypeDescriptionKey =>
      _NSURLLocalizedTypeDescriptionKey.value;

  set NSURLLocalizedTypeDescriptionKey(NSURLResourceKey value) =>
      _NSURLLocalizedTypeDescriptionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLabelNumberKey =
      _lookup<NSURLResourceKey>('NSURLLabelNumberKey');

  NSURLResourceKey get NSURLLabelNumberKey => _NSURLLabelNumberKey.value;

  set NSURLLabelNumberKey(NSURLResourceKey value) =>
      _NSURLLabelNumberKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLabelColorKey =
      _lookup<NSURLResourceKey>('NSURLLabelColorKey');

  NSURLResourceKey get NSURLLabelColorKey => _NSURLLabelColorKey.value;

  set NSURLLabelColorKey(NSURLResourceKey value) =>
      _NSURLLabelColorKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedLabelKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedLabelKey');

  NSURLResourceKey get NSURLLocalizedLabelKey => _NSURLLocalizedLabelKey.value;

  set NSURLLocalizedLabelKey(NSURLResourceKey value) =>
      _NSURLLocalizedLabelKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLEffectiveIconKey =
      _lookup<NSURLResourceKey>('NSURLEffectiveIconKey');

  NSURLResourceKey get NSURLEffectiveIconKey => _NSURLEffectiveIconKey.value;

  set NSURLEffectiveIconKey(NSURLResourceKey value) =>
      _NSURLEffectiveIconKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLCustomIconKey =
      _lookup<NSURLResourceKey>('NSURLCustomIconKey');

  NSURLResourceKey get NSURLCustomIconKey => _NSURLCustomIconKey.value;

  set NSURLCustomIconKey(NSURLResourceKey value) =>
      _NSURLCustomIconKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileResourceIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLFileResourceIdentifierKey');

  NSURLResourceKey get NSURLFileResourceIdentifierKey =>
      _NSURLFileResourceIdentifierKey.value;

  set NSURLFileResourceIdentifierKey(NSURLResourceKey value) =>
      _NSURLFileResourceIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIdentifierKey');

  NSURLResourceKey get NSURLVolumeIdentifierKey =>
      _NSURLVolumeIdentifierKey.value;

  set NSURLVolumeIdentifierKey(NSURLResourceKey value) =>
      _NSURLVolumeIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLPreferredIOBlockSizeKey =
      _lookup<NSURLResourceKey>('NSURLPreferredIOBlockSizeKey');

  NSURLResourceKey get NSURLPreferredIOBlockSizeKey =>
      _NSURLPreferredIOBlockSizeKey.value;

  set NSURLPreferredIOBlockSizeKey(NSURLResourceKey value) =>
      _NSURLPreferredIOBlockSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsReadableKey =
      _lookup<NSURLResourceKey>('NSURLIsReadableKey');

  NSURLResourceKey get NSURLIsReadableKey => _NSURLIsReadableKey.value;

  set NSURLIsReadableKey(NSURLResourceKey value) =>
      _NSURLIsReadableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsWritableKey =
      _lookup<NSURLResourceKey>('NSURLIsWritableKey');

  NSURLResourceKey get NSURLIsWritableKey => _NSURLIsWritableKey.value;

  set NSURLIsWritableKey(NSURLResourceKey value) =>
      _NSURLIsWritableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsExecutableKey =
      _lookup<NSURLResourceKey>('NSURLIsExecutableKey');

  NSURLResourceKey get NSURLIsExecutableKey => _NSURLIsExecutableKey.value;

  set NSURLIsExecutableKey(NSURLResourceKey value) =>
      _NSURLIsExecutableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileSecurityKey =
      _lookup<NSURLResourceKey>('NSURLFileSecurityKey');

  NSURLResourceKey get NSURLFileSecurityKey => _NSURLFileSecurityKey.value;

  set NSURLFileSecurityKey(NSURLResourceKey value) =>
      _NSURLFileSecurityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsExcludedFromBackupKey =
      _lookup<NSURLResourceKey>('NSURLIsExcludedFromBackupKey');

  NSURLResourceKey get NSURLIsExcludedFromBackupKey =>
      _NSURLIsExcludedFromBackupKey.value;

  set NSURLIsExcludedFromBackupKey(NSURLResourceKey value) =>
      _NSURLIsExcludedFromBackupKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTagNamesKey =
      _lookup<NSURLResourceKey>('NSURLTagNamesKey');

  NSURLResourceKey get NSURLTagNamesKey => _NSURLTagNamesKey.value;

  set NSURLTagNamesKey(NSURLResourceKey value) =>
      _NSURLTagNamesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLPathKey =
      _lookup<NSURLResourceKey>('NSURLPathKey');

  NSURLResourceKey get NSURLPathKey => _NSURLPathKey.value;

  set NSURLPathKey(NSURLResourceKey value) => _NSURLPathKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLCanonicalPathKey =
      _lookup<NSURLResourceKey>('NSURLCanonicalPathKey');

  NSURLResourceKey get NSURLCanonicalPathKey => _NSURLCanonicalPathKey.value;

  set NSURLCanonicalPathKey(NSURLResourceKey value) =>
      _NSURLCanonicalPathKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsMountTriggerKey =
      _lookup<NSURLResourceKey>('NSURLIsMountTriggerKey');

  NSURLResourceKey get NSURLIsMountTriggerKey => _NSURLIsMountTriggerKey.value;

  set NSURLIsMountTriggerKey(NSURLResourceKey value) =>
      _NSURLIsMountTriggerKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLGenerationIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLGenerationIdentifierKey');

  NSURLResourceKey get NSURLGenerationIdentifierKey =>
      _NSURLGenerationIdentifierKey.value;

  set NSURLGenerationIdentifierKey(NSURLResourceKey value) =>
      _NSURLGenerationIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLDocumentIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLDocumentIdentifierKey');

  NSURLResourceKey get NSURLDocumentIdentifierKey =>
      _NSURLDocumentIdentifierKey.value;

  set NSURLDocumentIdentifierKey(NSURLResourceKey value) =>
      _NSURLDocumentIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLAddedToDirectoryDateKey =
      _lookup<NSURLResourceKey>('NSURLAddedToDirectoryDateKey');

  NSURLResourceKey get NSURLAddedToDirectoryDateKey =>
      _NSURLAddedToDirectoryDateKey.value;

  set NSURLAddedToDirectoryDateKey(NSURLResourceKey value) =>
      _NSURLAddedToDirectoryDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLQuarantinePropertiesKey =
      _lookup<NSURLResourceKey>('NSURLQuarantinePropertiesKey');

  NSURLResourceKey get NSURLQuarantinePropertiesKey =>
      _NSURLQuarantinePropertiesKey.value;

  set NSURLQuarantinePropertiesKey(NSURLResourceKey value) =>
      _NSURLQuarantinePropertiesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileResourceTypeKey =
      _lookup<NSURLResourceKey>('NSURLFileResourceTypeKey');

  NSURLResourceKey get NSURLFileResourceTypeKey =>
      _NSURLFileResourceTypeKey.value;

  set NSURLFileResourceTypeKey(NSURLResourceKey value) =>
      _NSURLFileResourceTypeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileContentIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLFileContentIdentifierKey');

  NSURLResourceKey get NSURLFileContentIdentifierKey =>
      _NSURLFileContentIdentifierKey.value;

  set NSURLFileContentIdentifierKey(NSURLResourceKey value) =>
      _NSURLFileContentIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLMayShareFileContentKey =
      _lookup<NSURLResourceKey>('NSURLMayShareFileContentKey');

  NSURLResourceKey get NSURLMayShareFileContentKey =>
      _NSURLMayShareFileContentKey.value;

  set NSURLMayShareFileContentKey(NSURLResourceKey value) =>
      _NSURLMayShareFileContentKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLMayHaveExtendedAttributesKey =
      _lookup<NSURLResourceKey>('NSURLMayHaveExtendedAttributesKey');

  NSURLResourceKey get NSURLMayHaveExtendedAttributesKey =>
      _NSURLMayHaveExtendedAttributesKey.value;

  set NSURLMayHaveExtendedAttributesKey(NSURLResourceKey value) =>
      _NSURLMayHaveExtendedAttributesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsPurgeableKey =
      _lookup<NSURLResourceKey>('NSURLIsPurgeableKey');

  NSURLResourceKey get NSURLIsPurgeableKey => _NSURLIsPurgeableKey.value;

  set NSURLIsPurgeableKey(NSURLResourceKey value) =>
      _NSURLIsPurgeableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSparseKey =
      _lookup<NSURLResourceKey>('NSURLIsSparseKey');

  NSURLResourceKey get NSURLIsSparseKey => _NSURLIsSparseKey.value;

  set NSURLIsSparseKey(NSURLResourceKey value) =>
      _NSURLIsSparseKey.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeNamedPipe =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeNamedPipe');

  NSURLFileResourceType get NSURLFileResourceTypeNamedPipe =>
      _NSURLFileResourceTypeNamedPipe.value;

  set NSURLFileResourceTypeNamedPipe(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeNamedPipe.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeCharacterSpecial =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeCharacterSpecial');

  NSURLFileResourceType get NSURLFileResourceTypeCharacterSpecial =>
      _NSURLFileResourceTypeCharacterSpecial.value;

  set NSURLFileResourceTypeCharacterSpecial(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeCharacterSpecial.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeDirectory =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeDirectory');

  NSURLFileResourceType get NSURLFileResourceTypeDirectory =>
      _NSURLFileResourceTypeDirectory.value;

  set NSURLFileResourceTypeDirectory(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeDirectory.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeBlockSpecial =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeBlockSpecial');

  NSURLFileResourceType get NSURLFileResourceTypeBlockSpecial =>
      _NSURLFileResourceTypeBlockSpecial.value;

  set NSURLFileResourceTypeBlockSpecial(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeBlockSpecial.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeRegular =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeRegular');

  NSURLFileResourceType get NSURLFileResourceTypeRegular =>
      _NSURLFileResourceTypeRegular.value;

  set NSURLFileResourceTypeRegular(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeRegular.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeSymbolicLink =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeSymbolicLink');

  NSURLFileResourceType get NSURLFileResourceTypeSymbolicLink =>
      _NSURLFileResourceTypeSymbolicLink.value;

  set NSURLFileResourceTypeSymbolicLink(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeSymbolicLink.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeSocket =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeSocket');

  NSURLFileResourceType get NSURLFileResourceTypeSocket =>
      _NSURLFileResourceTypeSocket.value;

  set NSURLFileResourceTypeSocket(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeSocket.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeUnknown =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeUnknown');

  NSURLFileResourceType get NSURLFileResourceTypeUnknown =>
      _NSURLFileResourceTypeUnknown.value;

  set NSURLFileResourceTypeUnknown(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeUnknown.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLThumbnailDictionaryKey =
      _lookup<NSURLResourceKey>('NSURLThumbnailDictionaryKey');

  NSURLResourceKey get NSURLThumbnailDictionaryKey =>
      _NSURLThumbnailDictionaryKey.value;

  set NSURLThumbnailDictionaryKey(NSURLResourceKey value) =>
      _NSURLThumbnailDictionaryKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLThumbnailKey =
      _lookup<NSURLResourceKey>('NSURLThumbnailKey');

  NSURLResourceKey get NSURLThumbnailKey => _NSURLThumbnailKey.value;

  set NSURLThumbnailKey(NSURLResourceKey value) =>
      _NSURLThumbnailKey.value = value;

  late final ffi.Pointer<NSURLThumbnailDictionaryItem>
      _NSThumbnail1024x1024SizeKey =
      _lookup<NSURLThumbnailDictionaryItem>('NSThumbnail1024x1024SizeKey');

  NSURLThumbnailDictionaryItem get NSThumbnail1024x1024SizeKey =>
      _NSThumbnail1024x1024SizeKey.value;

  set NSThumbnail1024x1024SizeKey(NSURLThumbnailDictionaryItem value) =>
      _NSThumbnail1024x1024SizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLFileSizeKey');

  NSURLResourceKey get NSURLFileSizeKey => _NSURLFileSizeKey.value;

  set NSURLFileSizeKey(NSURLResourceKey value) =>
      _NSURLFileSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileAllocatedSizeKey =
      _lookup<NSURLResourceKey>('NSURLFileAllocatedSizeKey');

  NSURLResourceKey get NSURLFileAllocatedSizeKey =>
      _NSURLFileAllocatedSizeKey.value;

  set NSURLFileAllocatedSizeKey(NSURLResourceKey value) =>
      _NSURLFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTotalFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLTotalFileSizeKey');

  NSURLResourceKey get NSURLTotalFileSizeKey => _NSURLTotalFileSizeKey.value;

  set NSURLTotalFileSizeKey(NSURLResourceKey value) =>
      _NSURLTotalFileSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTotalFileAllocatedSizeKey =
      _lookup<NSURLResourceKey>('NSURLTotalFileAllocatedSizeKey');

  NSURLResourceKey get NSURLTotalFileAllocatedSizeKey =>
      _NSURLTotalFileAllocatedSizeKey.value;

  set NSURLTotalFileAllocatedSizeKey(NSURLResourceKey value) =>
      _NSURLTotalFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsAliasFileKey =
      _lookup<NSURLResourceKey>('NSURLIsAliasFileKey');

  NSURLResourceKey get NSURLIsAliasFileKey => _NSURLIsAliasFileKey.value;

  set NSURLIsAliasFileKey(NSURLResourceKey value) =>
      _NSURLIsAliasFileKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileProtectionKey =
      _lookup<NSURLResourceKey>('NSURLFileProtectionKey');

  NSURLResourceKey get NSURLFileProtectionKey => _NSURLFileProtectionKey.value;

  set NSURLFileProtectionKey(NSURLResourceKey value) =>
      _NSURLFileProtectionKey.value = value;

  late final ffi.Pointer<NSURLFileProtectionType> _NSURLFileProtectionNone =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionNone');

  NSURLFileProtectionType get NSURLFileProtectionNone =>
      _NSURLFileProtectionNone.value;

  set NSURLFileProtectionNone(NSURLFileProtectionType value) =>
      _NSURLFileProtectionNone.value = value;

  late final ffi.Pointer<NSURLFileProtectionType> _NSURLFileProtectionComplete =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionComplete');

  NSURLFileProtectionType get NSURLFileProtectionComplete =>
      _NSURLFileProtectionComplete.value;

  set NSURLFileProtectionComplete(NSURLFileProtectionType value) =>
      _NSURLFileProtectionComplete.value = value;

  late final ffi.Pointer<NSURLFileProtectionType>
      _NSURLFileProtectionCompleteUnlessOpen =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionCompleteUnlessOpen');

  NSURLFileProtectionType get NSURLFileProtectionCompleteUnlessOpen =>
      _NSURLFileProtectionCompleteUnlessOpen.value;

  set NSURLFileProtectionCompleteUnlessOpen(NSURLFileProtectionType value) =>
      _NSURLFileProtectionCompleteUnlessOpen.value = value;

  late final ffi.Pointer<NSURLFileProtectionType>
      _NSURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<NSURLFileProtectionType>(
          'NSURLFileProtectionCompleteUntilFirstUserAuthentication');

  NSURLFileProtectionType
      get NSURLFileProtectionCompleteUntilFirstUserAuthentication =>
          _NSURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  set NSURLFileProtectionCompleteUntilFirstUserAuthentication(
          NSURLFileProtectionType value) =>
      _NSURLFileProtectionCompleteUntilFirstUserAuthentication.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeLocalizedFormatDescriptionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeLocalizedFormatDescriptionKey');

  NSURLResourceKey get NSURLVolumeLocalizedFormatDescriptionKey =>
      _NSURLVolumeLocalizedFormatDescriptionKey.value;

  set NSURLVolumeLocalizedFormatDescriptionKey(NSURLResourceKey value) =>
      _NSURLVolumeLocalizedFormatDescriptionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeTotalCapacityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeTotalCapacityKey');

  NSURLResourceKey get NSURLVolumeTotalCapacityKey =>
      _NSURLVolumeTotalCapacityKey.value;

  set NSURLVolumeTotalCapacityKey(NSURLResourceKey value) =>
      _NSURLVolumeTotalCapacityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeAvailableCapacityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeAvailableCapacityKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityKey =>
      _NSURLVolumeAvailableCapacityKey.value;

  set NSURLVolumeAvailableCapacityKey(NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeResourceCountKey =
      _lookup<NSURLResourceKey>('NSURLVolumeResourceCountKey');

  NSURLResourceKey get NSURLVolumeResourceCountKey =>
      _NSURLVolumeResourceCountKey.value;

  set NSURLVolumeResourceCountKey(NSURLResourceKey value) =>
      _NSURLVolumeResourceCountKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsPersistentIDsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsPersistentIDsKey');

  NSURLResourceKey get NSURLVolumeSupportsPersistentIDsKey =>
      _NSURLVolumeSupportsPersistentIDsKey.value;

  set NSURLVolumeSupportsPersistentIDsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsPersistentIDsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsSymbolicLinksKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSymbolicLinksKey');

  NSURLResourceKey get NSURLVolumeSupportsSymbolicLinksKey =>
      _NSURLVolumeSupportsSymbolicLinksKey.value;

  set NSURLVolumeSupportsSymbolicLinksKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSymbolicLinksKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsHardLinksKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsHardLinksKey');

  NSURLResourceKey get NSURLVolumeSupportsHardLinksKey =>
      _NSURLVolumeSupportsHardLinksKey.value;

  set NSURLVolumeSupportsHardLinksKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsHardLinksKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsJournalingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsJournalingKey');

  NSURLResourceKey get NSURLVolumeSupportsJournalingKey =>
      _NSURLVolumeSupportsJournalingKey.value;

  set NSURLVolumeSupportsJournalingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsJournalingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsJournalingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsJournalingKey');

  NSURLResourceKey get NSURLVolumeIsJournalingKey =>
      _NSURLVolumeIsJournalingKey.value;

  set NSURLVolumeIsJournalingKey(NSURLResourceKey value) =>
      _NSURLVolumeIsJournalingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsSparseFilesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSparseFilesKey');

  NSURLResourceKey get NSURLVolumeSupportsSparseFilesKey =>
      _NSURLVolumeSupportsSparseFilesKey.value;

  set NSURLVolumeSupportsSparseFilesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSparseFilesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsZeroRunsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsZeroRunsKey');

  NSURLResourceKey get NSURLVolumeSupportsZeroRunsKey =>
      _NSURLVolumeSupportsZeroRunsKey.value;

  set NSURLVolumeSupportsZeroRunsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsZeroRunsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCaseSensitiveNamesKey');

  NSURLResourceKey get NSURLVolumeSupportsCaseSensitiveNamesKey =>
      _NSURLVolumeSupportsCaseSensitiveNamesKey.value;

  set NSURLVolumeSupportsCaseSensitiveNamesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCaseSensitiveNamesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsCasePreservedNamesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCasePreservedNamesKey');

  NSURLResourceKey get NSURLVolumeSupportsCasePreservedNamesKey =>
      _NSURLVolumeSupportsCasePreservedNamesKey.value;

  set NSURLVolumeSupportsCasePreservedNamesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCasePreservedNamesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsRootDirectoryDatesKey');

  NSURLResourceKey get NSURLVolumeSupportsRootDirectoryDatesKey =>
      _NSURLVolumeSupportsRootDirectoryDatesKey.value;

  set NSURLVolumeSupportsRootDirectoryDatesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsRootDirectoryDatesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsVolumeSizesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsVolumeSizesKey');

  NSURLResourceKey get NSURLVolumeSupportsVolumeSizesKey =>
      _NSURLVolumeSupportsVolumeSizesKey.value;

  set NSURLVolumeSupportsVolumeSizesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsVolumeSizesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsRenamingKey =>
      _NSURLVolumeSupportsRenamingKey.value;

  set NSURLVolumeSupportsRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsRenamingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsAdvisoryFileLockingKey');

  NSURLResourceKey get NSURLVolumeSupportsAdvisoryFileLockingKey =>
      _NSURLVolumeSupportsAdvisoryFileLockingKey.value;

  set NSURLVolumeSupportsAdvisoryFileLockingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsAdvisoryFileLockingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsExtendedSecurityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsExtendedSecurityKey');

  NSURLResourceKey get NSURLVolumeSupportsExtendedSecurityKey =>
      _NSURLVolumeSupportsExtendedSecurityKey.value;

  set NSURLVolumeSupportsExtendedSecurityKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsExtendedSecurityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsBrowsableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsBrowsableKey');

  NSURLResourceKey get NSURLVolumeIsBrowsableKey =>
      _NSURLVolumeIsBrowsableKey.value;

  set NSURLVolumeIsBrowsableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsBrowsableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeMaximumFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLVolumeMaximumFileSizeKey');

  NSURLResourceKey get NSURLVolumeMaximumFileSizeKey =>
      _NSURLVolumeMaximumFileSizeKey.value;

  set NSURLVolumeMaximumFileSizeKey(NSURLResourceKey value) =>
      _NSURLVolumeMaximumFileSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsEjectableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsEjectableKey');

  NSURLResourceKey get NSURLVolumeIsEjectableKey =>
      _NSURLVolumeIsEjectableKey.value;

  set NSURLVolumeIsEjectableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsEjectableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsRemovableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsRemovableKey');

  NSURLResourceKey get NSURLVolumeIsRemovableKey =>
      _NSURLVolumeIsRemovableKey.value;

  set NSURLVolumeIsRemovableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsRemovableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsInternalKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsInternalKey');

  NSURLResourceKey get NSURLVolumeIsInternalKey =>
      _NSURLVolumeIsInternalKey.value;

  set NSURLVolumeIsInternalKey(NSURLResourceKey value) =>
      _NSURLVolumeIsInternalKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsAutomountedKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsAutomountedKey');

  NSURLResourceKey get NSURLVolumeIsAutomountedKey =>
      _NSURLVolumeIsAutomountedKey.value;

  set NSURLVolumeIsAutomountedKey(NSURLResourceKey value) =>
      _NSURLVolumeIsAutomountedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsLocalKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsLocalKey');

  NSURLResourceKey get NSURLVolumeIsLocalKey => _NSURLVolumeIsLocalKey.value;

  set NSURLVolumeIsLocalKey(NSURLResourceKey value) =>
      _NSURLVolumeIsLocalKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsReadOnlyKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsReadOnlyKey');

  NSURLResourceKey get NSURLVolumeIsReadOnlyKey =>
      _NSURLVolumeIsReadOnlyKey.value;

  set NSURLVolumeIsReadOnlyKey(NSURLResourceKey value) =>
      _NSURLVolumeIsReadOnlyKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeCreationDateKey =
      _lookup<NSURLResourceKey>('NSURLVolumeCreationDateKey');

  NSURLResourceKey get NSURLVolumeCreationDateKey =>
      _NSURLVolumeCreationDateKey.value;

  set NSURLVolumeCreationDateKey(NSURLResourceKey value) =>
      _NSURLVolumeCreationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeURLForRemountingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeURLForRemountingKey');

  NSURLResourceKey get NSURLVolumeURLForRemountingKey =>
      _NSURLVolumeURLForRemountingKey.value;

  set NSURLVolumeURLForRemountingKey(NSURLResourceKey value) =>
      _NSURLVolumeURLForRemountingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeUUIDStringKey =
      _lookup<NSURLResourceKey>('NSURLVolumeUUIDStringKey');

  NSURLResourceKey get NSURLVolumeUUIDStringKey =>
      _NSURLVolumeUUIDStringKey.value;

  set NSURLVolumeUUIDStringKey(NSURLResourceKey value) =>
      _NSURLVolumeUUIDStringKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeNameKey =
      _lookup<NSURLResourceKey>('NSURLVolumeNameKey');

  NSURLResourceKey get NSURLVolumeNameKey => _NSURLVolumeNameKey.value;

  set NSURLVolumeNameKey(NSURLResourceKey value) =>
      _NSURLVolumeNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeLocalizedNameKey =
      _lookup<NSURLResourceKey>('NSURLVolumeLocalizedNameKey');

  NSURLResourceKey get NSURLVolumeLocalizedNameKey =>
      _NSURLVolumeLocalizedNameKey.value;

  set NSURLVolumeLocalizedNameKey(NSURLResourceKey value) =>
      _NSURLVolumeLocalizedNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsEncryptedKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsEncryptedKey');

  NSURLResourceKey get NSURLVolumeIsEncryptedKey =>
      _NSURLVolumeIsEncryptedKey.value;

  set NSURLVolumeIsEncryptedKey(NSURLResourceKey value) =>
      _NSURLVolumeIsEncryptedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsRootFileSystemKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsRootFileSystemKey');

  NSURLResourceKey get NSURLVolumeIsRootFileSystemKey =>
      _NSURLVolumeIsRootFileSystemKey.value;

  set NSURLVolumeIsRootFileSystemKey(NSURLResourceKey value) =>
      _NSURLVolumeIsRootFileSystemKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsCompressionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCompressionKey');

  NSURLResourceKey get NSURLVolumeSupportsCompressionKey =>
      _NSURLVolumeSupportsCompressionKey.value;

  set NSURLVolumeSupportsCompressionKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCompressionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsFileCloningKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsFileCloningKey');

  NSURLResourceKey get NSURLVolumeSupportsFileCloningKey =>
      _NSURLVolumeSupportsFileCloningKey.value;

  set NSURLVolumeSupportsFileCloningKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsFileCloningKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsSwapRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSwapRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsSwapRenamingKey =>
      _NSURLVolumeSupportsSwapRenamingKey.value;

  set NSURLVolumeSupportsSwapRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSwapRenamingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsExclusiveRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsExclusiveRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsExclusiveRenamingKey =>
      _NSURLVolumeSupportsExclusiveRenamingKey.value;

  set NSURLVolumeSupportsExclusiveRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsExclusiveRenamingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsImmutableFilesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsImmutableFilesKey');

  NSURLResourceKey get NSURLVolumeSupportsImmutableFilesKey =>
      _NSURLVolumeSupportsImmutableFilesKey.value;

  set NSURLVolumeSupportsImmutableFilesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsImmutableFilesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsAccessPermissionsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsAccessPermissionsKey');

  NSURLResourceKey get NSURLVolumeSupportsAccessPermissionsKey =>
      _NSURLVolumeSupportsAccessPermissionsKey.value;

  set NSURLVolumeSupportsAccessPermissionsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsAccessPermissionsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsFileProtectionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsFileProtectionKey');

  NSURLResourceKey get NSURLVolumeSupportsFileProtectionKey =>
      _NSURLVolumeSupportsFileProtectionKey.value;

  set NSURLVolumeSupportsFileProtectionKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsFileProtectionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<NSURLResourceKey>(
          'NSURLVolumeAvailableCapacityForImportantUsageKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityForImportantUsageKey =>
      _NSURLVolumeAvailableCapacityForImportantUsageKey.value;

  set NSURLVolumeAvailableCapacityForImportantUsageKey(
          NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityForImportantUsageKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<NSURLResourceKey>(
          'NSURLVolumeAvailableCapacityForOpportunisticUsageKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  set NSURLVolumeAvailableCapacityForOpportunisticUsageKey(
          NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsUbiquitousItemKey =
      _lookup<NSURLResourceKey>('NSURLIsUbiquitousItemKey');

  NSURLResourceKey get NSURLIsUbiquitousItemKey =>
      _NSURLIsUbiquitousItemKey.value;

  set NSURLIsUbiquitousItemKey(NSURLResourceKey value) =>
      _NSURLIsUbiquitousItemKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemHasUnresolvedConflictsKey');

  NSURLResourceKey get NSURLUbiquitousItemHasUnresolvedConflictsKey =>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey.value;

  set NSURLUbiquitousItemHasUnresolvedConflictsKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsDownloadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsDownloadedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsDownloadedKey =>
      _NSURLUbiquitousItemIsDownloadedKey.value;

  set NSURLUbiquitousItemIsDownloadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsDownloadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemIsDownloadingKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsDownloadingKey');

  NSURLResourceKey get NSURLUbiquitousItemIsDownloadingKey =>
      _NSURLUbiquitousItemIsDownloadingKey.value;

  set NSURLUbiquitousItemIsDownloadingKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsDownloadingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsUploadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsUploadedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsUploadedKey =>
      _NSURLUbiquitousItemIsUploadedKey.value;

  set NSURLUbiquitousItemIsUploadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsUploadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsUploadingKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsUploadingKey');

  NSURLResourceKey get NSURLUbiquitousItemIsUploadingKey =>
      _NSURLUbiquitousItemIsUploadingKey.value;

  set NSURLUbiquitousItemIsUploadingKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsUploadingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemPercentDownloadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemPercentDownloadedKey');

  NSURLResourceKey get NSURLUbiquitousItemPercentDownloadedKey =>
      _NSURLUbiquitousItemPercentDownloadedKey.value;

  set NSURLUbiquitousItemPercentDownloadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemPercentDownloadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemPercentUploadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemPercentUploadedKey');

  NSURLResourceKey get NSURLUbiquitousItemPercentUploadedKey =>
      _NSURLUbiquitousItemPercentUploadedKey.value;

  set NSURLUbiquitousItemPercentUploadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemPercentUploadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadingStatusKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadingStatusKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadingStatusKey =>
      _NSURLUbiquitousItemDownloadingStatusKey.value;

  set NSURLUbiquitousItemDownloadingStatusKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadingStatusKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadingErrorKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadingErrorKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadingErrorKey =>
      _NSURLUbiquitousItemDownloadingErrorKey.value;

  set NSURLUbiquitousItemDownloadingErrorKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadingErrorKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemUploadingErrorKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemUploadingErrorKey');

  NSURLResourceKey get NSURLUbiquitousItemUploadingErrorKey =>
      _NSURLUbiquitousItemUploadingErrorKey.value;

  set NSURLUbiquitousItemUploadingErrorKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemUploadingErrorKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadRequestedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadRequestedKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadRequestedKey =>
      _NSURLUbiquitousItemDownloadRequestedKey.value;

  set NSURLUbiquitousItemDownloadRequestedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadRequestedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemContainerDisplayNameKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemContainerDisplayNameKey');

  NSURLResourceKey get NSURLUbiquitousItemContainerDisplayNameKey =>
      _NSURLUbiquitousItemContainerDisplayNameKey.value;

  set NSURLUbiquitousItemContainerDisplayNameKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemContainerDisplayNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsExcludedFromSyncKey');

  NSURLResourceKey get NSURLUbiquitousItemIsExcludedFromSyncKey =>
      _NSURLUbiquitousItemIsExcludedFromSyncKey.value;

  set NSURLUbiquitousItemIsExcludedFromSyncKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsExcludedFromSyncKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsSharedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsSharedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsSharedKey =>
      _NSURLUbiquitousItemIsSharedKey.value;

  set NSURLUbiquitousItemIsSharedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsSharedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousSharedItemCurrentUserRoleKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemCurrentUserRoleKey =>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey.value;

  set NSURLUbiquitousSharedItemCurrentUserRoleKey(NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemCurrentUserPermissionsKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemCurrentUserPermissionsKey =>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey.value;

  set NSURLUbiquitousSharedItemCurrentUserPermissionsKey(
          NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemOwnerNameComponentsKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemOwnerNameComponentsKey =>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey.value;

  set NSURLUbiquitousSharedItemOwnerNameComponentsKey(NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey');

  NSURLResourceKey
      get NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey =>
          _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey.value;

  set NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey(
          NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey.value = value;

  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusNotDownloaded');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusNotDownloaded =>
          _NSURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  set NSURLUbiquitousItemDownloadingStatusNotDownloaded(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusNotDownloaded.value = value;

  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusDownloaded');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusDownloaded =>
          _NSURLUbiquitousItemDownloadingStatusDownloaded.value;

  set NSURLUbiquitousItemDownloadingStatusDownloaded(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusDownloaded.value = value;

  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusCurrent');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusCurrent =>
          _NSURLUbiquitousItemDownloadingStatusCurrent.value;

  set NSURLUbiquitousItemDownloadingStatusCurrent(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusCurrent.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemRole>
      _NSURLUbiquitousSharedItemRoleOwner =
      _lookup<NSURLUbiquitousSharedItemRole>(
          'NSURLUbiquitousSharedItemRoleOwner');

  NSURLUbiquitousSharedItemRole get NSURLUbiquitousSharedItemRoleOwner =>
      _NSURLUbiquitousSharedItemRoleOwner.value;

  set NSURLUbiquitousSharedItemRoleOwner(NSURLUbiquitousSharedItemRole value) =>
      _NSURLUbiquitousSharedItemRoleOwner.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemRole>
      _NSURLUbiquitousSharedItemRoleParticipant =
      _lookup<NSURLUbiquitousSharedItemRole>(
          'NSURLUbiquitousSharedItemRoleParticipant');

  NSURLUbiquitousSharedItemRole get NSURLUbiquitousSharedItemRoleParticipant =>
      _NSURLUbiquitousSharedItemRoleParticipant.value;

  set NSURLUbiquitousSharedItemRoleParticipant(
          NSURLUbiquitousSharedItemRole value) =>
      _NSURLUbiquitousSharedItemRoleParticipant.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemPermissions>
      _NSURLUbiquitousSharedItemPermissionsReadOnly =
      _lookup<NSURLUbiquitousSharedItemPermissions>(
          'NSURLUbiquitousSharedItemPermissionsReadOnly');

  NSURLUbiquitousSharedItemPermissions
      get NSURLUbiquitousSharedItemPermissionsReadOnly =>
          _NSURLUbiquitousSharedItemPermissionsReadOnly.value;

  set NSURLUbiquitousSharedItemPermissionsReadOnly(
          NSURLUbiquitousSharedItemPermissions value) =>
      _NSURLUbiquitousSharedItemPermissionsReadOnly.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemPermissions>
      _NSURLUbiquitousSharedItemPermissionsReadWrite =
      _lookup<NSURLUbiquitousSharedItemPermissions>(
          'NSURLUbiquitousSharedItemPermissionsReadWrite');

  NSURLUbiquitousSharedItemPermissions
      get NSURLUbiquitousSharedItemPermissionsReadWrite =>
          _NSURLUbiquitousSharedItemPermissionsReadWrite.value;

  set NSURLUbiquitousSharedItemPermissionsReadWrite(
          NSURLUbiquitousSharedItemPermissions value) =>
      _NSURLUbiquitousSharedItemPermissionsReadWrite.value = value;

  instancetype _objc_msgSend_411(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_411(
      obj,
      sel,
      name,
      value,
    );
  }

  late final __objc_msgSend_411Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_411 = __objc_msgSend_411Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_412(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> name,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_412(
      obj,
      sel,
      name,
      value,
    );
  }

  late final __objc_msgSend_412Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_412 = __objc_msgSend_412Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_413(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_413(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_413Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_413 = __objc_msgSend_413Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_414(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_414(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_414Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_414 = __objc_msgSend_414Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_415(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool resolve,
  ) {
    return __objc_msgSend_415(
      obj,
      sel,
      url,
      resolve ? 1 : 0,
    );
  }

  late final __objc_msgSend_415Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_415 = __objc_msgSend_415Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  instancetype _objc_msgSend_416(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool resolve,
  ) {
    return __objc_msgSend_416(
      obj,
      sel,
      url,
      resolve ? 1 : 0,
    );
  }

  late final __objc_msgSend_416Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_416 = __objc_msgSend_416Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  instancetype _objc_msgSend_417(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
  ) {
    return __objc_msgSend_417(
      obj,
      sel,
      URLString,
    );
  }

  late final __objc_msgSend_417Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_417 = __objc_msgSend_417Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_418(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URLString,
  ) {
    return __objc_msgSend_418(
      obj,
      sel,
      URLString,
    );
  }

  late final __objc_msgSend_418Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_418 = __objc_msgSend_418Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_419(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_419(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_419Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_419 = __objc_msgSend_419Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_420(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_420(
      obj,
      sel,
      baseURL,
    );
  }

  late final __objc_msgSend_420Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_420 = __objc_msgSend_420Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_421(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_421(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_421Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_421 = __objc_msgSend_421Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_422(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_422(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_422Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_422 = __objc_msgSend_422Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_423(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_423(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_423Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_423 = __objc_msgSend_423Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_424(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_424(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_424Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_424 = __objc_msgSend_424Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_425(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_425(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_425Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_425 = __objc_msgSend_425Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_426(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_426(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_426Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_426 = __objc_msgSend_426Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_427(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_427(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_427Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_427 = __objc_msgSend_427Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_428(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_428(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_428Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_428 = __objc_msgSend_428Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_429(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_429(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_429Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_429 = __objc_msgSend_429Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_430(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_430(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_430Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_430 = __objc_msgSend_430Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_431(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_431(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_431Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_431 = __objc_msgSend_431Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_432(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_432(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_432Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_432 = __objc_msgSend_432Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_433(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_433(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_433Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_433 = __objc_msgSend_433Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_434(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_434(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_434Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_434 = __objc_msgSend_434Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_435(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_435(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_435Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_435 = __objc_msgSend_435Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_436(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_436(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_436Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_436 = __objc_msgSend_436Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_437(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_437(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_437Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_437 = __objc_msgSend_437Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_438(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_438(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_438Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_438 = __objc_msgSend_438Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_439(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_439(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_439Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_439 = __objc_msgSend_439Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_440(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_440(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_440Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_440 = __objc_msgSend_440Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_441(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_441(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_441Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_441 = __objc_msgSend_441Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_442(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_442(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_442Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_442 = __objc_msgSend_442Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_443(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_443(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_443Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_443 = __objc_msgSend_443Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_444(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_444(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_444Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_444 = __objc_msgSend_444Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_445(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_445(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_445Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_445 = __objc_msgSend_445Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_446(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_446(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_446Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_446 = __objc_msgSend_446Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_447(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_447(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_447Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_447 = __objc_msgSend_447Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_448(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_448(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_448Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_448 = __objc_msgSend_448Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_449(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_449(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_449Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_449 = __objc_msgSend_449Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  NSRange _objc_msgSend_450(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_450(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_450Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_450 = __objc_msgSend_450Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_451(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_451(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_451Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_451 = __objc_msgSend_451Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_452(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_452(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_452Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_452 = __objc_msgSend_452Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_453(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_453(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_453Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_453 = __objc_msgSend_453Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  void _objc_msgSend_454(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
  ) {
    return __objc_msgSend_454(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_454Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_454 = __objc_msgSend_454Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_455(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> coder,
  ) {
    return __objc_msgSend_455(
      obj,
      sel,
      coder,
    );
  }

  late final __objc_msgSend_455Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_455 = __objc_msgSend_455Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromSelector2(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector2(
      aSelector,
    );
  }

  late final _NSStringFromSelector2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector2 = _NSStringFromSelector2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString2(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString2(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString2 = _NSSelectorFromString2Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass2(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass2(
      aClass,
    );
  }

  late final _NSStringFromClass2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass2 = _NSStringFromClass2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString2(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString2(
      aClassName,
    );
  }

  late final _NSClassFromString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString2 = _NSClassFromString2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol2(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol2(
      proto,
    );
  }

  late final _NSStringFromProtocol2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol2 = _NSStringFromProtocol2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString2(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString2(
      namestr,
    );
  }

  late final _NSProtocolFromString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString2 = _NSProtocolFromString2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment2(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment2(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment2 = _NSGetSizeAndAlignment2Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog2(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog2(
      format,
    );
  }

  late final _NSLog2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog2 =
      _NSLog2Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv2(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv2(
      format,
      args,
    );
  }

  late final _NSLogv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv2 =
      _NSLogv2Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake2(
    int loc,
    int len,
  ) {
    return ___CFRangeMake2(
      loc,
      len,
    );
  }

  late final ___CFRangeMake2Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake2 =
      ___CFRangeMake2Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID2() {
    return _CFNullGetTypeID2();
  }

  late final _CFNullGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID2 =
      _CFNullGetTypeID2Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID2() {
    return _CFAllocatorGetTypeID2();
  }

  late final _CFAllocatorGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID2 =
      _CFAllocatorGetTypeID2Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault2(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault2(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault2 =
      _CFAllocatorSetDefault2Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault2() {
    return _CFAllocatorGetDefault2();
  }

  late final _CFAllocatorGetDefault2Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault2 =
      _CFAllocatorGetDefault2Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate2(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate2(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate2Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate2 = _CFAllocatorCreate2Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate2(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate2(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate2 = _CFAllocatorAllocate2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate2(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate2(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate2 = _CFAllocatorReallocate2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate2(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate2(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate2 = _CFAllocatorDeallocate2Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize2(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize2(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize2Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize2 =
      _CFAllocatorGetPreferredSizeForSize2Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext2(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext2(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext2 = _CFAllocatorGetContext2Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID2(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID2(
      cf,
    );
  }

  late final _CFGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID2 =
      _CFGetTypeID2Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription2(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription2(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription2Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription2 =
      _CFCopyTypeIDDescription2Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain2(
    CFTypeRef cf,
  ) {
    return _CFRetain2(
      cf,
    );
  }

  late final _CFRetain2Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain2 =
      _CFRetain2Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease2(
    CFTypeRef cf,
  ) {
    return _CFRelease2(
      cf,
    );
  }

  late final _CFRelease2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease2 =
      _CFRelease2Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease2(
    CFTypeRef arg,
  ) {
    return _CFAutorelease2(
      arg,
    );
  }

  late final _CFAutorelease2Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease2 =
      _CFAutorelease2Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount2(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount2(
      cf,
    );
  }

  late final _CFGetRetainCount2Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount2 =
      _CFGetRetainCount2Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual2(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual2(
      cf1,
      cf2,
    );
  }

  late final _CFEqual2Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual2 =
      _CFEqual2Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash2(
    CFTypeRef cf,
  ) {
    return _CFHash2(
      cf,
    );
  }

  late final _CFHash2Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash2 = _CFHash2Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription2(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription2(
      cf,
    );
  }

  late final _CFCopyDescription2Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription2 =
      _CFCopyDescription2Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator2(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator2(
      cf,
    );
  }

  late final _CFGetAllocator2Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator2 =
      _CFGetAllocator2Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable2(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable2(
      cf,
    );
  }

  late final _CFMakeCollectable2Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable2 =
      _CFMakeCollectable2Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone2() {
    return _NSDefaultMallocZone2();
  }

  late final _NSDefaultMallocZone2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone2 =
      _NSDefaultMallocZone2Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone2(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone2(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone2 = _NSCreateZone2Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone2(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone2(
      zone,
    );
  }

  late final _NSRecycleZone2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone2 =
      _NSRecycleZone2Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName2(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName2(
      zone,
      name,
    );
  }

  late final _NSSetZoneName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName2 = _NSSetZoneName2Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName2(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName2(
      zone,
    );
  }

  late final _NSZoneName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName2 = _NSZoneName2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer2(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer2(
      ptr,
    );
  }

  late final _NSZoneFromPointer2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer2 = _NSZoneFromPointer2Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc2(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc2(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc2 = _NSZoneMalloc2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc2(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc2(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc2 = _NSZoneCalloc2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc2(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc2(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc2 = _NSZoneRealloc2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree2(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree2(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree2 = _NSZoneFree2Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable2(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable2(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable2 = _NSAllocateCollectable2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable2(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable2(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable2 =
      _NSReallocateCollectable2Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize2() {
    return _NSPageSize2();
  }

  late final _NSPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize2 = _NSPageSize2Ptr.asFunction<int Function()>();

  int NSLogPageSize2() {
    return _NSLogPageSize2();
  }

  late final _NSLogPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize2 = _NSLogPageSize2Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize2(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize2(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize2 =
      _NSRoundUpToMultipleOfPageSize2Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize2(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize2(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize2 =
      _NSRoundDownToMultipleOfPageSize2Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages2(
    int bytes,
  ) {
    return _NSAllocateMemoryPages2(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages2 = _NSAllocateMemoryPages2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages2(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages2(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages2 = _NSDeallocateMemoryPages2Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages2(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages2(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages2 = _NSCopyMemoryPages2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable2() {
    return _NSRealMemoryAvailable2();
  }

  late final _NSRealMemoryAvailable2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable2 =
      _NSRealMemoryAvailable2Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject2(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject2(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject2 = _NSAllocateObject2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject2(
      object,
    );
  }

  late final _NSDeallocateObject2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject2 = _NSDeallocateObject2Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject2(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject2(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject2 = _NSCopyObject2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone2(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone2(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone2 = _NSShouldRetainWithZone2Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount2(
      object,
    );
  }

  late final _NSIncrementExtraRefCount2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount2 = _NSIncrementExtraRefCount2Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero2(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero2 =
      _NSDecrementExtraRefCountWasZero2Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount2(
      object,
    );
  }

  late final _NSExtraRefCount2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount2 =
      _NSExtraRefCount2Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromSelector3(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector3(
      aSelector,
    );
  }

  late final _NSStringFromSelector3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector3 = _NSStringFromSelector3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString3(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString3(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString3 = _NSSelectorFromString3Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass3(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass3(
      aClass,
    );
  }

  late final _NSStringFromClass3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass3 = _NSStringFromClass3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString3(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString3(
      aClassName,
    );
  }

  late final _NSClassFromString3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString3 = _NSClassFromString3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol3(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol3(
      proto,
    );
  }

  late final _NSStringFromProtocol3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol3 = _NSStringFromProtocol3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString3(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString3(
      namestr,
    );
  }

  late final _NSProtocolFromString3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString3 = _NSProtocolFromString3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment3(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment3(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment3 = _NSGetSizeAndAlignment3Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog3(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog3(
      format,
    );
  }

  late final _NSLog3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog3 =
      _NSLog3Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv3(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv3(
      format,
      args,
    );
  }

  late final _NSLogv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv3 =
      _NSLogv3Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake3(
    int loc,
    int len,
  ) {
    return ___CFRangeMake3(
      loc,
      len,
    );
  }

  late final ___CFRangeMake3Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake3 =
      ___CFRangeMake3Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID3() {
    return _CFNullGetTypeID3();
  }

  late final _CFNullGetTypeID3Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID3 =
      _CFNullGetTypeID3Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID3() {
    return _CFAllocatorGetTypeID3();
  }

  late final _CFAllocatorGetTypeID3Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID3 =
      _CFAllocatorGetTypeID3Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault3(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault3(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault3 =
      _CFAllocatorSetDefault3Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault3() {
    return _CFAllocatorGetDefault3();
  }

  late final _CFAllocatorGetDefault3Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault3 =
      _CFAllocatorGetDefault3Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate3(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate3(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate3Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate3 = _CFAllocatorCreate3Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate3(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate3(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate3 = _CFAllocatorAllocate3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate3(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate3(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate3 = _CFAllocatorReallocate3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate3(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate3(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate3 = _CFAllocatorDeallocate3Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize3(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize3(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize3Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize3 =
      _CFAllocatorGetPreferredSizeForSize3Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext3(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext3(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext3 = _CFAllocatorGetContext3Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID3(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID3(
      cf,
    );
  }

  late final _CFGetTypeID3Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID3 =
      _CFGetTypeID3Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription3(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription3(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription3Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription3 =
      _CFCopyTypeIDDescription3Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain3(
    CFTypeRef cf,
  ) {
    return _CFRetain3(
      cf,
    );
  }

  late final _CFRetain3Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain3 =
      _CFRetain3Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease3(
    CFTypeRef cf,
  ) {
    return _CFRelease3(
      cf,
    );
  }

  late final _CFRelease3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease3 =
      _CFRelease3Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease3(
    CFTypeRef arg,
  ) {
    return _CFAutorelease3(
      arg,
    );
  }

  late final _CFAutorelease3Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease3 =
      _CFAutorelease3Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount3(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount3(
      cf,
    );
  }

  late final _CFGetRetainCount3Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount3 =
      _CFGetRetainCount3Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual3(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual3(
      cf1,
      cf2,
    );
  }

  late final _CFEqual3Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual3 =
      _CFEqual3Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash3(
    CFTypeRef cf,
  ) {
    return _CFHash3(
      cf,
    );
  }

  late final _CFHash3Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash3 = _CFHash3Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription3(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription3(
      cf,
    );
  }

  late final _CFCopyDescription3Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription3 =
      _CFCopyDescription3Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator3(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator3(
      cf,
    );
  }

  late final _CFGetAllocator3Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator3 =
      _CFGetAllocator3Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable3(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable3(
      cf,
    );
  }

  late final _CFMakeCollectable3Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable3 =
      _CFMakeCollectable3Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone3() {
    return _NSDefaultMallocZone3();
  }

  late final _NSDefaultMallocZone3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone3 =
      _NSDefaultMallocZone3Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone3(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone3(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone3 = _NSCreateZone3Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone3(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone3(
      zone,
    );
  }

  late final _NSRecycleZone3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone3 =
      _NSRecycleZone3Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName3(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName3(
      zone,
      name,
    );
  }

  late final _NSSetZoneName3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName3 = _NSSetZoneName3Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName3(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName3(
      zone,
    );
  }

  late final _NSZoneName3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName3 = _NSZoneName3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer3(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer3(
      ptr,
    );
  }

  late final _NSZoneFromPointer3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer3 = _NSZoneFromPointer3Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc3(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc3(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc3 = _NSZoneMalloc3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc3(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc3(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc3 = _NSZoneCalloc3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc3(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc3(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc3 = _NSZoneRealloc3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree3(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree3(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree3 = _NSZoneFree3Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable3(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable3(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable3 = _NSAllocateCollectable3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable3(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable3(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable3 =
      _NSReallocateCollectable3Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize3() {
    return _NSPageSize3();
  }

  late final _NSPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize3 = _NSPageSize3Ptr.asFunction<int Function()>();

  int NSLogPageSize3() {
    return _NSLogPageSize3();
  }

  late final _NSLogPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize3 = _NSLogPageSize3Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize3(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize3(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize3 =
      _NSRoundUpToMultipleOfPageSize3Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize3(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize3(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize3 =
      _NSRoundDownToMultipleOfPageSize3Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages3(
    int bytes,
  ) {
    return _NSAllocateMemoryPages3(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages3 = _NSAllocateMemoryPages3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages3(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages3(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages3 = _NSDeallocateMemoryPages3Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages3(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages3(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages3 = _NSCopyMemoryPages3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable3() {
    return _NSRealMemoryAvailable3();
  }

  late final _NSRealMemoryAvailable3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable3 =
      _NSRealMemoryAvailable3Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject3(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject3(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject3 = _NSAllocateObject3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject3(
      object,
    );
  }

  late final _NSDeallocateObject3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject3 = _NSDeallocateObject3Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject3(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject3(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject3 = _NSCopyObject3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone3(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone3(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone3 = _NSShouldRetainWithZone3Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount3(
      object,
    );
  }

  late final _NSIncrementExtraRefCount3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount3 = _NSIncrementExtraRefCount3Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero3(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero3Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero3 =
      _NSDecrementExtraRefCountWasZero3Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount3(
      object,
    );
  }

  late final _NSExtraRefCount3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount3 =
      _NSExtraRefCount3Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  instancetype _objc_msgSend_456(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
    ffi.Pointer<ObjCObject> MIMEType,
    int length,
    ffi.Pointer<ObjCObject> name,
  ) {
    return __objc_msgSend_456(
      obj,
      sel,
      URL,
      MIMEType,
      length,
      name,
    );
  }

  late final __objc_msgSend_456Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_456 = __objc_msgSend_456Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_457(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_457(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_457Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_457 = __objc_msgSend_457Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_458(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_458(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_458Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_458 = __objc_msgSend_458Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_459(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_459(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_459Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_459 = __objc_msgSend_459Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_460(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_460(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_460Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_460 = __objc_msgSend_460Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  instancetype _objc_msgSend_461(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int statusCode,
    ffi.Pointer<ObjCObject> HTTPVersion,
    ffi.Pointer<ObjCObject> headerFields,
  ) {
    return __objc_msgSend_461(
      obj,
      sel,
      url,
      statusCode,
      HTTPVersion,
      headerFields,
    );
  }

  late final __objc_msgSend_461Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_461 = __objc_msgSend_461Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_462(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_462(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_462Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_462 = __objc_msgSend_462Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_463(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> field,
  ) {
    return __objc_msgSend_463(
      obj,
      sel,
      field,
    );
  }

  late final __objc_msgSend_463Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_463 = __objc_msgSend_463Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_464(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int statusCode,
  ) {
    return __objc_msgSend_464(
      obj,
      sel,
      statusCode,
    );
  }

  late final __objc_msgSend_464Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_464 = __objc_msgSend_464Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();
}

class ObjCObject extends ffi.Opaque {}

class ObjCSel extends ffi.Opaque {}

typedef NSUInteger = pkg_ffi.UnsignedLong;
typedef va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<pkg_ffi.Char>;

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

abstract class NSQualityOfService {
  static const int NSQualityOfServiceUserInteractive = 33;
  static const int NSQualityOfServiceUserInitiated = 25;
  static const int NSQualityOfServiceUtility = 17;
  static const int NSQualityOfServiceBackground = 9;
  static const int NSQualityOfServiceDefault = -1;
}

typedef NSInteger = pkg_ffi.Long;

class __CFString extends ffi.Opaque {}

abstract class CFComparisonResult {
  static const int kCFCompareLessThan = -1;
  static const int kCFCompareEqualTo = 0;
  static const int kCFCompareGreaterThan = 1;
}

typedef CFIndex = pkg_ffi.Long;

class CFRange extends ffi.Struct {
  @CFIndex()
  external int location;

  @CFIndex()
  external int length;
}

class __CFNull extends ffi.Opaque {}

typedef CFTypeID = pkg_ffi.UnsignedLong;
typedef CFNullRef = ffi.Pointer<__CFNull>;

class __CFAllocator extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

class CFAllocatorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFAllocatorRetainCallBack retain;

  external CFAllocatorReleaseCallBack release;

  external CFAllocatorCopyDescriptionCallBack copyDescription;

  external CFAllocatorAllocateCallBack allocate;

  external CFAllocatorReallocateCallBack reallocate;

  external CFAllocatorDeallocateCallBack deallocate;

  external CFAllocatorPreferredSizeCallBack preferredSize;
}

typedef CFAllocatorRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFStringRef = ffi.Pointer<__CFString>;
typedef CFAllocatorAllocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFOptionFlags = pkg_ffi.UnsignedLong;
typedef CFAllocatorReallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
            CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorDeallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorPreferredSizeCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFIndex Function(CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef Boolean = pkg_ffi.UnsignedChar;
typedef CFHashCode = pkg_ffi.UnsignedLong;
typedef NSZone = _NSZone;

class _NSZone extends ffi.Opaque {}

ffi.Pointer<ObjCSel> _registerName(NativeLibrary _lib, String name) {
  final cstr = name.toNativeUtf8();
  final sel = _lib._sel_registerName(cstr.cast());
  pkg_ffi.calloc.free(cstr);
  return sel;
}

ffi.Pointer<ObjCObject> _getClass(NativeLibrary _lib, String name) {
  final cstr = name.toNativeUtf8();
  final clazz = _lib._objc_getClass(cstr.cast());
  pkg_ffi.calloc.free(cstr);
  return clazz;
}

class _ObjCWrapper {
  final ffi.Pointer<ObjCObject> _id;
  final NativeLibrary _lib;
  _ObjCWrapper._(this._id, this._lib);
}

class NSNotification extends NSObject {
  NSNotification._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSNotification castFrom<T extends _ObjCWrapper>(T other) {
    return NSNotification._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_name;
  NSNotificationName get name {
    _sel_name ??= _registerName(_lib, "name");
    return _lib._objc_msgSend_26(_id, _sel_name!);
  }

  static ffi.Pointer<ObjCSel>? _sel_object;
  NSObject get object {
    _sel_object ??= _registerName(_lib, "object");
    final _ret = _lib._objc_msgSend_27(_id, _sel_object!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_userInfo;
  NSObject get userInfo {
    _sel_userInfo ??= _registerName(_lib, "userInfo");
    final _ret = _lib._objc_msgSend_28(_id, _sel_userInfo!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithName_object_userInfo;
  NSNotification initWithName_object_userInfo(
      NSNotificationName name, NSObject object, NSObject userInfo) {
    _sel_initWithName_object_userInfo ??=
        _registerName(_lib, "initWithName:object:userInfo:");
    final _ret = _lib._objc_msgSend_29(_id, _sel_initWithName_object_userInfo!,
        name, object._id, userInfo._id);
    return NSNotification._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  NSNotification initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_30(_id, _sel_initWithCoder!, coder._id);
    return NSNotification._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSNotification new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSNotification");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSNotification._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSNotification alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSNotification");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSNotification._(_ret, _lib);
  }
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_load;
  static void load(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_load ??= _registerName(_lib, "load");
    _lib._objc_msgSend_0(_class!, _sel_load!);
  }

  static ffi.Pointer<ObjCSel>? _sel_initialize;
  static void initialize(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_initialize ??= _registerName(_lib, "initialize");
    _lib._objc_msgSend_0(_class!, _sel_initialize!);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  NSObject init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSObject new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_allocWithZone;
  static NSObject allocWithZone(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_allocWithZone ??= _registerName(_lib, "allocWithZone:");
    final _ret = _lib._objc_msgSend_2(_class!, _sel_allocWithZone!, zone);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSObject alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_dealloc;
  void dealloc() {
    _sel_dealloc ??= _registerName(_lib, "dealloc");
    _lib._objc_msgSend_0(_id, _sel_dealloc!);
  }

  static ffi.Pointer<ObjCSel>? _sel_finalize;
  void finalize() {
    _sel_finalize ??= _registerName(_lib, "finalize");
    _lib._objc_msgSend_0(_id, _sel_finalize!);
  }

  static ffi.Pointer<ObjCSel>? _sel_copy;
  NSObject copy() {
    _sel_copy ??= _registerName(_lib, "copy");
    final _ret = _lib._objc_msgSend_3(_id, _sel_copy!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_mutableCopy;
  NSObject mutableCopy() {
    _sel_mutableCopy ??= _registerName(_lib, "mutableCopy");
    final _ret = _lib._objc_msgSend_4(_id, _sel_mutableCopy!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_copyWithZone;
  static NSObject copyWithZone(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_copyWithZone ??= _registerName(_lib, "copyWithZone:");
    final _ret = _lib._objc_msgSend_5(_class!, _sel_copyWithZone!, zone);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_mutableCopyWithZone;
  static NSObject mutableCopyWithZone(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_mutableCopyWithZone ??= _registerName(_lib, "mutableCopyWithZone:");
    final _ret = _lib._objc_msgSend_6(_class!, _sel_mutableCopyWithZone!, zone);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_instancesRespondToSelector;
  static bool instancesRespondToSelector(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_instancesRespondToSelector ??=
        _registerName(_lib, "instancesRespondToSelector:");
    return _lib._objc_msgSend_7(
        _class!, _sel_instancesRespondToSelector!, aSelector);
  }

  static ffi.Pointer<ObjCSel>? _sel_conformsToProtocol;
  static bool conformsToProtocol(NativeLibrary _lib, NSObject protocol) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_conformsToProtocol ??= _registerName(_lib, "conformsToProtocol:");
    return _lib._objc_msgSend_8(
        _class!, _sel_conformsToProtocol!, protocol._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_methodForSelector;
  IMP methodForSelector(ffi.Pointer<ObjCSel> aSelector) {
    _sel_methodForSelector ??= _registerName(_lib, "methodForSelector:");
    return _lib._objc_msgSend_9(_id, _sel_methodForSelector!, aSelector);
  }

  static ffi.Pointer<ObjCSel>? _sel_instanceMethodForSelector;
  static IMP instanceMethodForSelector(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_instanceMethodForSelector ??=
        _registerName(_lib, "instanceMethodForSelector:");
    return _lib._objc_msgSend_10(
        _class!, _sel_instanceMethodForSelector!, aSelector);
  }

  static ffi.Pointer<ObjCSel>? _sel_doesNotRecognizeSelector;
  void doesNotRecognizeSelector(ffi.Pointer<ObjCSel> aSelector) {
    _sel_doesNotRecognizeSelector ??=
        _registerName(_lib, "doesNotRecognizeSelector:");
    _lib._objc_msgSend_11(_id, _sel_doesNotRecognizeSelector!, aSelector);
  }

  static ffi.Pointer<ObjCSel>? _sel_forwardingTargetForSelector;
  NSObject forwardingTargetForSelector(ffi.Pointer<ObjCSel> aSelector) {
    _sel_forwardingTargetForSelector ??=
        _registerName(_lib, "forwardingTargetForSelector:");
    final _ret = _lib._objc_msgSend_12(
        _id, _sel_forwardingTargetForSelector!, aSelector);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_forwardInvocation;
  void forwardInvocation(NSObject anInvocation) {
    _sel_forwardInvocation ??= _registerName(_lib, "forwardInvocation:");
    _lib._objc_msgSend_13(_id, _sel_forwardInvocation!, anInvocation._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_methodSignatureForSelector;
  NSMethodSignature methodSignatureForSelector(ffi.Pointer<ObjCSel> aSelector) {
    _sel_methodSignatureForSelector ??=
        _registerName(_lib, "methodSignatureForSelector:");
    final _ret =
        _lib._objc_msgSend_14(_id, _sel_methodSignatureForSelector!, aSelector);
    return NSMethodSignature._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_instanceMethodSignatureForSelector;
  static NSMethodSignature instanceMethodSignatureForSelector(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_instanceMethodSignatureForSelector ??=
        _registerName(_lib, "instanceMethodSignatureForSelector:");
    final _ret = _lib._objc_msgSend_15(
        _class!, _sel_instanceMethodSignatureForSelector!, aSelector);
    return NSMethodSignature._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsWeakReference;
  bool allowsWeakReference() {
    _sel_allowsWeakReference ??= _registerName(_lib, "allowsWeakReference");
    return _lib._objc_msgSend_16(_id, _sel_allowsWeakReference!);
  }

  static ffi.Pointer<ObjCSel>? _sel_retainWeakReference;
  bool retainWeakReference() {
    _sel_retainWeakReference ??= _registerName(_lib, "retainWeakReference");
    return _lib._objc_msgSend_16(_id, _sel_retainWeakReference!);
  }

  static ffi.Pointer<ObjCSel>? _sel_isSubclassOfClass;
  static bool isSubclassOfClass(NativeLibrary _lib, NSObject aClass) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_isSubclassOfClass ??= _registerName(_lib, "isSubclassOfClass:");
    return _lib._objc_msgSend_17(_class!, _sel_isSubclassOfClass!, aClass._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_resolveClassMethod;
  static bool resolveClassMethod(NativeLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_resolveClassMethod ??= _registerName(_lib, "resolveClassMethod:");
    return _lib._objc_msgSend_18(_class!, _sel_resolveClassMethod!, sel);
  }

  static ffi.Pointer<ObjCSel>? _sel_resolveInstanceMethod;
  static bool resolveInstanceMethod(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_resolveInstanceMethod ??=
        _registerName(_lib, "resolveInstanceMethod:");
    return _lib._objc_msgSend_19(_class!, _sel_resolveInstanceMethod!, sel);
  }

  static ffi.Pointer<ObjCSel>? _sel_hash;
  static int hash(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_hash ??= _registerName(_lib, "hash");
    return _lib._objc_msgSend_20(_class!, _sel_hash!);
  }

  static ffi.Pointer<ObjCSel>? _sel_superclass;
  static NSObject superclass(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_superclass ??= _registerName(_lib, "superclass");
    final _ret = _lib._objc_msgSend_21(_class!, _sel_superclass!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_class1;
  static NSObject class1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_class1 ??= _registerName(_lib, "class");
    final _ret = _lib._objc_msgSend_22(_class!, _sel_class1!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_description;
  static NSString description(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_description ??= _registerName(_lib, "description");
    final _ret = _lib._objc_msgSend_25(_class!, _sel_description!);
    return NSString._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_debugDescription;
  static NSString debugDescription(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSObject");
    _sel_debugDescription ??= _registerName(_lib, "debugDescription");
    final _ret = _lib._objc_msgSend_25(_class!, _sel_debugDescription!);
    return NSString._(_ret, _lib);
  }
}

typedef instancetype = ffi.Pointer<ObjCObject>;
typedef IMP = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

class NSMethodSignature extends _ObjCWrapper {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib);
  }
}

class NSString extends _ObjCWrapper {
  NSString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib);
  }

  factory NSString(NativeLibrary _lib, String str) {
    final cstr = str.toNativeUtf8();
    final nsstr = stringWithCString_encoding(_lib, cstr.cast(), 4 /* UTF8 */);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() => UTF8String().cast<pkg_ffi.Utf8>().toDartString();

  static ffi.Pointer<ObjCSel>? _sel_stringWithCString_encoding;
  static NSString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    _class ??= _getClass(_lib, "NSString");
    _sel_stringWithCString_encoding ??=
        _registerName(_lib, "stringWithCString:encoding:");
    final _ret = _lib._objc_msgSend_23(
        _class!, _sel_stringWithCString_encoding!, cString, enc);
    return NSString._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_UTF8String;
  ffi.Pointer<pkg_ffi.Char> UTF8String() {
    _sel_UTF8String ??= _registerName(_lib, "UTF8String");
    return _lib._objc_msgSend_24(_id, _sel_UTF8String!);
  }
}

extension StringToNSString on String {
  NSString toNSString(NativeLibrary lib) => NSString(lib, this);
}

typedef NSNotificationName = ffi.Pointer<ObjCObject>;

class NSNotificationCenter extends NSObject {
  NSNotificationCenter._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSNotificationCenter castFrom<T extends _ObjCWrapper>(T other) {
    return NSNotificationCenter._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_defaultCenter;
  static NSObject getDefaultCenter(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSNotificationCenter");
    _sel_defaultCenter ??= _registerName(_lib, "defaultCenter");
    final _ret = _lib._objc_msgSend_31(_class!, _sel_defaultCenter!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_addObserver_selector_name_object;
  void addObserver_selector_name_object(
      NSObject observer,
      ffi.Pointer<ObjCSel> aSelector,
      NSNotificationName aName,
      NSObject anObject) {
    _sel_addObserver_selector_name_object ??=
        _registerName(_lib, "addObserver:selector:name:object:");
    _lib._objc_msgSend_32(_id, _sel_addObserver_selector_name_object!,
        observer._id, aSelector, aName, anObject._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_postNotification;
  void postNotification(NSObject notification) {
    _sel_postNotification ??= _registerName(_lib, "postNotification:");
    _lib._objc_msgSend_33(_id, _sel_postNotification!, notification._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_postNotificationName_object;
  void postNotificationName_object(
      NSNotificationName aName, NSObject anObject) {
    _sel_postNotificationName_object ??=
        _registerName(_lib, "postNotificationName:object:");
    _lib._objc_msgSend_34(
        _id, _sel_postNotificationName_object!, aName, anObject._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_postNotificationName_object_userInfo;
  void postNotificationName_object_userInfo(
      NSNotificationName aName, NSObject anObject, NSObject aUserInfo) {
    _sel_postNotificationName_object_userInfo ??=
        _registerName(_lib, "postNotificationName:object:userInfo:");
    _lib._objc_msgSend_35(_id, _sel_postNotificationName_object_userInfo!,
        aName, anObject._id, aUserInfo._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeObserver;
  void removeObserver(NSObject observer) {
    _sel_removeObserver ??= _registerName(_lib, "removeObserver:");
    _lib._objc_msgSend_36(_id, _sel_removeObserver!, observer._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeObserver_name_object;
  void removeObserver_name_object(
      NSObject observer, NSNotificationName aName, NSObject anObject) {
    _sel_removeObserver_name_object ??=
        _registerName(_lib, "removeObserver:name:object:");
    _lib._objc_msgSend_37(_id, _sel_removeObserver_name_object!, observer._id,
        aName, anObject._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_addObserverForName_object_queue_usingBlock;
  NSObject addObserverForName_object_queue_usingBlock(
      NSNotificationName name, NSObject obj, NSObject queue, NSObject block) {
    _sel_addObserverForName_object_queue_usingBlock ??=
        _registerName(_lib, "addObserverForName:object:queue:usingBlock:");
    final _ret = _lib._objc_msgSend_38(
        _id,
        _sel_addObserverForName_object_queue_usingBlock!,
        name,
        obj._id,
        queue._id,
        block._id);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSNotificationCenter new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSNotificationCenter");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSNotificationCenter._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSNotificationCenter alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSNotificationCenter");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSNotificationCenter._(_ret, _lib);
  }
}

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSDate._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeIntervalSinceReferenceDate;
  double get timeIntervalSinceReferenceDate {
    _sel_timeIntervalSinceReferenceDate ??=
        _registerName(_lib, "timeIntervalSinceReferenceDate");
    return _lib._objc_msgSend_39(_id, _sel_timeIntervalSinceReferenceDate!);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSDate init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSDate._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithTimeIntervalSinceReferenceDate;
  NSDate initWithTimeIntervalSinceReferenceDate(double ti) {
    _sel_initWithTimeIntervalSinceReferenceDate ??=
        _registerName(_lib, "initWithTimeIntervalSinceReferenceDate:");
    final _ret = _lib._objc_msgSend_40(
        _id, _sel_initWithTimeIntervalSinceReferenceDate!, ti);
    return NSDate._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  NSDate initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_41(_id, _sel_initWithCoder!, coder._id);
    return NSDate._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSDate new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSDate");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSDate._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSDate alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSDate");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSDate._(_ret, _lib);
  }
}

typedef NSTimeInterval = ffi.Double;

abstract class NSURLRequestCachePolicy {
  static const int NSURLRequestUseProtocolCachePolicy = 0;
  static const int NSURLRequestReloadIgnoringLocalCacheData = 1;
  static const int NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
  static const int NSURLRequestReloadIgnoringCacheData = 1;
  static const int NSURLRequestReturnCacheDataElseLoad = 2;
  static const int NSURLRequestReturnCacheDataDontLoad = 3;
  static const int NSURLRequestReloadRevalidatingCacheData = 5;
}

abstract class NSURLRequestNetworkServiceType {
  static const int NSURLNetworkServiceTypeDefault = 0;
  static const int NSURLNetworkServiceTypeVoIP = 1;
  static const int NSURLNetworkServiceTypeVideo = 2;
  static const int NSURLNetworkServiceTypeBackground = 3;
  static const int NSURLNetworkServiceTypeVoice = 4;
  static const int NSURLNetworkServiceTypeResponsiveData = 6;
  static const int NSURLNetworkServiceTypeAVStreaming = 8;
  static const int NSURLNetworkServiceTypeResponsiveAV = 9;
  static const int NSURLNetworkServiceTypeCallSignaling = 11;
}

abstract class NSURLRequestAttribution {
  static const int NSURLRequestAttributionDeveloper = 0;
  static const int NSURLRequestAttributionUser = 1;
}

class NSURLRequest extends NSObject {
  NSURLRequest._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLRequest castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLRequest._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestWithURL;
  static NSURLRequest requestWithURL(NativeLibrary _lib, NSObject URL) {
    _class ??= _getClass(_lib, "NSURLRequest");
    _sel_requestWithURL ??= _registerName(_lib, "requestWithURL:");
    final _ret = _lib._objc_msgSend_42(_class!, _sel_requestWithURL!, URL._id);
    return NSURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_supportsSecureCoding;
  static bool getSupportsSecureCoding(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLRequest");
    _sel_supportsSecureCoding ??= _registerName(_lib, "supportsSecureCoding");
    return _lib._objc_msgSend_16(_class!, _sel_supportsSecureCoding!);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestWithURL_cachePolicy_timeoutInterval;
  static NSURLRequest requestWithURL_cachePolicy_timeoutInterval(
      NativeLibrary _lib,
      NSObject URL,
      int cachePolicy,
      double timeoutInterval) {
    _class ??= _getClass(_lib, "NSURLRequest");
    _sel_requestWithURL_cachePolicy_timeoutInterval ??=
        _registerName(_lib, "requestWithURL:cachePolicy:timeoutInterval:");
    final _ret = _lib._objc_msgSend_43(
        _class!,
        _sel_requestWithURL_cachePolicy_timeoutInterval!,
        URL._id,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithURL;
  NSURLRequest initWithURL(NSObject URL) {
    _sel_initWithURL ??= _registerName(_lib, "initWithURL:");
    final _ret = _lib._objc_msgSend_44(_id, _sel_initWithURL!, URL._id);
    return NSURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithURL_cachePolicy_timeoutInterval;
  NSURLRequest initWithURL_cachePolicy_timeoutInterval(
      NSObject URL, int cachePolicy, double timeoutInterval) {
    _sel_initWithURL_cachePolicy_timeoutInterval ??=
        _registerName(_lib, "initWithURL:cachePolicy:timeoutInterval:");
    final _ret = _lib._objc_msgSend_45(
        _id,
        _sel_initWithURL_cachePolicy_timeoutInterval!,
        URL._id,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URL;
  NSObject get URL {
    _sel_URL ??= _registerName(_lib, "URL");
    final _ret = _lib._objc_msgSend_46(_id, _sel_URL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_cachePolicy;
  int get cachePolicy {
    _sel_cachePolicy ??= _registerName(_lib, "cachePolicy");
    return _lib._objc_msgSend_47(_id, _sel_cachePolicy!);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeoutInterval;
  double get timeoutInterval {
    _sel_timeoutInterval ??= _registerName(_lib, "timeoutInterval");
    return _lib._objc_msgSend_39(_id, _sel_timeoutInterval!);
  }

  static ffi.Pointer<ObjCSel>? _sel_mainDocumentURL;
  NSObject get mainDocumentURL {
    _sel_mainDocumentURL ??= _registerName(_lib, "mainDocumentURL");
    final _ret = _lib._objc_msgSend_48(_id, _sel_mainDocumentURL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_networkServiceType;
  int get networkServiceType {
    _sel_networkServiceType ??= _registerName(_lib, "networkServiceType");
    return _lib._objc_msgSend_49(_id, _sel_networkServiceType!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsCellularAccess;
  bool get allowsCellularAccess {
    _sel_allowsCellularAccess ??= _registerName(_lib, "allowsCellularAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsCellularAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsExpensiveNetworkAccess;
  bool get allowsExpensiveNetworkAccess {
    _sel_allowsExpensiveNetworkAccess ??=
        _registerName(_lib, "allowsExpensiveNetworkAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsExpensiveNetworkAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsConstrainedNetworkAccess;
  bool get allowsConstrainedNetworkAccess {
    _sel_allowsConstrainedNetworkAccess ??=
        _registerName(_lib, "allowsConstrainedNetworkAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsConstrainedNetworkAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_assumesHTTP3Capable;
  bool get assumesHTTP3Capable {
    _sel_assumesHTTP3Capable ??= _registerName(_lib, "assumesHTTP3Capable");
    return _lib._objc_msgSend_16(_id, _sel_assumesHTTP3Capable!);
  }

  static ffi.Pointer<ObjCSel>? _sel_attribution;
  int get attribution {
    _sel_attribution ??= _registerName(_lib, "attribution");
    return _lib._objc_msgSend_50(_id, _sel_attribution!);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLRequest new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLRequest");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLRequest alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLRequest");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLRequest._(_ret, _lib);
  }
}

class NSMutableURLRequest extends NSURLRequest {
  NSMutableURLRequest._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSMutableURLRequest castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableURLRequest._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URL;
  @override
  NSObject get URL {
    _sel_URL ??= _registerName(_lib, "URL");
    final _ret = _lib._objc_msgSend_51(_id, _sel_URL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URL1;
  set URL(NSObject value) {
    _sel_URL1 ??= _registerName(_lib, "setURL:");
    _lib._objc_msgSend_52(_id, _sel_URL1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_cachePolicy;
  @override
  int get cachePolicy {
    _sel_cachePolicy ??= _registerName(_lib, "cachePolicy");
    return _lib._objc_msgSend_47(_id, _sel_cachePolicy!);
  }

  static ffi.Pointer<ObjCSel>? _sel_cachePolicy1;
  set cachePolicy(int value) {
    _sel_cachePolicy1 ??= _registerName(_lib, "setCachePolicy:");
    _lib._objc_msgSend_53(_id, _sel_cachePolicy1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeoutInterval;
  @override
  double get timeoutInterval {
    _sel_timeoutInterval ??= _registerName(_lib, "timeoutInterval");
    return _lib._objc_msgSend_39(_id, _sel_timeoutInterval!);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeoutInterval1;
  set timeoutInterval(double value) {
    _sel_timeoutInterval1 ??= _registerName(_lib, "setTimeoutInterval:");
    _lib._objc_msgSend_54(_id, _sel_timeoutInterval1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_mainDocumentURL;
  @override
  NSObject get mainDocumentURL {
    _sel_mainDocumentURL ??= _registerName(_lib, "mainDocumentURL");
    final _ret = _lib._objc_msgSend_55(_id, _sel_mainDocumentURL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_mainDocumentURL1;
  set mainDocumentURL(NSObject value) {
    _sel_mainDocumentURL1 ??= _registerName(_lib, "setMainDocumentURL:");
    _lib._objc_msgSend_56(_id, _sel_mainDocumentURL1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_networkServiceType;
  @override
  int get networkServiceType {
    _sel_networkServiceType ??= _registerName(_lib, "networkServiceType");
    return _lib._objc_msgSend_49(_id, _sel_networkServiceType!);
  }

  static ffi.Pointer<ObjCSel>? _sel_networkServiceType1;
  set networkServiceType(int value) {
    _sel_networkServiceType1 ??= _registerName(_lib, "setNetworkServiceType:");
    _lib._objc_msgSend_57(_id, _sel_networkServiceType1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsCellularAccess;
  @override
  bool get allowsCellularAccess {
    _sel_allowsCellularAccess ??= _registerName(_lib, "allowsCellularAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsCellularAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsCellularAccess1;
  set allowsCellularAccess(bool value) {
    _sel_allowsCellularAccess1 ??=
        _registerName(_lib, "setAllowsCellularAccess:");
    _lib._objc_msgSend_58(_id, _sel_allowsCellularAccess1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsExpensiveNetworkAccess;
  @override
  bool get allowsExpensiveNetworkAccess {
    _sel_allowsExpensiveNetworkAccess ??=
        _registerName(_lib, "allowsExpensiveNetworkAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsExpensiveNetworkAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsExpensiveNetworkAccess1;
  set allowsExpensiveNetworkAccess(bool value) {
    _sel_allowsExpensiveNetworkAccess1 ??=
        _registerName(_lib, "setAllowsExpensiveNetworkAccess:");
    _lib._objc_msgSend_58(_id, _sel_allowsExpensiveNetworkAccess1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsConstrainedNetworkAccess;
  @override
  bool get allowsConstrainedNetworkAccess {
    _sel_allowsConstrainedNetworkAccess ??=
        _registerName(_lib, "allowsConstrainedNetworkAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsConstrainedNetworkAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsConstrainedNetworkAccess1;
  set allowsConstrainedNetworkAccess(bool value) {
    _sel_allowsConstrainedNetworkAccess1 ??=
        _registerName(_lib, "setAllowsConstrainedNetworkAccess:");
    _lib._objc_msgSend_58(_id, _sel_allowsConstrainedNetworkAccess1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_assumesHTTP3Capable;
  @override
  bool get assumesHTTP3Capable {
    _sel_assumesHTTP3Capable ??= _registerName(_lib, "assumesHTTP3Capable");
    return _lib._objc_msgSend_16(_id, _sel_assumesHTTP3Capable!);
  }

  static ffi.Pointer<ObjCSel>? _sel_assumesHTTP3Capable1;
  set assumesHTTP3Capable(bool value) {
    _sel_assumesHTTP3Capable1 ??=
        _registerName(_lib, "setAssumesHTTP3Capable:");
    _lib._objc_msgSend_58(_id, _sel_assumesHTTP3Capable1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_attribution;
  @override
  int get attribution {
    _sel_attribution ??= _registerName(_lib, "attribution");
    return _lib._objc_msgSend_50(_id, _sel_attribution!);
  }

  static ffi.Pointer<ObjCSel>? _sel_attribution1;
  set attribution(int value) {
    _sel_attribution1 ??= _registerName(_lib, "setAttribution:");
    _lib._objc_msgSend_59(_id, _sel_attribution1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestWithURL;
  static NSMutableURLRequest requestWithURL(NativeLibrary _lib, NSObject URL) {
    _class ??= _getClass(_lib, "NSMutableURLRequest");
    _sel_requestWithURL ??= _registerName(_lib, "requestWithURL:");
    final _ret = _lib._objc_msgSend_42(_class!, _sel_requestWithURL!, URL._id);
    return NSMutableURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestWithURL_cachePolicy_timeoutInterval;
  static NSMutableURLRequest requestWithURL_cachePolicy_timeoutInterval(
      NativeLibrary _lib,
      NSObject URL,
      int cachePolicy,
      double timeoutInterval) {
    _class ??= _getClass(_lib, "NSMutableURLRequest");
    _sel_requestWithURL_cachePolicy_timeoutInterval ??=
        _registerName(_lib, "requestWithURL:cachePolicy:timeoutInterval:");
    final _ret = _lib._objc_msgSend_43(
        _class!,
        _sel_requestWithURL_cachePolicy_timeoutInterval!,
        URL._id,
        cachePolicy,
        timeoutInterval);
    return NSMutableURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_supportsSecureCoding;
  static void supportsSecureCoding(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableURLRequest");
    _sel_supportsSecureCoding ??= _registerName(_lib, "supportsSecureCoding");
    _lib._objc_msgSend_0(_class!, _sel_supportsSecureCoding!);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSMutableURLRequest new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableURLRequest");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSMutableURLRequest._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSMutableURLRequest alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableURLRequest");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSMutableURLRequest._(_ret, _lib);
  }
}

abstract class NSHTTPCookieAcceptPolicy {
  static const int NSHTTPCookieAcceptPolicyAlways = 0;
  static const int NSHTTPCookieAcceptPolicyNever = 1;
  static const int NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;
}

class NSHTTPCookieStorage extends NSObject {
  NSHTTPCookieStorage._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSHTTPCookieStorage castFrom<T extends _ObjCWrapper>(T other) {
    return NSHTTPCookieStorage._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_sharedHTTPCookieStorage;
  static NSObject getSharedHTTPCookieStorage(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSHTTPCookieStorage");
    _sel_sharedHTTPCookieStorage ??=
        _registerName(_lib, "sharedHTTPCookieStorage");
    final _ret = _lib._objc_msgSend_60(_class!, _sel_sharedHTTPCookieStorage!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_sharedCookieStorageForGroupContainerIdentifier;
  static NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier(
      NativeLibrary _lib, NSObject identifier) {
    _class ??= _getClass(_lib, "NSHTTPCookieStorage");
    _sel_sharedCookieStorageForGroupContainerIdentifier ??=
        _registerName(_lib, "sharedCookieStorageForGroupContainerIdentifier:");
    final _ret = _lib._objc_msgSend_61(_class!,
        _sel_sharedCookieStorageForGroupContainerIdentifier!, identifier._id);
    return NSHTTPCookieStorage._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_cookies;
  NSObject get cookies {
    _sel_cookies ??= _registerName(_lib, "cookies");
    final _ret = _lib._objc_msgSend_62(_id, _sel_cookies!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_setCookie;
  void setCookie(NSObject cookie) {
    _sel_setCookie ??= _registerName(_lib, "setCookie:");
    _lib._objc_msgSend_63(_id, _sel_setCookie!, cookie._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_deleteCookie;
  void deleteCookie(NSObject cookie) {
    _sel_deleteCookie ??= _registerName(_lib, "deleteCookie:");
    _lib._objc_msgSend_64(_id, _sel_deleteCookie!, cookie._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeCookiesSinceDate;
  void removeCookiesSinceDate(NSObject date) {
    _sel_removeCookiesSinceDate ??=
        _registerName(_lib, "removeCookiesSinceDate:");
    _lib._objc_msgSend_65(_id, _sel_removeCookiesSinceDate!, date._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_setCookies_forURL_mainDocumentURL;
  void setCookies_forURL_mainDocumentURL(
      NSObject cookies, NSObject URL, NSObject mainDocumentURL) {
    _sel_setCookies_forURL_mainDocumentURL ??=
        _registerName(_lib, "setCookies:forURL:mainDocumentURL:");
    _lib._objc_msgSend_66(_id, _sel_setCookies_forURL_mainDocumentURL!,
        cookies._id, URL._id, mainDocumentURL._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_cookieAcceptPolicy;
  int get cookieAcceptPolicy {
    _sel_cookieAcceptPolicy ??= _registerName(_lib, "cookieAcceptPolicy");
    return _lib._objc_msgSend_67(_id, _sel_cookieAcceptPolicy!);
  }

  static ffi.Pointer<ObjCSel>? _sel_cookieAcceptPolicy1;
  set cookieAcceptPolicy(int value) {
    _sel_cookieAcceptPolicy1 ??= _registerName(_lib, "setCookieAcceptPolicy:");
    _lib._objc_msgSend_68(_id, _sel_cookieAcceptPolicy1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSHTTPCookieStorage new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSHTTPCookieStorage");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSHTTPCookieStorage._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSHTTPCookieStorage alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSHTTPCookieStorage");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSHTTPCookieStorage._(_ret, _lib);
  }
}

class NSFastEnumerationState extends ffi.Struct {
  @pkg_ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<ObjCObject>> itemsPtr;

  external ffi.Pointer<pkg_ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<pkg_ffi.UnsignedLong> extra;
}

class NSEnumerator extends NSObject {
  NSEnumerator._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSEnumerator castFrom<T extends _ObjCWrapper>(T other) {
    return NSEnumerator._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_nextObject;
  NSObject nextObject() {
    _sel_nextObject ??= _registerName(_lib, "nextObject");
    final _ret = _lib._objc_msgSend_69(_id, _sel_nextObject!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSEnumerator new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSEnumerator");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSEnumerator._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSEnumerator alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSEnumerator");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSEnumerator._(_ret, _lib);
  }
}

class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_count;
  int get count {
    _sel_count ??= _registerName(_lib, "count");
    return _lib._objc_msgSend_20(_id, _sel_count!);
  }

  static ffi.Pointer<ObjCSel>? _sel_objectForKey;
  NSObject objectForKey(NSObject aKey) {
    _sel_objectForKey ??= _registerName(_lib, "objectForKey:");
    final _ret = _lib._objc_msgSend_70(_id, _sel_objectForKey!, aKey._id);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSDictionary init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithObjects_forKeys_count;
  NSDictionary initWithObjects_forKeys_count(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    _sel_initWithObjects_forKeys_count ??=
        _registerName(_lib, "initWithObjects:forKeys:count:");
    final _ret = _lib._objc_msgSend_71(
        _id, _sel_initWithObjects_forKeys_count!, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  NSDictionary initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_72(_id, _sel_initWithCoder!, coder._id);
    return NSDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSDictionary new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSDictionary");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSDictionary alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSDictionary");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSDictionary._(_ret, _lib);
  }
}

class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSMutableDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableDictionary._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeObjectForKey;
  void removeObjectForKey(NSObject aKey) {
    _sel_removeObjectForKey ??= _registerName(_lib, "removeObjectForKey:");
    _lib._objc_msgSend_73(_id, _sel_removeObjectForKey!, aKey._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_setObject_forKey;
  void setObject_forKey(NSObject anObject, NSObject aKey) {
    _sel_setObject_forKey ??= _registerName(_lib, "setObject:forKey:");
    _lib._objc_msgSend_74(_id, _sel_setObject_forKey!, anObject._id, aKey._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSMutableDictionary init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSMutableDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCapacity;
  NSMutableDictionary initWithCapacity(int numItems) {
    _sel_initWithCapacity ??= _registerName(_lib, "initWithCapacity:");
    final _ret = _lib._objc_msgSend_75(_id, _sel_initWithCapacity!, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  @override
  NSMutableDictionary initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_76(_id, _sel_initWithCoder!, coder._id);
    return NSMutableDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSMutableDictionary new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableDictionary");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSMutableDictionary._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSMutableDictionary alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableDictionary");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSMutableDictionary._(_ret, _lib);
  }
}

class NSProgress extends NSObject {
  NSProgress._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSProgress castFrom<T extends _ObjCWrapper>(T other) {
    return NSProgress._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_currentProgress;
  static NSProgress currentProgress(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_currentProgress ??= _registerName(_lib, "currentProgress");
    final _ret = _lib._objc_msgSend_77(_class!, _sel_currentProgress!);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_progressWithTotalUnitCount;
  static NSProgress progressWithTotalUnitCount(
      NativeLibrary _lib, int unitCount) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_progressWithTotalUnitCount ??=
        _registerName(_lib, "progressWithTotalUnitCount:");
    final _ret = _lib._objc_msgSend_78(
        _class!, _sel_progressWithTotalUnitCount!, unitCount);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_discreteProgressWithTotalUnitCount;
  static NSProgress discreteProgressWithTotalUnitCount(
      NativeLibrary _lib, int unitCount) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_discreteProgressWithTotalUnitCount ??=
        _registerName(_lib, "discreteProgressWithTotalUnitCount:");
    final _ret = _lib._objc_msgSend_78(
        _class!, _sel_discreteProgressWithTotalUnitCount!, unitCount);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_progressWithTotalUnitCount_parent_pendingUnitCount;
  static NSProgress progressWithTotalUnitCount_parent_pendingUnitCount(
      NativeLibrary _lib,
      int unitCount,
      NSObject parent,
      int portionOfParentTotalUnitCount) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_progressWithTotalUnitCount_parent_pendingUnitCount ??= _registerName(
        _lib, "progressWithTotalUnitCount:parent:pendingUnitCount:");
    final _ret = _lib._objc_msgSend_79(
        _class!,
        _sel_progressWithTotalUnitCount_parent_pendingUnitCount!,
        unitCount,
        parent._id,
        portionOfParentTotalUnitCount);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithParent_userInfo;
  NSProgress initWithParent_userInfo(
      NSObject parentProgressOrNil, NSObject userInfoOrNil) {
    _sel_initWithParent_userInfo ??=
        _registerName(_lib, "initWithParent:userInfo:");
    final _ret = _lib._objc_msgSend_80(_id, _sel_initWithParent_userInfo!,
        parentProgressOrNil._id, userInfoOrNil._id);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_becomeCurrentWithPendingUnitCount;
  void becomeCurrentWithPendingUnitCount(int unitCount) {
    _sel_becomeCurrentWithPendingUnitCount ??=
        _registerName(_lib, "becomeCurrentWithPendingUnitCount:");
    _lib._objc_msgSend_81(
        _id, _sel_becomeCurrentWithPendingUnitCount!, unitCount);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_performAsCurrentWithPendingUnitCount_usingBlock;
  void performAsCurrentWithPendingUnitCount_usingBlock(
      int unitCount, NSObject work) {
    _sel_performAsCurrentWithPendingUnitCount_usingBlock ??=
        _registerName(_lib, "performAsCurrentWithPendingUnitCount:usingBlock:");
    _lib._objc_msgSend_82(
        _id,
        _sel_performAsCurrentWithPendingUnitCount_usingBlock!,
        unitCount,
        work._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_resignCurrent;
  void resignCurrent() {
    _sel_resignCurrent ??= _registerName(_lib, "resignCurrent");
    _lib._objc_msgSend_0(_id, _sel_resignCurrent!);
  }

  static ffi.Pointer<ObjCSel>? _sel_addChild_withPendingUnitCount;
  void addChild_withPendingUnitCount(NSObject child, int inUnitCount) {
    _sel_addChild_withPendingUnitCount ??=
        _registerName(_lib, "addChild:withPendingUnitCount:");
    _lib._objc_msgSend_83(
        _id, _sel_addChild_withPendingUnitCount!, child._id, inUnitCount);
  }

  static ffi.Pointer<ObjCSel>? _sel_totalUnitCount;
  int get totalUnitCount {
    _sel_totalUnitCount ??= _registerName(_lib, "totalUnitCount");
    return _lib._objc_msgSend_84(_id, _sel_totalUnitCount!);
  }

  static ffi.Pointer<ObjCSel>? _sel_totalUnitCount1;
  set totalUnitCount(int value) {
    _sel_totalUnitCount1 ??= _registerName(_lib, "setTotalUnitCount:");
    _lib._objc_msgSend_81(_id, _sel_totalUnitCount1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_completedUnitCount;
  int get completedUnitCount {
    _sel_completedUnitCount ??= _registerName(_lib, "completedUnitCount");
    return _lib._objc_msgSend_84(_id, _sel_completedUnitCount!);
  }

  static ffi.Pointer<ObjCSel>? _sel_completedUnitCount1;
  set completedUnitCount(int value) {
    _sel_completedUnitCount1 ??= _registerName(_lib, "setCompletedUnitCount:");
    _lib._objc_msgSend_81(_id, _sel_completedUnitCount1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_localizedDescription;
  NSObject get localizedDescription {
    _sel_localizedDescription ??= _registerName(_lib, "localizedDescription");
    final _ret = _lib._objc_msgSend_85(_id, _sel_localizedDescription!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_localizedDescription1;
  set localizedDescription(NSObject value) {
    _sel_localizedDescription1 ??=
        _registerName(_lib, "setLocalizedDescription:");
    _lib._objc_msgSend_86(_id, _sel_localizedDescription1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_localizedAdditionalDescription;
  NSObject get localizedAdditionalDescription {
    _sel_localizedAdditionalDescription ??=
        _registerName(_lib, "localizedAdditionalDescription");
    final _ret =
        _lib._objc_msgSend_87(_id, _sel_localizedAdditionalDescription!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_localizedAdditionalDescription1;
  set localizedAdditionalDescription(NSObject value) {
    _sel_localizedAdditionalDescription1 ??=
        _registerName(_lib, "setLocalizedAdditionalDescription:");
    _lib._objc_msgSend_88(
        _id, _sel_localizedAdditionalDescription1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancellable;
  bool get cancellable {
    _sel_cancellable ??= _registerName(_lib, "isCancellable");
    return _lib._objc_msgSend_16(_id, _sel_cancellable!);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancellable1;
  set cancellable(bool value) {
    _sel_cancellable1 ??= _registerName(_lib, "setCancellable:");
    _lib._objc_msgSend_58(_id, _sel_cancellable1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_pausable;
  bool get pausable {
    _sel_pausable ??= _registerName(_lib, "isPausable");
    return _lib._objc_msgSend_16(_id, _sel_pausable!);
  }

  static ffi.Pointer<ObjCSel>? _sel_pausable1;
  set pausable(bool value) {
    _sel_pausable1 ??= _registerName(_lib, "setPausable:");
    _lib._objc_msgSend_58(_id, _sel_pausable1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancelled;
  bool get cancelled {
    _sel_cancelled ??= _registerName(_lib, "isCancelled");
    return _lib._objc_msgSend_16(_id, _sel_cancelled!);
  }

  static ffi.Pointer<ObjCSel>? _sel_paused;
  bool get paused {
    _sel_paused ??= _registerName(_lib, "isPaused");
    return _lib._objc_msgSend_16(_id, _sel_paused!);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancellationHandler;
  NSObject get cancellationHandler {
    _sel_cancellationHandler ??= _registerName(_lib, "cancellationHandler");
    final _ret = _lib._objc_msgSend_89(_id, _sel_cancellationHandler!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancellationHandler1;
  set cancellationHandler(NSObject value) {
    _sel_cancellationHandler1 ??=
        _registerName(_lib, "setCancellationHandler:");
    _lib._objc_msgSend_90(_id, _sel_cancellationHandler1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_pausingHandler;
  NSObject get pausingHandler {
    _sel_pausingHandler ??= _registerName(_lib, "pausingHandler");
    final _ret = _lib._objc_msgSend_91(_id, _sel_pausingHandler!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_pausingHandler1;
  set pausingHandler(NSObject value) {
    _sel_pausingHandler1 ??= _registerName(_lib, "setPausingHandler:");
    _lib._objc_msgSend_92(_id, _sel_pausingHandler1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_resumingHandler;
  NSObject get resumingHandler {
    _sel_resumingHandler ??= _registerName(_lib, "resumingHandler");
    final _ret = _lib._objc_msgSend_93(_id, _sel_resumingHandler!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_resumingHandler1;
  set resumingHandler(NSObject value) {
    _sel_resumingHandler1 ??= _registerName(_lib, "setResumingHandler:");
    _lib._objc_msgSend_94(_id, _sel_resumingHandler1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_setUserInfoObject_forKey;
  void setUserInfoObject_forKey(
      NSObject objectOrNil, NSProgressUserInfoKey key) {
    _sel_setUserInfoObject_forKey ??=
        _registerName(_lib, "setUserInfoObject:forKey:");
    _lib._objc_msgSend_95(
        _id, _sel_setUserInfoObject_forKey!, objectOrNil._id, key);
  }

  static ffi.Pointer<ObjCSel>? _sel_indeterminate;
  bool get indeterminate {
    _sel_indeterminate ??= _registerName(_lib, "isIndeterminate");
    return _lib._objc_msgSend_16(_id, _sel_indeterminate!);
  }

  static ffi.Pointer<ObjCSel>? _sel_fractionCompleted;
  double get fractionCompleted {
    _sel_fractionCompleted ??= _registerName(_lib, "fractionCompleted");
    return _lib._objc_msgSend_96(_id, _sel_fractionCompleted!);
  }

  static ffi.Pointer<ObjCSel>? _sel_finished;
  bool get finished {
    _sel_finished ??= _registerName(_lib, "isFinished");
    return _lib._objc_msgSend_16(_id, _sel_finished!);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancel;
  void cancel() {
    _sel_cancel ??= _registerName(_lib, "cancel");
    _lib._objc_msgSend_0(_id, _sel_cancel!);
  }

  static ffi.Pointer<ObjCSel>? _sel_pause;
  void pause() {
    _sel_pause ??= _registerName(_lib, "pause");
    _lib._objc_msgSend_0(_id, _sel_pause!);
  }

  static ffi.Pointer<ObjCSel>? _sel_resume;
  void resume() {
    _sel_resume ??= _registerName(_lib, "resume");
    _lib._objc_msgSend_0(_id, _sel_resume!);
  }

  static ffi.Pointer<ObjCSel>? _sel_userInfo;
  NSObject get userInfo {
    _sel_userInfo ??= _registerName(_lib, "userInfo");
    final _ret = _lib._objc_msgSend_97(_id, _sel_userInfo!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_kind;
  NSProgressKind get kind {
    _sel_kind ??= _registerName(_lib, "kind");
    return _lib._objc_msgSend_98(_id, _sel_kind!);
  }

  static ffi.Pointer<ObjCSel>? _sel_kind1;
  set kind(NSProgressKind value) {
    _sel_kind1 ??= _registerName(_lib, "setKind:");
    _lib._objc_msgSend_99(_id, _sel_kind1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_estimatedTimeRemaining;
  NSObject get estimatedTimeRemaining {
    _sel_estimatedTimeRemaining ??=
        _registerName(_lib, "estimatedTimeRemaining");
    final _ret = _lib._objc_msgSend_100(_id, _sel_estimatedTimeRemaining!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_estimatedTimeRemaining1;
  set estimatedTimeRemaining(NSObject value) {
    _sel_estimatedTimeRemaining1 ??=
        _registerName(_lib, "setEstimatedTimeRemaining:");
    _lib._objc_msgSend_101(_id, _sel_estimatedTimeRemaining1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_throughput;
  NSObject get throughput {
    _sel_throughput ??= _registerName(_lib, "throughput");
    final _ret = _lib._objc_msgSend_102(_id, _sel_throughput!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_throughput1;
  set throughput(NSObject value) {
    _sel_throughput1 ??= _registerName(_lib, "setThroughput:");
    _lib._objc_msgSend_103(_id, _sel_throughput1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileOperationKind;
  NSProgressFileOperationKind get fileOperationKind {
    _sel_fileOperationKind ??= _registerName(_lib, "fileOperationKind");
    return _lib._objc_msgSend_104(_id, _sel_fileOperationKind!);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileOperationKind1;
  set fileOperationKind(NSProgressFileOperationKind value) {
    _sel_fileOperationKind1 ??= _registerName(_lib, "setFileOperationKind:");
    _lib._objc_msgSend_105(_id, _sel_fileOperationKind1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileURL;
  NSObject get fileURL {
    _sel_fileURL ??= _registerName(_lib, "fileURL");
    final _ret = _lib._objc_msgSend_106(_id, _sel_fileURL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileURL1;
  set fileURL(NSObject value) {
    _sel_fileURL1 ??= _registerName(_lib, "setFileURL:");
    _lib._objc_msgSend_107(_id, _sel_fileURL1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileTotalCount;
  NSObject get fileTotalCount {
    _sel_fileTotalCount ??= _registerName(_lib, "fileTotalCount");
    final _ret = _lib._objc_msgSend_108(_id, _sel_fileTotalCount!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileTotalCount1;
  set fileTotalCount(NSObject value) {
    _sel_fileTotalCount1 ??= _registerName(_lib, "setFileTotalCount:");
    _lib._objc_msgSend_109(_id, _sel_fileTotalCount1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileCompletedCount;
  NSObject get fileCompletedCount {
    _sel_fileCompletedCount ??= _registerName(_lib, "fileCompletedCount");
    final _ret = _lib._objc_msgSend_110(_id, _sel_fileCompletedCount!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileCompletedCount1;
  set fileCompletedCount(NSObject value) {
    _sel_fileCompletedCount1 ??= _registerName(_lib, "setFileCompletedCount:");
    _lib._objc_msgSend_111(_id, _sel_fileCompletedCount1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_publish;
  void publish() {
    _sel_publish ??= _registerName(_lib, "publish");
    _lib._objc_msgSend_0(_id, _sel_publish!);
  }

  static ffi.Pointer<ObjCSel>? _sel_unpublish;
  void unpublish() {
    _sel_unpublish ??= _registerName(_lib, "unpublish");
    _lib._objc_msgSend_0(_id, _sel_unpublish!);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_addSubscriberForFileURL_withPublishingHandler;
  static NSObject addSubscriberForFileURL_withPublishingHandler(
      NativeLibrary _lib,
      NSObject url,
      NSProgressPublishingHandler publishingHandler) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_addSubscriberForFileURL_withPublishingHandler ??=
        _registerName(_lib, "addSubscriberForFileURL:withPublishingHandler:");
    final _ret = _lib._objc_msgSend_112(
        _class!,
        _sel_addSubscriberForFileURL_withPublishingHandler!,
        url._id,
        publishingHandler);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeSubscriber;
  static void removeSubscriber(NativeLibrary _lib, NSObject subscriber) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_removeSubscriber ??= _registerName(_lib, "removeSubscriber:");
    _lib._objc_msgSend_113(_class!, _sel_removeSubscriber!, subscriber._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_old;
  bool get old {
    _sel_old ??= _registerName(_lib, "isOld");
    return _lib._objc_msgSend_16(_id, _sel_old!);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSProgress new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSProgress alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSProgress");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSProgress._(_ret, _lib);
  }
}

typedef NSProgressUserInfoKey = ffi.Pointer<ObjCObject>;
typedef NSProgressKind = ffi.Pointer<ObjCObject>;
typedef NSProgressFileOperationKind = ffi.Pointer<ObjCObject>;
typedef NSProgressPublishingHandler = ffi.Pointer<ObjCObject>;

class CFArrayCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFArrayRetainCallBack retain;

  external CFArrayReleaseCallBack release;

  external CFArrayCopyDescriptionCallBack copyDescription;

  external CFArrayEqualCallBack equal;
}

typedef CFArrayRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFArrayEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFArray extends ffi.Opaque {}

typedef CFArrayRef = ffi.Pointer<__CFArray>;
typedef CFMutableArrayRef = ffi.Pointer<__CFArray>;
typedef CFArrayApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFComparatorFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;

class __SecCertificate extends ffi.Opaque {}

class __SecIdentity extends ffi.Opaque {}

class __SecKey extends ffi.Opaque {}

class __SecPolicy extends ffi.Opaque {}

class __SecAccessControl extends ffi.Opaque {}

class __SecKeychain extends ffi.Opaque {}

class __SecKeychainItem extends ffi.Opaque {}

class __SecKeychainSearch extends ffi.Opaque {}

class SecKeychainAttribute extends ffi.Struct {
  @SecKeychainAttrType()
  external int tag;

  @UInt32()
  external int length;

  external ffi.Pointer<ffi.Void> data;
}

typedef SecKeychainAttrType = OSType;
typedef OSType = FourCharCode;
typedef FourCharCode = UInt32;
typedef UInt32 = pkg_ffi.UnsignedInt;

class SecKeychainAttributeList extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<SecKeychainAttribute> attr;
}

class __SecTrustedApplication extends ffi.Opaque {}

class __SecAccess extends ffi.Opaque {}

class __SecACL extends ffi.Opaque {}

class __SecPassword extends ffi.Opaque {}

class SecKeychainAttributeInfo extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<UInt32> tag;

  external ffi.Pointer<UInt32> format;
}

typedef OSStatus = SInt32;
typedef SInt32 = pkg_ffi.Int;

class CFBagCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFBagRetainCallBack retain;

  external CFBagReleaseCallBack release;

  external CFBagCopyDescriptionCallBack copyDescription;

  external CFBagEqualCallBack equal;

  external CFBagHashCallBack hash;
}

typedef CFBagRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFBagEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFBagHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFBag extends ffi.Opaque {}

typedef CFBagRef = ffi.Pointer<__CFBag>;
typedef CFMutableBagRef = ffi.Pointer<__CFBag>;
typedef CFBagApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class CFBinaryHeapCompareContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class CFBinaryHeapCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>> compare;
}

class __CFBinaryHeap extends ffi.Opaque {}

typedef CFBinaryHeapRef = ffi.Pointer<__CFBinaryHeap>;
typedef CFBinaryHeapApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFBitVector extends ffi.Opaque {}

typedef CFBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef UInt8 = pkg_ffi.UnsignedChar;
typedef CFMutableBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFBit = UInt32;

abstract class __CFByteOrder {
  static const int CFByteOrderUnknown = 0;
  static const int CFByteOrderLittleEndian = 1;
  static const int CFByteOrderBigEndian = 2;
}

class CFSwappedFloat32 extends ffi.Struct {
  @ffi.Uint32()
  external int v;
}

class CFSwappedFloat64 extends ffi.Struct {
  @ffi.Uint64()
  external int v;
}

class CFDictionaryKeyCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

typedef CFDictionaryRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class CFDictionaryValueCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

class __CFDictionary extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFMutableDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFDictionaryApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;

class __CFNotificationCenter extends ffi.Opaque {}

abstract class CFNotificationSuspensionBehavior {
  static const int CFNotificationSuspensionBehaviorDrop = 1;
  static const int CFNotificationSuspensionBehaviorCoalesce = 2;
  static const int CFNotificationSuspensionBehaviorHold = 3;
  static const int CFNotificationSuspensionBehaviorDeliverImmediately = 4;
}

typedef CFNotificationCenterRef = ffi.Pointer<__CFNotificationCenter>;
typedef CFNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
            CFNotificationName, ffi.Pointer<ffi.Void>, CFDictionaryRef)>>;
typedef CFNotificationName = CFStringRef;

class __CFLocale extends ffi.Opaque {}

typedef CFLocaleRef = ffi.Pointer<__CFLocale>;
typedef CFLocaleIdentifier = CFStringRef;
typedef LangCode = SInt16;
typedef SInt16 = pkg_ffi.Short;
typedef RegionCode = SInt16;

abstract class CFLocaleLanguageDirection {
  static const int kCFLocaleLanguageDirectionUnknown = 0;
  static const int kCFLocaleLanguageDirectionLeftToRight = 1;
  static const int kCFLocaleLanguageDirectionRightToLeft = 2;
  static const int kCFLocaleLanguageDirectionTopToBottom = 3;
  static const int kCFLocaleLanguageDirectionBottomToTop = 4;
}

typedef CFLocaleKey = CFStringRef;
typedef CFCalendarIdentifier = CFStringRef;
typedef CFAbsoluteTime = CFTimeInterval;
typedef CFTimeInterval = ffi.Double;

class __CFDate extends ffi.Opaque {}

typedef CFDateRef = ffi.Pointer<__CFDate>;

class __CFTimeZone extends ffi.Opaque {}

class CFGregorianDate extends ffi.Struct {
  @SInt32()
  external int year;

  @SInt8()
  external int month;

  @SInt8()
  external int day;

  @SInt8()
  external int hour;

  @SInt8()
  external int minute;

  @ffi.Double()
  external double second;
}

typedef SInt8 = pkg_ffi.SignedChar;

class CFGregorianUnits extends ffi.Struct {
  @SInt32()
  external int years;

  @SInt32()
  external int months;

  @SInt32()
  external int days;

  @SInt32()
  external int hours;

  @SInt32()
  external int minutes;

  @ffi.Double()
  external double seconds;
}

abstract class CFGregorianUnitFlags {
  static const int kCFGregorianUnitsYears = 1;
  static const int kCFGregorianUnitsMonths = 2;
  static const int kCFGregorianUnitsDays = 4;
  static const int kCFGregorianUnitsHours = 8;
  static const int kCFGregorianUnitsMinutes = 16;
  static const int kCFGregorianUnitsSeconds = 32;
  static const int kCFGregorianAllUnits = 16777215;
}

typedef CFTimeZoneRef = ffi.Pointer<__CFTimeZone>;

class __CFData extends ffi.Opaque {}

typedef CFDataRef = ffi.Pointer<__CFData>;
typedef CFMutableDataRef = ffi.Pointer<__CFData>;

abstract class CFDataSearchFlags {
  static const int kCFDataSearchBackwards = 1;
  static const int kCFDataSearchAnchored = 2;
}

class __CFCharacterSet extends ffi.Opaque {}

abstract class CFCharacterSetPredefinedSet {
  static const int kCFCharacterSetControl = 1;
  static const int kCFCharacterSetWhitespace = 2;
  static const int kCFCharacterSetWhitespaceAndNewline = 3;
  static const int kCFCharacterSetDecimalDigit = 4;
  static const int kCFCharacterSetLetter = 5;
  static const int kCFCharacterSetLowercaseLetter = 6;
  static const int kCFCharacterSetUppercaseLetter = 7;
  static const int kCFCharacterSetNonBase = 8;
  static const int kCFCharacterSetDecomposable = 9;
  static const int kCFCharacterSetAlphaNumeric = 10;
  static const int kCFCharacterSetPunctuation = 11;
  static const int kCFCharacterSetCapitalizedLetter = 13;
  static const int kCFCharacterSetSymbol = 14;
  static const int kCFCharacterSetNewline = 15;
  static const int kCFCharacterSetIllegal = 12;
}

typedef CFCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef CFMutableCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef UniChar = UInt16;
typedef UInt16 = pkg_ffi.UnsignedShort;
typedef UTF32Char = UInt32;

abstract class CFStringBuiltInEncodings {
  static const int kCFStringEncodingMacRoman = 0;
  static const int kCFStringEncodingWindowsLatin1 = 1280;
  static const int kCFStringEncodingISOLatin1 = 513;
  static const int kCFStringEncodingNextStepLatin = 2817;
  static const int kCFStringEncodingASCII = 1536;
  static const int kCFStringEncodingUnicode = 256;
  static const int kCFStringEncodingUTF8 = 134217984;
  static const int kCFStringEncodingNonLossyASCII = 3071;
  static const int kCFStringEncodingUTF16 = 256;
  static const int kCFStringEncodingUTF16BE = 268435712;
  static const int kCFStringEncodingUTF16LE = 335544576;
  static const int kCFStringEncodingUTF32 = 201326848;
  static const int kCFStringEncodingUTF32BE = 402653440;
  static const int kCFStringEncodingUTF32LE = 469762304;
}

typedef ConstStr255Param = ffi.Pointer<pkg_ffi.UnsignedChar>;
typedef CFStringEncoding = UInt32;
typedef CFMutableStringRef = ffi.Pointer<__CFString>;
typedef StringPtr = ffi.Pointer<pkg_ffi.UnsignedChar>;
typedef ConstStringPtr = ffi.Pointer<pkg_ffi.UnsignedChar>;

abstract class CFStringCompareFlags {
  static const int kCFCompareCaseInsensitive = 1;
  static const int kCFCompareBackwards = 4;
  static const int kCFCompareAnchored = 8;
  static const int kCFCompareNonliteral = 16;
  static const int kCFCompareLocalized = 32;
  static const int kCFCompareNumerically = 64;
  static const int kCFCompareDiacriticInsensitive = 128;
  static const int kCFCompareWidthInsensitive = 256;
  static const int kCFCompareForcedOrdering = 512;
}

abstract class CFStringNormalizationForm {
  static const int kCFStringNormalizationFormD = 0;
  static const int kCFStringNormalizationFormKD = 1;
  static const int kCFStringNormalizationFormC = 2;
  static const int kCFStringNormalizationFormKC = 3;
}

class CFStringInlineBuffer extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<UniChar> buffer;

  external CFStringRef theString;

  external ffi.Pointer<UniChar> directUniCharBuffer;

  external ffi.Pointer<pkg_ffi.Char> directCStringBuffer;

  external CFRange rangeToBuffer;

  @CFIndex()
  external int bufferedRangeStart;

  @CFIndex()
  external int bufferedRangeEnd;
}

abstract class CFTimeZoneNameStyle {
  static const int kCFTimeZoneNameStyleStandard = 0;
  static const int kCFTimeZoneNameStyleShortStandard = 1;
  static const int kCFTimeZoneNameStyleDaylightSaving = 2;
  static const int kCFTimeZoneNameStyleShortDaylightSaving = 3;
  static const int kCFTimeZoneNameStyleGeneric = 4;
  static const int kCFTimeZoneNameStyleShortGeneric = 5;
}

class __CFCalendar extends ffi.Opaque {}

typedef CFCalendarRef = ffi.Pointer<__CFCalendar>;

abstract class CFCalendarUnit {
  static const int kCFCalendarUnitEra = 2;
  static const int kCFCalendarUnitYear = 4;
  static const int kCFCalendarUnitMonth = 8;
  static const int kCFCalendarUnitDay = 16;
  static const int kCFCalendarUnitHour = 32;
  static const int kCFCalendarUnitMinute = 64;
  static const int kCFCalendarUnitSecond = 128;
  static const int kCFCalendarUnitWeek = 256;
  static const int kCFCalendarUnitWeekday = 512;
  static const int kCFCalendarUnitWeekdayOrdinal = 1024;
  static const int kCFCalendarUnitQuarter = 2048;
  static const int kCFCalendarUnitWeekOfMonth = 4096;
  static const int kCFCalendarUnitWeekOfYear = 8192;
  static const int kCFCalendarUnitYearForWeekOfYear = 16384;
}

class __CFDateFormatter extends ffi.Opaque {}

abstract class CFDateFormatterStyle {
  static const int kCFDateFormatterNoStyle = 0;
  static const int kCFDateFormatterShortStyle = 1;
  static const int kCFDateFormatterMediumStyle = 2;
  static const int kCFDateFormatterLongStyle = 3;
  static const int kCFDateFormatterFullStyle = 4;
}

abstract class CFISO8601DateFormatOptions {
  static const int kCFISO8601DateFormatWithYear = 1;
  static const int kCFISO8601DateFormatWithMonth = 2;
  static const int kCFISO8601DateFormatWithWeekOfYear = 4;
  static const int kCFISO8601DateFormatWithDay = 16;
  static const int kCFISO8601DateFormatWithTime = 32;
  static const int kCFISO8601DateFormatWithTimeZone = 64;
  static const int kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128;
  static const int kCFISO8601DateFormatWithDashSeparatorInDate = 256;
  static const int kCFISO8601DateFormatWithColonSeparatorInTime = 512;
  static const int kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024;
  static const int kCFISO8601DateFormatWithFractionalSeconds = 2048;
  static const int kCFISO8601DateFormatWithFullDate = 275;
  static const int kCFISO8601DateFormatWithFullTime = 1632;
  static const int kCFISO8601DateFormatWithInternetDateTime = 1907;
}

typedef CFDateFormatterRef = ffi.Pointer<__CFDateFormatter>;
typedef CFDateFormatterKey = CFStringRef;

class __CFError extends ffi.Opaque {}

typedef CFErrorDomain = CFStringRef;
typedef CFErrorRef = ffi.Pointer<__CFError>;

class __CFBoolean extends ffi.Opaque {}

typedef CFBooleanRef = ffi.Pointer<__CFBoolean>;

abstract class CFNumberType {
  static const int kCFNumberSInt8Type = 1;
  static const int kCFNumberSInt16Type = 2;
  static const int kCFNumberSInt32Type = 3;
  static const int kCFNumberSInt64Type = 4;
  static const int kCFNumberFloat32Type = 5;
  static const int kCFNumberFloat64Type = 6;
  static const int kCFNumberCharType = 7;
  static const int kCFNumberShortType = 8;
  static const int kCFNumberIntType = 9;
  static const int kCFNumberLongType = 10;
  static const int kCFNumberLongLongType = 11;
  static const int kCFNumberFloatType = 12;
  static const int kCFNumberDoubleType = 13;
  static const int kCFNumberCFIndexType = 14;
  static const int kCFNumberNSIntegerType = 15;
  static const int kCFNumberCGFloatType = 16;
  static const int kCFNumberMaxType = 16;
}

class __CFNumber extends ffi.Opaque {}

typedef CFNumberRef = ffi.Pointer<__CFNumber>;

class __CFNumberFormatter extends ffi.Opaque {}

abstract class CFNumberFormatterStyle {
  static const int kCFNumberFormatterNoStyle = 0;
  static const int kCFNumberFormatterDecimalStyle = 1;
  static const int kCFNumberFormatterCurrencyStyle = 2;
  static const int kCFNumberFormatterPercentStyle = 3;
  static const int kCFNumberFormatterScientificStyle = 4;
  static const int kCFNumberFormatterSpellOutStyle = 5;
  static const int kCFNumberFormatterOrdinalStyle = 6;
  static const int kCFNumberFormatterCurrencyISOCodeStyle = 8;
  static const int kCFNumberFormatterCurrencyPluralStyle = 9;
  static const int kCFNumberFormatterCurrencyAccountingStyle = 10;
}

typedef CFNumberFormatterRef = ffi.Pointer<__CFNumberFormatter>;

abstract class CFNumberFormatterOptionFlags {
  static const int kCFNumberFormatterParseIntegersOnly = 1;
}

typedef CFNumberFormatterKey = CFStringRef;

abstract class CFNumberFormatterRoundingMode {
  static const int kCFNumberFormatterRoundCeiling = 0;
  static const int kCFNumberFormatterRoundFloor = 1;
  static const int kCFNumberFormatterRoundDown = 2;
  static const int kCFNumberFormatterRoundUp = 3;
  static const int kCFNumberFormatterRoundHalfEven = 4;
  static const int kCFNumberFormatterRoundHalfDown = 5;
  static const int kCFNumberFormatterRoundHalfUp = 6;
}

abstract class CFNumberFormatterPadPosition {
  static const int kCFNumberFormatterPadBeforePrefix = 0;
  static const int kCFNumberFormatterPadAfterPrefix = 1;
  static const int kCFNumberFormatterPadBeforeSuffix = 2;
  static const int kCFNumberFormatterPadAfterSuffix = 3;
}

typedef CFPropertyListRef = CFTypeRef;

abstract class CFURLPathStyle {
  static const int kCFURLPOSIXPathStyle = 0;
  static const int kCFURLHFSPathStyle = 1;
  static const int kCFURLWindowsPathStyle = 2;
}

class __CFURL extends ffi.Opaque {}

typedef CFURLRef = ffi.Pointer<__CFURL>;

abstract class CFURLComponentType {
  static const int kCFURLComponentScheme = 1;
  static const int kCFURLComponentNetLocation = 2;
  static const int kCFURLComponentPath = 3;
  static const int kCFURLComponentResourceSpecifier = 4;
  static const int kCFURLComponentUser = 5;
  static const int kCFURLComponentPassword = 6;
  static const int kCFURLComponentUserInfo = 7;
  static const int kCFURLComponentHost = 8;
  static const int kCFURLComponentPort = 9;
  static const int kCFURLComponentParameterString = 10;
  static const int kCFURLComponentQuery = 11;
  static const int kCFURLComponentFragment = 12;
}

class FSRef extends ffi.Opaque {}

abstract class CFURLBookmarkCreationOptions {
  static const int kCFURLBookmarkCreationMinimalBookmarkMask = 512;
  static const int kCFURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int kCFURLBookmarkCreationWithSecurityScope = 2048;
  static const int kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess =
      4096;
  static const int kCFURLBookmarkCreationWithoutImplicitSecurityScope =
      536870912;
  static const int kCFURLBookmarkCreationPreferFileIDResolutionMask = 256;
}

abstract class CFURLBookmarkResolutionOptions {
  static const int kCFURLBookmarkResolutionWithoutUIMask = 256;
  static const int kCFURLBookmarkResolutionWithoutMountingMask = 512;
  static const int kCFURLBookmarkResolutionWithSecurityScope = 1024;
  static const int kCFURLBookmarkResolutionWithoutImplicitStartAccessing =
      32768;
  static const int kCFBookmarkResolutionWithoutUIMask = 256;
  static const int kCFBookmarkResolutionWithoutMountingMask = 512;
}

typedef CFURLBookmarkFileCreationOptions = CFOptionFlags;

class __CFRunLoop extends ffi.Opaque {}

class __CFRunLoopSource extends ffi.Opaque {}

class __CFRunLoopObserver extends ffi.Opaque {}

class __CFRunLoopTimer extends ffi.Opaque {}

abstract class CFRunLoopRunResult {
  static const int kCFRunLoopRunFinished = 1;
  static const int kCFRunLoopRunStopped = 2;
  static const int kCFRunLoopRunTimedOut = 3;
  static const int kCFRunLoopRunHandledSource = 4;
}

abstract class CFRunLoopActivity {
  static const int kCFRunLoopEntry = 1;
  static const int kCFRunLoopBeforeTimers = 2;
  static const int kCFRunLoopBeforeSources = 4;
  static const int kCFRunLoopBeforeWaiting = 32;
  static const int kCFRunLoopAfterWaiting = 64;
  static const int kCFRunLoopExit = 128;
  static const int kCFRunLoopAllActivities = 268435455;
}

typedef CFRunLoopMode = CFStringRef;
typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;
typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;
typedef CFRunLoopObserverRef = ffi.Pointer<__CFRunLoopObserver>;
typedef CFRunLoopTimerRef = ffi.Pointer<__CFRunLoopTimer>;

class CFRunLoopSourceContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> schedule;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> cancel;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      perform;
}

class CFRunLoopSourceContext1 extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<mach_port_t Function(ffi.Pointer<ffi.Void>)>> getPort;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> perform;
}

typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_natural_t = pkg_ffi.UnsignedInt;

class CFRunLoopObserverContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopObserverCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFRunLoopObserverRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class CFRunLoopTimerContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopTimerCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFRunLoopTimerRef, ffi.Pointer<ffi.Void>)>>;

class __CFSocket extends ffi.Opaque {}

abstract class CFSocketError {
  static const int kCFSocketSuccess = 0;
  static const int kCFSocketError = -1;
  static const int kCFSocketTimeout = -2;
}

class CFSocketSignature extends ffi.Struct {
  @SInt32()
  external int protocolFamily;

  @SInt32()
  external int socketType;

  @SInt32()
  external int protocol;

  external CFDataRef address;
}

abstract class CFSocketCallBackType {
  static const int kCFSocketNoCallBack = 0;
  static const int kCFSocketReadCallBack = 1;
  static const int kCFSocketAcceptCallBack = 2;
  static const int kCFSocketDataCallBack = 3;
  static const int kCFSocketConnectCallBack = 4;
  static const int kCFSocketWriteCallBack = 8;
}

class CFSocketContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFSocketRef = ffi.Pointer<__CFSocket>;
typedef CFSocketCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFSocketRef, ffi.Int32, CFDataRef,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSocketNativeHandle = pkg_ffi.Int;

class CFStreamError extends ffi.Struct {
  @CFIndex()
  external int domain;

  @SInt32()
  external int error;
}

abstract class CFStreamStatus {
  static const int kCFStreamStatusNotOpen = 0;
  static const int kCFStreamStatusOpening = 1;
  static const int kCFStreamStatusOpen = 2;
  static const int kCFStreamStatusReading = 3;
  static const int kCFStreamStatusWriting = 4;
  static const int kCFStreamStatusAtEnd = 5;
  static const int kCFStreamStatusClosed = 6;
  static const int kCFStreamStatusError = 7;
}

abstract class CFStreamEventType {
  static const int kCFStreamEventNone = 0;
  static const int kCFStreamEventOpenCompleted = 1;
  static const int kCFStreamEventHasBytesAvailable = 2;
  static const int kCFStreamEventCanAcceptBytes = 4;
  static const int kCFStreamEventErrorOccurred = 8;
  static const int kCFStreamEventEndEncountered = 16;
}

class CFStreamClientContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class __CFReadStream extends ffi.Opaque {}

class __CFWriteStream extends ffi.Opaque {}

typedef CFStreamPropertyKey = CFStringRef;
typedef CFReadStreamRef = ffi.Pointer<__CFReadStream>;
typedef CFWriteStreamRef = ffi.Pointer<__CFWriteStream>;
typedef CFReadStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFReadStreamRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef CFWriteStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFWriteStreamRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef dispatch_queue_t = ffi.Pointer<ObjCObject>;

abstract class CFStreamErrorDomain {
  static const int kCFStreamErrorDomainCustom = -1;
  static const int kCFStreamErrorDomainPOSIX = 1;
  static const int kCFStreamErrorDomainMacOSStatus = 2;
}

abstract class CFPropertyListMutabilityOptions {
  static const int kCFPropertyListImmutable = 0;
  static const int kCFPropertyListMutableContainers = 1;
  static const int kCFPropertyListMutableContainersAndLeaves = 2;
}

abstract class CFPropertyListFormat {
  static const int kCFPropertyListOpenStepFormat = 1;
  static const int kCFPropertyListXMLFormat_v1_0 = 100;
  static const int kCFPropertyListBinaryFormat_v1_0 = 200;
}

class CFSetCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFSetRetainCallBack retain;

  external CFSetReleaseCallBack release;

  external CFSetCopyDescriptionCallBack copyDescription;

  external CFSetEqualCallBack equal;

  external CFSetHashCallBack hash;
}

typedef CFSetRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFSetEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSetHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFSet extends ffi.Opaque {}

typedef CFSetRef = ffi.Pointer<__CFSet>;
typedef CFMutableSetRef = ffi.Pointer<__CFSet>;
typedef CFSetApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

abstract class CFStringEncodings {
  static const int kCFStringEncodingMacJapanese = 1;
  static const int kCFStringEncodingMacChineseTrad = 2;
  static const int kCFStringEncodingMacKorean = 3;
  static const int kCFStringEncodingMacArabic = 4;
  static const int kCFStringEncodingMacHebrew = 5;
  static const int kCFStringEncodingMacGreek = 6;
  static const int kCFStringEncodingMacCyrillic = 7;
  static const int kCFStringEncodingMacDevanagari = 9;
  static const int kCFStringEncodingMacGurmukhi = 10;
  static const int kCFStringEncodingMacGujarati = 11;
  static const int kCFStringEncodingMacOriya = 12;
  static const int kCFStringEncodingMacBengali = 13;
  static const int kCFStringEncodingMacTamil = 14;
  static const int kCFStringEncodingMacTelugu = 15;
  static const int kCFStringEncodingMacKannada = 16;
  static const int kCFStringEncodingMacMalayalam = 17;
  static const int kCFStringEncodingMacSinhalese = 18;
  static const int kCFStringEncodingMacBurmese = 19;
  static const int kCFStringEncodingMacKhmer = 20;
  static const int kCFStringEncodingMacThai = 21;
  static const int kCFStringEncodingMacLaotian = 22;
  static const int kCFStringEncodingMacGeorgian = 23;
  static const int kCFStringEncodingMacArmenian = 24;
  static const int kCFStringEncodingMacChineseSimp = 25;
  static const int kCFStringEncodingMacTibetan = 26;
  static const int kCFStringEncodingMacMongolian = 27;
  static const int kCFStringEncodingMacEthiopic = 28;
  static const int kCFStringEncodingMacCentralEurRoman = 29;
  static const int kCFStringEncodingMacVietnamese = 30;
  static const int kCFStringEncodingMacExtArabic = 31;
  static const int kCFStringEncodingMacSymbol = 33;
  static const int kCFStringEncodingMacDingbats = 34;
  static const int kCFStringEncodingMacTurkish = 35;
  static const int kCFStringEncodingMacCroatian = 36;
  static const int kCFStringEncodingMacIcelandic = 37;
  static const int kCFStringEncodingMacRomanian = 38;
  static const int kCFStringEncodingMacCeltic = 39;
  static const int kCFStringEncodingMacGaelic = 40;
  static const int kCFStringEncodingMacFarsi = 140;
  static const int kCFStringEncodingMacUkrainian = 152;
  static const int kCFStringEncodingMacInuit = 236;
  static const int kCFStringEncodingMacVT100 = 252;
  static const int kCFStringEncodingMacHFS = 255;
  static const int kCFStringEncodingISOLatin2 = 514;
  static const int kCFStringEncodingISOLatin3 = 515;
  static const int kCFStringEncodingISOLatin4 = 516;
  static const int kCFStringEncodingISOLatinCyrillic = 517;
  static const int kCFStringEncodingISOLatinArabic = 518;
  static const int kCFStringEncodingISOLatinGreek = 519;
  static const int kCFStringEncodingISOLatinHebrew = 520;
  static const int kCFStringEncodingISOLatin5 = 521;
  static const int kCFStringEncodingISOLatin6 = 522;
  static const int kCFStringEncodingISOLatinThai = 523;
  static const int kCFStringEncodingISOLatin7 = 525;
  static const int kCFStringEncodingISOLatin8 = 526;
  static const int kCFStringEncodingISOLatin9 = 527;
  static const int kCFStringEncodingISOLatin10 = 528;
  static const int kCFStringEncodingDOSLatinUS = 1024;
  static const int kCFStringEncodingDOSGreek = 1029;
  static const int kCFStringEncodingDOSBalticRim = 1030;
  static const int kCFStringEncodingDOSLatin1 = 1040;
  static const int kCFStringEncodingDOSGreek1 = 1041;
  static const int kCFStringEncodingDOSLatin2 = 1042;
  static const int kCFStringEncodingDOSCyrillic = 1043;
  static const int kCFStringEncodingDOSTurkish = 1044;
  static const int kCFStringEncodingDOSPortuguese = 1045;
  static const int kCFStringEncodingDOSIcelandic = 1046;
  static const int kCFStringEncodingDOSHebrew = 1047;
  static const int kCFStringEncodingDOSCanadianFrench = 1048;
  static const int kCFStringEncodingDOSArabic = 1049;
  static const int kCFStringEncodingDOSNordic = 1050;
  static const int kCFStringEncodingDOSRussian = 1051;
  static const int kCFStringEncodingDOSGreek2 = 1052;
  static const int kCFStringEncodingDOSThai = 1053;
  static const int kCFStringEncodingDOSJapanese = 1056;
  static const int kCFStringEncodingDOSChineseSimplif = 1057;
  static const int kCFStringEncodingDOSKorean = 1058;
  static const int kCFStringEncodingDOSChineseTrad = 1059;
  static const int kCFStringEncodingWindowsLatin2 = 1281;
  static const int kCFStringEncodingWindowsCyrillic = 1282;
  static const int kCFStringEncodingWindowsGreek = 1283;
  static const int kCFStringEncodingWindowsLatin5 = 1284;
  static const int kCFStringEncodingWindowsHebrew = 1285;
  static const int kCFStringEncodingWindowsArabic = 1286;
  static const int kCFStringEncodingWindowsBalticRim = 1287;
  static const int kCFStringEncodingWindowsVietnamese = 1288;
  static const int kCFStringEncodingWindowsKoreanJohab = 1296;
  static const int kCFStringEncodingANSEL = 1537;
  static const int kCFStringEncodingJIS_X0201_76 = 1568;
  static const int kCFStringEncodingJIS_X0208_83 = 1569;
  static const int kCFStringEncodingJIS_X0208_90 = 1570;
  static const int kCFStringEncodingJIS_X0212_90 = 1571;
  static const int kCFStringEncodingJIS_C6226_78 = 1572;
  static const int kCFStringEncodingShiftJIS_X0213 = 1576;
  static const int kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577;
  static const int kCFStringEncodingGB_2312_80 = 1584;
  static const int kCFStringEncodingGBK_95 = 1585;
  static const int kCFStringEncodingGB_18030_2000 = 1586;
  static const int kCFStringEncodingKSC_5601_87 = 1600;
  static const int kCFStringEncodingKSC_5601_92_Johab = 1601;
  static const int kCFStringEncodingCNS_11643_92_P1 = 1617;
  static const int kCFStringEncodingCNS_11643_92_P2 = 1618;
  static const int kCFStringEncodingCNS_11643_92_P3 = 1619;
  static const int kCFStringEncodingISO_2022_JP = 2080;
  static const int kCFStringEncodingISO_2022_JP_2 = 2081;
  static const int kCFStringEncodingISO_2022_JP_1 = 2082;
  static const int kCFStringEncodingISO_2022_JP_3 = 2083;
  static const int kCFStringEncodingISO_2022_CN = 2096;
  static const int kCFStringEncodingISO_2022_CN_EXT = 2097;
  static const int kCFStringEncodingISO_2022_KR = 2112;
  static const int kCFStringEncodingEUC_JP = 2336;
  static const int kCFStringEncodingEUC_CN = 2352;
  static const int kCFStringEncodingEUC_TW = 2353;
  static const int kCFStringEncodingEUC_KR = 2368;
  static const int kCFStringEncodingShiftJIS = 2561;
  static const int kCFStringEncodingKOI8_R = 2562;
  static const int kCFStringEncodingBig5 = 2563;
  static const int kCFStringEncodingMacRomanLatin1 = 2564;
  static const int kCFStringEncodingHZ_GB_2312 = 2565;
  static const int kCFStringEncodingBig5_HKSCS_1999 = 2566;
  static const int kCFStringEncodingVISCII = 2567;
  static const int kCFStringEncodingKOI8_U = 2568;
  static const int kCFStringEncodingBig5_E = 2569;
  static const int kCFStringEncodingNextStepJapanese = 2818;
  static const int kCFStringEncodingEBCDIC_US = 3073;
  static const int kCFStringEncodingEBCDIC_CP037 = 3074;
  static const int kCFStringEncodingUTF7 = 67109120;
  static const int kCFStringEncodingUTF7_IMAP = 2576;
  static const int kCFStringEncodingShiftJIS_X0213_00 = 1576;
}

class CFTreeContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFTreeRetainCallBack retain;

  external CFTreeReleaseCallBack release;

  external CFTreeCopyDescriptionCallBack copyDescription;
}

typedef CFTreeRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

class __CFTree extends ffi.Opaque {}

typedef CFTreeRef = ffi.Pointer<__CFTree>;
typedef CFTreeApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

abstract class CFURLError {
  static const int kCFURLUnknownError = -10;
  static const int kCFURLUnknownSchemeError = -11;
  static const int kCFURLResourceNotFoundError = -12;
  static const int kCFURLResourceAccessViolationError = -13;
  static const int kCFURLRemoteHostUnavailableError = -14;
  static const int kCFURLImproperArgumentsError = -15;
  static const int kCFURLUnknownPropertyKeyError = -16;
  static const int kCFURLPropertyKeyUnavailableError = -17;
  static const int kCFURLTimeoutError = -18;
}

class __CFUUID extends ffi.Opaque {}

class CFUUIDBytes extends ffi.Struct {
  @UInt8()
  external int byte0;

  @UInt8()
  external int byte1;

  @UInt8()
  external int byte2;

  @UInt8()
  external int byte3;

  @UInt8()
  external int byte4;

  @UInt8()
  external int byte5;

  @UInt8()
  external int byte6;

  @UInt8()
  external int byte7;

  @UInt8()
  external int byte8;

  @UInt8()
  external int byte9;

  @UInt8()
  external int byte10;

  @UInt8()
  external int byte11;

  @UInt8()
  external int byte12;

  @UInt8()
  external int byte13;

  @UInt8()
  external int byte14;

  @UInt8()
  external int byte15;
}

typedef CFUUIDRef = ffi.Pointer<__CFUUID>;

class __CFBundle extends ffi.Opaque {}

typedef CFBundleRef = ffi.Pointer<__CFBundle>;
typedef cpu_type_t = integer_t;
typedef integer_t = pkg_ffi.Int;
typedef CFPlugInRef = ffi.Pointer<__CFBundle>;
typedef CFBundleRefNum = pkg_ffi.Int;

class __CFMessagePort extends ffi.Opaque {}

class CFMessagePortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMessagePortRef = ffi.Pointer<__CFMessagePort>;
typedef CFMessagePortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(
            CFMessagePortRef, SInt32, CFDataRef, ffi.Pointer<ffi.Void>)>>;
typedef CFMessagePortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMessagePortRef, ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInFactoryFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef)>>;

class __CFPlugInInstance extends ffi.Opaque {}

typedef CFPlugInInstanceRef = ffi.Pointer<__CFPlugInInstance>;
typedef CFPlugInInstanceDeallocateInstanceDataFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInInstanceGetInterfaceFunction = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(CFPlugInInstanceRef, CFStringRef,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;

class __CFMachPort extends ffi.Opaque {}

class CFMachPortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMachPortRef = ffi.Pointer<__CFMachPort>;
typedef CFMachPortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>, CFIndex,
            ffi.Pointer<ffi.Void>)>>;
typedef CFMachPortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>)>>;

class __CFAttributedString extends ffi.Opaque {}

typedef CFAttributedStringRef = ffi.Pointer<__CFAttributedString>;
typedef CFMutableAttributedStringRef = ffi.Pointer<__CFAttributedString>;

class __CFURLEnumerator extends ffi.Opaque {}

abstract class CFURLEnumeratorOptions {
  static const int kCFURLEnumeratorDefaultBehavior = 0;
  static const int kCFURLEnumeratorDescendRecursively = 1;
  static const int kCFURLEnumeratorSkipInvisibles = 2;
  static const int kCFURLEnumeratorGenerateFileReferenceURLs = 4;
  static const int kCFURLEnumeratorSkipPackageContents = 8;
  static const int kCFURLEnumeratorIncludeDirectoriesPreOrder = 16;
  static const int kCFURLEnumeratorIncludeDirectoriesPostOrder = 32;
  static const int kCFURLEnumeratorGenerateRelativePathURLs = 64;
}

typedef CFURLEnumeratorRef = ffi.Pointer<__CFURLEnumerator>;

abstract class CFURLEnumeratorResult {
  static const int kCFURLEnumeratorSuccess = 1;
  static const int kCFURLEnumeratorEnd = 2;
  static const int kCFURLEnumeratorError = 3;
  static const int kCFURLEnumeratorDirectoryPostOrderSuccess = 4;
}

class __CFFileSecurity extends ffi.Opaque {}

typedef CFFileSecurityRef = ffi.Pointer<__CFFileSecurity>;
typedef acl_t = ffi.Pointer<_acl>;

class _acl extends ffi.Opaque {}

typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;
typedef __uint32_t = pkg_ffi.UnsignedInt;
typedef gid_t = __darwin_gid_t;
typedef __darwin_gid_t = __uint32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = pkg_ffi.UnsignedShort;

abstract class CFFileSecurityClearOptions {
  static const int kCFFileSecurityClearOwner = 1;
  static const int kCFFileSecurityClearGroup = 2;
  static const int kCFFileSecurityClearMode = 4;
  static const int kCFFileSecurityClearOwnerUUID = 8;
  static const int kCFFileSecurityClearGroupUUID = 16;
  static const int kCFFileSecurityClearAccessControlList = 32;
}

class __CFStringTokenizer extends ffi.Opaque {}

abstract class CFStringTokenizerTokenType {
  static const int kCFStringTokenizerTokenNone = 0;
  static const int kCFStringTokenizerTokenNormal = 1;
  static const int kCFStringTokenizerTokenHasSubTokensMask = 2;
  static const int kCFStringTokenizerTokenHasDerivedSubTokensMask = 4;
  static const int kCFStringTokenizerTokenHasHasNumbersMask = 8;
  static const int kCFStringTokenizerTokenHasNonLettersMask = 16;
  static const int kCFStringTokenizerTokenIsCJWordMask = 32;
}

typedef CFStringTokenizerRef = ffi.Pointer<__CFStringTokenizer>;

class __CFFileDescriptor extends ffi.Opaque {}

class CFFileDescriptorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFFileDescriptorRef = ffi.Pointer<__CFFileDescriptor>;
typedef CFFileDescriptorNativeDescriptor = pkg_ffi.Int;
typedef CFFileDescriptorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFFileDescriptorRef, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;

class __CFUserNotification extends ffi.Opaque {}

typedef CFUserNotificationRef = ffi.Pointer<__CFUserNotification>;
typedef CFUserNotificationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFUserNotificationRef, CFOptionFlags)>>;

class __CFXMLNode extends ffi.Opaque {}

abstract class CFXMLNodeTypeCode {
  static const int kCFXMLNodeTypeDocument = 1;
  static const int kCFXMLNodeTypeElement = 2;
  static const int kCFXMLNodeTypeAttribute = 3;
  static const int kCFXMLNodeTypeProcessingInstruction = 4;
  static const int kCFXMLNodeTypeComment = 5;
  static const int kCFXMLNodeTypeText = 6;
  static const int kCFXMLNodeTypeCDATASection = 7;
  static const int kCFXMLNodeTypeDocumentFragment = 8;
  static const int kCFXMLNodeTypeEntity = 9;
  static const int kCFXMLNodeTypeEntityReference = 10;
  static const int kCFXMLNodeTypeDocumentType = 11;
  static const int kCFXMLNodeTypeWhitespace = 12;
  static const int kCFXMLNodeTypeNotation = 13;
  static const int kCFXMLNodeTypeElementTypeDeclaration = 14;
  static const int kCFXMLNodeTypeAttributeListDeclaration = 15;
}

class CFXMLElementInfo extends ffi.Struct {
  external CFDictionaryRef attributes;

  external CFArrayRef attributeOrder;

  @Boolean()
  external int isEmpty;

  @ffi.Array.multi([3])
  external ffi.Array<pkg_ffi.Char> _reserved;
}

class CFXMLProcessingInstructionInfo extends ffi.Struct {
  external CFStringRef dataString;
}

class CFXMLDocumentInfo extends ffi.Struct {
  external CFURLRef sourceURL;

  @CFStringEncoding()
  external int encoding;
}

class CFXMLExternalID extends ffi.Struct {
  external CFURLRef systemID;

  external CFStringRef publicID;
}

class CFXMLDocumentTypeInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLNotationInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLElementTypeDeclarationInfo extends ffi.Struct {
  external CFStringRef contentDescription;
}

class CFXMLAttributeDeclarationInfo extends ffi.Struct {
  external CFStringRef attributeName;

  external CFStringRef typeString;

  external CFStringRef defaultString;
}

class CFXMLAttributeListDeclarationInfo extends ffi.Struct {
  @CFIndex()
  external int numberOfAttributes;

  external ffi.Pointer<CFXMLAttributeDeclarationInfo> attributes;
}

abstract class CFXMLEntityTypeCode {
  static const int kCFXMLEntityTypeParameter = 0;
  static const int kCFXMLEntityTypeParsedInternal = 1;
  static const int kCFXMLEntityTypeParsedExternal = 2;
  static const int kCFXMLEntityTypeUnparsed = 3;
  static const int kCFXMLEntityTypeCharacter = 4;
}

class CFXMLEntityInfo extends ffi.Struct {
  @ffi.Int32()
  external int entityType;

  external CFStringRef replacementText;

  external CFXMLExternalID entityID;

  external CFStringRef notationName;
}

class CFXMLEntityReferenceInfo extends ffi.Struct {
  @ffi.Int32()
  external int entityType;
}

typedef CFXMLNodeRef = ffi.Pointer<__CFXMLNode>;
typedef CFXMLTreeRef = CFTreeRef;

class __CFXMLParser extends ffi.Opaque {}

abstract class CFXMLParserOptions {
  static const int kCFXMLParserValidateDocument = 1;
  static const int kCFXMLParserSkipMetaData = 2;
  static const int kCFXMLParserReplacePhysicalEntities = 4;
  static const int kCFXMLParserSkipWhitespace = 8;
  static const int kCFXMLParserResolveExternalEntities = 16;
  static const int kCFXMLParserAddImpliedAttributes = 32;
  static const int kCFXMLParserAllOptions = 16777215;
  static const int kCFXMLParserNoOptions = 0;
}

abstract class CFXMLParserStatusCode {
  static const int kCFXMLStatusParseNotBegun = -2;
  static const int kCFXMLStatusParseInProgress = -1;
  static const int kCFXMLStatusParseSuccessful = 0;
  static const int kCFXMLErrorUnexpectedEOF = 1;
  static const int kCFXMLErrorUnknownEncoding = 2;
  static const int kCFXMLErrorEncodingConversionFailure = 3;
  static const int kCFXMLErrorMalformedProcessingInstruction = 4;
  static const int kCFXMLErrorMalformedDTD = 5;
  static const int kCFXMLErrorMalformedName = 6;
  static const int kCFXMLErrorMalformedCDSect = 7;
  static const int kCFXMLErrorMalformedCloseTag = 8;
  static const int kCFXMLErrorMalformedStartTag = 9;
  static const int kCFXMLErrorMalformedDocument = 10;
  static const int kCFXMLErrorElementlessDocument = 11;
  static const int kCFXMLErrorMalformedComment = 12;
  static const int kCFXMLErrorMalformedCharacterReference = 13;
  static const int kCFXMLErrorMalformedParsedCharacterData = 14;
  static const int kCFXMLErrorNoData = 15;
}

class CFXMLParserCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFXMLParserCreateXMLStructureCallBack createXMLStructure;

  external CFXMLParserAddChildCallBack addChild;

  external CFXMLParserEndXMLStructureCallBack endXMLStructure;

  external CFXMLParserResolveExternalEntityCallBack resolveExternalEntity;

  external CFXMLParserHandleErrorCallBack handleError;
}

typedef CFXMLParserCreateXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFXMLParserRef, CFXMLNodeRef, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserRef = ffi.Pointer<__CFXMLParser>;
typedef CFXMLParserAddChildCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFXMLParserRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserEndXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFXMLParserRef, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserResolveExternalEntityCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(CFXMLParserRef, ffi.Pointer<CFXMLExternalID>,
            ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserHandleErrorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(CFXMLParserRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class CFXMLParserContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFXMLParserRetainCallBack retain;

  external CFXMLParserReleaseCallBack release;

  external CFXMLParserCopyDescriptionCallBack copyDescription;
}

typedef CFXMLParserRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

abstract class SecTrustResultType {
  static const int kSecTrustResultInvalid = 0;
  static const int kSecTrustResultProceed = 1;
  static const int kSecTrustResultConfirm = 2;
  static const int kSecTrustResultDeny = 3;
  static const int kSecTrustResultUnspecified = 4;
  static const int kSecTrustResultRecoverableTrustFailure = 5;
  static const int kSecTrustResultFatalTrustFailure = 6;
  static const int kSecTrustResultOtherError = 7;
}

class __SecTrust extends ffi.Opaque {}

typedef SecTrustRef = ffi.Pointer<__SecTrust>;
typedef SecTrustCallback = ffi.Pointer<ObjCObject>;
typedef SecTrustWithErrorCallback = ffi.Pointer<ObjCObject>;
typedef SecKeyRef = ffi.Pointer<__SecKey>;
typedef SecCertificateRef = ffi.Pointer<__SecCertificate>;

class cssm_data extends ffi.Struct {
  @pkg_ffi.Size()
  external int Length;

  external ffi.Pointer<ffi.Uint8> Data;
}

class SecAsn1AlgId extends ffi.Struct {
  external SecAsn1Oid algorithm;

  external SecAsn1Item parameters;
}

typedef SecAsn1Oid = cssm_data;
typedef SecAsn1Item = cssm_data;

class SecAsn1PubKeyInfo extends ffi.Struct {
  external SecAsn1AlgId algorithm;

  external SecAsn1Item subjectPublicKey;
}

class SecAsn1Template_struct extends ffi.Struct {
  @ffi.Uint32()
  external int kind;

  @ffi.Uint32()
  external int offset;

  external ffi.Pointer<ffi.Void> sub;

  @ffi.Uint32()
  external int size;
}

class cssm_guid extends ffi.Struct {
  @uint32()
  external int Data1;

  @uint16()
  external int Data2;

  @uint16()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<uint8> Data4;
}

typedef uint32 = ffi.Uint32;
typedef uint16 = ffi.Uint16;
typedef uint8 = ffi.Uint8;

class cssm_version extends ffi.Struct {
  @uint32()
  external int Major;

  @uint32()
  external int Minor;
}

class cssm_subservice_uid extends ffi.Struct {
  external CSSM_GUID Guid;

  external CSSM_VERSION Version;

  @uint32()
  external int SubserviceId;

  @CSSM_SERVICE_TYPE()
  external int SubserviceType;
}

typedef CSSM_GUID = cssm_guid;
typedef CSSM_VERSION = cssm_version;
typedef CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;
typedef CSSM_SERVICE_MASK = uint32;

class cssm_net_address extends ffi.Struct {
  @CSSM_NET_ADDRESS_TYPE()
  external int AddressType;

  external SecAsn1Item Address;
}

typedef CSSM_NET_ADDRESS_TYPE = uint32;

class cssm_crypto_data extends ffi.Struct {
  external SecAsn1Item Param;

  external CSSM_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(CSSM_DATA_PTR, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_RETURN = sint32;
typedef sint32 = ffi.Int32;
typedef CSSM_DATA_PTR = ffi.Pointer<SecAsn1Item>;

class cssm_list_element extends ffi.Struct {
  external ffi.Pointer<cssm_list_element> NextElement;

  @CSSM_WORDID_TYPE()
  external int WordID;

  @CSSM_LIST_ELEMENT_TYPE()
  external int ElementType;

  external UnnamedUnion1 Element;
}

typedef CSSM_WORDID_TYPE = sint32;
typedef CSSM_LIST_ELEMENT_TYPE = uint32;

class UnnamedUnion1 extends ffi.Union {
  external CSSM_LIST Sublist;

  external SecAsn1Item Word;
}

typedef CSSM_LIST = cssm_list;

class cssm_list extends ffi.Struct {
  @CSSM_LIST_TYPE()
  external int ListType;

  external CSSM_LIST_ELEMENT_PTR Head;

  external CSSM_LIST_ELEMENT_PTR Tail;
}

typedef CSSM_LIST_TYPE = uint32;
typedef CSSM_LIST_ELEMENT_PTR = ffi.Pointer<cssm_list_element>;

class CSSM_TUPLE extends ffi.Struct {
  external CSSM_LIST Issuer;

  external CSSM_LIST Subject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_LIST AuthorizationTag;

  external CSSM_LIST ValidityPeriod;
}

typedef CSSM_BOOL = sint32;

class cssm_tuplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfTuples;

  external CSSM_TUPLE_PTR Tuples;
}

typedef CSSM_TUPLE_PTR = ffi.Pointer<CSSM_TUPLE>;

class cssm_sample extends ffi.Struct {
  external CSSM_LIST TypedSample;

  external ffi.Pointer<CSSM_SUBSERVICE_UID> Verifier;
}

typedef CSSM_SUBSERVICE_UID = cssm_subservice_uid;

class cssm_samplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfSamples;

  external ffi.Pointer<CSSM_SAMPLE> Samples;
}

typedef CSSM_SAMPLE = cssm_sample;

class cssm_memory_funcs extends ffi.Struct {
  external CSSM_MALLOC malloc_func;

  external CSSM_FREE free_func;

  external CSSM_REALLOC realloc_func;

  external CSSM_CALLOC calloc_func;

  external ffi.Pointer<ffi.Void> AllocRef;
}

typedef CSSM_MALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_SIZE = pkg_ffi.Size;
typedef CSSM_FREE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_REALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_CALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            uint32, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;

class cssm_encoded_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  external SecAsn1Item CertBlob;
}

typedef CSSM_CERT_TYPE = uint32;
typedef CSSM_CERT_ENCODING = uint32;

class cssm_parsed_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_PARSE_FORMAT()
  external int ParsedCertFormat;

  external ffi.Pointer<ffi.Void> ParsedCert;
}

typedef CSSM_CERT_PARSE_FORMAT = uint32;

class cssm_cert_pair extends ffi.Struct {
  external CSSM_ENCODED_CERT EncodedCert;

  external CSSM_PARSED_CERT ParsedCert;
}

typedef CSSM_ENCODED_CERT = cssm_encoded_cert;
typedef CSSM_PARSED_CERT = cssm_parsed_cert;

class cssm_certgroup extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  @uint32()
  external int NumCerts;

  external UnnamedUnion2 GroupList;

  @CSSM_CERTGROUP_TYPE()
  external int CertGroupType;

  external ffi.Pointer<ffi.Void> Reserved;
}

class UnnamedUnion2 extends ffi.Union {
  external CSSM_DATA_PTR CertList;

  external CSSM_ENCODED_CERT_PTR EncodedCertList;

  external CSSM_PARSED_CERT_PTR ParsedCertList;

  external CSSM_CERT_PAIR_PTR PairCertList;
}

typedef CSSM_ENCODED_CERT_PTR = ffi.Pointer<cssm_encoded_cert>;
typedef CSSM_PARSED_CERT_PTR = ffi.Pointer<cssm_parsed_cert>;
typedef CSSM_CERT_PAIR_PTR = ffi.Pointer<cssm_cert_pair>;
typedef CSSM_CERTGROUP_TYPE = uint32;

class cssm_base_certs extends ffi.Struct {
  @CSSM_TP_HANDLE()
  external int TPHandle;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_CERTGROUP Certs;
}

typedef CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_MODULE_HANDLE = CSSM_HANDLE;
typedef CSSM_HANDLE = CSSM_INTPTR;
typedef CSSM_INTPTR = ffi.IntPtr;
typedef CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_CERTGROUP = cssm_certgroup;

class cssm_access_credentials extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> EntryTag;

  external CSSM_BASE_CERTS BaseCerts;

  external CSSM_SAMPLEGROUP Samples;

  external CSSM_CHALLENGE_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_BASE_CERTS = cssm_base_certs;
typedef CSSM_SAMPLEGROUP = cssm_samplegroup;
typedef CSSM_CHALLENGE_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(ffi.Pointer<CSSM_LIST>, CSSM_SAMPLEGROUP_PTR,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CSSM_MEMORY_FUNCS>)>>;
typedef CSSM_SAMPLEGROUP_PTR = ffi.Pointer<cssm_samplegroup>;
typedef CSSM_MEMORY_FUNCS = cssm_memory_funcs;

class cssm_authorizationgroup extends ffi.Struct {
  @uint32()
  external int NumberOfAuthTags;

  external ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG> AuthTags;
}

typedef CSSM_ACL_AUTHORIZATION_TAG = sint32;

class cssm_acl_validity_period extends ffi.Struct {
  external SecAsn1Item StartDate;

  external SecAsn1Item EndDate;
}

class cssm_acl_entry_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_AUTHORIZATIONGROUP Authorization;

  external CSSM_ACL_VALIDITY_PERIOD TimeRange;

  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> EntryTag;
}

typedef CSSM_AUTHORIZATIONGROUP = cssm_authorizationgroup;
typedef CSSM_ACL_VALIDITY_PERIOD = cssm_acl_validity_period;

class cssm_acl_owner_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;
}

class cssm_acl_entry_input extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE Prototype;

  external CSSM_ACL_SUBJECT_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerContext;
}

typedef CSSM_ACL_ENTRY_PROTOTYPE = cssm_acl_entry_prototype;
typedef CSSM_ACL_SUBJECT_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(ffi.Pointer<CSSM_LIST>, CSSM_LIST_PTR,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CSSM_MEMORY_FUNCS>)>>;
typedef CSSM_LIST_PTR = ffi.Pointer<cssm_list>;

class cssm_resource_control_context extends ffi.Struct {
  external CSSM_ACCESS_CREDENTIALS_PTR AccessCred;

  external CSSM_ACL_ENTRY_INPUT InitialAclEntry;
}

typedef CSSM_ACCESS_CREDENTIALS_PTR = ffi.Pointer<cssm_access_credentials>;
typedef CSSM_ACL_ENTRY_INPUT = cssm_acl_entry_input;

class cssm_acl_entry_info extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE EntryPublicInfo;

  @CSSM_ACL_HANDLE()
  external int EntryHandle;
}

typedef CSSM_ACL_HANDLE = CSSM_HANDLE;

class cssm_acl_edit extends ffi.Struct {
  @CSSM_ACL_EDIT_MODE()
  external int EditMode;

  @CSSM_ACL_HANDLE()
  external int OldEntryHandle;

  external ffi.Pointer<CSSM_ACL_ENTRY_INPUT> NewEntry;
}

typedef CSSM_ACL_EDIT_MODE = uint32;

class cssm_func_name_addr extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> Name;

  external CSSM_PROC_ADDR Address;
}

typedef CSSM_PROC_ADDR = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

class cssm_date extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<uint8> Year;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Month;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Day;
}

class cssm_range extends ffi.Struct {
  @uint32()
  external int Min;

  @uint32()
  external int Max;
}

class cssm_query_size_data extends ffi.Struct {
  @uint32()
  external int SizeInputBlock;

  @uint32()
  external int SizeOutputBlock;
}

class cssm_key_size extends ffi.Struct {
  @uint32()
  external int LogicalKeySizeInBits;

  @uint32()
  external int EffectiveKeySizeInBits;
}

class cssm_keyheader extends ffi.Struct {
  @CSSM_HEADERVERSION()
  external int HeaderVersion;

  external CSSM_GUID CspId;

  @CSSM_KEYBLOB_TYPE()
  external int BlobType;

  @CSSM_KEYBLOB_FORMAT()
  external int Format;

  @CSSM_ALGORITHMS()
  external int AlgorithmId;

  @CSSM_KEYCLASS()
  external int KeyClass;

  @uint32()
  external int LogicalKeySizeInBits;

  @CSSM_KEYATTR_FLAGS()
  external int KeyAttr;

  @CSSM_KEYUSE()
  external int KeyUsage;

  external CSSM_DATE StartDate;

  external CSSM_DATE EndDate;

  @CSSM_ALGORITHMS()
  external int WrapAlgorithmId;

  @CSSM_ENCRYPT_MODE()
  external int WrapMode;

  @uint32()
  external int Reserved;
}

typedef CSSM_HEADERVERSION = uint32;
typedef CSSM_KEYBLOB_TYPE = uint32;
typedef CSSM_KEYBLOB_FORMAT = uint32;
typedef CSSM_ALGORITHMS = uint32;
typedef CSSM_KEYCLASS = uint32;
typedef CSSM_KEYATTR_FLAGS = uint32;
typedef CSSM_KEYUSE = uint32;
typedef CSSM_DATE = cssm_date;
typedef CSSM_ENCRYPT_MODE = uint32;

class cssm_key extends ffi.Struct {
  external CSSM_KEYHEADER KeyHeader;

  external SecAsn1Item KeyData;
}

typedef CSSM_KEYHEADER = cssm_keyheader;

class cssm_dl_db_handle extends ffi.Struct {
  @CSSM_DL_HANDLE()
  external int DLHandle;

  @CSSM_DB_HANDLE()
  external int DBHandle;
}

typedef CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;

class cssm_context_attribute extends ffi.Struct {
  @CSSM_ATTRIBUTE_TYPE()
  external int AttributeType;

  @uint32()
  external int AttributeLength;

  external cssm_context_attribute_value Attribute;
}

typedef CSSM_ATTRIBUTE_TYPE = uint32;

class cssm_context_attribute_value extends ffi.Union {
  external ffi.Pointer<pkg_ffi.Char> String;

  @uint32()
  external int Uint32;

  external CSSM_ACCESS_CREDENTIALS_PTR AccessCredentials;

  external CSSM_KEY_PTR Key;

  external CSSM_DATA_PTR Data;

  @CSSM_PADDING()
  external int Padding;

  external CSSM_DATE_PTR Date;

  external CSSM_RANGE_PTR Range;

  external CSSM_CRYPTO_DATA_PTR CryptoData;

  external CSSM_VERSION_PTR Version;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;

  external ffi.Pointer<cssm_kr_profile> KRProfile;
}

typedef CSSM_KEY_PTR = ffi.Pointer<cssm_key>;
typedef CSSM_PADDING = uint32;
typedef CSSM_DATE_PTR = ffi.Pointer<cssm_date>;
typedef CSSM_RANGE_PTR = ffi.Pointer<cssm_range>;
typedef CSSM_CRYPTO_DATA_PTR = ffi.Pointer<cssm_crypto_data>;
typedef CSSM_VERSION_PTR = ffi.Pointer<cssm_version>;
typedef CSSM_DL_DB_HANDLE_PTR = ffi.Pointer<cssm_dl_db_handle>;

class cssm_kr_profile extends ffi.Opaque {}

class cssm_context extends ffi.Struct {
  @CSSM_CONTEXT_TYPE()
  external int ContextType;

  @CSSM_ALGORITHMS()
  external int AlgorithmType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_CONTEXT_ATTRIBUTE_PTR ContextAttributes;

  @CSSM_CSP_HANDLE()
  external int CSPHandle;

  @CSSM_BOOL()
  external int Privileged;

  @uint32()
  external int EncryptionProhibited;

  @uint32()
  external int WorkFactor;

  @uint32()
  external int Reserved;
}

typedef CSSM_CONTEXT_TYPE = uint32;
typedef CSSM_CONTEXT_ATTRIBUTE_PTR = ffi.Pointer<cssm_context_attribute>;
typedef CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;

class cssm_pkcs1_oaep_params extends ffi.Struct {
  @uint32()
  external int HashAlgorithm;

  external SecAsn1Item HashParams;

  @CSSM_PKCS_OAEP_MGF()
  external int MGF;

  external SecAsn1Item MGFParams;

  @CSSM_PKCS_OAEP_PSOURCE()
  external int PSource;

  external SecAsn1Item PSourceParams;
}

typedef CSSM_PKCS_OAEP_MGF = uint32;
typedef CSSM_PKCS_OAEP_PSOURCE = uint32;

class cssm_csp_operational_statistics extends ffi.Struct {
  @CSSM_BOOL()
  external int UserAuthenticated;

  @CSSM_CSP_FLAGS()
  external int DeviceFlags;

  @uint32()
  external int TokenMaxSessionCount;

  @uint32()
  external int TokenOpenedSessionCount;

  @uint32()
  external int TokenMaxRWSessionCount;

  @uint32()
  external int TokenOpenedRWSessionCount;

  @uint32()
  external int TokenTotalPublicMem;

  @uint32()
  external int TokenFreePublicMem;

  @uint32()
  external int TokenTotalPrivateMem;

  @uint32()
  external int TokenFreePrivateMem;
}

typedef CSSM_CSP_FLAGS = uint32;

class cssm_pkcs5_pbkdf1_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  external SecAsn1Item InitVector;
}

class cssm_pkcs5_pbkdf2_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  @CSSM_PKCS5_PBKDF2_PRF()
  external int PseudoRandomFunction;
}

typedef CSSM_PKCS5_PBKDF2_PRF = uint32;

class cssm_kea_derive_params extends ffi.Struct {
  external SecAsn1Item Rb;

  external SecAsn1Item Yb;
}

class cssm_tp_authority_id extends ffi.Struct {
  external ffi.Pointer<SecAsn1Item> AuthorityCert;

  external CSSM_NET_ADDRESS_PTR AuthorityLocation;
}

typedef CSSM_NET_ADDRESS_PTR = ffi.Pointer<cssm_net_address>;

class cssm_field extends ffi.Struct {
  external SecAsn1Oid FieldOid;

  external SecAsn1Item FieldValue;
}

class cssm_tp_policyinfo extends ffi.Struct {
  @uint32()
  external int NumberOfPolicyIds;

  external CSSM_FIELD_PTR PolicyIds;

  external ffi.Pointer<ffi.Void> PolicyControl;
}

typedef CSSM_FIELD_PTR = ffi.Pointer<cssm_field>;

class cssm_dl_db_list extends ffi.Struct {
  @uint32()
  external int NumHandles;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;
}

class cssm_tp_callerauth_context extends ffi.Struct {
  external CSSM_TP_POLICYINFO Policy;

  external CSSM_TIMESTRING VerifyTime;

  @CSSM_TP_STOP_ON()
  external int VerificationAbortOn;

  external CSSM_TP_VERIFICATION_RESULTS_CALLBACK CallbackWithVerifiedCert;

  @uint32()
  external int NumberOfAnchorCerts;

  external CSSM_DATA_PTR AnchorCerts;

  external CSSM_DL_DB_LIST_PTR DBList;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_POLICYINFO = cssm_tp_policyinfo;
typedef CSSM_TIMESTRING = ffi.Pointer<pkg_ffi.Char>;
typedef CSSM_TP_STOP_ON = uint32;
typedef CSSM_TP_VERIFICATION_RESULTS_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(
            CSSM_MODULE_HANDLE, ffi.Pointer<ffi.Void>, CSSM_DATA_PTR)>>;
typedef CSSM_DL_DB_LIST_PTR = ffi.Pointer<cssm_dl_db_list>;

class cssm_encoded_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  external SecAsn1Item CrlBlob;
}

typedef CSSM_CRL_TYPE = uint32;
typedef CSSM_CRL_ENCODING = uint32;

class cssm_parsed_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_PARSE_FORMAT()
  external int ParsedCrlFormat;

  external ffi.Pointer<ffi.Void> ParsedCrl;
}

typedef CSSM_CRL_PARSE_FORMAT = uint32;

class cssm_crl_pair extends ffi.Struct {
  external CSSM_ENCODED_CRL EncodedCrl;

  external CSSM_PARSED_CRL ParsedCrl;
}

typedef CSSM_ENCODED_CRL = cssm_encoded_crl;
typedef CSSM_PARSED_CRL = cssm_parsed_crl;

class cssm_crlgroup extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  @uint32()
  external int NumberOfCrls;

  external UnnamedUnion3 GroupCrlList;

  @CSSM_CRLGROUP_TYPE()
  external int CrlGroupType;
}

class UnnamedUnion3 extends ffi.Union {
  external CSSM_DATA_PTR CrlList;

  external CSSM_ENCODED_CRL_PTR EncodedCrlList;

  external CSSM_PARSED_CRL_PTR ParsedCrlList;

  external CSSM_CRL_PAIR_PTR PairCrlList;
}

typedef CSSM_ENCODED_CRL_PTR = ffi.Pointer<cssm_encoded_crl>;
typedef CSSM_PARSED_CRL_PTR = ffi.Pointer<cssm_parsed_crl>;
typedef CSSM_CRL_PAIR_PTR = ffi.Pointer<cssm_crl_pair>;
typedef CSSM_CRLGROUP_TYPE = uint32;

class cssm_fieldgroup extends ffi.Struct {
  @pkg_ffi.Int()
  external int NumberOfFields;

  external CSSM_FIELD_PTR Fields;
}

class cssm_evidence extends ffi.Struct {
  @CSSM_EVIDENCE_FORM()
  external int EvidenceForm;

  external ffi.Pointer<ffi.Void> Evidence;
}

typedef CSSM_EVIDENCE_FORM = uint32;

class cssm_tp_verify_context extends ffi.Struct {
  @CSSM_TP_ACTION()
  external int Action;

  external SecAsn1Item ActionData;

  external CSSM_CRLGROUP Crls;

  external CSSM_TP_CALLERAUTH_CONTEXT_PTR Cred;
}

typedef CSSM_TP_ACTION = uint32;
typedef CSSM_CRLGROUP = cssm_crlgroup;
typedef CSSM_TP_CALLERAUTH_CONTEXT_PTR
    = ffi.Pointer<cssm_tp_callerauth_context>;

class cssm_tp_verify_context_result extends ffi.Struct {
  @uint32()
  external int NumberOfEvidences;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_EVIDENCE_PTR = ffi.Pointer<cssm_evidence>;

class cssm_tp_request_set extends ffi.Struct {
  @uint32()
  external int NumberOfRequests;

  external ffi.Pointer<ffi.Void> Requests;
}

class cssm_tp_result_set extends ffi.Struct {
  @uint32()
  external int NumberOfResults;

  external ffi.Pointer<ffi.Void> Results;
}

class cssm_tp_confirm_response extends ffi.Struct {
  @uint32()
  external int NumberOfResponses;

  external CSSM_TP_CONFIRM_STATUS_PTR Responses;
}

typedef CSSM_TP_CONFIRM_STATUS_PTR = ffi.Pointer<uint32>;

class cssm_tp_certissue_input extends ffi.Struct {
  external CSSM_SUBSERVICE_UID CSPSubserviceUid;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfTemplateFields;

  external CSSM_FIELD_PTR SubjectCertFields;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

typedef CSSM_TP_SERVICES = uint32;

class cssm_tp_certissue_output extends ffi.Struct {
  @CSSM_TP_CERTISSUE_STATUS()
  external int IssueStatus;

  external CSSM_CERTGROUP_PTR CertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTISSUE_STATUS = uint32;
typedef CSSM_CERTGROUP_PTR = ffi.Pointer<cssm_certgroup>;

class cssm_tp_certchange_input extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_ACTION()
  external int Action;

  @CSSM_TP_CERTCHANGE_REASON()
  external int Reason;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_FIELD_PTR ChangeInfo;

  external CSSM_TIMESTRING StartTime;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_CERTCHANGE_ACTION = uint32;
typedef CSSM_TP_CERTCHANGE_REASON = uint32;

class cssm_tp_certchange_output extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_STATUS()
  external int ActionStatus;

  external CSSM_FIELD RevokeInfo;
}

typedef CSSM_TP_CERTCHANGE_STATUS = uint32;
typedef CSSM_FIELD = cssm_field;

class cssm_tp_certverify_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_TP_VERIFY_CONTEXT_PTR VerifyContext;
}

typedef CSSM_TP_VERIFY_CONTEXT_PTR = ffi.Pointer<cssm_tp_verify_context>;

class cssm_tp_certverify_output extends ffi.Struct {
  @CSSM_TP_CERTVERIFY_STATUS()
  external int VerifyStatus;

  @uint32()
  external int NumberOfEvidence;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_TP_CERTVERIFY_STATUS = uint32;

class cssm_tp_certnotarize_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfFields;

  external CSSM_FIELD_PTR MoreFields;

  external CSSM_FIELD_PTR SignScope;

  @uint32()
  external int ScopeSize;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

class cssm_tp_certnotarize_output extends ffi.Struct {
  @CSSM_TP_CERTNOTARIZE_STATUS()
  external int NotarizeStatus;

  external CSSM_CERTGROUP_PTR NotarizedCertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTNOTARIZE_STATUS = uint32;

class cssm_tp_certreclaim_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfSelectionFields;

  external CSSM_FIELD_PTR SelectionFields;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

class cssm_tp_certreclaim_output extends ffi.Struct {
  @CSSM_TP_CERTRECLAIM_STATUS()
  external int ReclaimStatus;

  external CSSM_CERTGROUP_PTR ReclaimedCertGroup;

  @CSSM_LONG_HANDLE()
  external int KeyCacheHandle;
}

typedef CSSM_TP_CERTRECLAIM_STATUS = uint32;
typedef CSSM_LONG_HANDLE = uint64;
typedef uint64 = ffi.Uint64;

class cssm_tp_crlissue_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int CrlIdentifier;

  external CSSM_TIMESTRING CrlThisTime;

  external CSSM_FIELD_PTR PolicyIdentifier;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

class cssm_tp_crlissue_output extends ffi.Struct {
  @CSSM_TP_CRLISSUE_STATUS()
  external int IssueStatus;

  external CSSM_ENCODED_CRL_PTR Crl;

  external CSSM_TIMESTRING CrlNextTime;
}

typedef CSSM_TP_CRLISSUE_STATUS = uint32;

class cssm_cert_bundle_header extends ffi.Struct {
  @CSSM_CERT_BUNDLE_TYPE()
  external int BundleType;

  @CSSM_CERT_BUNDLE_ENCODING()
  external int BundleEncoding;
}

typedef CSSM_CERT_BUNDLE_TYPE = uint32;
typedef CSSM_CERT_BUNDLE_ENCODING = uint32;

class cssm_cert_bundle extends ffi.Struct {
  external CSSM_CERT_BUNDLE_HEADER BundleHeader;

  external SecAsn1Item Bundle;
}

typedef CSSM_CERT_BUNDLE_HEADER = cssm_cert_bundle_header;

class cssm_db_attribute_info extends ffi.Struct {
  @CSSM_DB_ATTRIBUTE_NAME_FORMAT()
  external int AttributeNameFormat;

  external cssm_db_attribute_label Label;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int AttributeFormat;
}

typedef CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;

class cssm_db_attribute_label extends ffi.Union {
  external ffi.Pointer<pkg_ffi.Char> AttributeName;

  external SecAsn1Oid AttributeOID;

  @uint32()
  external int AttributeID;
}

typedef CSSM_DB_ATTRIBUTE_FORMAT = uint32;

class cssm_db_attribute_data extends ffi.Struct {
  external CSSM_DB_ATTRIBUTE_INFO Info;

  @uint32()
  external int NumberOfValues;

  external CSSM_DATA_PTR Value;
}

typedef CSSM_DB_ATTRIBUTE_INFO = cssm_db_attribute_info;

class cssm_db_record_attribute_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_INFO_PTR AttributeInfo;
}

typedef CSSM_DB_RECORDTYPE = uint32;
typedef CSSM_DB_ATTRIBUTE_INFO_PTR = ffi.Pointer<cssm_db_attribute_info>;

class cssm_db_record_attribute_data extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int SemanticInformation;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_DATA_PTR AttributeData;
}

typedef CSSM_DB_ATTRIBUTE_DATA_PTR = ffi.Pointer<cssm_db_attribute_data>;

class cssm_db_parsing_module_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  external CSSM_SUBSERVICE_UID ModuleSubserviceUid;
}

class cssm_db_index_info extends ffi.Struct {
  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;

  external CSSM_DB_ATTRIBUTE_INFO Info;
}

typedef CSSM_DB_INDEX_TYPE = uint32;
typedef CSSM_DB_INDEXED_DATA_LOCATION = uint32;

class cssm_db_unique_record extends ffi.Struct {
  external CSSM_DB_INDEX_INFO RecordLocator;

  external SecAsn1Item RecordIdentifier;
}

typedef CSSM_DB_INDEX_INFO = cssm_db_index_info;

class cssm_db_record_index_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfIndexes;

  external CSSM_DB_INDEX_INFO_PTR IndexInfo;
}

typedef CSSM_DB_INDEX_INFO_PTR = ffi.Pointer<cssm_db_index_info>;

class cssm_dbinfo extends ffi.Struct {
  @uint32()
  external int NumberOfRecordTypes;

  external CSSM_DB_PARSING_MODULE_INFO_PTR DefaultParsingModules;

  external CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR RecordAttributeNames;

  external CSSM_DB_RECORD_INDEX_INFO_PTR RecordIndexes;

  @CSSM_BOOL()
  external int IsLocal;

  external ffi.Pointer<pkg_ffi.Char> AccessPath;

  external ffi.Pointer<ffi.Void> Reserved;
}

typedef CSSM_DB_PARSING_MODULE_INFO_PTR
    = ffi.Pointer<cssm_db_parsing_module_info>;
typedef CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR
    = ffi.Pointer<cssm_db_record_attribute_info>;
typedef CSSM_DB_RECORD_INDEX_INFO_PTR = ffi.Pointer<cssm_db_record_index_info>;

class cssm_selection_predicate extends ffi.Struct {
  @CSSM_DB_OPERATOR()
  external int DbOperator;

  external CSSM_DB_ATTRIBUTE_DATA Attribute;
}

typedef CSSM_DB_OPERATOR = uint32;
typedef CSSM_DB_ATTRIBUTE_DATA = cssm_db_attribute_data;

class cssm_query_limits extends ffi.Struct {
  @uint32()
  external int TimeLimit;

  @uint32()
  external int SizeLimit;
}

class cssm_query extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  @CSSM_DB_CONJUNCTIVE()
  external int Conjunctive;

  @uint32()
  external int NumSelectionPredicates;

  external CSSM_SELECTION_PREDICATE_PTR SelectionPredicate;

  external CSSM_QUERY_LIMITS QueryLimits;

  @CSSM_QUERY_FLAGS()
  external int QueryFlags;
}

typedef CSSM_DB_CONJUNCTIVE = uint32;
typedef CSSM_SELECTION_PREDICATE_PTR = ffi.Pointer<cssm_selection_predicate>;
typedef CSSM_QUERY_LIMITS = cssm_query_limits;
typedef CSSM_QUERY_FLAGS = uint32;

class cssm_dl_pkcs11_attributes extends ffi.Struct {
  @uint32()
  external int DeviceAccessFlags;
}

class cssm_name_list extends ffi.Struct {
  @uint32()
  external int NumStrings;

  external ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> String;
}

class cssm_db_schema_attribute_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  external ffi.Pointer<pkg_ffi.Char> AttributeName;

  external SecAsn1Oid AttributeNameID;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int DataType;
}

class cssm_db_schema_index_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  @uint32()
  external int IndexId;

  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;
}

class cssm_x509_type_value_pair extends ffi.Struct {
  external SecAsn1Oid type;

  @CSSM_BER_TAG()
  external int valueType;

  external SecAsn1Item value;
}

typedef CSSM_BER_TAG = uint8;

class cssm_x509_rdn extends ffi.Struct {
  @uint32()
  external int numberOfPairs;

  external CSSM_X509_TYPE_VALUE_PAIR_PTR AttributeTypeAndValue;
}

typedef CSSM_X509_TYPE_VALUE_PAIR_PTR = ffi.Pointer<cssm_x509_type_value_pair>;

class cssm_x509_name extends ffi.Struct {
  @uint32()
  external int numberOfRDNs;

  external CSSM_X509_RDN_PTR RelativeDistinguishedName;
}

typedef CSSM_X509_RDN_PTR = ffi.Pointer<cssm_x509_rdn>;

class cssm_x509_time extends ffi.Struct {
  @CSSM_BER_TAG()
  external int timeType;

  external SecAsn1Item time;
}

class x509_validity extends ffi.Struct {
  external CSSM_X509_TIME notBefore;

  external CSSM_X509_TIME notAfter;
}

typedef CSSM_X509_TIME = cssm_x509_time;

class cssm_x509ext_basicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_X509_OPTION()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

typedef CSSM_X509_OPTION = CSSM_BOOL;

abstract class extension_data_format {
  static const int CSSM_X509_DATAFORMAT_ENCODED = 0;
  static const int CSSM_X509_DATAFORMAT_PARSED = 1;
  static const int CSSM_X509_DATAFORMAT_PAIR = 2;
}

class cssm_x509_extensionTagAndValue extends ffi.Struct {
  @CSSM_BER_TAG()
  external int type;

  external SecAsn1Item value;
}

class cssm_x509ext_pair extends ffi.Struct {
  external CSSM_X509EXT_TAGandVALUE tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;
}

typedef CSSM_X509EXT_TAGandVALUE = cssm_x509_extensionTagAndValue;

class cssm_x509_extension extends ffi.Struct {
  external SecAsn1Oid extnId;

  @CSSM_BOOL()
  external int critical;

  @ffi.Int32()
  external int format;

  external cssm_x509ext_value value;

  external SecAsn1Item BERvalue;
}

class cssm_x509ext_value extends ffi.Union {
  external ffi.Pointer<CSSM_X509EXT_TAGandVALUE> tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;

  external ffi.Pointer<CSSM_X509EXT_PAIR> valuePair;
}

typedef CSSM_X509EXT_PAIR = cssm_x509ext_pair;

class cssm_x509_extensions extends ffi.Struct {
  @uint32()
  external int numberOfExtensions;

  external CSSM_X509_EXTENSION_PTR extensions;
}

typedef CSSM_X509_EXTENSION_PTR = ffi.Pointer<cssm_x509_extension>;

class cssm_x509_tbs_certificate extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1Item serialNumber;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_VALIDITY validity;

  external CSSM_X509_NAME subject;

  external SecAsn1PubKeyInfo subjectPublicKeyInfo;

  external SecAsn1Item issuerUniqueIdentifier;

  external SecAsn1Item subjectUniqueIdentifier;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_NAME = cssm_x509_name;
typedef CSSM_X509_VALIDITY = x509_validity;
typedef CSSM_X509_EXTENSIONS = cssm_x509_extensions;

class cssm_x509_signature extends ffi.Struct {
  external SecAsn1AlgId algorithmIdentifier;

  external SecAsn1Item encrypted;
}

class cssm_x509_signed_certificate extends ffi.Struct {
  external CSSM_X509_TBS_CERTIFICATE certificate;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTIFICATE = cssm_x509_tbs_certificate;
typedef CSSM_X509_SIGNATURE = cssm_x509_signature;

class cssm_x509ext_policyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item value;
}

class cssm_x509ext_policyQualifiers extends ffi.Struct {
  @uint32()
  external int numberOfPolicyQualifiers;

  external ffi.Pointer<CSSM_X509EXT_POLICYQUALIFIERINFO> policyQualifier;
}

typedef CSSM_X509EXT_POLICYQUALIFIERINFO = cssm_x509ext_policyQualifierInfo;

class cssm_x509ext_policyInfo extends ffi.Struct {
  external SecAsn1Oid policyIdentifier;

  external CSSM_X509EXT_POLICYQUALIFIERS policyQualifiers;
}

typedef CSSM_X509EXT_POLICYQUALIFIERS = cssm_x509ext_policyQualifiers;

class cssm_x509_revoked_cert_entry extends ffi.Struct {
  external SecAsn1Item certificateSerialNumber;

  external CSSM_X509_TIME revocationDate;

  external CSSM_X509_EXTENSIONS extensions;
}

class cssm_x509_revoked_cert_list extends ffi.Struct {
  @uint32()
  external int numberOfRevokedCertEntries;

  external CSSM_X509_REVOKED_CERT_ENTRY_PTR revokedCertEntry;
}

typedef CSSM_X509_REVOKED_CERT_ENTRY_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_entry>;

class cssm_x509_tbs_certlist extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_TIME thisUpdate;

  external CSSM_X509_TIME nextUpdate;

  external CSSM_X509_REVOKED_CERT_LIST_PTR revokedCertificates;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_REVOKED_CERT_LIST_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_list>;

class cssm_x509_signed_crl extends ffi.Struct {
  external CSSM_X509_TBS_CERTLIST tbsCertList;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTLIST = cssm_x509_tbs_certlist;

abstract class __CE_GeneralNameType {
  static const int GNT_OtherName = 0;
  static const int GNT_RFC822Name = 1;
  static const int GNT_DNSName = 2;
  static const int GNT_X400Address = 3;
  static const int GNT_DirectoryName = 4;
  static const int GNT_EdiPartyName = 5;
  static const int GNT_URI = 6;
  static const int GNT_IPAddress = 7;
  static const int GNT_RegisteredID = 8;
}

class __CE_OtherName extends ffi.Struct {
  external SecAsn1Oid typeId;

  external SecAsn1Item value;
}

class __CE_GeneralName extends ffi.Struct {
  @ffi.Int32()
  external int nameType;

  @CSSM_BOOL()
  external int berEncoded;

  external SecAsn1Item name;
}

class __CE_GeneralNames extends ffi.Struct {
  @uint32()
  external int numNames;

  external ffi.Pointer<CE_GeneralName> generalName;
}

typedef CE_GeneralName = __CE_GeneralName;

class __CE_AuthorityKeyID extends ffi.Struct {
  @CSSM_BOOL()
  external int keyIdentifierPresent;

  external SecAsn1Item keyIdentifier;

  @CSSM_BOOL()
  external int generalNamesPresent;

  external ffi.Pointer<CE_GeneralNames> generalNames;

  @CSSM_BOOL()
  external int serialNumberPresent;

  external SecAsn1Item serialNumber;
}

typedef CE_GeneralNames = __CE_GeneralNames;

class __CE_ExtendedKeyUsage extends ffi.Struct {
  @uint32()
  external int numPurposes;

  external CSSM_OID_PTR purposes;
}

typedef CSSM_OID_PTR = ffi.Pointer<SecAsn1Oid>;

class __CE_BasicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_BOOL()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

class __CE_PolicyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item qualifier;
}

class __CE_PolicyInformation extends ffi.Struct {
  external SecAsn1Oid certPolicyId;

  @uint32()
  external int numPolicyQualifiers;

  external ffi.Pointer<CE_PolicyQualifierInfo> policyQualifiers;
}

typedef CE_PolicyQualifierInfo = __CE_PolicyQualifierInfo;

class __CE_CertPolicies extends ffi.Struct {
  @uint32()
  external int numPolicies;

  external ffi.Pointer<CE_PolicyInformation> policies;
}

typedef CE_PolicyInformation = __CE_PolicyInformation;

abstract class __CE_CrlDistributionPointNameType {
  static const int CE_CDNT_FullName = 0;
  static const int CE_CDNT_NameRelativeToCrlIssuer = 1;
}

class __CE_DistributionPointName extends ffi.Struct {
  @ffi.Int32()
  external int nameType;

  external UnnamedUnion4 dpn;
}

class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<CE_GeneralNames> fullName;

  external CSSM_X509_RDN_PTR rdn;
}

class __CE_CRLDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int reasonsPresent;

  @CE_CrlDistReasonFlags()
  external int reasons;

  external ffi.Pointer<CE_GeneralNames> crlIssuer;
}

typedef CE_DistributionPointName = __CE_DistributionPointName;
typedef CE_CrlDistReasonFlags = uint8;

class __CE_CRLDistPointsSyntax extends ffi.Struct {
  @uint32()
  external int numDistPoints;

  external ffi.Pointer<CE_CRLDistributionPoint> distPoints;
}

typedef CE_CRLDistributionPoint = __CE_CRLDistributionPoint;

class __CE_AccessDescription extends ffi.Struct {
  external SecAsn1Oid accessMethod;

  external CE_GeneralName accessLocation;
}

class __CE_AuthorityInfoAccess extends ffi.Struct {
  @uint32()
  external int numAccessDescriptions;

  external ffi.Pointer<CE_AccessDescription> accessDescriptions;
}

typedef CE_AccessDescription = __CE_AccessDescription;

class __CE_SemanticsInformation extends ffi.Struct {
  external ffi.Pointer<SecAsn1Oid> semanticsIdentifier;

  external ffi.Pointer<CE_NameRegistrationAuthorities>
      nameRegistrationAuthorities;
}

typedef CE_NameRegistrationAuthorities = CE_GeneralNames;

class __CE_QC_Statement extends ffi.Struct {
  external SecAsn1Oid statementId;

  external ffi.Pointer<CE_SemanticsInformation> semanticsInfo;

  external ffi.Pointer<SecAsn1Item> otherInfo;
}

typedef CE_SemanticsInformation = __CE_SemanticsInformation;

class __CE_QC_Statements extends ffi.Struct {
  @uint32()
  external int numQCStatements;

  external ffi.Pointer<CE_QC_Statement> qcStatements;
}

typedef CE_QC_Statement = __CE_QC_Statement;

class __CE_IssuingDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int onlyUserCertsPresent;

  @CSSM_BOOL()
  external int onlyUserCerts;

  @CSSM_BOOL()
  external int onlyCACertsPresent;

  @CSSM_BOOL()
  external int onlyCACerts;

  @CSSM_BOOL()
  external int onlySomeReasonsPresent;

  @CE_CrlDistReasonFlags()
  external int onlySomeReasons;

  @CSSM_BOOL()
  external int indirectCrlPresent;

  @CSSM_BOOL()
  external int indirectCrl;
}

class __CE_GeneralSubtree extends ffi.Struct {
  external ffi.Pointer<CE_GeneralNames> base;

  @uint32()
  external int minimum;

  @CSSM_BOOL()
  external int maximumPresent;

  @uint32()
  external int maximum;
}

class __CE_GeneralSubtrees extends ffi.Struct {
  @uint32()
  external int numSubtrees;

  external ffi.Pointer<CE_GeneralSubtree> subtrees;
}

typedef CE_GeneralSubtree = __CE_GeneralSubtree;

class __CE_NameConstraints extends ffi.Struct {
  external ffi.Pointer<CE_GeneralSubtrees> permitted;

  external ffi.Pointer<CE_GeneralSubtrees> excluded;
}

typedef CE_GeneralSubtrees = __CE_GeneralSubtrees;

class __CE_PolicyMapping extends ffi.Struct {
  external SecAsn1Oid issuerDomainPolicy;

  external SecAsn1Oid subjectDomainPolicy;
}

class __CE_PolicyMappings extends ffi.Struct {
  @uint32()
  external int numPolicyMappings;

  external ffi.Pointer<CE_PolicyMapping> policyMappings;
}

typedef CE_PolicyMapping = __CE_PolicyMapping;

class __CE_PolicyConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int requireExplicitPolicyPresent;

  @uint32()
  external int requireExplicitPolicy;

  @CSSM_BOOL()
  external int inhibitPolicyMappingPresent;

  @uint32()
  external int inhibitPolicyMapping;
}

abstract class __CE_DataType {
  static const int DT_AuthorityKeyID = 0;
  static const int DT_SubjectKeyID = 1;
  static const int DT_KeyUsage = 2;
  static const int DT_SubjectAltName = 3;
  static const int DT_IssuerAltName = 4;
  static const int DT_ExtendedKeyUsage = 5;
  static const int DT_BasicConstraints = 6;
  static const int DT_CertPolicies = 7;
  static const int DT_NetscapeCertType = 8;
  static const int DT_CrlNumber = 9;
  static const int DT_DeltaCrl = 10;
  static const int DT_CrlReason = 11;
  static const int DT_CrlDistributionPoints = 12;
  static const int DT_IssuingDistributionPoint = 13;
  static const int DT_AuthorityInfoAccess = 14;
  static const int DT_Other = 15;
  static const int DT_QC_Statements = 16;
  static const int DT_NameConstraints = 17;
  static const int DT_PolicyMappings = 18;
  static const int DT_PolicyConstraints = 19;
  static const int DT_InhibitAnyPolicy = 20;
}

class CE_Data extends ffi.Union {
  external CE_AuthorityKeyID authorityKeyID;

  external CE_SubjectKeyID subjectKeyID;

  @CE_KeyUsage()
  external int keyUsage;

  external CE_GeneralNames subjectAltName;

  external CE_GeneralNames issuerAltName;

  external CE_ExtendedKeyUsage extendedKeyUsage;

  external CE_BasicConstraints basicConstraints;

  external CE_CertPolicies certPolicies;

  @CE_NetscapeCertType()
  external int netscapeCertType;

  @CE_CrlNumber()
  external int crlNumber;

  @CE_DeltaCrl()
  external int deltaCrl;

  @CE_CrlReason()
  external int crlReason;

  external CE_CRLDistPointsSyntax crlDistPoints;

  external CE_IssuingDistributionPoint issuingDistPoint;

  external CE_AuthorityInfoAccess authorityInfoAccess;

  external CE_QC_Statements qualifiedCertStatements;

  external CE_NameConstraints nameConstraints;

  external CE_PolicyMappings policyMappings;

  external CE_PolicyConstraints policyConstraints;

  @CE_InhibitAnyPolicy()
  external int inhibitAnyPolicy;

  external SecAsn1Item rawData;
}

typedef CE_AuthorityKeyID = __CE_AuthorityKeyID;
typedef CE_SubjectKeyID = SecAsn1Item;
typedef CE_KeyUsage = uint16;
typedef CE_ExtendedKeyUsage = __CE_ExtendedKeyUsage;
typedef CE_BasicConstraints = __CE_BasicConstraints;
typedef CE_CertPolicies = __CE_CertPolicies;
typedef CE_NetscapeCertType = uint16;
typedef CE_CrlNumber = uint32;
typedef CE_DeltaCrl = uint32;
typedef CE_CrlReason = uint32;
typedef CE_CRLDistPointsSyntax = __CE_CRLDistPointsSyntax;
typedef CE_IssuingDistributionPoint = __CE_IssuingDistributionPoint;
typedef CE_AuthorityInfoAccess = __CE_AuthorityInfoAccess;
typedef CE_QC_Statements = __CE_QC_Statements;
typedef CE_NameConstraints = __CE_NameConstraints;
typedef CE_PolicyMappings = __CE_PolicyMappings;
typedef CE_PolicyConstraints = __CE_PolicyConstraints;
typedef CE_InhibitAnyPolicy = uint32;

class __CE_DataAndType extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external CE_Data extension1;

  @CSSM_BOOL()
  external int critical;
}

class cssm_acl_process_subject_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int mask;

  @uint32()
  external int uid;

  @uint32()
  external int gid;
}

class cssm_acl_keychain_prompt_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int flags;
}

abstract class cssm_appledl_open_parameters_mask {
  static const int kCSSM_APPLEDL_MASK_MODE = 1;
}

class cssm_appledl_open_parameters extends ffi.Struct {
  @uint32()
  external int length;

  @uint32()
  external int version;

  @CSSM_BOOL()
  external int autoCommit;

  @uint32()
  external int mask;

  @mode_t()
  external int mode;
}

class cssm_applecspdl_db_settings_parameters extends ffi.Struct {
  @uint32()
  external int idleTimeout;

  @uint8()
  external int lockOnSleep;
}

class cssm_applecspdl_db_is_locked_parameters extends ffi.Struct {
  @uint8()
  external int isLocked;
}

class cssm_applecspdl_db_change_password_parameters extends ffi.Struct {
  external ffi.Pointer<CSSM_ACCESS_CREDENTIALS> accessCredentials;
}

typedef CSSM_ACCESS_CREDENTIALS = cssm_access_credentials;

class CSSM_APPLE_TP_NAME_OID extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Char> string;

  external ffi.Pointer<SecAsn1Oid> oid;
}

class CSSM_APPLE_TP_CERT_REQUEST extends ffi.Struct {
  @CSSM_CSP_HANDLE()
  external int cspHand;

  @CSSM_CL_HANDLE()
  external int clHand;

  @uint32()
  external int serialNumber;

  @uint32()
  external int numSubjectNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> subjectNames;

  @uint32()
  external int numIssuerNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> issuerNames;

  external CSSM_X509_NAME_PTR issuerNameX509;

  external ffi.Pointer<CSSM_KEY> certPublicKey;

  external ffi.Pointer<CSSM_KEY> issuerPrivateKey;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @uint32()
  external int notBefore;

  @uint32()
  external int notAfter;

  @uint32()
  external int numExtensions;

  external ffi.Pointer<CE_DataAndType> extensions;

  external ffi.Pointer<pkg_ffi.Char> challengeString;
}

typedef CSSM_X509_NAME_PTR = ffi.Pointer<cssm_x509_name>;
typedef CSSM_KEY = cssm_key;
typedef CE_DataAndType = __CE_DataAndType;

class CSSM_APPLE_TP_SSL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @uint32()
  external int ServerNameLen;

  external ffi.Pointer<pkg_ffi.Char> ServerName;

  @uint32()
  external int Flags;
}

class CSSM_APPLE_TP_CRL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_CRL_OPT_FLAGS()
  external int CrlFlags;

  external CSSM_DL_DB_HANDLE_PTR crlStore;
}

typedef CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;

class CSSM_APPLE_TP_SMIME_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CE_KeyUsage()
  external int IntendedUsage;

  @uint32()
  external int SenderEmailLen;

  external ffi.Pointer<pkg_ffi.Char> SenderEmail;
}

class CSSM_APPLE_TP_ACTION_DATA extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_ACTION_FLAGS()
  external int ActionFlags;
}

typedef CSSM_APPLE_TP_ACTION_FLAGS = uint32;

class CSSM_TP_APPLE_EVIDENCE_INFO extends ffi.Struct {
  @CSSM_TP_APPLE_CERT_STATUS()
  external int StatusBits;

  @uint32()
  external int NumStatusCodes;

  external ffi.Pointer<CSSM_RETURN> StatusCodes;

  @uint32()
  external int Index;

  external CSSM_DL_DB_HANDLE DlDbHandle;

  external CSSM_DB_UNIQUE_RECORD_PTR UniqueRecord;
}

typedef CSSM_TP_APPLE_CERT_STATUS = uint32;
typedef CSSM_DL_DB_HANDLE = cssm_dl_db_handle;
typedef CSSM_DB_UNIQUE_RECORD_PTR = ffi.Pointer<cssm_db_unique_record>;

class CSSM_TP_APPLE_EVIDENCE_HEADER extends ffi.Struct {
  @uint32()
  external int Version;
}

class CSSM_APPLE_CL_CSR_REQUEST extends ffi.Struct {
  external CSSM_X509_NAME_PTR subjectNameX509;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @CSSM_CSP_HANDLE()
  external int cspHand;

  external ffi.Pointer<CSSM_KEY> subjectPublicKey;

  external ffi.Pointer<CSSM_KEY> subjectPrivateKey;

  external ffi.Pointer<pkg_ffi.Char> challengeString;
}

abstract class SecTrustOptionFlags {
  static const int kSecTrustOptionAllowExpired = 1;
  static const int kSecTrustOptionLeafIsCA = 2;
  static const int kSecTrustOptionFetchIssuerFromNet = 4;
  static const int kSecTrustOptionAllowExpiredRoot = 8;
  static const int kSecTrustOptionRequireRevPerCert = 16;
  static const int kSecTrustOptionUseTrustSettings = 32;
  static const int kSecTrustOptionImplicitAnchors = 64;
}

typedef CSSM_TP_VERIFY_CONTEXT_RESULT_PTR
    = ffi.Pointer<cssm_tp_verify_context_result>;
typedef SecKeychainRef = ffi.Pointer<__SecKeychain>;

abstract class SecKeyUsage {
  static const int kSecKeyUsageUnspecified = 0;
  static const int kSecKeyUsageDigitalSignature = 1;
  static const int kSecKeyUsageNonRepudiation = 2;
  static const int kSecKeyUsageContentCommitment = 2;
  static const int kSecKeyUsageKeyEncipherment = 4;
  static const int kSecKeyUsageDataEncipherment = 8;
  static const int kSecKeyUsageKeyAgreement = 16;
  static const int kSecKeyUsageKeyCertSign = 32;
  static const int kSecKeyUsageCRLSign = 64;
  static const int kSecKeyUsageEncipherOnly = 128;
  static const int kSecKeyUsageDecipherOnly = 256;
  static const int kSecKeyUsageCritical = -2147483648;
  static const int kSecKeyUsageAll = 2147483647;
}

typedef SecIdentityRef = ffi.Pointer<__SecIdentity>;

abstract class SSLCiphersuiteGroup {
  static const int kSSLCiphersuiteGroupDefault = 0;
  static const int kSSLCiphersuiteGroupCompatibility = 1;
  static const int kSSLCiphersuiteGroupLegacy = 2;
  static const int kSSLCiphersuiteGroupATS = 3;
  static const int kSSLCiphersuiteGroupATSCompatibility = 4;
}

abstract class tls_protocol_version_t {
  static const int tls_protocol_version_TLSv10 = 769;
  static const int tls_protocol_version_TLSv11 = 770;
  static const int tls_protocol_version_TLSv12 = 771;
  static const int tls_protocol_version_TLSv13 = 772;
  static const int tls_protocol_version_DTLSv10 = -257;
  static const int tls_protocol_version_DTLSv12 = -259;
}

abstract class tls_ciphersuite_t {
  static const int tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA = 10;
  static const int tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA = 47;
  static const int tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA = 53;
  static const int tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256 = 156;
  static const int tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384 = 157;
  static const int tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256 = 60;
  static const int tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256 = 61;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = -16376;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = -16375;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = -16374;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = -16366;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA = -16365;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA = -16364;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = -16349;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = -16348;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = -16345;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = -16344;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = -16341;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = -16340;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = -16337;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = -16336;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 =
      -13144;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 =
      -13143;
  static const int tls_ciphersuite_AES_128_GCM_SHA256 = 4865;
  static const int tls_ciphersuite_AES_256_GCM_SHA384 = 4866;
  static const int tls_ciphersuite_CHACHA20_POLY1305_SHA256 = 4867;
}

abstract class tls_ciphersuite_group_t {
  static const int tls_ciphersuite_group_default = 0;
  static const int tls_ciphersuite_group_compatibility = 1;
  static const int tls_ciphersuite_group_legacy = 2;
  static const int tls_ciphersuite_group_ats = 3;
  static const int tls_ciphersuite_group_ats_compatibility = 4;
}

abstract class SSLProtocol {
  static const int kSSLProtocolUnknown = 0;
  static const int kTLSProtocol1 = 4;
  static const int kTLSProtocol11 = 7;
  static const int kTLSProtocol12 = 8;
  static const int kDTLSProtocol1 = 9;
  static const int kTLSProtocol13 = 10;
  static const int kDTLSProtocol12 = 11;
  static const int kTLSProtocolMaxSupported = 999;
  static const int kSSLProtocol2 = 1;
  static const int kSSLProtocol3 = 2;
  static const int kSSLProtocol3Only = 3;
  static const int kTLSProtocol1Only = 5;
  static const int kSSLProtocolAll = 6;
}

typedef sec_trust_t = ffi.Pointer<ObjCObject>;
typedef sec_identity_t = ffi.Pointer<ObjCObject>;
typedef sec_certificate_t = ffi.Pointer<ObjCObject>;
typedef sec_protocol_metadata_t = ffi.Pointer<ObjCObject>;
typedef dispatch_data_t = ffi.Pointer<ObjCObject>;
typedef SSLCipherSuite = ffi.Uint16;
typedef sec_protocol_options_t = ffi.Pointer<ObjCObject>;
typedef sec_protocol_pre_shared_key_selection_t = ffi.Pointer<ObjCObject>;
typedef sec_protocol_key_update_t = ffi.Pointer<ObjCObject>;
typedef sec_protocol_challenge_t = ffi.Pointer<ObjCObject>;
typedef sec_protocol_verify_t = ffi.Pointer<ObjCObject>;

class SSLContext extends ffi.Opaque {}

abstract class SSLSessionOption {
  static const int kSSLSessionOptionBreakOnServerAuth = 0;
  static const int kSSLSessionOptionBreakOnCertRequested = 1;
  static const int kSSLSessionOptionBreakOnClientAuth = 2;
  static const int kSSLSessionOptionFalseStart = 3;
  static const int kSSLSessionOptionSendOneByteRecord = 4;
  static const int kSSLSessionOptionAllowServerIdentityChange = 5;
  static const int kSSLSessionOptionFallback = 6;
  static const int kSSLSessionOptionBreakOnClientHello = 7;
  static const int kSSLSessionOptionAllowRenegotiation = 8;
  static const int kSSLSessionOptionEnableSessionTickets = 9;
}

abstract class SSLSessionState {
  static const int kSSLIdle = 0;
  static const int kSSLHandshake = 1;
  static const int kSSLConnected = 2;
  static const int kSSLClosed = 3;
  static const int kSSLAborted = 4;
}

abstract class SSLClientCertificateState {
  static const int kSSLClientCertNone = 0;
  static const int kSSLClientCertRequested = 1;
  static const int kSSLClientCertSent = 2;
  static const int kSSLClientCertRejected = 3;
}

abstract class SSLProtocolSide {
  static const int kSSLServerSide = 0;
  static const int kSSLClientSide = 1;
}

abstract class SSLConnectionType {
  static const int kSSLStreamType = 0;
  static const int kSSLDatagramType = 1;
}

typedef SSLContextRef = ffi.Pointer<SSLContext>;
typedef SSLReadFunc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(SSLConnectionRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<pkg_ffi.Size>)>>;
typedef SSLConnectionRef = ffi.Pointer<ffi.Void>;
typedef SSLWriteFunc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(SSLConnectionRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<pkg_ffi.Size>)>>;

abstract class SSLAuthenticate {
  static const int kNeverAuthenticate = 0;
  static const int kAlwaysAuthenticate = 1;
  static const int kTryAuthenticate = 2;
}

class NSURLSession extends NSObject {
  NSURLSession._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSession castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSession._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_sharedSession;
  static NSObject getSharedSession(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSession");
    _sel_sharedSession ??= _registerName(_lib, "sharedSession");
    final _ret = _lib._objc_msgSend_114(_class!, _sel_sharedSession!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_sessionWithConfiguration;
  static NSURLSession sessionWithConfiguration(
      NativeLibrary _lib, NSObject configuration) {
    _class ??= _getClass(_lib, "NSURLSession");
    _sel_sessionWithConfiguration ??=
        _registerName(_lib, "sessionWithConfiguration:");
    final _ret = _lib._objc_msgSend_115(
        _class!, _sel_sessionWithConfiguration!, configuration._id);
    return NSURLSession._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_sessionWithConfiguration_delegate_delegateQueue;
  static NSURLSession sessionWithConfiguration_delegate_delegateQueue(
      NativeLibrary _lib,
      NSObject configuration,
      NSObject delegate,
      NSObject queue) {
    _class ??= _getClass(_lib, "NSURLSession");
    _sel_sessionWithConfiguration_delegate_delegateQueue ??=
        _registerName(_lib, "sessionWithConfiguration:delegate:delegateQueue:");
    final _ret = _lib._objc_msgSend_116(
        _class!,
        _sel_sessionWithConfiguration_delegate_delegateQueue!,
        configuration._id,
        delegate._id,
        queue._id);
    return NSURLSession._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_delegateQueue;
  NSObject get delegateQueue {
    _sel_delegateQueue ??= _registerName(_lib, "delegateQueue");
    final _ret = _lib._objc_msgSend_117(_id, _sel_delegateQueue!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_delegate;
  NSObject get delegate {
    _sel_delegate ??= _registerName(_lib, "delegate");
    final _ret = _lib._objc_msgSend_118(_id, _sel_delegate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_configuration;
  NSObject get configuration {
    _sel_configuration ??= _registerName(_lib, "configuration");
    final _ret = _lib._objc_msgSend_119(_id, _sel_configuration!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_sessionDescription;
  NSObject get sessionDescription {
    _sel_sessionDescription ??= _registerName(_lib, "sessionDescription");
    final _ret = _lib._objc_msgSend_120(_id, _sel_sessionDescription!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_sessionDescription1;
  set sessionDescription(NSObject value) {
    _sel_sessionDescription1 ??= _registerName(_lib, "setSessionDescription:");
    _lib._objc_msgSend_121(_id, _sel_sessionDescription1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_finishTasksAndInvalidate;
  void finishTasksAndInvalidate() {
    _sel_finishTasksAndInvalidate ??=
        _registerName(_lib, "finishTasksAndInvalidate");
    _lib._objc_msgSend_0(_id, _sel_finishTasksAndInvalidate!);
  }

  static ffi.Pointer<ObjCSel>? _sel_invalidateAndCancel;
  void invalidateAndCancel() {
    _sel_invalidateAndCancel ??= _registerName(_lib, "invalidateAndCancel");
    _lib._objc_msgSend_0(_id, _sel_invalidateAndCancel!);
  }

  static ffi.Pointer<ObjCSel>? _sel_resetWithCompletionHandler;
  void resetWithCompletionHandler(NSObject completionHandler) {
    _sel_resetWithCompletionHandler ??=
        _registerName(_lib, "resetWithCompletionHandler:");
    _lib._objc_msgSend_122(
        _id, _sel_resetWithCompletionHandler!, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_flushWithCompletionHandler;
  void flushWithCompletionHandler(NSObject completionHandler) {
    _sel_flushWithCompletionHandler ??=
        _registerName(_lib, "flushWithCompletionHandler:");
    _lib._objc_msgSend_123(
        _id, _sel_flushWithCompletionHandler!, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_getTasksWithCompletionHandler;
  void getTasksWithCompletionHandler(NSObject completionHandler) {
    _sel_getTasksWithCompletionHandler ??=
        _registerName(_lib, "getTasksWithCompletionHandler:");
    _lib._objc_msgSend_124(
        _id, _sel_getTasksWithCompletionHandler!, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_getAllTasksWithCompletionHandler;
  void getAllTasksWithCompletionHandler(NSObject completionHandler) {
    _sel_getAllTasksWithCompletionHandler ??=
        _registerName(_lib, "getAllTasksWithCompletionHandler:");
    _lib._objc_msgSend_125(
        _id, _sel_getAllTasksWithCompletionHandler!, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_dataTaskWithRequest;
  NSURLSessionDataTask dataTaskWithRequest(NSObject request) {
    _sel_dataTaskWithRequest ??= _registerName(_lib, "dataTaskWithRequest:");
    final _ret =
        _lib._objc_msgSend_138(_id, _sel_dataTaskWithRequest!, request._id);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_dataTaskWithURL;
  NSURLSessionDataTask dataTaskWithURL(NSObject url) {
    _sel_dataTaskWithURL ??= _registerName(_lib, "dataTaskWithURL:");
    final _ret = _lib._objc_msgSend_139(_id, _sel_dataTaskWithURL!, url._id);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_uploadTaskWithRequest_fromFile;
  NSURLSessionUploadTask uploadTaskWithRequest_fromFile(
      NSObject request, NSObject fileURL) {
    _sel_uploadTaskWithRequest_fromFile ??=
        _registerName(_lib, "uploadTaskWithRequest:fromFile:");
    final _ret = _lib._objc_msgSend_140(
        _id, _sel_uploadTaskWithRequest_fromFile!, request._id, fileURL._id);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_uploadTaskWithRequest_fromData;
  NSURLSessionUploadTask uploadTaskWithRequest_fromData(
      NSObject request, NSObject bodyData) {
    _sel_uploadTaskWithRequest_fromData ??=
        _registerName(_lib, "uploadTaskWithRequest:fromData:");
    final _ret = _lib._objc_msgSend_141(
        _id, _sel_uploadTaskWithRequest_fromData!, request._id, bodyData._id);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_uploadTaskWithStreamedRequest;
  NSURLSessionUploadTask uploadTaskWithStreamedRequest(NSObject request) {
    _sel_uploadTaskWithStreamedRequest ??=
        _registerName(_lib, "uploadTaskWithStreamedRequest:");
    final _ret = _lib._objc_msgSend_142(
        _id, _sel_uploadTaskWithStreamedRequest!, request._id);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_downloadTaskWithRequest;
  NSURLSessionDownloadTask downloadTaskWithRequest(NSObject request) {
    _sel_downloadTaskWithRequest ??=
        _registerName(_lib, "downloadTaskWithRequest:");
    final _ret =
        _lib._objc_msgSend_144(_id, _sel_downloadTaskWithRequest!, request._id);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_downloadTaskWithURL;
  NSURLSessionDownloadTask downloadTaskWithURL(NSObject url) {
    _sel_downloadTaskWithURL ??= _registerName(_lib, "downloadTaskWithURL:");
    final _ret =
        _lib._objc_msgSend_145(_id, _sel_downloadTaskWithURL!, url._id);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_downloadTaskWithResumeData;
  NSURLSessionDownloadTask downloadTaskWithResumeData(NSObject resumeData) {
    _sel_downloadTaskWithResumeData ??=
        _registerName(_lib, "downloadTaskWithResumeData:");
    final _ret = _lib._objc_msgSend_146(
        _id, _sel_downloadTaskWithResumeData!, resumeData._id);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_streamTaskWithHostName_port;
  NSURLSessionStreamTask streamTaskWithHostName_port(
      NSObject hostname, int port) {
    _sel_streamTaskWithHostName_port ??=
        _registerName(_lib, "streamTaskWithHostName:port:");
    final _ret = _lib._objc_msgSend_149(
        _id, _sel_streamTaskWithHostName_port!, hostname._id, port);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_streamTaskWithNetService;
  NSURLSessionStreamTask streamTaskWithNetService(NSObject service) {
    _sel_streamTaskWithNetService ??=
        _registerName(_lib, "streamTaskWithNetService:");
    final _ret = _lib._objc_msgSend_150(
        _id, _sel_streamTaskWithNetService!, service._id);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_webSocketTaskWithURL;
  NSURLSessionWebSocketTask webSocketTaskWithURL(NSObject url) {
    _sel_webSocketTaskWithURL ??= _registerName(_lib, "webSocketTaskWithURL:");
    final _ret =
        _lib._objc_msgSend_159(_id, _sel_webSocketTaskWithURL!, url._id);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_webSocketTaskWithURL_protocols;
  NSURLSessionWebSocketTask webSocketTaskWithURL_protocols(
      NSObject url, NSObject protocols) {
    _sel_webSocketTaskWithURL_protocols ??=
        _registerName(_lib, "webSocketTaskWithURL:protocols:");
    final _ret = _lib._objc_msgSend_160(
        _id, _sel_webSocketTaskWithURL_protocols!, url._id, protocols._id);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_webSocketTaskWithRequest;
  NSURLSessionWebSocketTask webSocketTaskWithRequest(NSObject request) {
    _sel_webSocketTaskWithRequest ??=
        _registerName(_lib, "webSocketTaskWithRequest:");
    final _ret = _lib._objc_msgSend_161(
        _id, _sel_webSocketTaskWithRequest!, request._id);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSession init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSession._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSession new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSession");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSession._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSession new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSession");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSession._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSession alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSession");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSession._(_ret, _lib);
  }
}

class NSURLSessionDataTask extends NSURLSessionTask {
  NSURLSessionDataTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionDataTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionDataTask._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionDataTask init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionDataTask new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionDataTask");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionDataTask new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionDataTask");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionDataTask alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionDataTask");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionDataTask._(_ret, _lib);
  }
}

class NSURLSessionTask extends NSObject {
  NSURLSessionTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionTask._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_taskIdentifier;
  int get taskIdentifier {
    _sel_taskIdentifier ??= _registerName(_lib, "taskIdentifier");
    return _lib._objc_msgSend_20(_id, _sel_taskIdentifier!);
  }

  static ffi.Pointer<ObjCSel>? _sel_originalRequest;
  NSObject get originalRequest {
    _sel_originalRequest ??= _registerName(_lib, "originalRequest");
    final _ret = _lib._objc_msgSend_126(_id, _sel_originalRequest!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_currentRequest;
  NSObject get currentRequest {
    _sel_currentRequest ??= _registerName(_lib, "currentRequest");
    final _ret = _lib._objc_msgSend_127(_id, _sel_currentRequest!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_response;
  NSObject get response {
    _sel_response ??= _registerName(_lib, "response");
    final _ret = _lib._objc_msgSend_128(_id, _sel_response!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_progress;
  NSObject get progress {
    _sel_progress ??= _registerName(_lib, "progress");
    final _ret = _lib._objc_msgSend_129(_id, _sel_progress!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_earliestBeginDate;
  NSObject get earliestBeginDate {
    _sel_earliestBeginDate ??= _registerName(_lib, "earliestBeginDate");
    final _ret = _lib._objc_msgSend_130(_id, _sel_earliestBeginDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_earliestBeginDate1;
  set earliestBeginDate(NSObject value) {
    _sel_earliestBeginDate1 ??= _registerName(_lib, "setEarliestBeginDate:");
    _lib._objc_msgSend_131(_id, _sel_earliestBeginDate1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesClientExpectsToSend;
  int get countOfBytesClientExpectsToSend {
    _sel_countOfBytesClientExpectsToSend ??=
        _registerName(_lib, "countOfBytesClientExpectsToSend");
    return _lib._objc_msgSend_84(_id, _sel_countOfBytesClientExpectsToSend!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesClientExpectsToSend1;
  set countOfBytesClientExpectsToSend(int value) {
    _sel_countOfBytesClientExpectsToSend1 ??=
        _registerName(_lib, "setCountOfBytesClientExpectsToSend:");
    _lib._objc_msgSend_81(_id, _sel_countOfBytesClientExpectsToSend1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesClientExpectsToReceive;
  int get countOfBytesClientExpectsToReceive {
    _sel_countOfBytesClientExpectsToReceive ??=
        _registerName(_lib, "countOfBytesClientExpectsToReceive");
    return _lib._objc_msgSend_84(_id, _sel_countOfBytesClientExpectsToReceive!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesClientExpectsToReceive1;
  set countOfBytesClientExpectsToReceive(int value) {
    _sel_countOfBytesClientExpectsToReceive1 ??=
        _registerName(_lib, "setCountOfBytesClientExpectsToReceive:");
    _lib._objc_msgSend_81(
        _id, _sel_countOfBytesClientExpectsToReceive1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesReceived;
  int get countOfBytesReceived {
    _sel_countOfBytesReceived ??= _registerName(_lib, "countOfBytesReceived");
    return _lib._objc_msgSend_84(_id, _sel_countOfBytesReceived!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesSent;
  int get countOfBytesSent {
    _sel_countOfBytesSent ??= _registerName(_lib, "countOfBytesSent");
    return _lib._objc_msgSend_84(_id, _sel_countOfBytesSent!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesExpectedToSend;
  int get countOfBytesExpectedToSend {
    _sel_countOfBytesExpectedToSend ??=
        _registerName(_lib, "countOfBytesExpectedToSend");
    return _lib._objc_msgSend_84(_id, _sel_countOfBytesExpectedToSend!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfBytesExpectedToReceive;
  int get countOfBytesExpectedToReceive {
    _sel_countOfBytesExpectedToReceive ??=
        _registerName(_lib, "countOfBytesExpectedToReceive");
    return _lib._objc_msgSend_84(_id, _sel_countOfBytesExpectedToReceive!);
  }

  static ffi.Pointer<ObjCSel>? _sel_taskDescription;
  NSObject get taskDescription {
    _sel_taskDescription ??= _registerName(_lib, "taskDescription");
    final _ret = _lib._objc_msgSend_132(_id, _sel_taskDescription!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_taskDescription1;
  set taskDescription(NSObject value) {
    _sel_taskDescription1 ??= _registerName(_lib, "setTaskDescription:");
    _lib._objc_msgSend_133(_id, _sel_taskDescription1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancel;
  void cancel() {
    _sel_cancel ??= _registerName(_lib, "cancel");
    _lib._objc_msgSend_0(_id, _sel_cancel!);
  }

  static ffi.Pointer<ObjCSel>? _sel_state;
  int get state {
    _sel_state ??= _registerName(_lib, "state");
    return _lib._objc_msgSend_134(_id, _sel_state!);
  }

  static ffi.Pointer<ObjCSel>? _sel_error;
  NSObject get error {
    _sel_error ??= _registerName(_lib, "error");
    final _ret = _lib._objc_msgSend_135(_id, _sel_error!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_suspend;
  void suspend() {
    _sel_suspend ??= _registerName(_lib, "suspend");
    _lib._objc_msgSend_0(_id, _sel_suspend!);
  }

  static ffi.Pointer<ObjCSel>? _sel_resume;
  void resume() {
    _sel_resume ??= _registerName(_lib, "resume");
    _lib._objc_msgSend_0(_id, _sel_resume!);
  }

  static ffi.Pointer<ObjCSel>? _sel_priority;
  double get priority {
    _sel_priority ??= _registerName(_lib, "priority");
    return _lib._objc_msgSend_136(_id, _sel_priority!);
  }

  static ffi.Pointer<ObjCSel>? _sel_priority1;
  set priority(double value) {
    _sel_priority1 ??= _registerName(_lib, "setPriority:");
    _lib._objc_msgSend_137(_id, _sel_priority1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_prefersIncrementalDelivery;
  bool get prefersIncrementalDelivery {
    _sel_prefersIncrementalDelivery ??=
        _registerName(_lib, "prefersIncrementalDelivery");
    return _lib._objc_msgSend_16(_id, _sel_prefersIncrementalDelivery!);
  }

  static ffi.Pointer<ObjCSel>? _sel_prefersIncrementalDelivery1;
  set prefersIncrementalDelivery(bool value) {
    _sel_prefersIncrementalDelivery1 ??=
        _registerName(_lib, "setPrefersIncrementalDelivery:");
    _lib._objc_msgSend_58(_id, _sel_prefersIncrementalDelivery1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionTask init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionTask new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTask");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionTask new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTask");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionTask alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTask");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionTask._(_ret, _lib);
  }
}

abstract class NSURLSessionTaskState {
  static const int NSURLSessionTaskStateRunning = 0;
  static const int NSURLSessionTaskStateSuspended = 1;
  static const int NSURLSessionTaskStateCanceling = 2;
  static const int NSURLSessionTaskStateCompleted = 3;
}

class NSURLSessionUploadTask extends NSURLSessionDataTask {
  NSURLSessionUploadTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionUploadTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionUploadTask._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionUploadTask init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionUploadTask new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionUploadTask");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionUploadTask new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionUploadTask");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionUploadTask alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionUploadTask");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionUploadTask._(_ret, _lib);
  }
}

class NSURLSessionDownloadTask extends NSURLSessionTask {
  NSURLSessionDownloadTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionDownloadTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionDownloadTask._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancelByProducingResumeData;
  void cancelByProducingResumeData(NSObject completionHandler) {
    _sel_cancelByProducingResumeData ??=
        _registerName(_lib, "cancelByProducingResumeData:");
    _lib._objc_msgSend_143(
        _id, _sel_cancelByProducingResumeData!, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionDownloadTask init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionDownloadTask new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionDownloadTask");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionDownloadTask new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionDownloadTask");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionDownloadTask alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionDownloadTask");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }
}

class NSURLSessionStreamTask extends NSURLSessionTask {
  NSURLSessionStreamTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionStreamTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionStreamTask._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_readDataOfMinLength_maxLength_timeout_completionHandler;
  void readDataOfMinLength_maxLength_timeout_completionHandler(
      int minBytes, int maxBytes, double timeout, NSObject completionHandler) {
    _sel_readDataOfMinLength_maxLength_timeout_completionHandler ??=
        _registerName(
            _lib, "readDataOfMinLength:maxLength:timeout:completionHandler:");
    _lib._objc_msgSend_147(
        _id,
        _sel_readDataOfMinLength_maxLength_timeout_completionHandler!,
        minBytes,
        maxBytes,
        timeout,
        completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_writeData_timeout_completionHandler;
  void writeData_timeout_completionHandler(
      NSObject data, double timeout, NSObject completionHandler) {
    _sel_writeData_timeout_completionHandler ??=
        _registerName(_lib, "writeData:timeout:completionHandler:");
    _lib._objc_msgSend_148(_id, _sel_writeData_timeout_completionHandler!,
        data._id, timeout, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_captureStreams;
  void captureStreams() {
    _sel_captureStreams ??= _registerName(_lib, "captureStreams");
    _lib._objc_msgSend_0(_id, _sel_captureStreams!);
  }

  static ffi.Pointer<ObjCSel>? _sel_closeWrite;
  void closeWrite() {
    _sel_closeWrite ??= _registerName(_lib, "closeWrite");
    _lib._objc_msgSend_0(_id, _sel_closeWrite!);
  }

  static ffi.Pointer<ObjCSel>? _sel_closeRead;
  void closeRead() {
    _sel_closeRead ??= _registerName(_lib, "closeRead");
    _lib._objc_msgSend_0(_id, _sel_closeRead!);
  }

  static ffi.Pointer<ObjCSel>? _sel_startSecureConnection;
  void startSecureConnection() {
    _sel_startSecureConnection ??= _registerName(_lib, "startSecureConnection");
    _lib._objc_msgSend_0(_id, _sel_startSecureConnection!);
  }

  static ffi.Pointer<ObjCSel>? _sel_stopSecureConnection;
  void stopSecureConnection() {
    _sel_stopSecureConnection ??= _registerName(_lib, "stopSecureConnection");
    _lib._objc_msgSend_0(_id, _sel_stopSecureConnection!);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionStreamTask init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionStreamTask new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionStreamTask");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionStreamTask new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionStreamTask");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionStreamTask alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionStreamTask");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionStreamTask._(_ret, _lib);
  }
}

class NSURLSessionWebSocketTask extends NSURLSessionTask {
  NSURLSessionWebSocketTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionWebSocketTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionWebSocketTask._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_sendMessage_completionHandler;
  void sendMessage_completionHandler(
      NSObject message, NSObject completionHandler) {
    _sel_sendMessage_completionHandler ??=
        _registerName(_lib, "sendMessage:completionHandler:");
    _lib._objc_msgSend_151(_id, _sel_sendMessage_completionHandler!,
        message._id, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_receiveMessageWithCompletionHandler;
  void receiveMessageWithCompletionHandler(NSObject completionHandler) {
    _sel_receiveMessageWithCompletionHandler ??=
        _registerName(_lib, "receiveMessageWithCompletionHandler:");
    _lib._objc_msgSend_152(
        _id, _sel_receiveMessageWithCompletionHandler!, completionHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_sendPingWithPongReceiveHandler;
  void sendPingWithPongReceiveHandler(NSObject pongReceiveHandler) {
    _sel_sendPingWithPongReceiveHandler ??=
        _registerName(_lib, "sendPingWithPongReceiveHandler:");
    _lib._objc_msgSend_153(
        _id, _sel_sendPingWithPongReceiveHandler!, pongReceiveHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancelWithCloseCode_reason;
  void cancelWithCloseCode_reason(int closeCode, NSObject reason) {
    _sel_cancelWithCloseCode_reason ??=
        _registerName(_lib, "cancelWithCloseCode:reason:");
    _lib._objc_msgSend_154(
        _id, _sel_cancelWithCloseCode_reason!, closeCode, reason._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_maximumMessageSize;
  int get maximumMessageSize {
    _sel_maximumMessageSize ??= _registerName(_lib, "maximumMessageSize");
    return _lib._objc_msgSend_155(_id, _sel_maximumMessageSize!);
  }

  static ffi.Pointer<ObjCSel>? _sel_maximumMessageSize1;
  set maximumMessageSize(int value) {
    _sel_maximumMessageSize1 ??= _registerName(_lib, "setMaximumMessageSize:");
    _lib._objc_msgSend_156(_id, _sel_maximumMessageSize1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_closeCode;
  int get closeCode {
    _sel_closeCode ??= _registerName(_lib, "closeCode");
    return _lib._objc_msgSend_157(_id, _sel_closeCode!);
  }

  static ffi.Pointer<ObjCSel>? _sel_closeReason;
  NSObject get closeReason {
    _sel_closeReason ??= _registerName(_lib, "closeReason");
    final _ret = _lib._objc_msgSend_158(_id, _sel_closeReason!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionWebSocketTask init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionWebSocketTask new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionWebSocketTask");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionWebSocketTask new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionWebSocketTask");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionWebSocketTask alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionWebSocketTask");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }
}

abstract class NSURLSessionWebSocketCloseCode {
  static const int NSURLSessionWebSocketCloseCodeInvalid = 0;
  static const int NSURLSessionWebSocketCloseCodeNormalClosure = 1000;
  static const int NSURLSessionWebSocketCloseCodeGoingAway = 1001;
  static const int NSURLSessionWebSocketCloseCodeProtocolError = 1002;
  static const int NSURLSessionWebSocketCloseCodeUnsupportedData = 1003;
  static const int NSURLSessionWebSocketCloseCodeNoStatusReceived = 1005;
  static const int NSURLSessionWebSocketCloseCodeAbnormalClosure = 1006;
  static const int NSURLSessionWebSocketCloseCodeInvalidFramePayloadData = 1007;
  static const int NSURLSessionWebSocketCloseCodePolicyViolation = 1008;
  static const int NSURLSessionWebSocketCloseCodeMessageTooBig = 1009;
  static const int NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing =
      1010;
  static const int NSURLSessionWebSocketCloseCodeInternalServerError = 1011;
  static const int NSURLSessionWebSocketCloseCodeTLSHandshakeFailure = 1015;
}

abstract class NSURLSessionWebSocketMessageType {
  static const int NSURLSessionWebSocketMessageTypeData = 0;
  static const int NSURLSessionWebSocketMessageTypeString = 1;
}

class NSURLSessionWebSocketMessage extends NSObject {
  NSURLSessionWebSocketMessage._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionWebSocketMessage castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSURLSessionWebSocketMessage._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithData;
  NSURLSessionWebSocketMessage initWithData(NSObject data) {
    _sel_initWithData ??= _registerName(_lib, "initWithData:");
    final _ret = _lib._objc_msgSend_162(_id, _sel_initWithData!, data._id);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithString;
  NSURLSessionWebSocketMessage initWithString(NSObject string) {
    _sel_initWithString ??= _registerName(_lib, "initWithString:");
    final _ret = _lib._objc_msgSend_163(_id, _sel_initWithString!, string._id);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_type;
  int get type {
    _sel_type ??= _registerName(_lib, "type");
    return _lib._objc_msgSend_164(_id, _sel_type!);
  }

  static ffi.Pointer<ObjCSel>? _sel_data;
  NSObject get data {
    _sel_data ??= _registerName(_lib, "data");
    final _ret = _lib._objc_msgSend_165(_id, _sel_data!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_string;
  NSObject get string {
    _sel_string ??= _registerName(_lib, "string");
    final _ret = _lib._objc_msgSend_166(_id, _sel_string!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionWebSocketMessage init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionWebSocketMessage new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionWebSocketMessage");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionWebSocketMessage new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionWebSocketMessage");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionWebSocketMessage alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionWebSocketMessage");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }
}

/// !
/// @enum NSURLSessionMultipathServiceType
///
/// @discussion The NSURLSessionMultipathServiceType enum defines constants that
/// can be used to specify the multipath service type to associate an NSURLSession.  The
/// multipath service type determines whether multipath TCP should be attempted and the conditions
/// for creating and switching between subflows.  Using these service types requires the appropriate entitlement.  Any connection attempt will fail if the process does not have the required entitlement.
/// A primary interface is a generally less expensive interface in terms of both cost and power (such as WiFi or ethernet).  A secondary interface is more expensive (such as 3G or LTE).
///
/// @constant NSURLSessionMultipathServiceTypeNone Specifies that multipath tcp should not be used.  Connections will use a single flow.
/// This is the default value.  No entitlement is required to set this value.
///
/// @constant NSURLSessionMultipathServiceTypeHandover Specifies that a secondary subflow should only be used
/// when the primary subflow is not performing adequately.   Requires the com.apple.developer.networking.multipath entilement.
///
/// @constant NSURLSessionMultipathServiceTypeInteractive Specifies that a secodary subflow should be used if the
/// primary subflow is not performing adequately (packet loss, high round trip times, bandwidth issues).  The secondary
/// subflow will be created more aggressively than with NSURLSessionMultipathServiceTypeHandover.  Requires the com.apple.developer.networking.multipath entitlement.
///
/// @constant NSURLSessionMultipathServiceTypeAggregate Specifies that multiple subflows across multiple interfaces should be
/// used for better bandwidth.  This mode is only available for experimentation on devices configured for development use.
/// It can be enabled in the Developer section of the Settings app.
abstract class NSURLSessionMultipathServiceType {
  static const int NSURLSessionMultipathServiceTypeNone = 0;
  static const int NSURLSessionMultipathServiceTypeHandover = 1;
  static const int NSURLSessionMultipathServiceTypeInteractive = 2;
  static const int NSURLSessionMultipathServiceTypeAggregate = 3;
}

class NSURLSessionConfiguration extends NSObject {
  NSURLSessionConfiguration._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionConfiguration castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionConfiguration._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_defaultSessionConfiguration;
  static NSObject getDefaultSessionConfiguration(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionConfiguration");
    _sel_defaultSessionConfiguration ??=
        _registerName(_lib, "defaultSessionConfiguration");
    final _ret =
        _lib._objc_msgSend_167(_class!, _sel_defaultSessionConfiguration!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_ephemeralSessionConfiguration;
  static NSObject getEphemeralSessionConfiguration(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionConfiguration");
    _sel_ephemeralSessionConfiguration ??=
        _registerName(_lib, "ephemeralSessionConfiguration");
    final _ret =
        _lib._objc_msgSend_168(_class!, _sel_ephemeralSessionConfiguration!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_backgroundSessionConfigurationWithIdentifier;
  static NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier(
      NativeLibrary _lib, NSObject identifier) {
    _class ??= _getClass(_lib, "NSURLSessionConfiguration");
    _sel_backgroundSessionConfigurationWithIdentifier ??=
        _registerName(_lib, "backgroundSessionConfigurationWithIdentifier:");
    final _ret = _lib._objc_msgSend_169(_class!,
        _sel_backgroundSessionConfigurationWithIdentifier!, identifier._id);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_identifier;
  NSObject get identifier {
    _sel_identifier ??= _registerName(_lib, "identifier");
    final _ret = _lib._objc_msgSend_170(_id, _sel_identifier!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestCachePolicy;
  int get requestCachePolicy {
    _sel_requestCachePolicy ??= _registerName(_lib, "requestCachePolicy");
    return _lib._objc_msgSend_47(_id, _sel_requestCachePolicy!);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestCachePolicy1;
  set requestCachePolicy(int value) {
    _sel_requestCachePolicy1 ??= _registerName(_lib, "setRequestCachePolicy:");
    _lib._objc_msgSend_53(_id, _sel_requestCachePolicy1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeoutIntervalForRequest;
  double get timeoutIntervalForRequest {
    _sel_timeoutIntervalForRequest ??=
        _registerName(_lib, "timeoutIntervalForRequest");
    return _lib._objc_msgSend_39(_id, _sel_timeoutIntervalForRequest!);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeoutIntervalForRequest1;
  set timeoutIntervalForRequest(double value) {
    _sel_timeoutIntervalForRequest1 ??=
        _registerName(_lib, "setTimeoutIntervalForRequest:");
    _lib._objc_msgSend_54(_id, _sel_timeoutIntervalForRequest1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeoutIntervalForResource;
  double get timeoutIntervalForResource {
    _sel_timeoutIntervalForResource ??=
        _registerName(_lib, "timeoutIntervalForResource");
    return _lib._objc_msgSend_39(_id, _sel_timeoutIntervalForResource!);
  }

  static ffi.Pointer<ObjCSel>? _sel_timeoutIntervalForResource1;
  set timeoutIntervalForResource(double value) {
    _sel_timeoutIntervalForResource1 ??=
        _registerName(_lib, "setTimeoutIntervalForResource:");
    _lib._objc_msgSend_54(_id, _sel_timeoutIntervalForResource1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_networkServiceType;
  int get networkServiceType {
    _sel_networkServiceType ??= _registerName(_lib, "networkServiceType");
    return _lib._objc_msgSend_49(_id, _sel_networkServiceType!);
  }

  static ffi.Pointer<ObjCSel>? _sel_networkServiceType1;
  set networkServiceType(int value) {
    _sel_networkServiceType1 ??= _registerName(_lib, "setNetworkServiceType:");
    _lib._objc_msgSend_57(_id, _sel_networkServiceType1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsCellularAccess;
  bool get allowsCellularAccess {
    _sel_allowsCellularAccess ??= _registerName(_lib, "allowsCellularAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsCellularAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsCellularAccess1;
  set allowsCellularAccess(bool value) {
    _sel_allowsCellularAccess1 ??=
        _registerName(_lib, "setAllowsCellularAccess:");
    _lib._objc_msgSend_58(_id, _sel_allowsCellularAccess1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsExpensiveNetworkAccess;
  bool get allowsExpensiveNetworkAccess {
    _sel_allowsExpensiveNetworkAccess ??=
        _registerName(_lib, "allowsExpensiveNetworkAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsExpensiveNetworkAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsExpensiveNetworkAccess1;
  set allowsExpensiveNetworkAccess(bool value) {
    _sel_allowsExpensiveNetworkAccess1 ??=
        _registerName(_lib, "setAllowsExpensiveNetworkAccess:");
    _lib._objc_msgSend_58(_id, _sel_allowsExpensiveNetworkAccess1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsConstrainedNetworkAccess;
  bool get allowsConstrainedNetworkAccess {
    _sel_allowsConstrainedNetworkAccess ??=
        _registerName(_lib, "allowsConstrainedNetworkAccess");
    return _lib._objc_msgSend_16(_id, _sel_allowsConstrainedNetworkAccess!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allowsConstrainedNetworkAccess1;
  set allowsConstrainedNetworkAccess(bool value) {
    _sel_allowsConstrainedNetworkAccess1 ??=
        _registerName(_lib, "setAllowsConstrainedNetworkAccess:");
    _lib._objc_msgSend_58(_id, _sel_allowsConstrainedNetworkAccess1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_waitsForConnectivity;
  bool get waitsForConnectivity {
    _sel_waitsForConnectivity ??= _registerName(_lib, "waitsForConnectivity");
    return _lib._objc_msgSend_16(_id, _sel_waitsForConnectivity!);
  }

  static ffi.Pointer<ObjCSel>? _sel_waitsForConnectivity1;
  set waitsForConnectivity(bool value) {
    _sel_waitsForConnectivity1 ??=
        _registerName(_lib, "setWaitsForConnectivity:");
    _lib._objc_msgSend_58(_id, _sel_waitsForConnectivity1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_discretionary;
  bool get discretionary {
    _sel_discretionary ??= _registerName(_lib, "isDiscretionary");
    return _lib._objc_msgSend_16(_id, _sel_discretionary!);
  }

  static ffi.Pointer<ObjCSel>? _sel_discretionary1;
  set discretionary(bool value) {
    _sel_discretionary1 ??= _registerName(_lib, "setDiscretionary:");
    _lib._objc_msgSend_58(_id, _sel_discretionary1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_sharedContainerIdentifier;
  NSObject get sharedContainerIdentifier {
    _sel_sharedContainerIdentifier ??=
        _registerName(_lib, "sharedContainerIdentifier");
    final _ret = _lib._objc_msgSend_171(_id, _sel_sharedContainerIdentifier!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_sharedContainerIdentifier1;
  set sharedContainerIdentifier(NSObject value) {
    _sel_sharedContainerIdentifier1 ??=
        _registerName(_lib, "setSharedContainerIdentifier:");
    _lib._objc_msgSend_172(_id, _sel_sharedContainerIdentifier1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_sessionSendsLaunchEvents;
  bool get sessionSendsLaunchEvents {
    _sel_sessionSendsLaunchEvents ??=
        _registerName(_lib, "sessionSendsLaunchEvents");
    return _lib._objc_msgSend_16(_id, _sel_sessionSendsLaunchEvents!);
  }

  static ffi.Pointer<ObjCSel>? _sel_sessionSendsLaunchEvents1;
  set sessionSendsLaunchEvents(bool value) {
    _sel_sessionSendsLaunchEvents1 ??=
        _registerName(_lib, "setSessionSendsLaunchEvents:");
    _lib._objc_msgSend_58(_id, _sel_sessionSendsLaunchEvents1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_connectionProxyDictionary;
  NSObject get connectionProxyDictionary {
    _sel_connectionProxyDictionary ??=
        _registerName(_lib, "connectionProxyDictionary");
    final _ret = _lib._objc_msgSend_173(_id, _sel_connectionProxyDictionary!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_connectionProxyDictionary1;
  set connectionProxyDictionary(NSObject value) {
    _sel_connectionProxyDictionary1 ??=
        _registerName(_lib, "setConnectionProxyDictionary:");
    _lib._objc_msgSend_174(_id, _sel_connectionProxyDictionary1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMinimumSupportedProtocol;
  int get TLSMinimumSupportedProtocol {
    _sel_TLSMinimumSupportedProtocol ??=
        _registerName(_lib, "TLSMinimumSupportedProtocol");
    return _lib._objc_msgSend_175(_id, _sel_TLSMinimumSupportedProtocol!);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMinimumSupportedProtocol1;
  set TLSMinimumSupportedProtocol(int value) {
    _sel_TLSMinimumSupportedProtocol1 ??=
        _registerName(_lib, "setTLSMinimumSupportedProtocol:");
    _lib._objc_msgSend_176(_id, _sel_TLSMinimumSupportedProtocol1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMaximumSupportedProtocol;
  int get TLSMaximumSupportedProtocol {
    _sel_TLSMaximumSupportedProtocol ??=
        _registerName(_lib, "TLSMaximumSupportedProtocol");
    return _lib._objc_msgSend_175(_id, _sel_TLSMaximumSupportedProtocol!);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMaximumSupportedProtocol1;
  set TLSMaximumSupportedProtocol(int value) {
    _sel_TLSMaximumSupportedProtocol1 ??=
        _registerName(_lib, "setTLSMaximumSupportedProtocol:");
    _lib._objc_msgSend_176(_id, _sel_TLSMaximumSupportedProtocol1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMinimumSupportedProtocolVersion;
  int get TLSMinimumSupportedProtocolVersion {
    _sel_TLSMinimumSupportedProtocolVersion ??=
        _registerName(_lib, "TLSMinimumSupportedProtocolVersion");
    return _lib._objc_msgSend_177(
        _id, _sel_TLSMinimumSupportedProtocolVersion!);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMinimumSupportedProtocolVersion1;
  set TLSMinimumSupportedProtocolVersion(int value) {
    _sel_TLSMinimumSupportedProtocolVersion1 ??=
        _registerName(_lib, "setTLSMinimumSupportedProtocolVersion:");
    _lib._objc_msgSend_178(
        _id, _sel_TLSMinimumSupportedProtocolVersion1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMaximumSupportedProtocolVersion;
  int get TLSMaximumSupportedProtocolVersion {
    _sel_TLSMaximumSupportedProtocolVersion ??=
        _registerName(_lib, "TLSMaximumSupportedProtocolVersion");
    return _lib._objc_msgSend_177(
        _id, _sel_TLSMaximumSupportedProtocolVersion!);
  }

  static ffi.Pointer<ObjCSel>? _sel_TLSMaximumSupportedProtocolVersion1;
  set TLSMaximumSupportedProtocolVersion(int value) {
    _sel_TLSMaximumSupportedProtocolVersion1 ??=
        _registerName(_lib, "setTLSMaximumSupportedProtocolVersion:");
    _lib._objc_msgSend_178(
        _id, _sel_TLSMaximumSupportedProtocolVersion1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPShouldUsePipelining;
  bool get HTTPShouldUsePipelining {
    _sel_HTTPShouldUsePipelining ??=
        _registerName(_lib, "HTTPShouldUsePipelining");
    return _lib._objc_msgSend_16(_id, _sel_HTTPShouldUsePipelining!);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPShouldUsePipelining1;
  set HTTPShouldUsePipelining(bool value) {
    _sel_HTTPShouldUsePipelining1 ??=
        _registerName(_lib, "setHTTPShouldUsePipelining:");
    _lib._objc_msgSend_58(_id, _sel_HTTPShouldUsePipelining1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPShouldSetCookies;
  bool get HTTPShouldSetCookies {
    _sel_HTTPShouldSetCookies ??= _registerName(_lib, "HTTPShouldSetCookies");
    return _lib._objc_msgSend_16(_id, _sel_HTTPShouldSetCookies!);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPShouldSetCookies1;
  set HTTPShouldSetCookies(bool value) {
    _sel_HTTPShouldSetCookies1 ??=
        _registerName(_lib, "setHTTPShouldSetCookies:");
    _lib._objc_msgSend_58(_id, _sel_HTTPShouldSetCookies1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPCookieAcceptPolicy;
  int get HTTPCookieAcceptPolicy {
    _sel_HTTPCookieAcceptPolicy ??=
        _registerName(_lib, "HTTPCookieAcceptPolicy");
    return _lib._objc_msgSend_67(_id, _sel_HTTPCookieAcceptPolicy!);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPCookieAcceptPolicy1;
  set HTTPCookieAcceptPolicy(int value) {
    _sel_HTTPCookieAcceptPolicy1 ??=
        _registerName(_lib, "setHTTPCookieAcceptPolicy:");
    _lib._objc_msgSend_68(_id, _sel_HTTPCookieAcceptPolicy1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPAdditionalHeaders;
  NSObject get HTTPAdditionalHeaders {
    _sel_HTTPAdditionalHeaders ??= _registerName(_lib, "HTTPAdditionalHeaders");
    final _ret = _lib._objc_msgSend_179(_id, _sel_HTTPAdditionalHeaders!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPAdditionalHeaders1;
  set HTTPAdditionalHeaders(NSObject value) {
    _sel_HTTPAdditionalHeaders1 ??=
        _registerName(_lib, "setHTTPAdditionalHeaders:");
    _lib._objc_msgSend_180(_id, _sel_HTTPAdditionalHeaders1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPMaximumConnectionsPerHost;
  int get HTTPMaximumConnectionsPerHost {
    _sel_HTTPMaximumConnectionsPerHost ??=
        _registerName(_lib, "HTTPMaximumConnectionsPerHost");
    return _lib._objc_msgSend_155(_id, _sel_HTTPMaximumConnectionsPerHost!);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPMaximumConnectionsPerHost1;
  set HTTPMaximumConnectionsPerHost(int value) {
    _sel_HTTPMaximumConnectionsPerHost1 ??=
        _registerName(_lib, "setHTTPMaximumConnectionsPerHost:");
    _lib._objc_msgSend_156(_id, _sel_HTTPMaximumConnectionsPerHost1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPCookieStorage;
  NSObject get HTTPCookieStorage {
    _sel_HTTPCookieStorage ??= _registerName(_lib, "HTTPCookieStorage");
    final _ret = _lib._objc_msgSend_181(_id, _sel_HTTPCookieStorage!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_HTTPCookieStorage1;
  set HTTPCookieStorage(NSObject value) {
    _sel_HTTPCookieStorage1 ??= _registerName(_lib, "setHTTPCookieStorage:");
    _lib._objc_msgSend_182(_id, _sel_HTTPCookieStorage1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLCredentialStorage;
  NSObject get URLCredentialStorage {
    _sel_URLCredentialStorage ??= _registerName(_lib, "URLCredentialStorage");
    final _ret = _lib._objc_msgSend_183(_id, _sel_URLCredentialStorage!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLCredentialStorage1;
  set URLCredentialStorage(NSObject value) {
    _sel_URLCredentialStorage1 ??=
        _registerName(_lib, "setURLCredentialStorage:");
    _lib._objc_msgSend_184(_id, _sel_URLCredentialStorage1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLCache;
  NSObject get URLCache {
    _sel_URLCache ??= _registerName(_lib, "URLCache");
    final _ret = _lib._objc_msgSend_185(_id, _sel_URLCache!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLCache1;
  set URLCache(NSObject value) {
    _sel_URLCache1 ??= _registerName(_lib, "setURLCache:");
    _lib._objc_msgSend_186(_id, _sel_URLCache1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_shouldUseExtendedBackgroundIdleMode;
  bool get shouldUseExtendedBackgroundIdleMode {
    _sel_shouldUseExtendedBackgroundIdleMode ??=
        _registerName(_lib, "shouldUseExtendedBackgroundIdleMode");
    return _lib._objc_msgSend_16(
        _id, _sel_shouldUseExtendedBackgroundIdleMode!);
  }

  static ffi.Pointer<ObjCSel>? _sel_shouldUseExtendedBackgroundIdleMode1;
  set shouldUseExtendedBackgroundIdleMode(bool value) {
    _sel_shouldUseExtendedBackgroundIdleMode1 ??=
        _registerName(_lib, "setShouldUseExtendedBackgroundIdleMode:");
    _lib._objc_msgSend_58(
        _id, _sel_shouldUseExtendedBackgroundIdleMode1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_protocolClasses;
  NSObject get protocolClasses {
    _sel_protocolClasses ??= _registerName(_lib, "protocolClasses");
    final _ret = _lib._objc_msgSend_187(_id, _sel_protocolClasses!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_protocolClasses1;
  set protocolClasses(NSObject value) {
    _sel_protocolClasses1 ??= _registerName(_lib, "setProtocolClasses:");
    _lib._objc_msgSend_188(_id, _sel_protocolClasses1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_multipathServiceType;
  int get multipathServiceType {
    _sel_multipathServiceType ??= _registerName(_lib, "multipathServiceType");
    return _lib._objc_msgSend_189(_id, _sel_multipathServiceType!);
  }

  static ffi.Pointer<ObjCSel>? _sel_multipathServiceType1;
  set multipathServiceType(int value) {
    _sel_multipathServiceType1 ??=
        _registerName(_lib, "setMultipathServiceType:");
    _lib._objc_msgSend_190(_id, _sel_multipathServiceType1!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionConfiguration init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionConfiguration new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionConfiguration");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionConfiguration new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionConfiguration");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionConfiguration alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionConfiguration");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionConfiguration._(_ret, _lib);
  }
}

abstract class NSURLSessionDelayedRequestDisposition {
  static const int NSURLSessionDelayedRequestContinueLoading = 0;
  static const int NSURLSessionDelayedRequestUseNewRequest = 1;
  static const int NSURLSessionDelayedRequestCancel = 2;
}

abstract class NSURLSessionAuthChallengeDisposition {
  static const int NSURLSessionAuthChallengeUseCredential = 0;
  static const int NSURLSessionAuthChallengePerformDefaultHandling = 1;
  static const int NSURLSessionAuthChallengeCancelAuthenticationChallenge = 2;
  static const int NSURLSessionAuthChallengeRejectProtectionSpace = 3;
}

abstract class NSURLSessionResponseDisposition {
  static const int NSURLSessionResponseCancel = 0;
  static const int NSURLSessionResponseAllow = 1;
  static const int NSURLSessionResponseBecomeDownload = 2;
  static const int NSURLSessionResponseBecomeStream = 3;
}

abstract class NSURLSessionTaskMetricsResourceFetchType {
  static const int NSURLSessionTaskMetricsResourceFetchTypeUnknown = 0;
  static const int NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad = 1;
  static const int NSURLSessionTaskMetricsResourceFetchTypeServerPush = 2;
  static const int NSURLSessionTaskMetricsResourceFetchTypeLocalCache = 3;
}

abstract class NSURLSessionTaskMetricsDomainResolutionProtocol {
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolUnknown = 0;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolUDP = 1;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolTCP = 2;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolTLS = 3;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS = 4;
}

class NSURLSessionTaskTransactionMetrics extends NSObject {
  NSURLSessionTaskTransactionMetrics._(
      ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionTaskTransactionMetrics castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSURLSessionTaskTransactionMetrics._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_request;
  NSObject get request {
    _sel_request ??= _registerName(_lib, "request");
    final _ret = _lib._objc_msgSend_191(_id, _sel_request!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_response;
  NSObject get response {
    _sel_response ??= _registerName(_lib, "response");
    final _ret = _lib._objc_msgSend_192(_id, _sel_response!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fetchStartDate;
  NSObject get fetchStartDate {
    _sel_fetchStartDate ??= _registerName(_lib, "fetchStartDate");
    final _ret = _lib._objc_msgSend_193(_id, _sel_fetchStartDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_domainLookupStartDate;
  NSObject get domainLookupStartDate {
    _sel_domainLookupStartDate ??= _registerName(_lib, "domainLookupStartDate");
    final _ret = _lib._objc_msgSend_194(_id, _sel_domainLookupStartDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_domainLookupEndDate;
  NSObject get domainLookupEndDate {
    _sel_domainLookupEndDate ??= _registerName(_lib, "domainLookupEndDate");
    final _ret = _lib._objc_msgSend_195(_id, _sel_domainLookupEndDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_connectStartDate;
  NSObject get connectStartDate {
    _sel_connectStartDate ??= _registerName(_lib, "connectStartDate");
    final _ret = _lib._objc_msgSend_196(_id, _sel_connectStartDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_secureConnectionStartDate;
  NSObject get secureConnectionStartDate {
    _sel_secureConnectionStartDate ??=
        _registerName(_lib, "secureConnectionStartDate");
    final _ret = _lib._objc_msgSend_197(_id, _sel_secureConnectionStartDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_secureConnectionEndDate;
  NSObject get secureConnectionEndDate {
    _sel_secureConnectionEndDate ??=
        _registerName(_lib, "secureConnectionEndDate");
    final _ret = _lib._objc_msgSend_198(_id, _sel_secureConnectionEndDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_connectEndDate;
  NSObject get connectEndDate {
    _sel_connectEndDate ??= _registerName(_lib, "connectEndDate");
    final _ret = _lib._objc_msgSend_199(_id, _sel_connectEndDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestStartDate;
  NSObject get requestStartDate {
    _sel_requestStartDate ??= _registerName(_lib, "requestStartDate");
    final _ret = _lib._objc_msgSend_200(_id, _sel_requestStartDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_requestEndDate;
  NSObject get requestEndDate {
    _sel_requestEndDate ??= _registerName(_lib, "requestEndDate");
    final _ret = _lib._objc_msgSend_201(_id, _sel_requestEndDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_responseStartDate;
  NSObject get responseStartDate {
    _sel_responseStartDate ??= _registerName(_lib, "responseStartDate");
    final _ret = _lib._objc_msgSend_202(_id, _sel_responseStartDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_responseEndDate;
  NSObject get responseEndDate {
    _sel_responseEndDate ??= _registerName(_lib, "responseEndDate");
    final _ret = _lib._objc_msgSend_203(_id, _sel_responseEndDate!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_networkProtocolName;
  NSObject get networkProtocolName {
    _sel_networkProtocolName ??= _registerName(_lib, "networkProtocolName");
    final _ret = _lib._objc_msgSend_204(_id, _sel_networkProtocolName!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_proxyConnection;
  bool get proxyConnection {
    _sel_proxyConnection ??= _registerName(_lib, "isProxyConnection");
    return _lib._objc_msgSend_16(_id, _sel_proxyConnection!);
  }

  static ffi.Pointer<ObjCSel>? _sel_reusedConnection;
  bool get reusedConnection {
    _sel_reusedConnection ??= _registerName(_lib, "isReusedConnection");
    return _lib._objc_msgSend_16(_id, _sel_reusedConnection!);
  }

  static ffi.Pointer<ObjCSel>? _sel_resourceFetchType;
  int get resourceFetchType {
    _sel_resourceFetchType ??= _registerName(_lib, "resourceFetchType");
    return _lib._objc_msgSend_205(_id, _sel_resourceFetchType!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfRequestHeaderBytesSent;
  int get countOfRequestHeaderBytesSent {
    _sel_countOfRequestHeaderBytesSent ??=
        _registerName(_lib, "countOfRequestHeaderBytesSent");
    return _lib._objc_msgSend_84(_id, _sel_countOfRequestHeaderBytesSent!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfRequestBodyBytesSent;
  int get countOfRequestBodyBytesSent {
    _sel_countOfRequestBodyBytesSent ??=
        _registerName(_lib, "countOfRequestBodyBytesSent");
    return _lib._objc_msgSend_84(_id, _sel_countOfRequestBodyBytesSent!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfRequestBodyBytesBeforeEncoding;
  int get countOfRequestBodyBytesBeforeEncoding {
    _sel_countOfRequestBodyBytesBeforeEncoding ??=
        _registerName(_lib, "countOfRequestBodyBytesBeforeEncoding");
    return _lib._objc_msgSend_84(
        _id, _sel_countOfRequestBodyBytesBeforeEncoding!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfResponseHeaderBytesReceived;
  int get countOfResponseHeaderBytesReceived {
    _sel_countOfResponseHeaderBytesReceived ??=
        _registerName(_lib, "countOfResponseHeaderBytesReceived");
    return _lib._objc_msgSend_84(_id, _sel_countOfResponseHeaderBytesReceived!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfResponseBodyBytesReceived;
  int get countOfResponseBodyBytesReceived {
    _sel_countOfResponseBodyBytesReceived ??=
        _registerName(_lib, "countOfResponseBodyBytesReceived");
    return _lib._objc_msgSend_84(_id, _sel_countOfResponseBodyBytesReceived!);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfResponseBodyBytesAfterDecoding;
  int get countOfResponseBodyBytesAfterDecoding {
    _sel_countOfResponseBodyBytesAfterDecoding ??=
        _registerName(_lib, "countOfResponseBodyBytesAfterDecoding");
    return _lib._objc_msgSend_84(
        _id, _sel_countOfResponseBodyBytesAfterDecoding!);
  }

  static ffi.Pointer<ObjCSel>? _sel_localAddress;
  NSObject get localAddress {
    _sel_localAddress ??= _registerName(_lib, "localAddress");
    final _ret = _lib._objc_msgSend_206(_id, _sel_localAddress!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_localPort;
  NSObject get localPort {
    _sel_localPort ??= _registerName(_lib, "localPort");
    final _ret = _lib._objc_msgSend_207(_id, _sel_localPort!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_remoteAddress;
  NSObject get remoteAddress {
    _sel_remoteAddress ??= _registerName(_lib, "remoteAddress");
    final _ret = _lib._objc_msgSend_208(_id, _sel_remoteAddress!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_remotePort;
  NSObject get remotePort {
    _sel_remotePort ??= _registerName(_lib, "remotePort");
    final _ret = _lib._objc_msgSend_209(_id, _sel_remotePort!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_negotiatedTLSProtocolVersion;
  NSObject get negotiatedTLSProtocolVersion {
    _sel_negotiatedTLSProtocolVersion ??=
        _registerName(_lib, "negotiatedTLSProtocolVersion");
    final _ret =
        _lib._objc_msgSend_210(_id, _sel_negotiatedTLSProtocolVersion!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_negotiatedTLSCipherSuite;
  NSObject get negotiatedTLSCipherSuite {
    _sel_negotiatedTLSCipherSuite ??=
        _registerName(_lib, "negotiatedTLSCipherSuite");
    final _ret = _lib._objc_msgSend_211(_id, _sel_negotiatedTLSCipherSuite!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_cellular;
  bool get cellular {
    _sel_cellular ??= _registerName(_lib, "isCellular");
    return _lib._objc_msgSend_16(_id, _sel_cellular!);
  }

  static ffi.Pointer<ObjCSel>? _sel_expensive;
  bool get expensive {
    _sel_expensive ??= _registerName(_lib, "isExpensive");
    return _lib._objc_msgSend_16(_id, _sel_expensive!);
  }

  static ffi.Pointer<ObjCSel>? _sel_constrained;
  bool get constrained {
    _sel_constrained ??= _registerName(_lib, "isConstrained");
    return _lib._objc_msgSend_16(_id, _sel_constrained!);
  }

  static ffi.Pointer<ObjCSel>? _sel_multipath;
  bool get multipath {
    _sel_multipath ??= _registerName(_lib, "isMultipath");
    return _lib._objc_msgSend_16(_id, _sel_multipath!);
  }

  static ffi.Pointer<ObjCSel>? _sel_domainResolutionProtocol;
  int get domainResolutionProtocol {
    _sel_domainResolutionProtocol ??=
        _registerName(_lib, "domainResolutionProtocol");
    return _lib._objc_msgSend_212(_id, _sel_domainResolutionProtocol!);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionTaskTransactionMetrics init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionTaskTransactionMetrics new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTaskTransactionMetrics");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionTaskTransactionMetrics new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTaskTransactionMetrics");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionTaskTransactionMetrics alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTaskTransactionMetrics");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }
}

class NSURLSessionTaskMetrics extends NSObject {
  NSURLSessionTaskMetrics._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLSessionTaskMetrics castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionTaskMetrics._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_transactionMetrics;
  NSObject get transactionMetrics {
    _sel_transactionMetrics ??= _registerName(_lib, "transactionMetrics");
    final _ret = _lib._objc_msgSend_213(_id, _sel_transactionMetrics!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_taskInterval;
  NSObject get taskInterval {
    _sel_taskInterval ??= _registerName(_lib, "taskInterval");
    final _ret = _lib._objc_msgSend_214(_id, _sel_taskInterval!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_redirectCount;
  int get redirectCount {
    _sel_redirectCount ??= _registerName(_lib, "redirectCount");
    return _lib._objc_msgSend_20(_id, _sel_redirectCount!);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLSessionTaskMetrics init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLSessionTaskMetrics new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTaskMetrics");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new2;
  static NSURLSessionTaskMetrics new2(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTaskMetrics");
    _sel_new2 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new2!);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLSessionTaskMetrics alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLSessionTaskMetrics");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }
}

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_getValue_size;
  void getValue_size(ffi.Pointer<ffi.Void> value, int size) {
    _sel_getValue_size ??= _registerName(_lib, "getValue:size:");
    _lib._objc_msgSend_215(_id, _sel_getValue_size!, value, size);
  }

  static ffi.Pointer<ObjCSel>? _sel_objCType;
  ffi.Pointer<pkg_ffi.Char> get objCType {
    _sel_objCType ??= _registerName(_lib, "objCType");
    return _lib._objc_msgSend_216(_id, _sel_objCType!);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithBytes_objCType;
  NSValue initWithBytes_objCType(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    _sel_initWithBytes_objCType ??=
        _registerName(_lib, "initWithBytes:objCType:");
    final _ret =
        _lib._objc_msgSend_217(_id, _sel_initWithBytes_objCType!, value, type);
    return NSValue._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  NSValue initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_218(_id, _sel_initWithCoder!, coder._id);
    return NSValue._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSValue new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSValue");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSValue._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSValue alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSValue");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSValue._(_ret, _lib);
  }
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  @override
  NSNumber initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_219(_id, _sel_initWithCoder!, coder._id);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithChar;
  NSNumber initWithChar(int value) {
    _sel_initWithChar ??= _registerName(_lib, "initWithChar:");
    final _ret = _lib._objc_msgSend_220(_id, _sel_initWithChar!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithUnsignedChar;
  NSNumber initWithUnsignedChar(int value) {
    _sel_initWithUnsignedChar ??= _registerName(_lib, "initWithUnsignedChar:");
    final _ret = _lib._objc_msgSend_221(_id, _sel_initWithUnsignedChar!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithShort;
  NSNumber initWithShort(int value) {
    _sel_initWithShort ??= _registerName(_lib, "initWithShort:");
    final _ret = _lib._objc_msgSend_222(_id, _sel_initWithShort!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithUnsignedShort;
  NSNumber initWithUnsignedShort(int value) {
    _sel_initWithUnsignedShort ??=
        _registerName(_lib, "initWithUnsignedShort:");
    final _ret =
        _lib._objc_msgSend_223(_id, _sel_initWithUnsignedShort!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithInt;
  NSNumber initWithInt(int value) {
    _sel_initWithInt ??= _registerName(_lib, "initWithInt:");
    final _ret = _lib._objc_msgSend_224(_id, _sel_initWithInt!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithUnsignedInt;
  NSNumber initWithUnsignedInt(int value) {
    _sel_initWithUnsignedInt ??= _registerName(_lib, "initWithUnsignedInt:");
    final _ret = _lib._objc_msgSend_225(_id, _sel_initWithUnsignedInt!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithLong;
  NSNumber initWithLong(int value) {
    _sel_initWithLong ??= _registerName(_lib, "initWithLong:");
    final _ret = _lib._objc_msgSend_226(_id, _sel_initWithLong!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithUnsignedLong;
  NSNumber initWithUnsignedLong(int value) {
    _sel_initWithUnsignedLong ??= _registerName(_lib, "initWithUnsignedLong:");
    final _ret = _lib._objc_msgSend_227(_id, _sel_initWithUnsignedLong!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithLongLong;
  NSNumber initWithLongLong(int value) {
    _sel_initWithLongLong ??= _registerName(_lib, "initWithLongLong:");
    final _ret = _lib._objc_msgSend_228(_id, _sel_initWithLongLong!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithUnsignedLongLong;
  NSNumber initWithUnsignedLongLong(int value) {
    _sel_initWithUnsignedLongLong ??=
        _registerName(_lib, "initWithUnsignedLongLong:");
    final _ret =
        _lib._objc_msgSend_229(_id, _sel_initWithUnsignedLongLong!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithFloat;
  NSNumber initWithFloat(double value) {
    _sel_initWithFloat ??= _registerName(_lib, "initWithFloat:");
    final _ret = _lib._objc_msgSend_230(_id, _sel_initWithFloat!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithDouble;
  NSNumber initWithDouble(double value) {
    _sel_initWithDouble ??= _registerName(_lib, "initWithDouble:");
    final _ret = _lib._objc_msgSend_231(_id, _sel_initWithDouble!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithBool;
  NSNumber initWithBool(bool value) {
    _sel_initWithBool ??= _registerName(_lib, "initWithBool:");
    final _ret = _lib._objc_msgSend_232(_id, _sel_initWithBool!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithInteger;
  NSNumber initWithInteger(int value) {
    _sel_initWithInteger ??= _registerName(_lib, "initWithInteger:");
    final _ret = _lib._objc_msgSend_233(_id, _sel_initWithInteger!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithUnsignedInteger;
  NSNumber initWithUnsignedInteger(int value) {
    _sel_initWithUnsignedInteger ??=
        _registerName(_lib, "initWithUnsignedInteger:");
    final _ret =
        _lib._objc_msgSend_234(_id, _sel_initWithUnsignedInteger!, value);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_charValue;
  int get charValue {
    _sel_charValue ??= _registerName(_lib, "charValue");
    return _lib._objc_msgSend_235(_id, _sel_charValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_unsignedCharValue;
  int get unsignedCharValue {
    _sel_unsignedCharValue ??= _registerName(_lib, "unsignedCharValue");
    return _lib._objc_msgSend_236(_id, _sel_unsignedCharValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_shortValue;
  int get shortValue {
    _sel_shortValue ??= _registerName(_lib, "shortValue");
    return _lib._objc_msgSend_237(_id, _sel_shortValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_unsignedShortValue;
  int get unsignedShortValue {
    _sel_unsignedShortValue ??= _registerName(_lib, "unsignedShortValue");
    return _lib._objc_msgSend_238(_id, _sel_unsignedShortValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_intValue;
  int get intValue {
    _sel_intValue ??= _registerName(_lib, "intValue");
    return _lib._objc_msgSend_239(_id, _sel_intValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_unsignedIntValue;
  int get unsignedIntValue {
    _sel_unsignedIntValue ??= _registerName(_lib, "unsignedIntValue");
    return _lib._objc_msgSend_240(_id, _sel_unsignedIntValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_longValue;
  int get longValue {
    _sel_longValue ??= _registerName(_lib, "longValue");
    return _lib._objc_msgSend_241(_id, _sel_longValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_unsignedLongValue;
  int get unsignedLongValue {
    _sel_unsignedLongValue ??= _registerName(_lib, "unsignedLongValue");
    return _lib._objc_msgSend_242(_id, _sel_unsignedLongValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_longLongValue;
  int get longLongValue {
    _sel_longLongValue ??= _registerName(_lib, "longLongValue");
    return _lib._objc_msgSend_243(_id, _sel_longLongValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_unsignedLongLongValue;
  int get unsignedLongLongValue {
    _sel_unsignedLongLongValue ??= _registerName(_lib, "unsignedLongLongValue");
    return _lib._objc_msgSend_244(_id, _sel_unsignedLongLongValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_floatValue;
  double get floatValue {
    _sel_floatValue ??= _registerName(_lib, "floatValue");
    return _lib._objc_msgSend_136(_id, _sel_floatValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_doubleValue;
  double get doubleValue {
    _sel_doubleValue ??= _registerName(_lib, "doubleValue");
    return _lib._objc_msgSend_96(_id, _sel_doubleValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_boolValue;
  bool get boolValue {
    _sel_boolValue ??= _registerName(_lib, "boolValue");
    return _lib._objc_msgSend_16(_id, _sel_boolValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_integerValue;
  int get integerValue {
    _sel_integerValue ??= _registerName(_lib, "integerValue");
    return _lib._objc_msgSend_155(_id, _sel_integerValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_unsignedIntegerValue;
  int get unsignedIntegerValue {
    _sel_unsignedIntegerValue ??= _registerName(_lib, "unsignedIntegerValue");
    return _lib._objc_msgSend_20(_id, _sel_unsignedIntegerValue!);
  }

  static ffi.Pointer<ObjCSel>? _sel_stringValue;
  NSObject get stringValue {
    _sel_stringValue ??= _registerName(_lib, "stringValue");
    final _ret = _lib._objc_msgSend_245(_id, _sel_stringValue!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_compare;
  int compare(NSObject otherNumber) {
    _sel_compare ??= _registerName(_lib, "compare:");
    return _lib._objc_msgSend_246(_id, _sel_compare!, otherNumber._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_isEqualToNumber;
  bool isEqualToNumber(NSObject number) {
    _sel_isEqualToNumber ??= _registerName(_lib, "isEqualToNumber:");
    return _lib._objc_msgSend_247(_id, _sel_isEqualToNumber!, number._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_descriptionWithLocale;
  NSString descriptionWithLocale(NSObject locale) {
    _sel_descriptionWithLocale ??=
        _registerName(_lib, "descriptionWithLocale:");
    final _ret =
        _lib._objc_msgSend_248(_id, _sel_descriptionWithLocale!, locale._id);
    return NSString._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSNumber new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSNumber");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSNumber._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSNumber alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSNumber");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSNumber._(_ret, _lib);
  }
}

class _NSRange extends ffi.Struct {
  @NSUInteger()
  external int location;

  @NSUInteger()
  external int length;
}

typedef NSRange = _NSRange;

abstract class NSCollectionChangeType {
  static const int NSCollectionChangeInsert = 0;
  static const int NSCollectionChangeRemove = 1;
}

class NSOrderedCollectionChange extends NSObject {
  NSOrderedCollectionChange._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSOrderedCollectionChange castFrom<T extends _ObjCWrapper>(T other) {
    return NSOrderedCollectionChange._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_object;
  NSObject get object {
    _sel_object ??= _registerName(_lib, "object");
    final _ret = _lib._objc_msgSend_249(_id, _sel_object!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_changeType;
  int get changeType {
    _sel_changeType ??= _registerName(_lib, "changeType");
    return _lib._objc_msgSend_250(_id, _sel_changeType!);
  }

  static ffi.Pointer<ObjCSel>? _sel_index;
  int get index {
    _sel_index ??= _registerName(_lib, "index");
    return _lib._objc_msgSend_20(_id, _sel_index!);
  }

  static ffi.Pointer<ObjCSel>? _sel_associatedIndex;
  int get associatedIndex {
    _sel_associatedIndex ??= _registerName(_lib, "associatedIndex");
    return _lib._objc_msgSend_20(_id, _sel_associatedIndex!);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSObject init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_251(_id, _sel_init!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithObject_type_index;
  NSOrderedCollectionChange initWithObject_type_index(
      NSObject anObject, int type, int index) {
    _sel_initWithObject_type_index ??=
        _registerName(_lib, "initWithObject:type:index:");
    final _ret = _lib._objc_msgSend_252(
        _id, _sel_initWithObject_type_index!, anObject._id, type, index);
    return NSOrderedCollectionChange._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithObject_type_index_associatedIndex;
  NSOrderedCollectionChange initWithObject_type_index_associatedIndex(
      NSObject anObject, int type, int index, int associatedIndex) {
    _sel_initWithObject_type_index_associatedIndex ??=
        _registerName(_lib, "initWithObject:type:index:associatedIndex:");
    final _ret = _lib._objc_msgSend_253(
        _id,
        _sel_initWithObject_type_index_associatedIndex!,
        anObject._id,
        type,
        index,
        associatedIndex);
    return NSOrderedCollectionChange._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSOrderedCollectionChange new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSOrderedCollectionChange");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSOrderedCollectionChange._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSOrderedCollectionChange alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSOrderedCollectionChange");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSOrderedCollectionChange._(_ret, _lib);
  }
}

class NSIndexSet extends NSObject {
  NSIndexSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSIndexSet._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexSet;
  static NSIndexSet indexSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSIndexSet");
    _sel_indexSet ??= _registerName(_lib, "indexSet");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_indexSet!);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexSetWithIndex;
  static NSIndexSet indexSetWithIndex(NativeLibrary _lib, int value) {
    _class ??= _getClass(_lib, "NSIndexSet");
    _sel_indexSetWithIndex ??= _registerName(_lib, "indexSetWithIndex:");
    final _ret = _lib._objc_msgSend_75(_class!, _sel_indexSetWithIndex!, value);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexSetWithIndexesInRange;
  static NSIndexSet indexSetWithIndexesInRange(
      NativeLibrary _lib, NSRange range) {
    _class ??= _getClass(_lib, "NSIndexSet");
    _sel_indexSetWithIndexesInRange ??=
        _registerName(_lib, "indexSetWithIndexesInRange:");
    final _ret = _lib._objc_msgSend_254(
        _class!, _sel_indexSetWithIndexesInRange!, range);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithIndexesInRange;
  NSIndexSet initWithIndexesInRange(NSRange range) {
    _sel_initWithIndexesInRange ??=
        _registerName(_lib, "initWithIndexesInRange:");
    final _ret =
        _lib._objc_msgSend_254(_id, _sel_initWithIndexesInRange!, range);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithIndexSet;
  NSIndexSet initWithIndexSet(NSObject indexSet) {
    _sel_initWithIndexSet ??= _registerName(_lib, "initWithIndexSet:");
    final _ret =
        _lib._objc_msgSend_255(_id, _sel_initWithIndexSet!, indexSet._id);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithIndex;
  NSIndexSet initWithIndex(int value) {
    _sel_initWithIndex ??= _registerName(_lib, "initWithIndex:");
    final _ret = _lib._objc_msgSend_75(_id, _sel_initWithIndex!, value);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_isEqualToIndexSet;
  bool isEqualToIndexSet(NSObject indexSet) {
    _sel_isEqualToIndexSet ??= _registerName(_lib, "isEqualToIndexSet:");
    return _lib._objc_msgSend_256(_id, _sel_isEqualToIndexSet!, indexSet._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_count;
  int get count {
    _sel_count ??= _registerName(_lib, "count");
    return _lib._objc_msgSend_20(_id, _sel_count!);
  }

  static ffi.Pointer<ObjCSel>? _sel_firstIndex;
  int get firstIndex {
    _sel_firstIndex ??= _registerName(_lib, "firstIndex");
    return _lib._objc_msgSend_20(_id, _sel_firstIndex!);
  }

  static ffi.Pointer<ObjCSel>? _sel_lastIndex;
  int get lastIndex {
    _sel_lastIndex ??= _registerName(_lib, "lastIndex");
    return _lib._objc_msgSend_20(_id, _sel_lastIndex!);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexGreaterThanIndex;
  int indexGreaterThanIndex(int value) {
    _sel_indexGreaterThanIndex ??=
        _registerName(_lib, "indexGreaterThanIndex:");
    return _lib._objc_msgSend_257(_id, _sel_indexGreaterThanIndex!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexLessThanIndex;
  int indexLessThanIndex(int value) {
    _sel_indexLessThanIndex ??= _registerName(_lib, "indexLessThanIndex:");
    return _lib._objc_msgSend_257(_id, _sel_indexLessThanIndex!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexGreaterThanOrEqualToIndex;
  int indexGreaterThanOrEqualToIndex(int value) {
    _sel_indexGreaterThanOrEqualToIndex ??=
        _registerName(_lib, "indexGreaterThanOrEqualToIndex:");
    return _lib._objc_msgSend_257(
        _id, _sel_indexGreaterThanOrEqualToIndex!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexLessThanOrEqualToIndex;
  int indexLessThanOrEqualToIndex(int value) {
    _sel_indexLessThanOrEqualToIndex ??=
        _registerName(_lib, "indexLessThanOrEqualToIndex:");
    return _lib._objc_msgSend_257(
        _id, _sel_indexLessThanOrEqualToIndex!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_getIndexes_maxCount_inIndexRange;
  int getIndexes_maxCount_inIndexRange(ffi.Pointer<NSUInteger> indexBuffer,
      int bufferSize, NSRangePointer range) {
    _sel_getIndexes_maxCount_inIndexRange ??=
        _registerName(_lib, "getIndexes:maxCount:inIndexRange:");
    return _lib._objc_msgSend_258(_id, _sel_getIndexes_maxCount_inIndexRange!,
        indexBuffer, bufferSize, range);
  }

  static ffi.Pointer<ObjCSel>? _sel_countOfIndexesInRange;
  int countOfIndexesInRange(NSRange range) {
    _sel_countOfIndexesInRange ??=
        _registerName(_lib, "countOfIndexesInRange:");
    return _lib._objc_msgSend_259(_id, _sel_countOfIndexesInRange!, range);
  }

  static ffi.Pointer<ObjCSel>? _sel_containsIndex;
  bool containsIndex(int value) {
    _sel_containsIndex ??= _registerName(_lib, "containsIndex:");
    return _lib._objc_msgSend_260(_id, _sel_containsIndex!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_containsIndexesInRange;
  bool containsIndexesInRange(NSRange range) {
    _sel_containsIndexesInRange ??=
        _registerName(_lib, "containsIndexesInRange:");
    return _lib._objc_msgSend_261(_id, _sel_containsIndexesInRange!, range);
  }

  static ffi.Pointer<ObjCSel>? _sel_containsIndexes;
  bool containsIndexes(NSObject indexSet) {
    _sel_containsIndexes ??= _registerName(_lib, "containsIndexes:");
    return _lib._objc_msgSend_262(_id, _sel_containsIndexes!, indexSet._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_intersectsIndexesInRange;
  bool intersectsIndexesInRange(NSRange range) {
    _sel_intersectsIndexesInRange ??=
        _registerName(_lib, "intersectsIndexesInRange:");
    return _lib._objc_msgSend_261(_id, _sel_intersectsIndexesInRange!, range);
  }

  static ffi.Pointer<ObjCSel>? _sel_enumerateIndexesUsingBlock;
  void enumerateIndexesUsingBlock(NSObject block) {
    _sel_enumerateIndexesUsingBlock ??=
        _registerName(_lib, "enumerateIndexesUsingBlock:");
    _lib._objc_msgSend_263(_id, _sel_enumerateIndexesUsingBlock!, block._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_enumerateIndexesWithOptions_usingBlock;
  void enumerateIndexesWithOptions_usingBlock(int opts, NSObject block) {
    _sel_enumerateIndexesWithOptions_usingBlock ??=
        _registerName(_lib, "enumerateIndexesWithOptions:usingBlock:");
    _lib._objc_msgSend_264(
        _id, _sel_enumerateIndexesWithOptions_usingBlock!, opts, block._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_enumerateIndexesInRange_options_usingBlock;
  void enumerateIndexesInRange_options_usingBlock(
      NSRange range, int opts, NSObject block) {
    _sel_enumerateIndexesInRange_options_usingBlock ??=
        _registerName(_lib, "enumerateIndexesInRange:options:usingBlock:");
    _lib._objc_msgSend_265(
        _id,
        _sel_enumerateIndexesInRange_options_usingBlock!,
        range,
        opts,
        block._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexPassingTest;
  int indexPassingTest(NSObject predicate) {
    _sel_indexPassingTest ??= _registerName(_lib, "indexPassingTest:");
    return _lib._objc_msgSend_266(_id, _sel_indexPassingTest!, predicate._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexWithOptions_passingTest;
  int indexWithOptions_passingTest(int opts, NSObject predicate) {
    _sel_indexWithOptions_passingTest ??=
        _registerName(_lib, "indexWithOptions:passingTest:");
    return _lib._objc_msgSend_267(
        _id, _sel_indexWithOptions_passingTest!, opts, predicate._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexInRange_options_passingTest;
  int indexInRange_options_passingTest(
      NSRange range, int opts, NSObject predicate) {
    _sel_indexInRange_options_passingTest ??=
        _registerName(_lib, "indexInRange:options:passingTest:");
    return _lib._objc_msgSend_268(_id, _sel_indexInRange_options_passingTest!,
        range, opts, predicate._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexesPassingTest;
  NSIndexSet indexesPassingTest(NSObject predicate) {
    _sel_indexesPassingTest ??= _registerName(_lib, "indexesPassingTest:");
    final _ret =
        _lib._objc_msgSend_269(_id, _sel_indexesPassingTest!, predicate._id);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexesWithOptions_passingTest;
  NSIndexSet indexesWithOptions_passingTest(int opts, NSObject predicate) {
    _sel_indexesWithOptions_passingTest ??=
        _registerName(_lib, "indexesWithOptions:passingTest:");
    final _ret = _lib._objc_msgSend_270(
        _id, _sel_indexesWithOptions_passingTest!, opts, predicate._id);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexesInRange_options_passingTest;
  NSIndexSet indexesInRange_options_passingTest(
      NSRange range, int opts, NSObject predicate) {
    _sel_indexesInRange_options_passingTest ??=
        _registerName(_lib, "indexesInRange:options:passingTest:");
    final _ret = _lib._objc_msgSend_271(_id,
        _sel_indexesInRange_options_passingTest!, range, opts, predicate._id);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_enumerateRangesUsingBlock;
  void enumerateRangesUsingBlock(NSObject block) {
    _sel_enumerateRangesUsingBlock ??=
        _registerName(_lib, "enumerateRangesUsingBlock:");
    _lib._objc_msgSend_272(_id, _sel_enumerateRangesUsingBlock!, block._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_enumerateRangesWithOptions_usingBlock;
  void enumerateRangesWithOptions_usingBlock(int opts, NSObject block) {
    _sel_enumerateRangesWithOptions_usingBlock ??=
        _registerName(_lib, "enumerateRangesWithOptions:usingBlock:");
    _lib._objc_msgSend_273(
        _id, _sel_enumerateRangesWithOptions_usingBlock!, opts, block._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_enumerateRangesInRange_options_usingBlock;
  void enumerateRangesInRange_options_usingBlock(
      NSRange range, int opts, NSObject block) {
    _sel_enumerateRangesInRange_options_usingBlock ??=
        _registerName(_lib, "enumerateRangesInRange:options:usingBlock:");
    _lib._objc_msgSend_274(_id, _sel_enumerateRangesInRange_options_usingBlock!,
        range, opts, block._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSIndexSet new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSIndexSet");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSIndexSet alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSIndexSet");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSIndexSet._(_ret, _lib);
  }
}

typedef NSRangePointer = ffi.Pointer<NSRange>;

class NSMutableIndexSet extends NSIndexSet {
  NSMutableIndexSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSMutableIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableIndexSet._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_addIndexes;
  void addIndexes(NSObject indexSet) {
    _sel_addIndexes ??= _registerName(_lib, "addIndexes:");
    _lib._objc_msgSend_275(_id, _sel_addIndexes!, indexSet._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeIndexes;
  void removeIndexes(NSObject indexSet) {
    _sel_removeIndexes ??= _registerName(_lib, "removeIndexes:");
    _lib._objc_msgSend_276(_id, _sel_removeIndexes!, indexSet._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeAllIndexes;
  void removeAllIndexes() {
    _sel_removeAllIndexes ??= _registerName(_lib, "removeAllIndexes");
    _lib._objc_msgSend_0(_id, _sel_removeAllIndexes!);
  }

  static ffi.Pointer<ObjCSel>? _sel_addIndex;
  void addIndex(int value) {
    _sel_addIndex ??= _registerName(_lib, "addIndex:");
    _lib._objc_msgSend_277(_id, _sel_addIndex!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeIndex;
  void removeIndex(int value) {
    _sel_removeIndex ??= _registerName(_lib, "removeIndex:");
    _lib._objc_msgSend_277(_id, _sel_removeIndex!, value);
  }

  static ffi.Pointer<ObjCSel>? _sel_addIndexesInRange;
  void addIndexesInRange(NSRange range) {
    _sel_addIndexesInRange ??= _registerName(_lib, "addIndexesInRange:");
    _lib._objc_msgSend_278(_id, _sel_addIndexesInRange!, range);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeIndexesInRange;
  void removeIndexesInRange(NSRange range) {
    _sel_removeIndexesInRange ??= _registerName(_lib, "removeIndexesInRange:");
    _lib._objc_msgSend_278(_id, _sel_removeIndexesInRange!, range);
  }

  static ffi.Pointer<ObjCSel>? _sel_shiftIndexesStartingAtIndex_by;
  void shiftIndexesStartingAtIndex_by(int index, int delta) {
    _sel_shiftIndexesStartingAtIndex_by ??=
        _registerName(_lib, "shiftIndexesStartingAtIndex:by:");
    _lib._objc_msgSend_279(
        _id, _sel_shiftIndexesStartingAtIndex_by!, index, delta);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexSet;
  static NSMutableIndexSet indexSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableIndexSet");
    _sel_indexSet ??= _registerName(_lib, "indexSet");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_indexSet!);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexSetWithIndex;
  static NSMutableIndexSet indexSetWithIndex(NativeLibrary _lib, int value) {
    _class ??= _getClass(_lib, "NSMutableIndexSet");
    _sel_indexSetWithIndex ??= _registerName(_lib, "indexSetWithIndex:");
    final _ret = _lib._objc_msgSend_75(_class!, _sel_indexSetWithIndex!, value);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_indexSetWithIndexesInRange;
  static NSMutableIndexSet indexSetWithIndexesInRange(
      NativeLibrary _lib, NSRange range) {
    _class ??= _getClass(_lib, "NSMutableIndexSet");
    _sel_indexSetWithIndexesInRange ??=
        _registerName(_lib, "indexSetWithIndexesInRange:");
    final _ret = _lib._objc_msgSend_254(
        _class!, _sel_indexSetWithIndexesInRange!, range);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSMutableIndexSet new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableIndexSet");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSMutableIndexSet alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableIndexSet");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSMutableIndexSet._(_ret, _lib);
  }
}

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

class NSOrderedCollectionDifference extends NSObject {
  NSOrderedCollectionDifference._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSOrderedCollectionDifference castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSOrderedCollectionDifference._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithChanges;
  NSOrderedCollectionDifference initWithChanges(NSObject changes) {
    _sel_initWithChanges ??= _registerName(_lib, "initWithChanges:");
    final _ret =
        _lib._objc_msgSend_280(_id, _sel_initWithChanges!, changes._id);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges;
  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges(
          NSObject inserts,
          NSObject insertedObjects,
          NSObject removes,
          NSObject removedObjects,
          NSObject changes) {
    _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges ??=
        _registerName(_lib,
            "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:");
    final _ret = _lib._objc_msgSend_281(
        _id,
        _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges!,
        inserts._id,
        insertedObjects._id,
        removes._id,
        removedObjects._id,
        changes._id);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects;
  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects(
          NSObject inserts,
          NSObject insertedObjects,
          NSObject removes,
          NSObject removedObjects) {
    _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects ??=
        _registerName(_lib,
            "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:");
    final _ret = _lib._objc_msgSend_282(
        _id,
        _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects!,
        inserts._id,
        insertedObjects._id,
        removes._id,
        removedObjects._id);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_insertions;
  NSObject get insertions {
    _sel_insertions ??= _registerName(_lib, "insertions");
    final _ret = _lib._objc_msgSend_283(_id, _sel_insertions!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_removals;
  NSObject get removals {
    _sel_removals ??= _registerName(_lib, "removals");
    final _ret = _lib._objc_msgSend_284(_id, _sel_removals!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_hasChanges;
  bool get hasChanges {
    _sel_hasChanges ??= _registerName(_lib, "hasChanges");
    return _lib._objc_msgSend_16(_id, _sel_hasChanges!);
  }

  static ffi.Pointer<ObjCSel>? _sel_inverseDifference;
  NSOrderedCollectionDifference inverseDifference() {
    _sel_inverseDifference ??= _registerName(_lib, "inverseDifference");
    final _ret = _lib._objc_msgSend_1(_id, _sel_inverseDifference!);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSOrderedCollectionDifference new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSOrderedCollectionDifference");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSOrderedCollectionDifference alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSOrderedCollectionDifference");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }
}

class NSArray extends _ObjCWrapper {
  NSArray._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib);
  }
}

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

class NSMutableArray extends NSArray {
  NSMutableArray._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSMutableArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableArray._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_addObject;
  void addObject(NSObject anObject) {
    _sel_addObject ??= _registerName(_lib, "addObject:");
    _lib._objc_msgSend_285(_id, _sel_addObject!, anObject._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_insertObject_atIndex;
  void insertObject_atIndex(NSObject anObject, int index) {
    _sel_insertObject_atIndex ??= _registerName(_lib, "insertObject:atIndex:");
    _lib._objc_msgSend_286(
        _id, _sel_insertObject_atIndex!, anObject._id, index);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeLastObject;
  void removeLastObject() {
    _sel_removeLastObject ??= _registerName(_lib, "removeLastObject");
    _lib._objc_msgSend_0(_id, _sel_removeLastObject!);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeObjectAtIndex;
  void removeObjectAtIndex(int index) {
    _sel_removeObjectAtIndex ??= _registerName(_lib, "removeObjectAtIndex:");
    _lib._objc_msgSend_277(_id, _sel_removeObjectAtIndex!, index);
  }

  static ffi.Pointer<ObjCSel>? _sel_replaceObjectAtIndex_withObject;
  void replaceObjectAtIndex_withObject(int index, NSObject anObject) {
    _sel_replaceObjectAtIndex_withObject ??=
        _registerName(_lib, "replaceObjectAtIndex:withObject:");
    _lib._objc_msgSend_287(
        _id, _sel_replaceObjectAtIndex_withObject!, index, anObject._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  NSMutableArray init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSMutableArray._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCapacity;
  NSMutableArray initWithCapacity(int numItems) {
    _sel_initWithCapacity ??= _registerName(_lib, "initWithCapacity:");
    final _ret = _lib._objc_msgSend_75(_id, _sel_initWithCapacity!, numItems);
    return NSMutableArray._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  NSMutableArray initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_288(_id, _sel_initWithCoder!, coder._id);
    return NSMutableArray._(_ret, _lib);
  }
}

abstract class NSItemProviderRepresentationVisibility {
  static const int NSItemProviderRepresentationVisibilityAll = 0;
  static const int NSItemProviderRepresentationVisibilityTeam = 1;
  static const int NSItemProviderRepresentationVisibilityGroup = 2;
  static const int NSItemProviderRepresentationVisibilityOwnProcess = 3;
}

abstract class NSItemProviderFileOptions {
  static const int NSItemProviderFileOptionOpenInPlace = 1;
}

class NSItemProvider extends NSObject {
  NSItemProvider._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSItemProvider castFrom<T extends _ObjCWrapper>(T other) {
    return NSItemProvider._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSItemProvider init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSItemProvider._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler;
  void registerDataRepresentationForTypeIdentifier_visibility_loadHandler(
      NSObject typeIdentifier, int visibility, NSObject loadHandler) {
    _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler ??=
        _registerName(_lib,
            "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:");
    _lib._objc_msgSend_289(
        _id,
        _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler!,
        typeIdentifier._id,
        visibility,
        loadHandler._id);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler;
  void
      registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler(
          NSObject typeIdentifier,
          int fileOptions,
          int visibility,
          NSObject loadHandler) {
    _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler ??=
        _registerName(_lib,
            "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:");
    _lib._objc_msgSend_290(
        _id,
        _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler!,
        typeIdentifier._id,
        fileOptions,
        visibility,
        loadHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_registeredTypeIdentifiers;
  NSObject get registeredTypeIdentifiers {
    _sel_registeredTypeIdentifiers ??=
        _registerName(_lib, "registeredTypeIdentifiers");
    final _ret = _lib._objc_msgSend_291(_id, _sel_registeredTypeIdentifiers!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_hasItemConformingToTypeIdentifier;
  bool hasItemConformingToTypeIdentifier(NSObject typeIdentifier) {
    _sel_hasItemConformingToTypeIdentifier ??=
        _registerName(_lib, "hasItemConformingToTypeIdentifier:");
    return _lib._objc_msgSend_292(
        _id, _sel_hasItemConformingToTypeIdentifier!, typeIdentifier._id);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_hasRepresentationConformingToTypeIdentifier_fileOptions;
  bool hasRepresentationConformingToTypeIdentifier_fileOptions(
      NSObject typeIdentifier, int fileOptions) {
    _sel_hasRepresentationConformingToTypeIdentifier_fileOptions ??=
        _registerName(
            _lib, "hasRepresentationConformingToTypeIdentifier:fileOptions:");
    return _lib._objc_msgSend_293(
        _id,
        _sel_hasRepresentationConformingToTypeIdentifier_fileOptions!,
        typeIdentifier._id,
        fileOptions);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_loadDataRepresentationForTypeIdentifier_completionHandler;
  NSProgress loadDataRepresentationForTypeIdentifier_completionHandler(
      NSObject typeIdentifier, NSObject completionHandler) {
    _sel_loadDataRepresentationForTypeIdentifier_completionHandler ??=
        _registerName(
            _lib, "loadDataRepresentationForTypeIdentifier:completionHandler:");
    final _ret = _lib._objc_msgSend_294(
        _id,
        _sel_loadDataRepresentationForTypeIdentifier_completionHandler!,
        typeIdentifier._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_loadFileRepresentationForTypeIdentifier_completionHandler;
  NSProgress loadFileRepresentationForTypeIdentifier_completionHandler(
      NSObject typeIdentifier, NSObject completionHandler) {
    _sel_loadFileRepresentationForTypeIdentifier_completionHandler ??=
        _registerName(
            _lib, "loadFileRepresentationForTypeIdentifier:completionHandler:");
    final _ret = _lib._objc_msgSend_295(
        _id,
        _sel_loadFileRepresentationForTypeIdentifier_completionHandler!,
        typeIdentifier._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler;
  NSProgress loadInPlaceFileRepresentationForTypeIdentifier_completionHandler(
      NSObject typeIdentifier, NSObject completionHandler) {
    _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler ??=
        _registerName(_lib,
            "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:");
    final _ret = _lib._objc_msgSend_296(
        _id,
        _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler!,
        typeIdentifier._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_suggestedName;
  NSObject get suggestedName {
    _sel_suggestedName ??= _registerName(_lib, "suggestedName");
    final _ret = _lib._objc_msgSend_297(_id, _sel_suggestedName!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_suggestedName1;
  set suggestedName(NSObject value) {
    _sel_suggestedName1 ??= _registerName(_lib, "setSuggestedName:");
    _lib._objc_msgSend_298(_id, _sel_suggestedName1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithObject;
  NSItemProvider initWithObject(NSObject object) {
    _sel_initWithObject ??= _registerName(_lib, "initWithObject:");
    final _ret = _lib._objc_msgSend_299(_id, _sel_initWithObject!, object._id);
    return NSItemProvider._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_registerObject_visibility;
  void registerObject_visibility(NSObject object, int visibility) {
    _sel_registerObject_visibility ??=
        _registerName(_lib, "registerObject:visibility:");
    _lib._objc_msgSend_300(
        _id, _sel_registerObject_visibility!, object._id, visibility);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_registerObjectOfClass_visibility_loadHandler;
  void registerObjectOfClass_visibility_loadHandler(
      NSObject aClass, int visibility, NSObject loadHandler) {
    _sel_registerObjectOfClass_visibility_loadHandler ??=
        _registerName(_lib, "registerObjectOfClass:visibility:loadHandler:");
    _lib._objc_msgSend_301(
        _id,
        _sel_registerObjectOfClass_visibility_loadHandler!,
        aClass._id,
        visibility,
        loadHandler._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_canLoadObjectOfClass;
  bool canLoadObjectOfClass(NSObject aClass) {
    _sel_canLoadObjectOfClass ??= _registerName(_lib, "canLoadObjectOfClass:");
    return _lib._objc_msgSend_302(_id, _sel_canLoadObjectOfClass!, aClass._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_loadObjectOfClass_completionHandler;
  NSProgress loadObjectOfClass_completionHandler(
      NSObject aClass, NSObject completionHandler) {
    _sel_loadObjectOfClass_completionHandler ??=
        _registerName(_lib, "loadObjectOfClass:completionHandler:");
    final _ret = _lib._objc_msgSend_303(
        _id,
        _sel_loadObjectOfClass_completionHandler!,
        aClass._id,
        completionHandler._id);
    return NSProgress._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithItem_typeIdentifier;
  NSItemProvider initWithItem_typeIdentifier(
      NSObject item, NSObject typeIdentifier) {
    _sel_initWithItem_typeIdentifier ??=
        _registerName(_lib, "initWithItem:typeIdentifier:");
    final _ret = _lib._objc_msgSend_304(
        _id, _sel_initWithItem_typeIdentifier!, item._id, typeIdentifier._id);
    return NSItemProvider._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithContentsOfURL;
  NSItemProvider initWithContentsOfURL(NSObject fileURL) {
    _sel_initWithContentsOfURL ??=
        _registerName(_lib, "initWithContentsOfURL:");
    final _ret =
        _lib._objc_msgSend_305(_id, _sel_initWithContentsOfURL!, fileURL._id);
    return NSItemProvider._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_registerItemForTypeIdentifier_loadHandler;
  void registerItemForTypeIdentifier_loadHandler(
      NSObject typeIdentifier, NSItemProviderLoadHandler loadHandler) {
    _sel_registerItemForTypeIdentifier_loadHandler ??=
        _registerName(_lib, "registerItemForTypeIdentifier:loadHandler:");
    _lib._objc_msgSend_306(_id, _sel_registerItemForTypeIdentifier_loadHandler!,
        typeIdentifier._id, loadHandler);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_loadItemForTypeIdentifier_options_completionHandler;
  void loadItemForTypeIdentifier_options_completionHandler(
      NSObject typeIdentifier,
      NSObject options,
      NSItemProviderCompletionHandler completionHandler) {
    _sel_loadItemForTypeIdentifier_options_completionHandler ??= _registerName(
        _lib, "loadItemForTypeIdentifier:options:completionHandler:");
    _lib._objc_msgSend_307(
        _id,
        _sel_loadItemForTypeIdentifier_options_completionHandler!,
        typeIdentifier._id,
        options._id,
        completionHandler);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSItemProvider new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSItemProvider");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSItemProvider._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSItemProvider alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSItemProvider");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSItemProvider._(_ret, _lib);
  }
}

typedef NSItemProviderLoadHandler = ffi.Pointer<ObjCObject>;
typedef NSItemProviderCompletionHandler = ffi.Pointer<ObjCObject>;

abstract class NSItemProviderErrorCode {
  static const int NSItemProviderUnknownError = -1;
  static const int NSItemProviderItemUnavailableError = -1000;
  static const int NSItemProviderUnexpectedValueClassError = -1100;
  static const int NSItemProviderUnavailableCoercionError = -1200;
}

abstract class NSStringCompareOptions {
  static const int NSCaseInsensitiveSearch = 1;
  static const int NSLiteralSearch = 2;
  static const int NSBackwardsSearch = 4;
  static const int NSAnchoredSearch = 8;
  static const int NSNumericSearch = 64;
  static const int NSDiacriticInsensitiveSearch = 128;
  static const int NSWidthInsensitiveSearch = 256;
  static const int NSForcedOrderingSearch = 512;
  static const int NSRegularExpressionSearch = 1024;
}

abstract class NSStringEncodingConversionOptions {
  static const int NSStringEncodingConversionAllowLossy = 1;
  static const int NSStringEncodingConversionExternalRepresentation = 2;
}

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

typedef NSStringTransform = ffi.Pointer<ObjCObject>;
typedef NSStringEncodingDetectionOptionsKey = ffi.Pointer<ObjCObject>;

class NSMutableString extends NSString {
  NSMutableString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSMutableString castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableString._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_replaceCharactersInRange_withString;
  void replaceCharactersInRange_withString(NSRange range, NSObject aString) {
    _sel_replaceCharactersInRange_withString ??=
        _registerName(_lib, "replaceCharactersInRange:withString:");
    _lib._objc_msgSend_308(
        _id, _sel_replaceCharactersInRange_withString!, range, aString._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_stringWithCString_encoding;
  static NSString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    _class ??= _getClass(_lib, "NSMutableString");
    _sel_stringWithCString_encoding ??=
        _registerName(_lib, "stringWithCString:encoding:");
    final _ret = _lib._objc_msgSend_23(
        _class!, _sel_stringWithCString_encoding!, cString, enc);
    return NSString._(_ret, _lib);
  }
}

typedef NSExceptionName = ffi.Pointer<ObjCObject>;

class NSSimpleCString extends NSString {
  NSSimpleCString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSSimpleCString castFrom<T extends _ObjCWrapper>(T other) {
    return NSSimpleCString._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_stringWithCString_encoding;
  static NSString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    _class ??= _getClass(_lib, "NSSimpleCString");
    _sel_stringWithCString_encoding ??=
        _registerName(_lib, "stringWithCString:encoding:");
    final _ret = _lib._objc_msgSend_23(
        _class!, _sel_stringWithCString_encoding!, cString, enc);
    return NSString._(_ret, _lib);
  }
}

class NSConstantString extends NSSimpleCString {
  NSConstantString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSConstantString castFrom<T extends _ObjCWrapper>(T other) {
    return NSConstantString._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_stringWithCString_encoding;
  static NSString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    _class ??= _getClass(_lib, "NSConstantString");
    _sel_stringWithCString_encoding ??=
        _registerName(_lib, "stringWithCString:encoding:");
    final _ret = _lib._objc_msgSend_23(
        _class!, _sel_stringWithCString_encoding!, cString, enc);
    return NSString._(_ret, _lib);
  }
}

class NSCharacterSet extends NSObject {
  NSCharacterSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSCharacterSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSCharacterSet._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_controlCharacterSet;
  static NSObject getControlCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_controlCharacterSet ??= _registerName(_lib, "controlCharacterSet");
    final _ret = _lib._objc_msgSend_309(_class!, _sel_controlCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_whitespaceCharacterSet;
  static NSObject getWhitespaceCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_whitespaceCharacterSet ??=
        _registerName(_lib, "whitespaceCharacterSet");
    final _ret = _lib._objc_msgSend_310(_class!, _sel_whitespaceCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_whitespaceAndNewlineCharacterSet;
  static NSObject getWhitespaceAndNewlineCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_whitespaceAndNewlineCharacterSet ??=
        _registerName(_lib, "whitespaceAndNewlineCharacterSet");
    final _ret =
        _lib._objc_msgSend_311(_class!, _sel_whitespaceAndNewlineCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_decimalDigitCharacterSet;
  static NSObject getDecimalDigitCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_decimalDigitCharacterSet ??=
        _registerName(_lib, "decimalDigitCharacterSet");
    final _ret =
        _lib._objc_msgSend_312(_class!, _sel_decimalDigitCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_letterCharacterSet;
  static NSObject getLetterCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_letterCharacterSet ??= _registerName(_lib, "letterCharacterSet");
    final _ret = _lib._objc_msgSend_313(_class!, _sel_letterCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_lowercaseLetterCharacterSet;
  static NSObject getLowercaseLetterCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_lowercaseLetterCharacterSet ??=
        _registerName(_lib, "lowercaseLetterCharacterSet");
    final _ret =
        _lib._objc_msgSend_314(_class!, _sel_lowercaseLetterCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_uppercaseLetterCharacterSet;
  static NSObject getUppercaseLetterCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_uppercaseLetterCharacterSet ??=
        _registerName(_lib, "uppercaseLetterCharacterSet");
    final _ret =
        _lib._objc_msgSend_315(_class!, _sel_uppercaseLetterCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_nonBaseCharacterSet;
  static NSObject getNonBaseCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_nonBaseCharacterSet ??= _registerName(_lib, "nonBaseCharacterSet");
    final _ret = _lib._objc_msgSend_316(_class!, _sel_nonBaseCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alphanumericCharacterSet;
  static NSObject getAlphanumericCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_alphanumericCharacterSet ??=
        _registerName(_lib, "alphanumericCharacterSet");
    final _ret =
        _lib._objc_msgSend_317(_class!, _sel_alphanumericCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_decomposableCharacterSet;
  static NSObject getDecomposableCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_decomposableCharacterSet ??=
        _registerName(_lib, "decomposableCharacterSet");
    final _ret =
        _lib._objc_msgSend_318(_class!, _sel_decomposableCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_illegalCharacterSet;
  static NSObject getIllegalCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_illegalCharacterSet ??= _registerName(_lib, "illegalCharacterSet");
    final _ret = _lib._objc_msgSend_319(_class!, _sel_illegalCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_punctuationCharacterSet;
  static NSObject getPunctuationCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_punctuationCharacterSet ??=
        _registerName(_lib, "punctuationCharacterSet");
    final _ret = _lib._objc_msgSend_320(_class!, _sel_punctuationCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_capitalizedLetterCharacterSet;
  static NSObject getCapitalizedLetterCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_capitalizedLetterCharacterSet ??=
        _registerName(_lib, "capitalizedLetterCharacterSet");
    final _ret =
        _lib._objc_msgSend_321(_class!, _sel_capitalizedLetterCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_symbolCharacterSet;
  static NSObject getSymbolCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_symbolCharacterSet ??= _registerName(_lib, "symbolCharacterSet");
    final _ret = _lib._objc_msgSend_322(_class!, _sel_symbolCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_newlineCharacterSet;
  static NSObject getNewlineCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_newlineCharacterSet ??= _registerName(_lib, "newlineCharacterSet");
    final _ret = _lib._objc_msgSend_323(_class!, _sel_newlineCharacterSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithRange;
  static NSCharacterSet characterSetWithRange(
      NativeLibrary _lib, NSRange aRange) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_characterSetWithRange ??=
        _registerName(_lib, "characterSetWithRange:");
    final _ret =
        _lib._objc_msgSend_324(_class!, _sel_characterSetWithRange!, aRange);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithCharactersInString;
  static NSCharacterSet characterSetWithCharactersInString(
      NativeLibrary _lib, NSObject aString) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_characterSetWithCharactersInString ??=
        _registerName(_lib, "characterSetWithCharactersInString:");
    final _ret = _lib._objc_msgSend_325(
        _class!, _sel_characterSetWithCharactersInString!, aString._id);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithBitmapRepresentation;
  static NSCharacterSet characterSetWithBitmapRepresentation(
      NativeLibrary _lib, NSObject data) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_characterSetWithBitmapRepresentation ??=
        _registerName(_lib, "characterSetWithBitmapRepresentation:");
    final _ret = _lib._objc_msgSend_326(
        _class!, _sel_characterSetWithBitmapRepresentation!, data._id);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithContentsOfFile;
  static NSCharacterSet characterSetWithContentsOfFile(
      NativeLibrary _lib, NSObject fName) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_characterSetWithContentsOfFile ??=
        _registerName(_lib, "characterSetWithContentsOfFile:");
    final _ret = _lib._objc_msgSend_327(
        _class!, _sel_characterSetWithContentsOfFile!, fName._id);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  NSCharacterSet initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_328(_id, _sel_initWithCoder!, coder._id);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterIsMember;
  bool characterIsMember(int aCharacter) {
    _sel_characterIsMember ??= _registerName(_lib, "characterIsMember:");
    return _lib._objc_msgSend_329(_id, _sel_characterIsMember!, aCharacter);
  }

  static ffi.Pointer<ObjCSel>? _sel_bitmapRepresentation;
  NSObject get bitmapRepresentation {
    _sel_bitmapRepresentation ??= _registerName(_lib, "bitmapRepresentation");
    final _ret = _lib._objc_msgSend_330(_id, _sel_bitmapRepresentation!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_invertedSet;
  NSObject get invertedSet {
    _sel_invertedSet ??= _registerName(_lib, "invertedSet");
    final _ret = _lib._objc_msgSend_331(_id, _sel_invertedSet!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_longCharacterIsMember;
  bool longCharacterIsMember(int theLongChar) {
    _sel_longCharacterIsMember ??=
        _registerName(_lib, "longCharacterIsMember:");
    return _lib._objc_msgSend_332(
        _id, _sel_longCharacterIsMember!, theLongChar);
  }

  static ffi.Pointer<ObjCSel>? _sel_isSupersetOfSet;
  bool isSupersetOfSet(NSObject theOtherSet) {
    _sel_isSupersetOfSet ??= _registerName(_lib, "isSupersetOfSet:");
    return _lib._objc_msgSend_333(_id, _sel_isSupersetOfSet!, theOtherSet._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_hasMemberInPlane;
  bool hasMemberInPlane(int thePlane) {
    _sel_hasMemberInPlane ??= _registerName(_lib, "hasMemberInPlane:");
    return _lib._objc_msgSend_334(_id, _sel_hasMemberInPlane!, thePlane);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSCharacterSet new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSCharacterSet alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSCharacterSet");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSCharacterSet._(_ret, _lib);
  }
}

typedef unichar = pkg_ffi.UnsignedShort;

class NSMutableCharacterSet extends NSCharacterSet {
  NSMutableCharacterSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSMutableCharacterSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableCharacterSet._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_addCharactersInRange;
  void addCharactersInRange(NSRange aRange) {
    _sel_addCharactersInRange ??= _registerName(_lib, "addCharactersInRange:");
    _lib._objc_msgSend_278(_id, _sel_addCharactersInRange!, aRange);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeCharactersInRange;
  void removeCharactersInRange(NSRange aRange) {
    _sel_removeCharactersInRange ??=
        _registerName(_lib, "removeCharactersInRange:");
    _lib._objc_msgSend_278(_id, _sel_removeCharactersInRange!, aRange);
  }

  static ffi.Pointer<ObjCSel>? _sel_addCharactersInString;
  void addCharactersInString(NSObject aString) {
    _sel_addCharactersInString ??=
        _registerName(_lib, "addCharactersInString:");
    _lib._objc_msgSend_335(_id, _sel_addCharactersInString!, aString._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeCharactersInString;
  void removeCharactersInString(NSObject aString) {
    _sel_removeCharactersInString ??=
        _registerName(_lib, "removeCharactersInString:");
    _lib._objc_msgSend_336(_id, _sel_removeCharactersInString!, aString._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_formUnionWithCharacterSet;
  void formUnionWithCharacterSet(NSObject otherSet) {
    _sel_formUnionWithCharacterSet ??=
        _registerName(_lib, "formUnionWithCharacterSet:");
    _lib._objc_msgSend_337(_id, _sel_formUnionWithCharacterSet!, otherSet._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_formIntersectionWithCharacterSet;
  void formIntersectionWithCharacterSet(NSObject otherSet) {
    _sel_formIntersectionWithCharacterSet ??=
        _registerName(_lib, "formIntersectionWithCharacterSet:");
    _lib._objc_msgSend_338(
        _id, _sel_formIntersectionWithCharacterSet!, otherSet._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_invert;
  void invert() {
    _sel_invert ??= _registerName(_lib, "invert");
    _lib._objc_msgSend_0(_id, _sel_invert!);
  }

  static ffi.Pointer<ObjCSel>? _sel_controlCharacterSet;
  static NSMutableCharacterSet controlCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_controlCharacterSet ??= _registerName(_lib, "controlCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_controlCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_whitespaceCharacterSet;
  static NSMutableCharacterSet whitespaceCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_whitespaceCharacterSet ??=
        _registerName(_lib, "whitespaceCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_whitespaceCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_whitespaceAndNewlineCharacterSet;
  static NSMutableCharacterSet whitespaceAndNewlineCharacterSet(
      NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_whitespaceAndNewlineCharacterSet ??=
        _registerName(_lib, "whitespaceAndNewlineCharacterSet");
    final _ret =
        _lib._objc_msgSend_339(_class!, _sel_whitespaceAndNewlineCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_decimalDigitCharacterSet;
  static NSMutableCharacterSet decimalDigitCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_decimalDigitCharacterSet ??=
        _registerName(_lib, "decimalDigitCharacterSet");
    final _ret =
        _lib._objc_msgSend_339(_class!, _sel_decimalDigitCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_letterCharacterSet;
  static NSMutableCharacterSet letterCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_letterCharacterSet ??= _registerName(_lib, "letterCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_letterCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_lowercaseLetterCharacterSet;
  static NSMutableCharacterSet lowercaseLetterCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_lowercaseLetterCharacterSet ??=
        _registerName(_lib, "lowercaseLetterCharacterSet");
    final _ret =
        _lib._objc_msgSend_339(_class!, _sel_lowercaseLetterCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_uppercaseLetterCharacterSet;
  static NSMutableCharacterSet uppercaseLetterCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_uppercaseLetterCharacterSet ??=
        _registerName(_lib, "uppercaseLetterCharacterSet");
    final _ret =
        _lib._objc_msgSend_339(_class!, _sel_uppercaseLetterCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_nonBaseCharacterSet;
  static NSMutableCharacterSet nonBaseCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_nonBaseCharacterSet ??= _registerName(_lib, "nonBaseCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_nonBaseCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alphanumericCharacterSet;
  static NSMutableCharacterSet alphanumericCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_alphanumericCharacterSet ??=
        _registerName(_lib, "alphanumericCharacterSet");
    final _ret =
        _lib._objc_msgSend_339(_class!, _sel_alphanumericCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_decomposableCharacterSet;
  static NSMutableCharacterSet decomposableCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_decomposableCharacterSet ??=
        _registerName(_lib, "decomposableCharacterSet");
    final _ret =
        _lib._objc_msgSend_339(_class!, _sel_decomposableCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_illegalCharacterSet;
  static NSMutableCharacterSet illegalCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_illegalCharacterSet ??= _registerName(_lib, "illegalCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_illegalCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_punctuationCharacterSet;
  static NSMutableCharacterSet punctuationCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_punctuationCharacterSet ??=
        _registerName(_lib, "punctuationCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_punctuationCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_capitalizedLetterCharacterSet;
  static NSMutableCharacterSet capitalizedLetterCharacterSet(
      NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_capitalizedLetterCharacterSet ??=
        _registerName(_lib, "capitalizedLetterCharacterSet");
    final _ret =
        _lib._objc_msgSend_339(_class!, _sel_capitalizedLetterCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_symbolCharacterSet;
  static NSMutableCharacterSet symbolCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_symbolCharacterSet ??= _registerName(_lib, "symbolCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_symbolCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_newlineCharacterSet;
  static NSMutableCharacterSet newlineCharacterSet(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_newlineCharacterSet ??= _registerName(_lib, "newlineCharacterSet");
    final _ret = _lib._objc_msgSend_339(_class!, _sel_newlineCharacterSet!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithRange;
  static NSMutableCharacterSet characterSetWithRange(
      NativeLibrary _lib, NSRange aRange) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithRange ??=
        _registerName(_lib, "characterSetWithRange:");
    final _ret =
        _lib._objc_msgSend_340(_class!, _sel_characterSetWithRange!, aRange);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithCharactersInString;
  static NSMutableCharacterSet characterSetWithCharactersInString(
      NativeLibrary _lib, NSObject aString) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithCharactersInString ??=
        _registerName(_lib, "characterSetWithCharactersInString:");
    final _ret = _lib._objc_msgSend_341(
        _class!, _sel_characterSetWithCharactersInString!, aString._id);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithBitmapRepresentation;
  static NSMutableCharacterSet characterSetWithBitmapRepresentation(
      NativeLibrary _lib, NSObject data) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithBitmapRepresentation ??=
        _registerName(_lib, "characterSetWithBitmapRepresentation:");
    final _ret = _lib._objc_msgSend_342(
        _class!, _sel_characterSetWithBitmapRepresentation!, data._id);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithContentsOfFile;
  static NSMutableCharacterSet characterSetWithContentsOfFile(
      NativeLibrary _lib, NSObject fName) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithContentsOfFile ??=
        _registerName(_lib, "characterSetWithContentsOfFile:");
    final _ret = _lib._objc_msgSend_343(
        _class!, _sel_characterSetWithContentsOfFile!, fName._id);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithRange1;
  static NSCharacterSet characterSetWithRange1(
      NativeLibrary _lib, NSRange aRange) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithRange1 ??=
        _registerName(_lib, "characterSetWithRange:");
    final _ret =
        _lib._objc_msgSend_324(_class!, _sel_characterSetWithRange1!, aRange);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithCharactersInString1;
  static NSCharacterSet characterSetWithCharactersInString1(
      NativeLibrary _lib, NSObject aString) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithCharactersInString1 ??=
        _registerName(_lib, "characterSetWithCharactersInString:");
    final _ret = _lib._objc_msgSend_325(
        _class!, _sel_characterSetWithCharactersInString1!, aString._id);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithBitmapRepresentation1;
  static NSCharacterSet characterSetWithBitmapRepresentation1(
      NativeLibrary _lib, NSObject data) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithBitmapRepresentation1 ??=
        _registerName(_lib, "characterSetWithBitmapRepresentation:");
    final _ret = _lib._objc_msgSend_326(
        _class!, _sel_characterSetWithBitmapRepresentation1!, data._id);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_characterSetWithContentsOfFile1;
  static NSCharacterSet characterSetWithContentsOfFile1(
      NativeLibrary _lib, NSObject fName) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_characterSetWithContentsOfFile1 ??=
        _registerName(_lib, "characterSetWithContentsOfFile:");
    final _ret = _lib._objc_msgSend_327(
        _class!, _sel_characterSetWithContentsOfFile1!, fName._id);
    return NSCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_controlCharacterSet1;
  static void controlCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_controlCharacterSet1 ??= _registerName(_lib, "controlCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_controlCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_whitespaceCharacterSet1;
  static void whitespaceCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_whitespaceCharacterSet1 ??=
        _registerName(_lib, "whitespaceCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_whitespaceCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_whitespaceAndNewlineCharacterSet1;
  static void whitespaceAndNewlineCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_whitespaceAndNewlineCharacterSet1 ??=
        _registerName(_lib, "whitespaceAndNewlineCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_whitespaceAndNewlineCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_decimalDigitCharacterSet1;
  static void decimalDigitCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_decimalDigitCharacterSet1 ??=
        _registerName(_lib, "decimalDigitCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_decimalDigitCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_letterCharacterSet1;
  static void letterCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_letterCharacterSet1 ??= _registerName(_lib, "letterCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_letterCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_lowercaseLetterCharacterSet1;
  static void lowercaseLetterCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_lowercaseLetterCharacterSet1 ??=
        _registerName(_lib, "lowercaseLetterCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_lowercaseLetterCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_uppercaseLetterCharacterSet1;
  static void uppercaseLetterCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_uppercaseLetterCharacterSet1 ??=
        _registerName(_lib, "uppercaseLetterCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_uppercaseLetterCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_nonBaseCharacterSet1;
  static void nonBaseCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_nonBaseCharacterSet1 ??= _registerName(_lib, "nonBaseCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_nonBaseCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_alphanumericCharacterSet1;
  static void alphanumericCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_alphanumericCharacterSet1 ??=
        _registerName(_lib, "alphanumericCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_alphanumericCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_decomposableCharacterSet1;
  static void decomposableCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_decomposableCharacterSet1 ??=
        _registerName(_lib, "decomposableCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_decomposableCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_illegalCharacterSet1;
  static void illegalCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_illegalCharacterSet1 ??= _registerName(_lib, "illegalCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_illegalCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_punctuationCharacterSet1;
  static void punctuationCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_punctuationCharacterSet1 ??=
        _registerName(_lib, "punctuationCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_punctuationCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_capitalizedLetterCharacterSet1;
  static void capitalizedLetterCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_capitalizedLetterCharacterSet1 ??=
        _registerName(_lib, "capitalizedLetterCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_capitalizedLetterCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_symbolCharacterSet1;
  static void symbolCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_symbolCharacterSet1 ??= _registerName(_lib, "symbolCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_symbolCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_newlineCharacterSet1;
  static void newlineCharacterSet1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_newlineCharacterSet1 ??= _registerName(_lib, "newlineCharacterSet");
    _lib._objc_msgSend_0(_class!, _sel_newlineCharacterSet1!);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSMutableCharacterSet new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSMutableCharacterSet alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSMutableCharacterSet");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSMutableCharacterSet._(_ret, _lib);
  }
}

abstract class NSURLHandleStatus {
  static const int NSURLHandleNotLoaded = 0;
  static const int NSURLHandleLoadSucceeded = 1;
  static const int NSURLHandleLoadInProgress = 2;
  static const int NSURLHandleLoadFailed = 3;
}

class NSURLHandle extends NSObject {
  NSURLHandle._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLHandle castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLHandle._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_registerURLHandleClass;
  static void registerURLHandleClass(
      NativeLibrary _lib, NSObject anURLHandleSubclass) {
    _class ??= _getClass(_lib, "NSURLHandle");
    _sel_registerURLHandleClass ??=
        _registerName(_lib, "registerURLHandleClass:");
    _lib._objc_msgSend_344(
        _class!, _sel_registerURLHandleClass!, anURLHandleSubclass._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLHandleClassForURL;
  static NSObject URLHandleClassForURL(NativeLibrary _lib, NSObject anURL) {
    _class ??= _getClass(_lib, "NSURLHandle");
    _sel_URLHandleClassForURL ??= _registerName(_lib, "URLHandleClassForURL:");
    final _ret =
        _lib._objc_msgSend_345(_class!, _sel_URLHandleClassForURL!, anURL._id);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_status;
  int status() {
    _sel_status ??= _registerName(_lib, "status");
    return _lib._objc_msgSend_346(_id, _sel_status!);
  }

  static ffi.Pointer<ObjCSel>? _sel_failureReason;
  NSString failureReason() {
    _sel_failureReason ??= _registerName(_lib, "failureReason");
    final _ret = _lib._objc_msgSend_25(_id, _sel_failureReason!);
    return NSString._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_addClient;
  void addClient(NSObject client) {
    _sel_addClient ??= _registerName(_lib, "addClient:");
    _lib._objc_msgSend_347(_id, _sel_addClient!, client._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeClient;
  void removeClient(NSObject client) {
    _sel_removeClient ??= _registerName(_lib, "removeClient:");
    _lib._objc_msgSend_348(_id, _sel_removeClient!, client._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_loadInBackground;
  void loadInBackground() {
    _sel_loadInBackground ??= _registerName(_lib, "loadInBackground");
    _lib._objc_msgSend_0(_id, _sel_loadInBackground!);
  }

  static ffi.Pointer<ObjCSel>? _sel_cancelLoadInBackground;
  void cancelLoadInBackground() {
    _sel_cancelLoadInBackground ??=
        _registerName(_lib, "cancelLoadInBackground");
    _lib._objc_msgSend_0(_id, _sel_cancelLoadInBackground!);
  }

  static ffi.Pointer<ObjCSel>? _sel_resourceData;
  NSData resourceData() {
    _sel_resourceData ??= _registerName(_lib, "resourceData");
    final _ret = _lib._objc_msgSend_349(_id, _sel_resourceData!);
    return NSData._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_availableResourceData;
  NSData availableResourceData() {
    _sel_availableResourceData ??= _registerName(_lib, "availableResourceData");
    final _ret = _lib._objc_msgSend_349(_id, _sel_availableResourceData!);
    return NSData._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_expectedResourceDataSize;
  void expectedResourceDataSize() {
    _sel_expectedResourceDataSize ??=
        _registerName(_lib, "expectedResourceDataSize");
    _lib._objc_msgSend_0(_id, _sel_expectedResourceDataSize!);
  }

  static ffi.Pointer<ObjCSel>? _sel_flushCachedData;
  void flushCachedData() {
    _sel_flushCachedData ??= _registerName(_lib, "flushCachedData");
    _lib._objc_msgSend_0(_id, _sel_flushCachedData!);
  }

  static ffi.Pointer<ObjCSel>? _sel_backgroundLoadDidFailWithReason;
  void backgroundLoadDidFailWithReason(NSObject reason) {
    _sel_backgroundLoadDidFailWithReason ??=
        _registerName(_lib, "backgroundLoadDidFailWithReason:");
    _lib._objc_msgSend_350(
        _id, _sel_backgroundLoadDidFailWithReason!, reason._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_didLoadBytes_loadComplete;
  void didLoadBytes_loadComplete(NSObject newBytes, bool yorn) {
    _sel_didLoadBytes_loadComplete ??=
        _registerName(_lib, "didLoadBytes:loadComplete:");
    _lib._objc_msgSend_351(
        _id, _sel_didLoadBytes_loadComplete!, newBytes._id, yorn);
  }

  static ffi.Pointer<ObjCSel>? _sel_canInitWithURL;
  static bool canInitWithURL(NativeLibrary _lib, NSObject anURL) {
    _class ??= _getClass(_lib, "NSURLHandle");
    _sel_canInitWithURL ??= _registerName(_lib, "canInitWithURL:");
    return _lib._objc_msgSend_352(_class!, _sel_canInitWithURL!, anURL._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_cachedHandleForURL;
  static NSURLHandle cachedHandleForURL(NativeLibrary _lib, NSObject anURL) {
    _class ??= _getClass(_lib, "NSURLHandle");
    _sel_cachedHandleForURL ??= _registerName(_lib, "cachedHandleForURL:");
    final _ret =
        _lib._objc_msgSend_353(_class!, _sel_cachedHandleForURL!, anURL._id);
    return NSURLHandle._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithURL_cached;
  void initWithURL_cached(NSObject anURL, bool willCache) {
    _sel_initWithURL_cached ??= _registerName(_lib, "initWithURL:cached:");
    _lib._objc_msgSend_354(_id, _sel_initWithURL_cached!, anURL._id, willCache);
  }

  static ffi.Pointer<ObjCSel>? _sel_propertyForKey;
  NSObject propertyForKey(NSObject propertyKey) {
    _sel_propertyForKey ??= _registerName(_lib, "propertyForKey:");
    final _ret =
        _lib._objc_msgSend_355(_id, _sel_propertyForKey!, propertyKey._id);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_propertyForKeyIfAvailable;
  NSObject propertyForKeyIfAvailable(NSObject propertyKey) {
    _sel_propertyForKeyIfAvailable ??=
        _registerName(_lib, "propertyForKeyIfAvailable:");
    final _ret = _lib._objc_msgSend_356(
        _id, _sel_propertyForKeyIfAvailable!, propertyKey._id);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_writeProperty_forKey;
  bool writeProperty_forKey(NSObject propertyValue, NSObject propertyKey) {
    _sel_writeProperty_forKey ??= _registerName(_lib, "writeProperty:forKey:");
    return _lib._objc_msgSend_357(
        _id, _sel_writeProperty_forKey!, propertyValue._id, propertyKey._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_writeData;
  bool writeData(NSObject data) {
    _sel_writeData ??= _registerName(_lib, "writeData:");
    return _lib._objc_msgSend_358(_id, _sel_writeData!, data._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_loadInForeground;
  NSData loadInForeground() {
    _sel_loadInForeground ??= _registerName(_lib, "loadInForeground");
    final _ret = _lib._objc_msgSend_349(_id, _sel_loadInForeground!);
    return NSData._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_beginLoadInBackground;
  void beginLoadInBackground() {
    _sel_beginLoadInBackground ??= _registerName(_lib, "beginLoadInBackground");
    _lib._objc_msgSend_0(_id, _sel_beginLoadInBackground!);
  }

  static ffi.Pointer<ObjCSel>? _sel_endLoadInBackground;
  void endLoadInBackground() {
    _sel_endLoadInBackground ??= _registerName(_lib, "endLoadInBackground");
    _lib._objc_msgSend_0(_id, _sel_endLoadInBackground!);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLHandle new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLHandle");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLHandle._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLHandle alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLHandle");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLHandle._(_ret, _lib);
  }
}

class NSData extends _ObjCWrapper {
  NSData._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib);
  }
}

class NSURL extends NSObject {
  NSURL._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURL castFrom<T extends _ObjCWrapper>(T other) {
    return NSURL._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithScheme_host_path;
  NSURL initWithScheme_host_path(
      NSObject scheme, NSObject host, NSObject path) {
    _sel_initWithScheme_host_path ??=
        _registerName(_lib, "initWithScheme:host:path:");
    final _ret = _lib._objc_msgSend_359(
        _id, _sel_initWithScheme_host_path!, scheme._id, host._id, path._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initFileURLWithPath_isDirectory_relativeToURL;
  NSURL initFileURLWithPath_isDirectory_relativeToURL(
      NSObject path, bool isDir, NSObject baseURL) {
    _sel_initFileURLWithPath_isDirectory_relativeToURL ??=
        _registerName(_lib, "initFileURLWithPath:isDirectory:relativeToURL:");
    final _ret = _lib._objc_msgSend_360(
        _id,
        _sel_initFileURLWithPath_isDirectory_relativeToURL!,
        path._id,
        isDir,
        baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initFileURLWithPath_relativeToURL;
  NSURL initFileURLWithPath_relativeToURL(NSObject path, NSObject baseURL) {
    _sel_initFileURLWithPath_relativeToURL ??=
        _registerName(_lib, "initFileURLWithPath:relativeToURL:");
    final _ret = _lib._objc_msgSend_361(
        _id, _sel_initFileURLWithPath_relativeToURL!, path._id, baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initFileURLWithPath_isDirectory;
  NSURL initFileURLWithPath_isDirectory(NSObject path, bool isDir) {
    _sel_initFileURLWithPath_isDirectory ??=
        _registerName(_lib, "initFileURLWithPath:isDirectory:");
    final _ret = _lib._objc_msgSend_362(
        _id, _sel_initFileURLWithPath_isDirectory!, path._id, isDir);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initFileURLWithPath;
  NSURL initFileURLWithPath(NSObject path) {
    _sel_initFileURLWithPath ??= _registerName(_lib, "initFileURLWithPath:");
    final _ret =
        _lib._objc_msgSend_363(_id, _sel_initFileURLWithPath!, path._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileURLWithPath_isDirectory_relativeToURL;
  static NSURL fileURLWithPath_isDirectory_relativeToURL(
      NativeLibrary _lib, NSObject path, bool isDir, NSObject baseURL) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_fileURLWithPath_isDirectory_relativeToURL ??=
        _registerName(_lib, "fileURLWithPath:isDirectory:relativeToURL:");
    final _ret = _lib._objc_msgSend_364(
        _class!,
        _sel_fileURLWithPath_isDirectory_relativeToURL!,
        path._id,
        isDir,
        baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileURLWithPath_relativeToURL;
  static NSURL fileURLWithPath_relativeToURL(
      NativeLibrary _lib, NSObject path, NSObject baseURL) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_fileURLWithPath_relativeToURL ??=
        _registerName(_lib, "fileURLWithPath:relativeToURL:");
    final _ret = _lib._objc_msgSend_365(
        _class!, _sel_fileURLWithPath_relativeToURL!, path._id, baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileURLWithPath_isDirectory;
  static NSURL fileURLWithPath_isDirectory(
      NativeLibrary _lib, NSObject path, bool isDir) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_fileURLWithPath_isDirectory ??=
        _registerName(_lib, "fileURLWithPath:isDirectory:");
    final _ret = _lib._objc_msgSend_366(
        _class!, _sel_fileURLWithPath_isDirectory!, path._id, isDir);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileURLWithPath;
  static NSURL fileURLWithPath(NativeLibrary _lib, NSObject path) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_fileURLWithPath ??= _registerName(_lib, "fileURLWithPath:");
    final _ret =
        _lib._objc_msgSend_367(_class!, _sel_fileURLWithPath!, path._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL;
  NSURL initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL(
      ffi.Pointer<pkg_ffi.Char> path, bool isDir, NSObject baseURL) {
    _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL ??=
        _registerName(_lib,
            "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
    final _ret = _lib._objc_msgSend_368(
        _id,
        _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL!,
        path,
        isDir,
        baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL;
  static NSURL fileURLWithFileSystemRepresentation_isDirectory_relativeToURL(
      NativeLibrary _lib,
      ffi.Pointer<pkg_ffi.Char> path,
      bool isDir,
      NSObject baseURL) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL ??=
        _registerName(_lib,
            "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
    final _ret = _lib._objc_msgSend_369(
        _class!,
        _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL!,
        path,
        isDir,
        baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithString;
  NSURL initWithString(NSObject URLString) {
    _sel_initWithString ??= _registerName(_lib, "initWithString:");
    final _ret =
        _lib._objc_msgSend_370(_id, _sel_initWithString!, URLString._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithString_relativeToURL;
  NSURL initWithString_relativeToURL(NSObject URLString, NSObject baseURL) {
    _sel_initWithString_relativeToURL ??=
        _registerName(_lib, "initWithString:relativeToURL:");
    final _ret = _lib._objc_msgSend_371(
        _id, _sel_initWithString_relativeToURL!, URLString._id, baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLWithString;
  static NSURL URLWithString(NativeLibrary _lib, NSObject URLString) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_URLWithString ??= _registerName(_lib, "URLWithString:");
    final _ret =
        _lib._objc_msgSend_372(_class!, _sel_URLWithString!, URLString._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLWithString_relativeToURL;
  static NSURL URLWithString_relativeToURL(
      NativeLibrary _lib, NSObject URLString, NSObject baseURL) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_URLWithString_relativeToURL ??=
        _registerName(_lib, "URLWithString:relativeToURL:");
    final _ret = _lib._objc_msgSend_373(
        _class!, _sel_URLWithString_relativeToURL!, URLString._id, baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithDataRepresentation_relativeToURL;
  NSURL initWithDataRepresentation_relativeToURL(
      NSObject data, NSObject baseURL) {
    _sel_initWithDataRepresentation_relativeToURL ??=
        _registerName(_lib, "initWithDataRepresentation:relativeToURL:");
    final _ret = _lib._objc_msgSend_374(_id,
        _sel_initWithDataRepresentation_relativeToURL!, data._id, baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLWithDataRepresentation_relativeToURL;
  static NSURL URLWithDataRepresentation_relativeToURL(
      NativeLibrary _lib, NSObject data, NSObject baseURL) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_URLWithDataRepresentation_relativeToURL ??=
        _registerName(_lib, "URLWithDataRepresentation:relativeToURL:");
    final _ret = _lib._objc_msgSend_375(_class!,
        _sel_URLWithDataRepresentation_relativeToURL!, data._id, baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initAbsoluteURLWithDataRepresentation_relativeToURL;
  NSURL initAbsoluteURLWithDataRepresentation_relativeToURL(
      NSObject data, NSObject baseURL) {
    _sel_initAbsoluteURLWithDataRepresentation_relativeToURL ??= _registerName(
        _lib, "initAbsoluteURLWithDataRepresentation:relativeToURL:");
    final _ret = _lib._objc_msgSend_376(
        _id,
        _sel_initAbsoluteURLWithDataRepresentation_relativeToURL!,
        data._id,
        baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_absoluteURLWithDataRepresentation_relativeToURL;
  static NSURL absoluteURLWithDataRepresentation_relativeToURL(
      NativeLibrary _lib, NSObject data, NSObject baseURL) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_absoluteURLWithDataRepresentation_relativeToURL ??=
        _registerName(_lib, "absoluteURLWithDataRepresentation:relativeToURL:");
    final _ret = _lib._objc_msgSend_377(
        _class!,
        _sel_absoluteURLWithDataRepresentation_relativeToURL!,
        data._id,
        baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_dataRepresentation;
  NSObject get dataRepresentation {
    _sel_dataRepresentation ??= _registerName(_lib, "dataRepresentation");
    final _ret = _lib._objc_msgSend_378(_id, _sel_dataRepresentation!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_absoluteString;
  NSObject get absoluteString {
    _sel_absoluteString ??= _registerName(_lib, "absoluteString");
    final _ret = _lib._objc_msgSend_379(_id, _sel_absoluteString!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_relativeString;
  NSObject get relativeString {
    _sel_relativeString ??= _registerName(_lib, "relativeString");
    final _ret = _lib._objc_msgSend_380(_id, _sel_relativeString!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_baseURL;
  NSObject get baseURL {
    _sel_baseURL ??= _registerName(_lib, "baseURL");
    final _ret = _lib._objc_msgSend_381(_id, _sel_baseURL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_absoluteURL;
  NSObject get absoluteURL {
    _sel_absoluteURL ??= _registerName(_lib, "absoluteURL");
    final _ret = _lib._objc_msgSend_382(_id, _sel_absoluteURL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_scheme;
  NSObject get scheme {
    _sel_scheme ??= _registerName(_lib, "scheme");
    final _ret = _lib._objc_msgSend_383(_id, _sel_scheme!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_resourceSpecifier;
  NSObject get resourceSpecifier {
    _sel_resourceSpecifier ??= _registerName(_lib, "resourceSpecifier");
    final _ret = _lib._objc_msgSend_384(_id, _sel_resourceSpecifier!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_host;
  NSObject get host {
    _sel_host ??= _registerName(_lib, "host");
    final _ret = _lib._objc_msgSend_385(_id, _sel_host!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_port;
  NSObject get port {
    _sel_port ??= _registerName(_lib, "port");
    final _ret = _lib._objc_msgSend_386(_id, _sel_port!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_user;
  NSObject get user {
    _sel_user ??= _registerName(_lib, "user");
    final _ret = _lib._objc_msgSend_387(_id, _sel_user!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_password;
  NSObject get password {
    _sel_password ??= _registerName(_lib, "password");
    final _ret = _lib._objc_msgSend_388(_id, _sel_password!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_path;
  NSObject get path {
    _sel_path ??= _registerName(_lib, "path");
    final _ret = _lib._objc_msgSend_389(_id, _sel_path!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fragment;
  NSObject get fragment {
    _sel_fragment ??= _registerName(_lib, "fragment");
    final _ret = _lib._objc_msgSend_390(_id, _sel_fragment!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_parameterString;
  NSObject get parameterString {
    _sel_parameterString ??= _registerName(_lib, "parameterString");
    final _ret = _lib._objc_msgSend_391(_id, _sel_parameterString!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_query;
  NSObject get query {
    _sel_query ??= _registerName(_lib, "query");
    final _ret = _lib._objc_msgSend_392(_id, _sel_query!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_relativePath;
  NSObject get relativePath {
    _sel_relativePath ??= _registerName(_lib, "relativePath");
    final _ret = _lib._objc_msgSend_393(_id, _sel_relativePath!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_hasDirectoryPath;
  bool get hasDirectoryPath {
    _sel_hasDirectoryPath ??= _registerName(_lib, "hasDirectoryPath");
    return _lib._objc_msgSend_16(_id, _sel_hasDirectoryPath!);
  }

  static ffi.Pointer<ObjCSel>? _sel_getFileSystemRepresentation_maxLength;
  bool getFileSystemRepresentation_maxLength(
      ffi.Pointer<pkg_ffi.Char> buffer, int maxBufferLength) {
    _sel_getFileSystemRepresentation_maxLength ??=
        _registerName(_lib, "getFileSystemRepresentation:maxLength:");
    return _lib._objc_msgSend_394(_id,
        _sel_getFileSystemRepresentation_maxLength!, buffer, maxBufferLength);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileSystemRepresentation;
  ffi.Pointer<pkg_ffi.Char> get fileSystemRepresentation {
    _sel_fileSystemRepresentation ??=
        _registerName(_lib, "fileSystemRepresentation");
    return _lib._objc_msgSend_395(_id, _sel_fileSystemRepresentation!);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileURL;
  bool get fileURL {
    _sel_fileURL ??= _registerName(_lib, "isFileURL");
    return _lib._objc_msgSend_16(_id, _sel_fileURL!);
  }

  static ffi.Pointer<ObjCSel>? _sel_standardizedURL;
  NSObject get standardizedURL {
    _sel_standardizedURL ??= _registerName(_lib, "standardizedURL");
    final _ret = _lib._objc_msgSend_396(_id, _sel_standardizedURL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_checkResourceIsReachableAndReturnError;
  bool checkResourceIsReachableAndReturnError(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _sel_checkResourceIsReachableAndReturnError ??=
        _registerName(_lib, "checkResourceIsReachableAndReturnError:");
    return _lib._objc_msgSend_397(
        _id, _sel_checkResourceIsReachableAndReturnError!, error);
  }

  static ffi.Pointer<ObjCSel>? _sel_isFileReferenceURL;
  bool isFileReferenceURL() {
    _sel_isFileReferenceURL ??= _registerName(_lib, "isFileReferenceURL");
    return _lib._objc_msgSend_16(_id, _sel_isFileReferenceURL!);
  }

  static ffi.Pointer<ObjCSel>? _sel_fileReferenceURL;
  NSURL fileReferenceURL() {
    _sel_fileReferenceURL ??= _registerName(_lib, "fileReferenceURL");
    final _ret = _lib._objc_msgSend_398(_id, _sel_fileReferenceURL!);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_filePathURL;
  NSObject get filePathURL {
    _sel_filePathURL ??= _registerName(_lib, "filePathURL");
    final _ret = _lib._objc_msgSend_399(_id, _sel_filePathURL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_getResourceValue_forKey_error;
  bool getResourceValue_forKey_error(ffi.Pointer<ffi.Pointer<ObjCObject>> value,
      NSURLResourceKey key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _sel_getResourceValue_forKey_error ??=
        _registerName(_lib, "getResourceValue:forKey:error:");
    return _lib._objc_msgSend_400(
        _id, _sel_getResourceValue_forKey_error!, value, key, error);
  }

  static ffi.Pointer<ObjCSel>? _sel_setResourceValue_forKey_error;
  bool setResourceValue_forKey_error(NSObject value, NSURLResourceKey key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _sel_setResourceValue_forKey_error ??=
        _registerName(_lib, "setResourceValue:forKey:error:");
    return _lib._objc_msgSend_401(
        _id, _sel_setResourceValue_forKey_error!, value._id, key, error);
  }

  static ffi.Pointer<ObjCSel>? _sel_setResourceValues_error;
  bool setResourceValues_error(
      NSObject keyedValues, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _sel_setResourceValues_error ??=
        _registerName(_lib, "setResourceValues:error:");
    return _lib._objc_msgSend_402(
        _id, _sel_setResourceValues_error!, keyedValues._id, error);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeCachedResourceValueForKey;
  void removeCachedResourceValueForKey(NSURLResourceKey key) {
    _sel_removeCachedResourceValueForKey ??=
        _registerName(_lib, "removeCachedResourceValueForKey:");
    _lib._objc_msgSend_403(_id, _sel_removeCachedResourceValueForKey!, key);
  }

  static ffi.Pointer<ObjCSel>? _sel_removeAllCachedResourceValues;
  void removeAllCachedResourceValues() {
    _sel_removeAllCachedResourceValues ??=
        _registerName(_lib, "removeAllCachedResourceValues");
    _lib._objc_msgSend_0(_id, _sel_removeAllCachedResourceValues!);
  }

  static ffi.Pointer<ObjCSel>? _sel_setTemporaryResourceValue_forKey;
  void setTemporaryResourceValue_forKey(NSObject value, NSURLResourceKey key) {
    _sel_setTemporaryResourceValue_forKey ??=
        _registerName(_lib, "setTemporaryResourceValue:forKey:");
    _lib._objc_msgSend_404(
        _id, _sel_setTemporaryResourceValue_forKey!, value._id, key);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error;
  NSData
      bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error(
          int options,
          NSObject keys,
          NSObject relativeURL,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error ??=
        _registerName(_lib,
            "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
    final _ret = _lib._objc_msgSend_405(
        _id,
        _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error!,
        options,
        keys._id,
        relativeURL._id,
        error);
    return NSData._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error;
  NSURL
      initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(
          NSObject bookmarkData,
          int options,
          NSObject relativeURL,
          ffi.Pointer<ffi.Uint8> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error ??=
        _registerName(_lib,
            "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
    final _ret = _lib._objc_msgSend_406(
        _id,
        _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error!,
        bookmarkData._id,
        options,
        relativeURL._id,
        isStale,
        error);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error;
  static NSURL
      URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(
          NativeLibrary _lib,
          NSObject bookmarkData,
          int options,
          NSObject relativeURL,
          ffi.Pointer<ffi.Uint8> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error ??=
        _registerName(_lib,
            "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
    final _ret = _lib._objc_msgSend_407(
        _class!,
        _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error!,
        bookmarkData._id,
        options,
        relativeURL._id,
        isStale,
        error);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_writeBookmarkData_toURL_options_error;
  static bool writeBookmarkData_toURL_options_error(
      NativeLibrary _lib,
      NSObject bookmarkData,
      NSObject bookmarkFileURL,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_writeBookmarkData_toURL_options_error ??=
        _registerName(_lib, "writeBookmarkData:toURL:options:error:");
    return _lib._objc_msgSend_408(
        _class!,
        _sel_writeBookmarkData_toURL_options_error!,
        bookmarkData._id,
        bookmarkFileURL._id,
        options,
        error);
  }

  static ffi.Pointer<ObjCSel>? _sel_bookmarkDataWithContentsOfURL_error;
  static NSData bookmarkDataWithContentsOfURL_error(NativeLibrary _lib,
      NSObject bookmarkFileURL, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_bookmarkDataWithContentsOfURL_error ??=
        _registerName(_lib, "bookmarkDataWithContentsOfURL:error:");
    final _ret = _lib._objc_msgSend_409(_class!,
        _sel_bookmarkDataWithContentsOfURL_error!, bookmarkFileURL._id, error);
    return NSData._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLByResolvingAliasFileAtURL_options_error;
  static NSURL URLByResolvingAliasFileAtURL_options_error(NativeLibrary _lib,
      NSObject url, int options, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_URLByResolvingAliasFileAtURL_options_error ??=
        _registerName(_lib, "URLByResolvingAliasFileAtURL:options:error:");
    final _ret = _lib._objc_msgSend_410(
        _class!,
        _sel_URLByResolvingAliasFileAtURL_options_error!,
        url._id,
        options,
        error);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_startAccessingSecurityScopedResource;
  bool startAccessingSecurityScopedResource() {
    _sel_startAccessingSecurityScopedResource ??=
        _registerName(_lib, "startAccessingSecurityScopedResource");
    return _lib._objc_msgSend_16(
        _id, _sel_startAccessingSecurityScopedResource!);
  }

  static ffi.Pointer<ObjCSel>? _sel_stopAccessingSecurityScopedResource;
  void stopAccessingSecurityScopedResource() {
    _sel_stopAccessingSecurityScopedResource ??=
        _registerName(_lib, "stopAccessingSecurityScopedResource");
    _lib._objc_msgSend_0(_id, _sel_stopAccessingSecurityScopedResource!);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURL new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURL alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURL");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURL._(_ret, _lib);
  }
}

typedef NSURLResourceKey = ffi.Pointer<ObjCObject>;

abstract class NSURLBookmarkCreationOptions {
  static const int NSURLBookmarkCreationPreferFileIDResolution = 256;
  static const int NSURLBookmarkCreationMinimalBookmark = 512;
  static const int NSURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int NSURLBookmarkCreationWithSecurityScope = 2048;
  static const int NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;
}

abstract class NSURLBookmarkResolutionOptions {
  static const int NSURLBookmarkResolutionWithoutUI = 256;
  static const int NSURLBookmarkResolutionWithoutMounting = 512;
  static const int NSURLBookmarkResolutionWithSecurityScope = 1024;
}

typedef NSURLBookmarkFileCreationOptions = NSUInteger;
typedef NSURLFileResourceType = ffi.Pointer<ObjCObject>;
typedef NSURLThumbnailDictionaryItem = ffi.Pointer<ObjCObject>;
typedef NSURLFileProtectionType = ffi.Pointer<ObjCObject>;
typedef NSURLUbiquitousItemDownloadingStatus = ffi.Pointer<ObjCObject>;
typedef NSURLUbiquitousSharedItemRole = ffi.Pointer<ObjCObject>;
typedef NSURLUbiquitousSharedItemPermissions = ffi.Pointer<ObjCObject>;

class NSURLQueryItem extends NSObject {
  NSURLQueryItem._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLQueryItem castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLQueryItem._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithName_value;
  NSURLQueryItem initWithName_value(NSObject name, NSObject value) {
    _sel_initWithName_value ??= _registerName(_lib, "initWithName:value:");
    final _ret = _lib._objc_msgSend_411(
        _id, _sel_initWithName_value!, name._id, value._id);
    return NSURLQueryItem._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_queryItemWithName_value;
  static NSURLQueryItem queryItemWithName_value(
      NativeLibrary _lib, NSObject name, NSObject value) {
    _class ??= _getClass(_lib, "NSURLQueryItem");
    _sel_queryItemWithName_value ??=
        _registerName(_lib, "queryItemWithName:value:");
    final _ret = _lib._objc_msgSend_412(
        _class!, _sel_queryItemWithName_value!, name._id, value._id);
    return NSURLQueryItem._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_name;
  NSObject get name {
    _sel_name ??= _registerName(_lib, "name");
    final _ret = _lib._objc_msgSend_413(_id, _sel_name!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_value;
  NSObject get value {
    _sel_value ??= _registerName(_lib, "value");
    final _ret = _lib._objc_msgSend_414(_id, _sel_value!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLQueryItem new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLQueryItem");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLQueryItem._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLQueryItem alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLQueryItem");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLQueryItem._(_ret, _lib);
  }
}

class NSURLComponents extends NSObject {
  NSURLComponents._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLComponents castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLComponents._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_init;
  @override
  NSURLComponents init() {
    _sel_init ??= _registerName(_lib, "init");
    final _ret = _lib._objc_msgSend_1(_id, _sel_init!);
    return NSURLComponents._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithURL_resolvingAgainstBaseURL;
  NSURLComponents initWithURL_resolvingAgainstBaseURL(
      NSObject url, bool resolve) {
    _sel_initWithURL_resolvingAgainstBaseURL ??=
        _registerName(_lib, "initWithURL:resolvingAgainstBaseURL:");
    final _ret = _lib._objc_msgSend_415(
        _id, _sel_initWithURL_resolvingAgainstBaseURL!, url._id, resolve);
    return NSURLComponents._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_componentsWithURL_resolvingAgainstBaseURL;
  static NSURLComponents componentsWithURL_resolvingAgainstBaseURL(
      NativeLibrary _lib, NSObject url, bool resolve) {
    _class ??= _getClass(_lib, "NSURLComponents");
    _sel_componentsWithURL_resolvingAgainstBaseURL ??=
        _registerName(_lib, "componentsWithURL:resolvingAgainstBaseURL:");
    final _ret = _lib._objc_msgSend_416(_class!,
        _sel_componentsWithURL_resolvingAgainstBaseURL!, url._id, resolve);
    return NSURLComponents._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithString;
  NSURLComponents initWithString(NSObject URLString) {
    _sel_initWithString ??= _registerName(_lib, "initWithString:");
    final _ret =
        _lib._objc_msgSend_417(_id, _sel_initWithString!, URLString._id);
    return NSURLComponents._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_componentsWithString;
  static NSURLComponents componentsWithString(
      NativeLibrary _lib, NSObject URLString) {
    _class ??= _getClass(_lib, "NSURLComponents");
    _sel_componentsWithString ??= _registerName(_lib, "componentsWithString:");
    final _ret = _lib._objc_msgSend_418(
        _class!, _sel_componentsWithString!, URLString._id);
    return NSURLComponents._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URL;
  NSObject get URL {
    _sel_URL ??= _registerName(_lib, "URL");
    final _ret = _lib._objc_msgSend_419(_id, _sel_URL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URLRelativeToURL;
  NSURL URLRelativeToURL(NSObject baseURL) {
    _sel_URLRelativeToURL ??= _registerName(_lib, "URLRelativeToURL:");
    final _ret =
        _lib._objc_msgSend_420(_id, _sel_URLRelativeToURL!, baseURL._id);
    return NSURL._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_string;
  NSObject get string {
    _sel_string ??= _registerName(_lib, "string");
    final _ret = _lib._objc_msgSend_421(_id, _sel_string!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_scheme;
  NSObject get scheme {
    _sel_scheme ??= _registerName(_lib, "scheme");
    final _ret = _lib._objc_msgSend_422(_id, _sel_scheme!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_scheme1;
  set scheme(NSObject value) {
    _sel_scheme1 ??= _registerName(_lib, "setScheme:");
    _lib._objc_msgSend_423(_id, _sel_scheme1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_user;
  NSObject get user {
    _sel_user ??= _registerName(_lib, "user");
    final _ret = _lib._objc_msgSend_424(_id, _sel_user!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_user1;
  set user(NSObject value) {
    _sel_user1 ??= _registerName(_lib, "setUser:");
    _lib._objc_msgSend_425(_id, _sel_user1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_password;
  NSObject get password {
    _sel_password ??= _registerName(_lib, "password");
    final _ret = _lib._objc_msgSend_426(_id, _sel_password!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_password1;
  set password(NSObject value) {
    _sel_password1 ??= _registerName(_lib, "setPassword:");
    _lib._objc_msgSend_427(_id, _sel_password1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_host;
  NSObject get host {
    _sel_host ??= _registerName(_lib, "host");
    final _ret = _lib._objc_msgSend_428(_id, _sel_host!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_host1;
  set host(NSObject value) {
    _sel_host1 ??= _registerName(_lib, "setHost:");
    _lib._objc_msgSend_429(_id, _sel_host1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_port;
  NSObject get port {
    _sel_port ??= _registerName(_lib, "port");
    final _ret = _lib._objc_msgSend_430(_id, _sel_port!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_port1;
  set port(NSObject value) {
    _sel_port1 ??= _registerName(_lib, "setPort:");
    _lib._objc_msgSend_431(_id, _sel_port1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_path;
  NSObject get path {
    _sel_path ??= _registerName(_lib, "path");
    final _ret = _lib._objc_msgSend_432(_id, _sel_path!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_path1;
  set path(NSObject value) {
    _sel_path1 ??= _registerName(_lib, "setPath:");
    _lib._objc_msgSend_433(_id, _sel_path1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_query;
  NSObject get query {
    _sel_query ??= _registerName(_lib, "query");
    final _ret = _lib._objc_msgSend_434(_id, _sel_query!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_query1;
  set query(NSObject value) {
    _sel_query1 ??= _registerName(_lib, "setQuery:");
    _lib._objc_msgSend_435(_id, _sel_query1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_fragment;
  NSObject get fragment {
    _sel_fragment ??= _registerName(_lib, "fragment");
    final _ret = _lib._objc_msgSend_436(_id, _sel_fragment!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_fragment1;
  set fragment(NSObject value) {
    _sel_fragment1 ??= _registerName(_lib, "setFragment:");
    _lib._objc_msgSend_437(_id, _sel_fragment1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedUser;
  NSObject get percentEncodedUser {
    _sel_percentEncodedUser ??= _registerName(_lib, "percentEncodedUser");
    final _ret = _lib._objc_msgSend_438(_id, _sel_percentEncodedUser!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedUser1;
  set percentEncodedUser(NSObject value) {
    _sel_percentEncodedUser1 ??= _registerName(_lib, "setPercentEncodedUser:");
    _lib._objc_msgSend_439(_id, _sel_percentEncodedUser1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedPassword;
  NSObject get percentEncodedPassword {
    _sel_percentEncodedPassword ??=
        _registerName(_lib, "percentEncodedPassword");
    final _ret = _lib._objc_msgSend_440(_id, _sel_percentEncodedPassword!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedPassword1;
  set percentEncodedPassword(NSObject value) {
    _sel_percentEncodedPassword1 ??=
        _registerName(_lib, "setPercentEncodedPassword:");
    _lib._objc_msgSend_441(_id, _sel_percentEncodedPassword1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedHost;
  NSObject get percentEncodedHost {
    _sel_percentEncodedHost ??= _registerName(_lib, "percentEncodedHost");
    final _ret = _lib._objc_msgSend_442(_id, _sel_percentEncodedHost!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedHost1;
  set percentEncodedHost(NSObject value) {
    _sel_percentEncodedHost1 ??= _registerName(_lib, "setPercentEncodedHost:");
    _lib._objc_msgSend_443(_id, _sel_percentEncodedHost1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedPath;
  NSObject get percentEncodedPath {
    _sel_percentEncodedPath ??= _registerName(_lib, "percentEncodedPath");
    final _ret = _lib._objc_msgSend_444(_id, _sel_percentEncodedPath!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedPath1;
  set percentEncodedPath(NSObject value) {
    _sel_percentEncodedPath1 ??= _registerName(_lib, "setPercentEncodedPath:");
    _lib._objc_msgSend_445(_id, _sel_percentEncodedPath1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedQuery;
  NSObject get percentEncodedQuery {
    _sel_percentEncodedQuery ??= _registerName(_lib, "percentEncodedQuery");
    final _ret = _lib._objc_msgSend_446(_id, _sel_percentEncodedQuery!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedQuery1;
  set percentEncodedQuery(NSObject value) {
    _sel_percentEncodedQuery1 ??=
        _registerName(_lib, "setPercentEncodedQuery:");
    _lib._objc_msgSend_447(_id, _sel_percentEncodedQuery1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedFragment;
  NSObject get percentEncodedFragment {
    _sel_percentEncodedFragment ??=
        _registerName(_lib, "percentEncodedFragment");
    final _ret = _lib._objc_msgSend_448(_id, _sel_percentEncodedFragment!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedFragment1;
  set percentEncodedFragment(NSObject value) {
    _sel_percentEncodedFragment1 ??=
        _registerName(_lib, "setPercentEncodedFragment:");
    _lib._objc_msgSend_449(_id, _sel_percentEncodedFragment1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfScheme;
  NSRange get rangeOfScheme {
    _sel_rangeOfScheme ??= _registerName(_lib, "rangeOfScheme");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfScheme!);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfUser;
  NSRange get rangeOfUser {
    _sel_rangeOfUser ??= _registerName(_lib, "rangeOfUser");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfUser!);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfPassword;
  NSRange get rangeOfPassword {
    _sel_rangeOfPassword ??= _registerName(_lib, "rangeOfPassword");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfPassword!);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfHost;
  NSRange get rangeOfHost {
    _sel_rangeOfHost ??= _registerName(_lib, "rangeOfHost");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfHost!);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfPort;
  NSRange get rangeOfPort {
    _sel_rangeOfPort ??= _registerName(_lib, "rangeOfPort");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfPort!);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfPath;
  NSRange get rangeOfPath {
    _sel_rangeOfPath ??= _registerName(_lib, "rangeOfPath");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfPath!);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfQuery;
  NSRange get rangeOfQuery {
    _sel_rangeOfQuery ??= _registerName(_lib, "rangeOfQuery");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfQuery!);
  }

  static ffi.Pointer<ObjCSel>? _sel_rangeOfFragment;
  NSRange get rangeOfFragment {
    _sel_rangeOfFragment ??= _registerName(_lib, "rangeOfFragment");
    return _lib._objc_msgSend_450(_id, _sel_rangeOfFragment!);
  }

  static ffi.Pointer<ObjCSel>? _sel_queryItems;
  NSObject get queryItems {
    _sel_queryItems ??= _registerName(_lib, "queryItems");
    final _ret = _lib._objc_msgSend_451(_id, _sel_queryItems!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_queryItems1;
  set queryItems(NSObject value) {
    _sel_queryItems1 ??= _registerName(_lib, "setQueryItems:");
    _lib._objc_msgSend_452(_id, _sel_queryItems1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedQueryItems;
  NSObject get percentEncodedQueryItems {
    _sel_percentEncodedQueryItems ??=
        _registerName(_lib, "percentEncodedQueryItems");
    final _ret = _lib._objc_msgSend_453(_id, _sel_percentEncodedQueryItems!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_percentEncodedQueryItems1;
  set percentEncodedQueryItems(NSObject value) {
    _sel_percentEncodedQueryItems1 ??=
        _registerName(_lib, "setPercentEncodedQueryItems:");
    _lib._objc_msgSend_454(_id, _sel_percentEncodedQueryItems1!, value._id);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLComponents new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLComponents");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLComponents._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLComponents alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLComponents");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLComponents._(_ret, _lib);
  }
}

class NSFileSecurity extends NSObject {
  NSFileSecurity._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSFileSecurity castFrom<T extends _ObjCWrapper>(T other) {
    return NSFileSecurity._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_initWithCoder;
  NSFileSecurity initWithCoder(NSObject coder) {
    _sel_initWithCoder ??= _registerName(_lib, "initWithCoder:");
    final _ret = _lib._objc_msgSend_455(_id, _sel_initWithCoder!, coder._id);
    return NSFileSecurity._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSFileSecurity new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSFileSecurity");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSFileSecurity._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSFileSecurity alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSFileSecurity");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSFileSecurity._(_ret, _lib);
  }
}

/// !
/// @class NSURLResponse
///
/// @abstract An NSURLResponse object represents a URL load response in a
/// manner independent of protocol and URL scheme.
///
/// @discussion NSURLResponse encapsulates the metadata associated
/// with a URL load. Note that NSURLResponse objects do not contain
/// the actual bytes representing the content of a URL. See
/// NSURLConnection and NSURLConnectionDelegate for more information
/// about receiving the content data for a URL load.
class NSURLResponse extends NSObject {
  NSURLResponse._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSURLResponse castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLResponse._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName;

  /// !
  /// @method initWithURL:MIMEType:expectedContentLength:textEncodingName:
  /// @abstract Initialize an NSURLResponse with the provided values.
  /// @param URL the URL
  /// @param MIMEType the MIME content type of the response
  /// @param length the expected content length of the associated data
  /// @param name the name of the text encoding for the associated data, if applicable, else nil
  /// @result The initialized NSURLResponse.
  /// @discussion This is the designated initializer for NSURLResponse.
  NSURLResponse initWithURL_MIMEType_expectedContentLength_textEncodingName(
      NSObject URL, NSObject MIMEType, int length, NSObject name) {
    _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName ??=
        _registerName(_lib,
            "initWithURL:MIMEType:expectedContentLength:textEncodingName:");
    final _ret = _lib._objc_msgSend_456(
        _id,
        _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName!,
        URL._id,
        MIMEType._id,
        length,
        name._id);
    return NSURLResponse._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_URL;

  /// !
  /// @abstract Returns the URL of the receiver.
  /// @result The URL of the receiver.
  NSObject get URL {
    _sel_URL ??= _registerName(_lib, "URL");
    final _ret = _lib._objc_msgSend_457(_id, _sel_URL!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_MIMEType;

  /// !
  /// @abstract Returns the MIME type of the receiver.
  /// @discussion The MIME type is based on the information provided
  /// from an origin source. However, that value may be changed or
  /// corrected by a protocol implementation if it can be determined
  /// that the origin server or source reported the information
  /// incorrectly or imprecisely. An attempt to guess the MIME type may
  /// be made if the origin source did not report any such information.
  /// @result The MIME type of the receiver.
  NSObject get MIMEType {
    _sel_MIMEType ??= _registerName(_lib, "MIMEType");
    final _ret = _lib._objc_msgSend_458(_id, _sel_MIMEType!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_expectedContentLength;

  /// !
  /// @abstract Returns the expected content length of the receiver.
  /// @discussion Some protocol implementations report a content length
  /// as part of delivering load metadata, but not all protocols
  /// guarantee the amount of data that will be delivered in actuality.
  /// Hence, this method returns an expected amount. Clients should use
  /// this value as an advisory, and should be prepared to deal with
  /// either more or less data.
  /// @result The expected content length of the receiver, or -1 if
  /// there is no expectation that can be arrived at regarding expected
  /// content length.
  int get expectedContentLength {
    _sel_expectedContentLength ??= _registerName(_lib, "expectedContentLength");
    return _lib._objc_msgSend_243(_id, _sel_expectedContentLength!);
  }

  static ffi.Pointer<ObjCSel>? _sel_textEncodingName;

  /// !
  /// @abstract Returns the name of the text encoding of the receiver.
  /// @discussion This name will be the actual string reported by the
  /// origin source during the course of performing a protocol-specific
  /// URL load. Clients can inspect this string and convert it to an
  /// NSStringEncoding or CFStringEncoding using the methods and
  /// functions made available in the appropriate framework.
  /// @result The name of the text encoding of the receiver, or nil if no
  /// text encoding was specified.
  NSObject get textEncodingName {
    _sel_textEncodingName ??= _registerName(_lib, "textEncodingName");
    final _ret = _lib._objc_msgSend_459(_id, _sel_textEncodingName!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_suggestedFilename;

  /// !
  /// @abstract Returns a suggested filename if the resource were saved to disk.
  /// @discussion The method first checks if the server has specified a filename using the
  /// content disposition header. If no valid filename is specified using that mechanism,
  /// this method checks the last path component of the URL. If no valid filename can be
  /// obtained using the last path component, this method uses the URL's host as the filename.
  /// If the URL's host can't be converted to a valid filename, the filename "unknown" is used.
  /// In mose cases, this method appends the proper file extension based on the MIME type.
  /// This method always returns a valid filename.
  /// @result A suggested filename to use if saving the resource to disk.
  NSObject get suggestedFilename {
    _sel_suggestedFilename ??= _registerName(_lib, "suggestedFilename");
    final _ret = _lib._objc_msgSend_460(_id, _sel_suggestedFilename!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSURLResponse new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLResponse");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSURLResponse._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSURLResponse alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSURLResponse");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSURLResponse._(_ret, _lib);
  }
}

/// !
/// @class NSHTTPURLResponse
///
/// @abstract An NSHTTPURLResponse object represents a response to an
/// HTTP URL load. It is a specialization of NSURLResponse which
/// provides conveniences for accessing information specific to HTTP
/// protocol responses.
class NSHTTPURLResponse extends NSURLResponse {
  NSHTTPURLResponse._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static ffi.Pointer<ObjCObject>? _class;

  static NSHTTPURLResponse castFrom<T extends _ObjCWrapper>(T other) {
    return NSHTTPURLResponse._(other._id, other._lib);
  }

  static ffi.Pointer<ObjCSel>?
      _sel_initWithURL_statusCode_HTTPVersion_headerFields;

  /// !
  /// @method	initWithURL:statusCode:HTTPVersion:headerFields:
  /// @abstract initializer for NSHTTPURLResponse objects.
  /// @param 	url the URL from which the response was generated.
  /// @param	statusCode an HTTP status code.
  /// @param	HTTPVersion The version of the HTTP response as represented by the server.  This is typically represented as "HTTP/1.1".
  /// @param 	headerFields A dictionary representing the header keys and values of the server response.
  /// @result 	the instance of the object, or NULL if an error occurred during initialization.
  /// @discussion This API was introduced in Mac OS X 10.7.2 and iOS 5.0 and is not available prior to those releases.
  NSHTTPURLResponse initWithURL_statusCode_HTTPVersion_headerFields(
      NSObject url,
      int statusCode,
      NSObject HTTPVersion,
      NSObject headerFields) {
    _sel_initWithURL_statusCode_HTTPVersion_headerFields ??=
        _registerName(_lib, "initWithURL:statusCode:HTTPVersion:headerFields:");
    final _ret = _lib._objc_msgSend_461(
        _id,
        _sel_initWithURL_statusCode_HTTPVersion_headerFields!,
        url._id,
        statusCode,
        HTTPVersion._id,
        headerFields._id);
    return NSHTTPURLResponse._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_statusCode;

  /// !
  /// @abstract Returns the HTTP status code of the receiver.
  /// @result The HTTP status code of the receiver.
  int get statusCode {
    _sel_statusCode ??= _registerName(_lib, "statusCode");
    return _lib._objc_msgSend_155(_id, _sel_statusCode!);
  }

  static ffi.Pointer<ObjCSel>? _sel_allHeaderFields;

  /// !
  /// @abstract Returns a dictionary containing all the HTTP header fields
  /// of the receiver.
  /// @discussion By examining this header dictionary, clients can see
  /// the "raw" header information which was reported to the protocol
  /// implementation by the HTTP server. This may be of use to
  /// sophisticated or special-purpose HTTP clients.
  /// @result A dictionary containing all the HTTP header fields of the
  /// receiver.
  NSObject get allHeaderFields {
    _sel_allHeaderFields ??= _registerName(_lib, "allHeaderFields");
    final _ret = _lib._objc_msgSend_462(_id, _sel_allHeaderFields!);
    return NSObject._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_valueForHTTPHeaderField;

  /// !
  /// @method valueForHTTPHeaderField:
  /// @abstract Returns the value which corresponds to the given header
  /// field. Note that, in keeping with the HTTP RFC, HTTP header field
  /// names are case-insensitive.
  /// @param field the header field name to use for the lookup
  /// (case-insensitive).
  /// @result the value associated with the given header field, or nil if
  /// there is no value associated with the given header field.
  NSString valueForHTTPHeaderField(NSObject field) {
    _sel_valueForHTTPHeaderField ??=
        _registerName(_lib, "valueForHTTPHeaderField:");
    final _ret =
        _lib._objc_msgSend_463(_id, _sel_valueForHTTPHeaderField!, field._id);
    return NSString._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_localizedStringForStatusCode;

  /// !
  /// @method localizedStringForStatusCode:
  /// @abstract Convenience method which returns a localized string
  /// corresponding to the status code for this response.
  /// @param statusCode the status code to use to produce a localized string.
  /// @result A localized string corresponding to the given status code.
  static NSString localizedStringForStatusCode(
      NativeLibrary _lib, int statusCode) {
    _class ??= _getClass(_lib, "NSHTTPURLResponse");
    _sel_localizedStringForStatusCode ??=
        _registerName(_lib, "localizedStringForStatusCode:");
    final _ret = _lib._objc_msgSend_464(
        _class!, _sel_localizedStringForStatusCode!, statusCode);
    return NSString._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_new1;
  static NSHTTPURLResponse new1(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSHTTPURLResponse");
    _sel_new1 ??= _registerName(_lib, "new");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_new1!);
    return NSHTTPURLResponse._(_ret, _lib);
  }

  static ffi.Pointer<ObjCSel>? _sel_alloc;
  static NSHTTPURLResponse alloc(NativeLibrary _lib) {
    _class ??= _getClass(_lib, "NSHTTPURLResponse");
    _sel_alloc ??= _registerName(_lib, "alloc");
    final _ret = _lib._objc_msgSend_1(_class!, _sel_alloc!);
    return NSHTTPURLResponse._(_ret, _lib);
  }
}

const int NSScannedOption = 1;

const int NSCollectorDisabledOption = 2;

const int errSecSuccess = 0;

const int errSecUnimplemented = -4;

const int errSecDiskFull = -34;

const int errSecDskFull = -34;

const int errSecIO = -36;

const int errSecOpWr = -49;

const int errSecParam = -50;

const int errSecWrPerm = -61;

const int errSecAllocate = -108;

const int errSecUserCanceled = -128;

const int errSecBadReq = -909;

const int errSecInternalComponent = -2070;

const int errSecCoreFoundationUnknown = -4960;

const int errSecMissingEntitlement = -34018;

const int errSecRestrictedAPI = -34020;

const int errSecNotAvailable = -25291;

const int errSecReadOnly = -25292;

const int errSecAuthFailed = -25293;

const int errSecNoSuchKeychain = -25294;

const int errSecInvalidKeychain = -25295;

const int errSecDuplicateKeychain = -25296;

const int errSecDuplicateCallback = -25297;

const int errSecInvalidCallback = -25298;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecBufferTooSmall = -25301;

const int errSecDataTooLarge = -25302;

const int errSecNoSuchAttr = -25303;

const int errSecInvalidItemRef = -25304;

const int errSecInvalidSearchRef = -25305;

const int errSecNoSuchClass = -25306;

const int errSecNoDefaultKeychain = -25307;

const int errSecInteractionNotAllowed = -25308;

const int errSecReadOnlyAttr = -25309;

const int errSecWrongSecVersion = -25310;

const int errSecKeySizeNotAllowed = -25311;

const int errSecNoStorageModule = -25312;

const int errSecNoCertificateModule = -25313;

const int errSecNoPolicyModule = -25314;

const int errSecInteractionRequired = -25315;

const int errSecDataNotAvailable = -25316;

const int errSecDataNotModifiable = -25317;

const int errSecCreateChainFailed = -25318;

const int errSecInvalidPrefsDomain = -25319;

const int errSecInDarkWake = -25320;

const int errSecACLNotSimple = -25240;

const int errSecPolicyNotFound = -25241;

const int errSecInvalidTrustSetting = -25242;

const int errSecNoAccessForItem = -25243;

const int errSecInvalidOwnerEdit = -25244;

const int errSecTrustNotAvailable = -25245;

const int errSecUnsupportedFormat = -25256;

const int errSecUnknownFormat = -25257;

const int errSecKeyIsSensitive = -25258;

const int errSecMultiplePrivKeys = -25259;

const int errSecPassphraseRequired = -25260;

const int errSecInvalidPasswordRef = -25261;

const int errSecInvalidTrustSettings = -25262;

const int errSecNoTrustSettings = -25263;

const int errSecPkcs12VerifyFailure = -25264;

const int errSecNotSigner = -26267;

const int errSecDecode = -26275;

const int errSecServiceNotAvailable = -67585;

const int errSecInsufficientClientID = -67586;

const int errSecDeviceReset = -67587;

const int errSecDeviceFailed = -67588;

const int errSecAppleAddAppACLSubject = -67589;

const int errSecApplePublicKeyIncomplete = -67590;

const int errSecAppleSignatureMismatch = -67591;

const int errSecAppleInvalidKeyStartDate = -67592;

const int errSecAppleInvalidKeyEndDate = -67593;

const int errSecConversionError = -67594;

const int errSecAppleSSLv2Rollback = -67595;

const int errSecQuotaExceeded = -67596;

const int errSecFileTooBig = -67597;

const int errSecInvalidDatabaseBlob = -67598;

const int errSecInvalidKeyBlob = -67599;

const int errSecIncompatibleDatabaseBlob = -67600;

const int errSecIncompatibleKeyBlob = -67601;

const int errSecHostNameMismatch = -67602;

const int errSecUnknownCriticalExtensionFlag = -67603;

const int errSecNoBasicConstraints = -67604;

const int errSecNoBasicConstraintsCA = -67605;

const int errSecInvalidAuthorityKeyID = -67606;

const int errSecInvalidSubjectKeyID = -67607;

const int errSecInvalidKeyUsageForPolicy = -67608;

const int errSecInvalidExtendedKeyUsage = -67609;

const int errSecInvalidIDLinkage = -67610;

const int errSecPathLengthConstraintExceeded = -67611;

const int errSecInvalidRoot = -67612;

const int errSecCRLExpired = -67613;

const int errSecCRLNotValidYet = -67614;

const int errSecCRLNotFound = -67615;

const int errSecCRLServerDown = -67616;

const int errSecCRLBadURI = -67617;

const int errSecUnknownCertExtension = -67618;

const int errSecUnknownCRLExtension = -67619;

const int errSecCRLNotTrusted = -67620;

const int errSecCRLPolicyFailed = -67621;

const int errSecIDPFailure = -67622;

const int errSecSMIMEEmailAddressesNotFound = -67623;

const int errSecSMIMEBadExtendedKeyUsage = -67624;

const int errSecSMIMEBadKeyUsage = -67625;

const int errSecSMIMEKeyUsageNotCritical = -67626;

const int errSecSMIMENoEmailAddress = -67627;

const int errSecSMIMESubjAltNameNotCritical = -67628;

const int errSecSSLBadExtendedKeyUsage = -67629;

const int errSecOCSPBadResponse = -67630;

const int errSecOCSPBadRequest = -67631;

const int errSecOCSPUnavailable = -67632;

const int errSecOCSPStatusUnrecognized = -67633;

const int errSecEndOfData = -67634;

const int errSecIncompleteCertRevocationCheck = -67635;

const int errSecNetworkFailure = -67636;

const int errSecOCSPNotTrustedToAnchor = -67637;

const int errSecRecordModified = -67638;

const int errSecOCSPSignatureError = -67639;

const int errSecOCSPNoSigner = -67640;

const int errSecOCSPResponderMalformedReq = -67641;

const int errSecOCSPResponderInternalError = -67642;

const int errSecOCSPResponderTryLater = -67643;

const int errSecOCSPResponderSignatureRequired = -67644;

const int errSecOCSPResponderUnauthorized = -67645;

const int errSecOCSPResponseNonceMismatch = -67646;

const int errSecCodeSigningBadCertChainLength = -67647;

const int errSecCodeSigningNoBasicConstraints = -67648;

const int errSecCodeSigningBadPathLengthConstraint = -67649;

const int errSecCodeSigningNoExtendedKeyUsage = -67650;

const int errSecCodeSigningDevelopment = -67651;

const int errSecResourceSignBadCertChainLength = -67652;

const int errSecResourceSignBadExtKeyUsage = -67653;

const int errSecTrustSettingDeny = -67654;

const int errSecInvalidSubjectName = -67655;

const int errSecUnknownQualifiedCertStatement = -67656;

const int errSecMobileMeRequestQueued = -67657;

const int errSecMobileMeRequestRedirected = -67658;

const int errSecMobileMeServerError = -67659;

const int errSecMobileMeServerNotAvailable = -67660;

const int errSecMobileMeServerAlreadyExists = -67661;

const int errSecMobileMeServerServiceErr = -67662;

const int errSecMobileMeRequestAlreadyPending = -67663;

const int errSecMobileMeNoRequestPending = -67664;

const int errSecMobileMeCSRVerifyFailure = -67665;

const int errSecMobileMeFailedConsistencyCheck = -67666;

const int errSecNotInitialized = -67667;

const int errSecInvalidHandleUsage = -67668;

const int errSecPVCReferentNotFound = -67669;

const int errSecFunctionIntegrityFail = -67670;

const int errSecInternalError = -67671;

const int errSecMemoryError = -67672;

const int errSecInvalidData = -67673;

const int errSecMDSError = -67674;

const int errSecInvalidPointer = -67675;

const int errSecSelfCheckFailed = -67676;

const int errSecFunctionFailed = -67677;

const int errSecModuleManifestVerifyFailed = -67678;

const int errSecInvalidGUID = -67679;

const int errSecInvalidHandle = -67680;

const int errSecInvalidDBList = -67681;

const int errSecInvalidPassthroughID = -67682;

const int errSecInvalidNetworkAddress = -67683;

const int errSecCRLAlreadySigned = -67684;

const int errSecInvalidNumberOfFields = -67685;

const int errSecVerificationFailure = -67686;

const int errSecUnknownTag = -67687;

const int errSecInvalidSignature = -67688;

const int errSecInvalidName = -67689;

const int errSecInvalidCertificateRef = -67690;

const int errSecInvalidCertificateGroup = -67691;

const int errSecTagNotFound = -67692;

const int errSecInvalidQuery = -67693;

const int errSecInvalidValue = -67694;

const int errSecCallbackFailed = -67695;

const int errSecACLDeleteFailed = -67696;

const int errSecACLReplaceFailed = -67697;

const int errSecACLAddFailed = -67698;

const int errSecACLChangeFailed = -67699;

const int errSecInvalidAccessCredentials = -67700;

const int errSecInvalidRecord = -67701;

const int errSecInvalidACL = -67702;

const int errSecInvalidSampleValue = -67703;

const int errSecIncompatibleVersion = -67704;

const int errSecPrivilegeNotGranted = -67705;

const int errSecInvalidScope = -67706;

const int errSecPVCAlreadyConfigured = -67707;

const int errSecInvalidPVC = -67708;

const int errSecEMMLoadFailed = -67709;

const int errSecEMMUnloadFailed = -67710;

const int errSecAddinLoadFailed = -67711;

const int errSecInvalidKeyRef = -67712;

const int errSecInvalidKeyHierarchy = -67713;

const int errSecAddinUnloadFailed = -67714;

const int errSecLibraryReferenceNotFound = -67715;

const int errSecInvalidAddinFunctionTable = -67716;

const int errSecInvalidServiceMask = -67717;

const int errSecModuleNotLoaded = -67718;

const int errSecInvalidSubServiceID = -67719;

const int errSecAttributeNotInContext = -67720;

const int errSecModuleManagerInitializeFailed = -67721;

const int errSecModuleManagerNotFound = -67722;

const int errSecEventNotificationCallbackNotFound = -67723;

const int errSecInputLengthError = -67724;

const int errSecOutputLengthError = -67725;

const int errSecPrivilegeNotSupported = -67726;

const int errSecDeviceError = -67727;

const int errSecAttachHandleBusy = -67728;

const int errSecNotLoggedIn = -67729;

const int errSecAlgorithmMismatch = -67730;

const int errSecKeyUsageIncorrect = -67731;

const int errSecKeyBlobTypeIncorrect = -67732;

const int errSecKeyHeaderInconsistent = -67733;

const int errSecUnsupportedKeyFormat = -67734;

const int errSecUnsupportedKeySize = -67735;

const int errSecInvalidKeyUsageMask = -67736;

const int errSecUnsupportedKeyUsageMask = -67737;

const int errSecInvalidKeyAttributeMask = -67738;

const int errSecUnsupportedKeyAttributeMask = -67739;

const int errSecInvalidKeyLabel = -67740;

const int errSecUnsupportedKeyLabel = -67741;

const int errSecInvalidKeyFormat = -67742;

const int errSecUnsupportedVectorOfBuffers = -67743;

const int errSecInvalidInputVector = -67744;

const int errSecInvalidOutputVector = -67745;

const int errSecInvalidContext = -67746;

const int errSecInvalidAlgorithm = -67747;

const int errSecInvalidAttributeKey = -67748;

const int errSecMissingAttributeKey = -67749;

const int errSecInvalidAttributeInitVector = -67750;

const int errSecMissingAttributeInitVector = -67751;

const int errSecInvalidAttributeSalt = -67752;

const int errSecMissingAttributeSalt = -67753;

const int errSecInvalidAttributePadding = -67754;

const int errSecMissingAttributePadding = -67755;

const int errSecInvalidAttributeRandom = -67756;

const int errSecMissingAttributeRandom = -67757;

const int errSecInvalidAttributeSeed = -67758;

const int errSecMissingAttributeSeed = -67759;

const int errSecInvalidAttributePassphrase = -67760;

const int errSecMissingAttributePassphrase = -67761;

const int errSecInvalidAttributeKeyLength = -67762;

const int errSecMissingAttributeKeyLength = -67763;

const int errSecInvalidAttributeBlockSize = -67764;

const int errSecMissingAttributeBlockSize = -67765;

const int errSecInvalidAttributeOutputSize = -67766;

const int errSecMissingAttributeOutputSize = -67767;

const int errSecInvalidAttributeRounds = -67768;

const int errSecMissingAttributeRounds = -67769;

const int errSecInvalidAlgorithmParms = -67770;

const int errSecMissingAlgorithmParms = -67771;

const int errSecInvalidAttributeLabel = -67772;

const int errSecMissingAttributeLabel = -67773;

const int errSecInvalidAttributeKeyType = -67774;

const int errSecMissingAttributeKeyType = -67775;

const int errSecInvalidAttributeMode = -67776;

const int errSecMissingAttributeMode = -67777;

const int errSecInvalidAttributeEffectiveBits = -67778;

const int errSecMissingAttributeEffectiveBits = -67779;

const int errSecInvalidAttributeStartDate = -67780;

const int errSecMissingAttributeStartDate = -67781;

const int errSecInvalidAttributeEndDate = -67782;

const int errSecMissingAttributeEndDate = -67783;

const int errSecInvalidAttributeVersion = -67784;

const int errSecMissingAttributeVersion = -67785;

const int errSecInvalidAttributePrime = -67786;

const int errSecMissingAttributePrime = -67787;

const int errSecInvalidAttributeBase = -67788;

const int errSecMissingAttributeBase = -67789;

const int errSecInvalidAttributeSubprime = -67790;

const int errSecMissingAttributeSubprime = -67791;

const int errSecInvalidAttributeIterationCount = -67792;

const int errSecMissingAttributeIterationCount = -67793;

const int errSecInvalidAttributeDLDBHandle = -67794;

const int errSecMissingAttributeDLDBHandle = -67795;

const int errSecInvalidAttributeAccessCredentials = -67796;

const int errSecMissingAttributeAccessCredentials = -67797;

const int errSecInvalidAttributePublicKeyFormat = -67798;

const int errSecMissingAttributePublicKeyFormat = -67799;

const int errSecInvalidAttributePrivateKeyFormat = -67800;

const int errSecMissingAttributePrivateKeyFormat = -67801;

const int errSecInvalidAttributeSymmetricKeyFormat = -67802;

const int errSecMissingAttributeSymmetricKeyFormat = -67803;

const int errSecInvalidAttributeWrappedKeyFormat = -67804;

const int errSecMissingAttributeWrappedKeyFormat = -67805;

const int errSecStagedOperationInProgress = -67806;

const int errSecStagedOperationNotStarted = -67807;

const int errSecVerifyFailed = -67808;

const int errSecQuerySizeUnknown = -67809;

const int errSecBlockSizeMismatch = -67810;

const int errSecPublicKeyInconsistent = -67811;

const int errSecDeviceVerifyFailed = -67812;

const int errSecInvalidLoginName = -67813;

const int errSecAlreadyLoggedIn = -67814;

const int errSecInvalidDigestAlgorithm = -67815;

const int errSecInvalidCRLGroup = -67816;

const int errSecCertificateCannotOperate = -67817;

const int errSecCertificateExpired = -67818;

const int errSecCertificateNotValidYet = -67819;

const int errSecCertificateRevoked = -67820;

const int errSecCertificateSuspended = -67821;

const int errSecInsufficientCredentials = -67822;

const int errSecInvalidAction = -67823;

const int errSecInvalidAuthority = -67824;

const int errSecVerifyActionFailed = -67825;

const int errSecInvalidCertAuthority = -67826;

const int errSecInvalidCRLAuthority = -67827;

const int errSecInvaldCRLAuthority = -67827;

const int errSecInvalidCRLEncoding = -67828;

const int errSecInvalidCRLType = -67829;

const int errSecInvalidCRL = -67830;

const int errSecInvalidFormType = -67831;

const int errSecInvalidID = -67832;

const int errSecInvalidIdentifier = -67833;

const int errSecInvalidIndex = -67834;

const int errSecInvalidPolicyIdentifiers = -67835;

const int errSecInvalidTimeString = -67836;

const int errSecInvalidReason = -67837;

const int errSecInvalidRequestInputs = -67838;

const int errSecInvalidResponseVector = -67839;

const int errSecInvalidStopOnPolicy = -67840;

const int errSecInvalidTuple = -67841;

const int errSecMultipleValuesUnsupported = -67842;

const int errSecNotTrusted = -67843;

const int errSecNoDefaultAuthority = -67844;

const int errSecRejectedForm = -67845;

const int errSecRequestLost = -67846;

const int errSecRequestRejected = -67847;

const int errSecUnsupportedAddressType = -67848;

const int errSecUnsupportedService = -67849;

const int errSecInvalidTupleGroup = -67850;

const int errSecInvalidBaseACLs = -67851;

const int errSecInvalidTupleCredentials = -67852;

const int errSecInvalidTupleCredendtials = -67852;

const int errSecInvalidEncoding = -67853;

const int errSecInvalidValidityPeriod = -67854;

const int errSecInvalidRequestor = -67855;

const int errSecRequestDescriptor = -67856;

const int errSecInvalidBundleInfo = -67857;

const int errSecInvalidCRLIndex = -67858;

const int errSecNoFieldValues = -67859;

const int errSecUnsupportedFieldFormat = -67860;

const int errSecUnsupportedIndexInfo = -67861;

const int errSecUnsupportedLocality = -67862;

const int errSecUnsupportedNumAttributes = -67863;

const int errSecUnsupportedNumIndexes = -67864;

const int errSecUnsupportedNumRecordTypes = -67865;

const int errSecFieldSpecifiedMultiple = -67866;

const int errSecIncompatibleFieldFormat = -67867;

const int errSecInvalidParsingModule = -67868;

const int errSecDatabaseLocked = -67869;

const int errSecDatastoreIsOpen = -67870;

const int errSecMissingValue = -67871;

const int errSecUnsupportedQueryLimits = -67872;

const int errSecUnsupportedNumSelectionPreds = -67873;

const int errSecUnsupportedOperator = -67874;

const int errSecInvalidDBLocation = -67875;

const int errSecInvalidAccessRequest = -67876;

const int errSecInvalidIndexInfo = -67877;

const int errSecInvalidNewOwner = -67878;

const int errSecInvalidModifyMode = -67879;

const int errSecMissingRequiredExtension = -67880;

const int errSecExtendedKeyUsageNotCritical = -67881;

const int errSecTimestampMissing = -67882;

const int errSecTimestampInvalid = -67883;

const int errSecTimestampNotTrusted = -67884;

const int errSecTimestampServiceNotAvailable = -67885;

const int errSecTimestampBadAlg = -67886;

const int errSecTimestampBadRequest = -67887;

const int errSecTimestampBadDataFormat = -67888;

const int errSecTimestampTimeNotAvailable = -67889;

const int errSecTimestampUnacceptedPolicy = -67890;

const int errSecTimestampUnacceptedExtension = -67891;

const int errSecTimestampAddInfoNotAvailable = -67892;

const int errSecTimestampSystemFailure = -67893;

const int errSecSigningTimeMissing = -67894;

const int errSecTimestampRejection = -67895;

const int errSecTimestampWaiting = -67896;

const int errSecTimestampRevocationWarning = -67897;

const int errSecTimestampRevocationNotification = -67898;

const int errSecCertificatePolicyNotAllowed = -67899;

const int errSecCertificateNameNotAllowed = -67900;

const int errSecCertificateValidityPeriodTooLong = -67901;

const int errSecCertificateIsCA = -67902;

const int errSecCertificateDuplicateExtension = -67903;

const int errSSLProtocol = -9800;

const int errSSLNegotiation = -9801;

const int errSSLFatalAlert = -9802;

const int errSSLWouldBlock = -9803;

const int errSSLSessionNotFound = -9804;

const int errSSLClosedGraceful = -9805;

const int errSSLClosedAbort = -9806;

const int errSSLXCertChainInvalid = -9807;

const int errSSLBadCert = -9808;

const int errSSLCrypto = -9809;

const int errSSLInternal = -9810;

const int errSSLModuleAttach = -9811;

const int errSSLUnknownRootCert = -9812;

const int errSSLNoRootCert = -9813;

const int errSSLCertExpired = -9814;

const int errSSLCertNotYetValid = -9815;

const int errSSLClosedNoNotify = -9816;

const int errSSLBufferOverflow = -9817;

const int errSSLBadCipherSuite = -9818;

const int errSSLPeerUnexpectedMsg = -9819;

const int errSSLPeerBadRecordMac = -9820;

const int errSSLPeerDecryptionFail = -9821;

const int errSSLPeerRecordOverflow = -9822;

const int errSSLPeerDecompressFail = -9823;

const int errSSLPeerHandshakeFail = -9824;

const int errSSLPeerBadCert = -9825;

const int errSSLPeerUnsupportedCert = -9826;

const int errSSLPeerCertRevoked = -9827;

const int errSSLPeerCertExpired = -9828;

const int errSSLPeerCertUnknown = -9829;

const int errSSLIllegalParam = -9830;

const int errSSLPeerUnknownCA = -9831;

const int errSSLPeerAccessDenied = -9832;

const int errSSLPeerDecodeError = -9833;

const int errSSLPeerDecryptError = -9834;

const int errSSLPeerExportRestriction = -9835;

const int errSSLPeerProtocolVersion = -9836;

const int errSSLPeerInsufficientSecurity = -9837;

const int errSSLPeerInternalError = -9838;

const int errSSLPeerUserCancelled = -9839;

const int errSSLPeerNoRenegotiation = -9840;

const int errSSLPeerAuthCompleted = -9841;

const int errSSLClientCertRequested = -9842;

const int errSSLHostNameMismatch = -9843;

const int errSSLConnectionRefused = -9844;

const int errSSLDecryptionFail = -9845;

const int errSSLBadRecordMac = -9846;

const int errSSLRecordOverflow = -9847;

const int errSSLBadConfiguration = -9848;

const int errSSLUnexpectedRecord = -9849;

const int errSSLWeakPeerEphemeralDHKey = -9850;

const int errSSLClientHelloReceived = -9851;

const int errSSLTransportReset = -9852;

const int errSSLNetworkTimeout = -9853;

const int errSSLConfigurationFailed = -9854;

const int errSSLUnsupportedExtension = -9855;

const int errSSLUnexpectedMessage = -9856;

const int errSSLDecompressFail = -9857;

const int errSSLHandshakeFail = -9858;

const int errSSLDecodeError = -9859;

const int errSSLInappropriateFallback = -9860;

const int errSSLMissingExtension = -9861;

const int errSSLBadCertificateStatusResponse = -9862;

const int errSSLCertificateRequired = -9863;

const int errSSLUnknownPSKIdentity = -9864;

const int errSSLUnrecognizedName = -9865;

const int errSSLATSViolation = -9880;

const int errSSLATSMinimumVersionViolation = -9881;

const int errSSLATSCiphersuiteViolation = -9882;

const int errSSLATSMinimumKeySizeViolation = -9883;

const int errSSLATSLeafCertificateHashAlgorithmViolation = -9884;

const int errSSLATSCertificateHashAlgorithmViolation = -9885;

const int errSSLATSCertificateTrustViolation = -9886;

const int errSSLEarlyDataRejected = -9890;

const int kCFNotificationDeliverImmediately = 1;

const int kCFNotificationPostToAllSessions = 2;

const int kCFCalendarComponentsWrap = 1;

const int kCFSocketAutomaticallyReenableReadCallBack = 1;

const int kCFSocketAutomaticallyReenableAcceptCallBack = 2;

const int kCFSocketAutomaticallyReenableDataCallBack = 3;

const int kCFSocketAutomaticallyReenableWriteCallBack = 8;

const int kCFSocketLeaveErrors = 64;

const int kCFSocketCloseOnInvalidate = 128;

const int kCFPropertyListReadCorruptError = 3840;

const int kCFPropertyListReadUnknownVersionError = 3841;

const int kCFPropertyListReadStreamError = 3842;

const int kCFPropertyListWriteStreamError = 3851;

const int kCFBundleExecutableArchitectureI386 = 7;

const int kCFBundleExecutableArchitecturePPC = 18;

const int kCFBundleExecutableArchitectureX86_64 = 16777223;

const int kCFBundleExecutableArchitecturePPC64 = 16777234;

const int kCFBundleExecutableArchitectureARM64 = 16777228;

const int kCFMessagePortSuccess = 0;

const int kCFMessagePortSendTimeout = -1;

const int kCFMessagePortReceiveTimeout = -2;

const int kCFMessagePortIsInvalid = -3;

const int kCFMessagePortTransportError = -4;

const int kCFMessagePortBecameInvalidError = -5;

const int kCFStringTokenizerUnitWord = 0;

const int kCFStringTokenizerUnitSentence = 1;

const int kCFStringTokenizerUnitParagraph = 2;

const int kCFStringTokenizerUnitLineBreak = 3;

const int kCFStringTokenizerUnitWordBoundary = 4;

const int kCFStringTokenizerAttributeLatinTranscription = 65536;

const int kCFStringTokenizerAttributeLanguage = 131072;

const int kCFFileDescriptorReadCallBack = 1;

const int kCFFileDescriptorWriteCallBack = 2;

const int kCFUserNotificationStopAlertLevel = 0;

const int kCFUserNotificationNoteAlertLevel = 1;

const int kCFUserNotificationCautionAlertLevel = 2;

const int kCFUserNotificationPlainAlertLevel = 3;

const int kCFUserNotificationDefaultResponse = 0;

const int kCFUserNotificationAlternateResponse = 1;

const int kCFUserNotificationOtherResponse = 2;

const int kCFUserNotificationCancelResponse = 3;

const int kCFUserNotificationNoDefaultButtonFlag = 32;

const int kCFUserNotificationUseRadioButtonsFlag = 64;

const int kCFXMLNodeCurrentVersion = 1;

const int CSSM_INVALID_HANDLE = 0;

const int CSSM_FALSE = 0;

const int CSSM_TRUE = 1;

const int CSSM_OK = 0;

const int CSSM_MODULE_STRING_SIZE = 64;

const int CSSM_KEY_HIERARCHY_NONE = 0;

const int CSSM_KEY_HIERARCHY_INTEG = 1;

const int CSSM_KEY_HIERARCHY_EXPORT = 2;

const int CSSM_PVC_NONE = 0;

const int CSSM_PVC_APP = 1;

const int CSSM_PVC_SP = 2;

const int CSSM_PRIVILEGE_SCOPE_NONE = 0;

const int CSSM_PRIVILEGE_SCOPE_PROCESS = 1;

const int CSSM_PRIVILEGE_SCOPE_THREAD = 2;

const int CSSM_SERVICE_CSSM = 1;

const int CSSM_SERVICE_CSP = 2;

const int CSSM_SERVICE_DL = 4;

const int CSSM_SERVICE_CL = 8;

const int CSSM_SERVICE_TP = 16;

const int CSSM_SERVICE_AC = 32;

const int CSSM_SERVICE_KR = 64;

const int CSSM_NOTIFY_INSERT = 1;

const int CSSM_NOTIFY_REMOVE = 2;

const int CSSM_NOTIFY_FAULT = 3;

const int CSSM_ATTACH_READ_ONLY = 1;

const int CSSM_USEE_LAST = 255;

const int CSSM_USEE_NONE = 0;

const int CSSM_USEE_DOMESTIC = 1;

const int CSSM_USEE_FINANCIAL = 2;

const int CSSM_USEE_KRLE = 3;

const int CSSM_USEE_KRENT = 4;

const int CSSM_USEE_SSL = 5;

const int CSSM_USEE_AUTHENTICATION = 6;

const int CSSM_USEE_KEYEXCH = 7;

const int CSSM_USEE_MEDICAL = 8;

const int CSSM_USEE_INSURANCE = 9;

const int CSSM_USEE_WEAK = 10;

const int CSSM_ADDR_NONE = 0;

const int CSSM_ADDR_CUSTOM = 1;

const int CSSM_ADDR_URL = 2;

const int CSSM_ADDR_SOCKADDR = 3;

const int CSSM_ADDR_NAME = 4;

const int CSSM_NET_PROTO_NONE = 0;

const int CSSM_NET_PROTO_CUSTOM = 1;

const int CSSM_NET_PROTO_UNSPECIFIED = 2;

const int CSSM_NET_PROTO_LDAP = 3;

const int CSSM_NET_PROTO_LDAPS = 4;

const int CSSM_NET_PROTO_LDAPNS = 5;

const int CSSM_NET_PROTO_X500DAP = 6;

const int CSSM_NET_PROTO_FTP = 7;

const int CSSM_NET_PROTO_FTPS = 8;

const int CSSM_NET_PROTO_OCSP = 9;

const int CSSM_NET_PROTO_CMP = 10;

const int CSSM_NET_PROTO_CMPS = 11;

const int CSSM_WORDID__UNK_ = -1;

const int CSSM_WORDID__NLU_ = 0;

const int CSSM_WORDID__STAR_ = 1;

const int CSSM_WORDID_A = 2;

const int CSSM_WORDID_ACL = 3;

const int CSSM_WORDID_ALPHA = 4;

const int CSSM_WORDID_B = 5;

const int CSSM_WORDID_BER = 6;

const int CSSM_WORDID_BINARY = 7;

const int CSSM_WORDID_BIOMETRIC = 8;

const int CSSM_WORDID_C = 9;

const int CSSM_WORDID_CANCELED = 10;

const int CSSM_WORDID_CERT = 11;

const int CSSM_WORDID_COMMENT = 12;

const int CSSM_WORDID_CRL = 13;

const int CSSM_WORDID_CUSTOM = 14;

const int CSSM_WORDID_D = 15;

const int CSSM_WORDID_DATE = 16;

const int CSSM_WORDID_DB_DELETE = 17;

const int CSSM_WORDID_DB_EXEC_STORED_QUERY = 18;

const int CSSM_WORDID_DB_INSERT = 19;

const int CSSM_WORDID_DB_MODIFY = 20;

const int CSSM_WORDID_DB_READ = 21;

const int CSSM_WORDID_DBS_CREATE = 22;

const int CSSM_WORDID_DBS_DELETE = 23;

const int CSSM_WORDID_DECRYPT = 24;

const int CSSM_WORDID_DELETE = 25;

const int CSSM_WORDID_DELTA_CRL = 26;

const int CSSM_WORDID_DER = 27;

const int CSSM_WORDID_DERIVE = 28;

const int CSSM_WORDID_DISPLAY = 29;

const int CSSM_WORDID_DO = 30;

const int CSSM_WORDID_DSA = 31;

const int CSSM_WORDID_DSA_SHA1 = 32;

const int CSSM_WORDID_E = 33;

const int CSSM_WORDID_ELGAMAL = 34;

const int CSSM_WORDID_ENCRYPT = 35;

const int CSSM_WORDID_ENTRY = 36;

const int CSSM_WORDID_EXPORT_CLEAR = 37;

const int CSSM_WORDID_EXPORT_WRAPPED = 38;

const int CSSM_WORDID_G = 39;

const int CSSM_WORDID_GE = 40;

const int CSSM_WORDID_GENKEY = 41;

const int CSSM_WORDID_HASH = 42;

const int CSSM_WORDID_HASHED_PASSWORD = 43;

const int CSSM_WORDID_HASHED_SUBJECT = 44;

const int CSSM_WORDID_HAVAL = 45;

const int CSSM_WORDID_IBCHASH = 46;

const int CSSM_WORDID_IMPORT_CLEAR = 47;

const int CSSM_WORDID_IMPORT_WRAPPED = 48;

const int CSSM_WORDID_INTEL = 49;

const int CSSM_WORDID_ISSUER = 50;

const int CSSM_WORDID_ISSUER_INFO = 51;

const int CSSM_WORDID_K_OF_N = 52;

const int CSSM_WORDID_KEA = 53;

const int CSSM_WORDID_KEYHOLDER = 54;

const int CSSM_WORDID_L = 55;

const int CSSM_WORDID_LE = 56;

const int CSSM_WORDID_LOGIN = 57;

const int CSSM_WORDID_LOGIN_NAME = 58;

const int CSSM_WORDID_MAC = 59;

const int CSSM_WORDID_MD2 = 60;

const int CSSM_WORDID_MD2WITHRSA = 61;

const int CSSM_WORDID_MD4 = 62;

const int CSSM_WORDID_MD5 = 63;

const int CSSM_WORDID_MD5WITHRSA = 64;

const int CSSM_WORDID_N = 65;

const int CSSM_WORDID_NAME = 66;

const int CSSM_WORDID_NDR = 67;

const int CSSM_WORDID_NHASH = 68;

const int CSSM_WORDID_NOT_AFTER = 69;

const int CSSM_WORDID_NOT_BEFORE = 70;

const int CSSM_WORDID_NULL = 71;

const int CSSM_WORDID_NUMERIC = 72;

const int CSSM_WORDID_OBJECT_HASH = 73;

const int CSSM_WORDID_ONE_TIME = 74;

const int CSSM_WORDID_ONLINE = 75;

const int CSSM_WORDID_OWNER = 76;

const int CSSM_WORDID_P = 77;

const int CSSM_WORDID_PAM_NAME = 78;

const int CSSM_WORDID_PASSWORD = 79;

const int CSSM_WORDID_PGP = 80;

const int CSSM_WORDID_PREFIX = 81;

const int CSSM_WORDID_PRIVATE_KEY = 82;

const int CSSM_WORDID_PROMPTED_BIOMETRIC = 83;

const int CSSM_WORDID_PROMPTED_PASSWORD = 84;

const int CSSM_WORDID_PROPAGATE = 85;

const int CSSM_WORDID_PROTECTED_BIOMETRIC = 86;

const int CSSM_WORDID_PROTECTED_PASSWORD = 87;

const int CSSM_WORDID_PROTECTED_PIN = 88;

const int CSSM_WORDID_PUBLIC_KEY = 89;

const int CSSM_WORDID_PUBLIC_KEY_FROM_CERT = 90;

const int CSSM_WORDID_Q = 91;

const int CSSM_WORDID_RANGE = 92;

const int CSSM_WORDID_REVAL = 93;

const int CSSM_WORDID_RIPEMAC = 94;

const int CSSM_WORDID_RIPEMD = 95;

const int CSSM_WORDID_RIPEMD160 = 96;

const int CSSM_WORDID_RSA = 97;

const int CSSM_WORDID_RSA_ISO9796 = 98;

const int CSSM_WORDID_RSA_PKCS = 99;

const int CSSM_WORDID_RSA_PKCS_MD5 = 100;

const int CSSM_WORDID_RSA_PKCS_SHA1 = 101;

const int CSSM_WORDID_RSA_PKCS1 = 102;

const int CSSM_WORDID_RSA_PKCS1_MD5 = 103;

const int CSSM_WORDID_RSA_PKCS1_SHA1 = 104;

const int CSSM_WORDID_RSA_PKCS1_SIG = 105;

const int CSSM_WORDID_RSA_RAW = 106;

const int CSSM_WORDID_SDSIV1 = 107;

const int CSSM_WORDID_SEQUENCE = 108;

const int CSSM_WORDID_SET = 109;

const int CSSM_WORDID_SEXPR = 110;

const int CSSM_WORDID_SHA1 = 111;

const int CSSM_WORDID_SHA1WITHDSA = 112;

const int CSSM_WORDID_SHA1WITHECDSA = 113;

const int CSSM_WORDID_SHA1WITHRSA = 114;

const int CSSM_WORDID_SIGN = 115;

const int CSSM_WORDID_SIGNATURE = 116;

const int CSSM_WORDID_SIGNED_NONCE = 117;

const int CSSM_WORDID_SIGNED_SECRET = 118;

const int CSSM_WORDID_SPKI = 119;

const int CSSM_WORDID_SUBJECT = 120;

const int CSSM_WORDID_SUBJECT_INFO = 121;

const int CSSM_WORDID_TAG = 122;

const int CSSM_WORDID_THRESHOLD = 123;

const int CSSM_WORDID_TIME = 124;

const int CSSM_WORDID_URI = 125;

const int CSSM_WORDID_VERSION = 126;

const int CSSM_WORDID_X509_ATTRIBUTE = 127;

const int CSSM_WORDID_X509V1 = 128;

const int CSSM_WORDID_X509V2 = 129;

const int CSSM_WORDID_X509V3 = 130;

const int CSSM_WORDID_X9_ATTRIBUTE = 131;

const int CSSM_WORDID_VENDOR_START = 65536;

const int CSSM_WORDID_VENDOR_END = 2147418112;

const int CSSM_LIST_ELEMENT_DATUM = 0;

const int CSSM_LIST_ELEMENT_SUBLIST = 1;

const int CSSM_LIST_ELEMENT_WORDID = 2;

const int CSSM_LIST_TYPE_UNKNOWN = 0;

const int CSSM_LIST_TYPE_CUSTOM = 1;

const int CSSM_LIST_TYPE_SEXPR = 2;

const int CSSM_SAMPLE_TYPE_PASSWORD = 79;

const int CSSM_SAMPLE_TYPE_HASHED_PASSWORD = 43;

const int CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_SAMPLE_TYPE_SIGNED_NONCE = 117;

const int CSSM_SAMPLE_TYPE_SIGNED_SECRET = 118;

const int CSSM_SAMPLE_TYPE_BIOMETRIC = 8;

const int CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_SAMPLE_TYPE_THRESHOLD = 123;

const int CSSM_CERT_UNKNOWN = 0;

const int CSSM_CERT_X_509v1 = 1;

const int CSSM_CERT_X_509v2 = 2;

const int CSSM_CERT_X_509v3 = 3;

const int CSSM_CERT_PGP = 4;

const int CSSM_CERT_SPKI = 5;

const int CSSM_CERT_SDSIv1 = 6;

const int CSSM_CERT_Intel = 8;

const int CSSM_CERT_X_509_ATTRIBUTE = 9;

const int CSSM_CERT_X9_ATTRIBUTE = 10;

const int CSSM_CERT_TUPLE = 11;

const int CSSM_CERT_ACL_ENTRY = 12;

const int CSSM_CERT_MULTIPLE = 32766;

const int CSSM_CERT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_TYPE = 32768;

const int CSSM_CERT_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_ENCODING_CUSTOM = 1;

const int CSSM_CERT_ENCODING_BER = 2;

const int CSSM_CERT_ENCODING_DER = 3;

const int CSSM_CERT_ENCODING_NDR = 4;

const int CSSM_CERT_ENCODING_SEXPR = 5;

const int CSSM_CERT_ENCODING_PGP = 6;

const int CSSM_CERT_ENCODING_MULTIPLE = 32766;

const int CSSM_CERT_ENCODING_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_ENCODING = 32768;

const int CSSM_CERT_PARSE_FORMAT_NONE = 0;

const int CSSM_CERT_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CERT_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CERT_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CERT_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CERT_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CERT_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CERT_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_PARSE_FORMAT = 32768;

const int CSSM_CERTGROUP_DATA = 0;

const int CSSM_CERTGROUP_ENCODED_CERT = 1;

const int CSSM_CERTGROUP_PARSED_CERT = 2;

const int CSSM_CERTGROUP_CERT_PAIR = 3;

const int CSSM_ACL_SUBJECT_TYPE_ANY = 1;

const int CSSM_ACL_SUBJECT_TYPE_THRESHOLD = 123;

const int CSSM_ACL_SUBJECT_TYPE_PASSWORD = 79;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY = 89;

const int CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT = 44;

const int CSSM_ACL_SUBJECT_TYPE_BIOMETRIC = 8;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME = 58;

const int CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME = 78;

const int CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START = 65536;

const int CSSM_ACL_AUTHORIZATION_ANY = 1;

const int CSSM_ACL_AUTHORIZATION_LOGIN = 57;

const int CSSM_ACL_AUTHORIZATION_GENKEY = 41;

const int CSSM_ACL_AUTHORIZATION_DELETE = 25;

const int CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED = 38;

const int CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR = 37;

const int CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED = 48;

const int CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR = 47;

const int CSSM_ACL_AUTHORIZATION_SIGN = 115;

const int CSSM_ACL_AUTHORIZATION_ENCRYPT = 35;

const int CSSM_ACL_AUTHORIZATION_DECRYPT = 24;

const int CSSM_ACL_AUTHORIZATION_MAC = 59;

const int CSSM_ACL_AUTHORIZATION_DERIVE = 28;

const int CSSM_ACL_AUTHORIZATION_DBS_CREATE = 22;

const int CSSM_ACL_AUTHORIZATION_DBS_DELETE = 23;

const int CSSM_ACL_AUTHORIZATION_DB_READ = 21;

const int CSSM_ACL_AUTHORIZATION_DB_INSERT = 19;

const int CSSM_ACL_AUTHORIZATION_DB_MODIFY = 20;

const int CSSM_ACL_AUTHORIZATION_DB_DELETE = 17;

const int CSSM_ACL_EDIT_MODE_ADD = 1;

const int CSSM_ACL_EDIT_MODE_DELETE = 2;

const int CSSM_ACL_EDIT_MODE_REPLACE = 3;

const int CSSM_KEYHEADER_VERSION = 2;

const int CSSM_KEYBLOB_RAW = 0;

const int CSSM_KEYBLOB_REFERENCE = 2;

const int CSSM_KEYBLOB_WRAPPED = 3;

const int CSSM_KEYBLOB_OTHER = -1;

const int CSSM_KEYBLOB_RAW_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS1 = 1;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS3 = 2;

const int CSSM_KEYBLOB_RAW_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_RAW_FORMAT_PGP = 4;

const int CSSM_KEYBLOB_RAW_FORMAT_FIPS186 = 5;

const int CSSM_KEYBLOB_RAW_FORMAT_BSAFE = 6;

const int CSSM_KEYBLOB_RAW_FORMAT_CCA = 9;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS8 = 10;

const int CSSM_KEYBLOB_RAW_FORMAT_SPKI = 11;

const int CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING = 12;

const int CSSM_KEYBLOB_RAW_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8 = 1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7 = 2;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_REF_FORMAT_INTEGER = 0;

const int CSSM_KEYBLOB_REF_FORMAT_STRING = 1;

const int CSSM_KEYBLOB_REF_FORMAT_SPKI = 2;

const int CSSM_KEYBLOB_REF_FORMAT_OTHER = -1;

const int CSSM_KEYCLASS_PUBLIC_KEY = 0;

const int CSSM_KEYCLASS_PRIVATE_KEY = 1;

const int CSSM_KEYCLASS_SESSION_KEY = 2;

const int CSSM_KEYCLASS_SECRET_PART = 3;

const int CSSM_KEYCLASS_OTHER = -1;

const int CSSM_KEYATTR_RETURN_DEFAULT = 0;

const int CSSM_KEYATTR_RETURN_DATA = 268435456;

const int CSSM_KEYATTR_RETURN_REF = 536870912;

const int CSSM_KEYATTR_RETURN_NONE = 1073741824;

const int CSSM_KEYATTR_PERMANENT = 1;

const int CSSM_KEYATTR_PRIVATE = 2;

const int CSSM_KEYATTR_MODIFIABLE = 4;

const int CSSM_KEYATTR_SENSITIVE = 8;

const int CSSM_KEYATTR_EXTRACTABLE = 32;

const int CSSM_KEYATTR_ALWAYS_SENSITIVE = 16;

const int CSSM_KEYATTR_NEVER_EXTRACTABLE = 64;

const int CSSM_KEYUSE_ANY = -2147483648;

const int CSSM_KEYUSE_ENCRYPT = 1;

const int CSSM_KEYUSE_DECRYPT = 2;

const int CSSM_KEYUSE_SIGN = 4;

const int CSSM_KEYUSE_VERIFY = 8;

const int CSSM_KEYUSE_SIGN_RECOVER = 16;

const int CSSM_KEYUSE_VERIFY_RECOVER = 32;

const int CSSM_KEYUSE_WRAP = 64;

const int CSSM_KEYUSE_UNWRAP = 128;

const int CSSM_KEYUSE_DERIVE = 256;

const int CSSM_ALGID_NONE = 0;

const int CSSM_ALGID_CUSTOM = 1;

const int CSSM_ALGID_DH = 2;

const int CSSM_ALGID_PH = 3;

const int CSSM_ALGID_KEA = 4;

const int CSSM_ALGID_MD2 = 5;

const int CSSM_ALGID_MD4 = 6;

const int CSSM_ALGID_MD5 = 7;

const int CSSM_ALGID_SHA1 = 8;

const int CSSM_ALGID_NHASH = 9;

const int CSSM_ALGID_HAVAL = 10;

const int CSSM_ALGID_RIPEMD = 11;

const int CSSM_ALGID_IBCHASH = 12;

const int CSSM_ALGID_RIPEMAC = 13;

const int CSSM_ALGID_DES = 14;

const int CSSM_ALGID_DESX = 15;

const int CSSM_ALGID_RDES = 16;

const int CSSM_ALGID_3DES_3KEY_EDE = 17;

const int CSSM_ALGID_3DES_2KEY_EDE = 18;

const int CSSM_ALGID_3DES_1KEY_EEE = 19;

const int CSSM_ALGID_3DES_3KEY = 17;

const int CSSM_ALGID_3DES_3KEY_EEE = 20;

const int CSSM_ALGID_3DES_2KEY = 18;

const int CSSM_ALGID_3DES_2KEY_EEE = 21;

const int CSSM_ALGID_3DES_1KEY = 20;

const int CSSM_ALGID_IDEA = 22;

const int CSSM_ALGID_RC2 = 23;

const int CSSM_ALGID_RC5 = 24;

const int CSSM_ALGID_RC4 = 25;

const int CSSM_ALGID_SEAL = 26;

const int CSSM_ALGID_CAST = 27;

const int CSSM_ALGID_BLOWFISH = 28;

const int CSSM_ALGID_SKIPJACK = 29;

const int CSSM_ALGID_LUCIFER = 30;

const int CSSM_ALGID_MADRYGA = 31;

const int CSSM_ALGID_FEAL = 32;

const int CSSM_ALGID_REDOC = 33;

const int CSSM_ALGID_REDOC3 = 34;

const int CSSM_ALGID_LOKI = 35;

const int CSSM_ALGID_KHUFU = 36;

const int CSSM_ALGID_KHAFRE = 37;

const int CSSM_ALGID_MMB = 38;

const int CSSM_ALGID_GOST = 39;

const int CSSM_ALGID_SAFER = 40;

const int CSSM_ALGID_CRAB = 41;

const int CSSM_ALGID_RSA = 42;

const int CSSM_ALGID_DSA = 43;

const int CSSM_ALGID_MD5WithRSA = 44;

const int CSSM_ALGID_MD2WithRSA = 45;

const int CSSM_ALGID_ElGamal = 46;

const int CSSM_ALGID_MD2Random = 47;

const int CSSM_ALGID_MD5Random = 48;

const int CSSM_ALGID_SHARandom = 49;

const int CSSM_ALGID_DESRandom = 50;

const int CSSM_ALGID_SHA1WithRSA = 51;

const int CSSM_ALGID_CDMF = 52;

const int CSSM_ALGID_CAST3 = 53;

const int CSSM_ALGID_CAST5 = 54;

const int CSSM_ALGID_GenericSecret = 55;

const int CSSM_ALGID_ConcatBaseAndKey = 56;

const int CSSM_ALGID_ConcatKeyAndBase = 57;

const int CSSM_ALGID_ConcatBaseAndData = 58;

const int CSSM_ALGID_ConcatDataAndBase = 59;

const int CSSM_ALGID_XORBaseAndData = 60;

const int CSSM_ALGID_ExtractFromKey = 61;

const int CSSM_ALGID_SSL3PrePrimaryGen = 62;

const int CSSM_ALGID_SSL3PreMasterGen = 62;

const int CSSM_ALGID_SSL3PrimaryDerive = 63;

const int CSSM_ALGID_SSL3MasterDerive = 63;

const int CSSM_ALGID_SSL3KeyAndMacDerive = 64;

const int CSSM_ALGID_SSL3MD5_MAC = 65;

const int CSSM_ALGID_SSL3SHA1_MAC = 66;

const int CSSM_ALGID_PKCS5_PBKDF1_MD5 = 67;

const int CSSM_ALGID_PKCS5_PBKDF1_MD2 = 68;

const int CSSM_ALGID_PKCS5_PBKDF1_SHA1 = 69;

const int CSSM_ALGID_WrapLynks = 70;

const int CSSM_ALGID_WrapSET_OAEP = 71;

const int CSSM_ALGID_BATON = 72;

const int CSSM_ALGID_ECDSA = 73;

const int CSSM_ALGID_MAYFLY = 74;

const int CSSM_ALGID_JUNIPER = 75;

const int CSSM_ALGID_FASTHASH = 76;

const int CSSM_ALGID_3DES = 77;

const int CSSM_ALGID_SSL3MD5 = 78;

const int CSSM_ALGID_SSL3SHA1 = 79;

const int CSSM_ALGID_FortezzaTimestamp = 80;

const int CSSM_ALGID_SHA1WithDSA = 81;

const int CSSM_ALGID_SHA1WithECDSA = 82;

const int CSSM_ALGID_DSA_BSAFE = 83;

const int CSSM_ALGID_ECDH = 84;

const int CSSM_ALGID_ECMQV = 85;

const int CSSM_ALGID_PKCS12_SHA1_PBE = 86;

const int CSSM_ALGID_ECNRA = 87;

const int CSSM_ALGID_SHA1WithECNRA = 88;

const int CSSM_ALGID_ECES = 89;

const int CSSM_ALGID_ECAES = 90;

const int CSSM_ALGID_SHA1HMAC = 91;

const int CSSM_ALGID_FIPS186Random = 92;

const int CSSM_ALGID_ECC = 93;

const int CSSM_ALGID_MQV = 94;

const int CSSM_ALGID_NRA = 95;

const int CSSM_ALGID_IntelPlatformRandom = 96;

const int CSSM_ALGID_UTC = 97;

const int CSSM_ALGID_HAVAL3 = 98;

const int CSSM_ALGID_HAVAL4 = 99;

const int CSSM_ALGID_HAVAL5 = 100;

const int CSSM_ALGID_TIGER = 101;

const int CSSM_ALGID_MD5HMAC = 102;

const int CSSM_ALGID_PKCS5_PBKDF2 = 103;

const int CSSM_ALGID_RUNNING_COUNTER = 104;

const int CSSM_ALGID_LAST = 2147483647;

const int CSSM_ALGID_VENDOR_DEFINED = -2147483648;

const int CSSM_ALGMODE_NONE = 0;

const int CSSM_ALGMODE_CUSTOM = 1;

const int CSSM_ALGMODE_ECB = 2;

const int CSSM_ALGMODE_ECBPad = 3;

const int CSSM_ALGMODE_CBC = 4;

const int CSSM_ALGMODE_CBC_IV8 = 5;

const int CSSM_ALGMODE_CBCPadIV8 = 6;

const int CSSM_ALGMODE_CFB = 7;

const int CSSM_ALGMODE_CFB_IV8 = 8;

const int CSSM_ALGMODE_CFBPadIV8 = 9;

const int CSSM_ALGMODE_OFB = 10;

const int CSSM_ALGMODE_OFB_IV8 = 11;

const int CSSM_ALGMODE_OFBPadIV8 = 12;

const int CSSM_ALGMODE_COUNTER = 13;

const int CSSM_ALGMODE_BC = 14;

const int CSSM_ALGMODE_PCBC = 15;

const int CSSM_ALGMODE_CBCC = 16;

const int CSSM_ALGMODE_OFBNLF = 17;

const int CSSM_ALGMODE_PBC = 18;

const int CSSM_ALGMODE_PFB = 19;

const int CSSM_ALGMODE_CBCPD = 20;

const int CSSM_ALGMODE_PUBLIC_KEY = 21;

const int CSSM_ALGMODE_PRIVATE_KEY = 22;

const int CSSM_ALGMODE_SHUFFLE = 23;

const int CSSM_ALGMODE_ECB64 = 24;

const int CSSM_ALGMODE_CBC64 = 25;

const int CSSM_ALGMODE_OFB64 = 26;

const int CSSM_ALGMODE_CFB32 = 28;

const int CSSM_ALGMODE_CFB16 = 29;

const int CSSM_ALGMODE_CFB8 = 30;

const int CSSM_ALGMODE_WRAP = 31;

const int CSSM_ALGMODE_PRIVATE_WRAP = 32;

const int CSSM_ALGMODE_RELAYX = 33;

const int CSSM_ALGMODE_ECB128 = 34;

const int CSSM_ALGMODE_ECB96 = 35;

const int CSSM_ALGMODE_CBC128 = 36;

const int CSSM_ALGMODE_OAEP_HASH = 37;

const int CSSM_ALGMODE_PKCS1_EME_V15 = 38;

const int CSSM_ALGMODE_PKCS1_EME_OAEP = 39;

const int CSSM_ALGMODE_PKCS1_EMSA_V15 = 40;

const int CSSM_ALGMODE_ISO_9796 = 41;

const int CSSM_ALGMODE_X9_31 = 42;

const int CSSM_ALGMODE_LAST = 2147483647;

const int CSSM_ALGMODE_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_SOFTWARE = 1;

const int CSSM_CSP_HARDWARE = 2;

const int CSSM_CSP_HYBRID = 3;

const int CSSM_ALGCLASS_NONE = 0;

const int CSSM_ALGCLASS_CUSTOM = 1;

const int CSSM_ALGCLASS_SIGNATURE = 2;

const int CSSM_ALGCLASS_SYMMETRIC = 3;

const int CSSM_ALGCLASS_DIGEST = 4;

const int CSSM_ALGCLASS_RANDOMGEN = 5;

const int CSSM_ALGCLASS_UNIQUEGEN = 6;

const int CSSM_ALGCLASS_MAC = 7;

const int CSSM_ALGCLASS_ASYMMETRIC = 8;

const int CSSM_ALGCLASS_KEYGEN = 9;

const int CSSM_ALGCLASS_DERIVEKEY = 10;

const int CSSM_ATTRIBUTE_DATA_NONE = 0;

const int CSSM_ATTRIBUTE_DATA_UINT32 = 268435456;

const int CSSM_ATTRIBUTE_DATA_CSSM_DATA = 536870912;

const int CSSM_ATTRIBUTE_DATA_CRYPTO_DATA = 805306368;

const int CSSM_ATTRIBUTE_DATA_KEY = 1073741824;

const int CSSM_ATTRIBUTE_DATA_STRING = 1342177280;

const int CSSM_ATTRIBUTE_DATA_DATE = 1610612736;

const int CSSM_ATTRIBUTE_DATA_RANGE = 1879048192;

const int CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS = -2147483648;

const int CSSM_ATTRIBUTE_DATA_VERSION = 16777216;

const int CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE = 33554432;

const int CSSM_ATTRIBUTE_DATA_KR_PROFILE = 50331648;

const int CSSM_ATTRIBUTE_TYPE_MASK = -16777216;

const int CSSM_ATTRIBUTE_NONE = 0;

const int CSSM_ATTRIBUTE_CUSTOM = 536870913;

const int CSSM_ATTRIBUTE_DESCRIPTION = 1342177282;

const int CSSM_ATTRIBUTE_KEY = 1073741827;

const int CSSM_ATTRIBUTE_INIT_VECTOR = 536870916;

const int CSSM_ATTRIBUTE_SALT = 536870917;

const int CSSM_ATTRIBUTE_PADDING = 268435462;

const int CSSM_ATTRIBUTE_RANDOM = 536870919;

const int CSSM_ATTRIBUTE_SEED = 805306376;

const int CSSM_ATTRIBUTE_PASSPHRASE = 805306377;

const int CSSM_ATTRIBUTE_KEY_LENGTH = 268435466;

const int CSSM_ATTRIBUTE_KEY_LENGTH_RANGE = 1879048203;

const int CSSM_ATTRIBUTE_BLOCK_SIZE = 268435468;

const int CSSM_ATTRIBUTE_OUTPUT_SIZE = 268435469;

const int CSSM_ATTRIBUTE_ROUNDS = 268435470;

const int CSSM_ATTRIBUTE_IV_SIZE = 268435471;

const int CSSM_ATTRIBUTE_ALG_PARAMS = 536870928;

const int CSSM_ATTRIBUTE_LABEL = 536870929;

const int CSSM_ATTRIBUTE_KEY_TYPE = 268435474;

const int CSSM_ATTRIBUTE_MODE = 268435475;

const int CSSM_ATTRIBUTE_EFFECTIVE_BITS = 268435476;

const int CSSM_ATTRIBUTE_START_DATE = 1610612757;

const int CSSM_ATTRIBUTE_END_DATE = 1610612758;

const int CSSM_ATTRIBUTE_KEYUSAGE = 268435479;

const int CSSM_ATTRIBUTE_KEYATTR = 268435480;

const int CSSM_ATTRIBUTE_VERSION = 16777241;

const int CSSM_ATTRIBUTE_PRIME = 536870938;

const int CSSM_ATTRIBUTE_BASE = 536870939;

const int CSSM_ATTRIBUTE_SUBPRIME = 536870940;

const int CSSM_ATTRIBUTE_ALG_ID = 268435485;

const int CSSM_ATTRIBUTE_ITERATION_COUNT = 268435486;

const int CSSM_ATTRIBUTE_ROUNDS_RANGE = 1879048223;

const int CSSM_ATTRIBUTE_KRPROFILE_LOCAL = 50331680;

const int CSSM_ATTRIBUTE_KRPROFILE_REMOTE = 50331681;

const int CSSM_ATTRIBUTE_CSP_HANDLE = 268435490;

const int CSSM_ATTRIBUTE_DL_DB_HANDLE = 33554467;

const int CSSM_ATTRIBUTE_ACCESS_CREDENTIALS = -2147483612;

const int CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT = 268435493;

const int CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT = 268435494;

const int CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT = 268435495;

const int CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT = 268435496;

const int CSSM_PADDING_NONE = 0;

const int CSSM_PADDING_CUSTOM = 1;

const int CSSM_PADDING_ZERO = 2;

const int CSSM_PADDING_ONE = 3;

const int CSSM_PADDING_ALTERNATE = 4;

const int CSSM_PADDING_FF = 5;

const int CSSM_PADDING_PKCS5 = 6;

const int CSSM_PADDING_PKCS7 = 7;

const int CSSM_PADDING_CIPHERSTEALING = 8;

const int CSSM_PADDING_RANDOM = 9;

const int CSSM_PADDING_PKCS1 = 10;

const int CSSM_PADDING_SIGRAW = 11;

const int CSSM_PADDING_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_TOK_RNG = 1;

const int CSSM_CSP_TOK_CLOCK_EXISTS = 64;

const int CSSM_CSP_RDR_TOKENPRESENT = 1;

const int CSSM_CSP_RDR_EXISTS = 2;

const int CSSM_CSP_RDR_HW = 4;

const int CSSM_CSP_TOK_WRITE_PROTECTED = 2;

const int CSSM_CSP_TOK_LOGIN_REQUIRED = 4;

const int CSSM_CSP_TOK_USER_PIN_INITIALIZED = 8;

const int CSSM_CSP_TOK_PROT_AUTHENTICATION = 256;

const int CSSM_CSP_TOK_USER_PIN_EXPIRED = 1048576;

const int CSSM_CSP_TOK_SESSION_KEY_PASSWORD = 2097152;

const int CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD = 4194304;

const int CSSM_CSP_STORES_PRIVATE_KEYS = 16777216;

const int CSSM_CSP_STORES_PUBLIC_KEYS = 33554432;

const int CSSM_CSP_STORES_SESSION_KEYS = 67108864;

const int CSSM_CSP_STORES_CERTIFICATES = 134217728;

const int CSSM_CSP_STORES_GENERIC = 268435456;

const int CSSM_PKCS_OAEP_MGF_NONE = 0;

const int CSSM_PKCS_OAEP_MGF1_SHA1 = 1;

const int CSSM_PKCS_OAEP_MGF1_MD5 = 2;

const int CSSM_PKCS_OAEP_PSOURCE_NONE = 0;

const int CSSM_PKCS_OAEP_PSOURCE_Pspecified = 1;

const int CSSM_VALUE_NOT_AVAILABLE = -1;

const int CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1 = 0;

const int CSSM_TP_AUTHORITY_REQUEST_CERTISSUE = 1;

const int CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE = 2;

const int CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND = 3;

const int CSSM_TP_AUTHORITY_REQUEST_CERTRESUME = 4;

const int CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY = 5;

const int CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE = 6;

const int CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER = 7;

const int CSSM_TP_AUTHORITY_REQUEST_CRLISSUE = 256;

const int CSSM_TP_KEY_ARCHIVE = 1;

const int CSSM_TP_CERT_PUBLISH = 2;

const int CSSM_TP_CERT_NOTIFY_RENEW = 4;

const int CSSM_TP_CERT_DIR_UPDATE = 8;

const int CSSM_TP_CRL_DISTRIBUTE = 16;

const int CSSM_TP_ACTION_DEFAULT = 0;

const int CSSM_TP_STOP_ON_POLICY = 0;

const int CSSM_TP_STOP_ON_NONE = 1;

const int CSSM_TP_STOP_ON_FIRST_PASS = 2;

const int CSSM_TP_STOP_ON_FIRST_FAIL = 3;

const int CSSM_CRL_PARSE_FORMAT_NONE = 0;

const int CSSM_CRL_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CRL_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CRL_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CRL_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CRL_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CRL_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CRL_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CRL_PARSE_FORMAT = 32768;

const int CSSM_CRL_TYPE_UNKNOWN = 0;

const int CSSM_CRL_TYPE_X_509v1 = 1;

const int CSSM_CRL_TYPE_X_509v2 = 2;

const int CSSM_CRL_TYPE_SPKI = 3;

const int CSSM_CRL_TYPE_MULTIPLE = 32766;

const int CSSM_CRL_ENCODING_UNKNOWN = 0;

const int CSSM_CRL_ENCODING_CUSTOM = 1;

const int CSSM_CRL_ENCODING_BER = 2;

const int CSSM_CRL_ENCODING_DER = 3;

const int CSSM_CRL_ENCODING_BLOOM = 4;

const int CSSM_CRL_ENCODING_SEXPR = 5;

const int CSSM_CRL_ENCODING_MULTIPLE = 32766;

const int CSSM_CRLGROUP_DATA = 0;

const int CSSM_CRLGROUP_ENCODED_CRL = 1;

const int CSSM_CRLGROUP_PARSED_CRL = 2;

const int CSSM_CRLGROUP_CRL_PAIR = 3;

const int CSSM_EVIDENCE_FORM_UNSPECIFIC = 0;

const int CSSM_EVIDENCE_FORM_CERT = 1;

const int CSSM_EVIDENCE_FORM_CRL = 2;

const int CSSM_EVIDENCE_FORM_CERT_ID = 3;

const int CSSM_EVIDENCE_FORM_CRL_ID = 4;

const int CSSM_EVIDENCE_FORM_VERIFIER_TIME = 5;

const int CSSM_EVIDENCE_FORM_CRL_THISTIME = 6;

const int CSSM_EVIDENCE_FORM_CRL_NEXTTIME = 7;

const int CSSM_EVIDENCE_FORM_POLICYINFO = 8;

const int CSSM_EVIDENCE_FORM_TUPLEGROUP = 9;

const int CSSM_TP_CONFIRM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CONFIRM_ACCEPT = 1;

const int CSSM_TP_CONFIRM_REJECT = 2;

const int CSSM_ESTIMATED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_COMPLETE = -2;

const int CSSM_TP_CERTISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTISSUE_OK = 1;

const int CSSM_TP_CERTISSUE_OKWITHCERTMODS = 2;

const int CSSM_TP_CERTISSUE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTISSUE_REJECTED = 4;

const int CSSM_TP_CERTISSUE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTISSUE_WILL_BE_REVOKED = 6;

const int CSSM_TP_CERTCHANGE_NONE = 0;

const int CSSM_TP_CERTCHANGE_REVOKE = 1;

const int CSSM_TP_CERTCHANGE_HOLD = 2;

const int CSSM_TP_CERTCHANGE_RELEASE = 3;

const int CSSM_TP_CERTCHANGE_REASON_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE = 1;

const int CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE = 2;

const int CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION = 3;

const int CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE = 4;

const int CSSM_TP_CERTCHANGE_REASON_SUPERCEDED = 5;

const int CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE = 6;

const int CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE = 7;

const int CSSM_TP_CERTCHANGE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_OK = 1;

const int CSSM_TP_CERTCHANGE_OKWITHNEWTIME = 2;

const int CSSM_TP_CERTCHANGE_WRONGCA = 3;

const int CSSM_TP_CERTCHANGE_REJECTED = 4;

const int CSSM_TP_CERTCHANGE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTVERIFY_UNKNOWN = 0;

const int CSSM_TP_CERTVERIFY_VALID = 1;

const int CSSM_TP_CERTVERIFY_INVALID = 2;

const int CSSM_TP_CERTVERIFY_REVOKED = 3;

const int CSSM_TP_CERTVERIFY_SUSPENDED = 4;

const int CSSM_TP_CERTVERIFY_EXPIRED = 5;

const int CSSM_TP_CERTVERIFY_NOT_VALID_YET = 6;

const int CSSM_TP_CERTVERIFY_INVALID_AUTHORITY = 7;

const int CSSM_TP_CERTVERIFY_INVALID_SIGNATURE = 8;

const int CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE = 9;

const int CSSM_TP_CERTVERIFY_INVALID_CERTGROUP = 10;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY = 11;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS = 12;

const int CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS = 13;

const int CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT = 14;

const int CSSM_TP_CERTVERIFY_INVALID_NAME_TREE = 15;

const int CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT = 16;

const int CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTNOTARIZE_OK = 1;

const int CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS = 2;

const int CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTNOTARIZE_REJECTED = 4;

const int CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTRECLAIM_OK = 1;

const int CSSM_TP_CERTRECLAIM_NOMATCH = 2;

const int CSSM_TP_CERTRECLAIM_REJECTED = 3;

const int CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED = 4;

const int CSSM_TP_CRLISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CRLISSUE_OK = 1;

const int CSSM_TP_CRLISSUE_NOT_CURRENT = 2;

const int CSSM_TP_CRLISSUE_INVALID_DOMAIN = 3;

const int CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER = 4;

const int CSSM_TP_CRLISSUE_REJECTED = 5;

const int CSSM_TP_CRLISSUE_NOT_AUTHORIZED = 6;

const int CSSM_TP_FORM_TYPE_GENERIC = 0;

const int CSSM_TP_FORM_TYPE_REGISTRATION = 1;

const int CSSM_CL_TEMPLATE_INTERMEDIATE_CERT = 1;

const int CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE = 2;

const int CSSM_CERT_BUNDLE_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA = 2;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA = 3;

const int CSSM_CERT_BUNDLE_PKCS12 = 4;

const int CSSM_CERT_BUNDLE_PFX = 5;

const int CSSM_CERT_BUNDLE_SPKI_SEQUENCE = 6;

const int CSSM_CERT_BUNDLE_PGP_KEYRING = 7;

const int CSSM_CERT_BUNDLE_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE = 32768;

const int CSSM_CERT_BUNDLE_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_ENCODING_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_ENCODING_BER = 2;

const int CSSM_CERT_BUNDLE_ENCODING_DER = 3;

const int CSSM_CERT_BUNDLE_ENCODING_SEXPR = 4;

const int CSSM_CERT_BUNDLE_ENCODING_PGP = 5;

const int CSSM_FIELDVALUE_COMPLEX_DATA_TYPE = -1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_STRING = 0;

const int CSSM_DB_ATTRIBUTE_NAME_AS_OID = 1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_STRING = 0;

const int CSSM_DB_ATTRIBUTE_FORMAT_SINT32 = 1;

const int CSSM_DB_ATTRIBUTE_FORMAT_UINT32 = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM = 3;

const int CSSM_DB_ATTRIBUTE_FORMAT_REAL = 4;

const int CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE = 5;

const int CSSM_DB_ATTRIBUTE_FORMAT_BLOB = 6;

const int CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32 = 7;

const int CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX = 8;

const int CSSM_DB_RECORDTYPE_SCHEMA_START = 0;

const int CSSM_DB_RECORDTYPE_SCHEMA_END = 4;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_START = 10;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_END = 18;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_START = -2147483648;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_END = -1;

const int CSSM_DL_DB_SCHEMA_INFO = 0;

const int CSSM_DL_DB_SCHEMA_INDEXES = 1;

const int CSSM_DL_DB_SCHEMA_ATTRIBUTES = 2;

const int CSSM_DL_DB_SCHEMA_PARSING_MODULE = 3;

const int CSSM_DL_DB_RECORD_ANY = 10;

const int CSSM_DL_DB_RECORD_CERT = 11;

const int CSSM_DL_DB_RECORD_CRL = 12;

const int CSSM_DL_DB_RECORD_POLICY = 13;

const int CSSM_DL_DB_RECORD_GENERIC = 14;

const int CSSM_DL_DB_RECORD_PUBLIC_KEY = 15;

const int CSSM_DL_DB_RECORD_PRIVATE_KEY = 16;

const int CSSM_DL_DB_RECORD_SYMMETRIC_KEY = 17;

const int CSSM_DL_DB_RECORD_ALL_KEYS = 18;

const int CSSM_DB_CERT_USE_TRUSTED = 1;

const int CSSM_DB_CERT_USE_SYSTEM = 2;

const int CSSM_DB_CERT_USE_OWNER = 4;

const int CSSM_DB_CERT_USE_REVOKED = 8;

const int CSSM_DB_CERT_USE_SIGNING = 16;

const int CSSM_DB_CERT_USE_PRIVACY = 32;

const int CSSM_DB_INDEX_UNIQUE = 0;

const int CSSM_DB_INDEX_NONUNIQUE = 1;

const int CSSM_DB_INDEX_ON_UNKNOWN = 0;

const int CSSM_DB_INDEX_ON_ATTRIBUTE = 1;

const int CSSM_DB_INDEX_ON_RECORD = 2;

const int CSSM_DB_ACCESS_READ = 1;

const int CSSM_DB_ACCESS_WRITE = 2;

const int CSSM_DB_ACCESS_PRIVILEGED = 4;

const int CSSM_DB_MODIFY_ATTRIBUTE_NONE = 0;

const int CSSM_DB_MODIFY_ATTRIBUTE_ADD = 1;

const int CSSM_DB_MODIFY_ATTRIBUTE_DELETE = 2;

const int CSSM_DB_MODIFY_ATTRIBUTE_REPLACE = 3;

const int CSSM_DB_EQUAL = 0;

const int CSSM_DB_NOT_EQUAL = 1;

const int CSSM_DB_LESS_THAN = 2;

const int CSSM_DB_GREATER_THAN = 3;

const int CSSM_DB_CONTAINS = 4;

const int CSSM_DB_CONTAINS_INITIAL_SUBSTRING = 5;

const int CSSM_DB_CONTAINS_FINAL_SUBSTRING = 6;

const int CSSM_DB_NONE = 0;

const int CSSM_DB_AND = 1;

const int CSSM_DB_OR = 2;

const int CSSM_QUERY_TIMELIMIT_NONE = 0;

const int CSSM_QUERY_SIZELIMIT_NONE = 0;

const int CSSM_QUERY_RETURN_DATA = 1;

const int CSSM_DL_UNKNOWN = 0;

const int CSSM_DL_CUSTOM = 1;

const int CSSM_DL_LDAP = 2;

const int CSSM_DL_ODBC = 3;

const int CSSM_DL_PKCS11 = 4;

const int CSSM_DL_FFS = 5;

const int CSSM_DL_MEMORY = 6;

const int CSSM_DL_REMOTEDIR = 7;

const int CSSM_DB_DATASTORES_UNKNOWN = -1;

const int CSSM_DB_TRANSACTIONAL_MODE = 0;

const int CSSM_DB_FILESYSTEMSCAN_MODE = 1;

const int CSSM_BASE_ERROR = -2147418112;

const int CSSM_ERRORCODE_MODULE_EXTENT = 2048;

const int CSSM_ERRORCODE_CUSTOM_OFFSET = 1024;

const int CSSM_ERRORCODE_COMMON_EXTENT = 256;

const int CSSM_CSSM_BASE_ERROR = -2147418112;

const int CSSM_CSSM_PRIVATE_ERROR = -2147417088;

const int CSSM_CSP_BASE_ERROR = -2147416064;

const int CSSM_CSP_PRIVATE_ERROR = -2147415040;

const int CSSM_DL_BASE_ERROR = -2147414016;

const int CSSM_DL_PRIVATE_ERROR = -2147412992;

const int CSSM_CL_BASE_ERROR = -2147411968;

const int CSSM_CL_PRIVATE_ERROR = -2147410944;

const int CSSM_TP_BASE_ERROR = -2147409920;

const int CSSM_TP_PRIVATE_ERROR = -2147408896;

const int CSSM_KR_BASE_ERROR = -2147407872;

const int CSSM_KR_PRIVATE_ERROR = -2147406848;

const int CSSM_AC_BASE_ERROR = -2147405824;

const int CSSM_AC_PRIVATE_ERROR = -2147404800;

const int CSSM_MDS_BASE_ERROR = -2147414016;

const int CSSM_MDS_PRIVATE_ERROR = -2147412992;

const int CSSMERR_CSSM_INVALID_ADDIN_HANDLE = -2147417855;

const int CSSMERR_CSSM_NOT_INITIALIZED = -2147417854;

const int CSSMERR_CSSM_INVALID_HANDLE_USAGE = -2147417853;

const int CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND = -2147417852;

const int CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL = -2147417851;

const int CSSM_ERRCODE_INTERNAL_ERROR = 1;

const int CSSM_ERRCODE_MEMORY_ERROR = 2;

const int CSSM_ERRCODE_MDS_ERROR = 3;

const int CSSM_ERRCODE_INVALID_POINTER = 4;

const int CSSM_ERRCODE_INVALID_INPUT_POINTER = 5;

const int CSSM_ERRCODE_INVALID_OUTPUT_POINTER = 6;

const int CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED = 7;

const int CSSM_ERRCODE_SELF_CHECK_FAILED = 8;

const int CSSM_ERRCODE_OS_ACCESS_DENIED = 9;

const int CSSM_ERRCODE_FUNCTION_FAILED = 10;

const int CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED = 11;

const int CSSM_ERRCODE_INVALID_GUID = 12;

const int CSSM_ERRCODE_OPERATION_AUTH_DENIED = 32;

const int CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED = 33;

const int CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED = 34;

const int CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED = 35;

const int CSSM_ERRCODE_OBJECT_ACL_REQUIRED = 36;

const int CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS = 37;

const int CSSM_ERRCODE_INVALID_ACL_BASE_CERTS = 38;

const int CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED = 39;

const int CSSM_ERRCODE_INVALID_SAMPLE_VALUE = 40;

const int CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED = 41;

const int CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE = 42;

const int CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED = 43;

const int CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK = 44;

const int CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED = 45;

const int CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG = 46;

const int CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND = 47;

const int CSSM_ERRCODE_INVALID_ACL_EDIT_MODE = 48;

const int CSSM_ERRCODE_ACL_CHANGE_FAILED = 49;

const int CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY = 50;

const int CSSM_ERRCODE_INVALID_NEW_ACL_OWNER = 51;

const int CSSM_ERRCODE_ACL_DELETE_FAILED = 52;

const int CSSM_ERRCODE_ACL_REPLACE_FAILED = 53;

const int CSSM_ERRCODE_ACL_ADD_FAILED = 54;

const int CSSM_ERRCODE_INVALID_CONTEXT_HANDLE = 64;

const int CSSM_ERRCODE_INCOMPATIBLE_VERSION = 65;

const int CSSM_ERRCODE_INVALID_CERTGROUP_POINTER = 66;

const int CSSM_ERRCODE_INVALID_CERT_POINTER = 67;

const int CSSM_ERRCODE_INVALID_CRL_POINTER = 68;

const int CSSM_ERRCODE_INVALID_FIELD_POINTER = 69;

const int CSSM_ERRCODE_INVALID_DATA = 70;

const int CSSM_ERRCODE_CRL_ALREADY_SIGNED = 71;

const int CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS = 72;

const int CSSM_ERRCODE_VERIFICATION_FAILURE = 73;

const int CSSM_ERRCODE_INVALID_DB_HANDLE = 74;

const int CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED = 75;

const int CSSM_ERRCODE_INVALID_DB_LIST = 76;

const int CSSM_ERRCODE_INVALID_DB_LIST_POINTER = 77;

const int CSSM_ERRCODE_UNKNOWN_FORMAT = 78;

const int CSSM_ERRCODE_UNKNOWN_TAG = 79;

const int CSSM_ERRCODE_INVALID_CSP_HANDLE = 80;

const int CSSM_ERRCODE_INVALID_DL_HANDLE = 81;

const int CSSM_ERRCODE_INVALID_CL_HANDLE = 82;

const int CSSM_ERRCODE_INVALID_TP_HANDLE = 83;

const int CSSM_ERRCODE_INVALID_KR_HANDLE = 84;

const int CSSM_ERRCODE_INVALID_AC_HANDLE = 85;

const int CSSM_ERRCODE_INVALID_PASSTHROUGH_ID = 86;

const int CSSM_ERRCODE_INVALID_NETWORK_ADDR = 87;

const int CSSM_ERRCODE_INVALID_CRYPTO_DATA = 88;

const int CSSMERR_CSSM_INTERNAL_ERROR = -2147418111;

const int CSSMERR_CSSM_MEMORY_ERROR = -2147418110;

const int CSSMERR_CSSM_MDS_ERROR = -2147418109;

const int CSSMERR_CSSM_INVALID_POINTER = -2147418108;

const int CSSMERR_CSSM_INVALID_INPUT_POINTER = -2147418107;

const int CSSMERR_CSSM_INVALID_OUTPUT_POINTER = -2147418106;

const int CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED = -2147418105;

const int CSSMERR_CSSM_SELF_CHECK_FAILED = -2147418104;

const int CSSMERR_CSSM_OS_ACCESS_DENIED = -2147418103;

const int CSSMERR_CSSM_FUNCTION_FAILED = -2147418102;

const int CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED = -2147418101;

const int CSSMERR_CSSM_INVALID_GUID = -2147418100;

const int CSSMERR_CSSM_INVALID_CONTEXT_HANDLE = -2147418048;

const int CSSMERR_CSSM_INCOMPATIBLE_VERSION = -2147418047;

const int CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED = -2147418037;

const int CSSM_CSSM_BASE_CSSM_ERROR = -2147417840;

const int CSSMERR_CSSM_SCOPE_NOT_SUPPORTED = -2147417839;

const int CSSMERR_CSSM_PVC_ALREADY_CONFIGURED = -2147417838;

const int CSSMERR_CSSM_INVALID_PVC = -2147417837;

const int CSSMERR_CSSM_EMM_LOAD_FAILED = -2147417836;

const int CSSMERR_CSSM_EMM_UNLOAD_FAILED = -2147417835;

const int CSSMERR_CSSM_ADDIN_LOAD_FAILED = -2147417834;

const int CSSMERR_CSSM_INVALID_KEY_HIERARCHY = -2147417833;

const int CSSMERR_CSSM_ADDIN_UNLOAD_FAILED = -2147417832;

const int CSSMERR_CSSM_LIB_REF_NOT_FOUND = -2147417831;

const int CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE = -2147417830;

const int CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED = -2147417829;

const int CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED = -2147417828;

const int CSSMERR_CSSM_INVALID_SERVICE_MASK = -2147417827;

const int CSSMERR_CSSM_MODULE_NOT_LOADED = -2147417826;

const int CSSMERR_CSSM_INVALID_SUBSERVICEID = -2147417825;

const int CSSMERR_CSSM_BUFFER_TOO_SMALL = -2147417824;

const int CSSMERR_CSSM_INVALID_ATTRIBUTE = -2147417823;

const int CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT = -2147417822;

const int CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL = -2147417821;

const int CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND = -2147417820;

const int CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND = -2147417819;

const int CSSMERR_CSP_INTERNAL_ERROR = -2147416063;

const int CSSMERR_CSP_MEMORY_ERROR = -2147416062;

const int CSSMERR_CSP_MDS_ERROR = -2147416061;

const int CSSMERR_CSP_INVALID_POINTER = -2147416060;

const int CSSMERR_CSP_INVALID_INPUT_POINTER = -2147416059;

const int CSSMERR_CSP_INVALID_OUTPUT_POINTER = -2147416058;

const int CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED = -2147416057;

const int CSSMERR_CSP_SELF_CHECK_FAILED = -2147416056;

const int CSSMERR_CSP_OS_ACCESS_DENIED = -2147416055;

const int CSSMERR_CSP_FUNCTION_FAILED = -2147416054;

const int CSSMERR_CSP_OPERATION_AUTH_DENIED = -2147416032;

const int CSSMERR_CSP_OBJECT_USE_AUTH_DENIED = -2147416031;

const int CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED = -2147416030;

const int CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED = -2147416029;

const int CSSMERR_CSP_OBJECT_ACL_REQUIRED = -2147416028;

const int CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS = -2147416027;

const int CSSMERR_CSP_INVALID_ACL_BASE_CERTS = -2147416026;

const int CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED = -2147416025;

const int CSSMERR_CSP_INVALID_SAMPLE_VALUE = -2147416024;

const int CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED = -2147416023;

const int CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE = -2147416022;

const int CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147416021;

const int CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK = -2147416020;

const int CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED = -2147416019;

const int CSSMERR_CSP_INVALID_ACL_ENTRY_TAG = -2147416018;

const int CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND = -2147416017;

const int CSSMERR_CSP_INVALID_ACL_EDIT_MODE = -2147416016;

const int CSSMERR_CSP_ACL_CHANGE_FAILED = -2147416015;

const int CSSMERR_CSP_INVALID_NEW_ACL_ENTRY = -2147416014;

const int CSSMERR_CSP_INVALID_NEW_ACL_OWNER = -2147416013;

const int CSSMERR_CSP_ACL_DELETE_FAILED = -2147416012;

const int CSSMERR_CSP_ACL_REPLACE_FAILED = -2147416011;

const int CSSMERR_CSP_ACL_ADD_FAILED = -2147416010;

const int CSSMERR_CSP_INVALID_CONTEXT_HANDLE = -2147416000;

const int CSSMERR_CSP_PRIVILEGE_NOT_GRANTED = -2147415989;

const int CSSMERR_CSP_INVALID_DATA = -2147415994;

const int CSSMERR_CSP_INVALID_PASSTHROUGH_ID = -2147415978;

const int CSSMERR_CSP_INVALID_CRYPTO_DATA = -2147415976;

const int CSSM_CSP_BASE_CSP_ERROR = -2147415808;

const int CSSMERR_CSP_INPUT_LENGTH_ERROR = -2147415807;

const int CSSMERR_CSP_OUTPUT_LENGTH_ERROR = -2147415806;

const int CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED = -2147415805;

const int CSSMERR_CSP_DEVICE_ERROR = -2147415804;

const int CSSMERR_CSP_DEVICE_MEMORY_ERROR = -2147415803;

const int CSSMERR_CSP_ATTACH_HANDLE_BUSY = -2147415802;

const int CSSMERR_CSP_NOT_LOGGED_IN = -2147415801;

const int CSSMERR_CSP_INVALID_KEY = -2147415792;

const int CSSMERR_CSP_INVALID_KEY_REFERENCE = -2147415791;

const int CSSMERR_CSP_INVALID_KEY_CLASS = -2147415790;

const int CSSMERR_CSP_ALGID_MISMATCH = -2147415789;

const int CSSMERR_CSP_KEY_USAGE_INCORRECT = -2147415788;

const int CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT = -2147415787;

const int CSSMERR_CSP_KEY_HEADER_INCONSISTENT = -2147415786;

const int CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT = -2147415785;

const int CSSMERR_CSP_UNSUPPORTED_KEY_SIZE = -2147415784;

const int CSSMERR_CSP_INVALID_KEY_POINTER = -2147415783;

const int CSSMERR_CSP_INVALID_KEYUSAGE_MASK = -2147415782;

const int CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK = -2147415781;

const int CSSMERR_CSP_INVALID_KEYATTR_MASK = -2147415780;

const int CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK = -2147415779;

const int CSSMERR_CSP_INVALID_KEY_LABEL = -2147415778;

const int CSSMERR_CSP_UNSUPPORTED_KEY_LABEL = -2147415777;

const int CSSMERR_CSP_INVALID_KEY_FORMAT = -2147415776;

const int CSSMERR_CSP_INVALID_DATA_COUNT = -2147415768;

const int CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED = -2147415767;

const int CSSMERR_CSP_INVALID_INPUT_VECTOR = -2147415766;

const int CSSMERR_CSP_INVALID_OUTPUT_VECTOR = -2147415765;

const int CSSMERR_CSP_INVALID_CONTEXT = -2147415760;

const int CSSMERR_CSP_INVALID_ALGORITHM = -2147415759;

const int CSSMERR_CSP_INVALID_ATTR_KEY = -2147415754;

const int CSSMERR_CSP_MISSING_ATTR_KEY = -2147415753;

const int CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR = -2147415752;

const int CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR = -2147415751;

const int CSSMERR_CSP_INVALID_ATTR_SALT = -2147415750;

const int CSSMERR_CSP_MISSING_ATTR_SALT = -2147415749;

const int CSSMERR_CSP_INVALID_ATTR_PADDING = -2147415748;

const int CSSMERR_CSP_MISSING_ATTR_PADDING = -2147415747;

const int CSSMERR_CSP_INVALID_ATTR_RANDOM = -2147415746;

const int CSSMERR_CSP_MISSING_ATTR_RANDOM = -2147415745;

const int CSSMERR_CSP_INVALID_ATTR_SEED = -2147415744;

const int CSSMERR_CSP_MISSING_ATTR_SEED = -2147415743;

const int CSSMERR_CSP_INVALID_ATTR_PASSPHRASE = -2147415742;

const int CSSMERR_CSP_MISSING_ATTR_PASSPHRASE = -2147415741;

const int CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH = -2147415740;

const int CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH = -2147415739;

const int CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE = -2147415738;

const int CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE = -2147415737;

const int CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE = -2147415708;

const int CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE = -2147415707;

const int CSSMERR_CSP_INVALID_ATTR_ROUNDS = -2147415706;

const int CSSMERR_CSP_MISSING_ATTR_ROUNDS = -2147415705;

const int CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS = -2147415704;

const int CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS = -2147415703;

const int CSSMERR_CSP_INVALID_ATTR_LABEL = -2147415702;

const int CSSMERR_CSP_MISSING_ATTR_LABEL = -2147415701;

const int CSSMERR_CSP_INVALID_ATTR_KEY_TYPE = -2147415700;

const int CSSMERR_CSP_MISSING_ATTR_KEY_TYPE = -2147415699;

const int CSSMERR_CSP_INVALID_ATTR_MODE = -2147415698;

const int CSSMERR_CSP_MISSING_ATTR_MODE = -2147415697;

const int CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS = -2147415696;

const int CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS = -2147415695;

const int CSSMERR_CSP_INVALID_ATTR_START_DATE = -2147415694;

const int CSSMERR_CSP_MISSING_ATTR_START_DATE = -2147415693;

const int CSSMERR_CSP_INVALID_ATTR_END_DATE = -2147415692;

const int CSSMERR_CSP_MISSING_ATTR_END_DATE = -2147415691;

const int CSSMERR_CSP_INVALID_ATTR_VERSION = -2147415690;

const int CSSMERR_CSP_MISSING_ATTR_VERSION = -2147415689;

const int CSSMERR_CSP_INVALID_ATTR_PRIME = -2147415688;

const int CSSMERR_CSP_MISSING_ATTR_PRIME = -2147415687;

const int CSSMERR_CSP_INVALID_ATTR_BASE = -2147415686;

const int CSSMERR_CSP_MISSING_ATTR_BASE = -2147415685;

const int CSSMERR_CSP_INVALID_ATTR_SUBPRIME = -2147415684;

const int CSSMERR_CSP_MISSING_ATTR_SUBPRIME = -2147415683;

const int CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT = -2147415682;

const int CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT = -2147415681;

const int CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE = -2147415680;

const int CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE = -2147415679;

const int CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS = -2147415678;

const int CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS = -2147415677;

const int CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT = -2147415676;

const int CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT = -2147415675;

const int CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT = -2147415674;

const int CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT = -2147415673;

const int CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT = -2147415672;

const int CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT = -2147415671;

const int CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT = -2147415670;

const int CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT = -2147415669;

const int CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS = -2147415736;

const int CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED = -2147415735;

const int CSSMERR_CSP_VERIFY_FAILED = -2147415734;

const int CSSMERR_CSP_INVALID_SIGNATURE = -2147415733;

const int CSSMERR_CSP_QUERY_SIZE_UNKNOWN = -2147415732;

const int CSSMERR_CSP_BLOCK_SIZE_MISMATCH = -2147415731;

const int CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND = -2147415730;

const int CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT = -2147415729;

const int CSSMERR_CSP_DEVICE_VERIFY_FAILED = -2147415728;

const int CSSMERR_CSP_INVALID_LOGIN_NAME = -2147415727;

const int CSSMERR_CSP_ALREADY_LOGGED_IN = -2147415726;

const int CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS = -2147415725;

const int CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS = -2147415724;

const int CSSMERR_CSP_INVALID_DIGEST_ALGORITHM = -2147415723;

const int CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED = -2147415722;

const int CSSMERR_TP_INTERNAL_ERROR = -2147409919;

const int CSSMERR_TP_MEMORY_ERROR = -2147409918;

const int CSSMERR_TP_MDS_ERROR = -2147409917;

const int CSSMERR_TP_INVALID_POINTER = -2147409916;

const int CSSMERR_TP_INVALID_INPUT_POINTER = -2147409915;

const int CSSMERR_TP_INVALID_OUTPUT_POINTER = -2147409914;

const int CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED = -2147409913;

const int CSSMERR_TP_SELF_CHECK_FAILED = -2147409912;

const int CSSMERR_TP_OS_ACCESS_DENIED = -2147409911;

const int CSSMERR_TP_FUNCTION_FAILED = -2147409910;

const int CSSMERR_TP_INVALID_CONTEXT_HANDLE = -2147409856;

const int CSSMERR_TP_INVALID_DATA = -2147409850;

const int CSSMERR_TP_INVALID_DB_LIST = -2147409844;

const int CSSMERR_TP_INVALID_CERTGROUP_POINTER = -2147409854;

const int CSSMERR_TP_INVALID_CERT_POINTER = -2147409853;

const int CSSMERR_TP_INVALID_CRL_POINTER = -2147409852;

const int CSSMERR_TP_INVALID_FIELD_POINTER = -2147409851;

const int CSSMERR_TP_INVALID_NETWORK_ADDR = -2147409833;

const int CSSMERR_TP_CRL_ALREADY_SIGNED = -2147409849;

const int CSSMERR_TP_INVALID_NUMBER_OF_FIELDS = -2147409848;

const int CSSMERR_TP_VERIFICATION_FAILURE = -2147409847;

const int CSSMERR_TP_INVALID_DB_HANDLE = -2147409846;

const int CSSMERR_TP_UNKNOWN_FORMAT = -2147409842;

const int CSSMERR_TP_UNKNOWN_TAG = -2147409841;

const int CSSMERR_TP_INVALID_PASSTHROUGH_ID = -2147409834;

const int CSSMERR_TP_INVALID_CSP_HANDLE = -2147409840;

const int CSSMERR_TP_INVALID_DL_HANDLE = -2147409839;

const int CSSMERR_TP_INVALID_CL_HANDLE = -2147409838;

const int CSSMERR_TP_INVALID_DB_LIST_POINTER = -2147409843;

const int CSSM_TP_BASE_TP_ERROR = -2147409664;

const int CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER = -2147409663;

const int CSSMERR_TP_INVALID_IDENTIFIER_POINTER = -2147409662;

const int CSSMERR_TP_INVALID_KEYCACHE_HANDLE = -2147409661;

const int CSSMERR_TP_INVALID_CERTGROUP = -2147409660;

const int CSSMERR_TP_INVALID_CRLGROUP = -2147409659;

const int CSSMERR_TP_INVALID_CRLGROUP_POINTER = -2147409658;

const int CSSMERR_TP_AUTHENTICATION_FAILED = -2147409657;

const int CSSMERR_TP_CERTGROUP_INCOMPLETE = -2147409656;

const int CSSMERR_TP_CERTIFICATE_CANT_OPERATE = -2147409655;

const int CSSMERR_TP_CERT_EXPIRED = -2147409654;

const int CSSMERR_TP_CERT_NOT_VALID_YET = -2147409653;

const int CSSMERR_TP_CERT_REVOKED = -2147409652;

const int CSSMERR_TP_CERT_SUSPENDED = -2147409651;

const int CSSMERR_TP_INSUFFICIENT_CREDENTIALS = -2147409650;

const int CSSMERR_TP_INVALID_ACTION = -2147409649;

const int CSSMERR_TP_INVALID_ACTION_DATA = -2147409648;

const int CSSMERR_TP_INVALID_ANCHOR_CERT = -2147409646;

const int CSSMERR_TP_INVALID_AUTHORITY = -2147409645;

const int CSSMERR_TP_VERIFY_ACTION_FAILED = -2147409644;

const int CSSMERR_TP_INVALID_CERTIFICATE = -2147409643;

const int CSSMERR_TP_INVALID_CERT_AUTHORITY = -2147409642;

const int CSSMERR_TP_INVALID_CRL_AUTHORITY = -2147409641;

const int CSSMERR_TP_INVALID_CRL_ENCODING = -2147409640;

const int CSSMERR_TP_INVALID_CRL_TYPE = -2147409639;

const int CSSMERR_TP_INVALID_CRL = -2147409638;

const int CSSMERR_TP_INVALID_FORM_TYPE = -2147409637;

const int CSSMERR_TP_INVALID_ID = -2147409636;

const int CSSMERR_TP_INVALID_IDENTIFIER = -2147409635;

const int CSSMERR_TP_INVALID_INDEX = -2147409634;

const int CSSMERR_TP_INVALID_NAME = -2147409633;

const int CSSMERR_TP_INVALID_POLICY_IDENTIFIERS = -2147409632;

const int CSSMERR_TP_INVALID_TIMESTRING = -2147409631;

const int CSSMERR_TP_INVALID_REASON = -2147409630;

const int CSSMERR_TP_INVALID_REQUEST_INPUTS = -2147409629;

const int CSSMERR_TP_INVALID_RESPONSE_VECTOR = -2147409628;

const int CSSMERR_TP_INVALID_SIGNATURE = -2147409627;

const int CSSMERR_TP_INVALID_STOP_ON_POLICY = -2147409626;

const int CSSMERR_TP_INVALID_CALLBACK = -2147409625;

const int CSSMERR_TP_INVALID_TUPLE = -2147409624;

const int CSSMERR_TP_NOT_SIGNER = -2147409623;

const int CSSMERR_TP_NOT_TRUSTED = -2147409622;

const int CSSMERR_TP_NO_DEFAULT_AUTHORITY = -2147409621;

const int CSSMERR_TP_REJECTED_FORM = -2147409620;

const int CSSMERR_TP_REQUEST_LOST = -2147409619;

const int CSSMERR_TP_REQUEST_REJECTED = -2147409618;

const int CSSMERR_TP_UNSUPPORTED_ADDR_TYPE = -2147409617;

const int CSSMERR_TP_UNSUPPORTED_SERVICE = -2147409616;

const int CSSMERR_TP_INVALID_TUPLEGROUP_POINTER = -2147409615;

const int CSSMERR_TP_INVALID_TUPLEGROUP = -2147409614;

const int CSSMERR_AC_INTERNAL_ERROR = -2147405823;

const int CSSMERR_AC_MEMORY_ERROR = -2147405822;

const int CSSMERR_AC_MDS_ERROR = -2147405821;

const int CSSMERR_AC_INVALID_POINTER = -2147405820;

const int CSSMERR_AC_INVALID_INPUT_POINTER = -2147405819;

const int CSSMERR_AC_INVALID_OUTPUT_POINTER = -2147405818;

const int CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED = -2147405817;

const int CSSMERR_AC_SELF_CHECK_FAILED = -2147405816;

const int CSSMERR_AC_OS_ACCESS_DENIED = -2147405815;

const int CSSMERR_AC_FUNCTION_FAILED = -2147405814;

const int CSSMERR_AC_INVALID_CONTEXT_HANDLE = -2147405760;

const int CSSMERR_AC_INVALID_DATA = -2147405754;

const int CSSMERR_AC_INVALID_DB_LIST = -2147405748;

const int CSSMERR_AC_INVALID_PASSTHROUGH_ID = -2147405738;

const int CSSMERR_AC_INVALID_DL_HANDLE = -2147405743;

const int CSSMERR_AC_INVALID_CL_HANDLE = -2147405742;

const int CSSMERR_AC_INVALID_TP_HANDLE = -2147405741;

const int CSSMERR_AC_INVALID_DB_HANDLE = -2147405750;

const int CSSMERR_AC_INVALID_DB_LIST_POINTER = -2147405747;

const int CSSM_AC_BASE_AC_ERROR = -2147405568;

const int CSSMERR_AC_INVALID_BASE_ACLS = -2147405567;

const int CSSMERR_AC_INVALID_TUPLE_CREDENTIALS = -2147405566;

const int CSSMERR_AC_INVALID_ENCODING = -2147405565;

const int CSSMERR_AC_INVALID_VALIDITY_PERIOD = -2147405564;

const int CSSMERR_AC_INVALID_REQUESTOR = -2147405563;

const int CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR = -2147405562;

const int CSSMERR_CL_INTERNAL_ERROR = -2147411967;

const int CSSMERR_CL_MEMORY_ERROR = -2147411966;

const int CSSMERR_CL_MDS_ERROR = -2147411965;

const int CSSMERR_CL_INVALID_POINTER = -2147411964;

const int CSSMERR_CL_INVALID_INPUT_POINTER = -2147411963;

const int CSSMERR_CL_INVALID_OUTPUT_POINTER = -2147411962;

const int CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED = -2147411961;

const int CSSMERR_CL_SELF_CHECK_FAILED = -2147411960;

const int CSSMERR_CL_OS_ACCESS_DENIED = -2147411959;

const int CSSMERR_CL_FUNCTION_FAILED = -2147411958;

const int CSSMERR_CL_INVALID_CONTEXT_HANDLE = -2147411904;

const int CSSMERR_CL_INVALID_CERTGROUP_POINTER = -2147411902;

const int CSSMERR_CL_INVALID_CERT_POINTER = -2147411901;

const int CSSMERR_CL_INVALID_CRL_POINTER = -2147411900;

const int CSSMERR_CL_INVALID_FIELD_POINTER = -2147411899;

const int CSSMERR_CL_INVALID_DATA = -2147411898;

const int CSSMERR_CL_CRL_ALREADY_SIGNED = -2147411897;

const int CSSMERR_CL_INVALID_NUMBER_OF_FIELDS = -2147411896;

const int CSSMERR_CL_VERIFICATION_FAILURE = -2147411895;

const int CSSMERR_CL_UNKNOWN_FORMAT = -2147411890;

const int CSSMERR_CL_UNKNOWN_TAG = -2147411889;

const int CSSMERR_CL_INVALID_PASSTHROUGH_ID = -2147411882;

const int CSSM_CL_BASE_CL_ERROR = -2147411712;

const int CSSMERR_CL_INVALID_BUNDLE_POINTER = -2147411711;

const int CSSMERR_CL_INVALID_CACHE_HANDLE = -2147411710;

const int CSSMERR_CL_INVALID_RESULTS_HANDLE = -2147411709;

const int CSSMERR_CL_INVALID_BUNDLE_INFO = -2147411708;

const int CSSMERR_CL_INVALID_CRL_INDEX = -2147411707;

const int CSSMERR_CL_INVALID_SCOPE = -2147411706;

const int CSSMERR_CL_NO_FIELD_VALUES = -2147411705;

const int CSSMERR_CL_SCOPE_NOT_SUPPORTED = -2147411704;

const int CSSMERR_DL_INTERNAL_ERROR = -2147414015;

const int CSSMERR_DL_MEMORY_ERROR = -2147414014;

const int CSSMERR_DL_MDS_ERROR = -2147414013;

const int CSSMERR_DL_INVALID_POINTER = -2147414012;

const int CSSMERR_DL_INVALID_INPUT_POINTER = -2147414011;

const int CSSMERR_DL_INVALID_OUTPUT_POINTER = -2147414010;

const int CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED = -2147414009;

const int CSSMERR_DL_SELF_CHECK_FAILED = -2147414008;

const int CSSMERR_DL_OS_ACCESS_DENIED = -2147414007;

const int CSSMERR_DL_FUNCTION_FAILED = -2147414006;

const int CSSMERR_DL_INVALID_CSP_HANDLE = -2147413936;

const int CSSMERR_DL_INVALID_DL_HANDLE = -2147413935;

const int CSSMERR_DL_INVALID_CL_HANDLE = -2147413934;

const int CSSMERR_DL_INVALID_DB_LIST_POINTER = -2147413939;

const int CSSMERR_DL_OPERATION_AUTH_DENIED = -2147413984;

const int CSSMERR_DL_OBJECT_USE_AUTH_DENIED = -2147413983;

const int CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED = -2147413982;

const int CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED = -2147413981;

const int CSSMERR_DL_OBJECT_ACL_REQUIRED = -2147413980;

const int CSSMERR_DL_INVALID_ACCESS_CREDENTIALS = -2147413979;

const int CSSMERR_DL_INVALID_ACL_BASE_CERTS = -2147413978;

const int CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED = -2147413977;

const int CSSMERR_DL_INVALID_SAMPLE_VALUE = -2147413976;

const int CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED = -2147413975;

const int CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE = -2147413974;

const int CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147413973;

const int CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK = -2147413972;

const int CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED = -2147413971;

const int CSSMERR_DL_INVALID_ACL_ENTRY_TAG = -2147413970;

const int CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND = -2147413969;

const int CSSMERR_DL_INVALID_ACL_EDIT_MODE = -2147413968;

const int CSSMERR_DL_ACL_CHANGE_FAILED = -2147413967;

const int CSSMERR_DL_INVALID_NEW_ACL_ENTRY = -2147413966;

const int CSSMERR_DL_INVALID_NEW_ACL_OWNER = -2147413965;

const int CSSMERR_DL_ACL_DELETE_FAILED = -2147413964;

const int CSSMERR_DL_ACL_REPLACE_FAILED = -2147413963;

const int CSSMERR_DL_ACL_ADD_FAILED = -2147413962;

const int CSSMERR_DL_INVALID_DB_HANDLE = -2147413942;

const int CSSMERR_DL_INVALID_PASSTHROUGH_ID = -2147413930;

const int CSSMERR_DL_INVALID_NETWORK_ADDR = -2147413929;

const int CSSM_DL_BASE_DL_ERROR = -2147413760;

const int CSSMERR_DL_DATABASE_CORRUPT = -2147413759;

const int CSSMERR_DL_INVALID_RECORD_INDEX = -2147413752;

const int CSSMERR_DL_INVALID_RECORDTYPE = -2147413751;

const int CSSMERR_DL_INVALID_FIELD_NAME = -2147413750;

const int CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT = -2147413749;

const int CSSMERR_DL_UNSUPPORTED_INDEX_INFO = -2147413748;

const int CSSMERR_DL_UNSUPPORTED_LOCALITY = -2147413747;

const int CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES = -2147413746;

const int CSSMERR_DL_UNSUPPORTED_NUM_INDEXES = -2147413745;

const int CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES = -2147413744;

const int CSSMERR_DL_UNSUPPORTED_RECORDTYPE = -2147413743;

const int CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE = -2147413742;

const int CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT = -2147413741;

const int CSSMERR_DL_INVALID_PARSING_MODULE = -2147413740;

const int CSSMERR_DL_INVALID_DB_NAME = -2147413738;

const int CSSMERR_DL_DATASTORE_DOESNOT_EXIST = -2147413737;

const int CSSMERR_DL_DATASTORE_ALREADY_EXISTS = -2147413736;

const int CSSMERR_DL_DB_LOCKED = -2147413735;

const int CSSMERR_DL_DATASTORE_IS_OPEN = -2147413734;

const int CSSMERR_DL_RECORD_NOT_FOUND = -2147413733;

const int CSSMERR_DL_MISSING_VALUE = -2147413732;

const int CSSMERR_DL_UNSUPPORTED_QUERY = -2147413731;

const int CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS = -2147413730;

const int CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS = -2147413729;

const int CSSMERR_DL_UNSUPPORTED_OPERATOR = -2147413727;

const int CSSMERR_DL_INVALID_RESULTS_HANDLE = -2147413726;

const int CSSMERR_DL_INVALID_DB_LOCATION = -2147413725;

const int CSSMERR_DL_INVALID_ACCESS_REQUEST = -2147413724;

const int CSSMERR_DL_INVALID_INDEX_INFO = -2147413723;

const int CSSMERR_DL_INVALID_SELECTION_TAG = -2147413722;

const int CSSMERR_DL_INVALID_NEW_OWNER = -2147413721;

const int CSSMERR_DL_INVALID_RECORD_UID = -2147413720;

const int CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA = -2147413719;

const int CSSMERR_DL_INVALID_MODIFY_MODE = -2147413718;

const int CSSMERR_DL_INVALID_OPEN_PARAMETERS = -2147413717;

const int CSSMERR_DL_RECORD_MODIFIED = -2147413716;

const int CSSMERR_DL_ENDOFDATA = -2147413715;

const int CSSMERR_DL_INVALID_QUERY = -2147413714;

const int CSSMERR_DL_INVALID_VALUE = -2147413713;

const int CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED = -2147413712;

const int CSSMERR_DL_STALE_UNIQUE_RECORD = -2147413711;

const int CSSM_WORDID_KEYCHAIN_PROMPT = 65536;

const int CSSM_WORDID_KEYCHAIN_LOCK = 65537;

const int CSSM_WORDID_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_WORDID_PROCESS = 65539;

const int CSSM_WORDID__RESERVED_1 = 65540;

const int CSSM_WORDID_SYMMETRIC_KEY = 65541;

const int CSSM_WORDID_SYSTEM = 65542;

const int CSSM_WORDID_KEY = 65543;

const int CSSM_WORDID_PIN = 65544;

const int CSSM_WORDID_PREAUTH = 65545;

const int CSSM_WORDID_PREAUTH_SOURCE = 65546;

const int CSSM_WORDID_ASYMMETRIC_KEY = 65547;

const int CSSM_WORDID_PARTITION = 65548;

const int CSSM_WORDID_KEYBAG_KEY = 65549;

const int CSSM_WORDID__FIRST_UNUSED = 65550;

const int CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_ACL_SUBJECT_TYPE_PROCESS = 65539;

const int CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE = 116;

const int CSSM_ACL_SUBJECT_TYPE_COMMENT = 12;

const int CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH = 65545;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE = 65546;

const int CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_ACL_SUBJECT_TYPE_PARTITION = 65548;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK = 65537;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_SAMPLE_TYPE_PROCESS = 65539;

const int CSSM_SAMPLE_TYPE_COMMENT = 12;

const int CSSM_SAMPLE_TYPE_RETRY_ID = 85;

const int CSSM_SAMPLE_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_SAMPLE_TYPE_PREAUTH = 65545;

const int CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_SAMPLE_TYPE_KEYBAG_KEY = 65549;

const int CSSM_ACL_AUTHORIZATION_CHANGE_ACL = 65536;

const int CSSM_ACL_AUTHORIZATION_CHANGE_OWNER = 65537;

const int CSSM_ACL_AUTHORIZATION_PARTITION_ID = 65538;

const int CSSM_ACL_AUTHORIZATION_INTEGRITY = 65539;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_BASE = 16842752;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_END = 16908288;

const int CSSM_ACL_CODE_SIGNATURE_INVALID = 0;

const int CSSM_ACL_CODE_SIGNATURE_OSX = 1;

const int CSSM_ACL_MATCH_UID = 1;

const int CSSM_ACL_MATCH_GID = 2;

const int CSSM_ACL_MATCH_HONOR_ROOT = 256;

const int CSSM_ACL_MATCH_BITS = 3;

const int CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE = 1;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED = 16;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT = 32;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID = 64;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT = 128;

const int CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK = 255;

const int CSSM_ACL_PREAUTH_TRACKING_BLOCKED = 0;

const int CSSM_ACL_PREAUTH_TRACKING_UNKNOWN = 1073741824;

const int CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED = -2147483648;

const int CSSM_DB_ACCESS_RESET = 65536;

const int CSSM_ALGID_APPLE_YARROW = -2147483648;

const int CSSM_ALGID_AES = -2147483647;

const int CSSM_ALGID_FEE = -2147483646;

const int CSSM_ALGID_FEE_MD5 = -2147483645;

const int CSSM_ALGID_FEE_SHA1 = -2147483644;

const int CSSM_ALGID_FEED = -2147483643;

const int CSSM_ALGID_FEEDEXP = -2147483642;

const int CSSM_ALGID_ASC = -2147483641;

const int CSSM_ALGID_SHA1HMAC_LEGACY = -2147483640;

const int CSSM_ALGID_KEYCHAIN_KEY = -2147483639;

const int CSSM_ALGID_PKCS12_PBE_ENCR = -2147483638;

const int CSSM_ALGID_PKCS12_PBE_MAC = -2147483637;

const int CSSM_ALGID_SECURE_PASSPHRASE = -2147483636;

const int CSSM_ALGID_PBE_OPENSSL_MD5 = -2147483635;

const int CSSM_ALGID_SHA256 = -2147483634;

const int CSSM_ALGID_SHA384 = -2147483633;

const int CSSM_ALGID_SHA512 = -2147483632;

const int CSSM_ALGID_ENTROPY_DEFAULT = -2147483631;

const int CSSM_ALGID_SHA224 = -2147483630;

const int CSSM_ALGID_SHA224WithRSA = -2147483629;

const int CSSM_ALGID_SHA256WithRSA = -2147483628;

const int CSSM_ALGID_SHA384WithRSA = -2147483627;

const int CSSM_ALGID_SHA512WithRSA = -2147483626;

const int CSSM_ALGID_OPENSSH1 = -2147483625;

const int CSSM_ALGID_SHA224WithECDSA = -2147483624;

const int CSSM_ALGID_SHA256WithECDSA = -2147483623;

const int CSSM_ALGID_SHA384WithECDSA = -2147483622;

const int CSSM_ALGID_SHA512WithECDSA = -2147483621;

const int CSSM_ALGID_ECDSA_SPECIFIED = -2147483620;

const int CSSM_ALGID_ECDH_X963_KDF = -2147483619;

const int CSSM_ALGID__FIRST_UNUSED = -2147483618;

const int CSSM_PADDING_APPLE_SSLv2 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_X509 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH = -2147483647;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSL = -2147483646;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2 = -2147483645;

const int CSSM_CUSTOM_COMMON_ERROR_EXTENT = 224;

const int CSSM_ERRCODE_NO_USER_INTERACTION = 224;

const int CSSM_ERRCODE_USER_CANCELED = 225;

const int CSSM_ERRCODE_SERVICE_NOT_AVAILABLE = 226;

const int CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION = 227;

const int CSSM_ERRCODE_DEVICE_RESET = 228;

const int CSSM_ERRCODE_DEVICE_FAILED = 229;

const int CSSM_ERRCODE_IN_DARK_WAKE = 230;

const int CSSMERR_CSSM_NO_USER_INTERACTION = -2147417888;

const int CSSMERR_AC_NO_USER_INTERACTION = -2147405600;

const int CSSMERR_CSP_NO_USER_INTERACTION = -2147415840;

const int CSSMERR_CL_NO_USER_INTERACTION = -2147411744;

const int CSSMERR_DL_NO_USER_INTERACTION = -2147413792;

const int CSSMERR_TP_NO_USER_INTERACTION = -2147409696;

const int CSSMERR_CSSM_USER_CANCELED = -2147417887;

const int CSSMERR_AC_USER_CANCELED = -2147405599;

const int CSSMERR_CSP_USER_CANCELED = -2147415839;

const int CSSMERR_CL_USER_CANCELED = -2147411743;

const int CSSMERR_DL_USER_CANCELED = -2147413791;

const int CSSMERR_TP_USER_CANCELED = -2147409695;

const int CSSMERR_CSSM_SERVICE_NOT_AVAILABLE = -2147417886;

const int CSSMERR_AC_SERVICE_NOT_AVAILABLE = -2147405598;

const int CSSMERR_CSP_SERVICE_NOT_AVAILABLE = -2147415838;

const int CSSMERR_CL_SERVICE_NOT_AVAILABLE = -2147411742;

const int CSSMERR_DL_SERVICE_NOT_AVAILABLE = -2147413790;

const int CSSMERR_TP_SERVICE_NOT_AVAILABLE = -2147409694;

const int CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147417885;

const int CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147405597;

const int CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147415837;

const int CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147411741;

const int CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147413789;

const int CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147409693;

const int CSSMERR_CSSM_DEVICE_RESET = -2147417884;

const int CSSMERR_AC_DEVICE_RESET = -2147405596;

const int CSSMERR_CSP_DEVICE_RESET = -2147415836;

const int CSSMERR_CL_DEVICE_RESET = -2147411740;

const int CSSMERR_DL_DEVICE_RESET = -2147413788;

const int CSSMERR_TP_DEVICE_RESET = -2147409692;

const int CSSMERR_CSSM_DEVICE_FAILED = -2147417883;

const int CSSMERR_AC_DEVICE_FAILED = -2147405595;

const int CSSMERR_CSP_DEVICE_FAILED = -2147415835;

const int CSSMERR_CL_DEVICE_FAILED = -2147411739;

const int CSSMERR_DL_DEVICE_FAILED = -2147413787;

const int CSSMERR_TP_DEVICE_FAILED = -2147409691;

const int CSSMERR_CSSM_IN_DARK_WAKE = -2147417882;

const int CSSMERR_AC_IN_DARK_WAKE = -2147405594;

const int CSSMERR_CSP_IN_DARK_WAKE = -2147415834;

const int CSSMERR_CL_IN_DARK_WAKE = -2147411738;

const int CSSMERR_DL_IN_DARK_WAKE = -2147413786;

const int CSSMERR_TP_IN_DARK_WAKE = -2147409690;

const int CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT = -2147415040;

const int CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE = -2147415039;

const int CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH = -2147415038;

const int CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE = -2147415037;

const int CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE = -2147415036;

const int CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR = -2147415035;

const int CSSMERR_CSP_APPLE_SSLv2_ROLLBACK = -2147415034;

const int CSSM_DL_DB_RECORD_GENERIC_PASSWORD = -2147483648;

const int CSSM_DL_DB_RECORD_INTERNET_PASSWORD = -2147483647;

const int CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD = -2147483646;

const int CSSM_DL_DB_RECORD_X509_CERTIFICATE = -2147479552;

const int CSSM_DL_DB_RECORD_USER_TRUST = -2147479551;

const int CSSM_DL_DB_RECORD_X509_CRL = -2147479550;

const int CSSM_DL_DB_RECORD_UNLOCK_REFERRAL = -2147479549;

const int CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE = -2147479548;

const int CSSM_DL_DB_RECORD_METADATA = -2147450880;

const int CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT = 0;

const int CSSM_APPLEFILEDL_COMMIT = 1;

const int CSSM_APPLEFILEDL_ROLLBACK = 2;

const int CSSM_APPLEFILEDL_TAKE_FILE_LOCK = 3;

const int CSSM_APPLEFILEDL_MAKE_BACKUP = 4;

const int CSSM_APPLEFILEDL_MAKE_COPY = 5;

const int CSSM_APPLEFILEDL_DELETE_FILE = 6;

const int CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT = 1;

const int CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE = 2;

const int CSSM_APPLE_UNLOCK_TYPE_KEYBAG = 3;

const int CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS = -2147412992;

const int CSSMERR_APPLEDL_DISK_FULL = -2147412991;

const int CSSMERR_APPLEDL_QUOTA_EXCEEDED = -2147412990;

const int CSSMERR_APPLEDL_FILE_TOO_BIG = -2147412989;

const int CSSMERR_APPLEDL_INVALID_DATABASE_BLOB = -2147412988;

const int CSSMERR_APPLEDL_INVALID_KEY_BLOB = -2147412987;

const int CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB = -2147412986;

const int CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB = -2147412985;

const int CSSMERR_APPLETP_HOSTNAME_MISMATCH = -2147408896;

const int CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN = -2147408895;

const int CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS = -2147408894;

const int CSSMERR_APPLETP_INVALID_CA = -2147408893;

const int CSSMERR_APPLETP_INVALID_AUTHORITY_ID = -2147408892;

const int CSSMERR_APPLETP_INVALID_SUBJECT_ID = -2147408891;

const int CSSMERR_APPLETP_INVALID_KEY_USAGE = -2147408890;

const int CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE = -2147408889;

const int CSSMERR_APPLETP_INVALID_ID_LINKAGE = -2147408888;

const int CSSMERR_APPLETP_PATH_LEN_CONSTRAINT = -2147408887;

const int CSSMERR_APPLETP_INVALID_ROOT = -2147408886;

const int CSSMERR_APPLETP_CRL_EXPIRED = -2147408885;

const int CSSMERR_APPLETP_CRL_NOT_VALID_YET = -2147408884;

const int CSSMERR_APPLETP_CRL_NOT_FOUND = -2147408883;

const int CSSMERR_APPLETP_CRL_SERVER_DOWN = -2147408882;

const int CSSMERR_APPLETP_CRL_BAD_URI = -2147408881;

const int CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN = -2147408880;

const int CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN = -2147408879;

const int CSSMERR_APPLETP_CRL_NOT_TRUSTED = -2147408878;

const int CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT = -2147408877;

const int CSSMERR_APPLETP_CRL_POLICY_FAIL = -2147408876;

const int CSSMERR_APPLETP_IDP_FAIL = -2147408875;

const int CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER = -2147408874;

const int CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER = -2147408873;

const int CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND = -2147408872;

const int CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE = -2147408871;

const int CSSMERR_APPLETP_SMIME_BAD_KEY_USE = -2147408870;

const int CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL = -2147408869;

const int CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS = -2147408868;

const int CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT = -2147408867;

const int CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE = -2147408866;

const int CSSMERR_APPLETP_OCSP_BAD_RESPONSE = -2147408865;

const int CSSMERR_APPLETP_OCSP_BAD_REQUEST = -2147408864;

const int CSSMERR_APPLETP_OCSP_UNAVAILABLE = -2147408863;

const int CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED = -2147408862;

const int CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK = -2147408861;

const int CSSMERR_APPLETP_NETWORK_FAILURE = -2147408860;

const int CSSMERR_APPLETP_OCSP_NOT_TRUSTED = -2147408859;

const int CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT = -2147408858;

const int CSSMERR_APPLETP_OCSP_SIG_ERROR = -2147408857;

const int CSSMERR_APPLETP_OCSP_NO_SIGNER = -2147408856;

const int CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ = -2147408855;

const int CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR = -2147408854;

const int CSSMERR_APPLETP_OCSP_RESP_TRY_LATER = -2147408853;

const int CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED = -2147408852;

const int CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED = -2147408851;

const int CSSMERR_APPLETP_OCSP_NONCE_MISMATCH = -2147408850;

const int CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH = -2147408849;

const int CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS = -2147408848;

const int CSSMERR_APPLETP_CS_BAD_PATH_LENGTH = -2147408847;

const int CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE = -2147408846;

const int CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT = -2147408845;

const int CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH = -2147408844;

const int CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE = -2147408843;

const int CSSMERR_APPLETP_TRUST_SETTING_DENY = -2147408842;

const int CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT = -2147408841;

const int CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT = -2147408840;

const int CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION = -2147408839;

const int CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL = -2147408838;

const int CSSMERR_APPLETP_IDENTIFIER_MISSING = -2147408837;

const int CSSMERR_APPLETP_CA_PIN_MISMATCH = -2147408836;

const int CSSMERR_APPLETP_LEAF_PIN_MISMATCH = -2147408835;

const int CSSMERR_APPLE_DOTMAC_REQ_QUEUED = -2147408796;

const int CSSMERR_APPLE_DOTMAC_REQ_REDIRECT = -2147408795;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR = -2147408794;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM = -2147408793;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH = -2147408792;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL = -2147408791;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL = -2147408790;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST = -2147408789;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR = -2147408788;

const int CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING = -2147408787;

const int CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING = -2147408786;

const int CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL = -2147408785;

const int CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK = -2147408784;

const int CSSM_APPLEDL_OPEN_PARAMETERS_VERSION = 1;

const int CSSM_APPLECSPDL_DB_LOCK = 0;

const int CSSM_APPLECSPDL_DB_UNLOCK = 1;

const int CSSM_APPLECSPDL_DB_GET_SETTINGS = 2;

const int CSSM_APPLECSPDL_DB_SET_SETTINGS = 3;

const int CSSM_APPLECSPDL_DB_IS_LOCKED = 4;

const int CSSM_APPLECSPDL_DB_CHANGE_PASSWORD = 5;

const int CSSM_APPLECSPDL_DB_GET_HANDLE = 6;

const int CSSM_APPLESCPDL_CSP_GET_KEYHANDLE = 7;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_8 = 8;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_9 = 9;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_10 = 10;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_11 = 11;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_12 = 12;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_13 = 13;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_14 = 14;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_15 = 15;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_16 = 16;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_17 = 17;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_18 = 18;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_19 = 19;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_20 = 20;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_21 = 21;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_22 = 22;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_23 = 23;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_24 = 24;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_25 = 25;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_26 = 26;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_27 = 27;

const int CSSM_APPLECSP_KEYDIGEST = 256;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM = 100;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL = 101;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1 = 102;

const int CSSM_ATTRIBUTE_VENDOR_DEFINED = 8388608;

const int CSSM_ATTRIBUTE_PUBLIC_KEY = 1082130432;

const int CSSM_ATTRIBUTE_FEE_PRIME_TYPE = 276824065;

const int CSSM_ATTRIBUTE_FEE_CURVE_TYPE = 276824066;

const int CSSM_ATTRIBUTE_ASC_OPTIMIZATION = 276824067;

const int CSSM_ATTRIBUTE_RSA_BLINDING = 276824068;

const int CSSM_ATTRIBUTE_PARAM_KEY = 1082130437;

const int CSSM_ATTRIBUTE_PROMPT = 545259526;

const int CSSM_ATTRIBUTE_ALERT_TITLE = 545259527;

const int CSSM_ATTRIBUTE_VERIFY_PASSPHRASE = 276824072;

const int CSSM_FEE_PRIME_TYPE_DEFAULT = 0;

const int CSSM_FEE_PRIME_TYPE_MERSENNE = 1;

const int CSSM_FEE_PRIME_TYPE_FEE = 2;

const int CSSM_FEE_PRIME_TYPE_GENERAL = 3;

const int CSSM_FEE_CURVE_TYPE_DEFAULT = 0;

const int CSSM_FEE_CURVE_TYPE_MONTGOMERY = 1;

const int CSSM_FEE_CURVE_TYPE_WEIERSTRASS = 2;

const int CSSM_FEE_CURVE_TYPE_ANSI_X9_62 = 3;

const int CSSM_ASC_OPTIMIZE_DEFAULT = 0;

const int CSSM_ASC_OPTIMIZE_SIZE = 1;

const int CSSM_ASC_OPTIMIZE_SECURITY = 2;

const int CSSM_ASC_OPTIMIZE_TIME = 3;

const int CSSM_ASC_OPTIMIZE_TIME_SIZE = 4;

const int CSSM_ASC_OPTIMIZE_ASCII = 5;

const int CSSM_KEYATTR_PARTIAL = 65536;

const int CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT = 131072;

const int CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT = 1;

const int CSSM_TP_ACTION_FETCH_CRL_FROM_NET = 2;

const int CSSM_TP_ACTION_CRL_SUFFICIENT = 4;

const int CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT = 8;

const int CSSM_TP_ACTION_ALLOW_EXPIRED = 1;

const int CSSM_TP_ACTION_LEAF_IS_CA = 2;

const int CSSM_TP_ACTION_FETCH_CERT_FROM_NET = 4;

const int CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT = 8;

const int CSSM_TP_ACTION_REQUIRE_REV_PER_CERT = 16;

const int CSSM_TP_ACTION_TRUST_SETTINGS = 32;

const int CSSM_TP_ACTION_IMPLICIT_ANCHORS = 64;

const int CSSM_CERT_STATUS_EXPIRED = 1;

const int CSSM_CERT_STATUS_NOT_VALID_YET = 2;

const int CSSM_CERT_STATUS_IS_IN_INPUT_CERTS = 4;

const int CSSM_CERT_STATUS_IS_IN_ANCHORS = 8;

const int CSSM_CERT_STATUS_IS_ROOT = 16;

const int CSSM_CERT_STATUS_IS_FROM_NET = 32;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER = 64;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN = 128;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM = 256;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST = 512;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_DENY = 1024;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR = 2048;

const int CSSM_EVIDENCE_FORM_APPLE_HEADER = -2147483648;

const int CSSM_EVIDENCE_FORM_APPLE_CERTGROUP = -2147483647;

const int CSSM_EVIDENCE_FORM_APPLE_CERT_INFO = -2147483646;

const int CSSM_APPLEX509CL_OBTAIN_CSR = 0;

const int CSSM_APPLEX509CL_VERIFY_CSR = 1;

const int kSecSubjectItemAttr = 1937072746;

const int kSecIssuerItemAttr = 1769173877;

const int kSecSerialNumberItemAttr = 1936614002;

const int kSecPublicKeyHashItemAttr = 1752198009;

const int kSecSubjectKeyIdentifierItemAttr = 1936419172;

const int kSecCertTypeItemAttr = 1668577648;

const int kSecCertEncodingItemAttr = 1667591779;

const int SSL_NULL_WITH_NULL_NULL = 0;

const int SSL_RSA_WITH_NULL_MD5 = 1;

const int SSL_RSA_WITH_NULL_SHA = 2;

const int SSL_RSA_EXPORT_WITH_RC4_40_MD5 = 3;

const int SSL_RSA_WITH_RC4_128_MD5 = 4;

const int SSL_RSA_WITH_RC4_128_SHA = 5;

const int SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 6;

const int SSL_RSA_WITH_IDEA_CBC_SHA = 7;

const int SSL_RSA_EXPORT_WITH_DES40_CBC_SHA = 8;

const int SSL_RSA_WITH_DES_CBC_SHA = 9;

const int SSL_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 11;

const int SSL_DH_DSS_WITH_DES_CBC_SHA = 12;

const int SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 14;

const int SSL_DH_RSA_WITH_DES_CBC_SHA = 15;

const int SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 17;

const int SSL_DHE_DSS_WITH_DES_CBC_SHA = 18;

const int SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 20;

const int SSL_DHE_RSA_WITH_DES_CBC_SHA = 21;

const int SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int SSL_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23;

const int SSL_DH_anon_WITH_RC4_128_MD5 = 24;

const int SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25;

const int SSL_DH_anon_WITH_DES_CBC_SHA = 26;

const int SSL_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int SSL_FORTEZZA_DMS_WITH_NULL_SHA = 28;

const int SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA = 29;

const int TLS_RSA_WITH_AES_128_CBC_SHA = 47;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA = 48;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA = 49;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 50;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA = 52;

const int TLS_RSA_WITH_AES_256_CBC_SHA = 53;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA = 54;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA = 55;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 56;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA = 58;

const int TLS_ECDH_ECDSA_WITH_NULL_SHA = -16383;

const int TLS_ECDH_ECDSA_WITH_RC4_128_SHA = -16382;

const int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = -16381;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = -16380;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = -16379;

const int TLS_ECDHE_ECDSA_WITH_NULL_SHA = -16378;

const int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = -16377;

const int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = -16376;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = -16375;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = -16374;

const int TLS_ECDH_RSA_WITH_NULL_SHA = -16373;

const int TLS_ECDH_RSA_WITH_RC4_128_SHA = -16372;

const int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = -16371;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = -16370;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = -16369;

const int TLS_ECDHE_RSA_WITH_NULL_SHA = -16368;

const int TLS_ECDHE_RSA_WITH_RC4_128_SHA = -16367;

const int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = -16366;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = -16365;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = -16364;

const int TLS_ECDH_anon_WITH_NULL_SHA = -16363;

const int TLS_ECDH_anon_WITH_RC4_128_SHA = -16362;

const int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = -16361;

const int TLS_ECDH_anon_WITH_AES_128_CBC_SHA = -16360;

const int TLS_ECDH_anon_WITH_AES_256_CBC_SHA = -16359;

const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = -16331;

const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = -16330;

const int TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = -13141;

const int TLS_NULL_WITH_NULL_NULL = 0;

const int TLS_RSA_WITH_NULL_MD5 = 1;

const int TLS_RSA_WITH_NULL_SHA = 2;

const int TLS_RSA_WITH_RC4_128_MD5 = 4;

const int TLS_RSA_WITH_RC4_128_SHA = 5;

const int TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int TLS_RSA_WITH_NULL_SHA256 = 59;

const int TLS_RSA_WITH_AES_128_CBC_SHA256 = 60;

const int TLS_RSA_WITH_AES_256_CBC_SHA256 = 61;

const int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 62;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 63;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 64;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 104;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 105;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 106;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107;

const int TLS_DH_anon_WITH_RC4_128_MD5 = 24;

const int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109;

const int TLS_PSK_WITH_RC4_128_SHA = 138;

const int TLS_PSK_WITH_3DES_EDE_CBC_SHA = 139;

const int TLS_PSK_WITH_AES_128_CBC_SHA = 140;

const int TLS_PSK_WITH_AES_256_CBC_SHA = 141;

const int TLS_DHE_PSK_WITH_RC4_128_SHA = 142;

const int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 143;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 144;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 145;

const int TLS_RSA_PSK_WITH_RC4_128_SHA = 146;

const int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 147;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 148;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 149;

const int TLS_PSK_WITH_NULL_SHA = 44;

const int TLS_DHE_PSK_WITH_NULL_SHA = 45;

const int TLS_RSA_PSK_WITH_NULL_SHA = 46;

const int TLS_RSA_WITH_AES_128_GCM_SHA256 = 156;

const int TLS_RSA_WITH_AES_256_GCM_SHA384 = 157;

const int TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158;

const int TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159;

const int TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 160;

const int TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 161;

const int TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 162;

const int TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 163;

const int TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 164;

const int TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 165;

const int TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166;

const int TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167;

const int TLS_PSK_WITH_AES_128_GCM_SHA256 = 168;

const int TLS_PSK_WITH_AES_256_GCM_SHA384 = 169;

const int TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 170;

const int TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 171;

const int TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 172;

const int TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 173;

const int TLS_PSK_WITH_AES_128_CBC_SHA256 = 174;

const int TLS_PSK_WITH_AES_256_CBC_SHA384 = 175;

const int TLS_PSK_WITH_NULL_SHA256 = 176;

const int TLS_PSK_WITH_NULL_SHA384 = 177;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 178;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 179;

const int TLS_DHE_PSK_WITH_NULL_SHA256 = 180;

const int TLS_DHE_PSK_WITH_NULL_SHA384 = 181;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 182;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 183;

const int TLS_RSA_PSK_WITH_NULL_SHA256 = 184;

const int TLS_RSA_PSK_WITH_NULL_SHA384 = 185;

const int TLS_AES_128_GCM_SHA256 = 4865;

const int TLS_AES_256_GCM_SHA384 = 4866;

const int TLS_CHACHA20_POLY1305_SHA256 = 4867;

const int TLS_AES_128_CCM_SHA256 = 4868;

const int TLS_AES_128_CCM_8_SHA256 = 4869;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = -16349;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = -16348;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = -16347;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = -16346;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = -16345;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = -16344;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = -16343;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = -16342;

const int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = -16341;

const int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = -16340;

const int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = -16339;

const int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = -16338;

const int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = -16337;

const int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = -16336;

const int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = -16335;

const int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = -16334;

const int TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = -13144;

const int TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = -13143;

const int TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 255;

const int SSL_RSA_WITH_RC2_CBC_MD5 = -128;

const int SSL_RSA_WITH_IDEA_CBC_MD5 = -127;

const int SSL_RSA_WITH_DES_CBC_MD5 = -126;

const int SSL_RSA_WITH_3DES_EDE_CBC_MD5 = -125;

const int SSL_NO_SUCH_CIPHERSUITE = -1;

const int NSASCIIStringEncoding = 1;

const int NSNEXTSTEPStringEncoding = 2;

const int NSJapaneseEUCStringEncoding = 3;

const int NSUTF8StringEncoding = 4;

const int NSISOLatin1StringEncoding = 5;

const int NSSymbolStringEncoding = 6;

const int NSNonLossyASCIIStringEncoding = 7;

const int NSShiftJISStringEncoding = 8;

const int NSISOLatin2StringEncoding = 9;

const int NSUnicodeStringEncoding = 10;

const int NSWindowsCP1251StringEncoding = 11;

const int NSWindowsCP1252StringEncoding = 12;

const int NSWindowsCP1253StringEncoding = 13;

const int NSWindowsCP1254StringEncoding = 14;

const int NSWindowsCP1250StringEncoding = 15;

const int NSISO2022JPStringEncoding = 21;

const int NSMacOSRomanStringEncoding = 30;

const int NSUTF16StringEncoding = 10;

const int NSUTF16BigEndianStringEncoding = 2415919360;

const int NSUTF16LittleEndianStringEncoding = 2483028224;

const int NSUTF32StringEncoding = 2348810496;

const int NSUTF32BigEndianStringEncoding = 2550137088;

const int NSUTF32LittleEndianStringEncoding = 2617245952;

const int NSProprietaryStringEncoding = 65536;

const int NSOpenStepUnicodeReservedBase = 62464;

const int NS_BLOCKS_AVAILABLE = 1;

const int __COREFOUNDATION_CFAVAILABILITY__ = 1;

const int __CF_ENUM_FIXED_IS_AVAILABLE = 1;

const double NSFoundationVersionNumber10_0 = 397.4;

const double NSFoundationVersionNumber10_1 = 425.0;

const double NSFoundationVersionNumber10_1_1 = 425.0;

const double NSFoundationVersionNumber10_1_2 = 425.0;

const double NSFoundationVersionNumber10_1_3 = 425.0;

const double NSFoundationVersionNumber10_1_4 = 425.0;

const double NSFoundationVersionNumber10_2 = 462.0;

const double NSFoundationVersionNumber10_2_1 = 462.0;

const double NSFoundationVersionNumber10_2_2 = 462.0;

const double NSFoundationVersionNumber10_2_3 = 462.0;

const double NSFoundationVersionNumber10_2_4 = 462.0;

const double NSFoundationVersionNumber10_2_5 = 462.0;

const double NSFoundationVersionNumber10_2_6 = 462.0;

const double NSFoundationVersionNumber10_2_7 = 462.7;

const double NSFoundationVersionNumber10_2_8 = 462.7;

const double NSFoundationVersionNumber10_3 = 500.0;

const double NSFoundationVersionNumber10_3_1 = 500.0;

const double NSFoundationVersionNumber10_3_2 = 500.3;

const double NSFoundationVersionNumber10_3_3 = 500.54;

const double NSFoundationVersionNumber10_3_4 = 500.56;

const double NSFoundationVersionNumber10_3_5 = 500.56;

const double NSFoundationVersionNumber10_3_6 = 500.56;

const double NSFoundationVersionNumber10_3_7 = 500.56;

const double NSFoundationVersionNumber10_3_8 = 500.56;

const double NSFoundationVersionNumber10_3_9 = 500.58;

const double NSFoundationVersionNumber10_4 = 567.0;

const double NSFoundationVersionNumber10_4_1 = 567.0;

const double NSFoundationVersionNumber10_4_2 = 567.12;

const double NSFoundationVersionNumber10_4_3 = 567.21;

const double NSFoundationVersionNumber10_4_4_Intel = 567.23;

const double NSFoundationVersionNumber10_4_4_PowerPC = 567.21;

const double NSFoundationVersionNumber10_4_5 = 567.25;

const double NSFoundationVersionNumber10_4_6 = 567.26;

const double NSFoundationVersionNumber10_4_7 = 567.27;

const double NSFoundationVersionNumber10_4_8 = 567.28;

const double NSFoundationVersionNumber10_4_9 = 567.29;

const double NSFoundationVersionNumber10_4_10 = 567.29;

const double NSFoundationVersionNumber10_4_11 = 567.36;

const double NSFoundationVersionNumber10_5 = 677.0;

const double NSFoundationVersionNumber10_5_1 = 677.1;

const double NSFoundationVersionNumber10_5_2 = 677.15;

const double NSFoundationVersionNumber10_5_3 = 677.19;

const double NSFoundationVersionNumber10_5_4 = 677.19;

const double NSFoundationVersionNumber10_5_5 = 677.21;

const double NSFoundationVersionNumber10_5_6 = 677.22;

const double NSFoundationVersionNumber10_5_7 = 677.24;

const double NSFoundationVersionNumber10_5_8 = 677.26;

const double NSFoundationVersionNumber10_6 = 751.0;

const double NSFoundationVersionNumber10_6_1 = 751.0;

const double NSFoundationVersionNumber10_6_2 = 751.14;

const double NSFoundationVersionNumber10_6_3 = 751.21;

const double NSFoundationVersionNumber10_6_4 = 751.29;

const double NSFoundationVersionNumber10_6_5 = 751.42;

const double NSFoundationVersionNumber10_6_6 = 751.53;

const double NSFoundationVersionNumber10_6_7 = 751.53;

const double NSFoundationVersionNumber10_6_8 = 751.62;

const double NSFoundationVersionNumber10_7 = 833.1;

const double NSFoundationVersionNumber10_7_1 = 833.1;

const double NSFoundationVersionNumber10_7_2 = 833.2;

const double NSFoundationVersionNumber10_7_3 = 833.24;

const double NSFoundationVersionNumber10_7_4 = 833.25;

const double NSFoundationVersionNumber10_8 = 945.0;

const double NSFoundationVersionNumber10_8_1 = 945.0;

const double NSFoundationVersionNumber10_8_2 = 945.11;

const double NSFoundationVersionNumber10_8_3 = 945.16;

const double NSFoundationVersionNumber10_8_4 = 945.18;

const int NSFoundationVersionNumber10_9 = 1056;

const int NSFoundationVersionNumber10_9_1 = 1056;

const double NSFoundationVersionNumber10_9_2 = 1056.13;

const double NSFoundationVersionNumber10_10 = 1151.16;

const double NSFoundationVersionNumber10_10_1 = 1151.16;

const double NSFoundationVersionNumber10_10_2 = 1152.14;

const double NSFoundationVersionNumber10_10_3 = 1153.2;

const double NSFoundationVersionNumber10_10_4 = 1153.2;

const int NSFoundationVersionNumber10_10_5 = 1154;

const int NSFoundationVersionNumber10_10_Max = 1199;

const int NSFoundationVersionNumber10_11 = 1252;

const double NSFoundationVersionNumber10_11_1 = 1255.1;

const double NSFoundationVersionNumber10_11_2 = 1256.1;

const double NSFoundationVersionNumber10_11_3 = 1256.1;

const int NSFoundationVersionNumber10_11_4 = 1258;

const int NSFoundationVersionNumber10_11_Max = 1299;

const int __COREFOUNDATION_CFBASE__ = 1;

const int TRUE = 1;

const int FALSE = 0;

const double kCFCoreFoundationVersionNumber10_0 = 196.4;

const double kCFCoreFoundationVersionNumber10_0_3 = 196.5;

const double kCFCoreFoundationVersionNumber10_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_2 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_3 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_4 = 227.3;

const double kCFCoreFoundationVersionNumber10_2 = 263.0;

const double kCFCoreFoundationVersionNumber10_2_1 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_2 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_3 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_4 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_5 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_6 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_7 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_8 = 263.5;

const double kCFCoreFoundationVersionNumber10_3 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_1 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_2 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_3 = 299.3;

const double kCFCoreFoundationVersionNumber10_3_4 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_5 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_6 = 299.32;

const double kCFCoreFoundationVersionNumber10_3_7 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_8 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_9 = 299.35;

const double kCFCoreFoundationVersionNumber10_4 = 368.0;

const double kCFCoreFoundationVersionNumber10_4_1 = 368.1;

const double kCFCoreFoundationVersionNumber10_4_2 = 368.11;

const double kCFCoreFoundationVersionNumber10_4_3 = 368.18;

const double kCFCoreFoundationVersionNumber10_4_4_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_4_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_5_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_5_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_6_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_6_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_7 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_8 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_9 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_10 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_11 = 368.31;

const double kCFCoreFoundationVersionNumber10_5 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_1 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_2 = 476.1;

const double kCFCoreFoundationVersionNumber10_5_3 = 476.13;

const double kCFCoreFoundationVersionNumber10_5_4 = 476.14;

const double kCFCoreFoundationVersionNumber10_5_5 = 476.15;

const double kCFCoreFoundationVersionNumber10_5_6 = 476.17;

const double kCFCoreFoundationVersionNumber10_5_7 = 476.18;

const double kCFCoreFoundationVersionNumber10_5_8 = 476.19;

const double kCFCoreFoundationVersionNumber10_6 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_1 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_2 = 550.13;

const double kCFCoreFoundationVersionNumber10_6_3 = 550.19;

const double kCFCoreFoundationVersionNumber10_6_4 = 550.29;

const double kCFCoreFoundationVersionNumber10_6_5 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_6 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_7 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_8 = 550.43;

const double kCFCoreFoundationVersionNumber10_7 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_1 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_2 = 635.15;

const double kCFCoreFoundationVersionNumber10_7_3 = 635.19;

const double kCFCoreFoundationVersionNumber10_7_4 = 635.21;

const double kCFCoreFoundationVersionNumber10_7_5 = 635.21;

const double kCFCoreFoundationVersionNumber10_8 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_1 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_2 = 744.12;

const double kCFCoreFoundationVersionNumber10_8_3 = 744.18;

const double kCFCoreFoundationVersionNumber10_8_4 = 744.19;

const double kCFCoreFoundationVersionNumber10_9 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_1 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_2 = 855.14;

const double kCFCoreFoundationVersionNumber10_10 = 1151.16;

const double kCFCoreFoundationVersionNumber10_10_1 = 1151.16;

const int kCFCoreFoundationVersionNumber10_10_2 = 1152;

const double kCFCoreFoundationVersionNumber10_10_3 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_4 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_5 = 1153.18;

const int kCFCoreFoundationVersionNumber10_10_Max = 1199;

const int kCFCoreFoundationVersionNumber10_11 = 1253;

const double kCFCoreFoundationVersionNumber10_11_1 = 1255.1;

const double kCFCoreFoundationVersionNumber10_11_2 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_3 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_4 = 1258.1;

const int kCFCoreFoundationVersionNumber10_11_Max = 1299;

const int ISA_PTRAUTH_DISCRIMINATOR = 27361;

const double NSTimeIntervalSince1970 = 978307200.0;

const int __COREFOUNDATION_CFARRAY__ = 1;

const int SEC_OS_IPHONE = 0;

const int SEC_OS_OSX = 1;

const int SEC_OS_OSX_INCLUDES = 1;

const int SECURITY_TYPE_UNIFICATION = 1;

const int __COREFOUNDATION_COREFOUNDATION__ = 1;

const int __COREFOUNDATION__ = 1;

const int __COREFOUNDATION_CFBAG__ = 1;

const int __COREFOUNDATION_CFBINARYHEAP__ = 1;

const int __COREFOUNDATION_CFBITVECTOR__ = 1;

const int __COREFOUNDATION_CFBYTEORDER__ = 1;

const int CF_USE_OSBYTEORDER_H = 1;

const int __COREFOUNDATION_CFCALENDAR__ = 1;

const int __COREFOUNDATION_CFLOCALE__ = 1;

const int __COREFOUNDATION_CFDICTIONARY__ = 1;

const int __COREFOUNDATION_CFNOTIFICATIONCENTER__ = 1;

const int __COREFOUNDATION_CFDATE__ = 1;

const int __COREFOUNDATION_CFTIMEZONE__ = 1;

const int __COREFOUNDATION_CFDATA__ = 1;

const int __COREFOUNDATION_CFSTRING__ = 1;

const int __COREFOUNDATION_CFCHARACTERSET__ = 1;

const int kCFStringEncodingInvalidId = 4294967295;

const int __kCFStringInlineBufferLength = 64;

const int __COREFOUNDATION_CFDATEFORMATTER__ = 1;

const int __COREFOUNDATION_CFERROR__ = 1;

const int __COREFOUNDATION_CFNUMBER__ = 1;

const int __COREFOUNDATION_CFNUMBERFORMATTER__ = 1;

const int __COREFOUNDATION_CFPREFERENCES__ = 1;

const int __COREFOUNDATION_CFPROPERTYLIST__ = 1;

const int __COREFOUNDATION_CFSTREAM__ = 1;

const int __COREFOUNDATION_CFURL__ = 1;

const int __COREFOUNDATION_CFRUNLOOP__ = 1;

const int __COREFOUNDATION_CFSOCKET__ = 1;

const int __COREFOUNDATION_CFSET__ = 1;

const int __COREFOUNDATION_CFSTRINGENCODINGEXT__ = 1;

const int __COREFOUNDATION_CFTREE__ = 1;

const int __COREFOUNDATION_CFURLACCESS__ = 1;

const int __COREFOUNDATION_CFUUID__ = 1;

const int __COREFOUNDATION_CFUTILITIES__ = 1;

const int __COREFOUNDATION_CFBUNDLE__ = 1;

const int __COREFOUNDATION_CFMESSAGEPORT__ = 1;

const int __COREFOUNDATION_CFPLUGIN__ = 1;

const int COREFOUNDATION_CFPLUGINCOM_SEPARATE = 1;

const int __COREFOUNDATION_CFMACHPORT__ = 1;

const int __COREFOUNDATION_CFATTRIBUTEDSTRING__ = 1;

const int __COREFOUNDATION_CFURLENUMERATOR__ = 1;

const int __COREFOUNDATION_CFFILESECURITY__ = 1;

const int __COREFOUNDATION_CFSTRINGTOKENIZER__ = 1;

const int __COREFOUNDATION_CFFILEDESCRIPTOR__ = 1;

const int __COREFOUNDATION_CFUSERNOTIFICATION__ = 1;

const int __COREFOUNDATION_CFXMLNODE__ = 1;

const int __COREFOUNDATION_CFXMLPARSER__ = 1;

const int _CSSMTYPE_H_ = 1;

const int _CSSMCONFIG_H_ = 1;

const int SEC_ASN1_TAG_MASK = 255;

const int SEC_ASN1_TAGNUM_MASK = 31;

const int SEC_ASN1_BOOLEAN = 1;

const int SEC_ASN1_INTEGER = 2;

const int SEC_ASN1_BIT_STRING = 3;

const int SEC_ASN1_OCTET_STRING = 4;

const int SEC_ASN1_NULL = 5;

const int SEC_ASN1_OBJECT_ID = 6;

const int SEC_ASN1_OBJECT_DESCRIPTOR = 7;

const int SEC_ASN1_REAL = 9;

const int SEC_ASN1_ENUMERATED = 10;

const int SEC_ASN1_EMBEDDED_PDV = 11;

const int SEC_ASN1_UTF8_STRING = 12;

const int SEC_ASN1_SEQUENCE = 16;

const int SEC_ASN1_SET = 17;

const int SEC_ASN1_NUMERIC_STRING = 18;

const int SEC_ASN1_PRINTABLE_STRING = 19;

const int SEC_ASN1_T61_STRING = 20;

const int SEC_ASN1_VIDEOTEX_STRING = 21;

const int SEC_ASN1_IA5_STRING = 22;

const int SEC_ASN1_UTC_TIME = 23;

const int SEC_ASN1_GENERALIZED_TIME = 24;

const int SEC_ASN1_GRAPHIC_STRING = 25;

const int SEC_ASN1_VISIBLE_STRING = 26;

const int SEC_ASN1_GENERAL_STRING = 27;

const int SEC_ASN1_UNIVERSAL_STRING = 28;

const int SEC_ASN1_BMP_STRING = 30;

const int SEC_ASN1_HIGH_TAG_NUMBER = 31;

const int SEC_ASN1_TELETEX_STRING = 20;

const int SEC_ASN1_METHOD_MASK = 32;

const int SEC_ASN1_PRIMITIVE = 0;

const int SEC_ASN1_CONSTRUCTED = 32;

const int SEC_ASN1_CLASS_MASK = 192;

const int SEC_ASN1_UNIVERSAL = 0;

const int SEC_ASN1_APPLICATION = 64;

const int SEC_ASN1_CONTEXT_SPECIFIC = 128;

const int SEC_ASN1_PRIVATE = 192;

const int SEC_ASN1_OPTIONAL = 256;

const int SEC_ASN1_EXPLICIT = 512;

const int SEC_ASN1_ANY = 1024;

const int SEC_ASN1_INLINE = 2048;

const int SEC_ASN1_POINTER = 4096;

const int SEC_ASN1_GROUP = 8192;

const int SEC_ASN1_DYNAMIC = 16384;

const int SEC_ASN1_SKIP = 32768;

const int SEC_ASN1_INNER = 65536;

const int SEC_ASN1_SAVE = 131072;

const int SEC_ASN1_SKIP_REST = 524288;

const int SEC_ASN1_CHOICE = 1048576;

const int SEC_ASN1_SIGNED_INT = 8388608;

const int SEC_ASN1_SEQUENCE_OF = 8208;

const int SEC_ASN1_SET_OF = 8209;

const int SEC_ASN1_ANY_CONTENTS = 66560;

const int _CSSMAPPLE_H_ = 1;

const int _CSSMERR_H_ = 1;

const int _X509DEFS_H_ = 1;

const int BER_TAG_UNKNOWN = 0;

const int BER_TAG_BOOLEAN = 1;

const int BER_TAG_INTEGER = 2;

const int BER_TAG_BIT_STRING = 3;

const int BER_TAG_OCTET_STRING = 4;

const int BER_TAG_NULL = 5;

const int BER_TAG_OID = 6;

const int BER_TAG_OBJECT_DESCRIPTOR = 7;

const int BER_TAG_EXTERNAL = 8;

const int BER_TAG_REAL = 9;

const int BER_TAG_ENUMERATED = 10;

const int BER_TAG_PKIX_UTF8_STRING = 12;

const int BER_TAG_SEQUENCE = 16;

const int BER_TAG_SET = 17;

const int BER_TAG_NUMERIC_STRING = 18;

const int BER_TAG_PRINTABLE_STRING = 19;

const int BER_TAG_T61_STRING = 20;

const int BER_TAG_TELETEX_STRING = 20;

const int BER_TAG_VIDEOTEX_STRING = 21;

const int BER_TAG_IA5_STRING = 22;

const int BER_TAG_UTC_TIME = 23;

const int BER_TAG_GENERALIZED_TIME = 24;

const int BER_TAG_GRAPHIC_STRING = 25;

const int BER_TAG_ISO646_STRING = 26;

const int BER_TAG_GENERAL_STRING = 27;

const int BER_TAG_VISIBLE_STRING = 26;

const int BER_TAG_PKIX_UNIVERSAL_STRING = 28;

const int BER_TAG_PKIX_BMP_STRING = 30;

const int CSSM_X509_OPTION_PRESENT = 1;

const int CSSM_X509_OPTION_NOT_PRESENT = 0;

const int CE_KU_DigitalSignature = 32768;

const int CE_KU_NonRepudiation = 16384;

const int CE_KU_KeyEncipherment = 8192;

const int CE_KU_DataEncipherment = 4096;

const int CE_KU_KeyAgreement = 2048;

const int CE_KU_KeyCertSign = 1024;

const int CE_KU_CRLSign = 512;

const int CE_KU_EncipherOnly = 256;

const int CE_KU_DecipherOnly = 128;

const int CE_CR_Unspecified = 0;

const int CE_CR_KeyCompromise = 1;

const int CE_CR_CACompromise = 2;

const int CE_CR_AffiliationChanged = 3;

const int CE_CR_Superseded = 4;

const int CE_CR_CessationOfOperation = 5;

const int CE_CR_CertificateHold = 6;

const int CE_CR_RemoveFromCRL = 8;

const int CE_CD_Unspecified = 128;

const int CE_CD_KeyCompromise = 64;

const int CE_CD_CACompromise = 32;

const int CE_CD_AffiliationChanged = 16;

const int CE_CD_Superseded = 8;

const int CE_CD_CessationOfOperation = 4;

const int CE_CD_CertificateHold = 2;

const int CSSM_APPLE_TP_SSL_OPTS_VERSION = 1;

const int CSSM_APPLE_TP_SSL_CLIENT = 1;

const int CSSM_APPLE_TP_CRL_OPTS_VERSION = 0;

const int CSSM_APPLE_TP_SMIME_OPTS_VERSION = 0;

const int CSSM_APPLE_TP_ACTION_VERSION = 0;

const int CSSM_TP_APPLE_EVIDENCE_VERSION = 0;

const int CSSM_EVIDENCE_FORM_APPLE_CUSTOM = 2147483648;

const String CSSM_APPLE_CRL_END_OF_TIME = '99991231235959';

const String kKeychainSuffix = '.keychain';

const String kKeychainDbSuffix = '.keychain-db';

const String kSystemKeychainName = 'System.keychain';

const String kSystemKeychainDir = '/Library/Keychains/';

const String kSystemUnlockFile = '/var/db/SystemKey';

const String kSystemKeychainPath = '/Library/Keychains/System.keychain';

const String CSSM_APPLE_ACL_TAG_PARTITION_ID = '___PARTITION___';

const String CSSM_APPLE_ACL_TAG_INTEGRITY = '___INTEGRITY___';

const int errSecErrnoBase = 100000;

const int errSecErrnoLimit = 100255;

const int SEC_PROTOCOL_CERT_COMPRESSION_DEFAULT = 1;

const int errSSLServerAuthCompleted = -9841;

const int errSSLClientAuthCompleted = -9841;

const int errSSLLast = -9849;

const int NSMaximumStringLength = 2147483646;

const int NS_UNICHAR_IS_EIGHT_BIT = 0;

const int NSURLResponseUnknownLength = -1;
