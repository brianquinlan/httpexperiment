// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Double> _NSFoundationVersionNumber =
      _lookup<ffi.Double>('NSFoundationVersionNumber');

  double get NSFoundationVersionNumber => _NSFoundationVersionNumber.value;

  set NSFoundationVersionNumber(double value) =>
      _NSFoundationVersionNumber.value = value;

  ffi.Pointer<ObjCObject> NSStringFromSelector(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector(
      aSelector,
    );
  }

  late final _NSStringFromSelectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector = _NSStringFromSelectorPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString(
      aSelectorName,
    );
  }

  late final _NSSelectorFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString = _NSSelectorFromStringPtr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass(
      aClass,
    );
  }

  late final _NSStringFromClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass = _NSStringFromClassPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString(
      aClassName,
    );
  }

  late final _NSClassFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString = _NSClassFromStringPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol(
      proto,
    );
  }

  late final _NSStringFromProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol = _NSStringFromProtocolPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString(
      namestr,
    );
  }

  late final _NSProtocolFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString = _NSProtocolFromStringPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment = _NSGetSizeAndAlignmentPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog(
      format,
    );
  }

  late final _NSLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog =
      _NSLogPtr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv(
      format,
      args,
    );
  }

  late final _NSLogvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv =
      _NSLogvPtr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  late final ffi.Pointer<NSInteger> _NSNotFound =
      _lookup<NSInteger>('NSNotFound');

  int get NSNotFound => _NSNotFound.value;

  set NSNotFound(int value) => _NSNotFound.value = value;

  late final ffi.Pointer<ffi.Double> _kCFCoreFoundationVersionNumber =
      _lookup<ffi.Double>('kCFCoreFoundationVersionNumber');

  double get kCFCoreFoundationVersionNumber =>
      _kCFCoreFoundationVersionNumber.value;

  set kCFCoreFoundationVersionNumber(double value) =>
      _kCFCoreFoundationVersionNumber.value = value;

  late final ffi.Pointer<CFIndex> _kCFNotFound =
      _lookup<CFIndex>('kCFNotFound');

  int get kCFNotFound => _kCFNotFound.value;

  set kCFNotFound(int value) => _kCFNotFound.value = value;

  CFRange __CFRangeMake(
    int loc,
    int len,
  ) {
    return ___CFRangeMake(
      loc,
      len,
    );
  }

  late final ___CFRangeMakePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake =
      ___CFRangeMakePtr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID() {
    return _CFNullGetTypeID();
  }

  late final _CFNullGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID =
      _CFNullGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFNullRef> _kCFNull = _lookup<CFNullRef>('kCFNull');

  CFNullRef get kCFNull => _kCFNull.value;

  set kCFNull(CFNullRef value) => _kCFNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorDefault');

  CFAllocatorRef get kCFAllocatorDefault => _kCFAllocatorDefault.value;

  set kCFAllocatorDefault(CFAllocatorRef value) =>
      _kCFAllocatorDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorSystemDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorSystemDefault');

  CFAllocatorRef get kCFAllocatorSystemDefault =>
      _kCFAllocatorSystemDefault.value;

  set kCFAllocatorSystemDefault(CFAllocatorRef value) =>
      _kCFAllocatorSystemDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMalloc =
      _lookup<CFAllocatorRef>('kCFAllocatorMalloc');

  CFAllocatorRef get kCFAllocatorMalloc => _kCFAllocatorMalloc.value;

  set kCFAllocatorMalloc(CFAllocatorRef value) =>
      _kCFAllocatorMalloc.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMallocZone =
      _lookup<CFAllocatorRef>('kCFAllocatorMallocZone');

  CFAllocatorRef get kCFAllocatorMallocZone => _kCFAllocatorMallocZone.value;

  set kCFAllocatorMallocZone(CFAllocatorRef value) =>
      _kCFAllocatorMallocZone.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorNull =
      _lookup<CFAllocatorRef>('kCFAllocatorNull');

  CFAllocatorRef get kCFAllocatorNull => _kCFAllocatorNull.value;

  set kCFAllocatorNull(CFAllocatorRef value) => _kCFAllocatorNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorUseContext =
      _lookup<CFAllocatorRef>('kCFAllocatorUseContext');

  CFAllocatorRef get kCFAllocatorUseContext => _kCFAllocatorUseContext.value;

  set kCFAllocatorUseContext(CFAllocatorRef value) =>
      _kCFAllocatorUseContext.value = value;

  int CFAllocatorGetTypeID() {
    return _CFAllocatorGetTypeID();
  }

  late final _CFAllocatorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID =
      _CFAllocatorGetTypeIDPtr.asFunction<int Function()>();

  void CFAllocatorSetDefault(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault(
      allocator,
    );
  }

  late final _CFAllocatorSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault =
      _CFAllocatorSetDefaultPtr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault() {
    return _CFAllocatorGetDefault();
  }

  late final _CFAllocatorGetDefaultPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault =
      _CFAllocatorGetDefaultPtr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate = _CFAllocatorCreatePtr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate = _CFAllocatorAllocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate = _CFAllocatorReallocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate = _CFAllocatorDeallocatePtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSizePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize =
      _CFAllocatorGetPreferredSizeForSizePtr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext = _CFAllocatorGetContextPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription =
      _CFCopyTypeIDDescriptionPtr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain(
    CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease(
    CFTypeRef arg,
  ) {
    return _CFAutorelease(
      arg,
    );
  }

  late final _CFAutoreleasePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease =
      _CFAutoreleasePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(CFTypeRef)>();

  int CFEqual(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash(
    CFTypeRef cf,
  ) {
    return _CFHash(
      cf,
    );
  }

  late final _CFHashPtr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash = _CFHashPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription =
      _CFCopyDescriptionPtr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator(
      cf,
    );
  }

  late final _CFGetAllocatorPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator =
      _CFGetAllocatorPtr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable(
      cf,
    );
  }

  late final _CFMakeCollectablePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable =
      _CFMakeCollectablePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone() {
    return _NSDefaultMallocZone();
  }

  late final _NSDefaultMallocZonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone =
      _NSDefaultMallocZonePtr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone = _NSCreateZonePtr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone(
      zone,
    );
  }

  late final _NSRecycleZonePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone =
      _NSRecycleZonePtr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName(
      zone,
      name,
    );
  }

  late final _NSSetZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName = _NSSetZoneNamePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName(
      zone,
    );
  }

  late final _NSZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName = _NSZoneNamePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer(
      ptr,
    );
  }

  late final _NSZoneFromPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer = _NSZoneFromPointerPtr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc(
      zone,
      size,
    );
  }

  late final _NSZoneMallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc = _NSZoneMallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc = _NSZoneCallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc = _NSZoneReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree(
      zone,
      ptr,
    );
  }

  late final _NSZoneFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree = _NSZoneFreePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable(
      size,
      options,
    );
  }

  late final _NSAllocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable = _NSAllocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable = _NSReallocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize() {
    return _NSPageSize();
  }

  late final _NSPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize = _NSPageSizePtr.asFunction<int Function()>();

  int NSLogPageSize() {
    return _NSLogPageSize();
  }

  late final _NSLogPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize = _NSLogPageSizePtr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize =
      _NSRoundUpToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize =
      _NSRoundDownToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages(
    int bytes,
  ) {
    return _NSAllocateMemoryPages(
      bytes,
    );
  }

  late final _NSAllocateMemoryPagesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages = _NSAllocateMemoryPagesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages = _NSDeallocateMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages = _NSCopyMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable() {
    return _NSRealMemoryAvailable();
  }

  late final _NSRealMemoryAvailablePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable =
      _NSRealMemoryAvailablePtr.asFunction<int Function()>();

  ffi.Pointer<ObjCSel> _registerName1(String name) {
    final cstr = name.toNativeUtf8();
    final sel = _sel_registerName(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return sel;
  }

  ffi.Pointer<ObjCSel> _sel_registerName(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return __sel_registerName(
      str,
    );
  }

  late final __sel_registerNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('sel_registerName');
  late final __sel_registerName = __sel_registerNamePtr
      .asFunction<ffi.Pointer<ObjCSel> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<ObjCObject> _getClass1(String name) {
    final cstr = name.toNativeUtf8();
    final clazz = _objc_getClass(cstr.cast());
    pkg_ffi.calloc.free(cstr);
    return clazz;
  }

  ffi.Pointer<ObjCObject> _objc_getClass(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return __objc_getClass(
      str,
    );
  }

  late final __objc_getClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('objc_getClass');
  late final __objc_getClass = __objc_getClassPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<pkg_ffi.Char>)>();

  late final ffi.Pointer<ObjCObject> _class_NSObject1 = _getClass1("NSObject");
  late final ffi.Pointer<ObjCSel> _sel_load1 = _registerName1("load");
  void _objc_msgSend_0(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_0(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_0 = __objc_msgSend_0Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_initialize1 =
      _registerName1("initialize");
  late final ffi.Pointer<ObjCSel> _sel_init1 = _registerName1("init");
  instancetype _objc_msgSend_1(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_1(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_1Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_1 = __objc_msgSend_1Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_new1 = _registerName1("new");
  late final ffi.Pointer<ObjCSel> _sel_allocWithZone_1 =
      _registerName1("allocWithZone:");
  instancetype _objc_msgSend_2(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_NSZone> zone,
  ) {
    return __objc_msgSend_2(
      obj,
      sel,
      zone,
    );
  }

  late final __objc_msgSend_2Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_NSZone>)>>('objc_msgSend');
  late final __objc_msgSend_2 = __objc_msgSend_2Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_NSZone>)>();

  late final ffi.Pointer<ObjCSel> _sel_alloc1 = _registerName1("alloc");
  late final ffi.Pointer<ObjCSel> _sel_dealloc1 = _registerName1("dealloc");
  late final ffi.Pointer<ObjCSel> _sel_finalize1 = _registerName1("finalize");
  late final ffi.Pointer<ObjCSel> _sel_copy1 = _registerName1("copy");
  late final ffi.Pointer<ObjCSel> _sel_mutableCopy1 =
      _registerName1("mutableCopy");
  late final ffi.Pointer<ObjCSel> _sel_copyWithZone_1 =
      _registerName1("copyWithZone:");
  late final ffi.Pointer<ObjCSel> _sel_mutableCopyWithZone_1 =
      _registerName1("mutableCopyWithZone:");
  late final ffi.Pointer<ObjCSel> _sel_instancesRespondToSelector_1 =
      _registerName1("instancesRespondToSelector:");
  bool _objc_msgSend_3(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_3(
          obj,
          sel,
          aSelector,
        ) !=
        0;
  }

  late final __objc_msgSend_3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_3 = __objc_msgSend_3Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_conformsToProtocol_1 =
      _registerName1("conformsToProtocol:");
  bool _objc_msgSend_4(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> protocol,
  ) {
    return __objc_msgSend_4(
          obj,
          sel,
          protocol,
        ) !=
        0;
  }

  late final __objc_msgSend_4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_4 = __objc_msgSend_4Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_methodForSelector_1 =
      _registerName1("methodForSelector:");
  IMP _objc_msgSend_5(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_5(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_5Ptr = _lookup<
      ffi.NativeFunction<
          IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_5 = __objc_msgSend_5Ptr.asFunction<
      IMP Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_instanceMethodForSelector_1 =
      _registerName1("instanceMethodForSelector:");
  late final ffi.Pointer<ObjCSel> _sel_doesNotRecognizeSelector_1 =
      _registerName1("doesNotRecognizeSelector:");
  void _objc_msgSend_6(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_6(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_6 = __objc_msgSend_6Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_forwardingTargetForSelector_1 =
      _registerName1("forwardingTargetForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_7(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_7(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_7 = __objc_msgSend_7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_forwardInvocation_1 =
      _registerName1("forwardInvocation:");
  void _objc_msgSend_8(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anInvocation,
  ) {
    return __objc_msgSend_8(
      obj,
      sel,
      anInvocation,
    );
  }

  late final __objc_msgSend_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_8 = __objc_msgSend_8Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSMethodSignature1 =
      _getClass1("NSMethodSignature");
  late final ffi.Pointer<ObjCSel> _sel_methodSignatureForSelector_1 =
      _registerName1("methodSignatureForSelector:");
  ffi.Pointer<ObjCObject> _objc_msgSend_9(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return __objc_msgSend_9(
      obj,
      sel,
      aSelector,
    );
  }

  late final __objc_msgSend_9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_9 = __objc_msgSend_9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_instanceMethodSignatureForSelector_1 =
      _registerName1("instanceMethodSignatureForSelector:");
  late final ffi.Pointer<ObjCSel> _sel_allowsWeakReference1 =
      _registerName1("allowsWeakReference");
  bool _objc_msgSend_10(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_10(
          obj,
          sel,
        ) !=
        0;
  }

  late final __objc_msgSend_10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_10 = __objc_msgSend_10Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_retainWeakReference1 =
      _registerName1("retainWeakReference");
  late final ffi.Pointer<ObjCSel> _sel_isSubclassOfClass_1 =
      _registerName1("isSubclassOfClass:");
  late final ffi.Pointer<ObjCSel> _sel_resolveClassMethod_1 =
      _registerName1("resolveClassMethod:");
  late final ffi.Pointer<ObjCSel> _sel_resolveInstanceMethod_1 =
      _registerName1("resolveInstanceMethod:");
  late final ffi.Pointer<ObjCSel> _sel_hash1 = _registerName1("hash");
  int _objc_msgSend_11(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_11(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_11Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_11 = __objc_msgSend_11Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_superclass1 =
      _registerName1("superclass");
  late final ffi.Pointer<ObjCSel> _sel_class1 = _registerName1("class");
  late final ffi.Pointer<ObjCObject> _class_NSString1 = _getClass1("NSString");
  late final ffi.Pointer<ObjCSel> _sel_substringFromIndex_1 =
      _registerName1("substringFromIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_12(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int from,
  ) {
    return __objc_msgSend_12(
      obj,
      sel,
      from,
    );
  }

  late final __objc_msgSend_12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_12 = __objc_msgSend_12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_substringToIndex_1 =
      _registerName1("substringToIndex:");
  late final ffi.Pointer<ObjCSel> _sel_substringWithRange_1 =
      _registerName1("substringWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_13(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_13(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_13Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_13 = __objc_msgSend_13Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_getCharacters_range_1 =
      _registerName1("getCharacters:range:");
  void _objc_msgSend_14(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> buffer,
    NSRange range,
  ) {
    return __objc_msgSend_14(
      obj,
      sel,
      buffer,
      range,
    );
  }

  late final __objc_msgSend_14Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_14 = __objc_msgSend_14Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_compare_1 = _registerName1("compare:");
  int _objc_msgSend_15(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
  ) {
    return __objc_msgSend_15(
      obj,
      sel,
      string,
    );
  }

  late final __objc_msgSend_15Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_15 = __objc_msgSend_15Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_compare_options_1 =
      _registerName1("compare:options:");
  int _objc_msgSend_16(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
  ) {
    return __objc_msgSend_16(
      obj,
      sel,
      string,
      mask,
    );
  }

  late final __objc_msgSend_16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_16 = __objc_msgSend_16Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_compare_options_range_1 =
      _registerName1("compare:options:range:");
  int _objc_msgSend_17(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    NSRange rangeOfReceiverToCompare,
  ) {
    return __objc_msgSend_17(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
    );
  }

  late final __objc_msgSend_17Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_17 = __objc_msgSend_17Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_compare_options_range_locale_1 =
      _registerName1("compare:options:range:locale:");
  int _objc_msgSend_18(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> string,
    int mask,
    NSRange rangeOfReceiverToCompare,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_18(
      obj,
      sel,
      string,
      mask,
      rangeOfReceiverToCompare,
      locale,
    );
  }

  late final __objc_msgSend_18Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_18 = __objc_msgSend_18Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_caseInsensitiveCompare_1 =
      _registerName1("caseInsensitiveCompare:");
  late final ffi.Pointer<ObjCSel> _sel_localizedCompare_1 =
      _registerName1("localizedCompare:");
  late final ffi.Pointer<ObjCSel> _sel_localizedCaseInsensitiveCompare_1 =
      _registerName1("localizedCaseInsensitiveCompare:");
  late final ffi.Pointer<ObjCSel> _sel_localizedStandardCompare_1 =
      _registerName1("localizedStandardCompare:");
  late final ffi.Pointer<ObjCSel> _sel_isEqualToString_1 =
      _registerName1("isEqualToString:");
  late final ffi.Pointer<ObjCSel> _sel_hasPrefix_1 =
      _registerName1("hasPrefix:");
  late final ffi.Pointer<ObjCSel> _sel_hasSuffix_1 =
      _registerName1("hasSuffix:");
  late final ffi.Pointer<ObjCSel> _sel_commonPrefixWithString_options_1 =
      _registerName1("commonPrefixWithString:options:");
  ffi.Pointer<ObjCObject> _objc_msgSend_19(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
    int mask,
  ) {
    return __objc_msgSend_19(
      obj,
      sel,
      str,
      mask,
    );
  }

  late final __objc_msgSend_19Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_19 = __objc_msgSend_19Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_containsString_1 =
      _registerName1("containsString:");
  late final ffi.Pointer<ObjCSel>
      _sel_localizedCaseInsensitiveContainsString_1 =
      _registerName1("localizedCaseInsensitiveContainsString:");
  late final ffi.Pointer<ObjCSel> _sel_localizedStandardContainsString_1 =
      _registerName1("localizedStandardContainsString:");
  late final ffi.Pointer<ObjCSel> _sel_localizedStandardRangeOfString_1 =
      _registerName1("localizedStandardRangeOfString:");
  NSRange _objc_msgSend_20(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> str,
  ) {
    return __objc_msgSend_20(
      obj,
      sel,
      str,
    );
  }

  late final __objc_msgSend_20Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_20 = __objc_msgSend_20Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_rangeOfString_1 =
      _registerName1("rangeOfString:");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfString_options_1 =
      _registerName1("rangeOfString:options:");
  NSRange _objc_msgSend_21(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
  ) {
    return __objc_msgSend_21(
      obj,
      sel,
      searchString,
      mask,
    );
  }

  late final __objc_msgSend_21Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_21 = __objc_msgSend_21Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_rangeOfString_options_range_1 =
      _registerName1("rangeOfString:options:range:");
  NSRange _objc_msgSend_22(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    NSRange rangeOfReceiverToSearch,
  ) {
    return __objc_msgSend_22(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
    );
  }

  late final __objc_msgSend_22Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_22 = __objc_msgSend_22Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_rangeOfString_options_range_locale_1 =
      _registerName1("rangeOfString:options:range:locale:");
  NSRange _objc_msgSend_23(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> searchString,
    int mask,
    NSRange rangeOfReceiverToSearch,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_23(
      obj,
      sel,
      searchString,
      mask,
      rangeOfReceiverToSearch,
      locale,
    );
  }

  late final __objc_msgSend_23Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_23 = __objc_msgSend_23Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_rangeOfCharacterFromSet_1 =
      _registerName1("rangeOfCharacterFromSet:");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfCharacterFromSet_options_1 =
      _registerName1("rangeOfCharacterFromSet:options:");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfCharacterFromSet_options_range_1 =
      _registerName1("rangeOfCharacterFromSet:options:range:");
  late final ffi.Pointer<ObjCSel>
      _sel_rangeOfComposedCharacterSequenceAtIndex_1 =
      _registerName1("rangeOfComposedCharacterSequenceAtIndex:");
  NSRange _objc_msgSend_24(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
  ) {
    return __objc_msgSend_24(
      obj,
      sel,
      index,
    );
  }

  late final __objc_msgSend_24Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_24 = __objc_msgSend_24Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_rangeOfComposedCharacterSequencesForRange_1 =
      _registerName1("rangeOfComposedCharacterSequencesForRange:");
  NSRange _objc_msgSend_25(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_25(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_25Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_25 = __objc_msgSend_25Ptr.asFunction<
      NSRange Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_stringByAppendingString_1 =
      _registerName1("stringByAppendingString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_26(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_26(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_26Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_26 = __objc_msgSend_26Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_stringByAppendingFormat_1 =
      _registerName1("stringByAppendingFormat:");
  late final ffi.Pointer<ObjCSel> _sel_doubleValue1 =
      _registerName1("doubleValue");
  double _objc_msgSend_27(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_27(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_27Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_27 = __objc_msgSend_27Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_floatValue1 =
      _registerName1("floatValue");
  double _objc_msgSend_28(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_28(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_28Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_28 = __objc_msgSend_28Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_intValue1 = _registerName1("intValue");
  int _objc_msgSend_29(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_29(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_29Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_29 = __objc_msgSend_29Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_integerValue1 =
      _registerName1("integerValue");
  int _objc_msgSend_30(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_30(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_30Ptr = _lookup<
      ffi.NativeFunction<
          NSInteger Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_30 = __objc_msgSend_30Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_longLongValue1 =
      _registerName1("longLongValue");
  int _objc_msgSend_31(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_31(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_31Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.LongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_31 = __objc_msgSend_31Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_boolValue1 = _registerName1("boolValue");
  late final ffi.Pointer<ObjCSel> _sel_uppercaseString1 =
      _registerName1("uppercaseString");
  late final ffi.Pointer<ObjCSel> _sel_lowercaseString1 =
      _registerName1("lowercaseString");
  late final ffi.Pointer<ObjCSel> _sel_capitalizedString1 =
      _registerName1("capitalizedString");
  late final ffi.Pointer<ObjCSel> _sel_localizedUppercaseString1 =
      _registerName1("localizedUppercaseString");
  late final ffi.Pointer<ObjCSel> _sel_localizedLowercaseString1 =
      _registerName1("localizedLowercaseString");
  late final ffi.Pointer<ObjCSel> _sel_localizedCapitalizedString1 =
      _registerName1("localizedCapitalizedString");
  late final ffi.Pointer<ObjCSel> _sel_uppercaseStringWithLocale_1 =
      _registerName1("uppercaseStringWithLocale:");
  late final ffi.Pointer<ObjCSel> _sel_lowercaseStringWithLocale_1 =
      _registerName1("lowercaseStringWithLocale:");
  late final ffi.Pointer<ObjCSel> _sel_capitalizedStringWithLocale_1 =
      _registerName1("capitalizedStringWithLocale:");
  late final ffi.Pointer<ObjCSel> _sel_getLineStart_end_contentsEnd_forRange_1 =
      _registerName1("getLineStart:end:contentsEnd:forRange:");
  void _objc_msgSend_32(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> startPtr,
    ffi.Pointer<NSUInteger> lineEndPtr,
    ffi.Pointer<NSUInteger> contentsEndPtr,
    NSRange range,
  ) {
    return __objc_msgSend_32(
      obj,
      sel,
      startPtr,
      lineEndPtr,
      contentsEndPtr,
      range,
    );
  }

  late final __objc_msgSend_32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_32 = __objc_msgSend_32Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>,
          ffi.Pointer<NSUInteger>,
          ffi.Pointer<NSUInteger>,
          NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_lineRangeForRange_1 =
      _registerName1("lineRangeForRange:");
  late final ffi.Pointer<ObjCSel>
      _sel_getParagraphStart_end_contentsEnd_forRange_1 =
      _registerName1("getParagraphStart:end:contentsEnd:forRange:");
  late final ffi.Pointer<ObjCSel> _sel_paragraphRangeForRange_1 =
      _registerName1("paragraphRangeForRange:");
  ffi.Pointer<_ObjCBlockDesc> _newBlockDesc1() {
    final d =
        pkg_ffi.calloc.allocate<_ObjCBlockDesc>(ffi.sizeOf<_ObjCBlockDesc>());
    d.ref.size = ffi.sizeOf<_ObjCBlock>();
    return d;
  }

  late final ffi.Pointer<_ObjCBlockDesc> _objc_block_desc1 = _newBlockDesc1();
  ffi.Pointer<_ObjCBlock> _newBlock1(
      ffi.Pointer<ffi.Void> invoke, ffi.Pointer<ffi.Void> target) {
    final b = pkg_ffi.calloc.allocate<_ObjCBlock>(ffi.sizeOf<_ObjCBlock>());
    b.ref.invoke = invoke;
    b.ref.target = target;
    b.ref.descriptor = _objc_block_desc1;
    return b;
  }

  late final ffi.Pointer<ObjCSel>
      _sel_enumerateSubstringsInRange_options_usingBlock_1 =
      _registerName1("enumerateSubstringsInRange:options:usingBlock:");
  void _objc_msgSend_33(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_33(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_33Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_33 = __objc_msgSend_33Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_enumerateLinesUsingBlock_1 =
      _registerName1("enumerateLinesUsingBlock:");
  void _objc_msgSend_34(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_34(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_34Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_34 = __objc_msgSend_34Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_UTF8String1 =
      _registerName1("UTF8String");
  ffi.Pointer<pkg_ffi.Char> _objc_msgSend_35(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_35(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_35Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_35 = __objc_msgSend_35Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_fastestEncoding1 =
      _registerName1("fastestEncoding");
  late final ffi.Pointer<ObjCSel> _sel_smallestEncoding1 =
      _registerName1("smallestEncoding");
  late final ffi.Pointer<ObjCObject> _class_NSData1 = _getClass1("NSData");
  late final ffi.Pointer<ObjCSel> _sel_length1 = _registerName1("length");
  late final ffi.Pointer<ObjCSel> _sel_bytes1 = _registerName1("bytes");
  ffi.Pointer<ffi.Void> _objc_msgSend_36(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_36(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_36Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_36 = __objc_msgSend_36Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_description1 =
      _registerName1("description");
  late final ffi.Pointer<ObjCSel> _sel_getBytes_length_1 =
      _registerName1("getBytes:length:");
  void _objc_msgSend_37(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
    int length,
  ) {
    return __objc_msgSend_37(
      obj,
      sel,
      buffer,
      length,
    );
  }

  late final __objc_msgSend_37Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_37 = __objc_msgSend_37Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_getBytes_range_1 =
      _registerName1("getBytes:range:");
  void _objc_msgSend_38(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
    NSRange range,
  ) {
    return __objc_msgSend_38(
      obj,
      sel,
      buffer,
      range,
    );
  }

  late final __objc_msgSend_38Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_38 = __objc_msgSend_38Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_isEqualToData_1 =
      _registerName1("isEqualToData:");
  late final ffi.Pointer<ObjCSel> _sel_subdataWithRange_1 =
      _registerName1("subdataWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_39(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_39(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_39Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_39 = __objc_msgSend_39Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_writeToFile_atomically_1 =
      _registerName1("writeToFile:atomically:");
  bool _objc_msgSend_40(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool useAuxiliaryFile,
  ) {
    return __objc_msgSend_40(
          obj,
          sel,
          path,
          useAuxiliaryFile ? 1 : 0,
        ) !=
        0;
  }

  late final __objc_msgSend_40Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_40 = __objc_msgSend_40Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_writeToURL_atomically_1 =
      _registerName1("writeToURL:atomically:");
  late final ffi.Pointer<ObjCSel> _sel_writeToFile_options_error_1 =
      _registerName1("writeToFile:options:error:");
  bool _objc_msgSend_41(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    int writeOptionsMask,
    ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_41(
          obj,
          sel,
          path,
          writeOptionsMask,
          errorPtr,
        ) !=
        0;
  }

  late final __objc_msgSend_41Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_41 = __objc_msgSend_41Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_writeToURL_options_error_1 =
      _registerName1("writeToURL:options:error:");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfData_options_range_1 =
      _registerName1("rangeOfData:options:range:");
  NSRange _objc_msgSend_42(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> dataToFind,
    int mask,
    NSRange searchRange,
  ) {
    return __objc_msgSend_42(
      obj,
      sel,
      dataToFind,
      mask,
      searchRange,
    );
  }

  late final __objc_msgSend_42Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_42 = __objc_msgSend_42Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_enumerateByteRangesUsingBlock_1 =
      _registerName1("enumerateByteRangesUsingBlock:");
  void _objc_msgSend_43(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_43(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_43Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_43 = __objc_msgSend_43Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_data1 = _registerName1("data");
  late final ffi.Pointer<ObjCSel> _sel_dataWithBytes_length_1 =
      _registerName1("dataWithBytes:length:");
  instancetype _objc_msgSend_44(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
  ) {
    return __objc_msgSend_44(
      obj,
      sel,
      bytes,
      length,
    );
  }

  late final __objc_msgSend_44Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_44 = __objc_msgSend_44Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_dataWithBytesNoCopy_length_1 =
      _registerName1("dataWithBytesNoCopy:length:");
  late final ffi.Pointer<ObjCSel>
      _sel_dataWithBytesNoCopy_length_freeWhenDone_1 =
      _registerName1("dataWithBytesNoCopy:length:freeWhenDone:");
  instancetype _objc_msgSend_45(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    bool b,
  ) {
    return __objc_msgSend_45(
      obj,
      sel,
      bytes,
      length,
      b ? 1 : 0,
    );
  }

  late final __objc_msgSend_45Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>, NSUInteger, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_45 = __objc_msgSend_45Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int)>();

  late final ffi.Pointer<ObjCSel> _sel_dataWithContentsOfFile_options_error_1 =
      _registerName1("dataWithContentsOfFile:options:error:");
  instancetype _objc_msgSend_46(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    int readOptionsMask,
    ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr,
  ) {
    return __objc_msgSend_46(
      obj,
      sel,
      path,
      readOptionsMask,
      errorPtr,
    );
  }

  late final __objc_msgSend_46Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_46 = __objc_msgSend_46Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_dataWithContentsOfURL_options_error_1 =
      _registerName1("dataWithContentsOfURL:options:error:");
  late final ffi.Pointer<ObjCSel> _sel_dataWithContentsOfFile_1 =
      _registerName1("dataWithContentsOfFile:");
  instancetype _objc_msgSend_47(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_47(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_47Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_47 = __objc_msgSend_47Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_dataWithContentsOfURL_1 =
      _registerName1("dataWithContentsOfURL:");
  late final ffi.Pointer<ObjCSel> _sel_initWithBytes_length_1 =
      _registerName1("initWithBytes:length:");
  late final ffi.Pointer<ObjCSel> _sel_initWithBytesNoCopy_length_1 =
      _registerName1("initWithBytesNoCopy:length:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithBytesNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithBytesNoCopy:length:freeWhenDone:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithBytesNoCopy_length_deallocator_1 =
      _registerName1("initWithBytesNoCopy:length:deallocator:");
  instancetype _objc_msgSend_48(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int length,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_48(
      obj,
      sel,
      bytes,
      length,
      deallocator,
    );
  }

  late final __objc_msgSend_48Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_48 = __objc_msgSend_48Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithContentsOfFile_options_error_1 =
      _registerName1("initWithContentsOfFile:options:error:");
  late final ffi.Pointer<ObjCSel> _sel_initWithContentsOfURL_options_error_1 =
      _registerName1("initWithContentsOfURL:options:error:");
  late final ffi.Pointer<ObjCSel> _sel_initWithContentsOfFile_1 =
      _registerName1("initWithContentsOfFile:");
  late final ffi.Pointer<ObjCSel> _sel_initWithContentsOfURL_1 =
      _registerName1("initWithContentsOfURL:");
  late final ffi.Pointer<ObjCSel> _sel_initWithData_1 =
      _registerName1("initWithData:");
  late final ffi.Pointer<ObjCSel> _sel_dataWithData_1 =
      _registerName1("dataWithData:");
  late final ffi.Pointer<ObjCSel> _sel_initWithBase64EncodedString_options_1 =
      _registerName1("initWithBase64EncodedString:options:");
  instancetype _objc_msgSend_49(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> base64String,
    int options,
  ) {
    return __objc_msgSend_49(
      obj,
      sel,
      base64String,
      options,
    );
  }

  late final __objc_msgSend_49Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_49 = __objc_msgSend_49Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_base64EncodedStringWithOptions_1 =
      _registerName1("base64EncodedStringWithOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_50(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_50(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_50Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_50 = __objc_msgSend_50Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithBase64EncodedData_options_1 =
      _registerName1("initWithBase64EncodedData:options:");
  late final ffi.Pointer<ObjCSel> _sel_base64EncodedDataWithOptions_1 =
      _registerName1("base64EncodedDataWithOptions:");
  ffi.Pointer<ObjCObject> _objc_msgSend_51(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
  ) {
    return __objc_msgSend_51(
      obj,
      sel,
      options,
    );
  }

  late final __objc_msgSend_51Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_51 = __objc_msgSend_51Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_decompressedDataUsingAlgorithm_error_1 =
      _registerName1("decompressedDataUsingAlgorithm:error:");
  instancetype _objc_msgSend_52(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int algorithm,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_52(
      obj,
      sel,
      algorithm,
      error,
    );
  }

  late final __objc_msgSend_52Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_52 = __objc_msgSend_52Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_compressedDataUsingAlgorithm_error_1 =
      _registerName1("compressedDataUsingAlgorithm:error:");
  late final ffi.Pointer<ObjCSel> _sel_getBytes_1 = _registerName1("getBytes:");
  void _objc_msgSend_53(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
  ) {
    return __objc_msgSend_53(
      obj,
      sel,
      buffer,
    );
  }

  late final __objc_msgSend_53Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_53 = __objc_msgSend_53Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ObjCSel> _sel_dataWithContentsOfMappedFile_1 =
      _registerName1("dataWithContentsOfMappedFile:");
  late final ffi.Pointer<ObjCSel> _sel_initWithContentsOfMappedFile_1 =
      _registerName1("initWithContentsOfMappedFile:");
  late final ffi.Pointer<ObjCSel> _sel_initWithBase64Encoding_1 =
      _registerName1("initWithBase64Encoding:");
  late final ffi.Pointer<ObjCSel> _sel_base64Encoding1 =
      _registerName1("base64Encoding");
  ffi.Pointer<ObjCObject> _objc_msgSend_54(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_54(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_54Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_54 = __objc_msgSend_54Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_dataUsingEncoding_allowLossyConversion_1 =
      _registerName1("dataUsingEncoding:allowLossyConversion:");
  ffi.Pointer<ObjCObject> _objc_msgSend_55(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
    bool lossy,
  ) {
    return __objc_msgSend_55(
      obj,
      sel,
      encoding,
      lossy ? 1 : 0,
    );
  }

  late final __objc_msgSend_55Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringEncoding,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_55 = __objc_msgSend_55Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final ffi.Pointer<ObjCSel> _sel_dataUsingEncoding_1 =
      _registerName1("dataUsingEncoding:");
  ffi.Pointer<ObjCObject> _objc_msgSend_56(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_56(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_56Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_56 = __objc_msgSend_56Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_canBeConvertedToEncoding_1 =
      _registerName1("canBeConvertedToEncoding:");
  bool _objc_msgSend_57(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_57(
          obj,
          sel,
          encoding,
        ) !=
        0;
  }

  late final __objc_msgSend_57Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_57 = __objc_msgSend_57Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_cStringUsingEncoding_1 =
      _registerName1("cStringUsingEncoding:");
  void _objc_msgSend_58(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int encoding,
  ) {
    return __objc_msgSend_58(
      obj,
      sel,
      encoding,
    );
  }

  late final __objc_msgSend_58Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_58 = __objc_msgSend_58Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_getCString_maxLength_encoding_1 =
      _registerName1("getCString:maxLength:encoding:");
  bool _objc_msgSend_59(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int maxBufferCount,
    int encoding,
  ) {
    return __objc_msgSend_59(
          obj,
          sel,
          buffer,
          maxBufferCount,
          encoding,
        ) !=
        0;
  }

  late final __objc_msgSend_59Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              NSUInteger,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_59 = __objc_msgSend_59Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1 =
      _registerName1(
          "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:");
  bool _objc_msgSend_60(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> buffer,
    int maxBufferCount,
    ffi.Pointer<NSUInteger> usedBufferCount,
    int encoding,
    int options,
    NSRange range,
    NSRangePointer leftover,
  ) {
    return __objc_msgSend_60(
          obj,
          sel,
          buffer,
          maxBufferCount,
          usedBufferCount,
          encoding,
          options,
          range,
          leftover,
        ) !=
        0;
  }

  late final __objc_msgSend_60Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              ffi.Pointer<NSUInteger>,
              NSStringEncoding,
              ffi.Int32,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_60 = __objc_msgSend_60Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<NSUInteger>,
          int,
          int,
          NSRange,
          NSRangePointer)>();

  late final ffi.Pointer<ObjCSel> _sel_maximumLengthOfBytesUsingEncoding_1 =
      _registerName1("maximumLengthOfBytesUsingEncoding:");
  int _objc_msgSend_61(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int enc,
  ) {
    return __objc_msgSend_61(
      obj,
      sel,
      enc,
    );
  }

  late final __objc_msgSend_61Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_61 = __objc_msgSend_61Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_lengthOfBytesUsingEncoding_1 =
      _registerName1("lengthOfBytesUsingEncoding:");
  late final ffi.Pointer<ObjCSel> _sel_availableStringEncodings1 =
      _registerName1("availableStringEncodings");
  ffi.Pointer<NSStringEncoding> _objc_msgSend_62(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_62(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_62Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSStringEncoding> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_62 = __objc_msgSend_62Ptr.asFunction<
      ffi.Pointer<NSStringEncoding> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_localizedNameOfStringEncoding_1 =
      _registerName1("localizedNameOfStringEncoding:");
  late final ffi.Pointer<ObjCSel> _sel_defaultCStringEncoding1 =
      _registerName1("defaultCStringEncoding");
  late final ffi.Pointer<ObjCSel> _sel_decomposedStringWithCanonicalMapping1 =
      _registerName1("decomposedStringWithCanonicalMapping");
  late final ffi.Pointer<ObjCSel> _sel_precomposedStringWithCanonicalMapping1 =
      _registerName1("precomposedStringWithCanonicalMapping");
  late final ffi.Pointer<ObjCSel>
      _sel_decomposedStringWithCompatibilityMapping1 =
      _registerName1("decomposedStringWithCompatibilityMapping");
  late final ffi.Pointer<ObjCSel>
      _sel_precomposedStringWithCompatibilityMapping1 =
      _registerName1("precomposedStringWithCompatibilityMapping");
  late final ffi.Pointer<ObjCSel> _sel_stringByTrimmingCharactersInSet_1 =
      _registerName1("stringByTrimmingCharactersInSet:");
  late final ffi.Pointer<ObjCSel>
      _sel_stringByPaddingToLength_withString_startingAtIndex_1 =
      _registerName1("stringByPaddingToLength:withString:startingAtIndex:");
  ffi.Pointer<ObjCObject> _objc_msgSend_63(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int newLength,
    ffi.Pointer<ObjCObject> padString,
    int padIndex,
  ) {
    return __objc_msgSend_63(
      obj,
      sel,
      newLength,
      padString,
      padIndex,
    );
  }

  late final __objc_msgSend_63Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              ffi.Pointer<ObjCObject>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_63 = __objc_msgSend_63Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_stringByFoldingWithOptions_locale_1 =
      _registerName1("stringByFoldingWithOptions:locale:");
  ffi.Pointer<ObjCObject> _objc_msgSend_64(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_64(
      obj,
      sel,
      options,
      locale,
    );
  }

  late final __objc_msgSend_64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_64 = __objc_msgSend_64Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_stringByReplacingOccurrencesOfString_withString_options_range_1 =
      _registerName1(
          "stringByReplacingOccurrencesOfString:withString:options:range:");
  ffi.Pointer<ObjCObject> _objc_msgSend_65(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    NSRange searchRange,
  ) {
    return __objc_msgSend_65(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_65Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_65 = __objc_msgSend_65Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          NSRange)>();

  late final ffi.Pointer<ObjCSel>
      _sel_stringByReplacingOccurrencesOfString_withString_1 =
      _registerName1("stringByReplacingOccurrencesOfString:withString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_66(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
  ) {
    return __objc_msgSend_66(
      obj,
      sel,
      target,
      replacement,
    );
  }

  late final __objc_msgSend_66Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_66 = __objc_msgSend_66Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_stringByReplacingCharactersInRange_withString_1 =
      _registerName1("stringByReplacingCharactersInRange:withString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_67(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> replacement,
  ) {
    return __objc_msgSend_67(
      obj,
      sel,
      range,
      replacement,
    );
  }

  late final __objc_msgSend_67Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_67 = __objc_msgSend_67Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSRange, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_stringByApplyingTransform_reverse_1 =
      _registerName1("stringByApplyingTransform:reverse:");
  ffi.Pointer<ObjCObject> _objc_msgSend_68(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSStringTransform transform,
    bool reverse,
  ) {
    return __objc_msgSend_68(
      obj,
      sel,
      transform,
      reverse ? 1 : 0,
    );
  }

  late final __objc_msgSend_68Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringTransform,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_68 = __objc_msgSend_68Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSStringTransform, int)>();

  late final ffi.Pointer<ObjCSel> _sel_writeToURL_atomically_encoding_error_1 =
      _registerName1("writeToURL:atomically:encoding:error:");
  bool _objc_msgSend_69(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    bool useAuxiliaryFile,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_69(
          obj,
          sel,
          url,
          useAuxiliaryFile ? 1 : 0,
          enc,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_69Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Uint8,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_69 = __objc_msgSend_69Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_writeToFile_atomically_encoding_error_1 =
      _registerName1("writeToFile:atomically:encoding:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithCharactersNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCharactersNoCopy:length:freeWhenDone:");
  instancetype _objc_msgSend_70(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> characters,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_70(
      obj,
      sel,
      characters,
      length,
      freeBuffer ? 1 : 0,
    );
  }

  late final __objc_msgSend_70Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSUInteger, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_70 = __objc_msgSend_70Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initWithCharactersNoCopy_length_deallocator_1 =
      _registerName1("initWithCharactersNoCopy:length:deallocator:");
  instancetype _objc_msgSend_71(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> chars,
    int len,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_71(
      obj,
      sel,
      chars,
      len,
      deallocator,
    );
  }

  late final __objc_msgSend_71Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>,
              NSUInteger,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_71 = __objc_msgSend_71Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithCharacters_length_1 =
      _registerName1("initWithCharacters:length:");
  instancetype _objc_msgSend_72(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> characters,
    int length,
  ) {
    return __objc_msgSend_72(
      obj,
      sel,
      characters,
      length,
    );
  }

  late final __objc_msgSend_72Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_72 = __objc_msgSend_72Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithUTF8String_1 =
      _registerName1("initWithUTF8String:");
  instancetype _objc_msgSend_73(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> nullTerminatedCString,
  ) {
    return __objc_msgSend_73(
      obj,
      sel,
      nullTerminatedCString,
    );
  }

  late final __objc_msgSend_73Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_73 = __objc_msgSend_73Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithString_1 =
      _registerName1("initWithString:");
  late final ffi.Pointer<ObjCSel> _sel_initWithFormat_1 =
      _registerName1("initWithFormat:");
  late final ffi.Pointer<ObjCSel> _sel_initWithFormat_arguments_1 =
      _registerName1("initWithFormat:arguments:");
  instancetype _objc_msgSend_74(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    va_list argList,
  ) {
    return __objc_msgSend_74(
      obj,
      sel,
      format,
      argList,
    );
  }

  late final __objc_msgSend_74Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, va_list)>>('objc_msgSend');
  late final __objc_msgSend_74 = __objc_msgSend_74Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, va_list)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithFormat_locale_1 =
      _registerName1("initWithFormat:locale:");
  instancetype _objc_msgSend_75(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
  ) {
    return __objc_msgSend_75(
      obj,
      sel,
      format,
      locale,
    );
  }

  late final __objc_msgSend_75Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_75 = __objc_msgSend_75Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithFormat_locale_arguments_1 =
      _registerName1("initWithFormat:locale:arguments:");
  instancetype _objc_msgSend_76(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> format,
    ffi.Pointer<ObjCObject> locale,
    va_list argList,
  ) {
    return __objc_msgSend_76(
      obj,
      sel,
      format,
      locale,
      argList,
    );
  }

  late final __objc_msgSend_76Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              va_list)>>('objc_msgSend');
  late final __objc_msgSend_76 = __objc_msgSend_76Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, va_list)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithData_encoding_1 =
      _registerName1("initWithData:encoding:");
  instancetype _objc_msgSend_77(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    int encoding,
  ) {
    return __objc_msgSend_77(
      obj,
      sel,
      data,
      encoding,
    );
  }

  late final __objc_msgSend_77Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_77 = __objc_msgSend_77Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithBytes_length_encoding_1 =
      _registerName1("initWithBytes:length:encoding:");
  instancetype _objc_msgSend_78(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
  ) {
    return __objc_msgSend_78(
      obj,
      sel,
      bytes,
      len,
      encoding,
    );
  }

  late final __objc_msgSend_78Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_78 = __objc_msgSend_78Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:freeWhenDone:");
  instancetype _objc_msgSend_79(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    bool freeBuffer,
  ) {
    return __objc_msgSend_79(
      obj,
      sel,
      bytes,
      len,
      encoding,
      freeBuffer ? 1 : 0,
    );
  }

  late final __objc_msgSend_79Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_79 = __objc_msgSend_79Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initWithBytesNoCopy_length_encoding_deallocator_1 =
      _registerName1("initWithBytesNoCopy:length:encoding:deallocator:");
  instancetype _objc_msgSend_80(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> bytes,
    int len,
    int encoding,
    ffi.Pointer<_ObjCBlock> deallocator,
  ) {
    return __objc_msgSend_80(
      obj,
      sel,
      bytes,
      len,
      encoding,
      deallocator,
    );
  }

  late final __objc_msgSend_80Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              NSUInteger,
              NSStringEncoding,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_80 = __objc_msgSend_80Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_string1 = _registerName1("string");
  late final ffi.Pointer<ObjCSel> _sel_stringWithString_1 =
      _registerName1("stringWithString:");
  late final ffi.Pointer<ObjCSel> _sel_stringWithCharacters_length_1 =
      _registerName1("stringWithCharacters:length:");
  late final ffi.Pointer<ObjCSel> _sel_stringWithUTF8String_1 =
      _registerName1("stringWithUTF8String:");
  late final ffi.Pointer<ObjCSel> _sel_stringWithFormat_1 =
      _registerName1("stringWithFormat:");
  late final ffi.Pointer<ObjCSel> _sel_localizedStringWithFormat_1 =
      _registerName1("localizedStringWithFormat:");
  late final ffi.Pointer<ObjCSel> _sel_initWithCString_encoding_1 =
      _registerName1("initWithCString:encoding:");
  instancetype _objc_msgSend_81(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> nullTerminatedCString,
    int encoding,
  ) {
    return __objc_msgSend_81(
      obj,
      sel,
      nullTerminatedCString,
      encoding,
    );
  }

  late final __objc_msgSend_81Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>, NSStringEncoding)>>('objc_msgSend');
  late final __objc_msgSend_81 = __objc_msgSend_81Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_stringWithCString_encoding_1 =
      _registerName1("stringWithCString:encoding:");
  late final ffi.Pointer<ObjCSel> _sel_initWithContentsOfURL_encoding_error_1 =
      _registerName1("initWithContentsOfURL:encoding:error:");
  instancetype _objc_msgSend_82(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_82(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_82Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSStringEncoding,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_82 = __objc_msgSend_82Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithContentsOfFile_encoding_error_1 =
      _registerName1("initWithContentsOfFile:encoding:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_stringWithContentsOfURL_encoding_error_1 =
      _registerName1("stringWithContentsOfURL:encoding:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_stringWithContentsOfFile_encoding_error_1 =
      _registerName1("stringWithContentsOfFile:encoding:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("initWithContentsOfURL:usedEncoding:error:");
  instancetype _objc_msgSend_83(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<NSStringEncoding> enc,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_83(
      obj,
      sel,
      url,
      enc,
      error,
    );
  }

  late final __objc_msgSend_83Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSStringEncoding>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_83 = __objc_msgSend_83Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<NSStringEncoding>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("initWithContentsOfFile:usedEncoding:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_stringWithContentsOfURL_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfURL:usedEncoding:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_stringWithContentsOfFile_usedEncoding_error_1 =
      _registerName1("stringWithContentsOfFile:usedEncoding:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1 =
      _registerName1(
          "stringEncodingForData:encodingOptions:convertedString:usedLossyConversion:");
  int _objc_msgSend_84(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    ffi.Pointer<ObjCObject> opts,
    ffi.Pointer<ffi.Pointer<ObjCObject>> string,
    ffi.Pointer<ffi.Uint8> usedLossyConversion,
  ) {
    return __objc_msgSend_84(
      obj,
      sel,
      data,
      opts,
      string,
      usedLossyConversion,
    );
  }

  late final __objc_msgSend_84Ptr = _lookup<
      ffi.NativeFunction<
          NSStringEncoding Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Uint8>)>>('objc_msgSend');
  late final __objc_msgSend_84 = __objc_msgSend_84Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Uint8>)>();

  late final ffi.Pointer<ObjCSel> _sel_propertyList1 =
      _registerName1("propertyList");
  late final ffi.Pointer<ObjCObject> _class_NSDictionary1 =
      _getClass1("NSDictionary");
  late final ffi.Pointer<ObjCSel> _sel_count1 = _registerName1("count");
  late final ffi.Pointer<ObjCSel> _sel_objectForKey_1 =
      _registerName1("objectForKey:");
  late final ffi.Pointer<ObjCSel> _sel_initWithObjects_forKeys_count_1 =
      _registerName1("initWithObjects:forKeys:count:");
  instancetype _objc_msgSend_85(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int cnt,
  ) {
    return __objc_msgSend_85(
      obj,
      sel,
      objects,
      keys,
      cnt,
    );
  }

  late final __objc_msgSend_85Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_85 = __objc_msgSend_85Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithCoder_1 =
      _registerName1("initWithCoder:");
  late final ffi.Pointer<ObjCSel> _sel_allKeys1 = _registerName1("allKeys");
  late final ffi.Pointer<ObjCSel> _sel_allValues1 = _registerName1("allValues");
  late final ffi.Pointer<ObjCSel> _sel_descriptionInStringsFileFormat1 =
      _registerName1("descriptionInStringsFileFormat");
  late final ffi.Pointer<ObjCSel> _sel_descriptionWithLocale_1 =
      _registerName1("descriptionWithLocale:");
  late final ffi.Pointer<ObjCSel> _sel_descriptionWithLocale_indent_1 =
      _registerName1("descriptionWithLocale:indent:");
  ffi.Pointer<ObjCObject> _objc_msgSend_86(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> locale,
    int level,
  ) {
    return __objc_msgSend_86(
      obj,
      sel,
      locale,
      level,
    );
  }

  late final __objc_msgSend_86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_86 = __objc_msgSend_86Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_isEqualToDictionary_1 =
      _registerName1("isEqualToDictionary:");
  late final ffi.Pointer<ObjCSel> _sel_writeToURL_error_1 =
      _registerName1("writeToURL:error:");
  bool _objc_msgSend_87(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_87(
          obj,
          sel,
          url,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_87 = __objc_msgSend_87Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_getObjects_andKeys_count_1 =
      _registerName1("getObjects:andKeys:count:");
  void _objc_msgSend_88(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
    int count,
  ) {
    return __objc_msgSend_88(
      obj,
      sel,
      objects,
      keys,
      count,
    );
  }

  late final __objc_msgSend_88Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_88 = __objc_msgSend_88Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final ffi.Pointer<ObjCSel> _sel_objectForKeyedSubscript_1 =
      _registerName1("objectForKeyedSubscript:");
  late final ffi.Pointer<ObjCSel> _sel_enumerateKeysAndObjectsUsingBlock_1 =
      _registerName1("enumerateKeysAndObjectsUsingBlock:");
  void _objc_msgSend_89(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_89(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_89Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_89 = __objc_msgSend_89Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_enumerateKeysAndObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateKeysAndObjectsWithOptions:usingBlock:");
  void _objc_msgSend_90(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_90(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_90Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_90 = __objc_msgSend_90Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_getObjects_andKeys_1 =
      _registerName1("getObjects:andKeys:");
  void _objc_msgSend_91(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
  ) {
    return __objc_msgSend_91(
      obj,
      sel,
      objects,
      keys,
    );
  }

  late final __objc_msgSend_91Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_91 = __objc_msgSend_91Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_dictionary1 =
      _registerName1("dictionary");
  late final ffi.Pointer<ObjCSel> _sel_dictionaryWithObject_forKey_1 =
      _registerName1("dictionaryWithObject:forKey:");
  late final ffi.Pointer<ObjCSel> _sel_dictionaryWithObjects_forKeys_count_1 =
      _registerName1("dictionaryWithObjects:forKeys:count:");
  late final ffi.Pointer<ObjCSel> _sel_dictionaryWithObjectsAndKeys_1 =
      _registerName1("dictionaryWithObjectsAndKeys:");
  late final ffi.Pointer<ObjCSel> _sel_dictionaryWithDictionary_1 =
      _registerName1("dictionaryWithDictionary:");
  late final ffi.Pointer<ObjCSel> _sel_dictionaryWithObjects_forKeys_1 =
      _registerName1("dictionaryWithObjects:forKeys:");
  late final ffi.Pointer<ObjCSel> _sel_initWithObjectsAndKeys_1 =
      _registerName1("initWithObjectsAndKeys:");
  late final ffi.Pointer<ObjCSel> _sel_initWithDictionary_1 =
      _registerName1("initWithDictionary:");
  late final ffi.Pointer<ObjCSel> _sel_initWithDictionary_copyItems_1 =
      _registerName1("initWithDictionary:copyItems:");
  instancetype _objc_msgSend_92(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> otherDictionary,
    bool flag,
  ) {
    return __objc_msgSend_92(
      obj,
      sel,
      otherDictionary,
      flag ? 1 : 0,
    );
  }

  late final __objc_msgSend_92Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_92 = __objc_msgSend_92Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithObjects_forKeys_1 =
      _registerName1("initWithObjects:forKeys:");
  late final ffi.Pointer<ObjCSel> _sel_sharedKeySetForKeys_1 =
      _registerName1("sharedKeySetForKeys:");
  late final ffi.Pointer<ObjCSel>
      _sel_countByEnumeratingWithState_objects_count_1 =
      _registerName1("countByEnumeratingWithState:objects:count:");
  int _objc_msgSend_93(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSFastEnumerationState> state,
    ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
    int len,
  ) {
    return __objc_msgSend_93(
      obj,
      sel,
      state,
      buffer,
      len,
    );
  }

  late final __objc_msgSend_93Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSFastEnumerationState>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_93 = __objc_msgSend_93Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSFastEnumerationState>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          int)>();

  late final ffi.Pointer<ObjCSel> _sel_propertyListFromStringsFileFormat1 =
      _registerName1("propertyListFromStringsFileFormat");
  ffi.Pointer<ObjCObject> _objc_msgSend_94(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_94(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_94Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_94 = __objc_msgSend_94Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_cString1 = _registerName1("cString");
  late final ffi.Pointer<ObjCSel> _sel_lossyCString1 =
      _registerName1("lossyCString");
  late final ffi.Pointer<ObjCSel> _sel_cStringLength1 =
      _registerName1("cStringLength");
  late final ffi.Pointer<ObjCSel> _sel_getCString_1 =
      _registerName1("getCString:");
  void _objc_msgSend_95(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> bytes,
  ) {
    return __objc_msgSend_95(
      obj,
      sel,
      bytes,
    );
  }

  late final __objc_msgSend_95Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_95 = __objc_msgSend_95Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>)>();

  late final ffi.Pointer<ObjCSel> _sel_getCString_maxLength_1 =
      _registerName1("getCString:maxLength:");
  void _objc_msgSend_96(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> bytes,
    int maxLength,
  ) {
    return __objc_msgSend_96(
      obj,
      sel,
      bytes,
      maxLength,
    );
  }

  late final __objc_msgSend_96Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_96 = __objc_msgSend_96Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_getCString_maxLength_range_remainingRange_1 =
      _registerName1("getCString:maxLength:range:remainingRange:");
  void _objc_msgSend_97(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> bytes,
    int maxLength,
    NSRange aRange,
    NSRangePointer leftoverRange,
  ) {
    return __objc_msgSend_97(
      obj,
      sel,
      bytes,
      maxLength,
      aRange,
      leftoverRange,
    );
  }

  late final __objc_msgSend_97Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              NSUInteger,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_97 = __objc_msgSend_97Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int, NSRange, NSRangePointer)>();

  late final ffi.Pointer<ObjCSel> _sel_stringWithContentsOfFile_1 =
      _registerName1("stringWithContentsOfFile:");
  late final ffi.Pointer<ObjCSel> _sel_stringWithContentsOfURL_1 =
      _registerName1("stringWithContentsOfURL:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithCStringNoCopy_length_freeWhenDone_1 =
      _registerName1("initWithCStringNoCopy:length:freeWhenDone:");
  ffi.Pointer<ObjCObject> _objc_msgSend_98(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> bytes,
    int length,
    bool freeBuffer,
  ) {
    return __objc_msgSend_98(
      obj,
      sel,
      bytes,
      length,
      freeBuffer ? 1 : 0,
    );
  }

  late final __objc_msgSend_98Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              NSUInteger,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_98 = __objc_msgSend_98Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithCString_length_1 =
      _registerName1("initWithCString:length:");
  late final ffi.Pointer<ObjCSel> _sel_initWithCString_1 =
      _registerName1("initWithCString:");
  late final ffi.Pointer<ObjCSel> _sel_stringWithCString_length_1 =
      _registerName1("stringWithCString:length:");
  late final ffi.Pointer<ObjCSel> _sel_stringWithCString_1 =
      _registerName1("stringWithCString:");
  late final ffi.Pointer<ObjCSel> _sel_getCharacters_1 =
      _registerName1("getCharacters:");
  void _objc_msgSend_99(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<unichar> buffer,
  ) {
    return __objc_msgSend_99(
      obj,
      sel,
      buffer,
    );
  }

  late final __objc_msgSend_99Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<unichar>)>>('objc_msgSend');
  late final __objc_msgSend_99 = __objc_msgSend_99Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<unichar>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_stringByAddingPercentEncodingWithAllowedCharacters_1 =
      _registerName1("stringByAddingPercentEncodingWithAllowedCharacters:");
  late final ffi.Pointer<ObjCSel> _sel_stringByRemovingPercentEncoding1 =
      _registerName1("stringByRemovingPercentEncoding");
  late final ffi.Pointer<ObjCSel>
      _sel_stringByAddingPercentEscapesUsingEncoding_1 =
      _registerName1("stringByAddingPercentEscapesUsingEncoding:");
  late final ffi.Pointer<ObjCSel>
      _sel_stringByReplacingPercentEscapesUsingEncoding_1 =
      _registerName1("stringByReplacingPercentEscapesUsingEncoding:");
  late final ffi.Pointer<ObjCSel> _sel_debugDescription1 =
      _registerName1("debugDescription");
  late final ffi.Pointer<ObjCSel> _sel_version1 = _registerName1("version");
  late final ffi.Pointer<ObjCSel> _sel_setVersion_1 =
      _registerName1("setVersion:");
  void _objc_msgSend_100(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aVersion,
  ) {
    return __objc_msgSend_100(
      obj,
      sel,
      aVersion,
    );
  }

  late final __objc_msgSend_100Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_100 = __objc_msgSend_100Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_classForCoder1 =
      _registerName1("classForCoder");
  late final ffi.Pointer<ObjCSel> _sel_replacementObjectForCoder_1 =
      _registerName1("replacementObjectForCoder:");
  late final ffi.Pointer<ObjCSel> _sel_awakeAfterUsingCoder_1 =
      _registerName1("awakeAfterUsingCoder:");
  late final ffi.Pointer<ObjCSel> _sel_poseAsClass_1 =
      _registerName1("poseAsClass:");
  late final ffi.Pointer<ObjCSel> _sel_autoContentAccessingProxy1 =
      _registerName1("autoContentAccessingProxy");
  late final ffi.Pointer<ObjCSel> _sel_URL_resourceDataDidBecomeAvailable_1 =
      _registerName1("URL:resourceDataDidBecomeAvailable:");
  void _objc_msgSend_101(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> sender,
    ffi.Pointer<ObjCObject> newBytes,
  ) {
    return __objc_msgSend_101(
      obj,
      sel,
      sender,
      newBytes,
    );
  }

  late final __objc_msgSend_101Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_101 = __objc_msgSend_101Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_URLResourceDidFinishLoading_1 =
      _registerName1("URLResourceDidFinishLoading:");
  late final ffi.Pointer<ObjCSel> _sel_URLResourceDidCancelLoading_1 =
      _registerName1("URLResourceDidCancelLoading:");
  late final ffi.Pointer<ObjCSel> _sel_URL_resourceDidFailLoadingWithReason_1 =
      _registerName1("URL:resourceDidFailLoadingWithReason:");
  late final ffi.Pointer<ObjCSel>
      _sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1 =
      _registerName1(
          "attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo:");
  void _objc_msgSend_102(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
    int recoveryOptionIndex,
    ffi.Pointer<ObjCObject> delegate,
    ffi.Pointer<ObjCSel> didRecoverSelector,
    ffi.Pointer<ffi.Void> contextInfo,
  ) {
    return __objc_msgSend_102(
      obj,
      sel,
      error,
      recoveryOptionIndex,
      delegate,
      didRecoverSelector,
      contextInfo,
    );
  }

  late final __objc_msgSend_102Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSUInteger,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_102 = __objc_msgSend_102Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ObjCSel> _sel_attemptRecoveryFromError_optionIndex_1 =
      _registerName1("attemptRecoveryFromError:optionIndex:");
  bool _objc_msgSend_103(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> error,
    int recoveryOptionIndex,
  ) {
    return __objc_msgSend_103(
          obj,
          sel,
          error,
          recoveryOptionIndex,
        ) !=
        0;
  }

  late final __objc_msgSend_103Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_103 = __objc_msgSend_103Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  ffi.Pointer<ObjCObject> NSAllocateObject(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject = _NSAllocateObjectPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject(
      object,
    );
  }

  late final _NSDeallocateObjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject = _NSDeallocateObjectPtr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject = _NSCopyObjectPtr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone = _NSShouldRetainWithZonePtr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount(
      object,
    );
  }

  late final _NSIncrementExtraRefCountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount = _NSIncrementExtraRefCountPtr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero =
      _NSDecrementExtraRefCountWasZeroPtr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount(
      object,
    );
  }

  late final _NSExtraRefCountPtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount =
      _NSExtraRefCountPtr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSEnumerator1 =
      _getClass1("NSEnumerator");
  late final ffi.Pointer<ObjCSel> _sel_nextObject1 =
      _registerName1("nextObject");
  late final ffi.Pointer<ObjCSel> _sel_allObjects1 =
      _registerName1("allObjects");
  late final ffi.Pointer<ObjCObject> _class_NSValue1 = _getClass1("NSValue");
  late final ffi.Pointer<ObjCSel> _sel_getValue_size_1 =
      _registerName1("getValue:size:");
  late final ffi.Pointer<ObjCSel> _sel_objCType1 = _registerName1("objCType");
  late final ffi.Pointer<ObjCSel> _sel_initWithBytes_objCType_1 =
      _registerName1("initWithBytes:objCType:");
  instancetype _objc_msgSend_104(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<pkg_ffi.Char> type,
  ) {
    return __objc_msgSend_104(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_104Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<pkg_ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_104 = __objc_msgSend_104Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>, ffi.Pointer<pkg_ffi.Char>)>();

  late final ffi.Pointer<ObjCSel> _sel_valueWithBytes_objCType_1 =
      _registerName1("valueWithBytes:objCType:");
  ffi.Pointer<ObjCObject> _objc_msgSend_105(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> value,
    ffi.Pointer<pkg_ffi.Char> type,
  ) {
    return __objc_msgSend_105(
      obj,
      sel,
      value,
      type,
    );
  }

  late final __objc_msgSend_105Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<pkg_ffi.Char>)>>('objc_msgSend');
  late final __objc_msgSend_105 = __objc_msgSend_105Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<pkg_ffi.Char>)>();

  late final ffi.Pointer<ObjCSel> _sel_value_withObjCType_1 =
      _registerName1("value:withObjCType:");
  late final ffi.Pointer<ObjCSel> _sel_valueWithNonretainedObject_1 =
      _registerName1("valueWithNonretainedObject:");
  ffi.Pointer<ObjCObject> _objc_msgSend_106(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_106(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_106Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_106 = __objc_msgSend_106Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_nonretainedObjectValue1 =
      _registerName1("nonretainedObjectValue");
  late final ffi.Pointer<ObjCSel> _sel_valueWithPointer_1 =
      _registerName1("valueWithPointer:");
  ffi.Pointer<ObjCObject> _objc_msgSend_107(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Void> pointer,
  ) {
    return __objc_msgSend_107(
      obj,
      sel,
      pointer,
    );
  }

  late final __objc_msgSend_107Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_107 = __objc_msgSend_107Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ObjCSel> _sel_pointerValue1 =
      _registerName1("pointerValue");
  late final ffi.Pointer<ObjCSel> _sel_isEqualToValue_1 =
      _registerName1("isEqualToValue:");
  late final ffi.Pointer<ObjCSel> _sel_getValue_1 = _registerName1("getValue:");
  late final ffi.Pointer<ObjCSel> _sel_valueWithRange_1 =
      _registerName1("valueWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_108(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_108(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_108Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_108 = __objc_msgSend_108Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_rangeValue1 =
      _registerName1("rangeValue");
  NSRange _objc_msgSend_109(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_109(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_109Ptr = _lookup<
      ffi.NativeFunction<
          NSRange Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_109 = __objc_msgSend_109Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCObject> _class_NSNumber1 = _getClass1("NSNumber");
  late final ffi.Pointer<ObjCSel> _sel_initWithChar_1 =
      _registerName1("initWithChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_110(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_110(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_110Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Char)>>('objc_msgSend');
  late final __objc_msgSend_110 = __objc_msgSend_110Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithUnsignedChar_1 =
      _registerName1("initWithUnsignedChar:");
  ffi.Pointer<ObjCObject> _objc_msgSend_111(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_111(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_111Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedChar)>>('objc_msgSend');
  late final __objc_msgSend_111 = __objc_msgSend_111Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithShort_1 =
      _registerName1("initWithShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_112(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_112(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_112Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Short)>>('objc_msgSend');
  late final __objc_msgSend_112 = __objc_msgSend_112Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithUnsignedShort_1 =
      _registerName1("initWithUnsignedShort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_113(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_113(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_113Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedShort)>>('objc_msgSend');
  late final __objc_msgSend_113 = __objc_msgSend_113Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithInt_1 =
      _registerName1("initWithInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_114(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_114(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_114Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Int)>>('objc_msgSend');
  late final __objc_msgSend_114 = __objc_msgSend_114Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithUnsignedInt_1 =
      _registerName1("initWithUnsignedInt:");
  ffi.Pointer<ObjCObject> _objc_msgSend_115(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_115(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_115Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedInt)>>('objc_msgSend');
  late final __objc_msgSend_115 = __objc_msgSend_115Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithLong_1 =
      _registerName1("initWithLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_116(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_116(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_116Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.Long)>>('objc_msgSend');
  late final __objc_msgSend_116 = __objc_msgSend_116Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithUnsignedLong_1 =
      _registerName1("initWithUnsignedLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_117(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_117(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_117Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedLong)>>('objc_msgSend');
  late final __objc_msgSend_117 = __objc_msgSend_117Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithLongLong_1 =
      _registerName1("initWithLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_118(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_118(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_118Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.LongLong)>>('objc_msgSend');
  late final __objc_msgSend_118 = __objc_msgSend_118Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithUnsignedLongLong_1 =
      _registerName1("initWithUnsignedLongLong:");
  ffi.Pointer<ObjCObject> _objc_msgSend_119(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_119(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_119Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, pkg_ffi.UnsignedLongLong)>>('objc_msgSend');
  late final __objc_msgSend_119 = __objc_msgSend_119Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithFloat_1 =
      _registerName1("initWithFloat:");
  ffi.Pointer<ObjCObject> _objc_msgSend_120(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_120(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_120Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_120 = __objc_msgSend_120Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithDouble_1 =
      _registerName1("initWithDouble:");
  ffi.Pointer<ObjCObject> _objc_msgSend_121(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_121(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_121Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Double)>>('objc_msgSend');
  late final __objc_msgSend_121 = __objc_msgSend_121Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithBool_1 =
      _registerName1("initWithBool:");
  ffi.Pointer<ObjCObject> _objc_msgSend_122(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_122(
      obj,
      sel,
      value ? 1 : 0,
    );
  }

  late final __objc_msgSend_122Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_122 = __objc_msgSend_122Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithInteger_1 =
      _registerName1("initWithInteger:");
  late final ffi.Pointer<ObjCSel> _sel_initWithUnsignedInteger_1 =
      _registerName1("initWithUnsignedInteger:");
  late final ffi.Pointer<ObjCSel> _sel_charValue1 = _registerName1("charValue");
  int _objc_msgSend_123(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_123(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_123Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Char Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_123 = __objc_msgSend_123Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_unsignedCharValue1 =
      _registerName1("unsignedCharValue");
  int _objc_msgSend_124(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_124(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_124Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedChar Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_124 = __objc_msgSend_124Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_shortValue1 =
      _registerName1("shortValue");
  int _objc_msgSend_125(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_125(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_125Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Short Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_125 = __objc_msgSend_125Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_unsignedShortValue1 =
      _registerName1("unsignedShortValue");
  int _objc_msgSend_126(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_126(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_126Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedShort Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_126 = __objc_msgSend_126Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_unsignedIntValue1 =
      _registerName1("unsignedIntValue");
  int _objc_msgSend_127(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_127(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_127Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedInt Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_127 = __objc_msgSend_127Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_longValue1 = _registerName1("longValue");
  late final ffi.Pointer<ObjCSel> _sel_unsignedLongValue1 =
      _registerName1("unsignedLongValue");
  late final ffi.Pointer<ObjCSel> _sel_unsignedLongLongValue1 =
      _registerName1("unsignedLongLongValue");
  int _objc_msgSend_128(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_128(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_128Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLongLong Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_128 = __objc_msgSend_128Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_unsignedIntegerValue1 =
      _registerName1("unsignedIntegerValue");
  late final ffi.Pointer<ObjCSel> _sel_stringValue1 =
      _registerName1("stringValue");
  late final ffi.Pointer<ObjCSel> _sel_isEqualToNumber_1 =
      _registerName1("isEqualToNumber:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithChar_1 =
      _registerName1("numberWithChar:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithUnsignedChar_1 =
      _registerName1("numberWithUnsignedChar:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithShort_1 =
      _registerName1("numberWithShort:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithUnsignedShort_1 =
      _registerName1("numberWithUnsignedShort:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithInt_1 =
      _registerName1("numberWithInt:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithUnsignedInt_1 =
      _registerName1("numberWithUnsignedInt:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithLong_1 =
      _registerName1("numberWithLong:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithUnsignedLong_1 =
      _registerName1("numberWithUnsignedLong:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithLongLong_1 =
      _registerName1("numberWithLongLong:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithUnsignedLongLong_1 =
      _registerName1("numberWithUnsignedLongLong:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithFloat_1 =
      _registerName1("numberWithFloat:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithDouble_1 =
      _registerName1("numberWithDouble:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithBool_1 =
      _registerName1("numberWithBool:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithInteger_1 =
      _registerName1("numberWithInteger:");
  late final ffi.Pointer<ObjCSel> _sel_numberWithUnsignedInteger_1 =
      _registerName1("numberWithUnsignedInteger:");
  NSRange NSUnionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSUnionRange(
      range1,
      range2,
    );
  }

  late final _NSUnionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSUnionRange');
  late final _NSUnionRange =
      _NSUnionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSRange NSIntersectionRange(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSIntersectionRange(
      range1,
      range2,
    );
  }

  late final _NSIntersectionRangePtr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSIntersectionRange');
  late final _NSIntersectionRange =
      _NSIntersectionRangePtr.asFunction<NSRange Function(NSRange, NSRange)>();

  ffi.Pointer<ObjCObject> NSStringFromRange(
    NSRange range,
  ) {
    return _NSStringFromRange(
      range,
    );
  }

  late final _NSStringFromRangePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(NSRange)>>(
          'NSStringFromRange');
  late final _NSStringFromRange = _NSStringFromRangePtr.asFunction<
      ffi.Pointer<ObjCObject> Function(NSRange)>();

  NSRange NSRangeFromString(
    ffi.Pointer<ObjCObject> aString,
  ) {
    return _NSRangeFromString(
      aString,
    );
  }

  late final _NSRangeFromStringPtr =
      _lookup<ffi.NativeFunction<NSRange Function(ffi.Pointer<ObjCObject>)>>(
          'NSRangeFromString');
  late final _NSRangeFromString = _NSRangeFromStringPtr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSOrderedCollectionChange1 =
      _getClass1("NSOrderedCollectionChange");
  late final ffi.Pointer<ObjCSel> _sel_object1 = _registerName1("object");
  late final ffi.Pointer<ObjCSel> _sel_changeType1 =
      _registerName1("changeType");
  int _objc_msgSend_129(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_129(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_129Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_129 = __objc_msgSend_129Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_index1 = _registerName1("index");
  late final ffi.Pointer<ObjCSel> _sel_associatedIndex1 =
      _registerName1("associatedIndex");
  late final ffi.Pointer<ObjCSel> _sel_initWithObject_type_index_1 =
      _registerName1("initWithObject:type:index:");
  instancetype _objc_msgSend_130(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int type,
    int index,
  ) {
    return __objc_msgSend_130(
      obj,
      sel,
      anObject,
      type,
      index,
    );
  }

  late final __objc_msgSend_130Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_130 = __objc_msgSend_130Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initWithObject_type_index_associatedIndex_1 =
      _registerName1("initWithObject:type:index:associatedIndex:");
  instancetype _objc_msgSend_131(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int type,
    int index,
    int associatedIndex,
  ) {
    return __objc_msgSend_131(
      obj,
      sel,
      anObject,
      type,
      index,
      associatedIndex,
    );
  }

  late final __objc_msgSend_131Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSUInteger,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_131 = __objc_msgSend_131Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int, int)>();

  late final ffi.Pointer<ObjCObject> _class_NSIndexSet1 =
      _getClass1("NSIndexSet");
  late final ffi.Pointer<ObjCSel> _sel_indexSet1 = _registerName1("indexSet");
  late final ffi.Pointer<ObjCSel> _sel_indexSetWithIndex_1 =
      _registerName1("indexSetWithIndex:");
  instancetype _objc_msgSend_132(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_132(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_132Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_132 = __objc_msgSend_132Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_indexSetWithIndexesInRange_1 =
      _registerName1("indexSetWithIndexesInRange:");
  instancetype _objc_msgSend_133(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_133(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_133Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_133 = __objc_msgSend_133Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithIndexesInRange_1 =
      _registerName1("initWithIndexesInRange:");
  late final ffi.Pointer<ObjCSel> _sel_initWithIndexSet_1 =
      _registerName1("initWithIndexSet:");
  late final ffi.Pointer<ObjCSel> _sel_initWithIndex_1 =
      _registerName1("initWithIndex:");
  late final ffi.Pointer<ObjCSel> _sel_isEqualToIndexSet_1 =
      _registerName1("isEqualToIndexSet:");
  late final ffi.Pointer<ObjCSel> _sel_firstIndex1 =
      _registerName1("firstIndex");
  late final ffi.Pointer<ObjCSel> _sel_lastIndex1 = _registerName1("lastIndex");
  late final ffi.Pointer<ObjCSel> _sel_indexGreaterThanIndex_1 =
      _registerName1("indexGreaterThanIndex:");
  late final ffi.Pointer<ObjCSel> _sel_indexLessThanIndex_1 =
      _registerName1("indexLessThanIndex:");
  late final ffi.Pointer<ObjCSel> _sel_indexGreaterThanOrEqualToIndex_1 =
      _registerName1("indexGreaterThanOrEqualToIndex:");
  late final ffi.Pointer<ObjCSel> _sel_indexLessThanOrEqualToIndex_1 =
      _registerName1("indexLessThanOrEqualToIndex:");
  late final ffi.Pointer<ObjCSel> _sel_getIndexes_maxCount_inIndexRange_1 =
      _registerName1("getIndexes:maxCount:inIndexRange:");
  int _objc_msgSend_134(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indexBuffer,
    int bufferSize,
    NSRangePointer range,
  ) {
    return __objc_msgSend_134(
      obj,
      sel,
      indexBuffer,
      bufferSize,
      range,
    );
  }

  late final __objc_msgSend_134Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>,
              NSUInteger,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_134 = __objc_msgSend_134Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, int, NSRangePointer)>();

  late final ffi.Pointer<ObjCSel> _sel_countOfIndexesInRange_1 =
      _registerName1("countOfIndexesInRange:");
  int _objc_msgSend_135(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_135(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_135Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_135 = __objc_msgSend_135Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_containsIndex_1 =
      _registerName1("containsIndex:");
  late final ffi.Pointer<ObjCSel> _sel_containsIndexesInRange_1 =
      _registerName1("containsIndexesInRange:");
  bool _objc_msgSend_136(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_136(
          obj,
          sel,
          range,
        ) !=
        0;
  }

  late final __objc_msgSend_136Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_136 = __objc_msgSend_136Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_containsIndexes_1 =
      _registerName1("containsIndexes:");
  late final ffi.Pointer<ObjCSel> _sel_intersectsIndexesInRange_1 =
      _registerName1("intersectsIndexesInRange:");
  late final ffi.Pointer<ObjCSel> _sel_enumerateIndexesUsingBlock_1 =
      _registerName1("enumerateIndexesUsingBlock:");
  void _objc_msgSend_137(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_137(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_137Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_137 = __objc_msgSend_137Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_enumerateIndexesWithOptions_usingBlock_1 =
      _registerName1("enumerateIndexesWithOptions:usingBlock:");
  void _objc_msgSend_138(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_138(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_138Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_138 = __objc_msgSend_138Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_enumerateIndexesInRange_options_usingBlock_1 =
      _registerName1("enumerateIndexesInRange:options:usingBlock:");
  void _objc_msgSend_139(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_139(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_139Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_139 = __objc_msgSend_139Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexPassingTest_1 =
      _registerName1("indexPassingTest:");
  int _objc_msgSend_140(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_140(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_140Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_140 = __objc_msgSend_140Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexWithOptions_passingTest_1 =
      _registerName1("indexWithOptions:passingTest:");
  int _objc_msgSend_141(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_141(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_141Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_141 = __objc_msgSend_141Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexInRange_options_passingTest_1 =
      _registerName1("indexInRange:options:passingTest:");
  int _objc_msgSend_142(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_142(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_142Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_142 = __objc_msgSend_142Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexesPassingTest_1 =
      _registerName1("indexesPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_143(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_143(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_143Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_143 = __objc_msgSend_143Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexesWithOptions_passingTest_1 =
      _registerName1("indexesWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_144(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_144(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_144Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_144 = __objc_msgSend_144Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexesInRange_options_passingTest_1 =
      _registerName1("indexesInRange:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_145(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_145(
      obj,
      sel,
      range,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_145Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSRange,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_145 = __objc_msgSend_145Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, NSRange, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_enumerateRangesUsingBlock_1 =
      _registerName1("enumerateRangesUsingBlock:");
  void _objc_msgSend_146(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_146(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_146Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_146 = __objc_msgSend_146Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_enumerateRangesWithOptions_usingBlock_1 =
      _registerName1("enumerateRangesWithOptions:usingBlock:");
  void _objc_msgSend_147(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_147(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_147Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_147 = __objc_msgSend_147Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_enumerateRangesInRange_options_usingBlock_1 =
      _registerName1("enumerateRangesInRange:options:usingBlock:");
  void _objc_msgSend_148(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_148(
      obj,
      sel,
      range,
      opts,
      block,
    );
  }

  late final __objc_msgSend_148Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_148 = __objc_msgSend_148Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCObject> _class_NSMutableIndexSet1 =
      _getClass1("NSMutableIndexSet");
  late final ffi.Pointer<ObjCSel> _sel_addIndexes_1 =
      _registerName1("addIndexes:");
  late final ffi.Pointer<ObjCSel> _sel_removeIndexes_1 =
      _registerName1("removeIndexes:");
  late final ffi.Pointer<ObjCSel> _sel_removeAllIndexes1 =
      _registerName1("removeAllIndexes");
  late final ffi.Pointer<ObjCSel> _sel_addIndex_1 = _registerName1("addIndex:");
  late final ffi.Pointer<ObjCSel> _sel_removeIndex_1 =
      _registerName1("removeIndex:");
  late final ffi.Pointer<ObjCSel> _sel_addIndexesInRange_1 =
      _registerName1("addIndexesInRange:");
  void _objc_msgSend_149(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
  ) {
    return __objc_msgSend_149(
      obj,
      sel,
      range,
    );
  }

  late final __objc_msgSend_149Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_149 = __objc_msgSend_149Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_removeIndexesInRange_1 =
      _registerName1("removeIndexesInRange:");
  late final ffi.Pointer<ObjCSel> _sel_shiftIndexesStartingAtIndex_by_1 =
      _registerName1("shiftIndexesStartingAtIndex:by:");
  void _objc_msgSend_150(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    int delta,
  ) {
    return __objc_msgSend_150(
      obj,
      sel,
      index,
      delta,
    );
  }

  late final __objc_msgSend_150Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_150 = __objc_msgSend_150Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final ffi.Pointer<ObjCObject> _class_NSOrderedCollectionDifference1 =
      _getClass1("NSOrderedCollectionDifference");
  late final ffi.Pointer<ObjCSel> _sel_initWithChanges_1 =
      _registerName1("initWithChanges:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_1 =
      _registerName1(
          "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:additionalChanges:");
  instancetype _objc_msgSend_151(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> inserts,
    ffi.Pointer<ObjCObject> insertedObjects,
    ffi.Pointer<ObjCObject> removes,
    ffi.Pointer<ObjCObject> removedObjects,
    ffi.Pointer<ObjCObject> changes,
  ) {
    return __objc_msgSend_151(
      obj,
      sel,
      inserts,
      insertedObjects,
      removes,
      removedObjects,
      changes,
    );
  }

  late final __objc_msgSend_151Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_151 = __objc_msgSend_151Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_1 =
      _registerName1(
          "initWithInsertIndexes:insertedObjects:removeIndexes:removedObjects:");
  instancetype _objc_msgSend_152(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> inserts,
    ffi.Pointer<ObjCObject> insertedObjects,
    ffi.Pointer<ObjCObject> removes,
    ffi.Pointer<ObjCObject> removedObjects,
  ) {
    return __objc_msgSend_152(
      obj,
      sel,
      inserts,
      insertedObjects,
      removes,
      removedObjects,
    );
  }

  late final __objc_msgSend_152Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_152 = __objc_msgSend_152Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_insertions1 =
      _registerName1("insertions");
  late final ffi.Pointer<ObjCSel> _sel_removals1 = _registerName1("removals");
  late final ffi.Pointer<ObjCSel> _sel_hasChanges1 =
      _registerName1("hasChanges");
  late final ffi.Pointer<ObjCSel> _sel_inverseDifference1 =
      _registerName1("inverseDifference");
  late final ffi.Pointer<ObjCObject> _class_NSArray1 = _getClass1("NSArray");
  late final ffi.Pointer<ObjCSel> _sel_objectAtIndex_1 =
      _registerName1("objectAtIndex:");
  late final ffi.Pointer<ObjCSel> _sel_initWithObjects_count_1 =
      _registerName1("initWithObjects:count:");
  instancetype _objc_msgSend_153(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    int cnt,
  ) {
    return __objc_msgSend_153(
      obj,
      sel,
      objects,
      cnt,
    );
  }

  late final __objc_msgSend_153Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_153 = __objc_msgSend_153Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_componentsJoinedByString_1 =
      _registerName1("componentsJoinedByString:");
  late final ffi.Pointer<ObjCSel> _sel_containsObject_1 =
      _registerName1("containsObject:");
  late final ffi.Pointer<ObjCSel> _sel_firstObjectCommonWithArray_1 =
      _registerName1("firstObjectCommonWithArray:");
  late final ffi.Pointer<ObjCSel> _sel_getObjects_range_1 =
      _registerName1("getObjects:range:");
  void _objc_msgSend_154(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
    NSRange range,
  ) {
    return __objc_msgSend_154(
      obj,
      sel,
      objects,
      range,
    );
  }

  late final __objc_msgSend_154Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_154 = __objc_msgSend_154Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_indexOfObject_1 =
      _registerName1("indexOfObject:");
  int _objc_msgSend_155(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_155(
      obj,
      sel,
      anObject,
    );
  }

  late final __objc_msgSend_155Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_155 = __objc_msgSend_155Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexOfObject_inRange_1 =
      _registerName1("indexOfObject:inRange:");
  int _objc_msgSend_156(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    NSRange range,
  ) {
    return __objc_msgSend_156(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_156Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_156 = __objc_msgSend_156Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_indexOfObjectIdenticalTo_1 =
      _registerName1("indexOfObjectIdenticalTo:");
  late final ffi.Pointer<ObjCSel> _sel_indexOfObjectIdenticalTo_inRange_1 =
      _registerName1("indexOfObjectIdenticalTo:inRange:");
  late final ffi.Pointer<ObjCSel> _sel_isEqualToArray_1 =
      _registerName1("isEqualToArray:");
  late final ffi.Pointer<ObjCSel> _sel_firstObject1 =
      _registerName1("firstObject");
  late final ffi.Pointer<ObjCSel> _sel_lastObject1 =
      _registerName1("lastObject");
  late final ffi.Pointer<ObjCSel> _sel_sortedArrayHint1 =
      _registerName1("sortedArrayHint");
  late final ffi.Pointer<ObjCSel> _sel_makeObjectsPerformSelector_1 =
      _registerName1("makeObjectsPerformSelector:");
  late final ffi.Pointer<ObjCSel> _sel_makeObjectsPerformSelector_withObject_1 =
      _registerName1("makeObjectsPerformSelector:withObject:");
  void _objc_msgSend_157(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> aSelector,
    ffi.Pointer<ObjCObject> argument,
  ) {
    return __objc_msgSend_157(
      obj,
      sel,
      aSelector,
      argument,
    );
  }

  late final __objc_msgSend_157Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_157 = __objc_msgSend_157Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_objectAtIndexedSubscript_1 =
      _registerName1("objectAtIndexedSubscript:");
  late final ffi.Pointer<ObjCSel> _sel_enumerateObjectsUsingBlock_1 =
      _registerName1("enumerateObjectsUsingBlock:");
  void _objc_msgSend_158(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_158(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_158Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_158 = __objc_msgSend_158Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_enumerateObjectsWithOptions_usingBlock_1 =
      _registerName1("enumerateObjectsWithOptions:usingBlock:");
  void _objc_msgSend_159(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_159(
      obj,
      sel,
      opts,
      block,
    );
  }

  late final __objc_msgSend_159Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_159 = __objc_msgSend_159Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_enumerateObjectsAtIndexes_options_usingBlock_1 =
      _registerName1("enumerateObjectsAtIndexes:options:usingBlock:");
  void _objc_msgSend_160(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_160(
      obj,
      sel,
      s,
      opts,
      block,
    );
  }

  late final __objc_msgSend_160Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_160 = __objc_msgSend_160Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexOfObjectPassingTest_1 =
      _registerName1("indexOfObjectPassingTest:");
  int _objc_msgSend_161(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_161(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_161Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_161 = __objc_msgSend_161Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexOfObjectWithOptions_passingTest_1 =
      _registerName1("indexOfObjectWithOptions:passingTest:");
  int _objc_msgSend_162(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_162(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_162Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_162 = __objc_msgSend_162Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_indexOfObjectAtIndexes_options_passingTest_1 =
      _registerName1("indexOfObjectAtIndexes:options:passingTest:");
  int _objc_msgSend_163(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_163(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_163Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_163 = __objc_msgSend_163Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_indexesOfObjectsPassingTest_1 =
      _registerName1("indexesOfObjectsPassingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_164(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_164(
      obj,
      sel,
      predicate,
    );
  }

  late final __objc_msgSend_164Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_164 = __objc_msgSend_164Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_indexesOfObjectsWithOptions_passingTest_1 =
      _registerName1("indexesOfObjectsWithOptions:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_165(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_165(
      obj,
      sel,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_165Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_165 = __objc_msgSend_165Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_indexesOfObjectsAtIndexes_options_passingTest_1 =
      _registerName1("indexesOfObjectsAtIndexes:options:passingTest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_166(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> s,
    int opts,
    ffi.Pointer<_ObjCBlock> predicate,
  ) {
    return __objc_msgSend_166(
      obj,
      sel,
      s,
      opts,
      predicate,
    );
  }

  late final __objc_msgSend_166Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_166 = __objc_msgSend_166Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_indexOfObject_inSortedRange_options_usingComparator_1 =
      _registerName1("indexOfObject:inSortedRange:options:usingComparator:");
  int _objc_msgSend_167(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> obj1,
    NSRange r,
    int opts,
    NSComparator cmp,
  ) {
    return __objc_msgSend_167(
      obj,
      sel,
      obj1,
      r,
      opts,
      cmp,
    );
  }

  late final __objc_msgSend_167Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSRange,
              ffi.Int32,
              NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_167 = __objc_msgSend_167Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSRange, int, NSComparator)>();

  late final ffi.Pointer<ObjCSel> _sel_array1 = _registerName1("array");
  late final ffi.Pointer<ObjCSel> _sel_arrayWithObject_1 =
      _registerName1("arrayWithObject:");
  late final ffi.Pointer<ObjCSel> _sel_arrayWithObjects_count_1 =
      _registerName1("arrayWithObjects:count:");
  late final ffi.Pointer<ObjCSel> _sel_arrayWithObjects_1 =
      _registerName1("arrayWithObjects:");
  late final ffi.Pointer<ObjCSel> _sel_arrayWithArray_1 =
      _registerName1("arrayWithArray:");
  late final ffi.Pointer<ObjCSel> _sel_initWithObjects_1 =
      _registerName1("initWithObjects:");
  late final ffi.Pointer<ObjCSel> _sel_initWithArray_1 =
      _registerName1("initWithArray:");
  late final ffi.Pointer<ObjCSel> _sel_initWithArray_copyItems_1 =
      _registerName1("initWithArray:copyItems:");
  late final ffi.Pointer<ObjCSel> _sel_getObjects_1 =
      _registerName1("getObjects:");
  void _objc_msgSend_168(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
  ) {
    return __objc_msgSend_168(
      obj,
      sel,
      objects,
    );
  }

  late final __objc_msgSend_168Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_168 = __objc_msgSend_168Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCObject> _class_NSMutableArray1 =
      _getClass1("NSMutableArray");
  late final ffi.Pointer<ObjCSel> _sel_addObject_1 =
      _registerName1("addObject:");
  late final ffi.Pointer<ObjCSel> _sel_insertObject_atIndex_1 =
      _registerName1("insertObject:atIndex:");
  void _objc_msgSend_169(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    int index,
  ) {
    return __objc_msgSend_169(
      obj,
      sel,
      anObject,
      index,
    );
  }

  late final __objc_msgSend_169Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_169 = __objc_msgSend_169Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_removeLastObject1 =
      _registerName1("removeLastObject");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectAtIndex_1 =
      _registerName1("removeObjectAtIndex:");
  late final ffi.Pointer<ObjCSel> _sel_replaceObjectAtIndex_withObject_1 =
      _registerName1("replaceObjectAtIndex:withObject:");
  void _objc_msgSend_170(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int index,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_170(
      obj,
      sel,
      index,
      anObject,
    );
  }

  late final __objc_msgSend_170Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_170 = __objc_msgSend_170Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithCapacity_1 =
      _registerName1("initWithCapacity:");
  late final ffi.Pointer<ObjCSel> _sel_addObjectsFromArray_1 =
      _registerName1("addObjectsFromArray:");
  late final ffi.Pointer<ObjCSel>
      _sel_exchangeObjectAtIndex_withObjectAtIndex_1 =
      _registerName1("exchangeObjectAtIndex:withObjectAtIndex:");
  void _objc_msgSend_171(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int idx1,
    int idx2,
  ) {
    return __objc_msgSend_171(
      obj,
      sel,
      idx1,
      idx2,
    );
  }

  late final __objc_msgSend_171Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSUInteger, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_171 = __objc_msgSend_171Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int)>();

  late final ffi.Pointer<ObjCSel> _sel_removeAllObjects1 =
      _registerName1("removeAllObjects");
  late final ffi.Pointer<ObjCSel> _sel_removeObject_inRange_1 =
      _registerName1("removeObject:inRange:");
  void _objc_msgSend_172(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anObject,
    NSRange range,
  ) {
    return __objc_msgSend_172(
      obj,
      sel,
      anObject,
      range,
    );
  }

  late final __objc_msgSend_172Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_172 = __objc_msgSend_172Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_removeObject_1 =
      _registerName1("removeObject:");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectIdenticalTo_inRange_1 =
      _registerName1("removeObjectIdenticalTo:inRange:");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectIdenticalTo_1 =
      _registerName1("removeObjectIdenticalTo:");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectsFromIndices_numIndices_1 =
      _registerName1("removeObjectsFromIndices:numIndices:");
  void _objc_msgSend_173(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<NSUInteger> indices,
    int cnt,
  ) {
    return __objc_msgSend_173(
      obj,
      sel,
      indices,
      cnt,
    );
  }

  late final __objc_msgSend_173Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<NSUInteger>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_173 = __objc_msgSend_173Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<NSUInteger>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_removeObjectsInArray_1 =
      _registerName1("removeObjectsInArray:");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectsInRange_1 =
      _registerName1("removeObjectsInRange:");
  late final ffi.Pointer<ObjCSel>
      _sel_replaceObjectsInRange_withObjectsFromArray_range_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:range:");
  void _objc_msgSend_174(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
    NSRange otherRange,
  ) {
    return __objc_msgSend_174(
      obj,
      sel,
      range,
      otherArray,
      otherRange,
    );
  }

  late final __objc_msgSend_174Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_174 = __objc_msgSend_174Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>, NSRange)>();

  late final ffi.Pointer<ObjCSel>
      _sel_replaceObjectsInRange_withObjectsFromArray_1 =
      _registerName1("replaceObjectsInRange:withObjectsFromArray:");
  void _objc_msgSend_175(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ObjCObject> otherArray,
  ) {
    return __objc_msgSend_175(
      obj,
      sel,
      range,
      otherArray,
    );
  }

  late final __objc_msgSend_175Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_175 = __objc_msgSend_175Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_setArray_1 = _registerName1("setArray:");
  late final ffi.Pointer<ObjCSel> _sel_sortUsingFunction_context_1 =
      _registerName1("sortUsingFunction:context:");
  void _objc_msgSend_176(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<
            ffi.NativeFunction<
                NSInteger Function(ffi.Pointer<ObjCObject>,
                    ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
        compare,
    ffi.Pointer<ffi.Void> context,
  ) {
    return __objc_msgSend_176(
      obj,
      sel,
      compare,
      context,
    );
  }

  late final __objc_msgSend_176Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      NSInteger Function(ffi.Pointer<ObjCObject>,
                          ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_176 = __objc_msgSend_176Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ObjCSel> _sel_sortUsingSelector_1 =
      _registerName1("sortUsingSelector:");
  late final ffi.Pointer<ObjCSel> _sel_insertObjects_atIndexes_1 =
      _registerName1("insertObjects:atIndexes:");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectsAtIndexes_1 =
      _registerName1("removeObjectsAtIndexes:");
  late final ffi.Pointer<ObjCSel> _sel_replaceObjectsAtIndexes_withObjects_1 =
      _registerName1("replaceObjectsAtIndexes:withObjects:");
  late final ffi.Pointer<ObjCSel> _sel_setObject_atIndexedSubscript_1 =
      _registerName1("setObject:atIndexedSubscript:");
  late final ffi.Pointer<ObjCSel> _sel_sortUsingComparator_1 =
      _registerName1("sortUsingComparator:");
  void _objc_msgSend_177(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_177(
      obj,
      sel,
      cmptr,
    );
  }

  late final __objc_msgSend_177Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_177 = __objc_msgSend_177Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSComparator)>();

  late final ffi.Pointer<ObjCSel> _sel_sortWithOptions_usingComparator_1 =
      _registerName1("sortWithOptions:usingComparator:");
  void _objc_msgSend_178(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int opts,
    NSComparator cmptr,
  ) {
    return __objc_msgSend_178(
      obj,
      sel,
      opts,
      cmptr,
    );
  }

  late final __objc_msgSend_178Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, NSComparator)>>('objc_msgSend');
  late final __objc_msgSend_178 = __objc_msgSend_178Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, NSComparator)>();

  late final ffi.Pointer<ObjCSel> _sel_arrayWithCapacity_1 =
      _registerName1("arrayWithCapacity:");
  late final ffi.Pointer<ObjCSel> _sel_applyDifference_1 =
      _registerName1("applyDifference:");
  ffi.Pointer<ObjCObject> NSStringFromSelector1(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector1(
      aSelector,
    );
  }

  late final _NSStringFromSelector1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector1 = _NSStringFromSelector1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString1(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString1(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString1 = _NSSelectorFromString1Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass1(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass1(
      aClass,
    );
  }

  late final _NSStringFromClass1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass1 = _NSStringFromClass1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString1(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString1(
      aClassName,
    );
  }

  late final _NSClassFromString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString1 = _NSClassFromString1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol1(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol1(
      proto,
    );
  }

  late final _NSStringFromProtocol1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol1 = _NSStringFromProtocol1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString1(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString1(
      namestr,
    );
  }

  late final _NSProtocolFromString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString1 = _NSProtocolFromString1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment1(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment1(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment1 = _NSGetSizeAndAlignment1Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog1(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog1(
      format,
    );
  }

  late final _NSLog1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog1 =
      _NSLog1Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv1(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv1(
      format,
      args,
    );
  }

  late final _NSLogv1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv1 =
      _NSLogv1Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake1(
    int loc,
    int len,
  ) {
    return ___CFRangeMake1(
      loc,
      len,
    );
  }

  late final ___CFRangeMake1Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake1 =
      ___CFRangeMake1Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID1() {
    return _CFNullGetTypeID1();
  }

  late final _CFNullGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID1 =
      _CFNullGetTypeID1Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID1() {
    return _CFAllocatorGetTypeID1();
  }

  late final _CFAllocatorGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID1 =
      _CFAllocatorGetTypeID1Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault1(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault1(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault1 =
      _CFAllocatorSetDefault1Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault1() {
    return _CFAllocatorGetDefault1();
  }

  late final _CFAllocatorGetDefault1Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault1 =
      _CFAllocatorGetDefault1Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate1(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate1 = _CFAllocatorCreate1Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate1(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate1(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate1 = _CFAllocatorAllocate1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate1(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate1 = _CFAllocatorReallocate1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate1(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate1 = _CFAllocatorDeallocate1Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize1(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize1(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize1 =
      _CFAllocatorGetPreferredSizeForSize1Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext1(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext1(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext1 = _CFAllocatorGetContext1Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID1(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID1(
      cf,
    );
  }

  late final _CFGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID1 =
      _CFGetTypeID1Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription1(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription1(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription1 =
      _CFCopyTypeIDDescription1Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain1(
    CFTypeRef cf,
  ) {
    return _CFRetain1(
      cf,
    );
  }

  late final _CFRetain1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain1 =
      _CFRetain1Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease1(
    CFTypeRef cf,
  ) {
    return _CFRelease1(
      cf,
    );
  }

  late final _CFRelease1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease1 =
      _CFRelease1Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease1(
    CFTypeRef arg,
  ) {
    return _CFAutorelease1(
      arg,
    );
  }

  late final _CFAutorelease1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease1 =
      _CFAutorelease1Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount1(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount1(
      cf,
    );
  }

  late final _CFGetRetainCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount1 =
      _CFGetRetainCount1Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual1(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual1(
      cf1,
      cf2,
    );
  }

  late final _CFEqual1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual1 =
      _CFEqual1Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash1(
    CFTypeRef cf,
  ) {
    return _CFHash1(
      cf,
    );
  }

  late final _CFHash1Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash1 = _CFHash1Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription1(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription1(
      cf,
    );
  }

  late final _CFCopyDescription1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription1 =
      _CFCopyDescription1Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator1(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator1(
      cf,
    );
  }

  late final _CFGetAllocator1Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator1 =
      _CFGetAllocator1Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable1(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable1(
      cf,
    );
  }

  late final _CFMakeCollectable1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable1 =
      _CFMakeCollectable1Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone1() {
    return _NSDefaultMallocZone1();
  }

  late final _NSDefaultMallocZone1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone1 =
      _NSDefaultMallocZone1Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone1(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone1(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone1 = _NSCreateZone1Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone1(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone1(
      zone,
    );
  }

  late final _NSRecycleZone1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone1 =
      _NSRecycleZone1Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName1(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName1(
      zone,
      name,
    );
  }

  late final _NSSetZoneName1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName1 = _NSSetZoneName1Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName1(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName1(
      zone,
    );
  }

  late final _NSZoneName1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName1 = _NSZoneName1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer1(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer1(
      ptr,
    );
  }

  late final _NSZoneFromPointer1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer1 = _NSZoneFromPointer1Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc1(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc1(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc1 = _NSZoneMalloc1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc1(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc1(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc1 = _NSZoneCalloc1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc1(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc1(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc1 = _NSZoneRealloc1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree1(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree1(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree1 = _NSZoneFree1Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable1(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable1(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable1 = _NSAllocateCollectable1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable1(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable1(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable1 =
      _NSReallocateCollectable1Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize1() {
    return _NSPageSize1();
  }

  late final _NSPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize1 = _NSPageSize1Ptr.asFunction<int Function()>();

  int NSLogPageSize1() {
    return _NSLogPageSize1();
  }

  late final _NSLogPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize1 = _NSLogPageSize1Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize1(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize1(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize1 =
      _NSRoundUpToMultipleOfPageSize1Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize1(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize1(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize1 =
      _NSRoundDownToMultipleOfPageSize1Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages1(
    int bytes,
  ) {
    return _NSAllocateMemoryPages1(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages1 = _NSAllocateMemoryPages1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages1(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages1(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages1 = _NSDeallocateMemoryPages1Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages1(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages1(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages1 = _NSCopyMemoryPages1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable1() {
    return _NSRealMemoryAvailable1();
  }

  late final _NSRealMemoryAvailable1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable1 =
      _NSRealMemoryAvailable1Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject1(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject1(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject1 = _NSAllocateObject1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject1(
      object,
    );
  }

  late final _NSDeallocateObject1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject1 = _NSDeallocateObject1Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject1(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject1(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject1 = _NSCopyObject1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone1(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone1(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone1 = _NSShouldRetainWithZone1Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount1(
      object,
    );
  }

  late final _NSIncrementExtraRefCount1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount1 = _NSIncrementExtraRefCount1Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero1(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero1 =
      _NSDecrementExtraRefCountWasZero1Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount1(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount1(
      object,
    );
  }

  late final _NSExtraRefCount1Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount1 =
      _NSExtraRefCount1Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  NSRange NSUnionRange1(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSUnionRange1(
      range1,
      range2,
    );
  }

  late final _NSUnionRange1Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSUnionRange');
  late final _NSUnionRange1 =
      _NSUnionRange1Ptr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSRange NSIntersectionRange1(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSIntersectionRange1(
      range1,
      range2,
    );
  }

  late final _NSIntersectionRange1Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSIntersectionRange');
  late final _NSIntersectionRange1 =
      _NSIntersectionRange1Ptr.asFunction<NSRange Function(NSRange, NSRange)>();

  ffi.Pointer<ObjCObject> NSStringFromRange1(
    NSRange range,
  ) {
    return _NSStringFromRange1(
      range,
    );
  }

  late final _NSStringFromRange1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(NSRange)>>(
          'NSStringFromRange');
  late final _NSStringFromRange1 = _NSStringFromRange1Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(NSRange)>();

  NSRange NSRangeFromString1(
    ffi.Pointer<ObjCObject> aString,
  ) {
    return _NSRangeFromString1(
      aString,
    );
  }

  late final _NSRangeFromString1Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(ffi.Pointer<ObjCObject>)>>(
          'NSRangeFromString');
  late final _NSRangeFromString1 = _NSRangeFromString1Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSMutableData1 =
      _getClass1("NSMutableData");
  late final ffi.Pointer<ObjCSel> _sel_mutableBytes1 =
      _registerName1("mutableBytes");
  late final ffi.Pointer<ObjCSel> _sel_setLength_1 =
      _registerName1("setLength:");
  late final ffi.Pointer<ObjCSel> _sel_appendBytes_length_1 =
      _registerName1("appendBytes:length:");
  late final ffi.Pointer<ObjCSel> _sel_appendData_1 =
      _registerName1("appendData:");
  late final ffi.Pointer<ObjCSel> _sel_increaseLengthBy_1 =
      _registerName1("increaseLengthBy:");
  late final ffi.Pointer<ObjCSel> _sel_replaceBytesInRange_withBytes_1 =
      _registerName1("replaceBytesInRange:withBytes:");
  void _objc_msgSend_179(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ffi.Void> bytes,
  ) {
    return __objc_msgSend_179(
      obj,
      sel,
      range,
      bytes,
    );
  }

  late final __objc_msgSend_179Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ffi.Void>)>>('objc_msgSend');
  late final __objc_msgSend_179 = __objc_msgSend_179Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<ObjCSel> _sel_resetBytesInRange_1 =
      _registerName1("resetBytesInRange:");
  late final ffi.Pointer<ObjCSel> _sel_setData_1 = _registerName1("setData:");
  late final ffi.Pointer<ObjCSel> _sel_replaceBytesInRange_withBytes_length_1 =
      _registerName1("replaceBytesInRange:withBytes:length:");
  void _objc_msgSend_180(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange range,
    ffi.Pointer<ffi.Void> replacementBytes,
    int replacementLength,
  ) {
    return __objc_msgSend_180(
      obj,
      sel,
      range,
      replacementBytes,
      replacementLength,
    );
  }

  late final __objc_msgSend_180Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSRange, ffi.Pointer<ffi.Void>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_180 = __objc_msgSend_180Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange,
          ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_dataWithCapacity_1 =
      _registerName1("dataWithCapacity:");
  late final ffi.Pointer<ObjCSel> _sel_dataWithLength_1 =
      _registerName1("dataWithLength:");
  late final ffi.Pointer<ObjCSel> _sel_initWithLength_1 =
      _registerName1("initWithLength:");
  late final ffi.Pointer<ObjCSel> _sel_decompressUsingAlgorithm_error_1 =
      _registerName1("decompressUsingAlgorithm:error:");
  bool _objc_msgSend_181(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int algorithm,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_181(
          obj,
          sel,
          algorithm,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_181Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_181 = __objc_msgSend_181Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_compressUsingAlgorithm_error_1 =
      _registerName1("compressUsingAlgorithm:error:");
  late final ffi.Pointer<ObjCObject> _class_NSPurgeableData1 =
      _getClass1("NSPurgeableData");
  ffi.Pointer<ObjCObject> NSStringFromSelector2(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector2(
      aSelector,
    );
  }

  late final _NSStringFromSelector2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector2 = _NSStringFromSelector2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString2(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString2(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString2 = _NSSelectorFromString2Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass2(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass2(
      aClass,
    );
  }

  late final _NSStringFromClass2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass2 = _NSStringFromClass2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString2(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString2(
      aClassName,
    );
  }

  late final _NSClassFromString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString2 = _NSClassFromString2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol2(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol2(
      proto,
    );
  }

  late final _NSStringFromProtocol2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol2 = _NSStringFromProtocol2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString2(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString2(
      namestr,
    );
  }

  late final _NSProtocolFromString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString2 = _NSProtocolFromString2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment2(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment2(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment2 = _NSGetSizeAndAlignment2Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog2(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog2(
      format,
    );
  }

  late final _NSLog2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog2 =
      _NSLog2Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv2(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv2(
      format,
      args,
    );
  }

  late final _NSLogv2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv2 =
      _NSLogv2Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake2(
    int loc,
    int len,
  ) {
    return ___CFRangeMake2(
      loc,
      len,
    );
  }

  late final ___CFRangeMake2Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake2 =
      ___CFRangeMake2Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID2() {
    return _CFNullGetTypeID2();
  }

  late final _CFNullGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID2 =
      _CFNullGetTypeID2Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID2() {
    return _CFAllocatorGetTypeID2();
  }

  late final _CFAllocatorGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID2 =
      _CFAllocatorGetTypeID2Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault2(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault2(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault2 =
      _CFAllocatorSetDefault2Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault2() {
    return _CFAllocatorGetDefault2();
  }

  late final _CFAllocatorGetDefault2Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault2 =
      _CFAllocatorGetDefault2Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate2(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate2(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate2Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate2 = _CFAllocatorCreate2Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate2(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate2(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate2 = _CFAllocatorAllocate2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate2(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate2(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate2 = _CFAllocatorReallocate2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate2(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate2(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate2 = _CFAllocatorDeallocate2Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize2(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize2(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize2Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize2 =
      _CFAllocatorGetPreferredSizeForSize2Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext2(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext2(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext2 = _CFAllocatorGetContext2Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID2(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID2(
      cf,
    );
  }

  late final _CFGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID2 =
      _CFGetTypeID2Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription2(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription2(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription2Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription2 =
      _CFCopyTypeIDDescription2Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain2(
    CFTypeRef cf,
  ) {
    return _CFRetain2(
      cf,
    );
  }

  late final _CFRetain2Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain2 =
      _CFRetain2Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease2(
    CFTypeRef cf,
  ) {
    return _CFRelease2(
      cf,
    );
  }

  late final _CFRelease2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease2 =
      _CFRelease2Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease2(
    CFTypeRef arg,
  ) {
    return _CFAutorelease2(
      arg,
    );
  }

  late final _CFAutorelease2Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease2 =
      _CFAutorelease2Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount2(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount2(
      cf,
    );
  }

  late final _CFGetRetainCount2Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount2 =
      _CFGetRetainCount2Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual2(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual2(
      cf1,
      cf2,
    );
  }

  late final _CFEqual2Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual2 =
      _CFEqual2Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash2(
    CFTypeRef cf,
  ) {
    return _CFHash2(
      cf,
    );
  }

  late final _CFHash2Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash2 = _CFHash2Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription2(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription2(
      cf,
    );
  }

  late final _CFCopyDescription2Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription2 =
      _CFCopyDescription2Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator2(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator2(
      cf,
    );
  }

  late final _CFGetAllocator2Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator2 =
      _CFGetAllocator2Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable2(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable2(
      cf,
    );
  }

  late final _CFMakeCollectable2Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable2 =
      _CFMakeCollectable2Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone2() {
    return _NSDefaultMallocZone2();
  }

  late final _NSDefaultMallocZone2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone2 =
      _NSDefaultMallocZone2Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone2(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone2(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone2 = _NSCreateZone2Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone2(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone2(
      zone,
    );
  }

  late final _NSRecycleZone2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone2 =
      _NSRecycleZone2Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName2(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName2(
      zone,
      name,
    );
  }

  late final _NSSetZoneName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName2 = _NSSetZoneName2Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName2(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName2(
      zone,
    );
  }

  late final _NSZoneName2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName2 = _NSZoneName2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer2(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer2(
      ptr,
    );
  }

  late final _NSZoneFromPointer2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer2 = _NSZoneFromPointer2Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc2(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc2(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc2 = _NSZoneMalloc2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc2(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc2(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc2 = _NSZoneCalloc2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc2(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc2(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc2 = _NSZoneRealloc2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree2(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree2(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree2 = _NSZoneFree2Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable2(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable2(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable2 = _NSAllocateCollectable2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable2(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable2(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable2 =
      _NSReallocateCollectable2Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize2() {
    return _NSPageSize2();
  }

  late final _NSPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize2 = _NSPageSize2Ptr.asFunction<int Function()>();

  int NSLogPageSize2() {
    return _NSLogPageSize2();
  }

  late final _NSLogPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize2 = _NSLogPageSize2Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize2(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize2(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize2 =
      _NSRoundUpToMultipleOfPageSize2Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize2(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize2(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize2 =
      _NSRoundDownToMultipleOfPageSize2Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages2(
    int bytes,
  ) {
    return _NSAllocateMemoryPages2(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages2 = _NSAllocateMemoryPages2Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages2(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages2(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages2 = _NSDeallocateMemoryPages2Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages2(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages2(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages2 = _NSCopyMemoryPages2Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable2() {
    return _NSRealMemoryAvailable2();
  }

  late final _NSRealMemoryAvailable2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable2 =
      _NSRealMemoryAvailable2Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject2(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject2(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject2 = _NSAllocateObject2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject2(
      object,
    );
  }

  late final _NSDeallocateObject2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject2 = _NSDeallocateObject2Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject2(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject2(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject2 = _NSCopyObject2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone2(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone2(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone2 = _NSShouldRetainWithZone2Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount2(
      object,
    );
  }

  late final _NSIncrementExtraRefCount2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount2 = _NSIncrementExtraRefCount2Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero2(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero2Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero2 =
      _NSDecrementExtraRefCountWasZero2Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount2(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount2(
      object,
    );
  }

  late final _NSExtraRefCount2Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount2 =
      _NSExtraRefCount2Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSMutableDictionary1 =
      _getClass1("NSMutableDictionary");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectForKey_1 =
      _registerName1("removeObjectForKey:");
  late final ffi.Pointer<ObjCSel> _sel_setObject_forKey_1 =
      _registerName1("setObject:forKey:");
  late final ffi.Pointer<ObjCSel> _sel_addEntriesFromDictionary_1 =
      _registerName1("addEntriesFromDictionary:");
  late final ffi.Pointer<ObjCSel> _sel_removeObjectsForKeys_1 =
      _registerName1("removeObjectsForKeys:");
  late final ffi.Pointer<ObjCSel> _sel_setDictionary_1 =
      _registerName1("setDictionary:");
  late final ffi.Pointer<ObjCSel> _sel_setObject_forKeyedSubscript_1 =
      _registerName1("setObject:forKeyedSubscript:");
  late final ffi.Pointer<ObjCSel> _sel_dictionaryWithCapacity_1 =
      _registerName1("dictionaryWithCapacity:");
  ffi.Pointer<ObjCObject> NSStringFromSelector3(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector3(
      aSelector,
    );
  }

  late final _NSStringFromSelector3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector3 = _NSStringFromSelector3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString3(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString3(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString3 = _NSSelectorFromString3Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass3(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass3(
      aClass,
    );
  }

  late final _NSStringFromClass3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass3 = _NSStringFromClass3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString3(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString3(
      aClassName,
    );
  }

  late final _NSClassFromString3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString3 = _NSClassFromString3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol3(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol3(
      proto,
    );
  }

  late final _NSStringFromProtocol3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol3 = _NSStringFromProtocol3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString3(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString3(
      namestr,
    );
  }

  late final _NSProtocolFromString3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString3 = _NSProtocolFromString3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment3(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment3(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment3 = _NSGetSizeAndAlignment3Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog3(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog3(
      format,
    );
  }

  late final _NSLog3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog3 =
      _NSLog3Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv3(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv3(
      format,
      args,
    );
  }

  late final _NSLogv3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv3 =
      _NSLogv3Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake3(
    int loc,
    int len,
  ) {
    return ___CFRangeMake3(
      loc,
      len,
    );
  }

  late final ___CFRangeMake3Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake3 =
      ___CFRangeMake3Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID3() {
    return _CFNullGetTypeID3();
  }

  late final _CFNullGetTypeID3Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID3 =
      _CFNullGetTypeID3Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID3() {
    return _CFAllocatorGetTypeID3();
  }

  late final _CFAllocatorGetTypeID3Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID3 =
      _CFAllocatorGetTypeID3Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault3(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault3(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault3 =
      _CFAllocatorSetDefault3Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault3() {
    return _CFAllocatorGetDefault3();
  }

  late final _CFAllocatorGetDefault3Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault3 =
      _CFAllocatorGetDefault3Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate3(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate3(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate3Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate3 = _CFAllocatorCreate3Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate3(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate3(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate3 = _CFAllocatorAllocate3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate3(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate3(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate3 = _CFAllocatorReallocate3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate3(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate3(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate3 = _CFAllocatorDeallocate3Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize3(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize3(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize3Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize3 =
      _CFAllocatorGetPreferredSizeForSize3Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext3(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext3(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext3 = _CFAllocatorGetContext3Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID3(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID3(
      cf,
    );
  }

  late final _CFGetTypeID3Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID3 =
      _CFGetTypeID3Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription3(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription3(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription3Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription3 =
      _CFCopyTypeIDDescription3Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain3(
    CFTypeRef cf,
  ) {
    return _CFRetain3(
      cf,
    );
  }

  late final _CFRetain3Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain3 =
      _CFRetain3Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease3(
    CFTypeRef cf,
  ) {
    return _CFRelease3(
      cf,
    );
  }

  late final _CFRelease3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease3 =
      _CFRelease3Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease3(
    CFTypeRef arg,
  ) {
    return _CFAutorelease3(
      arg,
    );
  }

  late final _CFAutorelease3Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease3 =
      _CFAutorelease3Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount3(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount3(
      cf,
    );
  }

  late final _CFGetRetainCount3Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount3 =
      _CFGetRetainCount3Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual3(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual3(
      cf1,
      cf2,
    );
  }

  late final _CFEqual3Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual3 =
      _CFEqual3Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash3(
    CFTypeRef cf,
  ) {
    return _CFHash3(
      cf,
    );
  }

  late final _CFHash3Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash3 = _CFHash3Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription3(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription3(
      cf,
    );
  }

  late final _CFCopyDescription3Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription3 =
      _CFCopyDescription3Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator3(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator3(
      cf,
    );
  }

  late final _CFGetAllocator3Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator3 =
      _CFGetAllocator3Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable3(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable3(
      cf,
    );
  }

  late final _CFMakeCollectable3Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable3 =
      _CFMakeCollectable3Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone3() {
    return _NSDefaultMallocZone3();
  }

  late final _NSDefaultMallocZone3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone3 =
      _NSDefaultMallocZone3Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone3(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone3(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone3 = _NSCreateZone3Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone3(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone3(
      zone,
    );
  }

  late final _NSRecycleZone3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone3 =
      _NSRecycleZone3Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName3(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName3(
      zone,
      name,
    );
  }

  late final _NSSetZoneName3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName3 = _NSSetZoneName3Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName3(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName3(
      zone,
    );
  }

  late final _NSZoneName3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName3 = _NSZoneName3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer3(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer3(
      ptr,
    );
  }

  late final _NSZoneFromPointer3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer3 = _NSZoneFromPointer3Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc3(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc3(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc3 = _NSZoneMalloc3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc3(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc3(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc3 = _NSZoneCalloc3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc3(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc3(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc3 = _NSZoneRealloc3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree3(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree3(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree3 = _NSZoneFree3Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable3(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable3(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable3 = _NSAllocateCollectable3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable3(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable3(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable3 =
      _NSReallocateCollectable3Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize3() {
    return _NSPageSize3();
  }

  late final _NSPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize3 = _NSPageSize3Ptr.asFunction<int Function()>();

  int NSLogPageSize3() {
    return _NSLogPageSize3();
  }

  late final _NSLogPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize3 = _NSLogPageSize3Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize3(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize3(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize3 =
      _NSRoundUpToMultipleOfPageSize3Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize3(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize3(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize3 =
      _NSRoundDownToMultipleOfPageSize3Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages3(
    int bytes,
  ) {
    return _NSAllocateMemoryPages3(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages3 = _NSAllocateMemoryPages3Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages3(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages3(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages3 = _NSDeallocateMemoryPages3Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages3(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages3(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages3 = _NSCopyMemoryPages3Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable3() {
    return _NSRealMemoryAvailable3();
  }

  late final _NSRealMemoryAvailable3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable3 =
      _NSRealMemoryAvailable3Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject3(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject3(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject3 = _NSAllocateObject3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject3(
      object,
    );
  }

  late final _NSDeallocateObject3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject3 = _NSDeallocateObject3Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject3(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject3(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject3 = _NSCopyObject3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone3(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone3(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone3 = _NSShouldRetainWithZone3Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount3(
      object,
    );
  }

  late final _NSIncrementExtraRefCount3Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount3 = _NSIncrementExtraRefCount3Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero3(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero3Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero3 =
      _NSDecrementExtraRefCountWasZero3Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount3(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount3(
      object,
    );
  }

  late final _NSExtraRefCount3Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount3 =
      _NSExtraRefCount3Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSNotification1 =
      _getClass1("NSNotification");
  late final ffi.Pointer<ObjCSel> _sel_name1 = _registerName1("name");
  late final ffi.Pointer<ObjCSel> _sel_userInfo1 = _registerName1("userInfo");
  late final ffi.Pointer<ObjCSel> _sel_initWithName_object_userInfo_1 =
      _registerName1("initWithName:object:userInfo:");
  instancetype _objc_msgSend_182(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSNotificationName name,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> userInfo,
  ) {
    return __objc_msgSend_182(
      obj,
      sel,
      name,
      object,
      userInfo,
    );
  }

  late final __objc_msgSend_182Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_182 = __objc_msgSend_182Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_notificationWithName_object_1 =
      _registerName1("notificationWithName:object:");
  late final ffi.Pointer<ObjCSel> _sel_notificationWithName_object_userInfo_1 =
      _registerName1("notificationWithName:object:userInfo:");
  late final ffi.Pointer<ObjCObject> _class_NSNotificationCenter1 =
      _getClass1("NSNotificationCenter");
  late final ffi.Pointer<ObjCSel> _sel_defaultCenter1 =
      _registerName1("defaultCenter");
  late final ffi.Pointer<ObjCSel> _sel_addObserver_selector_name_object_1 =
      _registerName1("addObserver:selector:name:object:");
  void _objc_msgSend_183(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> observer,
    ffi.Pointer<ObjCSel> aSelector,
    NSNotificationName aName,
    ffi.Pointer<ObjCObject> anObject,
  ) {
    return __objc_msgSend_183(
      obj,
      sel,
      observer,
      aSelector,
      aName,
      anObject,
    );
  }

  late final __objc_msgSend_183Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_183 = __objc_msgSend_183Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_postNotification_1 =
      _registerName1("postNotification:");
  late final ffi.Pointer<ObjCSel> _sel_postNotificationName_object_1 =
      _registerName1("postNotificationName:object:");
  late final ffi.Pointer<ObjCSel> _sel_postNotificationName_object_userInfo_1 =
      _registerName1("postNotificationName:object:userInfo:");
  void _objc_msgSend_184(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSNotificationName aName,
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<ObjCObject> aUserInfo,
  ) {
    return __objc_msgSend_184(
      obj,
      sel,
      aName,
      anObject,
      aUserInfo,
    );
  }

  late final __objc_msgSend_184Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_184 = __objc_msgSend_184Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_removeObserver_1 =
      _registerName1("removeObserver:");
  late final ffi.Pointer<ObjCSel> _sel_removeObserver_name_object_1 =
      _registerName1("removeObserver:name:object:");
  late final ffi.Pointer<ObjCSel>
      _sel_addObserverForName_object_queue_usingBlock_1 =
      _registerName1("addObserverForName:object:queue:usingBlock:");
  ffi.Pointer<ObjCObject> _objc_msgSend_185(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSNotificationName name,
    ffi.Pointer<ObjCObject> obj1,
    ffi.Pointer<ObjCObject> queue,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_185(
      obj,
      sel,
      name,
      obj1,
      queue,
      block,
    );
  }

  late final __objc_msgSend_185Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSNotificationName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_185 = __objc_msgSend_185Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSNotificationName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<NSNotificationName>
      _NSSystemClockDidChangeNotification =
      _lookup<NSNotificationName>('NSSystemClockDidChangeNotification');

  NSNotificationName get NSSystemClockDidChangeNotification =>
      _NSSystemClockDidChangeNotification.value;

  set NSSystemClockDidChangeNotification(NSNotificationName value) =>
      _NSSystemClockDidChangeNotification.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSDate1 = _getClass1("NSDate");
  late final ffi.Pointer<ObjCSel> _sel_timeIntervalSinceReferenceDate1 =
      _registerName1("timeIntervalSinceReferenceDate");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("initWithTimeIntervalSinceReferenceDate:");
  instancetype _objc_msgSend_186(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double ti,
  ) {
    return __objc_msgSend_186(
      obj,
      sel,
      ti,
    );
  }

  late final __objc_msgSend_186Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_186 = __objc_msgSend_186Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final ffi.Pointer<ObjCSel> _sel_timeIntervalSinceDate_1 =
      _registerName1("timeIntervalSinceDate:");
  double _objc_msgSend_187(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_187(
      obj,
      sel,
      anotherDate,
    );
  }

  late final __objc_msgSend_187Ptr = _lookup<
      ffi.NativeFunction<
          NSTimeInterval Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_187 = __objc_msgSend_187Ptr.asFunction<
      double Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_timeIntervalSinceNow1 =
      _registerName1("timeIntervalSinceNow");
  late final ffi.Pointer<ObjCSel> _sel_timeIntervalSince19701 =
      _registerName1("timeIntervalSince1970");
  late final ffi.Pointer<ObjCSel> _sel_addTimeInterval_1 =
      _registerName1("addTimeInterval:");
  late final ffi.Pointer<ObjCSel> _sel_dateByAddingTimeInterval_1 =
      _registerName1("dateByAddingTimeInterval:");
  late final ffi.Pointer<ObjCSel> _sel_earlierDate_1 =
      _registerName1("earlierDate:");
  ffi.Pointer<ObjCObject> _objc_msgSend_188(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anotherDate,
  ) {
    return __objc_msgSend_188(
      obj,
      sel,
      anotherDate,
    );
  }

  late final __objc_msgSend_188Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_188 = __objc_msgSend_188Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_laterDate_1 =
      _registerName1("laterDate:");
  late final ffi.Pointer<ObjCSel> _sel_isEqualToDate_1 =
      _registerName1("isEqualToDate:");
  late final ffi.Pointer<ObjCSel> _sel_date1 = _registerName1("date");
  late final ffi.Pointer<ObjCSel> _sel_dateWithTimeIntervalSinceNow_1 =
      _registerName1("dateWithTimeIntervalSinceNow:");
  late final ffi.Pointer<ObjCSel>
      _sel_dateWithTimeIntervalSinceReferenceDate_1 =
      _registerName1("dateWithTimeIntervalSinceReferenceDate:");
  late final ffi.Pointer<ObjCSel> _sel_dateWithTimeIntervalSince1970_1 =
      _registerName1("dateWithTimeIntervalSince1970:");
  late final ffi.Pointer<ObjCSel> _sel_dateWithTimeInterval_sinceDate_1 =
      _registerName1("dateWithTimeInterval:sinceDate:");
  instancetype _objc_msgSend_189(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double secsToBeAdded,
    ffi.Pointer<ObjCObject> date,
  ) {
    return __objc_msgSend_189(
      obj,
      sel,
      secsToBeAdded,
      date,
    );
  }

  late final __objc_msgSend_189Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_189 = __objc_msgSend_189Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          double, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_distantFuture1 =
      _registerName1("distantFuture");
  late final ffi.Pointer<ObjCSel> _sel_distantPast1 =
      _registerName1("distantPast");
  late final ffi.Pointer<ObjCSel> _sel_now1 = _registerName1("now");
  late final ffi.Pointer<ObjCSel> _sel_initWithTimeIntervalSinceNow_1 =
      _registerName1("initWithTimeIntervalSinceNow:");
  late final ffi.Pointer<ObjCSel> _sel_initWithTimeIntervalSince1970_1 =
      _registerName1("initWithTimeIntervalSince1970:");
  late final ffi.Pointer<ObjCSel> _sel_initWithTimeInterval_sinceDate_1 =
      _registerName1("initWithTimeInterval:sinceDate:");
  late final ffi.Pointer<ObjCObject> _class_NSURLRequest1 =
      _getClass1("NSURLRequest");
  late final ffi.Pointer<ObjCSel> _sel_requestWithURL_1 =
      _registerName1("requestWithURL:");
  late final ffi.Pointer<ObjCSel> _sel_supportsSecureCoding1 =
      _registerName1("supportsSecureCoding");
  late final ffi.Pointer<ObjCSel>
      _sel_requestWithURL_cachePolicy_timeoutInterval_1 =
      _registerName1("requestWithURL:cachePolicy:timeoutInterval:");
  instancetype _objc_msgSend_190(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
    int cachePolicy,
    double timeoutInterval,
  ) {
    return __objc_msgSend_190(
      obj,
      sel,
      URL,
      cachePolicy,
      timeoutInterval,
    );
  }

  late final __objc_msgSend_190Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_190 = __objc_msgSend_190Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, double)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithURL_1 =
      _registerName1("initWithURL:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithURL_cachePolicy_timeoutInterval_1 =
      _registerName1("initWithURL:cachePolicy:timeoutInterval:");
  late final ffi.Pointer<ObjCSel> _sel_URL1 = _registerName1("URL");
  late final ffi.Pointer<ObjCSel> _sel_cachePolicy1 =
      _registerName1("cachePolicy");
  int _objc_msgSend_191(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_191(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_191Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_191 = __objc_msgSend_191Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_timeoutInterval1 =
      _registerName1("timeoutInterval");
  late final ffi.Pointer<ObjCSel> _sel_mainDocumentURL1 =
      _registerName1("mainDocumentURL");
  late final ffi.Pointer<ObjCSel> _sel_networkServiceType1 =
      _registerName1("networkServiceType");
  int _objc_msgSend_192(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_192(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_192Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_192 = __objc_msgSend_192Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_allowsCellularAccess1 =
      _registerName1("allowsCellularAccess");
  late final ffi.Pointer<ObjCSel> _sel_allowsExpensiveNetworkAccess1 =
      _registerName1("allowsExpensiveNetworkAccess");
  late final ffi.Pointer<ObjCSel> _sel_allowsConstrainedNetworkAccess1 =
      _registerName1("allowsConstrainedNetworkAccess");
  late final ffi.Pointer<ObjCSel> _sel_assumesHTTP3Capable1 =
      _registerName1("assumesHTTP3Capable");
  late final ffi.Pointer<ObjCSel> _sel_HTTPMethod1 =
      _registerName1("HTTPMethod");
  late final ffi.Pointer<ObjCSel> _sel_allHTTPHeaderFields1 =
      _registerName1("allHTTPHeaderFields");
  late final ffi.Pointer<ObjCSel> _sel_valueForHTTPHeaderField_1 =
      _registerName1("valueForHTTPHeaderField:");
  late final ffi.Pointer<ObjCSel> _sel_HTTPBody1 = _registerName1("HTTPBody");
  late final ffi.Pointer<ObjCSel> _sel_HTTPBodyStream1 =
      _registerName1("HTTPBodyStream");
  late final ffi.Pointer<ObjCSel> _sel_HTTPShouldHandleCookies1 =
      _registerName1("HTTPShouldHandleCookies");
  late final ffi.Pointer<ObjCSel> _sel_HTTPShouldUsePipelining1 =
      _registerName1("HTTPShouldUsePipelining");
  late final ffi.Pointer<ObjCObject> _class_NSMutableURLRequest1 =
      _getClass1("NSMutableURLRequest");
  late final ffi.Pointer<ObjCSel> _sel_setURL_1 = _registerName1("setURL:");
  late final ffi.Pointer<ObjCSel> _sel_setCachePolicy_1 =
      _registerName1("setCachePolicy:");
  void _objc_msgSend_193(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_193(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_193Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_193 = __objc_msgSend_193Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_setTimeoutInterval_1 =
      _registerName1("setTimeoutInterval:");
  void _objc_msgSend_194(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_194(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_194Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSTimeInterval)>>('objc_msgSend');
  late final __objc_msgSend_194 = __objc_msgSend_194Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final ffi.Pointer<ObjCSel> _sel_setMainDocumentURL_1 =
      _registerName1("setMainDocumentURL:");
  late final ffi.Pointer<ObjCSel> _sel_setNetworkServiceType_1 =
      _registerName1("setNetworkServiceType:");
  void _objc_msgSend_195(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_195(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_195Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_195 = __objc_msgSend_195Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_setAllowsCellularAccess_1 =
      _registerName1("setAllowsCellularAccess:");
  void _objc_msgSend_196(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool value,
  ) {
    return __objc_msgSend_196(
      obj,
      sel,
      value ? 1 : 0,
    );
  }

  late final __objc_msgSend_196Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_196 = __objc_msgSend_196Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_setAllowsExpensiveNetworkAccess_1 =
      _registerName1("setAllowsExpensiveNetworkAccess:");
  late final ffi.Pointer<ObjCSel> _sel_setAllowsConstrainedNetworkAccess_1 =
      _registerName1("setAllowsConstrainedNetworkAccess:");
  late final ffi.Pointer<ObjCSel> _sel_setAssumesHTTP3Capable_1 =
      _registerName1("setAssumesHTTP3Capable:");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPMethod_1 =
      _registerName1("setHTTPMethod:");
  late final ffi.Pointer<ObjCSel> _sel_setAllHTTPHeaderFields_1 =
      _registerName1("setAllHTTPHeaderFields:");
  late final ffi.Pointer<ObjCSel> _sel_setValue_forHTTPHeaderField_1 =
      _registerName1("setValue:forHTTPHeaderField:");
  late final ffi.Pointer<ObjCSel> _sel_addValue_forHTTPHeaderField_1 =
      _registerName1("addValue:forHTTPHeaderField:");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPBody_1 =
      _registerName1("setHTTPBody:");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPBodyStream_1 =
      _registerName1("setHTTPBodyStream:");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPShouldHandleCookies_1 =
      _registerName1("setHTTPShouldHandleCookies:");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPShouldUsePipelining_1 =
      _registerName1("setHTTPShouldUsePipelining:");
  ffi.Pointer<ObjCObject> NSStringFromSelector4(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector4(
      aSelector,
    );
  }

  late final _NSStringFromSelector4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector4 = _NSStringFromSelector4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString4(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString4(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString4 = _NSSelectorFromString4Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass4(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass4(
      aClass,
    );
  }

  late final _NSStringFromClass4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass4 = _NSStringFromClass4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString4(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString4(
      aClassName,
    );
  }

  late final _NSClassFromString4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString4 = _NSClassFromString4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol4(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol4(
      proto,
    );
  }

  late final _NSStringFromProtocol4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol4 = _NSStringFromProtocol4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString4(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString4(
      namestr,
    );
  }

  late final _NSProtocolFromString4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString4 = _NSProtocolFromString4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment4(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment4(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment4 = _NSGetSizeAndAlignment4Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog4(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog4(
      format,
    );
  }

  late final _NSLog4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog4 =
      _NSLog4Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv4(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv4(
      format,
      args,
    );
  }

  late final _NSLogv4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv4 =
      _NSLogv4Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake4(
    int loc,
    int len,
  ) {
    return ___CFRangeMake4(
      loc,
      len,
    );
  }

  late final ___CFRangeMake4Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake4 =
      ___CFRangeMake4Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID4() {
    return _CFNullGetTypeID4();
  }

  late final _CFNullGetTypeID4Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID4 =
      _CFNullGetTypeID4Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID4() {
    return _CFAllocatorGetTypeID4();
  }

  late final _CFAllocatorGetTypeID4Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID4 =
      _CFAllocatorGetTypeID4Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault4(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault4(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault4 =
      _CFAllocatorSetDefault4Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault4() {
    return _CFAllocatorGetDefault4();
  }

  late final _CFAllocatorGetDefault4Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault4 =
      _CFAllocatorGetDefault4Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate4(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate4(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate4Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate4 = _CFAllocatorCreate4Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate4(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate4(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate4 = _CFAllocatorAllocate4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate4(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate4(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate4 = _CFAllocatorReallocate4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate4(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate4(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate4 = _CFAllocatorDeallocate4Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize4(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize4(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize4Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize4 =
      _CFAllocatorGetPreferredSizeForSize4Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext4(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext4(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext4 = _CFAllocatorGetContext4Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID4(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID4(
      cf,
    );
  }

  late final _CFGetTypeID4Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID4 =
      _CFGetTypeID4Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription4(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription4(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription4Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription4 =
      _CFCopyTypeIDDescription4Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain4(
    CFTypeRef cf,
  ) {
    return _CFRetain4(
      cf,
    );
  }

  late final _CFRetain4Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain4 =
      _CFRetain4Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease4(
    CFTypeRef cf,
  ) {
    return _CFRelease4(
      cf,
    );
  }

  late final _CFRelease4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease4 =
      _CFRelease4Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease4(
    CFTypeRef arg,
  ) {
    return _CFAutorelease4(
      arg,
    );
  }

  late final _CFAutorelease4Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease4 =
      _CFAutorelease4Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount4(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount4(
      cf,
    );
  }

  late final _CFGetRetainCount4Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount4 =
      _CFGetRetainCount4Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual4(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual4(
      cf1,
      cf2,
    );
  }

  late final _CFEqual4Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual4 =
      _CFEqual4Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash4(
    CFTypeRef cf,
  ) {
    return _CFHash4(
      cf,
    );
  }

  late final _CFHash4Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash4 = _CFHash4Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription4(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription4(
      cf,
    );
  }

  late final _CFCopyDescription4Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription4 =
      _CFCopyDescription4Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator4(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator4(
      cf,
    );
  }

  late final _CFGetAllocator4Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator4 =
      _CFGetAllocator4Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable4(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable4(
      cf,
    );
  }

  late final _CFMakeCollectable4Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable4 =
      _CFMakeCollectable4Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone4() {
    return _NSDefaultMallocZone4();
  }

  late final _NSDefaultMallocZone4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone4 =
      _NSDefaultMallocZone4Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone4(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone4(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone4 = _NSCreateZone4Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone4(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone4(
      zone,
    );
  }

  late final _NSRecycleZone4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone4 =
      _NSRecycleZone4Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName4(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName4(
      zone,
      name,
    );
  }

  late final _NSSetZoneName4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName4 = _NSSetZoneName4Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName4(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName4(
      zone,
    );
  }

  late final _NSZoneName4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName4 = _NSZoneName4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer4(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer4(
      ptr,
    );
  }

  late final _NSZoneFromPointer4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer4 = _NSZoneFromPointer4Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc4(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc4(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc4 = _NSZoneMalloc4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc4(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc4(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc4 = _NSZoneCalloc4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc4(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc4(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc4 = _NSZoneRealloc4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree4(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree4(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree4 = _NSZoneFree4Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable4(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable4(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable4 = _NSAllocateCollectable4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable4(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable4(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable4 =
      _NSReallocateCollectable4Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize4() {
    return _NSPageSize4();
  }

  late final _NSPageSize4Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize4 = _NSPageSize4Ptr.asFunction<int Function()>();

  int NSLogPageSize4() {
    return _NSLogPageSize4();
  }

  late final _NSLogPageSize4Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize4 = _NSLogPageSize4Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize4(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize4(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize4Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize4 =
      _NSRoundUpToMultipleOfPageSize4Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize4(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize4(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize4Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize4 =
      _NSRoundDownToMultipleOfPageSize4Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages4(
    int bytes,
  ) {
    return _NSAllocateMemoryPages4(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages4Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages4 = _NSAllocateMemoryPages4Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages4(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages4(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages4 = _NSDeallocateMemoryPages4Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages4(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages4(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages4 = _NSCopyMemoryPages4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable4() {
    return _NSRealMemoryAvailable4();
  }

  late final _NSRealMemoryAvailable4Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable4 =
      _NSRealMemoryAvailable4Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject4(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject4(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject4 = _NSAllocateObject4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject4(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject4(
      object,
    );
  }

  late final _NSDeallocateObject4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject4 = _NSDeallocateObject4Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject4(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject4(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject4 = _NSCopyObject4Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone4(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone4(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone4 = _NSShouldRetainWithZone4Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount4(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount4(
      object,
    );
  }

  late final _NSIncrementExtraRefCount4Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount4 = _NSIncrementExtraRefCount4Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero4(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero4(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero4Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero4 =
      _NSDecrementExtraRefCountWasZero4Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount4(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount4(
      object,
    );
  }

  late final _NSExtraRefCount4Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount4 =
      _NSExtraRefCount4Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSHTTPCookieStorage1 =
      _getClass1("NSHTTPCookieStorage");
  late final ffi.Pointer<ObjCSel> _sel_sharedHTTPCookieStorage1 =
      _registerName1("sharedHTTPCookieStorage");
  late final ffi.Pointer<ObjCSel>
      _sel_sharedCookieStorageForGroupContainerIdentifier_1 =
      _registerName1("sharedCookieStorageForGroupContainerIdentifier:");
  ffi.Pointer<ObjCObject> _objc_msgSend_197(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> identifier,
  ) {
    return __objc_msgSend_197(
      obj,
      sel,
      identifier,
    );
  }

  late final __objc_msgSend_197Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_197 = __objc_msgSend_197Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_cookies1 = _registerName1("cookies");
  late final ffi.Pointer<ObjCSel> _sel_setCookie_1 =
      _registerName1("setCookie:");
  late final ffi.Pointer<ObjCSel> _sel_deleteCookie_1 =
      _registerName1("deleteCookie:");
  late final ffi.Pointer<ObjCSel> _sel_removeCookiesSinceDate_1 =
      _registerName1("removeCookiesSinceDate:");
  late final ffi.Pointer<ObjCSel> _sel_setCookies_forURL_mainDocumentURL_1 =
      _registerName1("setCookies:forURL:mainDocumentURL:");
  late final ffi.Pointer<ObjCSel> _sel_cookieAcceptPolicy1 =
      _registerName1("cookieAcceptPolicy");
  int _objc_msgSend_198(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_198(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_198Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_198 = __objc_msgSend_198Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setCookieAcceptPolicy_1 =
      _registerName1("setCookieAcceptPolicy:");
  void _objc_msgSend_199(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_199(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_199Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_199 = __objc_msgSend_199Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_storeCookies_forTask_1 =
      _registerName1("storeCookies:forTask:");
  late final ffi.Pointer<ObjCSel> _sel_getCookiesForTask_completionHandler_1 =
      _registerName1("getCookiesForTask:completionHandler:");
  void _objc_msgSend_200(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> task,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_200(
      obj,
      sel,
      task,
      completionHandler,
    );
  }

  late final __objc_msgSend_200Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_200 = __objc_msgSend_200Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<NSNotificationName>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification =
      _lookup<NSNotificationName>(
          'NSHTTPCookieManagerAcceptPolicyChangedNotification');

  NSNotificationName get NSHTTPCookieManagerAcceptPolicyChangedNotification =>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification.value;

  set NSHTTPCookieManagerAcceptPolicyChangedNotification(
          NSNotificationName value) =>
      _NSHTTPCookieManagerAcceptPolicyChangedNotification.value = value;

  late final ffi.Pointer<NSNotificationName>
      _NSHTTPCookieManagerCookiesChangedNotification =
      _lookup<NSNotificationName>(
          'NSHTTPCookieManagerCookiesChangedNotification');

  NSNotificationName get NSHTTPCookieManagerCookiesChangedNotification =>
      _NSHTTPCookieManagerCookiesChangedNotification.value;

  set NSHTTPCookieManagerCookiesChangedNotification(NSNotificationName value) =>
      _NSHTTPCookieManagerCookiesChangedNotification.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSProgress1 =
      _getClass1("NSProgress");
  late final ffi.Pointer<ObjCSel> _sel_currentProgress1 =
      _registerName1("currentProgress");
  ffi.Pointer<ObjCObject> _objc_msgSend_201(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_201(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_201Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_201 = __objc_msgSend_201Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_progressWithTotalUnitCount_1 =
      _registerName1("progressWithTotalUnitCount:");
  ffi.Pointer<ObjCObject> _objc_msgSend_202(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
  ) {
    return __objc_msgSend_202(
      obj,
      sel,
      unitCount,
    );
  }

  late final __objc_msgSend_202Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_202 = __objc_msgSend_202Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_discreteProgressWithTotalUnitCount_1 =
      _registerName1("discreteProgressWithTotalUnitCount:");
  late final ffi.Pointer<ObjCSel>
      _sel_progressWithTotalUnitCount_parent_pendingUnitCount_1 =
      _registerName1("progressWithTotalUnitCount:parent:pendingUnitCount:");
  ffi.Pointer<ObjCObject> _objc_msgSend_203(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
    ffi.Pointer<ObjCObject> parent,
    int portionOfParentTotalUnitCount,
  ) {
    return __objc_msgSend_203(
      obj,
      sel,
      unitCount,
      parent,
      portionOfParentTotalUnitCount,
    );
  }

  late final __objc_msgSend_203Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int64,
              ffi.Pointer<ObjCObject>,
              ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_203 = __objc_msgSend_203Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, int, ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithParent_userInfo_1 =
      _registerName1("initWithParent:userInfo:");
  late final ffi.Pointer<ObjCSel> _sel_becomeCurrentWithPendingUnitCount_1 =
      _registerName1("becomeCurrentWithPendingUnitCount:");
  void _objc_msgSend_204(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
  ) {
    return __objc_msgSend_204(
      obj,
      sel,
      unitCount,
    );
  }

  late final __objc_msgSend_204Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_204 = __objc_msgSend_204Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_performAsCurrentWithPendingUnitCount_usingBlock_1 =
      _registerName1("performAsCurrentWithPendingUnitCount:usingBlock:");
  void _objc_msgSend_205(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int unitCount,
    ffi.Pointer<_ObjCBlock> work,
  ) {
    return __objc_msgSend_205(
      obj,
      sel,
      unitCount,
      work,
    );
  }

  late final __objc_msgSend_205Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int64, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_205 = __objc_msgSend_205Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_resignCurrent1 =
      _registerName1("resignCurrent");
  late final ffi.Pointer<ObjCSel> _sel_addChild_withPendingUnitCount_1 =
      _registerName1("addChild:withPendingUnitCount:");
  void _objc_msgSend_206(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> child,
    int inUnitCount,
  ) {
    return __objc_msgSend_206(
      obj,
      sel,
      child,
      inUnitCount,
    );
  }

  late final __objc_msgSend_206Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int64)>>('objc_msgSend');
  late final __objc_msgSend_206 = __objc_msgSend_206Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_totalUnitCount1 =
      _registerName1("totalUnitCount");
  int _objc_msgSend_207(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_207(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_207Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_207 = __objc_msgSend_207Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setTotalUnitCount_1 =
      _registerName1("setTotalUnitCount:");
  late final ffi.Pointer<ObjCSel> _sel_completedUnitCount1 =
      _registerName1("completedUnitCount");
  late final ffi.Pointer<ObjCSel> _sel_setCompletedUnitCount_1 =
      _registerName1("setCompletedUnitCount:");
  late final ffi.Pointer<ObjCSel> _sel_localizedDescription1 =
      _registerName1("localizedDescription");
  late final ffi.Pointer<ObjCSel> _sel_setLocalizedDescription_1 =
      _registerName1("setLocalizedDescription:");
  late final ffi.Pointer<ObjCSel> _sel_localizedAdditionalDescription1 =
      _registerName1("localizedAdditionalDescription");
  late final ffi.Pointer<ObjCSel> _sel_setLocalizedAdditionalDescription_1 =
      _registerName1("setLocalizedAdditionalDescription:");
  late final ffi.Pointer<ObjCSel> _sel_isCancellable1 =
      _registerName1("isCancellable");
  late final ffi.Pointer<ObjCSel> _sel_setCancellable_1 =
      _registerName1("setCancellable:");
  late final ffi.Pointer<ObjCSel> _sel_isPausable1 =
      _registerName1("isPausable");
  late final ffi.Pointer<ObjCSel> _sel_setPausable_1 =
      _registerName1("setPausable:");
  late final ffi.Pointer<ObjCSel> _sel_isCancelled1 =
      _registerName1("isCancelled");
  late final ffi.Pointer<ObjCSel> _sel_isPaused1 = _registerName1("isPaused");
  late final ffi.Pointer<ObjCSel> _sel_cancellationHandler1 =
      _registerName1("cancellationHandler");
  ffi.Pointer<_ObjCBlock> _objc_msgSend_208(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_208(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_208Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<_ObjCBlock> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_208 = __objc_msgSend_208Ptr.asFunction<
      ffi.Pointer<_ObjCBlock> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setCancellationHandler_1 =
      _registerName1("setCancellationHandler:");
  void _objc_msgSend_209(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> value,
  ) {
    return __objc_msgSend_209(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_209Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_209 = __objc_msgSend_209Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_pausingHandler1 =
      _registerName1("pausingHandler");
  late final ffi.Pointer<ObjCSel> _sel_setPausingHandler_1 =
      _registerName1("setPausingHandler:");
  late final ffi.Pointer<ObjCSel> _sel_resumingHandler1 =
      _registerName1("resumingHandler");
  late final ffi.Pointer<ObjCSel> _sel_setResumingHandler_1 =
      _registerName1("setResumingHandler:");
  late final ffi.Pointer<ObjCSel> _sel_setUserInfoObject_forKey_1 =
      _registerName1("setUserInfoObject:forKey:");
  late final ffi.Pointer<ObjCSel> _sel_isIndeterminate1 =
      _registerName1("isIndeterminate");
  late final ffi.Pointer<ObjCSel> _sel_fractionCompleted1 =
      _registerName1("fractionCompleted");
  late final ffi.Pointer<ObjCSel> _sel_isFinished1 =
      _registerName1("isFinished");
  late final ffi.Pointer<ObjCSel> _sel_cancel1 = _registerName1("cancel");
  late final ffi.Pointer<ObjCSel> _sel_pause1 = _registerName1("pause");
  late final ffi.Pointer<ObjCSel> _sel_resume1 = _registerName1("resume");
  late final ffi.Pointer<ObjCSel> _sel_kind1 = _registerName1("kind");
  late final ffi.Pointer<ObjCSel> _sel_setKind_1 = _registerName1("setKind:");
  late final ffi.Pointer<ObjCSel> _sel_estimatedTimeRemaining1 =
      _registerName1("estimatedTimeRemaining");
  late final ffi.Pointer<ObjCSel> _sel_setEstimatedTimeRemaining_1 =
      _registerName1("setEstimatedTimeRemaining:");
  late final ffi.Pointer<ObjCSel> _sel_throughput1 =
      _registerName1("throughput");
  late final ffi.Pointer<ObjCSel> _sel_setThroughput_1 =
      _registerName1("setThroughput:");
  late final ffi.Pointer<ObjCSel> _sel_fileOperationKind1 =
      _registerName1("fileOperationKind");
  late final ffi.Pointer<ObjCSel> _sel_setFileOperationKind_1 =
      _registerName1("setFileOperationKind:");
  late final ffi.Pointer<ObjCSel> _sel_fileURL1 = _registerName1("fileURL");
  late final ffi.Pointer<ObjCSel> _sel_setFileURL_1 =
      _registerName1("setFileURL:");
  late final ffi.Pointer<ObjCSel> _sel_fileTotalCount1 =
      _registerName1("fileTotalCount");
  late final ffi.Pointer<ObjCSel> _sel_setFileTotalCount_1 =
      _registerName1("setFileTotalCount:");
  late final ffi.Pointer<ObjCSel> _sel_fileCompletedCount1 =
      _registerName1("fileCompletedCount");
  late final ffi.Pointer<ObjCSel> _sel_setFileCompletedCount_1 =
      _registerName1("setFileCompletedCount:");
  late final ffi.Pointer<ObjCSel> _sel_publish1 = _registerName1("publish");
  late final ffi.Pointer<ObjCSel> _sel_unpublish1 = _registerName1("unpublish");
  late final ffi.Pointer<ObjCSel>
      _sel_addSubscriberForFileURL_withPublishingHandler_1 =
      _registerName1("addSubscriberForFileURL:withPublishingHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_210(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    NSProgressPublishingHandler publishingHandler,
  ) {
    return __objc_msgSend_210(
      obj,
      sel,
      url,
      publishingHandler,
    );
  }

  late final __objc_msgSend_210Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSProgressPublishingHandler)>>('objc_msgSend');
  late final __objc_msgSend_210 = __objc_msgSend_210Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          NSProgressPublishingHandler)>();

  late final ffi.Pointer<ObjCSel> _sel_removeSubscriber_1 =
      _registerName1("removeSubscriber:");
  late final ffi.Pointer<ObjCSel> _sel_isOld1 = _registerName1("isOld");
  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressEstimatedTimeRemainingKey =
      _lookup<NSProgressUserInfoKey>('NSProgressEstimatedTimeRemainingKey');

  NSProgressUserInfoKey get NSProgressEstimatedTimeRemainingKey =>
      _NSProgressEstimatedTimeRemainingKey.value;

  set NSProgressEstimatedTimeRemainingKey(NSProgressUserInfoKey value) =>
      _NSProgressEstimatedTimeRemainingKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressThroughputKey =
      _lookup<NSProgressUserInfoKey>('NSProgressThroughputKey');

  NSProgressUserInfoKey get NSProgressThroughputKey =>
      _NSProgressThroughputKey.value;

  set NSProgressThroughputKey(NSProgressUserInfoKey value) =>
      _NSProgressThroughputKey.value = value;

  late final ffi.Pointer<NSProgressKind> _NSProgressKindFile =
      _lookup<NSProgressKind>('NSProgressKindFile');

  NSProgressKind get NSProgressKindFile => _NSProgressKindFile.value;

  set NSProgressKindFile(NSProgressKind value) =>
      _NSProgressKindFile.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileOperationKindKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileOperationKindKey');

  NSProgressUserInfoKey get NSProgressFileOperationKindKey =>
      _NSProgressFileOperationKindKey.value;

  set NSProgressFileOperationKindKey(NSProgressUserInfoKey value) =>
      _NSProgressFileOperationKindKey.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDownloading');

  NSProgressFileOperationKind get NSProgressFileOperationKindDownloading =>
      _NSProgressFileOperationKindDownloading.value;

  set NSProgressFileOperationKindDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDecompressingAfterDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDecompressingAfterDownloading');

  NSProgressFileOperationKind
      get NSProgressFileOperationKindDecompressingAfterDownloading =>
          _NSProgressFileOperationKindDecompressingAfterDownloading.value;

  set NSProgressFileOperationKindDecompressingAfterDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDecompressingAfterDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindReceiving =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindReceiving');

  NSProgressFileOperationKind get NSProgressFileOperationKindReceiving =>
      _NSProgressFileOperationKindReceiving.value;

  set NSProgressFileOperationKindReceiving(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindReceiving.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindCopying =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindCopying');

  NSProgressFileOperationKind get NSProgressFileOperationKindCopying =>
      _NSProgressFileOperationKindCopying.value;

  set NSProgressFileOperationKindCopying(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindCopying.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindUploading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindUploading');

  NSProgressFileOperationKind get NSProgressFileOperationKindUploading =>
      _NSProgressFileOperationKindUploading.value;

  set NSProgressFileOperationKindUploading(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindUploading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDuplicating =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDuplicating');

  NSProgressFileOperationKind get NSProgressFileOperationKindDuplicating =>
      _NSProgressFileOperationKindDuplicating.value;

  set NSProgressFileOperationKindDuplicating(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDuplicating.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileURLKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileURLKey');

  NSProgressUserInfoKey get NSProgressFileURLKey => _NSProgressFileURLKey.value;

  set NSProgressFileURLKey(NSProgressUserInfoKey value) =>
      _NSProgressFileURLKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileTotalCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileTotalCountKey');

  NSProgressUserInfoKey get NSProgressFileTotalCountKey =>
      _NSProgressFileTotalCountKey.value;

  set NSProgressFileTotalCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileTotalCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileCompletedCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileCompletedCountKey');

  NSProgressUserInfoKey get NSProgressFileCompletedCountKey =>
      _NSProgressFileCompletedCountKey.value;

  set NSProgressFileCompletedCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileCompletedCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileAnimationImageKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageKey =>
      _NSProgressFileAnimationImageKey.value;

  set NSProgressFileAnimationImageKey(NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageOriginalRectKey =
      _lookup<NSProgressUserInfoKey>(
          'NSProgressFileAnimationImageOriginalRectKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageOriginalRectKey =>
      _NSProgressFileAnimationImageOriginalRectKey.value;

  set NSProgressFileAnimationImageOriginalRectKey(
          NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageOriginalRectKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileIconKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileIconKey');

  NSProgressUserInfoKey get NSProgressFileIconKey =>
      _NSProgressFileIconKey.value;

  set NSProgressFileIconKey(NSProgressUserInfoKey value) =>
      _NSProgressFileIconKey.value = value;

  late final ffi.Pointer<CFArrayCallBacks> _kCFTypeArrayCallBacks =
      _lookup<CFArrayCallBacks>('kCFTypeArrayCallBacks');

  CFArrayCallBacks get kCFTypeArrayCallBacks => _kCFTypeArrayCallBacks.ref;

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFArrayGetTypeID');
  late final _CFArrayGetTypeID =
      _CFArrayGetTypeIDPtr.asFunction<int Function()>();

  CFArrayRef CFArrayCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFArrayCreatePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreate');
  late final _CFArrayCreate = _CFArrayCreatePtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int, ffi.Pointer<CFArrayCallBacks>)>();

  CFArrayRef CFArrayCreateCopy(
    CFAllocatorRef allocator,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateCopy(
      allocator,
      theArray,
    );
  }

  late final _CFArrayCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFAllocatorRef, CFArrayRef)>>(
      'CFArrayCreateCopy');
  late final _CFArrayCreateCopy = _CFArrayCreateCopyPtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, CFArrayRef)>();

  CFMutableArrayRef CFArrayCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFArrayCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreateMutable');
  late final _CFArrayCreateMutable = _CFArrayCreateMutablePtr.asFunction<
      CFMutableArrayRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFArrayCallBacks>)>();

  CFMutableArrayRef CFArrayCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateMutableCopy(
      allocator,
      capacity,
      theArray,
    );
  }

  late final _CFArrayCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              CFArrayRef)>>('CFArrayCreateMutableCopy');
  late final _CFArrayCreateMutableCopy =
      _CFArrayCreateMutableCopyPtr.asFunction<
          CFMutableArrayRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFArrayGetCount(
    CFArrayRef theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFArrayRef)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount =
      _CFArrayGetCountPtr.asFunction<int Function(CFArrayRef)>();

  int CFArrayGetCountOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetCountOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetCountOfValue');
  late final _CFArrayGetCountOfValue = _CFArrayGetCountOfValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayContainsValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayContainsValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayContainsValue');
  late final _CFArrayContainsValue = _CFArrayContainsValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    CFArrayRef theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFArrayRef, CFIndex)>>('CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex = _CFArrayGetValueAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFArrayRef, int)>();

  void CFArrayGetValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFArrayGetValues(
      theArray,
      range,
      values,
    );
  }

  late final _CFArrayGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFArrayGetValues');
  late final _CFArrayGetValues = _CFArrayGetValuesPtr.asFunction<
      void Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFArrayApplyFunction(
    CFArrayRef theArray,
    CFRange range,
    CFArrayApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayApplyFunction(
      theArray,
      range,
      applier,
      context,
    );
  }

  late final _CFArrayApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayApplyFunction');
  late final _CFArrayApplyFunction = _CFArrayApplyFunctionPtr.asFunction<
      void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
          ffi.Pointer<ffi.Void>)>();

  int CFArrayGetFirstIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetFirstIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetFirstIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetFirstIndexOfValue');
  late final _CFArrayGetFirstIndexOfValue = _CFArrayGetFirstIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayGetLastIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetLastIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetLastIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetLastIndexOfValue');
  late final _CFArrayGetLastIndexOfValue = _CFArrayGetLastIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayBSearchValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayBSearchValues(
      theArray,
      range,
      value,
      comparator,
      context,
    );
  }

  late final _CFArrayBSearchValuesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFArrayRef,
              CFRange,
              ffi.Pointer<ffi.Void>,
              CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayBSearchValues');
  late final _CFArrayBSearchValues = _CFArrayBSearchValuesPtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>,
          CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendValue(
    CFMutableArrayRef theArray,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayAppendValue(
      theArray,
      value,
    );
  }

  late final _CFArrayAppendValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, ffi.Pointer<ffi.Void>)>>('CFArrayAppendValue');
  late final _CFArrayAppendValue = _CFArrayAppendValuePtr.asFunction<
      void Function(CFMutableArrayRef, ffi.Pointer<ffi.Void>)>();

  void CFArrayInsertValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayInsertValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArrayInsertValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArrayInsertValueAtIndex');
  late final _CFArrayInsertValueAtIndex =
      _CFArrayInsertValueAtIndexPtr.asFunction<
          void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArraySetValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArraySetValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArraySetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArraySetValueAtIndex');
  late final _CFArraySetValueAtIndex = _CFArraySetValueAtIndexPtr.asFunction<
      void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArrayRemoveValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
  ) {
    return _CFArrayRemoveValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayRemoveValueAtIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef, CFIndex)>>(
      'CFArrayRemoveValueAtIndex');
  late final _CFArrayRemoveValueAtIndex = _CFArrayRemoveValueAtIndexPtr
      .asFunction<void Function(CFMutableArrayRef, int)>();

  void CFArrayRemoveAllValues(
    CFMutableArrayRef theArray,
  ) {
    return _CFArrayRemoveAllValues(
      theArray,
    );
  }

  late final _CFArrayRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef)>>(
          'CFArrayRemoveAllValues');
  late final _CFArrayRemoveAllValues =
      _CFArrayRemoveAllValuesPtr.asFunction<void Function(CFMutableArrayRef)>();

  void CFArrayReplaceValues(
    CFMutableArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> newValues,
    int newCount,
  ) {
    return _CFArrayReplaceValues(
      theArray,
      range,
      newValues,
      newCount,
    );
  }

  late final _CFArrayReplaceValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef,
              CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFArrayReplaceValues');
  late final _CFArrayReplaceValues = _CFArrayReplaceValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  void CFArrayExchangeValuesAtIndices(
    CFMutableArrayRef theArray,
    int idx1,
    int idx2,
  ) {
    return _CFArrayExchangeValuesAtIndices(
      theArray,
      idx1,
      idx2,
    );
  }

  late final _CFArrayExchangeValuesAtIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              CFIndex)>>('CFArrayExchangeValuesAtIndices');
  late final _CFArrayExchangeValuesAtIndices =
      _CFArrayExchangeValuesAtIndicesPtr.asFunction<
          void Function(CFMutableArrayRef, int, int)>();

  void CFArraySortValues(
    CFMutableArrayRef theArray,
    CFRange range,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArraySortValues(
      theArray,
      range,
      comparator,
      context,
    );
  }

  late final _CFArraySortValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArraySortValues');
  late final _CFArraySortValues = _CFArraySortValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
          ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendArray(
    CFMutableArrayRef theArray,
    CFArrayRef otherArray,
    CFRange otherRange,
  ) {
    return _CFArrayAppendArray(
      theArray,
      otherArray,
      otherRange,
    );
  }

  late final _CFArrayAppendArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, CFArrayRef, CFRange)>>('CFArrayAppendArray');
  late final _CFArrayAppendArray = _CFArrayAppendArrayPtr.asFunction<
      void Function(CFMutableArrayRef, CFArrayRef, CFRange)>();

  ffi.Pointer<ffi.Void> sec_retain(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_retain(
      obj,
    );
  }

  late final _sec_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('sec_retain');
  late final _sec_retain = _sec_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void sec_release(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_release(
      obj,
    );
  }

  late final _sec_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sec_release');
  late final _sec_release =
      _sec_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  CFStringRef SecCopyErrorMessageString(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              OSStatus, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString = _SecCopyErrorMessageStringPtr
      .asFunction<CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<CFBagCallBacks> _kCFTypeBagCallBacks =
      _lookup<CFBagCallBacks>('kCFTypeBagCallBacks');

  CFBagCallBacks get kCFTypeBagCallBacks => _kCFTypeBagCallBacks.ref;

  late final ffi.Pointer<CFBagCallBacks> _kCFCopyStringBagCallBacks =
      _lookup<CFBagCallBacks>('kCFCopyStringBagCallBacks');

  CFBagCallBacks get kCFCopyStringBagCallBacks =>
      _kCFCopyStringBagCallBacks.ref;

  int CFBagGetTypeID() {
    return _CFBagGetTypeID();
  }

  late final _CFBagGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBagGetTypeID');
  late final _CFBagGetTypeID = _CFBagGetTypeIDPtr.asFunction<int Function()>();

  CFBagRef CFBagCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFBagCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFBagCallBacks>)>>('CFBagCreate');
  late final _CFBagCreate = _CFBagCreatePtr.asFunction<
      CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFBagCallBacks>)>();

  CFBagRef CFBagCreateCopy(
    CFAllocatorRef allocator,
    CFBagRef theBag,
  ) {
    return _CFBagCreateCopy(
      allocator,
      theBag,
    );
  }

  late final _CFBagCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFBagRef Function(CFAllocatorRef, CFBagRef)>>(
          'CFBagCreateCopy');
  late final _CFBagCreateCopy = _CFBagCreateCopyPtr.asFunction<
      CFBagRef Function(CFAllocatorRef, CFBagRef)>();

  CFMutableBagRef CFBagCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFBagCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFBagCallBacks>)>>('CFBagCreateMutable');
  late final _CFBagCreateMutable = _CFBagCreateMutablePtr.asFunction<
      CFMutableBagRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFBagCallBacks>)>();

  CFMutableBagRef CFBagCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBagRef theBag,
  ) {
    return _CFBagCreateMutableCopy(
      allocator,
      capacity,
      theBag,
    );
  }

  late final _CFBagCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(
              CFAllocatorRef, CFIndex, CFBagRef)>>('CFBagCreateMutableCopy');
  late final _CFBagCreateMutableCopy = _CFBagCreateMutableCopyPtr.asFunction<
      CFMutableBagRef Function(CFAllocatorRef, int, CFBagRef)>();

  int CFBagGetCount(
    CFBagRef theBag,
  ) {
    return _CFBagGetCount(
      theBag,
    );
  }

  late final _CFBagGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBagRef)>>('CFBagGetCount');
  late final _CFBagGetCount =
      _CFBagGetCountPtr.asFunction<int Function(CFBagRef)>();

  int CFBagGetCountOfValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetCountOfValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetCountOfValue');
  late final _CFBagGetCountOfValue = _CFBagGetCountOfValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagContainsValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagContainsValue(
      theBag,
      value,
    );
  }

  late final _CFBagContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagContainsValue');
  late final _CFBagContainsValue = _CFBagContainsValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBagGetValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetValue');
  late final _CFBagGetValue = _CFBagGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagGetValueIfPresent(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBagGetValueIfPresent(
      theBag,
      candidate,
      value,
    );
  }

  late final _CFBagGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValueIfPresent');
  late final _CFBagGetValueIfPresent = _CFBagGetValueIfPresentPtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagGetValues(
    CFBagRef theBag,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBagGetValues(
      theBag,
      values,
    );
  }

  late final _CFBagGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValues');
  late final _CFBagGetValues = _CFBagGetValuesPtr.asFunction<
      void Function(CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagApplyFunction(
    CFBagRef theBag,
    CFBagApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBagApplyFunction(
      theBag,
      applier,
      context,
    );
  }

  late final _CFBagApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBagRef, CFBagApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBagApplyFunction');
  late final _CFBagApplyFunction = _CFBagApplyFunctionPtr.asFunction<
      void Function(CFBagRef, CFBagApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFBagAddValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagAddValue(
      theBag,
      value,
    );
  }

  late final _CFBagAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagAddValue');
  late final _CFBagAddValue = _CFBagAddValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagReplaceValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagReplaceValue(
      theBag,
      value,
    );
  }

  late final _CFBagReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagReplaceValue');
  late final _CFBagReplaceValue = _CFBagReplaceValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagSetValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagSetValue(
      theBag,
      value,
    );
  }

  late final _CFBagSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagSetValue');
  late final _CFBagSetValue = _CFBagSetValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagRemoveValue(
      theBag,
      value,
    );
  }

  late final _CFBagRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagRemoveValue');
  late final _CFBagRemoveValue = _CFBagRemoveValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveAllValues(
    CFMutableBagRef theBag,
  ) {
    return _CFBagRemoveAllValues(
      theBag,
    );
  }

  late final _CFBagRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableBagRef)>>(
          'CFBagRemoveAllValues');
  late final _CFBagRemoveAllValues =
      _CFBagRemoveAllValuesPtr.asFunction<void Function(CFMutableBagRef)>();

  late final ffi.Pointer<CFBinaryHeapCallBacks> _kCFStringBinaryHeapCallBacks =
      _lookup<CFBinaryHeapCallBacks>('kCFStringBinaryHeapCallBacks');

  CFBinaryHeapCallBacks get kCFStringBinaryHeapCallBacks =>
      _kCFStringBinaryHeapCallBacks.ref;

  int CFBinaryHeapGetTypeID() {
    return _CFBinaryHeapGetTypeID();
  }

  late final _CFBinaryHeapGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBinaryHeapGetTypeID');
  late final _CFBinaryHeapGetTypeID =
      _CFBinaryHeapGetTypeIDPtr.asFunction<int Function()>();

  CFBinaryHeapRef CFBinaryHeapCreate(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBinaryHeapCallBacks> callBacks,
    ffi.Pointer<CFBinaryHeapCompareContext> compareContext,
  ) {
    return _CFBinaryHeapCreate(
      allocator,
      capacity,
      callBacks,
      compareContext,
    );
  }

  late final _CFBinaryHeapCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(
              CFAllocatorRef,
              CFIndex,
              ffi.Pointer<CFBinaryHeapCallBacks>,
              ffi.Pointer<CFBinaryHeapCompareContext>)>>('CFBinaryHeapCreate');
  late final _CFBinaryHeapCreate = _CFBinaryHeapCreatePtr.asFunction<
      CFBinaryHeapRef Function(
          CFAllocatorRef,
          int,
          ffi.Pointer<CFBinaryHeapCallBacks>,
          ffi.Pointer<CFBinaryHeapCompareContext>)>();

  CFBinaryHeapRef CFBinaryHeapCreateCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapCreateCopy(
      allocator,
      capacity,
      heap,
    );
  }

  late final _CFBinaryHeapCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(CFAllocatorRef, CFIndex,
              CFBinaryHeapRef)>>('CFBinaryHeapCreateCopy');
  late final _CFBinaryHeapCreateCopy = _CFBinaryHeapCreateCopyPtr.asFunction<
      CFBinaryHeapRef Function(CFAllocatorRef, int, CFBinaryHeapRef)>();

  int CFBinaryHeapGetCount(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetCount(
      heap,
    );
  }

  late final _CFBinaryHeapGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapGetCount');
  late final _CFBinaryHeapGetCount =
      _CFBinaryHeapGetCountPtr.asFunction<int Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetCountOfValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapGetCountOfValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapGetCountOfValue');
  late final _CFBinaryHeapGetCountOfValue = _CFBinaryHeapGetCountOfValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  int CFBinaryHeapContainsValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapContainsValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapContainsValue');
  late final _CFBinaryHeapContainsValue = _CFBinaryHeapContainsValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBinaryHeapGetMinimum(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetMinimum(
      heap,
    );
  }

  late final _CFBinaryHeapGetMinimumPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>>(
      'CFBinaryHeapGetMinimum');
  late final _CFBinaryHeapGetMinimum = _CFBinaryHeapGetMinimumPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetMinimumIfPresent(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBinaryHeapGetMinimumIfPresent(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetMinimumIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBinaryHeapGetMinimumIfPresent');
  late final _CFBinaryHeapGetMinimumIfPresent =
      _CFBinaryHeapGetMinimumIfPresentPtr.asFunction<
          int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapGetValues(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBinaryHeapGetValues(
      heap,
      values,
    );
  }

  late final _CFBinaryHeapGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBinaryHeapGetValues');
  late final _CFBinaryHeapGetValues = _CFBinaryHeapGetValuesPtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapApplyFunction(
    CFBinaryHeapRef heap,
    CFBinaryHeapApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBinaryHeapApplyFunction(
      heap,
      applier,
      context,
    );
  }

  late final _CFBinaryHeapApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapApplyFunction');
  late final _CFBinaryHeapApplyFunction =
      _CFBinaryHeapApplyFunctionPtr.asFunction<
          void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapAddValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapAddValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>>('CFBinaryHeapAddValue');
  late final _CFBinaryHeapAddValue = _CFBinaryHeapAddValuePtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapRemoveMinimumValue(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveMinimumValue(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveMinimumValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveMinimumValue');
  late final _CFBinaryHeapRemoveMinimumValue =
      _CFBinaryHeapRemoveMinimumValuePtr.asFunction<
          void Function(CFBinaryHeapRef)>();

  void CFBinaryHeapRemoveAllValues(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveAllValues(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveAllValues');
  late final _CFBinaryHeapRemoveAllValues = _CFBinaryHeapRemoveAllValuesPtr
      .asFunction<void Function(CFBinaryHeapRef)>();

  int CFBitVectorGetTypeID() {
    return _CFBitVectorGetTypeID();
  }

  late final _CFBitVectorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBitVectorGetTypeID');
  late final _CFBitVectorGetTypeID =
      _CFBitVectorGetTypeIDPtr.asFunction<int Function()>();

  CFBitVectorRef CFBitVectorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int numBits,
  ) {
    return _CFBitVectorCreate(
      allocator,
      bytes,
      numBits,
    );
  }

  late final _CFBitVectorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFBitVectorCreate');
  late final _CFBitVectorCreate = _CFBitVectorCreatePtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFBitVectorRef CFBitVectorCreateCopy(
    CFAllocatorRef allocator,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateCopy(
      allocator,
      bv,
    );
  }

  late final _CFBitVectorCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(
              CFAllocatorRef, CFBitVectorRef)>>('CFBitVectorCreateCopy');
  late final _CFBitVectorCreateCopy = _CFBitVectorCreateCopyPtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, CFBitVectorRef)>();

  CFMutableBitVectorRef CFBitVectorCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFBitVectorCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFBitVectorCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, CFIndex)>>('CFBitVectorCreateMutable');
  late final _CFBitVectorCreateMutable = _CFBitVectorCreateMutablePtr
      .asFunction<CFMutableBitVectorRef Function(CFAllocatorRef, int)>();

  CFMutableBitVectorRef CFBitVectorCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateMutableCopy(
      allocator,
      capacity,
      bv,
    );
  }

  late final _CFBitVectorCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(CFAllocatorRef, CFIndex,
              CFBitVectorRef)>>('CFBitVectorCreateMutableCopy');
  late final _CFBitVectorCreateMutableCopy =
      _CFBitVectorCreateMutableCopyPtr.asFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, int, CFBitVectorRef)>();

  int CFBitVectorGetCount(
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorGetCount(
      bv,
    );
  }

  late final _CFBitVectorGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBitVectorRef)>>(
          'CFBitVectorGetCount');
  late final _CFBitVectorGetCount =
      _CFBitVectorGetCountPtr.asFunction<int Function(CFBitVectorRef)>();

  int CFBitVectorGetCountOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetCountOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetCountOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetCountOfBit');
  late final _CFBitVectorGetCountOfBit = _CFBitVectorGetCountOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorContainsBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorContainsBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorContainsBitPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorContainsBit');
  late final _CFBitVectorContainsBit = _CFBitVectorContainsBitPtr.asFunction<
      int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetBitAtIndex(
    CFBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorGetBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorGetBitAtIndexPtr =
      _lookup<ffi.NativeFunction<CFBit Function(CFBitVectorRef, CFIndex)>>(
          'CFBitVectorGetBitAtIndex');
  late final _CFBitVectorGetBitAtIndex = _CFBitVectorGetBitAtIndexPtr
      .asFunction<int Function(CFBitVectorRef, int)>();

  void CFBitVectorGetBits(
    CFBitVectorRef bv,
    CFRange range,
    ffi.Pointer<UInt8> bytes,
  ) {
    return _CFBitVectorGetBits(
      bv,
      range,
      bytes,
    );
  }

  late final _CFBitVectorGetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBitVectorRef, CFRange,
              ffi.Pointer<UInt8>)>>('CFBitVectorGetBits');
  late final _CFBitVectorGetBits = _CFBitVectorGetBitsPtr.asFunction<
      void Function(CFBitVectorRef, CFRange, ffi.Pointer<UInt8>)>();

  int CFBitVectorGetFirstIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetFirstIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetFirstIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetFirstIndexOfBit');
  late final _CFBitVectorGetFirstIndexOfBit = _CFBitVectorGetFirstIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetLastIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetLastIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetLastIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetLastIndexOfBit');
  late final _CFBitVectorGetLastIndexOfBit = _CFBitVectorGetLastIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  void CFBitVectorSetCount(
    CFMutableBitVectorRef bv,
    int count,
  ) {
    return _CFBitVectorSetCount(
      bv,
      count,
    );
  }

  late final _CFBitVectorSetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorSetCount');
  late final _CFBitVectorSetCount = _CFBitVectorSetCountPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorFlipBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorFlipBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorFlipBitAtIndex');
  late final _CFBitVectorFlipBitAtIndex = _CFBitVectorFlipBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBits(
    CFMutableBitVectorRef bv,
    CFRange range,
  ) {
    return _CFBitVectorFlipBits(
      bv,
      range,
    );
  }

  late final _CFBitVectorFlipBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange)>>('CFBitVectorFlipBits');
  late final _CFBitVectorFlipBits = _CFBitVectorFlipBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange)>();

  void CFBitVectorSetBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
    int value,
  ) {
    return _CFBitVectorSetBitAtIndex(
      bv,
      idx,
      value,
    );
  }

  late final _CFBitVectorSetBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableBitVectorRef, CFIndex,
              CFBit)>>('CFBitVectorSetBitAtIndex');
  late final _CFBitVectorSetBitAtIndex = _CFBitVectorSetBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int, int)>();

  void CFBitVectorSetBits(
    CFMutableBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorSetBits(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorSetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange, CFBit)>>('CFBitVectorSetBits');
  late final _CFBitVectorSetBits = _CFBitVectorSetBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange, int)>();

  void CFBitVectorSetAllBits(
    CFMutableBitVectorRef bv,
    int value,
  ) {
    return _CFBitVectorSetAllBits(
      bv,
      value,
    );
  }

  late final _CFBitVectorSetAllBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFBit)>>(
      'CFBitVectorSetAllBits');
  late final _CFBitVectorSetAllBits = _CFBitVectorSetAllBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFTypeDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFTypeDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFTypeDictionaryKeyCallBacks =>
      _kCFTypeDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFCopyStringDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFCopyStringDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFCopyStringDictionaryKeyCallBacks =>
      _kCFCopyStringDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryValueCallBacks>
      _kCFTypeDictionaryValueCallBacks =
      _lookup<CFDictionaryValueCallBacks>('kCFTypeDictionaryValueCallBacks');

  CFDictionaryValueCallBacks get kCFTypeDictionaryValueCallBacks =>
      _kCFTypeDictionaryValueCallBacks.ref;

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy(
    CFAllocatorRef allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef, CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy = _CFDictionaryCreateCopyPtr.asFunction<
      CFDictionaryRef Function(CFAllocatorRef, CFDictionaryRef)>();

  CFMutableDictionaryRef CFDictionaryCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutablePtr = _lookup<
          ffi.NativeFunction<
              CFMutableDictionaryRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable =
      _CFDictionaryCreateMutablePtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFMutableDictionaryRef CFDictionaryCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(CFAllocatorRef, CFIndex,
              CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy =
      _CFDictionaryCreateMutableCopyPtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef, int, CFDictionaryRef)>();

  int CFDictionaryGetCount(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount(
      theDict,
    );
  }

  late final _CFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount =
      _CFDictionaryGetCountPtr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKeyPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey = _CFDictionaryGetCountOfKeyPtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue = _CFDictionaryGetCountOfValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey = _CFDictionaryContainsKeyPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue = _CFDictionaryContainsValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent =
      _CFDictionaryGetValueIfPresentPtr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues =
      _CFDictionaryGetKeysAndValuesPtr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction =
      _CFDictionaryApplyFunctionPtr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue = _CFDictionaryAddValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue = _CFDictionarySetValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue =
      _CFDictionaryReplaceValuePtr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue = _CFDictionaryRemoveValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues(
    CFMutableDictionaryRef theDict,
  ) {
    return _CFDictionaryRemoveAllValues(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDictionaryRef)>>(
          'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues = _CFDictionaryRemoveAllValuesPtr
      .asFunction<void Function(CFMutableDictionaryRef)>();

  int CFNotificationCenterGetTypeID() {
    return _CFNotificationCenterGetTypeID();
  }

  late final _CFNotificationCenterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNotificationCenterGetTypeID');
  late final _CFNotificationCenterGetTypeID =
      _CFNotificationCenterGetTypeIDPtr.asFunction<int Function()>();

  CFNotificationCenterRef CFNotificationCenterGetLocalCenter() {
    return _CFNotificationCenterGetLocalCenter();
  }

  late final _CFNotificationCenterGetLocalCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetLocalCenter');
  late final _CFNotificationCenterGetLocalCenter =
      _CFNotificationCenterGetLocalCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDistributedCenter() {
    return _CFNotificationCenterGetDistributedCenter();
  }

  late final _CFNotificationCenterGetDistributedCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDistributedCenter');
  late final _CFNotificationCenterGetDistributedCenter =
      _CFNotificationCenterGetDistributedCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter() {
    return _CFNotificationCenterGetDarwinNotifyCenter();
  }

  late final _CFNotificationCenterGetDarwinNotifyCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDarwinNotifyCenter');
  late final _CFNotificationCenterGetDarwinNotifyCenter =
      _CFNotificationCenterGetDarwinNotifyCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  void CFNotificationCenterAddObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationCallback callBack,
    CFStringRef name,
    ffi.Pointer<ffi.Void> object,
    int suspensionBehavior,
  ) {
    return _CFNotificationCenterAddObserver(
      center,
      observer,
      callBack,
      name,
      object,
      suspensionBehavior,
    );
  }

  late final _CFNotificationCenterAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('CFNotificationCenterAddObserver');
  late final _CFNotificationCenterAddObserver =
      _CFNotificationCenterAddObserverPtr.asFunction<
          void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              int)>();

  void CFNotificationCenterRemoveObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
  ) {
    return _CFNotificationCenterRemoveObserver(
      center,
      observer,
      name,
      object,
    );
  }

  late final _CFNotificationCenterRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationName,
              ffi.Pointer<ffi.Void>)>>('CFNotificationCenterRemoveObserver');
  late final _CFNotificationCenterRemoveObserver =
      _CFNotificationCenterRemoveObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
              CFNotificationName, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterRemoveEveryObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
  ) {
    return _CFNotificationCenterRemoveEveryObserver(
      center,
      observer,
    );
  }

  late final _CFNotificationCenterRemoveEveryObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>>(
      'CFNotificationCenterRemoveEveryObserver');
  late final _CFNotificationCenterRemoveEveryObserver =
      _CFNotificationCenterRemoveEveryObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterPostNotification(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int deliverImmediately,
  ) {
    return _CFNotificationCenterPostNotification(
      center,
      name,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  late final _CFNotificationCenterPostNotificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              CFNotificationName,
              ffi.Pointer<ffi.Void>,
              CFDictionaryRef,
              Boolean)>>('CFNotificationCenterPostNotification');
  late final _CFNotificationCenterPostNotification =
      _CFNotificationCenterPostNotificationPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  void CFNotificationCenterPostNotificationWithOptions(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int options,
  ) {
    return _CFNotificationCenterPostNotificationWithOptions(
      center,
      name,
      object,
      userInfo,
      options,
    );
  }

  late final _CFNotificationCenterPostNotificationWithOptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFNotificationCenterRef, CFNotificationName,
                  ffi.Pointer<ffi.Void>, CFDictionaryRef, CFOptionFlags)>>(
      'CFNotificationCenterPostNotificationWithOptions');
  late final _CFNotificationCenterPostNotificationWithOptions =
      _CFNotificationCenterPostNotificationWithOptionsPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  int CFLocaleGetTypeID() {
    return _CFLocaleGetTypeID();
  }

  late final _CFLocaleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFLocaleGetTypeID');
  late final _CFLocaleGetTypeID =
      _CFLocaleGetTypeIDPtr.asFunction<int Function()>();

  CFLocaleRef CFLocaleGetSystem() {
    return _CFLocaleGetSystem();
  }

  late final _CFLocaleGetSystemPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>('CFLocaleGetSystem');
  late final _CFLocaleGetSystem =
      _CFLocaleGetSystemPtr.asFunction<CFLocaleRef Function()>();

  CFLocaleRef CFLocaleCopyCurrent() {
    return _CFLocaleCopyCurrent();
  }

  late final _CFLocaleCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>(
          'CFLocaleCopyCurrent');
  late final _CFLocaleCopyCurrent =
      _CFLocaleCopyCurrentPtr.asFunction<CFLocaleRef Function()>();

  CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers() {
    return _CFLocaleCopyAvailableLocaleIdentifiers();
  }

  late final _CFLocaleCopyAvailableLocaleIdentifiersPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyAvailableLocaleIdentifiers');
  late final _CFLocaleCopyAvailableLocaleIdentifiers =
      _CFLocaleCopyAvailableLocaleIdentifiersPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOLanguageCodes() {
    return _CFLocaleCopyISOLanguageCodes();
  }

  late final _CFLocaleCopyISOLanguageCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOLanguageCodes');
  late final _CFLocaleCopyISOLanguageCodes =
      _CFLocaleCopyISOLanguageCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCountryCodes() {
    return _CFLocaleCopyISOCountryCodes();
  }

  late final _CFLocaleCopyISOCountryCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCountryCodes');
  late final _CFLocaleCopyISOCountryCodes =
      _CFLocaleCopyISOCountryCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCurrencyCodes() {
    return _CFLocaleCopyISOCurrencyCodes();
  }

  late final _CFLocaleCopyISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCurrencyCodes');
  late final _CFLocaleCopyISOCurrencyCodes =
      _CFLocaleCopyISOCurrencyCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyCommonISOCurrencyCodes() {
    return _CFLocaleCopyCommonISOCurrencyCodes();
  }

  late final _CFLocaleCopyCommonISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyCommonISOCurrencyCodes');
  late final _CFLocaleCopyCommonISOCurrencyCodes =
      _CFLocaleCopyCommonISOCurrencyCodesPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyPreferredLanguages() {
    return _CFLocaleCopyPreferredLanguages();
  }

  late final _CFLocaleCopyPreferredLanguagesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyPreferredLanguages');
  late final _CFLocaleCopyPreferredLanguages =
      _CFLocaleCopyPreferredLanguagesPtr.asFunction<CFArrayRef Function()>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLanguageIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLanguageIdentifierFromString');
  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString =
      _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLocaleIdentifierFromString');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString =
      _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier
      CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
    CFAllocatorRef allocator,
    int lcode,
    int rcode,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
      allocator,
      lcode,
      rcode,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr =
      _lookup<
              ffi.NativeFunction<
                  CFLocaleIdentifier Function(
                      CFAllocatorRef, LangCode, RegionCode)>>(
          'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes =
      _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr
          .asFunction<CFLocaleIdentifier Function(CFAllocatorRef, int, int)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
    CFAllocatorRef allocator,
    int lcid,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
      allocator,
      lcid,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, ffi.Uint32)>>(
      'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode');
  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode =
      _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, int)>();

  int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
      localeIdentifier,
    );
  }

  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CFLocaleIdentifier)>>(
          'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier');
  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier =
      _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr.asFunction<
          int Function(CFLocaleIdentifier)>();

  int CFLocaleGetLanguageCharacterDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageCharacterDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageCharacterDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringRef)>>(
          'CFLocaleGetLanguageCharacterDirection');
  late final _CFLocaleGetLanguageCharacterDirection =
      _CFLocaleGetLanguageCharacterDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  int CFLocaleGetLanguageLineDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageLineDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageLineDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringRef)>>(
          'CFLocaleGetLanguageLineDirection');
  late final _CFLocaleGetLanguageLineDirection =
      _CFLocaleGetLanguageLineDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeID,
  ) {
    return _CFLocaleCreateComponentsFromLocaleIdentifier(
      allocator,
      localeID,
    );
  }

  late final _CFLocaleCreateComponentsFromLocaleIdentifierPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>>(
      'CFLocaleCreateComponentsFromLocaleIdentifier');
  late final _CFLocaleCreateComponentsFromLocaleIdentifier =
      _CFLocaleCreateComponentsFromLocaleIdentifierPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(
    CFAllocatorRef allocator,
    CFDictionaryRef dictionary,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromComponents(
      allocator,
      dictionary,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromComponentsPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>>(
      'CFLocaleCreateLocaleIdentifierFromComponents');
  late final _CFLocaleCreateLocaleIdentifierFromComponents =
      _CFLocaleCreateLocaleIdentifierFromComponentsPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>();

  CFLocaleRef CFLocaleCreate(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleCreate(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreatePtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleIdentifier)>>('CFLocaleCreate');
  late final _CFLocaleCreate = _CFLocaleCreatePtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleRef CFLocaleCreateCopy(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
  ) {
    return _CFLocaleCreateCopy(
      allocator,
      locale,
    );
  }

  late final _CFLocaleCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleRef)>>('CFLocaleCreateCopy');
  late final _CFLocaleCreateCopy = _CFLocaleCreateCopyPtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>();

  CFLocaleIdentifier CFLocaleGetIdentifier(
    CFLocaleRef locale,
  ) {
    return _CFLocaleGetIdentifier(
      locale,
    );
  }

  late final _CFLocaleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFLocaleIdentifier Function(CFLocaleRef)>>(
          'CFLocaleGetIdentifier');
  late final _CFLocaleGetIdentifier = _CFLocaleGetIdentifierPtr.asFunction<
      CFLocaleIdentifier Function(CFLocaleRef)>();

  CFTypeRef CFLocaleGetValue(
    CFLocaleRef locale,
    CFLocaleKey key,
  ) {
    return _CFLocaleGetValue(
      locale,
      key,
    );
  }

  late final _CFLocaleGetValuePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFLocaleRef, CFLocaleKey)>>(
          'CFLocaleGetValue');
  late final _CFLocaleGetValue = _CFLocaleGetValuePtr.asFunction<
      CFTypeRef Function(CFLocaleRef, CFLocaleKey)>();

  CFStringRef CFLocaleCopyDisplayNameForPropertyValue(
    CFLocaleRef displayLocale,
    CFLocaleKey key,
    CFStringRef value,
  ) {
    return _CFLocaleCopyDisplayNameForPropertyValue(
      displayLocale,
      key,
      value,
    );
  }

  late final _CFLocaleCopyDisplayNameForPropertyValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey,
              CFStringRef)>>('CFLocaleCopyDisplayNameForPropertyValue');
  late final _CFLocaleCopyDisplayNameForPropertyValue =
      _CFLocaleCopyDisplayNameForPropertyValuePtr.asFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey, CFStringRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFLocaleCurrentLocaleDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFLocaleCurrentLocaleDidChangeNotification');

  CFNotificationName get kCFLocaleCurrentLocaleDidChangeNotification =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value;

  set kCFLocaleCurrentLocaleDidChangeNotification(CFNotificationName value) =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleIdentifier');

  CFLocaleKey get kCFLocaleIdentifier => _kCFLocaleIdentifier.value;

  set kCFLocaleIdentifier(CFLocaleKey value) =>
      _kCFLocaleIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleLanguageCode =
      _lookup<CFLocaleKey>('kCFLocaleLanguageCode');

  CFLocaleKey get kCFLocaleLanguageCode => _kCFLocaleLanguageCode.value;

  set kCFLocaleLanguageCode(CFLocaleKey value) =>
      _kCFLocaleLanguageCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCountryCode =
      _lookup<CFLocaleKey>('kCFLocaleCountryCode');

  CFLocaleKey get kCFLocaleCountryCode => _kCFLocaleCountryCode.value;

  set kCFLocaleCountryCode(CFLocaleKey value) =>
      _kCFLocaleCountryCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleScriptCode =
      _lookup<CFLocaleKey>('kCFLocaleScriptCode');

  CFLocaleKey get kCFLocaleScriptCode => _kCFLocaleScriptCode.value;

  set kCFLocaleScriptCode(CFLocaleKey value) =>
      _kCFLocaleScriptCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleVariantCode =
      _lookup<CFLocaleKey>('kCFLocaleVariantCode');

  CFLocaleKey get kCFLocaleVariantCode => _kCFLocaleVariantCode.value;

  set kCFLocaleVariantCode(CFLocaleKey value) =>
      _kCFLocaleVariantCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleExemplarCharacterSet =
      _lookup<CFLocaleKey>('kCFLocaleExemplarCharacterSet');

  CFLocaleKey get kCFLocaleExemplarCharacterSet =>
      _kCFLocaleExemplarCharacterSet.value;

  set kCFLocaleExemplarCharacterSet(CFLocaleKey value) =>
      _kCFLocaleExemplarCharacterSet.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendarIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCalendarIdentifier');

  CFLocaleKey get kCFLocaleCalendarIdentifier =>
      _kCFLocaleCalendarIdentifier.value;

  set kCFLocaleCalendarIdentifier(CFLocaleKey value) =>
      _kCFLocaleCalendarIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendar =
      _lookup<CFLocaleKey>('kCFLocaleCalendar');

  CFLocaleKey get kCFLocaleCalendar => _kCFLocaleCalendar.value;

  set kCFLocaleCalendar(CFLocaleKey value) => _kCFLocaleCalendar.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollationIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollationIdentifier');

  CFLocaleKey get kCFLocaleCollationIdentifier =>
      _kCFLocaleCollationIdentifier.value;

  set kCFLocaleCollationIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollationIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleUsesMetricSystem =
      _lookup<CFLocaleKey>('kCFLocaleUsesMetricSystem');

  CFLocaleKey get kCFLocaleUsesMetricSystem => _kCFLocaleUsesMetricSystem.value;

  set kCFLocaleUsesMetricSystem(CFLocaleKey value) =>
      _kCFLocaleUsesMetricSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleMeasurementSystem =
      _lookup<CFLocaleKey>('kCFLocaleMeasurementSystem');

  CFLocaleKey get kCFLocaleMeasurementSystem =>
      _kCFLocaleMeasurementSystem.value;

  set kCFLocaleMeasurementSystem(CFLocaleKey value) =>
      _kCFLocaleMeasurementSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleDecimalSeparator =
      _lookup<CFLocaleKey>('kCFLocaleDecimalSeparator');

  CFLocaleKey get kCFLocaleDecimalSeparator => _kCFLocaleDecimalSeparator.value;

  set kCFLocaleDecimalSeparator(CFLocaleKey value) =>
      _kCFLocaleDecimalSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleGroupingSeparator =
      _lookup<CFLocaleKey>('kCFLocaleGroupingSeparator');

  CFLocaleKey get kCFLocaleGroupingSeparator =>
      _kCFLocaleGroupingSeparator.value;

  set kCFLocaleGroupingSeparator(CFLocaleKey value) =>
      _kCFLocaleGroupingSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencySymbol =
      _lookup<CFLocaleKey>('kCFLocaleCurrencySymbol');

  CFLocaleKey get kCFLocaleCurrencySymbol => _kCFLocaleCurrencySymbol.value;

  set kCFLocaleCurrencySymbol(CFLocaleKey value) =>
      _kCFLocaleCurrencySymbol.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencyCode =
      _lookup<CFLocaleKey>('kCFLocaleCurrencyCode');

  CFLocaleKey get kCFLocaleCurrencyCode => _kCFLocaleCurrencyCode.value;

  set kCFLocaleCurrencyCode(CFLocaleKey value) =>
      _kCFLocaleCurrencyCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollatorIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollatorIdentifier');

  CFLocaleKey get kCFLocaleCollatorIdentifier =>
      _kCFLocaleCollatorIdentifier.value;

  set kCFLocaleCollatorIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollatorIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationBeginDelimiterKey =>
      _kCFLocaleQuotationBeginDelimiterKey.value;

  set kCFLocaleQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationEndDelimiterKey =>
      _kCFLocaleQuotationEndDelimiterKey.value;

  set kCFLocaleQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationBeginDelimiterKey =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value;

  set kCFLocaleAlternateQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationEndDelimiterKey =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value;

  set kCFLocaleAlternateQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFGregorianCalendar =
      _lookup<CFCalendarIdentifier>('kCFGregorianCalendar');

  CFCalendarIdentifier get kCFGregorianCalendar => _kCFGregorianCalendar.value;

  set kCFGregorianCalendar(CFCalendarIdentifier value) =>
      _kCFGregorianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFBuddhistCalendar =
      _lookup<CFCalendarIdentifier>('kCFBuddhistCalendar');

  CFCalendarIdentifier get kCFBuddhistCalendar => _kCFBuddhistCalendar.value;

  set kCFBuddhistCalendar(CFCalendarIdentifier value) =>
      _kCFBuddhistCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFChineseCalendar =
      _lookup<CFCalendarIdentifier>('kCFChineseCalendar');

  CFCalendarIdentifier get kCFChineseCalendar => _kCFChineseCalendar.value;

  set kCFChineseCalendar(CFCalendarIdentifier value) =>
      _kCFChineseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFHebrewCalendar =
      _lookup<CFCalendarIdentifier>('kCFHebrewCalendar');

  CFCalendarIdentifier get kCFHebrewCalendar => _kCFHebrewCalendar.value;

  set kCFHebrewCalendar(CFCalendarIdentifier value) =>
      _kCFHebrewCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCalendar');

  CFCalendarIdentifier get kCFIslamicCalendar => _kCFIslamicCalendar.value;

  set kCFIslamicCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCivilCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCivilCalendar');

  CFCalendarIdentifier get kCFIslamicCivilCalendar =>
      _kCFIslamicCivilCalendar.value;

  set kCFIslamicCivilCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCivilCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFJapaneseCalendar =
      _lookup<CFCalendarIdentifier>('kCFJapaneseCalendar');

  CFCalendarIdentifier get kCFJapaneseCalendar => _kCFJapaneseCalendar.value;

  set kCFJapaneseCalendar(CFCalendarIdentifier value) =>
      _kCFJapaneseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFRepublicOfChinaCalendar =
      _lookup<CFCalendarIdentifier>('kCFRepublicOfChinaCalendar');

  CFCalendarIdentifier get kCFRepublicOfChinaCalendar =>
      _kCFRepublicOfChinaCalendar.value;

  set kCFRepublicOfChinaCalendar(CFCalendarIdentifier value) =>
      _kCFRepublicOfChinaCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFPersianCalendar =
      _lookup<CFCalendarIdentifier>('kCFPersianCalendar');

  CFCalendarIdentifier get kCFPersianCalendar => _kCFPersianCalendar.value;

  set kCFPersianCalendar(CFCalendarIdentifier value) =>
      _kCFPersianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIndianCalendar =
      _lookup<CFCalendarIdentifier>('kCFIndianCalendar');

  CFCalendarIdentifier get kCFIndianCalendar => _kCFIndianCalendar.value;

  set kCFIndianCalendar(CFCalendarIdentifier value) =>
      _kCFIndianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFISO8601Calendar =
      _lookup<CFCalendarIdentifier>('kCFISO8601Calendar');

  CFCalendarIdentifier get kCFISO8601Calendar => _kCFISO8601Calendar.value;

  set kCFISO8601Calendar(CFCalendarIdentifier value) =>
      _kCFISO8601Calendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicTabularCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicTabularCalendar');

  CFCalendarIdentifier get kCFIslamicTabularCalendar =>
      _kCFIslamicTabularCalendar.value;

  set kCFIslamicTabularCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicTabularCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicUmmAlQuraCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicUmmAlQuraCalendar');

  CFCalendarIdentifier get kCFIslamicUmmAlQuraCalendar =>
      _kCFIslamicUmmAlQuraCalendar.value;

  set kCFIslamicUmmAlQuraCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicUmmAlQuraCalendar.value = value;

  double CFAbsoluteTimeGetCurrent() {
    return _CFAbsoluteTimeGetCurrent();
  }

  late final _CFAbsoluteTimeGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function()>>(
          'CFAbsoluteTimeGetCurrent');
  late final _CFAbsoluteTimeGetCurrent =
      _CFAbsoluteTimeGetCurrentPtr.asFunction<double Function()>();

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1970 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1970');

  double get kCFAbsoluteTimeIntervalSince1970 =>
      _kCFAbsoluteTimeIntervalSince1970.value;

  set kCFAbsoluteTimeIntervalSince1970(double value) =>
      _kCFAbsoluteTimeIntervalSince1970.value = value;

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1904 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1904');

  double get kCFAbsoluteTimeIntervalSince1904 =>
      _kCFAbsoluteTimeIntervalSince1904.value;

  set kCFAbsoluteTimeIntervalSince1904(double value) =>
      _kCFAbsoluteTimeIntervalSince1904.value = value;

  int CFDateGetTypeID() {
    return _CFDateGetTypeID();
  }

  late final _CFDateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDateGetTypeID');
  late final _CFDateGetTypeID =
      _CFDateGetTypeIDPtr.asFunction<int Function()>();

  CFDateRef CFDateCreate(
    CFAllocatorRef allocator,
    double at,
  ) {
    return _CFDateCreate(
      allocator,
      at,
    );
  }

  late final _CFDateCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFAbsoluteTime)>>('CFDateCreate');
  late final _CFDateCreate =
      _CFDateCreatePtr.asFunction<CFDateRef Function(CFAllocatorRef, double)>();

  double CFDateGetAbsoluteTime(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime =
      _CFDateGetAbsoluteTimePtr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDatePtr = _lookup<
          ffi.NativeFunction<CFTimeInterval Function(CFDateRef, CFDateRef)>>(
      'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate =
      _CFDateGetTimeIntervalSinceDatePtr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  int CFDateCompare(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDateCompare(
      theDate,
      otherDate,
      context,
    );
  }

  late final _CFDateComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare = _CFDateComparePtr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFGregorianDateIsValid(
    CFGregorianDate gdate,
    int unitFlags,
  ) {
    return _CFGregorianDateIsValid(
      gdate,
      unitFlags,
    );
  }

  late final _CFGregorianDateIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFGregorianDate, CFOptionFlags)>>(
      'CFGregorianDateIsValid');
  late final _CFGregorianDateIsValid = _CFGregorianDateIsValidPtr.asFunction<
      int Function(CFGregorianDate, int)>();

  double CFGregorianDateGetAbsoluteTime(
    CFGregorianDate gdate,
    CFTimeZoneRef tz,
  ) {
    return _CFGregorianDateGetAbsoluteTime(
      gdate,
      tz,
    );
  }

  late final _CFGregorianDateGetAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFGregorianDate,
              CFTimeZoneRef)>>('CFGregorianDateGetAbsoluteTime');
  late final _CFGregorianDateGetAbsoluteTime =
      _CFGregorianDateGetAbsoluteTimePtr.asFunction<
          double Function(CFGregorianDate, CFTimeZoneRef)>();

  CFGregorianDate CFAbsoluteTimeGetGregorianDate(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetGregorianDate(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetGregorianDatePtr = _lookup<
      ffi.NativeFunction<
          CFGregorianDate Function(CFAbsoluteTime,
              CFTimeZoneRef)>>('CFAbsoluteTimeGetGregorianDate');
  late final _CFAbsoluteTimeGetGregorianDate =
      _CFAbsoluteTimeGetGregorianDatePtr.asFunction<
          CFGregorianDate Function(double, CFTimeZoneRef)>();

  double CFAbsoluteTimeAddGregorianUnits(
    double at,
    CFTimeZoneRef tz,
    CFGregorianUnits units,
  ) {
    return _CFAbsoluteTimeAddGregorianUnits(
      at,
      tz,
      units,
    );
  }

  late final _CFAbsoluteTimeAddGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFAbsoluteTime, CFTimeZoneRef,
              CFGregorianUnits)>>('CFAbsoluteTimeAddGregorianUnits');
  late final _CFAbsoluteTimeAddGregorianUnits =
      _CFAbsoluteTimeAddGregorianUnitsPtr.asFunction<
          double Function(double, CFTimeZoneRef, CFGregorianUnits)>();

  CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(
    double at1,
    double at2,
    CFTimeZoneRef tz,
    int unitFlags,
  ) {
    return _CFAbsoluteTimeGetDifferenceAsGregorianUnits(
      at1,
      at2,
      tz,
      unitFlags,
    );
  }

  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFGregorianUnits Function(
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFTimeZoneRef,
              CFOptionFlags)>>('CFAbsoluteTimeGetDifferenceAsGregorianUnits');
  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits =
      _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr.asFunction<
          CFGregorianUnits Function(double, double, CFTimeZoneRef, int)>();

  int CFAbsoluteTimeGetDayOfWeek(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfWeek(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfWeekPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfWeek');
  late final _CFAbsoluteTimeGetDayOfWeek = _CFAbsoluteTimeGetDayOfWeekPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetDayOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfYear');
  late final _CFAbsoluteTimeGetDayOfYear = _CFAbsoluteTimeGetDayOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetWeekOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetWeekOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetWeekOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetWeekOfYear');
  late final _CFAbsoluteTimeGetWeekOfYear = _CFAbsoluteTimeGetWeekOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFDataGetTypeID() {
    return _CFDataGetTypeID();
  }

  late final _CFDataGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID =
      _CFDataGetTypeIDPtr.asFunction<int Function()>();

  CFDataRef CFDataCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy =
      _CFDataCreateWithBytesNoCopyPtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy = _CFDataCreateCopyPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable = _CFDataCreateMutablePtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy = _CFDataCreateMutableCopyPtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength(
    CFDataRef theData,
  ) {
    return _CFDataGetLength(
      theData,
    );
  }

  late final _CFDataGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength =
      _CFDataGetLengthPtr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr =
      _CFDataGetBytePtrPtr.asFunction<ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr = _CFDataGetMutableBytePtrPtr.asFunction<
      ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes = _CFDataGetBytesPtr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength(
      theData,
      length,
    );
  }

  late final _CFDataSetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength =
      _CFDataSetLengthPtr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength = _CFDataIncreaseLengthPtr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes = _CFDataAppendBytesPtr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes = _CFDataReplaceBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes = _CFDataDeleteBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    int compareOptions,
  ) {
    return _CFDataFind(
      theData,
      dataToFind,
      searchRange,
      compareOptions,
    );
  }

  late final _CFDataFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, ffi.Int32)>>('CFDataFind');
  late final _CFDataFind = _CFDataFindPtr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID() {
    return _CFCharacterSetGetTypeID();
  }

  late final _CFCharacterSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID =
      _CFCharacterSetGetTypeIDPtr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined(
    int theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined(
      theSetIdentifier,
    );
  }

  late final _CFCharacterSetGetPredefinedPtr =
      _lookup<ffi.NativeFunction<CFCharacterSetRef Function(ffi.Int32)>>(
          'CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined = _CFCharacterSetGetPredefinedPtr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFRange)>>('CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange =
      _CFCharacterSetCreateWithCharactersInRangePtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString =
      _CFCharacterSetCreateWithCharactersInStringPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation =
      _CFCharacterSetCreateWithBitmapRepresentationPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSetPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet =
      _CFCharacterSetCreateInvertedSetPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet = _CFCharacterSetIsSupersetOfSetPtr
      .asFunction<int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlanePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane =
      _CFCharacterSetHasMemberInPlanePtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef)>>('CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable = _CFCharacterSetCreateMutablePtr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy =
      _CFCharacterSetCreateCopyPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy =
      _CFCharacterSetCreateMutableCopyPtr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMemberPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember =
      _CFCharacterSetIsCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMemberPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember =
      _CFCharacterSetIsLongCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation =
      _CFCharacterSetCreateBitmapRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange =
      _CFCharacterSetAddCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange =
      _CFCharacterSetRemoveCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString =
      _CFCharacterSetAddCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString =
      _CFCharacterSetRemoveCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion = _CFCharacterSetUnionPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect = _CFCharacterSetIntersectPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert(
      theSet,
    );
  }

  late final _CFCharacterSetInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert = _CFCharacterSetInvertPtr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString =
      _CFStringCreateWithPascalStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param, int)>();

  CFStringRef CFStringCreateWithCString(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, Boolean)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      CFStringRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharactersPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters =
      _CFStringCreateWithCharactersPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ConstStr255Param,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy =
      _CFStringCreateWithPascalStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ConstStr255Param, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCStringNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy =
      _CFStringCreateWithCStringNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int,
              CFAllocatorRef)>();

  CFStringRef CFStringCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              Boolean,
              CFAllocatorRef)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy =
      _CFStringCreateWithBytesNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int,
              int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, CFIndex,
              CFAllocatorRef)>>('CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy =
      _CFStringCreateWithCharactersNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UniChar>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring = _CFStringCreateWithSubstringPtr
      .asFunction<CFStringRef Function(CFAllocatorRef, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef)>>('CFStringCreateCopy');
  late final _CFStringCreateCopy = _CFStringCreateCopyPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormatPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat =
      _CFStringCreateWithFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments =
      _CFStringCreateWithFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDictionaryRef, CFStringRef, va_list)>();

  CFMutableStringRef CFStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable = _CFStringCreateMutablePtr.asFunction<
      CFMutableStringRef Function(CFAllocatorRef, int)>();

  CFMutableStringRef CFStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(CFAllocatorRef, CFIndex,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy =
      _CFStringCreateMutableCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, int, CFStringRef)>();

  CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    int capacity,
    CFAllocatorRef externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
                  CFIndex, CFIndex, CFAllocatorRef)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy =
      _CFStringCreateMutableWithExternalCharactersNoCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int,
              int, CFAllocatorRef)>();

  int CFStringGetLength(
    CFStringRef theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndexPtr =
      _lookup<ffi.NativeFunction<UniChar Function(CFStringRef, CFIndex)>>(
          'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex = _CFStringGetCharacterAtIndexPtr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<UniChar> buffer,
  ) {
    return _CFStringGetCharacters(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<UniChar>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters = _CFStringGetCharactersPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<UniChar>)>();

  int CFStringGetPascalString(
    CFStringRef theString,
    StringPtr buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, StringPtr, CFIndex,
              CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString = _CFStringGetPascalStringPtr.asFunction<
      int Function(CFStringRef, StringPtr, int, int)>();

  int CFStringGetCString(
    CFStringRef theString,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, CFIndex,
              CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString = _CFStringGetCStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  ConstStringPtr CFStringGetPascalStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ConstStringPtr Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr1 = _CFStringGetPascalStringPtrPtr
      .asFunction<ConstStringPtr Function(CFStringRef, int)>();

  ffi.Pointer<pkg_ffi.Char> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr1 = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<UniChar> CFStringGetCharactersPtr(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr1(
      theString,
    );
  }

  late final _CFStringGetCharactersPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UniChar> Function(CFStringRef)>>(
          'CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr1 = _CFStringGetCharactersPtrPtr
      .asFunction<ffi.Pointer<UniChar> Function(CFStringRef)>();

  int CFStringGetBytes(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
    ffi.Pointer<CFIndex> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              UInt8,
              Boolean,
              ffi.Pointer<UInt8>,
              CFIndex,
              ffi.Pointer<CFIndex>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int, ffi.Pointer<UInt8>, int,
          ffi.Pointer<CFIndex>)>();

  CFStringRef CFStringCreateFromExternalRepresentation(
    CFAllocatorRef alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation =
      _CFStringCreateFromExternalRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation(
    CFAllocatorRef alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, CFStringEncoding,
              UInt8)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation =
      _CFStringCreateExternalRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding(
      theString,
    );
  }

  late final _CFStringGetSmallestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding =
      _CFStringGetSmallestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding(
      theString,
    );
  }

  late final _CFStringGetFastestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding =
      _CFStringGetFastestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding() {
    return _CFStringGetSystemEncoding();
  }

  late final _CFStringGetSystemEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding =
      _CFStringGetSystemEncodingPtr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncodingPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFIndex, CFStringEncoding)>>(
          'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding =
      _CFStringGetMaximumSizeForEncodingPtr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation(
    CFStringRef string,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFIndex)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation =
      _CFStringGetFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation =
      _CFStringGetMaximumSizeOfFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentationPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation =
      _CFStringCreateWithFileSystemRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>();

  int CFStringCompareWithOptionsAndLocale(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
    CFLocaleRef locale,
  ) {
    return _CFStringCompareWithOptionsAndLocale(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
      locale,
    );
  }

  late final _CFStringCompareWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringRef, CFStringRef, CFRange, ffi.Int32,
              CFLocaleRef)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale =
      _CFStringCompareWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  int CFStringCompareWithOptions(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
  ) {
    return _CFStringCompareWithOptions(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
    );
  }

  late final _CFStringCompareWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringRef, CFStringRef, CFRange,
              ffi.Int32)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions = _CFStringCompareWithOptionsPtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  int CFStringCompare(
    CFStringRef theString1,
    CFStringRef theString2,
    int compareOptions,
  ) {
    return _CFStringCompare(
      theString1,
      theString2,
      compareOptions,
    );
  }

  late final _CFStringComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFStringRef, CFStringRef, ffi.Int32)>>('CFStringCompare');
  late final _CFStringCompare = _CFStringComparePtr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  int CFStringFindWithOptionsAndLocale(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    CFLocaleRef locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              ffi.Int32,
              CFLocaleRef,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale =
      _CFStringFindWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef,
              ffi.Pointer<CFRange>)>();

  int CFStringFindWithOptions(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef, CFRange, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions = _CFStringFindWithOptionsPtr.asFunction<
      int Function(
          CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  CFArrayRef CFStringCreateArrayWithFindResults(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringCreateArrayWithFindResultsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef, CFRange,
              ffi.Int32)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults =
      _CFStringCreateArrayWithFindResultsPtr.asFunction<
          CFArrayRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind(
    CFStringRef theString,
    CFStringRef stringToFind,
    int compareOptions,
  ) {
    return _CFStringFind(
      theString,
      stringToFind,
      compareOptions,
    );
  }

  late final _CFStringFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, ffi.Int32)>>('CFStringFind');
  late final _CFStringFind = _CFStringFindPtr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasPrefix');
  late final _CFStringHasPrefix = _CFStringHasPrefixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasSuffix');
  late final _CFStringHasSuffix = _CFStringHasSuffixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndexPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, CFIndex)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex =
      _CFStringGetRangeOfComposedCharactersAtIndexPtr.asFunction<
          CFRange Function(CFStringRef, int)>();

  int CFStringFindCharacterFromSet(
    CFStringRef theString,
    CFCharacterSetRef theSet,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet(
      theString,
      theSet,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindCharacterFromSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFCharacterSetRef, CFRange, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet =
      _CFStringFindCharacterFromSetPtr.asFunction<
          int Function(CFStringRef, CFCharacterSetRef, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<CFIndex> lineBeginIndex,
    ffi.Pointer<CFIndex> lineEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds = _CFStringGetLineBoundsPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
          ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  void CFStringGetParagraphBounds(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<CFIndex> parBeginIndex,
    ffi.Pointer<CFIndex> parEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds =
      _CFStringGetParagraphBoundsPtr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  int CFStringGetHyphenationLocationBeforeIndex(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    CFLocaleRef locale,
    ffi.Pointer<UTF32Char> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndexPtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(CFStringRef, CFIndex, CFRange, CFOptionFlags,
                  CFLocaleRef, ffi.Pointer<UTF32Char>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex =
      _CFStringGetHyphenationLocationBeforeIndexPtr.asFunction<
          int Function(CFStringRef, int, CFRange, int, CFLocaleRef,
              ffi.Pointer<UTF32Char>)>();

  int CFStringIsHyphenationAvailableForLocale(
    CFLocaleRef locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocalePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFLocaleRef)>>(
          'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale =
      _CFStringIsHyphenationAvailableForLocalePtr.asFunction<
          int Function(CFLocaleRef)>();

  CFStringRef CFStringCreateByCombiningStrings(
    CFAllocatorRef alloc,
    CFArrayRef theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStringsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings =
      _CFStringCreateByCombiningStringsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef, CFStringRef)>();

  CFArrayRef CFStringCreateArrayBySeparatingStrings(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStringsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings =
      _CFStringCreateArrayBySeparatingStringsPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue(
      str,
    );
  }

  late final _CFStringGetIntValuePtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue =
      _CFStringGetIntValuePtr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue(
      str,
    );
  }

  late final _CFStringGetDoubleValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue =
      _CFStringGetDoubleValuePtr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend(
    CFMutableStringRef theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringAppend');
  late final _CFStringAppend = _CFStringAppendPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringAppendCharacters(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters =
      _CFStringAppendCharactersPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int)>();

  void CFStringAppendPascalString(
    CFMutableStringRef theString,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString = _CFStringAppendPascalStringPtr
      .asFunction<void Function(CFMutableStringRef, ConstStr255Param, int)>();

  void CFStringAppendCString(
    CFMutableStringRef theString,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString = _CFStringAppendCStringPtr.asFunction<
      void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  void CFStringAppendFormat(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat = _CFStringAppendFormatPtr.asFunction<
      void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringAppendFormatAndArguments(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments =
      _CFStringAppendFormatAndArgumentsPtr.asFunction<
          void Function(
              CFMutableStringRef, CFDictionaryRef, CFStringRef, va_list)>();

  void CFStringInsert(
    CFMutableStringRef str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFIndex, CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert = _CFStringInsertPtr.asFunction<
      void Function(CFMutableStringRef, int, CFStringRef)>();

  void CFStringDelete(
    CFMutableStringRef theString,
    CFRange range,
  ) {
    return _CFStringDelete(
      theString,
      range,
    );
  }

  late final _CFStringDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete = _CFStringDeletePtr.asFunction<
      void Function(CFMutableStringRef, CFRange)>();

  void CFStringReplace(
    CFMutableStringRef theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFRange, CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace = _CFStringReplacePtr.asFunction<
      void Function(CFMutableStringRef, CFRange, CFStringRef)>();

  void CFStringReplaceAll(
    CFMutableStringRef theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringReplaceAll');
  late final _CFStringReplaceAll = _CFStringReplaceAllPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  int CFStringFindAndReplace(
    CFMutableStringRef theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringFindAndReplace(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringFindAndReplacePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFMutableStringRef, CFStringRef, CFStringRef,
              CFRange, ffi.Int32)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace = _CFStringFindAndReplacePtr.asFunction<
      int Function(
          CFMutableStringRef, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>, CFIndex,
              CFIndex)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy =
      _CFStringSetExternalCharactersNoCopyPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int, int)>();

  void CFStringPad(
    CFMutableStringRef theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef, CFIndex,
              CFIndex)>>('CFStringPad');
  late final _CFStringPad = _CFStringPadPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef, int, int)>();

  void CFStringTrim(
    CFMutableStringRef theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim(
      theString,
      trimString,
    );
  }

  late final _CFStringTrimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim = _CFStringTrimPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringTrimWhitespace(
    CFMutableStringRef theString,
  ) {
    return _CFStringTrimWhitespace(
      theString,
    );
  }

  late final _CFStringTrimWhitespacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableStringRef)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace = _CFStringTrimWhitespacePtr.asFunction<
      void Function(CFMutableStringRef)>();

  void CFStringLowercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringLowercase(
      theString,
      locale,
    );
  }

  late final _CFStringLowercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringLowercase');
  late final _CFStringLowercase = _CFStringLowercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringUppercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringUppercase(
      theString,
      locale,
    );
  }

  late final _CFStringUppercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringUppercase');
  late final _CFStringUppercase = _CFStringUppercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringCapitalize(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringCapitalize(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringCapitalize');
  late final _CFStringCapitalize = _CFStringCapitalizePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringNormalize(
    CFMutableStringRef theString,
    int theForm,
  ) {
    return _CFStringNormalize(
      theString,
      theForm,
    );
  }

  late final _CFStringNormalizePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, ffi.Int32)>>(
      'CFStringNormalize');
  late final _CFStringNormalize = _CFStringNormalizePtr.asFunction<
      void Function(CFMutableStringRef, int)>();

  void CFStringFold(
    CFMutableStringRef theString,
    int theFlags,
    CFLocaleRef theLocale,
  ) {
    return _CFStringFold(
      theString,
      theFlags,
      theLocale,
    );
  }

  late final _CFStringFoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, ffi.Int32, CFLocaleRef)>>('CFStringFold');
  late final _CFStringFold = _CFStringFoldPtr.asFunction<
      void Function(CFMutableStringRef, int, CFLocaleRef)>();

  int CFStringTransform(
    CFMutableStringRef string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransformPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFMutableStringRef, ffi.Pointer<CFRange>,
              CFStringRef, Boolean)>>('CFStringTransform');
  late final _CFStringTransform = _CFStringTransformPtr.asFunction<
      int Function(
          CFMutableStringRef, ffi.Pointer<CFRange>, CFStringRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripCombiningMarks =
      _lookup<CFStringRef>('kCFStringTransformStripCombiningMarks');

  CFStringRef get kCFStringTransformStripCombiningMarks =>
      _kCFStringTransformStripCombiningMarks.value;

  set kCFStringTransformStripCombiningMarks(CFStringRef value) =>
      _kCFStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToLatin =
      _lookup<CFStringRef>('kCFStringTransformToLatin');

  CFStringRef get kCFStringTransformToLatin => _kCFStringTransformToLatin.value;

  set kCFStringTransformToLatin(CFStringRef value) =>
      _kCFStringTransformToLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformFullwidthHalfwidth =
      _lookup<CFStringRef>('kCFStringTransformFullwidthHalfwidth');

  CFStringRef get kCFStringTransformFullwidthHalfwidth =>
      _kCFStringTransformFullwidthHalfwidth.value;

  set kCFStringTransformFullwidthHalfwidth(CFStringRef value) =>
      _kCFStringTransformFullwidthHalfwidth.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinKatakana =
      _lookup<CFStringRef>('kCFStringTransformLatinKatakana');

  CFStringRef get kCFStringTransformLatinKatakana =>
      _kCFStringTransformLatinKatakana.value;

  set kCFStringTransformLatinKatakana(CFStringRef value) =>
      _kCFStringTransformLatinKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHiragana =
      _lookup<CFStringRef>('kCFStringTransformLatinHiragana');

  CFStringRef get kCFStringTransformLatinHiragana =>
      _kCFStringTransformLatinHiragana.value;

  set kCFStringTransformLatinHiragana(CFStringRef value) =>
      _kCFStringTransformLatinHiragana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformHiraganaKatakana =
      _lookup<CFStringRef>('kCFStringTransformHiraganaKatakana');

  CFStringRef get kCFStringTransformHiraganaKatakana =>
      _kCFStringTransformHiraganaKatakana.value;

  set kCFStringTransformHiraganaKatakana(CFStringRef value) =>
      _kCFStringTransformHiraganaKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformMandarinLatin =
      _lookup<CFStringRef>('kCFStringTransformMandarinLatin');

  CFStringRef get kCFStringTransformMandarinLatin =>
      _kCFStringTransformMandarinLatin.value;

  set kCFStringTransformMandarinLatin(CFStringRef value) =>
      _kCFStringTransformMandarinLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHangul =
      _lookup<CFStringRef>('kCFStringTransformLatinHangul');

  CFStringRef get kCFStringTransformLatinHangul =>
      _kCFStringTransformLatinHangul.value;

  set kCFStringTransformLatinHangul(CFStringRef value) =>
      _kCFStringTransformLatinHangul.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinArabic =
      _lookup<CFStringRef>('kCFStringTransformLatinArabic');

  CFStringRef get kCFStringTransformLatinArabic =>
      _kCFStringTransformLatinArabic.value;

  set kCFStringTransformLatinArabic(CFStringRef value) =>
      _kCFStringTransformLatinArabic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHebrew =
      _lookup<CFStringRef>('kCFStringTransformLatinHebrew');

  CFStringRef get kCFStringTransformLatinHebrew =>
      _kCFStringTransformLatinHebrew.value;

  set kCFStringTransformLatinHebrew(CFStringRef value) =>
      _kCFStringTransformLatinHebrew.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinThai =
      _lookup<CFStringRef>('kCFStringTransformLatinThai');

  CFStringRef get kCFStringTransformLatinThai =>
      _kCFStringTransformLatinThai.value;

  set kCFStringTransformLatinThai(CFStringRef value) =>
      _kCFStringTransformLatinThai.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinCyrillic =
      _lookup<CFStringRef>('kCFStringTransformLatinCyrillic');

  CFStringRef get kCFStringTransformLatinCyrillic =>
      _kCFStringTransformLatinCyrillic.value;

  set kCFStringTransformLatinCyrillic(CFStringRef value) =>
      _kCFStringTransformLatinCyrillic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinGreek =
      _lookup<CFStringRef>('kCFStringTransformLatinGreek');

  CFStringRef get kCFStringTransformLatinGreek =>
      _kCFStringTransformLatinGreek.value;

  set kCFStringTransformLatinGreek(CFStringRef value) =>
      _kCFStringTransformLatinGreek.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToXMLHex =
      _lookup<CFStringRef>('kCFStringTransformToXMLHex');

  CFStringRef get kCFStringTransformToXMLHex =>
      _kCFStringTransformToXMLHex.value;

  set kCFStringTransformToXMLHex(CFStringRef value) =>
      _kCFStringTransformToXMLHex.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToUnicodeName =
      _lookup<CFStringRef>('kCFStringTransformToUnicodeName');

  CFStringRef get kCFStringTransformToUnicodeName =>
      _kCFStringTransformToUnicodeName.value;

  set kCFStringTransformToUnicodeName(CFStringRef value) =>
      _kCFStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripDiacritics =
      _lookup<CFStringRef>('kCFStringTransformStripDiacritics');

  CFStringRef get kCFStringTransformStripDiacritics =>
      _kCFStringTransformStripDiacritics.value;

  set kCFStringTransformStripDiacritics(CFStringRef value) =>
      _kCFStringTransformStripDiacritics.value = value;

  int CFStringIsEncodingAvailable(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable =
      _CFStringIsEncodingAvailablePtr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings() {
    return _CFStringGetListOfAvailableEncodings();
  }

  late final _CFStringGetListOfAvailableEncodingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings =
      _CFStringGetListOfAvailableEncodingsPtr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding =
      _CFStringGetNameOfEncodingPtr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncodingPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.UnsignedLong Function(CFStringEncoding)>>(
      'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding =
      _CFStringConvertEncodingToNSStringEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncodingPtr = _lookup<
          ffi.NativeFunction<CFStringEncoding Function(pkg_ffi.UnsignedLong)>>(
      'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding =
      _CFStringConvertNSStringEncodingToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepagePtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage =
      _CFStringConvertEncodingToWindowsCodepagePtr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(UInt32)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding =
      _CFStringConvertWindowsCodepageToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding =
      _CFStringConvertIANACharSetNameToEncodingPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName =
      _CFStringConvertEncodingToIANACharSetNamePtr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding =
      _CFStringGetMostCompatibleMacStringEncodingPtr.asFunction<
          int Function(int)>();

  void CFShow(
    CFTypeRef obj,
  ) {
    return _CFShow(
      obj,
    );
  }

  late final _CFShowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFShow');
  late final _CFShow = _CFShowPtr.asFunction<void Function(CFTypeRef)>();

  void CFShowStr(
    CFStringRef str,
  ) {
    return _CFShowStr(
      str,
    );
  }

  late final _CFShowStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef)>>('CFShowStr');
  late final _CFShowStr =
      _CFShowStrPtr.asFunction<void Function(CFStringRef)>();

  CFStringRef __CFStringMakeConstantString(
    ffi.Pointer<pkg_ffi.Char> cStr,
  ) {
    return ___CFStringMakeConstantString(
      cStr,
    );
  }

  late final ___CFStringMakeConstantStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>>(
      '__CFStringMakeConstantString');
  late final ___CFStringMakeConstantString = ___CFStringMakeConstantStringPtr
      .asFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>();

  int CFTimeZoneGetTypeID() {
    return _CFTimeZoneGetTypeID();
  }

  late final _CFTimeZoneGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTimeZoneGetTypeID');
  late final _CFTimeZoneGetTypeID =
      _CFTimeZoneGetTypeIDPtr.asFunction<int Function()>();

  CFTimeZoneRef CFTimeZoneCopySystem() {
    return _CFTimeZoneCopySystem();
  }

  late final _CFTimeZoneCopySystemPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopySystem');
  late final _CFTimeZoneCopySystem =
      _CFTimeZoneCopySystemPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneResetSystem() {
    return _CFTimeZoneResetSystem();
  }

  late final _CFTimeZoneResetSystemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFTimeZoneResetSystem');
  late final _CFTimeZoneResetSystem =
      _CFTimeZoneResetSystemPtr.asFunction<void Function()>();

  CFTimeZoneRef CFTimeZoneCopyDefault() {
    return _CFTimeZoneCopyDefault();
  }

  late final _CFTimeZoneCopyDefaultPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopyDefault');
  late final _CFTimeZoneCopyDefault =
      _CFTimeZoneCopyDefaultPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneSetDefault(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneSetDefault(
      tz,
    );
  }

  late final _CFTimeZoneSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTimeZoneRef)>>(
          'CFTimeZoneSetDefault');
  late final _CFTimeZoneSetDefault =
      _CFTimeZoneSetDefaultPtr.asFunction<void Function(CFTimeZoneRef)>();

  CFArrayRef CFTimeZoneCopyKnownNames() {
    return _CFTimeZoneCopyKnownNames();
  }

  late final _CFTimeZoneCopyKnownNamesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFTimeZoneCopyKnownNames');
  late final _CFTimeZoneCopyKnownNames =
      _CFTimeZoneCopyKnownNamesPtr.asFunction<CFArrayRef Function()>();

  CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary() {
    return _CFTimeZoneCopyAbbreviationDictionary();
  }

  late final _CFTimeZoneCopyAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function()>>(
          'CFTimeZoneCopyAbbreviationDictionary');
  late final _CFTimeZoneCopyAbbreviationDictionary =
      _CFTimeZoneCopyAbbreviationDictionaryPtr.asFunction<
          CFDictionaryRef Function()>();

  void CFTimeZoneSetAbbreviationDictionary(
    CFDictionaryRef dict,
  ) {
    return _CFTimeZoneSetAbbreviationDictionary(
      dict,
    );
  }

  late final _CFTimeZoneSetAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFDictionaryRef)>>(
          'CFTimeZoneSetAbbreviationDictionary');
  late final _CFTimeZoneSetAbbreviationDictionary =
      _CFTimeZoneSetAbbreviationDictionaryPtr.asFunction<
          void Function(CFDictionaryRef)>();

  CFTimeZoneRef CFTimeZoneCreate(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFDataRef data,
  ) {
    return _CFTimeZoneCreate(
      allocator,
      name,
      data,
    );
  }

  late final _CFTimeZoneCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(
              CFAllocatorRef, CFStringRef, CFDataRef)>>('CFTimeZoneCreate');
  late final _CFTimeZoneCreate = _CFTimeZoneCreatePtr.asFunction<
      CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(
    CFAllocatorRef allocator,
    double ti,
  ) {
    return _CFTimeZoneCreateWithTimeIntervalFromGMT(
      allocator,
      ti,
    );
  }

  late final _CFTimeZoneCreateWithTimeIntervalFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef,
              CFTimeInterval)>>('CFTimeZoneCreateWithTimeIntervalFromGMT');
  late final _CFTimeZoneCreateWithTimeIntervalFromGMT =
      _CFTimeZoneCreateWithTimeIntervalFromGMTPtr.asFunction<
          CFTimeZoneRef Function(CFAllocatorRef, double)>();

  CFTimeZoneRef CFTimeZoneCreateWithName(
    CFAllocatorRef allocator,
    CFStringRef name,
    int tryAbbrev,
  ) {
    return _CFTimeZoneCreateWithName(
      allocator,
      name,
      tryAbbrev,
    );
  }

  late final _CFTimeZoneCreateWithNamePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef, CFStringRef,
              Boolean)>>('CFTimeZoneCreateWithName');
  late final _CFTimeZoneCreateWithName = _CFTimeZoneCreateWithNamePtr
      .asFunction<CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, int)>();

  CFStringRef CFTimeZoneGetName(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetName(
      tz,
    );
  }

  late final _CFTimeZoneGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetName');
  late final _CFTimeZoneGetName =
      _CFTimeZoneGetNamePtr.asFunction<CFStringRef Function(CFTimeZoneRef)>();

  CFDataRef CFTimeZoneGetData(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetData(
      tz,
    );
  }

  late final _CFTimeZoneGetDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetData');
  late final _CFTimeZoneGetData =
      _CFTimeZoneGetDataPtr.asFunction<CFDataRef Function(CFTimeZoneRef)>();

  double CFTimeZoneGetSecondsFromGMT(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetSecondsFromGMT(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetSecondsFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneGetSecondsFromGMT');
  late final _CFTimeZoneGetSecondsFromGMT = _CFTimeZoneGetSecondsFromGMTPtr
      .asFunction<double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyAbbreviation(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneCopyAbbreviation(
      tz,
      at,
    );
  }

  late final _CFTimeZoneCopyAbbreviationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneCopyAbbreviation');
  late final _CFTimeZoneCopyAbbreviation = _CFTimeZoneCopyAbbreviationPtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, double)>();

  int CFTimeZoneIsDaylightSavingTime(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneIsDaylightSavingTime(
      tz,
      at,
    );
  }

  late final _CFTimeZoneIsDaylightSavingTimePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneIsDaylightSavingTime');
  late final _CFTimeZoneIsDaylightSavingTime =
      _CFTimeZoneIsDaylightSavingTimePtr.asFunction<
          int Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetDaylightSavingTimeOffset(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetDaylightSavingTimeOffset(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetDaylightSavingTimeOffsetPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(CFTimeZoneRef,
              CFAbsoluteTime)>>('CFTimeZoneGetDaylightSavingTimeOffset');
  late final _CFTimeZoneGetDaylightSavingTimeOffset =
      _CFTimeZoneGetDaylightSavingTimeOffsetPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetNextDaylightSavingTimeTransition(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetNextDaylightSavingTimeTransition(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr = _lookup<
          ffi.NativeFunction<
              CFAbsoluteTime Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneGetNextDaylightSavingTimeTransition');
  late final _CFTimeZoneGetNextDaylightSavingTimeTransition =
      _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyLocalizedName(
    CFTimeZoneRef tz,
    int style,
    CFLocaleRef locale,
  ) {
    return _CFTimeZoneCopyLocalizedName(
      tz,
      style,
      locale,
    );
  }

  late final _CFTimeZoneCopyLocalizedNamePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFTimeZoneRef, ffi.Int32,
              CFLocaleRef)>>('CFTimeZoneCopyLocalizedName');
  late final _CFTimeZoneCopyLocalizedName = _CFTimeZoneCopyLocalizedNamePtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, int, CFLocaleRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFTimeZoneSystemTimeZoneDidChangeNotification');

  CFNotificationName get kCFTimeZoneSystemTimeZoneDidChangeNotification =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value;

  set kCFTimeZoneSystemTimeZoneDidChangeNotification(
          CFNotificationName value) =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value = value;

  int CFCalendarGetTypeID() {
    return _CFCalendarGetTypeID();
  }

  late final _CFCalendarGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFCalendarGetTypeID');
  late final _CFCalendarGetTypeID =
      _CFCalendarGetTypeIDPtr.asFunction<int Function()>();

  CFCalendarRef CFCalendarCopyCurrent() {
    return _CFCalendarCopyCurrent();
  }

  late final _CFCalendarCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFCalendarRef Function()>>(
          'CFCalendarCopyCurrent');
  late final _CFCalendarCopyCurrent =
      _CFCalendarCopyCurrentPtr.asFunction<CFCalendarRef Function()>();

  CFCalendarRef CFCalendarCreateWithIdentifier(
    CFAllocatorRef allocator,
    CFCalendarIdentifier identifier,
  ) {
    return _CFCalendarCreateWithIdentifier(
      allocator,
      identifier,
    );
  }

  late final _CFCalendarCreateWithIdentifierPtr = _lookup<
      ffi.NativeFunction<
          CFCalendarRef Function(CFAllocatorRef,
              CFCalendarIdentifier)>>('CFCalendarCreateWithIdentifier');
  late final _CFCalendarCreateWithIdentifier =
      _CFCalendarCreateWithIdentifierPtr.asFunction<
          CFCalendarRef Function(CFAllocatorRef, CFCalendarIdentifier)>();

  CFCalendarIdentifier CFCalendarGetIdentifier(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetIdentifier(
      calendar,
    );
  }

  late final _CFCalendarGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFCalendarIdentifier Function(CFCalendarRef)>>(
          'CFCalendarGetIdentifier');
  late final _CFCalendarGetIdentifier = _CFCalendarGetIdentifierPtr.asFunction<
      CFCalendarIdentifier Function(CFCalendarRef)>();

  CFLocaleRef CFCalendarCopyLocale(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyLocale(
      calendar,
    );
  }

  late final _CFCalendarCopyLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFCalendarRef)>>(
          'CFCalendarCopyLocale');
  late final _CFCalendarCopyLocale = _CFCalendarCopyLocalePtr.asFunction<
      CFLocaleRef Function(CFCalendarRef)>();

  void CFCalendarSetLocale(
    CFCalendarRef calendar,
    CFLocaleRef locale,
  ) {
    return _CFCalendarSetLocale(
      calendar,
      locale,
    );
  }

  late final _CFCalendarSetLocalePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFLocaleRef)>>(
      'CFCalendarSetLocale');
  late final _CFCalendarSetLocale = _CFCalendarSetLocalePtr.asFunction<
      void Function(CFCalendarRef, CFLocaleRef)>();

  CFTimeZoneRef CFCalendarCopyTimeZone(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyTimeZone(
      calendar,
    );
  }

  late final _CFCalendarCopyTimeZonePtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function(CFCalendarRef)>>(
          'CFCalendarCopyTimeZone');
  late final _CFCalendarCopyTimeZone = _CFCalendarCopyTimeZonePtr.asFunction<
      CFTimeZoneRef Function(CFCalendarRef)>();

  void CFCalendarSetTimeZone(
    CFCalendarRef calendar,
    CFTimeZoneRef tz,
  ) {
    return _CFCalendarSetTimeZone(
      calendar,
      tz,
    );
  }

  late final _CFCalendarSetTimeZonePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFTimeZoneRef)>>(
      'CFCalendarSetTimeZone');
  late final _CFCalendarSetTimeZone = _CFCalendarSetTimeZonePtr.asFunction<
      void Function(CFCalendarRef, CFTimeZoneRef)>();

  int CFCalendarGetFirstWeekday(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetFirstWeekday(
      calendar,
    );
  }

  late final _CFCalendarGetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetFirstWeekday');
  late final _CFCalendarGetFirstWeekday =
      _CFCalendarGetFirstWeekdayPtr.asFunction<int Function(CFCalendarRef)>();

  void CFCalendarSetFirstWeekday(
    CFCalendarRef calendar,
    int wkdy,
  ) {
    return _CFCalendarSetFirstWeekday(
      calendar,
      wkdy,
    );
  }

  late final _CFCalendarSetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetFirstWeekday');
  late final _CFCalendarSetFirstWeekday = _CFCalendarSetFirstWeekdayPtr
      .asFunction<void Function(CFCalendarRef, int)>();

  int CFCalendarGetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetMinimumDaysInFirstWeek(
      calendar,
    );
  }

  late final _CFCalendarGetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetMinimumDaysInFirstWeek');
  late final _CFCalendarGetMinimumDaysInFirstWeek =
      _CFCalendarGetMinimumDaysInFirstWeekPtr.asFunction<
          int Function(CFCalendarRef)>();

  void CFCalendarSetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
    int mwd,
  ) {
    return _CFCalendarSetMinimumDaysInFirstWeek(
      calendar,
      mwd,
    );
  }

  late final _CFCalendarSetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetMinimumDaysInFirstWeek');
  late final _CFCalendarSetMinimumDaysInFirstWeek =
      _CFCalendarSetMinimumDaysInFirstWeekPtr.asFunction<
          void Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMinimumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMinimumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMinimumRangeOfUnitPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFCalendarRef, ffi.Int32)>>(
          'CFCalendarGetMinimumRangeOfUnit');
  late final _CFCalendarGetMinimumRangeOfUnit =
      _CFCalendarGetMinimumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMaximumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMaximumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMaximumRangeOfUnitPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFCalendarRef, ffi.Int32)>>(
          'CFCalendarGetMaximumRangeOfUnit');
  late final _CFCalendarGetMaximumRangeOfUnit =
      _CFCalendarGetMaximumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetRangeOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetRangeOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFCalendarRef, ffi.Int32, ffi.Int32,
              CFAbsoluteTime)>>('CFCalendarGetRangeOfUnit');
  late final _CFCalendarGetRangeOfUnit = _CFCalendarGetRangeOfUnitPtr
      .asFunction<CFRange Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetOrdinalityOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetOrdinalityOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetOrdinalityOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFCalendarRef, ffi.Int32, ffi.Int32,
              CFAbsoluteTime)>>('CFCalendarGetOrdinalityOfUnit');
  late final _CFCalendarGetOrdinalityOfUnit = _CFCalendarGetOrdinalityOfUnitPtr
      .asFunction<int Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetTimeRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
    double at,
    ffi.Pointer<CFAbsoluteTime> startp,
    ffi.Pointer<CFTimeInterval> tip,
  ) {
    return _CFCalendarGetTimeRangeOfUnit(
      calendar,
      unit,
      at,
      startp,
      tip,
    );
  }

  late final _CFCalendarGetTimeRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Int32,
              CFAbsoluteTime,
              ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>>('CFCalendarGetTimeRangeOfUnit');
  late final _CFCalendarGetTimeRangeOfUnit =
      _CFCalendarGetTimeRangeOfUnitPtr.asFunction<
          int Function(CFCalendarRef, int, double, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>();

  int CFCalendarComposeAbsoluteTime(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarComposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarComposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarComposeAbsoluteTime');
  late final _CFCalendarComposeAbsoluteTime =
      _CFCalendarComposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarDecomposeAbsoluteTime(
    CFCalendarRef calendar,
    double at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarDecomposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarDecomposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, CFAbsoluteTime,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarDecomposeAbsoluteTime');
  late final _CFCalendarDecomposeAbsoluteTime =
      _CFCalendarDecomposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, double, ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarAddComponents(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarAddComponents(
      calendar,
      at,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarAddComponentsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Pointer<CFAbsoluteTime>,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarAddComponents');
  late final _CFCalendarAddComponents = _CFCalendarAddComponentsPtr.asFunction<
      int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>, int,
          ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarGetComponentDifference(
    CFCalendarRef calendar,
    double startingAT,
    double resultAT,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarGetComponentDifference(
      calendar,
      startingAT,
      resultAT,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarGetComponentDifferencePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarGetComponentDifference');
  late final _CFCalendarGetComponentDifference =
      _CFCalendarGetComponentDifferencePtr.asFunction<
          int Function(
              CFCalendarRef, double, double, int, ffi.Pointer<pkg_ffi.Char>)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate(
    CFAllocatorRef allocator,
    CFStringRef tmplate,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFOptionFlags,
              CFLocaleRef)>>('CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate =
      _CFDateFormatterCreateDateFormatFromTemplatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, int, CFLocaleRef)>();

  int CFDateFormatterGetTypeID() {
    return _CFDateFormatterGetTypeID();
  }

  late final _CFDateFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID =
      _CFDateFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(
    CFAllocatorRef allocator,
    int formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter(
      allocator,
      formatOptions,
    );
  }

  late final _CFDateFormatterCreateISO8601FormatterPtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef,
              ffi.Int32)>>('CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter =
      _CFDateFormatterCreateISO8601FormatterPtr.asFunction<
          CFDateFormatterRef Function(CFAllocatorRef, int)>();

  CFDateFormatterRef CFDateFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int dateStyle,
    int timeStyle,
  ) {
    return _CFDateFormatterCreate(
      allocator,
      locale,
      dateStyle,
      timeStyle,
    );
  }

  late final _CFDateFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, ffi.Int32,
              ffi.Int32)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate = _CFDateFormatterCreatePtr.asFunction<
      CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, int, int)>();

  CFLocaleRef CFDateFormatterGetLocale(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale = _CFDateFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFDateFormatterRef)>();

  int CFDateFormatterGetDateStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetDateStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetDateStylePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle = _CFDateFormatterGetDateStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  int CFDateFormatterGetTimeStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetTimeStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetTimeStylePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle = _CFDateFormatterGetTimeStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat = _CFDateFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDateFormatterRef, CFStringRef)>>('CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat = _CFDateFormatterSetFormatPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate =
      _CFDateFormatterCreateStringWithDatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFAbsoluteTime)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime =
      _CFDateFormatterCreateStringWithAbsoluteTimePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString =
      _CFDateFormatterCreateDateFromStringPtr.asFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<CFAbsoluteTime> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromStringPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<CFAbsoluteTime>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString =
      _CFDateFormatterGetAbsoluteTimeFromStringPtr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<CFAbsoluteTime>)>();

  void CFDateFormatterSetProperty(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty = _CFDateFormatterSetPropertyPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty = _CFDateFormatterCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterIsLenient =
      _lookup<CFDateFormatterKey>('kCFDateFormatterIsLenient');

  CFDateFormatterKey get kCFDateFormatterIsLenient =>
      _kCFDateFormatterIsLenient.value;

  set kCFDateFormatterIsLenient(CFDateFormatterKey value) =>
      _kCFDateFormatterIsLenient.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterTimeZone =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTimeZone');

  CFDateFormatterKey get kCFDateFormatterTimeZone =>
      _kCFDateFormatterTimeZone.value;

  set kCFDateFormatterTimeZone(CFDateFormatterKey value) =>
      _kCFDateFormatterTimeZone.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendarName =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendarName');

  CFDateFormatterKey get kCFDateFormatterCalendarName =>
      _kCFDateFormatterCalendarName.value;

  set kCFDateFormatterCalendarName(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendarName.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultFormat =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultFormat');

  CFDateFormatterKey get kCFDateFormatterDefaultFormat =>
      _kCFDateFormatterDefaultFormat.value;

  set kCFDateFormatterDefaultFormat(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterTwoDigitStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTwoDigitStartDate');

  CFDateFormatterKey get kCFDateFormatterTwoDigitStartDate =>
      _kCFDateFormatterTwoDigitStartDate.value;

  set kCFDateFormatterTwoDigitStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterTwoDigitStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultDate');

  CFDateFormatterKey get kCFDateFormatterDefaultDate =>
      _kCFDateFormatterDefaultDate.value;

  set kCFDateFormatterDefaultDate(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendar =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendar');

  CFDateFormatterKey get kCFDateFormatterCalendar =>
      _kCFDateFormatterCalendar.value;

  set kCFDateFormatterCalendar(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendar.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterEraSymbols');

  CFDateFormatterKey get kCFDateFormatterEraSymbols =>
      _kCFDateFormatterEraSymbols.value;

  set kCFDateFormatterEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterMonthSymbols =>
      _kCFDateFormatterMonthSymbols.value;

  set kCFDateFormatterMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortMonthSymbols =>
      _kCFDateFormatterShortMonthSymbols.value;

  set kCFDateFormatterShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterWeekdaySymbols =>
      _kCFDateFormatterWeekdaySymbols.value;

  set kCFDateFormatterWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortWeekdaySymbols =>
      _kCFDateFormatterShortWeekdaySymbols.value;

  set kCFDateFormatterShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterAMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterAMSymbol');

  CFDateFormatterKey get kCFDateFormatterAMSymbol =>
      _kCFDateFormatterAMSymbol.value;

  set kCFDateFormatterAMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterAMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterPMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterPMSymbol');

  CFDateFormatterKey get kCFDateFormatterPMSymbol =>
      _kCFDateFormatterPMSymbol.value;

  set kCFDateFormatterPMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterPMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterLongEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterLongEraSymbols');

  CFDateFormatterKey get kCFDateFormatterLongEraSymbols =>
      _kCFDateFormatterLongEraSymbols.value;

  set kCFDateFormatterLongEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterLongEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortMonthSymbols =>
      _kCFDateFormatterVeryShortMonthSymbols.value;

  set kCFDateFormatterVeryShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneMonthSymbols =>
      _kCFDateFormatterStandaloneMonthSymbols.value;

  set kCFDateFormatterStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneMonthSymbols =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value;

  set kCFDateFormatterShortStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneMonthSymbols =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value;

  set kCFDateFormatterVeryShortStandaloneMonthSymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortWeekdaySymbols =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value;

  set kCFDateFormatterVeryShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneWeekdaySymbols =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value;

  set kCFDateFormatterStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterShortStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterVeryShortStandaloneWeekdaySymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterQuarterSymbols =>
      _kCFDateFormatterQuarterSymbols.value;

  set kCFDateFormatterQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortQuarterSymbols =>
      _kCFDateFormatterShortQuarterSymbols.value;

  set kCFDateFormatterShortQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneQuarterSymbols =>
      _kCFDateFormatterStandaloneQuarterSymbols.value;

  set kCFDateFormatterStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneQuarterSymbols =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value;

  set kCFDateFormatterShortStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterGregorianStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterGregorianStartDate');

  CFDateFormatterKey get kCFDateFormatterGregorianStartDate =>
      _kCFDateFormatterGregorianStartDate.value;

  set kCFDateFormatterGregorianStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterGregorianStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterDoesRelativeDateFormattingKey =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterDoesRelativeDateFormattingKey');

  CFDateFormatterKey get kCFDateFormatterDoesRelativeDateFormattingKey =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value;

  set kCFDateFormatterDoesRelativeDateFormattingKey(CFDateFormatterKey value) =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value = value;

  int CFErrorGetTypeID() {
    return _CFErrorGetTypeID();
  }

  late final _CFErrorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFErrorGetTypeID');
  late final _CFErrorGetTypeID =
      _CFErrorGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainPOSIX =
      _lookup<CFErrorDomain>('kCFErrorDomainPOSIX');

  CFErrorDomain get kCFErrorDomainPOSIX => _kCFErrorDomainPOSIX.value;

  set kCFErrorDomainPOSIX(CFErrorDomain value) =>
      _kCFErrorDomainPOSIX.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainOSStatus =
      _lookup<CFErrorDomain>('kCFErrorDomainOSStatus');

  CFErrorDomain get kCFErrorDomainOSStatus => _kCFErrorDomainOSStatus.value;

  set kCFErrorDomainOSStatus(CFErrorDomain value) =>
      _kCFErrorDomainOSStatus.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainMach =
      _lookup<CFErrorDomain>('kCFErrorDomainMach');

  CFErrorDomain get kCFErrorDomainMach => _kCFErrorDomainMach.value;

  set kCFErrorDomainMach(CFErrorDomain value) =>
      _kCFErrorDomainMach.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainCocoa =
      _lookup<CFErrorDomain>('kCFErrorDomainCocoa');

  CFErrorDomain get kCFErrorDomainCocoa => _kCFErrorDomainCocoa.value;

  set kCFErrorDomainCocoa(CFErrorDomain value) =>
      _kCFErrorDomainCocoa.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedDescriptionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedDescriptionKey');

  CFStringRef get kCFErrorLocalizedDescriptionKey =>
      _kCFErrorLocalizedDescriptionKey.value;

  set kCFErrorLocalizedDescriptionKey(CFStringRef value) =>
      _kCFErrorLocalizedDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureKey');

  CFStringRef get kCFErrorLocalizedFailureKey =>
      _kCFErrorLocalizedFailureKey.value;

  set kCFErrorLocalizedFailureKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureReasonKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureReasonKey');

  CFStringRef get kCFErrorLocalizedFailureReasonKey =>
      _kCFErrorLocalizedFailureReasonKey.value;

  set kCFErrorLocalizedFailureReasonKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureReasonKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedRecoverySuggestionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedRecoverySuggestionKey');

  CFStringRef get kCFErrorLocalizedRecoverySuggestionKey =>
      _kCFErrorLocalizedRecoverySuggestionKey.value;

  set kCFErrorLocalizedRecoverySuggestionKey(CFStringRef value) =>
      _kCFErrorLocalizedRecoverySuggestionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorDescriptionKey =
      _lookup<CFStringRef>('kCFErrorDescriptionKey');

  CFStringRef get kCFErrorDescriptionKey => _kCFErrorDescriptionKey.value;

  set kCFErrorDescriptionKey(CFStringRef value) =>
      _kCFErrorDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorUnderlyingErrorKey =
      _lookup<CFStringRef>('kCFErrorUnderlyingErrorKey');

  CFStringRef get kCFErrorUnderlyingErrorKey =>
      _kCFErrorUnderlyingErrorKey.value;

  set kCFErrorUnderlyingErrorKey(CFStringRef value) =>
      _kCFErrorUnderlyingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorURLKey =
      _lookup<CFStringRef>('kCFErrorURLKey');

  CFStringRef get kCFErrorURLKey => _kCFErrorURLKey.value;

  set kCFErrorURLKey(CFStringRef value) => _kCFErrorURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorFilePathKey =
      _lookup<CFStringRef>('kCFErrorFilePathKey');

  CFStringRef get kCFErrorFilePathKey => _kCFErrorFilePathKey.value;

  set kCFErrorFilePathKey(CFStringRef value) =>
      _kCFErrorFilePathKey.value = value;

  CFErrorRef CFErrorCreate(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    CFDictionaryRef userInfo,
  ) {
    return _CFErrorCreate(
      allocator,
      domain,
      code,
      userInfo,
    );
  }

  late final _CFErrorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(CFAllocatorRef, CFErrorDomain, CFIndex,
              CFDictionaryRef)>>('CFErrorCreate');
  late final _CFErrorCreate = _CFErrorCreatePtr.asFunction<
      CFErrorRef Function(
          CFAllocatorRef, CFErrorDomain, int, CFDictionaryRef)>();

  CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoKeys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoValues,
    int numUserInfoValues,
  ) {
    return _CFErrorCreateWithUserInfoKeysAndValues(
      allocator,
      domain,
      code,
      userInfoKeys,
      userInfoValues,
      numUserInfoValues,
    );
  }

  late final _CFErrorCreateWithUserInfoKeysAndValuesPtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              CFIndex,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFErrorCreateWithUserInfoKeysAndValues');
  late final _CFErrorCreateWithUserInfoKeysAndValues =
      _CFErrorCreateWithUserInfoKeysAndValuesPtr.asFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int)>();

  CFErrorDomain CFErrorGetDomain(
    CFErrorRef err,
  ) {
    return _CFErrorGetDomain(
      err,
    );
  }

  late final _CFErrorGetDomainPtr =
      _lookup<ffi.NativeFunction<CFErrorDomain Function(CFErrorRef)>>(
          'CFErrorGetDomain');
  late final _CFErrorGetDomain =
      _CFErrorGetDomainPtr.asFunction<CFErrorDomain Function(CFErrorRef)>();

  int CFErrorGetCode(
    CFErrorRef err,
  ) {
    return _CFErrorGetCode(
      err,
    );
  }

  late final _CFErrorGetCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFErrorRef)>>(
          'CFErrorGetCode');
  late final _CFErrorGetCode =
      _CFErrorGetCodePtr.asFunction<int Function(CFErrorRef)>();

  CFDictionaryRef CFErrorCopyUserInfo(
    CFErrorRef err,
  ) {
    return _CFErrorCopyUserInfo(
      err,
    );
  }

  late final _CFErrorCopyUserInfoPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFErrorRef)>>(
          'CFErrorCopyUserInfo');
  late final _CFErrorCopyUserInfo = _CFErrorCopyUserInfoPtr.asFunction<
      CFDictionaryRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyDescription(
    CFErrorRef err,
  ) {
    return _CFErrorCopyDescription(
      err,
    );
  }

  late final _CFErrorCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyDescription');
  late final _CFErrorCopyDescription =
      _CFErrorCopyDescriptionPtr.asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyFailureReason(
    CFErrorRef err,
  ) {
    return _CFErrorCopyFailureReason(
      err,
    );
  }

  late final _CFErrorCopyFailureReasonPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyFailureReason');
  late final _CFErrorCopyFailureReason = _CFErrorCopyFailureReasonPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyRecoverySuggestion(
    CFErrorRef err,
  ) {
    return _CFErrorCopyRecoverySuggestion(
      err,
    );
  }

  late final _CFErrorCopyRecoverySuggestionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyRecoverySuggestion');
  late final _CFErrorCopyRecoverySuggestion = _CFErrorCopyRecoverySuggestionPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanTrue =
      _lookup<CFBooleanRef>('kCFBooleanTrue');

  CFBooleanRef get kCFBooleanTrue => _kCFBooleanTrue.value;

  set kCFBooleanTrue(CFBooleanRef value) => _kCFBooleanTrue.value = value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanFalse =
      _lookup<CFBooleanRef>('kCFBooleanFalse');

  CFBooleanRef get kCFBooleanFalse => _kCFBooleanFalse.value;

  set kCFBooleanFalse(CFBooleanRef value) => _kCFBooleanFalse.value = value;

  int CFBooleanGetTypeID() {
    return _CFBooleanGetTypeID();
  }

  late final _CFBooleanGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID =
      _CFBooleanGetTypeIDPtr.asFunction<int Function()>();

  int CFBooleanGetValue(
    CFBooleanRef boolean,
  ) {
    return _CFBooleanGetValue(
      boolean,
    );
  }

  late final _CFBooleanGetValuePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBooleanRef)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue =
      _CFBooleanGetValuePtr.asFunction<int Function(CFBooleanRef)>();

  late final ffi.Pointer<CFNumberRef> _kCFNumberPositiveInfinity =
      _lookup<CFNumberRef>('kCFNumberPositiveInfinity');

  CFNumberRef get kCFNumberPositiveInfinity => _kCFNumberPositiveInfinity.value;

  set kCFNumberPositiveInfinity(CFNumberRef value) =>
      _kCFNumberPositiveInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNegativeInfinity =
      _lookup<CFNumberRef>('kCFNumberNegativeInfinity');

  CFNumberRef get kCFNumberNegativeInfinity => _kCFNumberNegativeInfinity.value;

  set kCFNumberNegativeInfinity(CFNumberRef value) =>
      _kCFNumberNegativeInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNaN =
      _lookup<CFNumberRef>('kCFNumberNaN');

  CFNumberRef get kCFNumberNaN => _kCFNumberNaN.value;

  set kCFNumberNaN(CFNumberRef value) => _kCFNumberNaN.value = value;

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNumberGetTypeID');
  late final _CFNumberGetTypeID =
      _CFNumberGetTypeIDPtr.asFunction<int Function()>();

  CFNumberRef CFNumberCreate(
    CFAllocatorRef allocator,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberCreate(
      allocator,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(CFAllocatorRef, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberCreate');
  late final _CFNumberCreate = _CFNumberCreatePtr.asFunction<
      CFNumberRef Function(CFAllocatorRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberGetType(
    CFNumberRef number,
  ) {
    return _CFNumberGetType(
      number,
    );
  }

  late final _CFNumberGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFNumberRef)>>(
          'CFNumberGetType');
  late final _CFNumberGetType =
      _CFNumberGetTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetByteSize(
    CFNumberRef number,
  ) {
    return _CFNumberGetByteSize(
      number,
    );
  }

  late final _CFNumberGetByteSizePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetByteSize');
  late final _CFNumberGetByteSize =
      _CFNumberGetByteSizePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberIsFloatType(
    CFNumberRef number,
  ) {
    return _CFNumberIsFloatType(
      number,
    );
  }

  late final _CFNumberIsFloatTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFNumberRef)>>(
          'CFNumberIsFloatType');
  late final _CFNumberIsFloatType =
      _CFNumberIsFloatTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetValue(
    CFNumberRef number,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberGetValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFNumberRef, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue = _CFNumberGetValuePtr.asFunction<
      int Function(CFNumberRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberCompare(
    CFNumberRef number,
    CFNumberRef otherNumber,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFNumberCompare(
      number,
      otherNumber,
      context,
    );
  }

  late final _CFNumberComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFNumberRef, CFNumberRef,
              ffi.Pointer<ffi.Void>)>>('CFNumberCompare');
  late final _CFNumberCompare = _CFNumberComparePtr.asFunction<
      int Function(CFNumberRef, CFNumberRef, ffi.Pointer<ffi.Void>)>();

  int CFNumberFormatterGetTypeID() {
    return _CFNumberFormatterGetTypeID();
  }

  late final _CFNumberFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNumberFormatterGetTypeID');
  late final _CFNumberFormatterGetTypeID =
      _CFNumberFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFNumberFormatterRef CFNumberFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int style,
  ) {
    return _CFNumberFormatterCreate(
      allocator,
      locale,
      style,
    );
  }

  late final _CFNumberFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef,
              ffi.Int32)>>('CFNumberFormatterCreate');
  late final _CFNumberFormatterCreate = _CFNumberFormatterCreatePtr.asFunction<
      CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef, int)>();

  CFLocaleRef CFNumberFormatterGetLocale(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetLocale(
      formatter,
    );
  }

  late final _CFNumberFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetLocale');
  late final _CFNumberFormatterGetLocale = _CFNumberFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFNumberFormatterRef)>();

  int CFNumberFormatterGetStyle(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetStyle(
      formatter,
    );
  }

  late final _CFNumberFormatterGetStylePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetStyle');
  late final _CFNumberFormatterGetStyle = _CFNumberFormatterGetStylePtr
      .asFunction<int Function(CFNumberFormatterRef)>();

  CFStringRef CFNumberFormatterGetFormat(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetFormat(
      formatter,
    );
  }

  late final _CFNumberFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetFormat');
  late final _CFNumberFormatterGetFormat = _CFNumberFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFNumberFormatterRef)>();

  void CFNumberFormatterSetFormat(
    CFNumberFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFNumberFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFNumberFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef,
              CFStringRef)>>('CFNumberFormatterSetFormat');
  late final _CFNumberFormatterSetFormat = _CFNumberFormatterSetFormatPtr
      .asFunction<void Function(CFNumberFormatterRef, CFStringRef)>();

  CFStringRef CFNumberFormatterCreateStringWithNumber(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberRef number,
  ) {
    return _CFNumberFormatterCreateStringWithNumber(
      allocator,
      formatter,
      number,
    );
  }

  late final _CFNumberFormatterCreateStringWithNumberPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFNumberRef)>>('CFNumberFormatterCreateStringWithNumber');
  late final _CFNumberFormatterCreateStringWithNumber =
      _CFNumberFormatterCreateStringWithNumberPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFNumberFormatterRef, CFNumberRef)>();

  CFStringRef CFNumberFormatterCreateStringWithValue(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterCreateStringWithValue(
      allocator,
      formatter,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterCreateStringWithValuePtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>(
      'CFNumberFormatterCreateStringWithValue');
  late final _CFNumberFormatterCreateStringWithValue =
      _CFNumberFormatterCreateStringWithValuePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef, int,
              ffi.Pointer<ffi.Void>)>();

  CFNumberRef CFNumberFormatterCreateNumberFromString(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int options,
  ) {
    return _CFNumberFormatterCreateNumberFromString(
      allocator,
      formatter,
      string,
      rangep,
      options,
    );
  }

  late final _CFNumberFormatterCreateNumberFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(
              CFAllocatorRef,
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFOptionFlags)>>('CFNumberFormatterCreateNumberFromString');
  late final _CFNumberFormatterCreateNumberFromString =
      _CFNumberFormatterCreateNumberFromStringPtr.asFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>, int)>();

  int CFNumberFormatterGetValueFromString(
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterGetValueFromString(
      formatter,
      string,
      rangep,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterGetValueFromStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberFormatterGetValueFromString');
  late final _CFNumberFormatterGetValueFromString =
      _CFNumberFormatterGetValueFromStringPtr.asFunction<
          int Function(CFNumberFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              int, ffi.Pointer<ffi.Void>)>();

  void CFNumberFormatterSetProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
    CFTypeRef value,
  ) {
    return _CFNumberFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFNumberFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef, CFNumberFormatterKey,
              CFTypeRef)>>('CFNumberFormatterSetProperty');
  late final _CFNumberFormatterSetProperty =
      _CFNumberFormatterSetPropertyPtr.asFunction<
          void Function(
              CFNumberFormatterRef, CFNumberFormatterKey, CFTypeRef)>();

  CFTypeRef CFNumberFormatterCopyProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
  ) {
    return _CFNumberFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFNumberFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFNumberFormatterRef,
              CFNumberFormatterKey)>>('CFNumberFormatterCopyProperty');
  late final _CFNumberFormatterCopyProperty =
      _CFNumberFormatterCopyPropertyPtr.asFunction<
          CFTypeRef Function(CFNumberFormatterRef, CFNumberFormatterKey)>();

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterCurrencyCode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencyCode');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyCode =>
      _kCFNumberFormatterCurrencyCode.value;

  set kCFNumberFormatterCurrencyCode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyCode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDecimalSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterDecimalSeparator =>
      _kCFNumberFormatterDecimalSeparator.value;

  set kCFNumberFormatterDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyDecimalSeparator =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value;

  set kCFNumberFormatterCurrencyDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterAlwaysShowDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterAlwaysShowDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterAlwaysShowDecimalSeparator =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value;

  set kCFNumberFormatterAlwaysShowDecimalSeparator(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSeparator =>
      _kCFNumberFormatterGroupingSeparator.value;

  set kCFNumberFormatterGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterUseGroupingSeparator =>
      _kCFNumberFormatterUseGroupingSeparator.value;

  set kCFNumberFormatterUseGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPercentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPercentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPercentSymbol =>
      _kCFNumberFormatterPercentSymbol.value;

  set kCFNumberFormatterPercentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPercentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterZeroSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterZeroSymbol');

  CFNumberFormatterKey get kCFNumberFormatterZeroSymbol =>
      _kCFNumberFormatterZeroSymbol.value;

  set kCFNumberFormatterZeroSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterZeroSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterNaNSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNaNSymbol');

  CFNumberFormatterKey get kCFNumberFormatterNaNSymbol =>
      _kCFNumberFormatterNaNSymbol.value;

  set kCFNumberFormatterNaNSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNaNSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInfinitySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterInfinitySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInfinitySymbol =>
      _kCFNumberFormatterInfinitySymbol.value;

  set kCFNumberFormatterInfinitySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterInfinitySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMinusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinusSign');

  CFNumberFormatterKey get kCFNumberFormatterMinusSign =>
      _kCFNumberFormatterMinusSign.value;

  set kCFNumberFormatterMinusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterPlusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPlusSign');

  CFNumberFormatterKey get kCFNumberFormatterPlusSign =>
      _kCFNumberFormatterPlusSign.value;

  set kCFNumberFormatterPlusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPlusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterCurrencySymbol =>
      _kCFNumberFormatterCurrencySymbol.value;

  set kCFNumberFormatterCurrencySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterExponentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterExponentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterExponentSymbol =>
      _kCFNumberFormatterExponentSymbol.value;

  set kCFNumberFormatterExponentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterExponentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinIntegerDigits =>
      _kCFNumberFormatterMinIntegerDigits.value;

  set kCFNumberFormatterMinIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxIntegerDigits =>
      _kCFNumberFormatterMaxIntegerDigits.value;

  set kCFNumberFormatterMaxIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinFractionDigits =>
      _kCFNumberFormatterMinFractionDigits.value;

  set kCFNumberFormatterMinFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxFractionDigits =>
      _kCFNumberFormatterMaxFractionDigits.value;

  set kCFNumberFormatterMaxFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSize =>
      _kCFNumberFormatterGroupingSize.value;

  set kCFNumberFormatterGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterSecondaryGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterSecondaryGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterSecondaryGroupingSize =>
      _kCFNumberFormatterSecondaryGroupingSize.value;

  set kCFNumberFormatterSecondaryGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterSecondaryGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterRoundingMode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingMode');

  CFNumberFormatterKey get kCFNumberFormatterRoundingMode =>
      _kCFNumberFormatterRoundingMode.value;

  set kCFNumberFormatterRoundingMode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingMode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterRoundingIncrement =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingIncrement');

  CFNumberFormatterKey get kCFNumberFormatterRoundingIncrement =>
      _kCFNumberFormatterRoundingIncrement.value;

  set kCFNumberFormatterRoundingIncrement(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingIncrement.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterFormatWidth =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterFormatWidth');

  CFNumberFormatterKey get kCFNumberFormatterFormatWidth =>
      _kCFNumberFormatterFormatWidth.value;

  set kCFNumberFormatterFormatWidth(CFNumberFormatterKey value) =>
      _kCFNumberFormatterFormatWidth.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingPosition =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingPosition');

  CFNumberFormatterKey get kCFNumberFormatterPaddingPosition =>
      _kCFNumberFormatterPaddingPosition.value;

  set kCFNumberFormatterPaddingPosition(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingPosition.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingCharacter =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingCharacter');

  CFNumberFormatterKey get kCFNumberFormatterPaddingCharacter =>
      _kCFNumberFormatterPaddingCharacter.value;

  set kCFNumberFormatterPaddingCharacter(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingCharacter.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDefaultFormat =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDefaultFormat');

  CFNumberFormatterKey get kCFNumberFormatterDefaultFormat =>
      _kCFNumberFormatterDefaultFormat.value;

  set kCFNumberFormatterDefaultFormat(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMultiplier =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMultiplier');

  CFNumberFormatterKey get kCFNumberFormatterMultiplier =>
      _kCFNumberFormatterMultiplier.value;

  set kCFNumberFormatterMultiplier(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMultiplier.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositivePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositivePrefix');

  CFNumberFormatterKey get kCFNumberFormatterPositivePrefix =>
      _kCFNumberFormatterPositivePrefix.value;

  set kCFNumberFormatterPositivePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositivePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositiveSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositiveSuffix');

  CFNumberFormatterKey get kCFNumberFormatterPositiveSuffix =>
      _kCFNumberFormatterPositiveSuffix.value;

  set kCFNumberFormatterPositiveSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositiveSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativePrefix');

  CFNumberFormatterKey get kCFNumberFormatterNegativePrefix =>
      _kCFNumberFormatterNegativePrefix.value;

  set kCFNumberFormatterNegativePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativeSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativeSuffix');

  CFNumberFormatterKey get kCFNumberFormatterNegativeSuffix =>
      _kCFNumberFormatterNegativeSuffix.value;

  set kCFNumberFormatterNegativeSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativeSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPerMillSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPerMillSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPerMillSymbol =>
      _kCFNumberFormatterPerMillSymbol.value;

  set kCFNumberFormatterPerMillSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPerMillSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInternationalCurrencySymbol =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterInternationalCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInternationalCurrencySymbol =>
      _kCFNumberFormatterInternationalCurrencySymbol.value;

  set kCFNumberFormatterInternationalCurrencySymbol(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterInternationalCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyGroupingSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyGroupingSeparator =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value;

  set kCFNumberFormatterCurrencyGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterIsLenient =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterIsLenient');

  CFNumberFormatterKey get kCFNumberFormatterIsLenient =>
      _kCFNumberFormatterIsLenient.value;

  set kCFNumberFormatterIsLenient(CFNumberFormatterKey value) =>
      _kCFNumberFormatterIsLenient.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterUseSignificantDigits =>
      _kCFNumberFormatterUseSignificantDigits.value;

  set kCFNumberFormatterUseSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinSignificantDigits =>
      _kCFNumberFormatterMinSignificantDigits.value;

  set kCFNumberFormatterMinSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxSignificantDigits =>
      _kCFNumberFormatterMaxSignificantDigits.value;

  set kCFNumberFormatterMaxSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxSignificantDigits.value = value;

  int CFNumberFormatterGetDecimalInfoForCurrencyCode(
    CFStringRef currencyCode,
    ffi.Pointer<ffi.Int32> defaultFractionDigits,
    ffi.Pointer<ffi.Double> roundingIncrement,
  ) {
    return _CFNumberFormatterGetDecimalInfoForCurrencyCode(
      currencyCode,
      defaultFractionDigits,
      roundingIncrement,
    );
  }

  late final _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFStringRef, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Double>)>>(
      'CFNumberFormatterGetDecimalInfoForCurrencyCode');
  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode =
      _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr.asFunction<
          int Function(
              CFStringRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Double>)>();

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyApplication =
      _lookup<CFStringRef>('kCFPreferencesAnyApplication');

  CFStringRef get kCFPreferencesAnyApplication =>
      _kCFPreferencesAnyApplication.value;

  set kCFPreferencesAnyApplication(CFStringRef value) =>
      _kCFPreferencesAnyApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentApplication =
      _lookup<CFStringRef>('kCFPreferencesCurrentApplication');

  CFStringRef get kCFPreferencesCurrentApplication =>
      _kCFPreferencesCurrentApplication.value;

  set kCFPreferencesCurrentApplication(CFStringRef value) =>
      _kCFPreferencesCurrentApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyHost =
      _lookup<CFStringRef>('kCFPreferencesAnyHost');

  CFStringRef get kCFPreferencesAnyHost => _kCFPreferencesAnyHost.value;

  set kCFPreferencesAnyHost(CFStringRef value) =>
      _kCFPreferencesAnyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentHost =
      _lookup<CFStringRef>('kCFPreferencesCurrentHost');

  CFStringRef get kCFPreferencesCurrentHost => _kCFPreferencesCurrentHost.value;

  set kCFPreferencesCurrentHost(CFStringRef value) =>
      _kCFPreferencesCurrentHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyUser =
      _lookup<CFStringRef>('kCFPreferencesAnyUser');

  CFStringRef get kCFPreferencesAnyUser => _kCFPreferencesAnyUser.value;

  set kCFPreferencesAnyUser(CFStringRef value) =>
      _kCFPreferencesAnyUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentUser =
      _lookup<CFStringRef>('kCFPreferencesCurrentUser');

  CFStringRef get kCFPreferencesCurrentUser => _kCFPreferencesCurrentUser.value;

  set kCFPreferencesCurrentUser(CFStringRef value) =>
      _kCFPreferencesCurrentUser.value = value;

  CFPropertyListRef CFPreferencesCopyAppValue(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesCopyAppValue(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesCopyAppValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFStringRef, CFStringRef)>>('CFPreferencesCopyAppValue');
  late final _CFPreferencesCopyAppValue = _CFPreferencesCopyAppValuePtr
      .asFunction<CFPropertyListRef Function(CFStringRef, CFStringRef)>();

  int CFPreferencesGetAppBooleanValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppBooleanValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppBooleanValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppBooleanValue');
  late final _CFPreferencesGetAppBooleanValue =
      _CFPreferencesGetAppBooleanValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  int CFPreferencesGetAppIntegerValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppIntegerValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppIntegerValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppIntegerValue');
  late final _CFPreferencesGetAppIntegerValue =
      _CFPreferencesGetAppIntegerValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  void CFPreferencesSetAppValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesSetAppValue(
      key,
      value,
      applicationID,
    );
  }

  late final _CFPreferencesSetAppValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef,
              CFStringRef)>>('CFPreferencesSetAppValue');
  late final _CFPreferencesSetAppValue = _CFPreferencesSetAppValuePtr
      .asFunction<void Function(CFStringRef, CFPropertyListRef, CFStringRef)>();

  void CFPreferencesAddSuitePreferencesToApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesAddSuitePreferencesToApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesAddSuitePreferencesToAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAddSuitePreferencesToApp');
  late final _CFPreferencesAddSuitePreferencesToApp =
      _CFPreferencesAddSuitePreferencesToAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  void CFPreferencesRemoveSuitePreferencesFromApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesRemoveSuitePreferencesFromApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesRemoveSuitePreferencesFromAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesRemoveSuitePreferencesFromApp');
  late final _CFPreferencesRemoveSuitePreferencesFromApp =
      _CFPreferencesRemoveSuitePreferencesFromAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  int CFPreferencesAppSynchronize(
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppSynchronize(
      applicationID,
    );
  }

  late final _CFPreferencesAppSynchronizePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef)>>(
          'CFPreferencesAppSynchronize');
  late final _CFPreferencesAppSynchronize =
      _CFPreferencesAppSynchronizePtr.asFunction<int Function(CFStringRef)>();

  CFPropertyListRef CFPreferencesCopyValue(
    CFStringRef key,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyValue(
      key,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyValue');
  late final _CFPreferencesCopyValue = _CFPreferencesCopyValuePtr.asFunction<
      CFPropertyListRef Function(
          CFStringRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFPreferencesCopyMultiple(
    CFArrayRef keysToFetch,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyMultiple(
      keysToFetch,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyMultiplePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyMultiple');
  late final _CFPreferencesCopyMultiple =
      _CFPreferencesCopyMultiplePtr.asFunction<
          CFDictionaryRef Function(
              CFArrayRef, CFStringRef, CFStringRef, CFStringRef)>();

  void CFPreferencesSetValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetValue(
      key,
      value,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetValue');
  late final _CFPreferencesSetValue = _CFPreferencesSetValuePtr.asFunction<
      void Function(CFStringRef, CFPropertyListRef, CFStringRef, CFStringRef,
          CFStringRef)>();

  void CFPreferencesSetMultiple(
    CFDictionaryRef keysToSet,
    CFArrayRef keysToRemove,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetMultiple(
      keysToSet,
      keysToRemove,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetMultiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFArrayRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetMultiple');
  late final _CFPreferencesSetMultiple =
      _CFPreferencesSetMultiplePtr.asFunction<
          void Function(CFDictionaryRef, CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  int CFPreferencesSynchronize(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSynchronize(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSynchronizePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesSynchronize');
  late final _CFPreferencesSynchronize = _CFPreferencesSynchronizePtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyApplicationList(
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyApplicationList(
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyApplicationListPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFStringRef, CFStringRef)>>(
      'CFPreferencesCopyApplicationList');
  late final _CFPreferencesCopyApplicationList =
      _CFPreferencesCopyApplicationListPtr.asFunction<
          CFArrayRef Function(CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyKeyList(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyKeyList(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyKeyListPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyKeyList');
  late final _CFPreferencesCopyKeyList = _CFPreferencesCopyKeyListPtr
      .asFunction<CFArrayRef Function(CFStringRef, CFStringRef, CFStringRef)>();

  int CFPreferencesAppValueIsForced(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppValueIsForced(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesAppValueIsForcedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAppValueIsForced');
  late final _CFPreferencesAppValueIsForced = _CFPreferencesAppValueIsForcedPtr
      .asFunction<int Function(CFStringRef, CFStringRef)>();

  int CFURLGetTypeID() {
    return _CFURLGetTypeID();
  }

  late final _CFURLGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFURLGetTypeID');
  late final _CFURLGetTypeID = _CFURLGetTypeIDPtr.asFunction<int Function()>();

  CFURLRef CFURLCreateWithBytes(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> URLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithBytes(
      allocator,
      URLBytes,
      length,
      encoding,
      baseURL,
    );
  }

  late final _CFURLCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, CFURLRef)>>('CFURLCreateWithBytes');
  late final _CFURLCreateWithBytes = _CFURLCreateWithBytesPtr.asFunction<
      CFURLRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  CFDataRef CFURLCreateData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int encoding,
    int escapeWhitespace,
  ) {
    return _CFURLCreateData(
      allocator,
      url,
      encoding,
      escapeWhitespace,
    );
  }

  late final _CFURLCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, CFStringEncoding,
              Boolean)>>('CFURLCreateData');
  late final _CFURLCreateData = _CFURLCreateDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFURLRef CFURLCreateWithString(
    CFAllocatorRef allocator,
    CFStringRef URLString,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithString(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithStringPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, CFStringRef, CFURLRef)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString = _CFURLCreateWithStringPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLRef)>();

  CFURLRef CFURLCreateAbsoluteURLWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> relativeURLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
    int useCompatibilityMode,
  ) {
    return _CFURLCreateAbsoluteURLWithBytes(
      alloc,
      relativeURLBytes,
      length,
      encoding,
      baseURL,
      useCompatibilityMode,
    );
  }

  late final _CFURLCreateAbsoluteURLWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              CFURLRef,
              Boolean)>>('CFURLCreateAbsoluteURLWithBytes');
  late final _CFURLCreateAbsoluteURLWithBytes =
      _CFURLCreateAbsoluteURLWithBytesPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef, int)>();

  CFURLRef CFURLCreateWithFileSystemPath(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
  ) {
    return _CFURLCreateWithFileSystemPath(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
    );
  }

  late final _CFURLCreateWithFileSystemPathPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, ffi.Int32,
              Boolean)>>('CFURLCreateWithFileSystemPath');
  late final _CFURLCreateWithFileSystemPath = _CFURLCreateWithFileSystemPathPtr
      .asFunction<CFURLRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  CFURLRef CFURLCreateFromFileSystemRepresentation(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
  ) {
    return _CFURLCreateFromFileSystemRepresentation(
      allocator,
      buffer,
      bufLen,
      isDirectory,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              Boolean)>>('CFURLCreateFromFileSystemRepresentation');
  late final _CFURLCreateFromFileSystemRepresentation =
      _CFURLCreateFromFileSystemRepresentationPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int)>();

  CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithFileSystemPathRelativeToBase(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateWithFileSystemPathRelativeToBasePtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, ffi.Int32, Boolean,
              CFURLRef)>>('CFURLCreateWithFileSystemPathRelativeToBase');
  late final _CFURLCreateWithFileSystemPathRelativeToBase =
      _CFURLCreateWithFileSystemPathRelativeToBasePtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int, CFURLRef)>();

  CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateFromFileSystemRepresentationRelativeToBase(
      allocator,
      buffer,
      bufLen,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr =
      _lookup<
              ffi.NativeFunction<
                  CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
                      Boolean, CFURLRef)>>(
          'CFURLCreateFromFileSystemRepresentationRelativeToBase');
  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase =
      _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  int CFURLGetFileSystemRepresentation(
    CFURLRef url,
    int resolveAgainstBase,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
  ) {
    return _CFURLGetFileSystemRepresentation(
      url,
      resolveAgainstBase,
      buffer,
      maxBufLen,
    );
  }

  late final _CFURLGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, Boolean, ffi.Pointer<UInt8>,
              CFIndex)>>('CFURLGetFileSystemRepresentation');
  late final _CFURLGetFileSystemRepresentation =
      _CFURLGetFileSystemRepresentationPtr.asFunction<
          int Function(CFURLRef, int, ffi.Pointer<UInt8>, int)>();

  CFURLRef CFURLCopyAbsoluteURL(
    CFURLRef relativeURL,
  ) {
    return _CFURLCopyAbsoluteURL(
      relativeURL,
    );
  }

  late final _CFURLCopyAbsoluteURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLCopyAbsoluteURL');
  late final _CFURLCopyAbsoluteURL =
      _CFURLCopyAbsoluteURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  CFStringRef CFURLGetString(
    CFURLRef anURL,
  ) {
    return _CFURLGetString(
      anURL,
    );
  }

  late final _CFURLGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLGetString');
  late final _CFURLGetString =
      _CFURLGetStringPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLGetBaseURL(
    CFURLRef anURL,
  ) {
    return _CFURLGetBaseURL(
      anURL,
    );
  }

  late final _CFURLGetBaseURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLGetBaseURL');
  late final _CFURLGetBaseURL =
      _CFURLGetBaseURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  int CFURLCanBeDecomposed(
    CFURLRef anURL,
  ) {
    return _CFURLCanBeDecomposed(
      anURL,
    );
  }

  late final _CFURLCanBeDecomposedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLCanBeDecomposed');
  late final _CFURLCanBeDecomposed =
      _CFURLCanBeDecomposedPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyScheme(
    CFURLRef anURL,
  ) {
    return _CFURLCopyScheme(
      anURL,
    );
  }

  late final _CFURLCopySchemePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyScheme');
  late final _CFURLCopyScheme =
      _CFURLCopySchemePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyNetLocation(
    CFURLRef anURL,
  ) {
    return _CFURLCopyNetLocation(
      anURL,
    );
  }

  late final _CFURLCopyNetLocationPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyNetLocation');
  late final _CFURLCopyNetLocation =
      _CFURLCopyNetLocationPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPath(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPath(
      anURL,
    );
  }

  late final _CFURLCopyPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPath');
  late final _CFURLCopyPath =
      _CFURLCopyPathPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyStrictPath(
    CFURLRef anURL,
    ffi.Pointer<Boolean> isAbsolute,
  ) {
    return _CFURLCopyStrictPath(
      anURL,
      isAbsolute,
    );
  }

  late final _CFURLCopyStrictPathPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFURLRef, ffi.Pointer<Boolean>)>>('CFURLCopyStrictPath');
  late final _CFURLCopyStrictPath = _CFURLCopyStrictPathPtr.asFunction<
      CFStringRef Function(CFURLRef, ffi.Pointer<Boolean>)>();

  CFStringRef CFURLCopyFileSystemPath(
    CFURLRef anURL,
    int pathStyle,
  ) {
    return _CFURLCopyFileSystemPath(
      anURL,
      pathStyle,
    );
  }

  late final _CFURLCopyFileSystemPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, ffi.Int32)>>(
          'CFURLCopyFileSystemPath');
  late final _CFURLCopyFileSystemPath = _CFURLCopyFileSystemPathPtr.asFunction<
      CFStringRef Function(CFURLRef, int)>();

  int CFURLHasDirectoryPath(
    CFURLRef anURL,
  ) {
    return _CFURLHasDirectoryPath(
      anURL,
    );
  }

  late final _CFURLHasDirectoryPathPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLHasDirectoryPath');
  late final _CFURLHasDirectoryPath =
      _CFURLHasDirectoryPathPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyResourceSpecifier(
    CFURLRef anURL,
  ) {
    return _CFURLCopyResourceSpecifier(
      anURL,
    );
  }

  late final _CFURLCopyResourceSpecifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyResourceSpecifier');
  late final _CFURLCopyResourceSpecifier = _CFURLCopyResourceSpecifierPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyHostName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyHostName(
      anURL,
    );
  }

  late final _CFURLCopyHostNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyHostName');
  late final _CFURLCopyHostName =
      _CFURLCopyHostNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  int CFURLGetPortNumber(
    CFURLRef anURL,
  ) {
    return _CFURLGetPortNumber(
      anURL,
    );
  }

  late final _CFURLGetPortNumberPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFURLRef)>>(
          'CFURLGetPortNumber');
  late final _CFURLGetPortNumber =
      _CFURLGetPortNumberPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyUserName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyUserName(
      anURL,
    );
  }

  late final _CFURLCopyUserNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyUserName');
  late final _CFURLCopyUserName =
      _CFURLCopyUserNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPassword(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPassword(
      anURL,
    );
  }

  late final _CFURLCopyPasswordPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPassword');
  late final _CFURLCopyPassword =
      _CFURLCopyPasswordPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyParameterString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyParameterString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyParameterStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyParameterString');
  late final _CFURLCopyParameterString = _CFURLCopyParameterStringPtr
      .asFunction<CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyQueryString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyQueryString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyQueryStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyQueryString');
  late final _CFURLCopyQueryString = _CFURLCopyQueryStringPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyFragment(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyFragment(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyFragmentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyFragment');
  late final _CFURLCopyFragment = _CFURLCopyFragmentPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyLastPathComponent(
    CFURLRef url,
  ) {
    return _CFURLCopyLastPathComponent(
      url,
    );
  }

  late final _CFURLCopyLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyLastPathComponent');
  late final _CFURLCopyLastPathComponent = _CFURLCopyLastPathComponentPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPathExtension(
    CFURLRef url,
  ) {
    return _CFURLCopyPathExtension(
      url,
    );
  }

  late final _CFURLCopyPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPathExtension');
  late final _CFURLCopyPathExtension =
      _CFURLCopyPathExtensionPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef pathComponent,
    int isDirectory,
  ) {
    return _CFURLCreateCopyAppendingPathComponent(
      allocator,
      url,
      pathComponent,
      isDirectory,
    );
  }

  late final _CFURLCreateCopyAppendingPathComponentPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              Boolean)>>('CFURLCreateCopyAppendingPathComponent');
  late final _CFURLCreateCopyAppendingPathComponent =
      _CFURLCreateCopyAppendingPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef, int)>();

  CFURLRef CFURLCreateCopyDeletingLastPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingLastPathComponent(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingLastPathComponent');
  late final _CFURLCreateCopyDeletingLastPathComponent =
      _CFURLCreateCopyDeletingLastPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef extension1,
  ) {
    return _CFURLCreateCopyAppendingPathExtension(
      allocator,
      url,
      extension1,
    );
  }

  late final _CFURLCreateCopyAppendingPathExtensionPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFURLCreateCopyAppendingPathExtension');
  late final _CFURLCreateCopyAppendingPathExtension =
      _CFURLCreateCopyAppendingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFURLCreateCopyDeletingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingPathExtension(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingPathExtension');
  late final _CFURLCreateCopyDeletingPathExtension =
      _CFURLCreateCopyDeletingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  int CFURLGetBytes(
    CFURLRef url,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFURLGetBytes(
      url,
      buffer,
      bufferLength,
    );
  }

  late final _CFURLGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFURLRef, ffi.Pointer<UInt8>, CFIndex)>>('CFURLGetBytes');
  late final _CFURLGetBytes = _CFURLGetBytesPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<UInt8>, int)>();

  CFRange CFURLGetByteRangeForComponent(
    CFURLRef url,
    int component,
    ffi.Pointer<CFRange> rangeIncludingSeparators,
  ) {
    return _CFURLGetByteRangeForComponent(
      url,
      component,
      rangeIncludingSeparators,
    );
  }

  late final _CFURLGetByteRangeForComponentPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFURLRef, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFURLGetByteRangeForComponent');
  late final _CFURLGetByteRangeForComponent = _CFURLGetByteRangeForComponentPtr
      .asFunction<CFRange Function(CFURLRef, int, ffi.Pointer<CFRange>)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFURLCreateStringByReplacingPercentEscapes');
  late final _CFURLCreateStringByReplacingPercentEscapes =
      _CFURLCreateStringByReplacingPercentEscapesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
    CFAllocatorRef allocator,
    CFStringRef origString,
    CFStringRef charsToLeaveEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
      allocator,
      origString,
      charsToLeaveEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr =
      _lookup<
              ffi.NativeFunction<
                  CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef,
                      CFStringEncoding)>>(
          'CFURLCreateStringByReplacingPercentEscapesUsingEncoding');
  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding =
      _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, int)>();

  CFStringRef CFURLCreateStringByAddingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveUnescaped,
    CFStringRef legalURLCharactersToBeEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByAddingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveUnescaped,
      legalURLCharactersToBeEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByAddingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringEncoding)>>('CFURLCreateStringByAddingPercentEscapes');
  late final _CFURLCreateStringByAddingPercentEscapes =
      _CFURLCreateStringByAddingPercentEscapesPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFStringRef, int)>();

  int CFURLIsFileReferenceURL(
    CFURLRef url,
  ) {
    return _CFURLIsFileReferenceURL(
      url,
    );
  }

  late final _CFURLIsFileReferenceURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLIsFileReferenceURL');
  late final _CFURLIsFileReferenceURL =
      _CFURLIsFileReferenceURLPtr.asFunction<int Function(CFURLRef)>();

  CFURLRef CFURLCreateFileReferenceURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFileReferenceURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFileReferenceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFileReferenceURL');
  late final _CFURLCreateFileReferenceURL =
      _CFURLCreateFileReferenceURLPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFilePathURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFilePathURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFilePathURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFilePathURL');
  late final _CFURLCreateFilePathURL = _CFURLCreateFilePathURLPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFromFSRef(
    CFAllocatorRef allocator,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLCreateFromFSRef(
      allocator,
      fsRef,
    );
  }

  late final _CFURLCreateFromFSRefPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<FSRef>)>>('CFURLCreateFromFSRef');
  late final _CFURLCreateFromFSRef = _CFURLCreateFromFSRefPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, ffi.Pointer<FSRef>)>();

  int CFURLGetFSRef(
    CFURLRef url,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLGetFSRef(
      url,
      fsRef,
    );
  }

  late final _CFURLGetFSRefPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<FSRef>)>>(
      'CFURLGetFSRef');
  late final _CFURLGetFSRef = _CFURLGetFSRefPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<FSRef>)>();

  int CFURLCopyResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    ffi.Pointer<ffi.Void> propertyValueTypeRefPtr,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertyForKey(
      url,
      key,
      propertyValueTypeRefPtr,
      error,
    );
  }

  late final _CFURLCopyResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertyForKey');
  late final _CFURLCopyResourcePropertyForKey =
      _CFURLCopyResourcePropertyForKeyPtr.asFunction<
          int Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCopyResourcePropertiesForKeys(
    CFURLRef url,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertiesForKeys(
      url,
      keys,
      error,
    );
  }

  late final _CFURLCopyResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFURLRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertiesForKeys');
  late final _CFURLCopyResourcePropertiesForKeys =
      _CFURLCopyResourcePropertiesForKeysPtr.asFunction<
          CFDictionaryRef Function(
              CFURLRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertyForKey(
      url,
      key,
      propertyValue,
      error,
    );
  }

  late final _CFURLSetResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, CFTypeRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertyForKey');
  late final _CFURLSetResourcePropertyForKey =
      _CFURLSetResourcePropertyForKeyPtr.asFunction<
          int Function(
              CFURLRef, CFStringRef, CFTypeRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertiesForKeys(
    CFURLRef url,
    CFDictionaryRef keyedPropertyValues,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertiesForKeys(
      url,
      keyedPropertyValues,
      error,
    );
  }

  late final _CFURLSetResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertiesForKeys');
  late final _CFURLSetResourcePropertiesForKeys =
      _CFURLSetResourcePropertiesForKeysPtr.asFunction<
          int Function(CFURLRef, CFDictionaryRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLKeysOfUnsetValuesKey =
      _lookup<CFStringRef>('kCFURLKeysOfUnsetValuesKey');

  CFStringRef get kCFURLKeysOfUnsetValuesKey =>
      _kCFURLKeysOfUnsetValuesKey.value;

  set kCFURLKeysOfUnsetValuesKey(CFStringRef value) =>
      _kCFURLKeysOfUnsetValuesKey.value = value;

  void CFURLClearResourcePropertyCacheForKey(
    CFURLRef url,
    CFStringRef key,
  ) {
    return _CFURLClearResourcePropertyCacheForKey(
      url,
      key,
    );
  }

  late final _CFURLClearResourcePropertyCacheForKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef, CFStringRef)>>(
          'CFURLClearResourcePropertyCacheForKey');
  late final _CFURLClearResourcePropertyCacheForKey =
      _CFURLClearResourcePropertyCacheForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef)>();

  void CFURLClearResourcePropertyCache(
    CFURLRef url,
  ) {
    return _CFURLClearResourcePropertyCache(
      url,
    );
  }

  late final _CFURLClearResourcePropertyCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLClearResourcePropertyCache');
  late final _CFURLClearResourcePropertyCache =
      _CFURLClearResourcePropertyCachePtr.asFunction<void Function(CFURLRef)>();

  void CFURLSetTemporaryResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
  ) {
    return _CFURLSetTemporaryResourcePropertyForKey(
      url,
      key,
      propertyValue,
    );
  }

  late final _CFURLSetTemporaryResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFURLRef, CFStringRef,
              CFTypeRef)>>('CFURLSetTemporaryResourcePropertyForKey');
  late final _CFURLSetTemporaryResourcePropertyForKey =
      _CFURLSetTemporaryResourcePropertyForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef, CFTypeRef)>();

  int CFURLResourceIsReachable(
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLResourceIsReachable(
      url,
      error,
    );
  }

  late final _CFURLResourceIsReachablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLResourceIsReachable');
  late final _CFURLResourceIsReachable = _CFURLResourceIsReachablePtr
      .asFunction<int Function(CFURLRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLNameKey =
      _lookup<CFStringRef>('kCFURLNameKey');

  CFStringRef get kCFURLNameKey => _kCFURLNameKey.value;

  set kCFURLNameKey(CFStringRef value) => _kCFURLNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLLocalizedNameKey');

  CFStringRef get kCFURLLocalizedNameKey => _kCFURLLocalizedNameKey.value;

  set kCFURLLocalizedNameKey(CFStringRef value) =>
      _kCFURLLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsRegularFileKey =
      _lookup<CFStringRef>('kCFURLIsRegularFileKey');

  CFStringRef get kCFURLIsRegularFileKey => _kCFURLIsRegularFileKey.value;

  set kCFURLIsRegularFileKey(CFStringRef value) =>
      _kCFURLIsRegularFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsDirectoryKey =
      _lookup<CFStringRef>('kCFURLIsDirectoryKey');

  CFStringRef get kCFURLIsDirectoryKey => _kCFURLIsDirectoryKey.value;

  set kCFURLIsDirectoryKey(CFStringRef value) =>
      _kCFURLIsDirectoryKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSymbolicLinkKey =
      _lookup<CFStringRef>('kCFURLIsSymbolicLinkKey');

  CFStringRef get kCFURLIsSymbolicLinkKey => _kCFURLIsSymbolicLinkKey.value;

  set kCFURLIsSymbolicLinkKey(CFStringRef value) =>
      _kCFURLIsSymbolicLinkKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsVolumeKey =
      _lookup<CFStringRef>('kCFURLIsVolumeKey');

  CFStringRef get kCFURLIsVolumeKey => _kCFURLIsVolumeKey.value;

  set kCFURLIsVolumeKey(CFStringRef value) => _kCFURLIsVolumeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPackageKey =
      _lookup<CFStringRef>('kCFURLIsPackageKey');

  CFStringRef get kCFURLIsPackageKey => _kCFURLIsPackageKey.value;

  set kCFURLIsPackageKey(CFStringRef value) =>
      _kCFURLIsPackageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsApplicationKey =
      _lookup<CFStringRef>('kCFURLIsApplicationKey');

  CFStringRef get kCFURLIsApplicationKey => _kCFURLIsApplicationKey.value;

  set kCFURLIsApplicationKey(CFStringRef value) =>
      _kCFURLIsApplicationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLApplicationIsScriptableKey =
      _lookup<CFStringRef>('kCFURLApplicationIsScriptableKey');

  CFStringRef get kCFURLApplicationIsScriptableKey =>
      _kCFURLApplicationIsScriptableKey.value;

  set kCFURLApplicationIsScriptableKey(CFStringRef value) =>
      _kCFURLApplicationIsScriptableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSystemImmutableKey =
      _lookup<CFStringRef>('kCFURLIsSystemImmutableKey');

  CFStringRef get kCFURLIsSystemImmutableKey =>
      _kCFURLIsSystemImmutableKey.value;

  set kCFURLIsSystemImmutableKey(CFStringRef value) =>
      _kCFURLIsSystemImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUserImmutableKey =
      _lookup<CFStringRef>('kCFURLIsUserImmutableKey');

  CFStringRef get kCFURLIsUserImmutableKey => _kCFURLIsUserImmutableKey.value;

  set kCFURLIsUserImmutableKey(CFStringRef value) =>
      _kCFURLIsUserImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsHiddenKey =
      _lookup<CFStringRef>('kCFURLIsHiddenKey');

  CFStringRef get kCFURLIsHiddenKey => _kCFURLIsHiddenKey.value;

  set kCFURLIsHiddenKey(CFStringRef value) => _kCFURLIsHiddenKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHasHiddenExtensionKey =
      _lookup<CFStringRef>('kCFURLHasHiddenExtensionKey');

  CFStringRef get kCFURLHasHiddenExtensionKey =>
      _kCFURLHasHiddenExtensionKey.value;

  set kCFURLHasHiddenExtensionKey(CFStringRef value) =>
      _kCFURLHasHiddenExtensionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCreationDateKey =
      _lookup<CFStringRef>('kCFURLCreationDateKey');

  CFStringRef get kCFURLCreationDateKey => _kCFURLCreationDateKey.value;

  set kCFURLCreationDateKey(CFStringRef value) =>
      _kCFURLCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentAccessDateKey =
      _lookup<CFStringRef>('kCFURLContentAccessDateKey');

  CFStringRef get kCFURLContentAccessDateKey =>
      _kCFURLContentAccessDateKey.value;

  set kCFURLContentAccessDateKey(CFStringRef value) =>
      _kCFURLContentAccessDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentModificationDateKey =
      _lookup<CFStringRef>('kCFURLContentModificationDateKey');

  CFStringRef get kCFURLContentModificationDateKey =>
      _kCFURLContentModificationDateKey.value;

  set kCFURLContentModificationDateKey(CFStringRef value) =>
      _kCFURLContentModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAttributeModificationDateKey =
      _lookup<CFStringRef>('kCFURLAttributeModificationDateKey');

  CFStringRef get kCFURLAttributeModificationDateKey =>
      _kCFURLAttributeModificationDateKey.value;

  set kCFURLAttributeModificationDateKey(CFStringRef value) =>
      _kCFURLAttributeModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileContentIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileContentIdentifierKey');

  CFStringRef get kCFURLFileContentIdentifierKey =>
      _kCFURLFileContentIdentifierKey.value;

  set kCFURLFileContentIdentifierKey(CFStringRef value) =>
      _kCFURLFileContentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayShareFileContentKey =
      _lookup<CFStringRef>('kCFURLMayShareFileContentKey');

  CFStringRef get kCFURLMayShareFileContentKey =>
      _kCFURLMayShareFileContentKey.value;

  set kCFURLMayShareFileContentKey(CFStringRef value) =>
      _kCFURLMayShareFileContentKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayHaveExtendedAttributesKey =
      _lookup<CFStringRef>('kCFURLMayHaveExtendedAttributesKey');

  CFStringRef get kCFURLMayHaveExtendedAttributesKey =>
      _kCFURLMayHaveExtendedAttributesKey.value;

  set kCFURLMayHaveExtendedAttributesKey(CFStringRef value) =>
      _kCFURLMayHaveExtendedAttributesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPurgeableKey =
      _lookup<CFStringRef>('kCFURLIsPurgeableKey');

  CFStringRef get kCFURLIsPurgeableKey => _kCFURLIsPurgeableKey.value;

  set kCFURLIsPurgeableKey(CFStringRef value) =>
      _kCFURLIsPurgeableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSparseKey =
      _lookup<CFStringRef>('kCFURLIsSparseKey');

  CFStringRef get kCFURLIsSparseKey => _kCFURLIsSparseKey.value;

  set kCFURLIsSparseKey(CFStringRef value) => _kCFURLIsSparseKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLinkCountKey =
      _lookup<CFStringRef>('kCFURLLinkCountKey');

  CFStringRef get kCFURLLinkCountKey => _kCFURLLinkCountKey.value;

  set kCFURLLinkCountKey(CFStringRef value) =>
      _kCFURLLinkCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLParentDirectoryURLKey =
      _lookup<CFStringRef>('kCFURLParentDirectoryURLKey');

  CFStringRef get kCFURLParentDirectoryURLKey =>
      _kCFURLParentDirectoryURLKey.value;

  set kCFURLParentDirectoryURLKey(CFStringRef value) =>
      _kCFURLParentDirectoryURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLKey =
      _lookup<CFStringRef>('kCFURLVolumeURLKey');

  CFStringRef get kCFURLVolumeURLKey => _kCFURLVolumeURLKey.value;

  set kCFURLVolumeURLKey(CFStringRef value) =>
      _kCFURLVolumeURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTypeIdentifierKey =
      _lookup<CFStringRef>('kCFURLTypeIdentifierKey');

  CFStringRef get kCFURLTypeIdentifierKey => _kCFURLTypeIdentifierKey.value;

  set kCFURLTypeIdentifierKey(CFStringRef value) =>
      _kCFURLTypeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedTypeDescriptionKey =
      _lookup<CFStringRef>('kCFURLLocalizedTypeDescriptionKey');

  CFStringRef get kCFURLLocalizedTypeDescriptionKey =>
      _kCFURLLocalizedTypeDescriptionKey.value;

  set kCFURLLocalizedTypeDescriptionKey(CFStringRef value) =>
      _kCFURLLocalizedTypeDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelNumberKey =
      _lookup<CFStringRef>('kCFURLLabelNumberKey');

  CFStringRef get kCFURLLabelNumberKey => _kCFURLLabelNumberKey.value;

  set kCFURLLabelNumberKey(CFStringRef value) =>
      _kCFURLLabelNumberKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelColorKey =
      _lookup<CFStringRef>('kCFURLLabelColorKey');

  CFStringRef get kCFURLLabelColorKey => _kCFURLLabelColorKey.value;

  set kCFURLLabelColorKey(CFStringRef value) =>
      _kCFURLLabelColorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedLabelKey =
      _lookup<CFStringRef>('kCFURLLocalizedLabelKey');

  CFStringRef get kCFURLLocalizedLabelKey => _kCFURLLocalizedLabelKey.value;

  set kCFURLLocalizedLabelKey(CFStringRef value) =>
      _kCFURLLocalizedLabelKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLEffectiveIconKey =
      _lookup<CFStringRef>('kCFURLEffectiveIconKey');

  CFStringRef get kCFURLEffectiveIconKey => _kCFURLEffectiveIconKey.value;

  set kCFURLEffectiveIconKey(CFStringRef value) =>
      _kCFURLEffectiveIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCustomIconKey =
      _lookup<CFStringRef>('kCFURLCustomIconKey');

  CFStringRef get kCFURLCustomIconKey => _kCFURLCustomIconKey.value;

  set kCFURLCustomIconKey(CFStringRef value) =>
      _kCFURLCustomIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileResourceIdentifierKey');

  CFStringRef get kCFURLFileResourceIdentifierKey =>
      _kCFURLFileResourceIdentifierKey.value;

  set kCFURLFileResourceIdentifierKey(CFStringRef value) =>
      _kCFURLFileResourceIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIdentifierKey =
      _lookup<CFStringRef>('kCFURLVolumeIdentifierKey');

  CFStringRef get kCFURLVolumeIdentifierKey => _kCFURLVolumeIdentifierKey.value;

  set kCFURLVolumeIdentifierKey(CFStringRef value) =>
      _kCFURLVolumeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPreferredIOBlockSizeKey =
      _lookup<CFStringRef>('kCFURLPreferredIOBlockSizeKey');

  CFStringRef get kCFURLPreferredIOBlockSizeKey =>
      _kCFURLPreferredIOBlockSizeKey.value;

  set kCFURLPreferredIOBlockSizeKey(CFStringRef value) =>
      _kCFURLPreferredIOBlockSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsReadableKey =
      _lookup<CFStringRef>('kCFURLIsReadableKey');

  CFStringRef get kCFURLIsReadableKey => _kCFURLIsReadableKey.value;

  set kCFURLIsReadableKey(CFStringRef value) =>
      _kCFURLIsReadableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsWritableKey =
      _lookup<CFStringRef>('kCFURLIsWritableKey');

  CFStringRef get kCFURLIsWritableKey => _kCFURLIsWritableKey.value;

  set kCFURLIsWritableKey(CFStringRef value) =>
      _kCFURLIsWritableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExecutableKey =
      _lookup<CFStringRef>('kCFURLIsExecutableKey');

  CFStringRef get kCFURLIsExecutableKey => _kCFURLIsExecutableKey.value;

  set kCFURLIsExecutableKey(CFStringRef value) =>
      _kCFURLIsExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSecurityKey =
      _lookup<CFStringRef>('kCFURLFileSecurityKey');

  CFStringRef get kCFURLFileSecurityKey => _kCFURLFileSecurityKey.value;

  set kCFURLFileSecurityKey(CFStringRef value) =>
      _kCFURLFileSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExcludedFromBackupKey =
      _lookup<CFStringRef>('kCFURLIsExcludedFromBackupKey');

  CFStringRef get kCFURLIsExcludedFromBackupKey =>
      _kCFURLIsExcludedFromBackupKey.value;

  set kCFURLIsExcludedFromBackupKey(CFStringRef value) =>
      _kCFURLIsExcludedFromBackupKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTagNamesKey =
      _lookup<CFStringRef>('kCFURLTagNamesKey');

  CFStringRef get kCFURLTagNamesKey => _kCFURLTagNamesKey.value;

  set kCFURLTagNamesKey(CFStringRef value) => _kCFURLTagNamesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPathKey =
      _lookup<CFStringRef>('kCFURLPathKey');

  CFStringRef get kCFURLPathKey => _kCFURLPathKey.value;

  set kCFURLPathKey(CFStringRef value) => _kCFURLPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCanonicalPathKey =
      _lookup<CFStringRef>('kCFURLCanonicalPathKey');

  CFStringRef get kCFURLCanonicalPathKey => _kCFURLCanonicalPathKey.value;

  set kCFURLCanonicalPathKey(CFStringRef value) =>
      _kCFURLCanonicalPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsMountTriggerKey =
      _lookup<CFStringRef>('kCFURLIsMountTriggerKey');

  CFStringRef get kCFURLIsMountTriggerKey => _kCFURLIsMountTriggerKey.value;

  set kCFURLIsMountTriggerKey(CFStringRef value) =>
      _kCFURLIsMountTriggerKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLGenerationIdentifierKey =
      _lookup<CFStringRef>('kCFURLGenerationIdentifierKey');

  CFStringRef get kCFURLGenerationIdentifierKey =>
      _kCFURLGenerationIdentifierKey.value;

  set kCFURLGenerationIdentifierKey(CFStringRef value) =>
      _kCFURLGenerationIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLDocumentIdentifierKey =
      _lookup<CFStringRef>('kCFURLDocumentIdentifierKey');

  CFStringRef get kCFURLDocumentIdentifierKey =>
      _kCFURLDocumentIdentifierKey.value;

  set kCFURLDocumentIdentifierKey(CFStringRef value) =>
      _kCFURLDocumentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAddedToDirectoryDateKey =
      _lookup<CFStringRef>('kCFURLAddedToDirectoryDateKey');

  CFStringRef get kCFURLAddedToDirectoryDateKey =>
      _kCFURLAddedToDirectoryDateKey.value;

  set kCFURLAddedToDirectoryDateKey(CFStringRef value) =>
      _kCFURLAddedToDirectoryDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLQuarantinePropertiesKey =
      _lookup<CFStringRef>('kCFURLQuarantinePropertiesKey');

  CFStringRef get kCFURLQuarantinePropertiesKey =>
      _kCFURLQuarantinePropertiesKey.value;

  set kCFURLQuarantinePropertiesKey(CFStringRef value) =>
      _kCFURLQuarantinePropertiesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeKey =
      _lookup<CFStringRef>('kCFURLFileResourceTypeKey');

  CFStringRef get kCFURLFileResourceTypeKey => _kCFURLFileResourceTypeKey.value;

  set kCFURLFileResourceTypeKey(CFStringRef value) =>
      _kCFURLFileResourceTypeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeNamedPipe =
      _lookup<CFStringRef>('kCFURLFileResourceTypeNamedPipe');

  CFStringRef get kCFURLFileResourceTypeNamedPipe =>
      _kCFURLFileResourceTypeNamedPipe.value;

  set kCFURLFileResourceTypeNamedPipe(CFStringRef value) =>
      _kCFURLFileResourceTypeNamedPipe.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeCharacterSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeCharacterSpecial');

  CFStringRef get kCFURLFileResourceTypeCharacterSpecial =>
      _kCFURLFileResourceTypeCharacterSpecial.value;

  set kCFURLFileResourceTypeCharacterSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeCharacterSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeDirectory =
      _lookup<CFStringRef>('kCFURLFileResourceTypeDirectory');

  CFStringRef get kCFURLFileResourceTypeDirectory =>
      _kCFURLFileResourceTypeDirectory.value;

  set kCFURLFileResourceTypeDirectory(CFStringRef value) =>
      _kCFURLFileResourceTypeDirectory.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeBlockSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeBlockSpecial');

  CFStringRef get kCFURLFileResourceTypeBlockSpecial =>
      _kCFURLFileResourceTypeBlockSpecial.value;

  set kCFURLFileResourceTypeBlockSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeBlockSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeRegular =
      _lookup<CFStringRef>('kCFURLFileResourceTypeRegular');

  CFStringRef get kCFURLFileResourceTypeRegular =>
      _kCFURLFileResourceTypeRegular.value;

  set kCFURLFileResourceTypeRegular(CFStringRef value) =>
      _kCFURLFileResourceTypeRegular.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSymbolicLink =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSymbolicLink');

  CFStringRef get kCFURLFileResourceTypeSymbolicLink =>
      _kCFURLFileResourceTypeSymbolicLink.value;

  set kCFURLFileResourceTypeSymbolicLink(CFStringRef value) =>
      _kCFURLFileResourceTypeSymbolicLink.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSocket =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSocket');

  CFStringRef get kCFURLFileResourceTypeSocket =>
      _kCFURLFileResourceTypeSocket.value;

  set kCFURLFileResourceTypeSocket(CFStringRef value) =>
      _kCFURLFileResourceTypeSocket.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeUnknown =
      _lookup<CFStringRef>('kCFURLFileResourceTypeUnknown');

  CFStringRef get kCFURLFileResourceTypeUnknown =>
      _kCFURLFileResourceTypeUnknown.value;

  set kCFURLFileResourceTypeUnknown(CFStringRef value) =>
      _kCFURLFileResourceTypeUnknown.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSizeKey =
      _lookup<CFStringRef>('kCFURLFileSizeKey');

  CFStringRef get kCFURLFileSizeKey => _kCFURLFileSizeKey.value;

  set kCFURLFileSizeKey(CFStringRef value) => _kCFURLFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLFileAllocatedSizeKey');

  CFStringRef get kCFURLFileAllocatedSizeKey =>
      _kCFURLFileAllocatedSizeKey.value;

  set kCFURLFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileSizeKey');

  CFStringRef get kCFURLTotalFileSizeKey => _kCFURLTotalFileSizeKey.value;

  set kCFURLTotalFileSizeKey(CFStringRef value) =>
      _kCFURLTotalFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileAllocatedSizeKey');

  CFStringRef get kCFURLTotalFileAllocatedSizeKey =>
      _kCFURLTotalFileAllocatedSizeKey.value;

  set kCFURLTotalFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLTotalFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsAliasFileKey =
      _lookup<CFStringRef>('kCFURLIsAliasFileKey');

  CFStringRef get kCFURLIsAliasFileKey => _kCFURLIsAliasFileKey.value;

  set kCFURLIsAliasFileKey(CFStringRef value) =>
      _kCFURLIsAliasFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionKey =
      _lookup<CFStringRef>('kCFURLFileProtectionKey');

  CFStringRef get kCFURLFileProtectionKey => _kCFURLFileProtectionKey.value;

  set kCFURLFileProtectionKey(CFStringRef value) =>
      _kCFURLFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionNone =
      _lookup<CFStringRef>('kCFURLFileProtectionNone');

  CFStringRef get kCFURLFileProtectionNone => _kCFURLFileProtectionNone.value;

  set kCFURLFileProtectionNone(CFStringRef value) =>
      _kCFURLFileProtectionNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionComplete =
      _lookup<CFStringRef>('kCFURLFileProtectionComplete');

  CFStringRef get kCFURLFileProtectionComplete =>
      _kCFURLFileProtectionComplete.value;

  set kCFURLFileProtectionComplete(CFStringRef value) =>
      _kCFURLFileProtectionComplete.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionCompleteUnlessOpen =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteUnlessOpen');

  CFStringRef get kCFURLFileProtectionCompleteUnlessOpen =>
      _kCFURLFileProtectionCompleteUnlessOpen.value;

  set kCFURLFileProtectionCompleteUnlessOpen(CFStringRef value) =>
      _kCFURLFileProtectionCompleteUnlessOpen.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<CFStringRef>(
          'kCFURLFileProtectionCompleteUntilFirstUserAuthentication');

  CFStringRef get kCFURLFileProtectionCompleteUntilFirstUserAuthentication =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  set kCFURLFileProtectionCompleteUntilFirstUserAuthentication(
          CFStringRef value) =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeLocalizedFormatDescriptionKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedFormatDescriptionKey');

  CFStringRef get kCFURLVolumeLocalizedFormatDescriptionKey =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value;

  set kCFURLVolumeLocalizedFormatDescriptionKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTotalCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeTotalCapacityKey');

  CFStringRef get kCFURLVolumeTotalCapacityKey =>
      _kCFURLVolumeTotalCapacityKey.value;

  set kCFURLVolumeTotalCapacityKey(CFStringRef value) =>
      _kCFURLVolumeTotalCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeAvailableCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityKey');

  CFStringRef get kCFURLVolumeAvailableCapacityKey =>
      _kCFURLVolumeAvailableCapacityKey.value;

  set kCFURLVolumeAvailableCapacityKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityForImportantUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForImportantUsageKey =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value;

  set kCFURLVolumeAvailableCapacityForImportantUsageKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<CFStringRef>(
          'kCFURLVolumeAvailableCapacityForOpportunisticUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  set kCFURLVolumeAvailableCapacityForOpportunisticUsageKey(
          CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeResourceCountKey =
      _lookup<CFStringRef>('kCFURLVolumeResourceCountKey');

  CFStringRef get kCFURLVolumeResourceCountKey =>
      _kCFURLVolumeResourceCountKey.value;

  set kCFURLVolumeResourceCountKey(CFStringRef value) =>
      _kCFURLVolumeResourceCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsPersistentIDsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsPersistentIDsKey');

  CFStringRef get kCFURLVolumeSupportsPersistentIDsKey =>
      _kCFURLVolumeSupportsPersistentIDsKey.value;

  set kCFURLVolumeSupportsPersistentIDsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsPersistentIDsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSymbolicLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSymbolicLinksKey');

  CFStringRef get kCFURLVolumeSupportsSymbolicLinksKey =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value;

  set kCFURLVolumeSupportsSymbolicLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsHardLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsHardLinksKey');

  CFStringRef get kCFURLVolumeSupportsHardLinksKey =>
      _kCFURLVolumeSupportsHardLinksKey.value;

  set kCFURLVolumeSupportsHardLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsHardLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsJournalingKey');

  CFStringRef get kCFURLVolumeSupportsJournalingKey =>
      _kCFURLVolumeSupportsJournalingKey.value;

  set kCFURLVolumeSupportsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeIsJournalingKey');

  CFStringRef get kCFURLVolumeIsJournalingKey =>
      _kCFURLVolumeIsJournalingKey.value;

  set kCFURLVolumeIsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeIsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSparseFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSparseFilesKey');

  CFStringRef get kCFURLVolumeSupportsSparseFilesKey =>
      _kCFURLVolumeSupportsSparseFilesKey.value;

  set kCFURLVolumeSupportsSparseFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSparseFilesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsZeroRunsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsZeroRunsKey');

  CFStringRef get kCFURLVolumeSupportsZeroRunsKey =>
      _kCFURLVolumeSupportsZeroRunsKey.value;

  set kCFURLVolumeSupportsZeroRunsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsZeroRunsKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCaseSensitiveNamesKey');

  CFStringRef get kCFURLVolumeSupportsCaseSensitiveNamesKey =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value;

  set kCFURLVolumeSupportsCaseSensitiveNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCasePreservedNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCasePreservedNamesKey');

  CFStringRef get kCFURLVolumeSupportsCasePreservedNamesKey =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value;

  set kCFURLVolumeSupportsCasePreservedNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRootDirectoryDatesKey');

  CFStringRef get kCFURLVolumeSupportsRootDirectoryDatesKey =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value;

  set kCFURLVolumeSupportsRootDirectoryDatesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsVolumeSizesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsVolumeSizesKey');

  CFStringRef get kCFURLVolumeSupportsVolumeSizesKey =>
      _kCFURLVolumeSupportsVolumeSizesKey.value;

  set kCFURLVolumeSupportsVolumeSizesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsVolumeSizesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRenamingKey');

  CFStringRef get kCFURLVolumeSupportsRenamingKey =>
      _kCFURLVolumeSupportsRenamingKey.value;

  set kCFURLVolumeSupportsRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAdvisoryFileLockingKey');

  CFStringRef get kCFURLVolumeSupportsAdvisoryFileLockingKey =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value;

  set kCFURLVolumeSupportsAdvisoryFileLockingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsExtendedSecurityKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExtendedSecurityKey');

  CFStringRef get kCFURLVolumeSupportsExtendedSecurityKey =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value;

  set kCFURLVolumeSupportsExtendedSecurityKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsBrowsableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsBrowsableKey');

  CFStringRef get kCFURLVolumeIsBrowsableKey =>
      _kCFURLVolumeIsBrowsableKey.value;

  set kCFURLVolumeIsBrowsableKey(CFStringRef value) =>
      _kCFURLVolumeIsBrowsableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMaximumFileSizeKey =
      _lookup<CFStringRef>('kCFURLVolumeMaximumFileSizeKey');

  CFStringRef get kCFURLVolumeMaximumFileSizeKey =>
      _kCFURLVolumeMaximumFileSizeKey.value;

  set kCFURLVolumeMaximumFileSizeKey(CFStringRef value) =>
      _kCFURLVolumeMaximumFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEjectableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEjectableKey');

  CFStringRef get kCFURLVolumeIsEjectableKey =>
      _kCFURLVolumeIsEjectableKey.value;

  set kCFURLVolumeIsEjectableKey(CFStringRef value) =>
      _kCFURLVolumeIsEjectableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRemovableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRemovableKey');

  CFStringRef get kCFURLVolumeIsRemovableKey =>
      _kCFURLVolumeIsRemovableKey.value;

  set kCFURLVolumeIsRemovableKey(CFStringRef value) =>
      _kCFURLVolumeIsRemovableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsInternalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsInternalKey');

  CFStringRef get kCFURLVolumeIsInternalKey => _kCFURLVolumeIsInternalKey.value;

  set kCFURLVolumeIsInternalKey(CFStringRef value) =>
      _kCFURLVolumeIsInternalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsAutomountedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsAutomountedKey');

  CFStringRef get kCFURLVolumeIsAutomountedKey =>
      _kCFURLVolumeIsAutomountedKey.value;

  set kCFURLVolumeIsAutomountedKey(CFStringRef value) =>
      _kCFURLVolumeIsAutomountedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsLocalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsLocalKey');

  CFStringRef get kCFURLVolumeIsLocalKey => _kCFURLVolumeIsLocalKey.value;

  set kCFURLVolumeIsLocalKey(CFStringRef value) =>
      _kCFURLVolumeIsLocalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsReadOnlyKey =
      _lookup<CFStringRef>('kCFURLVolumeIsReadOnlyKey');

  CFStringRef get kCFURLVolumeIsReadOnlyKey => _kCFURLVolumeIsReadOnlyKey.value;

  set kCFURLVolumeIsReadOnlyKey(CFStringRef value) =>
      _kCFURLVolumeIsReadOnlyKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeCreationDateKey =
      _lookup<CFStringRef>('kCFURLVolumeCreationDateKey');

  CFStringRef get kCFURLVolumeCreationDateKey =>
      _kCFURLVolumeCreationDateKey.value;

  set kCFURLVolumeCreationDateKey(CFStringRef value) =>
      _kCFURLVolumeCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLForRemountingKey =
      _lookup<CFStringRef>('kCFURLVolumeURLForRemountingKey');

  CFStringRef get kCFURLVolumeURLForRemountingKey =>
      _kCFURLVolumeURLForRemountingKey.value;

  set kCFURLVolumeURLForRemountingKey(CFStringRef value) =>
      _kCFURLVolumeURLForRemountingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeUUIDStringKey =
      _lookup<CFStringRef>('kCFURLVolumeUUIDStringKey');

  CFStringRef get kCFURLVolumeUUIDStringKey => _kCFURLVolumeUUIDStringKey.value;

  set kCFURLVolumeUUIDStringKey(CFStringRef value) =>
      _kCFURLVolumeUUIDStringKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeNameKey');

  CFStringRef get kCFURLVolumeNameKey => _kCFURLVolumeNameKey.value;

  set kCFURLVolumeNameKey(CFStringRef value) =>
      _kCFURLVolumeNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedNameKey');

  CFStringRef get kCFURLVolumeLocalizedNameKey =>
      _kCFURLVolumeLocalizedNameKey.value;

  set kCFURLVolumeLocalizedNameKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEncryptedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEncryptedKey');

  CFStringRef get kCFURLVolumeIsEncryptedKey =>
      _kCFURLVolumeIsEncryptedKey.value;

  set kCFURLVolumeIsEncryptedKey(CFStringRef value) =>
      _kCFURLVolumeIsEncryptedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRootFileSystemKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRootFileSystemKey');

  CFStringRef get kCFURLVolumeIsRootFileSystemKey =>
      _kCFURLVolumeIsRootFileSystemKey.value;

  set kCFURLVolumeIsRootFileSystemKey(CFStringRef value) =>
      _kCFURLVolumeIsRootFileSystemKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsCompressionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCompressionKey');

  CFStringRef get kCFURLVolumeSupportsCompressionKey =>
      _kCFURLVolumeSupportsCompressionKey.value;

  set kCFURLVolumeSupportsCompressionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCompressionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileCloningKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileCloningKey');

  CFStringRef get kCFURLVolumeSupportsFileCloningKey =>
      _kCFURLVolumeSupportsFileCloningKey.value;

  set kCFURLVolumeSupportsFileCloningKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileCloningKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSwapRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSwapRenamingKey');

  CFStringRef get kCFURLVolumeSupportsSwapRenamingKey =>
      _kCFURLVolumeSupportsSwapRenamingKey.value;

  set kCFURLVolumeSupportsSwapRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSwapRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsExclusiveRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExclusiveRenamingKey');

  CFStringRef get kCFURLVolumeSupportsExclusiveRenamingKey =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value;

  set kCFURLVolumeSupportsExclusiveRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsImmutableFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsImmutableFilesKey');

  CFStringRef get kCFURLVolumeSupportsImmutableFilesKey =>
      _kCFURLVolumeSupportsImmutableFilesKey.value;

  set kCFURLVolumeSupportsImmutableFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsImmutableFilesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAccessPermissionsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAccessPermissionsKey');

  CFStringRef get kCFURLVolumeSupportsAccessPermissionsKey =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value;

  set kCFURLVolumeSupportsAccessPermissionsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileProtectionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileProtectionKey');

  CFStringRef get kCFURLVolumeSupportsFileProtectionKey =>
      _kCFURLVolumeSupportsFileProtectionKey.value;

  set kCFURLVolumeSupportsFileProtectionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUbiquitousItemKey =
      _lookup<CFStringRef>('kCFURLIsUbiquitousItemKey');

  CFStringRef get kCFURLIsUbiquitousItemKey => _kCFURLIsUbiquitousItemKey.value;

  set kCFURLIsUbiquitousItemKey(CFStringRef value) =>
      _kCFURLIsUbiquitousItemKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemHasUnresolvedConflictsKey');

  CFStringRef get kCFURLUbiquitousItemHasUnresolvedConflictsKey =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value;

  set kCFURLUbiquitousItemHasUnresolvedConflictsKey(CFStringRef value) =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadedKey =>
      _kCFURLUbiquitousItemIsDownloadedKey.value;

  set kCFURLUbiquitousItemIsDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadingKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadingKey =>
      _kCFURLUbiquitousItemIsDownloadingKey.value;

  set kCFURLUbiquitousItemIsDownloadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadedKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadedKey =>
      _kCFURLUbiquitousItemIsUploadedKey.value;

  set kCFURLUbiquitousItemIsUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadingKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadingKey =>
      _kCFURLUbiquitousItemIsUploadingKey.value;

  set kCFURLUbiquitousItemIsUploadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemPercentDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentDownloadedKey =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value;

  set kCFURLUbiquitousItemPercentDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemPercentUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentUploadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentUploadedKey =>
      _kCFURLUbiquitousItemPercentUploadedKey.value;

  set kCFURLUbiquitousItemPercentUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusKey =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value;

  set kCFURLUbiquitousItemDownloadingStatusKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemDownloadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingErrorKey =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value;

  set kCFURLUbiquitousItemDownloadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemUploadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemUploadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemUploadingErrorKey =>
      _kCFURLUbiquitousItemUploadingErrorKey.value;

  set kCFURLUbiquitousItemUploadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemUploadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsExcludedFromSyncKey');

  CFStringRef get kCFURLUbiquitousItemIsExcludedFromSyncKey =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value;

  set kCFURLUbiquitousItemIsExcludedFromSyncKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<CFStringRef>(
          'kCFURLUbiquitousItemDownloadingStatusNotDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusNotDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusNotDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusCurrent');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusCurrent =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value;

  set kCFURLUbiquitousItemDownloadingStatusCurrent(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value = value;

  CFDataRef CFURLCreateBookmarkData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int options,
    CFArrayRef resourcePropertiesToInclude,
    CFURLRef relativeToURL,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateBookmarkData(
      allocator,
      url,
      options,
      resourcePropertiesToInclude,
      relativeToURL,
      error,
    );
  }

  late final _CFURLCreateBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, ffi.Int32, CFArrayRef,
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkData');
  late final _CFURLCreateBookmarkData = _CFURLCreateBookmarkDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, CFArrayRef, CFURLRef,
          ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateByResolvingBookmarkData(
    CFAllocatorRef allocator,
    CFDataRef bookmark,
    int options,
    CFURLRef relativeToURL,
    CFArrayRef resourcePropertiesToInclude,
    ffi.Pointer<Boolean> isStale,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateByResolvingBookmarkData(
      allocator,
      bookmark,
      options,
      relativeToURL,
      resourcePropertiesToInclude,
      isStale,
      error,
    );
  }

  late final _CFURLCreateByResolvingBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFDataRef,
              ffi.Int32,
              CFURLRef,
              CFArrayRef,
              ffi.Pointer<Boolean>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateByResolvingBookmarkData');
  late final _CFURLCreateByResolvingBookmarkData =
      _CFURLCreateByResolvingBookmarkDataPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFDataRef, int, CFURLRef,
              CFArrayRef, ffi.Pointer<Boolean>, ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData(
    CFAllocatorRef allocator,
    CFArrayRef resourcePropertiesToReturn,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertiesForKeysFromBookmarkData(
      allocator,
      resourcePropertiesToReturn,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>>(
      'CFURLCreateResourcePropertiesForKeysFromBookmarkData');
  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData =
      _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>();

  CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData(
    CFAllocatorRef allocator,
    CFStringRef resourcePropertyKey,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertyForKeyFromBookmarkData(
      allocator,
      resourcePropertyKey,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef,
              CFDataRef)>>('CFURLCreateResourcePropertyForKeyFromBookmarkData');
  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData =
      _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr.asFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFDataRef CFURLCreateBookmarkDataFromFile(
    CFAllocatorRef allocator,
    CFURLRef fileURL,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLCreateBookmarkDataFromFile(
      allocator,
      fileURL,
      errorRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromFilePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkDataFromFile');
  late final _CFURLCreateBookmarkDataFromFile =
      _CFURLCreateBookmarkDataFromFilePtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLWriteBookmarkDataToFile(
    CFDataRef bookmarkRef,
    CFURLRef fileURL,
    int options,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLWriteBookmarkDataToFile(
      bookmarkRef,
      fileURL,
      options,
      errorRef,
    );
  }

  late final _CFURLWriteBookmarkDataToFilePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFDataRef,
              CFURLRef,
              CFURLBookmarkFileCreationOptions,
              ffi.Pointer<CFErrorRef>)>>('CFURLWriteBookmarkDataToFile');
  late final _CFURLWriteBookmarkDataToFile =
      _CFURLWriteBookmarkDataToFilePtr.asFunction<
          int Function(CFDataRef, CFURLRef, int, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkDataFromAliasRecord(
    CFAllocatorRef allocatorRef,
    CFDataRef aliasRecordDataRef,
  ) {
    return _CFURLCreateBookmarkDataFromAliasRecord(
      allocatorRef,
      aliasRecordDataRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromAliasRecordPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFURLCreateBookmarkDataFromAliasRecord');
  late final _CFURLCreateBookmarkDataFromAliasRecord =
      _CFURLCreateBookmarkDataFromAliasRecordPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  int CFURLStartAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStartAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStartAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLStartAccessingSecurityScopedResource');
  late final _CFURLStartAccessingSecurityScopedResource =
      _CFURLStartAccessingSecurityScopedResourcePtr.asFunction<
          int Function(CFURLRef)>();

  void CFURLStopAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStopAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStopAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLStopAccessingSecurityScopedResource');
  late final _CFURLStopAccessingSecurityScopedResource =
      _CFURLStopAccessingSecurityScopedResourcePtr.asFunction<
          void Function(CFURLRef)>();

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopDefaultMode =
      _lookup<CFRunLoopMode>('kCFRunLoopDefaultMode');

  CFRunLoopMode get kCFRunLoopDefaultMode => _kCFRunLoopDefaultMode.value;

  set kCFRunLoopDefaultMode(CFRunLoopMode value) =>
      _kCFRunLoopDefaultMode.value = value;

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopCommonModes =
      _lookup<CFRunLoopMode>('kCFRunLoopCommonModes');

  CFRunLoopMode get kCFRunLoopCommonModes => _kCFRunLoopCommonModes.value;

  set kCFRunLoopCommonModes(CFRunLoopMode value) =>
      _kCFRunLoopCommonModes.value = value;

  int CFRunLoopGetTypeID() {
    return _CFRunLoopGetTypeID();
  }

  late final _CFRunLoopGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFRunLoopGetTypeID');
  late final _CFRunLoopGetTypeID =
      _CFRunLoopGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGetCurrent();
  }

  late final _CFRunLoopGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent =
      _CFRunLoopGetCurrentPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGetMain();
  }

  late final _CFRunLoopGetMainPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>('CFRunLoopGetMain');
  late final _CFRunLoopGetMain =
      _CFRunLoopGetMainPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopMode CFRunLoopCopyCurrentMode(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyCurrentMode(
      rl,
    );
  }

  late final _CFRunLoopCopyCurrentModePtr =
      _lookup<ffi.NativeFunction<CFRunLoopMode Function(CFRunLoopRef)>>(
          'CFRunLoopCopyCurrentMode');
  late final _CFRunLoopCopyCurrentMode = _CFRunLoopCopyCurrentModePtr
      .asFunction<CFRunLoopMode Function(CFRunLoopRef)>();

  CFArrayRef CFRunLoopCopyAllModes(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyAllModes(
      rl,
    );
  }

  late final _CFRunLoopCopyAllModesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFRunLoopRef)>>(
          'CFRunLoopCopyAllModes');
  late final _CFRunLoopCopyAllModes =
      _CFRunLoopCopyAllModesPtr.asFunction<CFArrayRef Function(CFRunLoopRef)>();

  void CFRunLoopAddCommonMode(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddCommonMode(
      rl,
      mode,
    );
  }

  late final _CFRunLoopAddCommonModePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFRunLoopRef, CFRunLoopMode)>>(
      'CFRunLoopAddCommonMode');
  late final _CFRunLoopAddCommonMode = _CFRunLoopAddCommonModePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopMode)>();

  double CFRunLoopGetNextTimerFireDate(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopGetNextTimerFireDate(
      rl,
      mode,
    );
  }

  late final _CFRunLoopGetNextTimerFireDatePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(
              CFRunLoopRef, CFRunLoopMode)>>('CFRunLoopGetNextTimerFireDate');
  late final _CFRunLoopGetNextTimerFireDate = _CFRunLoopGetNextTimerFireDatePtr
      .asFunction<double Function(CFRunLoopRef, CFRunLoopMode)>();

  void CFRunLoopRun() {
    return _CFRunLoopRun();
  }

  late final _CFRunLoopRunPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFRunLoopRun');
  late final _CFRunLoopRun = _CFRunLoopRunPtr.asFunction<void Function()>();

  int CFRunLoopRunInMode(
    CFRunLoopMode mode,
    double seconds,
    int returnAfterSourceHandled,
  ) {
    return _CFRunLoopRunInMode(
      mode,
      seconds,
      returnAfterSourceHandled,
    );
  }

  late final _CFRunLoopRunInModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFRunLoopMode, CFTimeInterval, Boolean)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode = _CFRunLoopRunInModePtr.asFunction<
      int Function(CFRunLoopMode, double, int)>();

  int CFRunLoopIsWaiting(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopIsWaiting(
      rl,
    );
  }

  late final _CFRunLoopIsWaitingPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopRef)>>(
          'CFRunLoopIsWaiting');
  late final _CFRunLoopIsWaiting =
      _CFRunLoopIsWaitingPtr.asFunction<int Function(CFRunLoopRef)>();

  void CFRunLoopWakeUp(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopWakeUp(
      rl,
    );
  }

  late final _CFRunLoopWakeUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopWakeUp');
  late final _CFRunLoopWakeUp =
      _CFRunLoopWakeUpPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopStop(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopStop(
      rl,
    );
  }

  late final _CFRunLoopStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopStop');
  late final _CFRunLoopStop =
      _CFRunLoopStopPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopPerformBlock(
    CFRunLoopRef rl,
    CFTypeRef mode,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return _CFRunLoopPerformBlock(
      rl,
      mode,
      block,
    );
  }

  late final _CFRunLoopPerformBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFTypeRef,
              ffi.Pointer<_ObjCBlock>)>>('CFRunLoopPerformBlock');
  late final _CFRunLoopPerformBlock = _CFRunLoopPerformBlockPtr.asFunction<
      void Function(CFRunLoopRef, CFTypeRef, ffi.Pointer<_ObjCBlock>)>();

  int CFRunLoopContainsSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopContainsSourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopContainsSource');
  late final _CFRunLoopContainsSource = _CFRunLoopContainsSourcePtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopAddSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource = _CFRunLoopAddSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopRemoveSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopRemoveSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopRemoveSource');
  late final _CFRunLoopRemoveSource = _CFRunLoopRemoveSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  int CFRunLoopContainsObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopContainsObserverPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopContainsObserver');
  late final _CFRunLoopContainsObserver =
      _CFRunLoopContainsObserverPtr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopAddObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopAddObserver');
  late final _CFRunLoopAddObserver = _CFRunLoopAddObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopRemoveObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopRemoveObserver');
  late final _CFRunLoopRemoveObserver = _CFRunLoopRemoveObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  int CFRunLoopContainsTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopContainsTimerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopContainsTimer');
  late final _CFRunLoopContainsTimer = _CFRunLoopContainsTimerPtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopAddTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopAddTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopAddTimer');
  late final _CFRunLoopAddTimer = _CFRunLoopAddTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopRemoveTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopRemoveTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopRemoveTimer');
  late final _CFRunLoopRemoveTimer = _CFRunLoopRemoveTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  int CFRunLoopSourceGetTypeID() {
    return _CFRunLoopSourceGetTypeID();
  }

  late final _CFRunLoopSourceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopSourceGetTypeID');
  late final _CFRunLoopSourceGetTypeID =
      _CFRunLoopSourceGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopSourceRef CFRunLoopSourceCreate(
    CFAllocatorRef allocator,
    int order,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceCreate(
      allocator,
      order,
      context,
    );
  }

  late final _CFRunLoopSourceCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFRunLoopSourceContext>)>>('CFRunLoopSourceCreate');
  late final _CFRunLoopSourceCreate = _CFRunLoopSourceCreatePtr.asFunction<
      CFRunLoopSourceRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFRunLoopSourceContext>)>();

  int CFRunLoopSourceGetOrder(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceGetOrder(
      source,
    );
  }

  late final _CFRunLoopSourceGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceGetOrder');
  late final _CFRunLoopSourceGetOrder = _CFRunLoopSourceGetOrderPtr.asFunction<
      int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceInvalidate(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceInvalidate(
      source,
    );
  }

  late final _CFRunLoopSourceInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceInvalidate');
  late final _CFRunLoopSourceInvalidate = _CFRunLoopSourceInvalidatePtr
      .asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopSourceIsValid(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceIsValid(
      source,
    );
  }

  late final _CFRunLoopSourceIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceIsValid');
  late final _CFRunLoopSourceIsValid =
      _CFRunLoopSourceIsValidPtr.asFunction<int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceGetContext(
    CFRunLoopSourceRef source,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceGetContext(
      source,
      context,
    );
  }

  late final _CFRunLoopSourceGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>>(
      'CFRunLoopSourceGetContext');
  late final _CFRunLoopSourceGetContext =
      _CFRunLoopSourceGetContextPtr.asFunction<
          void Function(
              CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>();

  void CFRunLoopSourceSignal(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceSignal(
      source,
    );
  }

  late final _CFRunLoopSourceSignalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceSignal');
  late final _CFRunLoopSourceSignal =
      _CFRunLoopSourceSignalPtr.asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopObserverGetTypeID() {
    return _CFRunLoopObserverGetTypeID();
  }

  late final _CFRunLoopObserverGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopObserverGetTypeID');
  late final _CFRunLoopObserverGetTypeID =
      _CFRunLoopObserverGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopObserverRef CFRunLoopObserverCreate(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    CFRunLoopObserverCallBack callout,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverCreate(
      allocator,
      activities,
      repeats,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopObserverCreatePtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(
                  CFAllocatorRef,
                  CFOptionFlags,
                  Boolean,
                  CFIndex,
                  CFRunLoopObserverCallBack,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverCreate');
  late final _CFRunLoopObserverCreate = _CFRunLoopObserverCreatePtr.asFunction<
      CFRunLoopObserverRef Function(CFAllocatorRef, int, int, int,
          CFRunLoopObserverCallBack, ffi.Pointer<CFRunLoopObserverContext>)>();

  CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return _CFRunLoopObserverCreateWithHandler(
      allocator,
      activities,
      repeats,
      order,
      block,
    );
  }

  late final _CFRunLoopObserverCreateWithHandlerPtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef,
              CFOptionFlags,
              Boolean,
              CFIndex,
              ffi.Pointer<_ObjCBlock>)>>('CFRunLoopObserverCreateWithHandler');
  late final _CFRunLoopObserverCreateWithHandler =
      _CFRunLoopObserverCreateWithHandlerPtr.asFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef, int, int, int, ffi.Pointer<_ObjCBlock>)>();

  int CFRunLoopObserverGetActivities(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetActivities(
      observer,
    );
  }

  late final _CFRunLoopObserverGetActivitiesPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetActivities');
  late final _CFRunLoopObserverGetActivities =
      _CFRunLoopObserverGetActivitiesPtr.asFunction<
          int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverDoesRepeat(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverDoesRepeat(
      observer,
    );
  }

  late final _CFRunLoopObserverDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverDoesRepeat');
  late final _CFRunLoopObserverDoesRepeat = _CFRunLoopObserverDoesRepeatPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverGetOrder(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetOrder(
      observer,
    );
  }

  late final _CFRunLoopObserverGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetOrder');
  late final _CFRunLoopObserverGetOrder = _CFRunLoopObserverGetOrderPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverInvalidate(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverInvalidate(
      observer,
    );
  }

  late final _CFRunLoopObserverInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverInvalidate');
  late final _CFRunLoopObserverInvalidate = _CFRunLoopObserverInvalidatePtr
      .asFunction<void Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverIsValid(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverIsValid(
      observer,
    );
  }

  late final _CFRunLoopObserverIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverIsValid');
  late final _CFRunLoopObserverIsValid = _CFRunLoopObserverIsValidPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverGetContext(
    CFRunLoopObserverRef observer,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverGetContext(
      observer,
      context,
    );
  }

  late final _CFRunLoopObserverGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverGetContext');
  late final _CFRunLoopObserverGetContext =
      _CFRunLoopObserverGetContextPtr.asFunction<
          void Function(
              CFRunLoopObserverRef, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopTimerGetTypeID() {
    return _CFRunLoopTimerGetTypeID();
  }

  late final _CFRunLoopTimerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopTimerGetTypeID');
  late final _CFRunLoopTimerGetTypeID =
      _CFRunLoopTimerGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopTimerRef CFRunLoopTimerCreate(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    CFRunLoopTimerCallBack callout,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerCreate(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopTimerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              CFRunLoopTimerCallBack,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerCreate');
  late final _CFRunLoopTimerCreate = _CFRunLoopTimerCreatePtr.asFunction<
      CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
          CFRunLoopTimerCallBack, ffi.Pointer<CFRunLoopTimerContext>)>();

  CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return _CFRunLoopTimerCreateWithHandler(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      block,
    );
  }

  late final _CFRunLoopTimerCreateWithHandlerPtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<_ObjCBlock>)>>('CFRunLoopTimerCreateWithHandler');
  late final _CFRunLoopTimerCreateWithHandler =
      _CFRunLoopTimerCreateWithHandlerPtr.asFunction<
          CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
              ffi.Pointer<_ObjCBlock>)>();

  double CFRunLoopTimerGetNextFireDate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetNextFireDate(
      timer,
    );
  }

  late final _CFRunLoopTimerGetNextFireDatePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetNextFireDate');
  late final _CFRunLoopTimerGetNextFireDate = _CFRunLoopTimerGetNextFireDatePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetNextFireDate(
    CFRunLoopTimerRef timer,
    double fireDate,
  ) {
    return _CFRunLoopTimerSetNextFireDate(
      timer,
      fireDate,
    );
  }

  late final _CFRunLoopTimerSetNextFireDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFAbsoluteTime)>>('CFRunLoopTimerSetNextFireDate');
  late final _CFRunLoopTimerSetNextFireDate = _CFRunLoopTimerSetNextFireDatePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  double CFRunLoopTimerGetInterval(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetInterval(
      timer,
    );
  }

  late final _CFRunLoopTimerGetIntervalPtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetInterval');
  late final _CFRunLoopTimerGetInterval = _CFRunLoopTimerGetIntervalPtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerDoesRepeat(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerDoesRepeat(
      timer,
    );
  }

  late final _CFRunLoopTimerDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerDoesRepeat');
  late final _CFRunLoopTimerDoesRepeat = _CFRunLoopTimerDoesRepeatPtr
      .asFunction<int Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerGetOrder(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetOrder(
      timer,
    );
  }

  late final _CFRunLoopTimerGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetOrder');
  late final _CFRunLoopTimerGetOrder =
      _CFRunLoopTimerGetOrderPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerInvalidate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerInvalidate(
      timer,
    );
  }

  late final _CFRunLoopTimerInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerInvalidate');
  late final _CFRunLoopTimerInvalidate = _CFRunLoopTimerInvalidatePtr
      .asFunction<void Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerIsValid(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerIsValid(
      timer,
    );
  }

  late final _CFRunLoopTimerIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerIsValid');
  late final _CFRunLoopTimerIsValid =
      _CFRunLoopTimerIsValidPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerGetContext(
    CFRunLoopTimerRef timer,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerGetContext(
      timer,
      context,
    );
  }

  late final _CFRunLoopTimerGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerGetContext');
  late final _CFRunLoopTimerGetContext =
      _CFRunLoopTimerGetContextPtr.asFunction<
          void Function(
              CFRunLoopTimerRef, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetTolerance(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetTolerance(
      timer,
    );
  }

  late final _CFRunLoopTimerGetTolerancePtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetTolerance');
  late final _CFRunLoopTimerGetTolerance = _CFRunLoopTimerGetTolerancePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetTolerance(
    CFRunLoopTimerRef timer,
    double tolerance,
  ) {
    return _CFRunLoopTimerSetTolerance(
      timer,
      tolerance,
    );
  }

  late final _CFRunLoopTimerSetTolerancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFTimeInterval)>>('CFRunLoopTimerSetTolerance');
  late final _CFRunLoopTimerSetTolerance = _CFRunLoopTimerSetTolerancePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  int CFSocketGetTypeID() {
    return _CFSocketGetTypeID();
  }

  late final _CFSocketGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSocketGetTypeID');
  late final _CFSocketGetTypeID =
      _CFSocketGetTypeIDPtr.asFunction<int Function()>();

  CFSocketRef CFSocketCreate(
    CFAllocatorRef allocator,
    int protocolFamily,
    int socketType,
    int protocol,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreate(
      allocator,
      protocolFamily,
      socketType,
      protocol,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              SInt32,
              SInt32,
              SInt32,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreate');
  late final _CFSocketCreate = _CFSocketCreatePtr.asFunction<
      CFSocketRef Function(CFAllocatorRef, int, int, int, int, CFSocketCallBack,
          ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithNative(
    CFAllocatorRef allocator,
    int sock,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithNative(
      allocator,
      sock,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithNativePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreateWithNative');
  late final _CFSocketCreateWithNative =
      _CFSocketCreateWithNativePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, int, int, CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketRef Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  CFOptionFlags,
                  CFSocketCallBack,
                  ffi.Pointer<CFSocketContext>)>>(
      'CFSocketCreateWithSocketSignature');
  late final _CFSocketCreateWithSocketSignature =
      _CFSocketCreateWithSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateConnectedToSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
    double timeout,
  ) {
    return _CFSocketCreateConnectedToSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
      timeout,
    );
  }

  late final _CFSocketCreateConnectedToSocketSignaturePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              ffi.Pointer<CFSocketSignature>,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>,
              CFTimeInterval)>>('CFSocketCreateConnectedToSocketSignature');
  late final _CFSocketCreateConnectedToSocketSignature =
      _CFSocketCreateConnectedToSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>, double)>();

  int CFSocketSetAddress(
    CFSocketRef s,
    CFDataRef address,
  ) {
    return _CFSocketSetAddress(
      s,
      address,
    );
  }

  late final _CFSocketSetAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFSocketRef, CFDataRef)>>(
          'CFSocketSetAddress');
  late final _CFSocketSetAddress =
      _CFSocketSetAddressPtr.asFunction<int Function(CFSocketRef, CFDataRef)>();

  int CFSocketConnectToAddress(
    CFSocketRef s,
    CFDataRef address,
    double timeout,
  ) {
    return _CFSocketConnectToAddress(
      s,
      address,
      timeout,
    );
  }

  late final _CFSocketConnectToAddressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFSocketRef, CFDataRef,
              CFTimeInterval)>>('CFSocketConnectToAddress');
  late final _CFSocketConnectToAddress = _CFSocketConnectToAddressPtr
      .asFunction<int Function(CFSocketRef, CFDataRef, double)>();

  void CFSocketInvalidate(
    CFSocketRef s,
  ) {
    return _CFSocketInvalidate(
      s,
    );
  }

  late final _CFSocketInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFSocketRef)>>(
          'CFSocketInvalidate');
  late final _CFSocketInvalidate =
      _CFSocketInvalidatePtr.asFunction<void Function(CFSocketRef)>();

  int CFSocketIsValid(
    CFSocketRef s,
  ) {
    return _CFSocketIsValid(
      s,
    );
  }

  late final _CFSocketIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFSocketRef)>>(
          'CFSocketIsValid');
  late final _CFSocketIsValid =
      _CFSocketIsValidPtr.asFunction<int Function(CFSocketRef)>();

  CFDataRef CFSocketCopyAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyAddress(
      s,
    );
  }

  late final _CFSocketCopyAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyAddress');
  late final _CFSocketCopyAddress =
      _CFSocketCopyAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  CFDataRef CFSocketCopyPeerAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyPeerAddress(
      s,
    );
  }

  late final _CFSocketCopyPeerAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyPeerAddress');
  late final _CFSocketCopyPeerAddress =
      _CFSocketCopyPeerAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  void CFSocketGetContext(
    CFSocketRef s,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketGetContext(
      s,
      context,
    );
  }

  late final _CFSocketGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSocketRef,
              ffi.Pointer<CFSocketContext>)>>('CFSocketGetContext');
  late final _CFSocketGetContext = _CFSocketGetContextPtr.asFunction<
      void Function(CFSocketRef, ffi.Pointer<CFSocketContext>)>();

  int CFSocketGetNative(
    CFSocketRef s,
  ) {
    return _CFSocketGetNative(
      s,
    );
  }

  late final _CFSocketGetNativePtr =
      _lookup<ffi.NativeFunction<CFSocketNativeHandle Function(CFSocketRef)>>(
          'CFSocketGetNative');
  late final _CFSocketGetNative =
      _CFSocketGetNativePtr.asFunction<int Function(CFSocketRef)>();

  CFRunLoopSourceRef CFSocketCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFSocketRef s,
    int order,
  ) {
    return _CFSocketCreateRunLoopSource(
      allocator,
      s,
      order,
    );
  }

  late final _CFSocketCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef,
              CFIndex)>>('CFSocketCreateRunLoopSource');
  late final _CFSocketCreateRunLoopSource =
      _CFSocketCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef, int)>();

  int CFSocketGetSocketFlags(
    CFSocketRef s,
  ) {
    return _CFSocketGetSocketFlags(
      s,
    );
  }

  late final _CFSocketGetSocketFlagsPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFSocketRef)>>(
          'CFSocketGetSocketFlags');
  late final _CFSocketGetSocketFlags =
      _CFSocketGetSocketFlagsPtr.asFunction<int Function(CFSocketRef)>();

  void CFSocketSetSocketFlags(
    CFSocketRef s,
    int flags,
  ) {
    return _CFSocketSetSocketFlags(
      s,
      flags,
    );
  }

  late final _CFSocketSetSocketFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketSetSocketFlags');
  late final _CFSocketSetSocketFlags =
      _CFSocketSetSocketFlagsPtr.asFunction<void Function(CFSocketRef, int)>();

  void CFSocketDisableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketDisableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketDisableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketDisableCallBacks');
  late final _CFSocketDisableCallBacks = _CFSocketDisableCallBacksPtr
      .asFunction<void Function(CFSocketRef, int)>();

  void CFSocketEnableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketEnableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketEnableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketEnableCallBacks');
  late final _CFSocketEnableCallBacks =
      _CFSocketEnableCallBacksPtr.asFunction<void Function(CFSocketRef, int)>();

  int CFSocketSendData(
    CFSocketRef s,
    CFDataRef address,
    CFDataRef data,
    double timeout,
  ) {
    return _CFSocketSendData(
      s,
      address,
      data,
      timeout,
    );
  }

  late final _CFSocketSendDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFSocketRef, CFDataRef, CFDataRef,
              CFTimeInterval)>>('CFSocketSendData');
  late final _CFSocketSendData = _CFSocketSendDataPtr.asFunction<
      int Function(CFSocketRef, CFDataRef, CFDataRef, double)>();

  int CFSocketRegisterValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    CFPropertyListRef value,
  ) {
    return _CFSocketRegisterValue(
      nameServerSignature,
      timeout,
      name,
      value,
    );
  }

  late final _CFSocketRegisterValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef, CFPropertyListRef)>>('CFSocketRegisterValue');
  late final _CFSocketRegisterValue = _CFSocketRegisterValuePtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
          CFPropertyListRef)>();

  int CFSocketCopyRegisteredValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFPropertyListRef> value,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredValue(
      nameServerSignature,
      timeout,
      name,
      value,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CFSocketSignature>,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFPropertyListRef>,
              ffi.Pointer<CFDataRef>)>>('CFSocketCopyRegisteredValue');
  late final _CFSocketCopyRegisteredValue =
      _CFSocketCopyRegisteredValuePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFPropertyListRef>, ffi.Pointer<CFDataRef>)>();

  int CFSocketRegisterSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
  ) {
    return _CFSocketRegisterSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
    );
  }

  late final _CFSocketRegisterSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
                  CFStringRef, ffi.Pointer<CFSocketSignature>)>>(
      'CFSocketRegisterSocketSignature');
  late final _CFSocketRegisterSocketSignature =
      _CFSocketRegisterSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>)>();

  int CFSocketCopyRegisteredSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFDataRef>)>>(
      'CFSocketCopyRegisteredSocketSignature');
  late final _CFSocketCopyRegisteredSocketSignature =
      _CFSocketCopyRegisteredSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>, ffi.Pointer<CFDataRef>)>();

  int CFSocketUnregister(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
  ) {
    return _CFSocketUnregister(
      nameServerSignature,
      timeout,
      name,
    );
  }

  late final _CFSocketUnregisterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef)>>('CFSocketUnregister');
  late final _CFSocketUnregister = _CFSocketUnregisterPtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef)>();

  void CFSocketSetDefaultNameRegistryPortNumber(
    int port,
  ) {
    return _CFSocketSetDefaultNameRegistryPortNumber(
      port,
    );
  }

  late final _CFSocketSetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UInt16)>>(
          'CFSocketSetDefaultNameRegistryPortNumber');
  late final _CFSocketSetDefaultNameRegistryPortNumber =
      _CFSocketSetDefaultNameRegistryPortNumberPtr.asFunction<
          void Function(int)>();

  int CFSocketGetDefaultNameRegistryPortNumber() {
    return _CFSocketGetDefaultNameRegistryPortNumber();
  }

  late final _CFSocketGetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<UInt16 Function()>>(
          'CFSocketGetDefaultNameRegistryPortNumber');
  late final _CFSocketGetDefaultNameRegistryPortNumber =
      _CFSocketGetDefaultNameRegistryPortNumberPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCFSocketCommandKey =
      _lookup<CFStringRef>('kCFSocketCommandKey');

  CFStringRef get kCFSocketCommandKey => _kCFSocketCommandKey.value;

  set kCFSocketCommandKey(CFStringRef value) =>
      _kCFSocketCommandKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketNameKey =
      _lookup<CFStringRef>('kCFSocketNameKey');

  CFStringRef get kCFSocketNameKey => _kCFSocketNameKey.value;

  set kCFSocketNameKey(CFStringRef value) => _kCFSocketNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketValueKey =
      _lookup<CFStringRef>('kCFSocketValueKey');

  CFStringRef get kCFSocketValueKey => _kCFSocketValueKey.value;

  set kCFSocketValueKey(CFStringRef value) => _kCFSocketValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketResultKey =
      _lookup<CFStringRef>('kCFSocketResultKey');

  CFStringRef get kCFSocketResultKey => _kCFSocketResultKey.value;

  set kCFSocketResultKey(CFStringRef value) =>
      _kCFSocketResultKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketErrorKey =
      _lookup<CFStringRef>('kCFSocketErrorKey');

  CFStringRef get kCFSocketErrorKey => _kCFSocketErrorKey.value;

  set kCFSocketErrorKey(CFStringRef value) => _kCFSocketErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRegisterCommand =
      _lookup<CFStringRef>('kCFSocketRegisterCommand');

  CFStringRef get kCFSocketRegisterCommand => _kCFSocketRegisterCommand.value;

  set kCFSocketRegisterCommand(CFStringRef value) =>
      _kCFSocketRegisterCommand.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRetrieveCommand =
      _lookup<CFStringRef>('kCFSocketRetrieveCommand');

  CFStringRef get kCFSocketRetrieveCommand => _kCFSocketRetrieveCommand.value;

  set kCFSocketRetrieveCommand(CFStringRef value) =>
      _kCFSocketRetrieveCommand.value = value;

  int CFReadStreamGetTypeID() {
    return _CFReadStreamGetTypeID();
  }

  late final _CFReadStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFReadStreamGetTypeID');
  late final _CFReadStreamGetTypeID =
      _CFReadStreamGetTypeIDPtr.asFunction<int Function()>();

  int CFWriteStreamGetTypeID() {
    return _CFWriteStreamGetTypeID();
  }

  late final _CFWriteStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFWriteStreamGetTypeID');
  late final _CFWriteStreamGetTypeID =
      _CFWriteStreamGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyDataWritten =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyDataWritten');

  CFStreamPropertyKey get kCFStreamPropertyDataWritten =>
      _kCFStreamPropertyDataWritten.value;

  set kCFStreamPropertyDataWritten(CFStreamPropertyKey value) =>
      _kCFStreamPropertyDataWritten.value = value;

  CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFReadStreamCreateWithBytesNoCopy(
      alloc,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFReadStreamCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFReadStreamCreateWithBytesNoCopy');
  late final _CFReadStreamCreateWithBytesNoCopy =
      _CFReadStreamCreateWithBytesNoCopyPtr.asFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithBuffer(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> buffer,
    int bufferCapacity,
  ) {
    return _CFWriteStreamCreateWithBuffer(
      alloc,
      buffer,
      bufferCapacity,
    );
  }

  late final _CFWriteStreamCreateWithBufferPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamCreateWithBuffer');
  late final _CFWriteStreamCreateWithBuffer =
      _CFWriteStreamCreateWithBufferPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(
    CFAllocatorRef alloc,
    CFAllocatorRef bufferAllocator,
  ) {
    return _CFWriteStreamCreateWithAllocatedBuffers(
      alloc,
      bufferAllocator,
    );
  }

  late final _CFWriteStreamCreateWithAllocatedBuffersPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef,
              CFAllocatorRef)>>('CFWriteStreamCreateWithAllocatedBuffers');
  late final _CFWriteStreamCreateWithAllocatedBuffers =
      _CFWriteStreamCreateWithAllocatedBuffersPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, CFAllocatorRef)>();

  CFReadStreamRef CFReadStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFReadStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFReadStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFReadStreamCreateWithFile');
  late final _CFReadStreamCreateWithFile = _CFReadStreamCreateWithFilePtr
      .asFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFWriteStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFWriteStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFWriteStreamCreateWithFile');
  late final _CFWriteStreamCreateWithFile = _CFWriteStreamCreateWithFilePtr
      .asFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>();

  void CFStreamCreateBoundPair(
    CFAllocatorRef alloc,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
    int transferBufferSize,
  ) {
    return _CFStreamCreateBoundPair(
      alloc,
      readStream,
      writeStream,
      transferBufferSize,
    );
  }

  late final _CFStreamCreateBoundPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>,
              CFIndex)>>('CFStreamCreateBoundPair');
  late final _CFStreamCreateBoundPair = _CFStreamCreateBoundPairPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFReadStreamRef>,
          ffi.Pointer<CFWriteStreamRef>, int)>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyAppendToFile =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyAppendToFile');

  CFStreamPropertyKey get kCFStreamPropertyAppendToFile =>
      _kCFStreamPropertyAppendToFile.value;

  set kCFStreamPropertyAppendToFile(CFStreamPropertyKey value) =>
      _kCFStreamPropertyAppendToFile.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertyFileCurrentOffset =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyFileCurrentOffset');

  CFStreamPropertyKey get kCFStreamPropertyFileCurrentOffset =>
      _kCFStreamPropertyFileCurrentOffset.value;

  set kCFStreamPropertyFileCurrentOffset(CFStreamPropertyKey value) =>
      _kCFStreamPropertyFileCurrentOffset.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketNativeHandle =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketNativeHandle');

  CFStreamPropertyKey get kCFStreamPropertySocketNativeHandle =>
      _kCFStreamPropertySocketNativeHandle.value;

  set kCFStreamPropertySocketNativeHandle(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketNativeHandle.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemoteHostName =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemoteHostName');

  CFStreamPropertyKey get kCFStreamPropertySocketRemoteHostName =>
      _kCFStreamPropertySocketRemoteHostName.value;

  set kCFStreamPropertySocketRemoteHostName(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemoteHostName.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemotePortNumber =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemotePortNumber');

  CFStreamPropertyKey get kCFStreamPropertySocketRemotePortNumber =>
      _kCFStreamPropertySocketRemotePortNumber.value;

  set kCFStreamPropertySocketRemotePortNumber(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemotePortNumber.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _kCFStreamErrorDomainSOCKS =
      _lookup<pkg_ffi.Int>('kCFStreamErrorDomainSOCKS');

  int get kCFStreamErrorDomainSOCKS => _kCFStreamErrorDomainSOCKS.value;

  set kCFStreamErrorDomainSOCKS(int value) =>
      _kCFStreamErrorDomainSOCKS.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxy =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxy');

  CFStringRef get kCFStreamPropertySOCKSProxy =>
      _kCFStreamPropertySOCKSProxy.value;

  set kCFStreamPropertySOCKSProxy(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyHost =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyHost');

  CFStringRef get kCFStreamPropertySOCKSProxyHost =>
      _kCFStreamPropertySOCKSProxyHost.value;

  set kCFStreamPropertySOCKSProxyHost(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyPort =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyPort');

  CFStringRef get kCFStreamPropertySOCKSProxyPort =>
      _kCFStreamPropertySOCKSProxyPort.value;

  set kCFStreamPropertySOCKSProxyPort(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyPort.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSVersion =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSVersion');

  CFStringRef get kCFStreamPropertySOCKSVersion =>
      _kCFStreamPropertySOCKSVersion.value;

  set kCFStreamPropertySOCKSVersion(CFStringRef value) =>
      _kCFStreamPropertySOCKSVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion4 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion4');

  CFStringRef get kCFStreamSocketSOCKSVersion4 =>
      _kCFStreamSocketSOCKSVersion4.value;

  set kCFStreamSocketSOCKSVersion4(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion4.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion5 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion5');

  CFStringRef get kCFStreamSocketSOCKSVersion5 =>
      _kCFStreamSocketSOCKSVersion5.value;

  set kCFStreamSocketSOCKSVersion5(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion5.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSUser =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSUser');

  CFStringRef get kCFStreamPropertySOCKSUser =>
      _kCFStreamPropertySOCKSUser.value;

  set kCFStreamPropertySOCKSUser(CFStringRef value) =>
      _kCFStreamPropertySOCKSUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSPassword =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSPassword');

  CFStringRef get kCFStreamPropertySOCKSPassword =>
      _kCFStreamPropertySOCKSPassword.value;

  set kCFStreamPropertySOCKSPassword(CFStringRef value) =>
      _kCFStreamPropertySOCKSPassword.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _kCFStreamErrorDomainSSL =
      _lookup<pkg_ffi.Int>('kCFStreamErrorDomainSSL');

  int get kCFStreamErrorDomainSSL => _kCFStreamErrorDomainSSL.value;

  set kCFStreamErrorDomainSSL(int value) =>
      _kCFStreamErrorDomainSSL.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySocketSecurityLevel =
      _lookup<CFStringRef>('kCFStreamPropertySocketSecurityLevel');

  CFStringRef get kCFStreamPropertySocketSecurityLevel =>
      _kCFStreamPropertySocketSecurityLevel.value;

  set kCFStreamPropertySocketSecurityLevel(CFStringRef value) =>
      _kCFStreamPropertySocketSecurityLevel.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelNone =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNone');

  CFStringRef get kCFStreamSocketSecurityLevelNone =>
      _kCFStreamSocketSecurityLevelNone.value;

  set kCFStreamSocketSecurityLevelNone(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv2 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv2');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv2 =>
      _kCFStreamSocketSecurityLevelSSLv2.value;

  set kCFStreamSocketSecurityLevelSSLv2(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv2.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv3 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv3');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv3 =>
      _kCFStreamSocketSecurityLevelSSLv3.value;

  set kCFStreamSocketSecurityLevelSSLv3(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv3.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelTLSv1 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelTLSv1');

  CFStringRef get kCFStreamSocketSecurityLevelTLSv1 =>
      _kCFStreamSocketSecurityLevelTLSv1.value;

  set kCFStreamSocketSecurityLevelTLSv1(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelTLSv1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamSocketSecurityLevelNegotiatedSSL =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNegotiatedSSL');

  CFStringRef get kCFStreamSocketSecurityLevelNegotiatedSSL =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value;

  set kCFStreamSocketSecurityLevelNegotiatedSSL(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamPropertyShouldCloseNativeSocket =
      _lookup<CFStringRef>('kCFStreamPropertyShouldCloseNativeSocket');

  CFStringRef get kCFStreamPropertyShouldCloseNativeSocket =>
      _kCFStreamPropertyShouldCloseNativeSocket.value;

  set kCFStreamPropertyShouldCloseNativeSocket(CFStringRef value) =>
      _kCFStreamPropertyShouldCloseNativeSocket.value = value;

  void CFStreamCreatePairWithSocket(
    CFAllocatorRef alloc,
    int sock,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocket(
      alloc,
      sock,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>>('CFStreamCreatePairWithSocket');
  late final _CFStreamCreatePairWithSocket =
      _CFStreamCreatePairWithSocketPtr.asFunction<
          void Function(CFAllocatorRef, int, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithSocketToHost(
    CFAllocatorRef alloc,
    CFStringRef host,
    int port,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocketToHost(
      alloc,
      host,
      port,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketToHostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  CFStringRef,
                  UInt32,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithSocketToHost');
  late final _CFStreamCreatePairWithSocketToHost =
      _CFStreamCreatePairWithSocketToHostPtr.asFunction<
          void Function(CFAllocatorRef, CFStringRef, int,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithPeerSocketSignature(
    CFAllocatorRef alloc,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithPeerSocketSignature(
      alloc,
      signature,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithPeerSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithPeerSocketSignature');
  late final _CFStreamCreatePairWithPeerSocketSignature =
      _CFStreamCreatePairWithPeerSocketSignaturePtr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  int CFReadStreamGetStatus(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetStatus(
      stream,
    );
  }

  late final _CFReadStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFReadStreamRef)>>(
          'CFReadStreamGetStatus');
  late final _CFReadStreamGetStatus =
      _CFReadStreamGetStatusPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamGetStatus(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetStatus(
      stream,
    );
  }

  late final _CFWriteStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetStatus');
  late final _CFWriteStreamGetStatus =
      _CFWriteStreamGetStatusPtr.asFunction<int Function(CFWriteStreamRef)>();

  CFErrorRef CFReadStreamCopyError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyError(
      stream,
    );
  }

  late final _CFReadStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFReadStreamRef)>>(
          'CFReadStreamCopyError');
  late final _CFReadStreamCopyError = _CFReadStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFReadStreamRef)>();

  CFErrorRef CFWriteStreamCopyError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyError(
      stream,
    );
  }

  late final _CFWriteStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyError');
  late final _CFWriteStreamCopyError = _CFWriteStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFWriteStreamRef)>();

  int CFReadStreamOpen(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamOpen(
      stream,
    );
  }

  late final _CFReadStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamOpen');
  late final _CFReadStreamOpen =
      _CFReadStreamOpenPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamOpen(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamOpen(
      stream,
    );
  }

  late final _CFWriteStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamOpen');
  late final _CFWriteStreamOpen =
      _CFWriteStreamOpenPtr.asFunction<int Function(CFWriteStreamRef)>();

  void CFReadStreamClose(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamClose(
      stream,
    );
  }

  late final _CFReadStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFReadStreamRef)>>(
          'CFReadStreamClose');
  late final _CFReadStreamClose =
      _CFReadStreamClosePtr.asFunction<void Function(CFReadStreamRef)>();

  void CFWriteStreamClose(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamClose(
      stream,
    );
  }

  late final _CFWriteStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFWriteStreamRef)>>(
          'CFWriteStreamClose');
  late final _CFWriteStreamClose =
      _CFWriteStreamClosePtr.asFunction<void Function(CFWriteStreamRef)>();

  int CFReadStreamHasBytesAvailable(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamHasBytesAvailable(
      stream,
    );
  }

  late final _CFReadStreamHasBytesAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamHasBytesAvailable');
  late final _CFReadStreamHasBytesAvailable = _CFReadStreamHasBytesAvailablePtr
      .asFunction<int Function(CFReadStreamRef)>();

  int CFReadStreamRead(
    CFReadStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFReadStreamRead(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFReadStreamReadPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFReadStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFReadStreamRead');
  late final _CFReadStreamRead = _CFReadStreamReadPtr.asFunction<
      int Function(CFReadStreamRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFReadStreamGetBuffer(
    CFReadStreamRef stream,
    int maxBytesToRead,
    ffi.Pointer<CFIndex> numBytesRead,
  ) {
    return _CFReadStreamGetBuffer(
      stream,
      maxBytesToRead,
      numBytesRead,
    );
  }

  late final _CFReadStreamGetBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UInt8> Function(CFReadStreamRef, CFIndex,
              ffi.Pointer<CFIndex>)>>('CFReadStreamGetBuffer');
  late final _CFReadStreamGetBuffer = _CFReadStreamGetBufferPtr.asFunction<
      ffi.Pointer<UInt8> Function(
          CFReadStreamRef, int, ffi.Pointer<CFIndex>)>();

  int CFWriteStreamCanAcceptBytes(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCanAcceptBytes(
      stream,
    );
  }

  late final _CFWriteStreamCanAcceptBytesPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamCanAcceptBytes');
  late final _CFWriteStreamCanAcceptBytes = _CFWriteStreamCanAcceptBytesPtr
      .asFunction<int Function(CFWriteStreamRef)>();

  int CFWriteStreamWrite(
    CFWriteStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFWriteStreamWrite(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFWriteStreamWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFWriteStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamWrite');
  late final _CFWriteStreamWrite = _CFWriteStreamWritePtr.asFunction<
      int Function(CFWriteStreamRef, ffi.Pointer<UInt8>, int)>();

  CFTypeRef CFReadStreamCopyProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFReadStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFReadStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFReadStreamRef,
              CFStreamPropertyKey)>>('CFReadStreamCopyProperty');
  late final _CFReadStreamCopyProperty = _CFReadStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFReadStreamRef, CFStreamPropertyKey)>();

  CFTypeRef CFWriteStreamCopyProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFWriteStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFWriteStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFWriteStreamRef,
              CFStreamPropertyKey)>>('CFWriteStreamCopyProperty');
  late final _CFWriteStreamCopyProperty = _CFWriteStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFWriteStreamRef, CFStreamPropertyKey)>();

  int CFReadStreamSetProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFReadStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFReadStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFReadStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFReadStreamSetProperty');
  late final _CFReadStreamSetProperty = _CFReadStreamSetPropertyPtr.asFunction<
      int Function(CFReadStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFWriteStreamSetProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFWriteStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFWriteStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFWriteStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFWriteStreamSetProperty');
  late final _CFWriteStreamSetProperty =
      _CFWriteStreamSetPropertyPtr.asFunction<
          int Function(CFWriteStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFReadStreamSetClient(
    CFReadStreamRef stream,
    int streamEvents,
    CFReadStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFReadStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFReadStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFReadStreamRef,
              CFOptionFlags,
              CFReadStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFReadStreamSetClient');
  late final _CFReadStreamSetClient = _CFReadStreamSetClientPtr.asFunction<
      int Function(CFReadStreamRef, int, CFReadStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  int CFWriteStreamSetClient(
    CFWriteStreamRef stream,
    int streamEvents,
    CFWriteStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFWriteStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFWriteStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFWriteStreamRef,
              CFOptionFlags,
              CFWriteStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFWriteStreamSetClient');
  late final _CFWriteStreamSetClient = _CFWriteStreamSetClientPtr.asFunction<
      int Function(CFWriteStreamRef, int, CFWriteStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  void CFReadStreamScheduleWithRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamScheduleWithRunLoop');
  late final _CFReadStreamScheduleWithRunLoop =
      _CFReadStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamScheduleWithRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamScheduleWithRunLoop');
  late final _CFWriteStreamScheduleWithRunLoop =
      _CFWriteStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamUnscheduleFromRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamUnscheduleFromRunLoop');
  late final _CFReadStreamUnscheduleFromRunLoop =
      _CFReadStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamUnscheduleFromRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamUnscheduleFromRunLoop');
  late final _CFWriteStreamUnscheduleFromRunLoop =
      _CFWriteStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamSetDispatchQueue(
    CFReadStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFReadStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFReadStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef,
              dispatch_queue_t)>>('CFReadStreamSetDispatchQueue');
  late final _CFReadStreamSetDispatchQueue = _CFReadStreamSetDispatchQueuePtr
      .asFunction<void Function(CFReadStreamRef, dispatch_queue_t)>();

  void CFWriteStreamSetDispatchQueue(
    CFWriteStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFWriteStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFWriteStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef,
              dispatch_queue_t)>>('CFWriteStreamSetDispatchQueue');
  late final _CFWriteStreamSetDispatchQueue = _CFWriteStreamSetDispatchQueuePtr
      .asFunction<void Function(CFWriteStreamRef, dispatch_queue_t)>();

  dispatch_queue_t CFReadStreamCopyDispatchQueue(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFReadStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFReadStreamRef)>>(
          'CFReadStreamCopyDispatchQueue');
  late final _CFReadStreamCopyDispatchQueue = _CFReadStreamCopyDispatchQueuePtr
      .asFunction<dispatch_queue_t Function(CFReadStreamRef)>();

  dispatch_queue_t CFWriteStreamCopyDispatchQueue(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFWriteStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyDispatchQueue');
  late final _CFWriteStreamCopyDispatchQueue =
      _CFWriteStreamCopyDispatchQueuePtr.asFunction<
          dispatch_queue_t Function(CFWriteStreamRef)>();

  CFStreamError CFReadStreamGetError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetError(
      stream,
    );
  }

  late final _CFReadStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFReadStreamRef)>>(
          'CFReadStreamGetError');
  late final _CFReadStreamGetError = _CFReadStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFReadStreamRef)>();

  CFStreamError CFWriteStreamGetError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetError(
      stream,
    );
  }

  late final _CFWriteStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetError');
  late final _CFWriteStreamGetError = _CFWriteStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFWriteStreamRef)>();

  CFPropertyListRef CFPropertyListCreateFromXMLData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    int mutabilityOption,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromXMLData(
      allocator,
      xmlData,
      mutabilityOption,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, CFOptionFlags,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromXMLData');
  late final _CFPropertyListCreateFromXMLData =
      _CFPropertyListCreateFromXMLDataPtr.asFunction<
          CFPropertyListRef Function(
              CFAllocatorRef, CFDataRef, int, ffi.Pointer<CFStringRef>)>();

  CFDataRef CFPropertyListCreateXMLData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
  ) {
    return _CFPropertyListCreateXMLData(
      allocator,
      propertyList,
    );
  }

  late final _CFPropertyListCreateXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFPropertyListRef)>>('CFPropertyListCreateXMLData');
  late final _CFPropertyListCreateXMLData = _CFPropertyListCreateXMLDataPtr
      .asFunction<CFDataRef Function(CFAllocatorRef, CFPropertyListRef)>();

  CFPropertyListRef CFPropertyListCreateDeepCopy(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int mutabilityOption,
  ) {
    return _CFPropertyListCreateDeepCopy(
      allocator,
      propertyList,
      mutabilityOption,
    );
  }

  late final _CFPropertyListCreateDeepCopyPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef,
              CFOptionFlags)>>('CFPropertyListCreateDeepCopy');
  late final _CFPropertyListCreateDeepCopy =
      _CFPropertyListCreateDeepCopyPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef, int)>();

  int CFPropertyListIsValid(
    CFPropertyListRef plist,
    int format,
  ) {
    return _CFPropertyListIsValid(
      plist,
      format,
    );
  }

  late final _CFPropertyListIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFPropertyListRef, ffi.Int32)>>(
      'CFPropertyListIsValid');
  late final _CFPropertyListIsValid = _CFPropertyListIsValidPtr.asFunction<
      int Function(CFPropertyListRef, int)>();

  int CFPropertyListWriteToStream(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListWriteToStream(
      propertyList,
      stream,
      format,
      errorString,
    );
  }

  late final _CFPropertyListWriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, ffi.Int32,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListWriteToStream');
  late final _CFPropertyListWriteToStream =
      _CFPropertyListWriteToStreamPtr.asFunction<
          int Function(CFPropertyListRef, CFWriteStreamRef, int,
              ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateFromStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int mutabilityOption,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromStream(
      allocator,
      stream,
      streamLength,
      mutabilityOption,
      format,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromStream');
  late final _CFPropertyListCreateFromStream =
      _CFPropertyListCreateFromStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
    int options,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithData(
      allocator,
      data,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithData');
  late final _CFPropertyListCreateWithData =
      _CFPropertyListCreateWithDataPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFErrorRef>)>();

  CFPropertyListRef CFPropertyListCreateWithStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int options,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithStream(
      allocator,
      stream,
      streamLength,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithStream');
  late final _CFPropertyListCreateWithStream =
      _CFPropertyListCreateWithStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFErrorRef>)>();

  int CFPropertyListWrite(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListWrite(
      propertyList,
      stream,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, ffi.Int32,
              CFOptionFlags, ffi.Pointer<CFErrorRef>)>>('CFPropertyListWrite');
  late final _CFPropertyListWrite = _CFPropertyListWritePtr.asFunction<
      int Function(CFPropertyListRef, CFWriteStreamRef, int, int,
          ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFPropertyListCreateData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateData(
      allocator,
      propertyList,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFPropertyListRef,
              ffi.Int32,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateData');
  late final _CFPropertyListCreateData =
      _CFPropertyListCreateDataPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFPropertyListRef, int, int,
              ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFSetCallBacks> _kCFTypeSetCallBacks =
      _lookup<CFSetCallBacks>('kCFTypeSetCallBacks');

  CFSetCallBacks get kCFTypeSetCallBacks => _kCFTypeSetCallBacks.ref;

  late final ffi.Pointer<CFSetCallBacks> _kCFCopyStringSetCallBacks =
      _lookup<CFSetCallBacks>('kCFCopyStringSetCallBacks');

  CFSetCallBacks get kCFCopyStringSetCallBacks =>
      _kCFCopyStringSetCallBacks.ref;

  int CFSetGetTypeID() {
    return _CFSetGetTypeID();
  }

  late final _CFSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSetGetTypeID');
  late final _CFSetGetTypeID = _CFSetGetTypeIDPtr.asFunction<int Function()>();

  CFSetRef CFSetCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFSetCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFSetCallBacks>)>>('CFSetCreate');
  late final _CFSetCreate = _CFSetCreatePtr.asFunction<
      CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFSetCallBacks>)>();

  CFSetRef CFSetCreateCopy(
    CFAllocatorRef allocator,
    CFSetRef theSet,
  ) {
    return _CFSetCreateCopy(
      allocator,
      theSet,
    );
  }

  late final _CFSetCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFSetRef Function(CFAllocatorRef, CFSetRef)>>(
          'CFSetCreateCopy');
  late final _CFSetCreateCopy = _CFSetCreateCopyPtr.asFunction<
      CFSetRef Function(CFAllocatorRef, CFSetRef)>();

  CFMutableSetRef CFSetCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFSetCallBacks>)>>('CFSetCreateMutable');
  late final _CFSetCreateMutable = _CFSetCreateMutablePtr.asFunction<
      CFMutableSetRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFSetCallBacks>)>();

  CFMutableSetRef CFSetCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFSetRef theSet,
  ) {
    return _CFSetCreateMutableCopy(
      allocator,
      capacity,
      theSet,
    );
  }

  late final _CFSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(
              CFAllocatorRef, CFIndex, CFSetRef)>>('CFSetCreateMutableCopy');
  late final _CFSetCreateMutableCopy = _CFSetCreateMutableCopyPtr.asFunction<
      CFMutableSetRef Function(CFAllocatorRef, int, CFSetRef)>();

  int CFSetGetCount(
    CFSetRef theSet,
  ) {
    return _CFSetGetCount(
      theSet,
    );
  }

  late final _CFSetGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSetRef)>>('CFSetGetCount');
  late final _CFSetGetCount =
      _CFSetGetCountPtr.asFunction<int Function(CFSetRef)>();

  int CFSetGetCountOfValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetCountOfValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetCountOfValue');
  late final _CFSetGetCountOfValue = _CFSetGetCountOfValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetContainsValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetContainsValue(
      theSet,
      value,
    );
  }

  late final _CFSetContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetContainsValue');
  late final _CFSetContainsValue = _CFSetContainsValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFSetGetValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetValue');
  late final _CFSetGetValue = _CFSetGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetGetValueIfPresent(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFSetGetValueIfPresent(
      theSet,
      candidate,
      value,
    );
  }

  late final _CFSetGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValueIfPresent');
  late final _CFSetGetValueIfPresent = _CFSetGetValueIfPresentPtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetGetValues(
    CFSetRef theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues(
      theSet,
      values,
    );
  }

  late final _CFSetGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValues');
  late final _CFSetGetValues = _CFSetGetValuesPtr.asFunction<
      void Function(CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetApplyFunction(
    CFSetRef theSet,
    CFSetApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFSetApplyFunction(
      theSet,
      applier,
      context,
    );
  }

  late final _CFSetApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSetRef, CFSetApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFSetApplyFunction');
  late final _CFSetApplyFunction = _CFSetApplyFunctionPtr.asFunction<
      void Function(CFSetRef, CFSetApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFSetAddValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetAddValue(
      theSet,
      value,
    );
  }

  late final _CFSetAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetAddValue');
  late final _CFSetAddValue = _CFSetAddValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetReplaceValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetReplaceValue(
      theSet,
      value,
    );
  }

  late final _CFSetReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetReplaceValue');
  late final _CFSetReplaceValue = _CFSetReplaceValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetSetValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetSetValue(
      theSet,
      value,
    );
  }

  late final _CFSetSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetSetValue');
  late final _CFSetSetValue = _CFSetSetValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetRemoveValue(
      theSet,
      value,
    );
  }

  late final _CFSetRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetRemoveValue');
  late final _CFSetRemoveValue = _CFSetRemoveValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveAllValues(
    CFMutableSetRef theSet,
  ) {
    return _CFSetRemoveAllValues(
      theSet,
    );
  }

  late final _CFSetRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableSetRef)>>(
          'CFSetRemoveAllValues');
  late final _CFSetRemoveAllValues =
      _CFSetRemoveAllValuesPtr.asFunction<void Function(CFMutableSetRef)>();

  int CFTreeGetTypeID() {
    return _CFTreeGetTypeID();
  }

  late final _CFTreeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTreeGetTypeID');
  late final _CFTreeGetTypeID =
      _CFTreeGetTypeIDPtr.asFunction<int Function()>();

  CFTreeRef CFTreeCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeCreate(
      allocator,
      context,
    );
  }

  late final _CFTreeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTreeRef Function(
              CFAllocatorRef, ffi.Pointer<CFTreeContext>)>>('CFTreeCreate');
  late final _CFTreeCreate = _CFTreeCreatePtr.asFunction<
      CFTreeRef Function(CFAllocatorRef, ffi.Pointer<CFTreeContext>)>();

  CFTreeRef CFTreeGetParent(
    CFTreeRef tree,
  ) {
    return _CFTreeGetParent(
      tree,
    );
  }

  late final _CFTreeGetParentPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetParent');
  late final _CFTreeGetParent =
      _CFTreeGetParentPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetNextSibling(
    CFTreeRef tree,
  ) {
    return _CFTreeGetNextSibling(
      tree,
    );
  }

  late final _CFTreeGetNextSiblingPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetNextSibling');
  late final _CFTreeGetNextSibling =
      _CFTreeGetNextSiblingPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetFirstChild(
    CFTreeRef tree,
  ) {
    return _CFTreeGetFirstChild(
      tree,
    );
  }

  late final _CFTreeGetFirstChildPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetFirstChild');
  late final _CFTreeGetFirstChild =
      _CFTreeGetFirstChildPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeGetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeGetContext(
      tree,
      context,
    );
  }

  late final _CFTreeGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeGetContext');
  late final _CFTreeGetContext = _CFTreeGetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  int CFTreeGetChildCount(
    CFTreeRef tree,
  ) {
    return _CFTreeGetChildCount(
      tree,
    );
  }

  late final _CFTreeGetChildCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTreeRef)>>(
          'CFTreeGetChildCount');
  late final _CFTreeGetChildCount =
      _CFTreeGetChildCountPtr.asFunction<int Function(CFTreeRef)>();

  CFTreeRef CFTreeGetChildAtIndex(
    CFTreeRef tree,
    int idx,
  ) {
    return _CFTreeGetChildAtIndex(
      tree,
      idx,
    );
  }

  late final _CFTreeGetChildAtIndexPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef, CFIndex)>>(
          'CFTreeGetChildAtIndex');
  late final _CFTreeGetChildAtIndex = _CFTreeGetChildAtIndexPtr.asFunction<
      CFTreeRef Function(CFTreeRef, int)>();

  void CFTreeGetChildren(
    CFTreeRef tree,
    ffi.Pointer<CFTreeRef> children,
  ) {
    return _CFTreeGetChildren(
      tree,
      children,
    );
  }

  late final _CFTreeGetChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeRef>)>>('CFTreeGetChildren');
  late final _CFTreeGetChildren = _CFTreeGetChildrenPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeRef>)>();

  void CFTreeApplyFunctionToChildren(
    CFTreeRef tree,
    CFTreeApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeApplyFunctionToChildren(
      tree,
      applier,
      context,
    );
  }

  late final _CFTreeApplyFunctionToChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFTreeApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeApplyFunctionToChildren');
  late final _CFTreeApplyFunctionToChildren =
      _CFTreeApplyFunctionToChildrenPtr.asFunction<
          void Function(
              CFTreeRef, CFTreeApplierFunction, ffi.Pointer<ffi.Void>)>();

  CFTreeRef CFTreeFindRoot(
    CFTreeRef tree,
  ) {
    return _CFTreeFindRoot(
      tree,
    );
  }

  late final _CFTreeFindRootPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeFindRoot');
  late final _CFTreeFindRoot =
      _CFTreeFindRootPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeSetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeSetContext(
      tree,
      context,
    );
  }

  late final _CFTreeSetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeSetContext');
  late final _CFTreeSetContext = _CFTreeSetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  void CFTreePrependChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreePrependChild(
      tree,
      newChild,
    );
  }

  late final _CFTreePrependChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreePrependChild');
  late final _CFTreePrependChild =
      _CFTreePrependChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeAppendChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreeAppendChild(
      tree,
      newChild,
    );
  }

  late final _CFTreeAppendChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeAppendChild');
  late final _CFTreeAppendChild =
      _CFTreeAppendChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeInsertSibling(
    CFTreeRef tree,
    CFTreeRef newSibling,
  ) {
    return _CFTreeInsertSibling(
      tree,
      newSibling,
    );
  }

  late final _CFTreeInsertSiblingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeInsertSibling');
  late final _CFTreeInsertSibling =
      _CFTreeInsertSiblingPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeRemove(
    CFTreeRef tree,
  ) {
    return _CFTreeRemove(
      tree,
    );
  }

  late final _CFTreeRemovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>('CFTreeRemove');
  late final _CFTreeRemove =
      _CFTreeRemovePtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeRemoveAllChildren(
    CFTreeRef tree,
  ) {
    return _CFTreeRemoveAllChildren(
      tree,
    );
  }

  late final _CFTreeRemoveAllChildrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>(
          'CFTreeRemoveAllChildren');
  late final _CFTreeRemoveAllChildren =
      _CFTreeRemoveAllChildrenPtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeSortChildren(
    CFTreeRef tree,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeSortChildren(
      tree,
      comparator,
      context,
    );
  }

  late final _CFTreeSortChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeSortChildren');
  late final _CFTreeSortChildren = _CFTreeSortChildrenPtr.asFunction<
      void Function(CFTreeRef, CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  int CFURLCreateDataAndPropertiesFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    ffi.Pointer<CFDataRef> resourceData,
    ffi.Pointer<CFDictionaryRef> properties,
    CFArrayRef desiredProperties,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreateDataAndPropertiesFromResource(
      alloc,
      url,
      resourceData,
      properties,
      desiredProperties,
      errorCode,
    );
  }

  late final _CFURLCreateDataAndPropertiesFromResourcePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFAllocatorRef,
                  CFURLRef,
                  ffi.Pointer<CFDataRef>,
                  ffi.Pointer<CFDictionaryRef>,
                  CFArrayRef,
                  ffi.Pointer<SInt32>)>>(
      'CFURLCreateDataAndPropertiesFromResource');
  late final _CFURLCreateDataAndPropertiesFromResource =
      _CFURLCreateDataAndPropertiesFromResourcePtr.asFunction<
          int Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFDataRef>,
              ffi.Pointer<CFDictionaryRef>, CFArrayRef, ffi.Pointer<SInt32>)>();

  int CFURLWriteDataAndPropertiesToResource(
    CFURLRef url,
    CFDataRef dataToWrite,
    CFDictionaryRef propertiesToWrite,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLWriteDataAndPropertiesToResource(
      url,
      dataToWrite,
      propertiesToWrite,
      errorCode,
    );
  }

  late final _CFURLWriteDataAndPropertiesToResourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDataRef, CFDictionaryRef,
              ffi.Pointer<SInt32>)>>('CFURLWriteDataAndPropertiesToResource');
  late final _CFURLWriteDataAndPropertiesToResource =
      _CFURLWriteDataAndPropertiesToResourcePtr.asFunction<
          int Function(
              CFURLRef, CFDataRef, CFDictionaryRef, ffi.Pointer<SInt32>)>();

  int CFURLDestroyResource(
    CFURLRef url,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLDestroyResource(
      url,
      errorCode,
    );
  }

  late final _CFURLDestroyResourcePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<SInt32>)>>(
      'CFURLDestroyResource');
  late final _CFURLDestroyResource = _CFURLDestroyResourcePtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<SInt32>)>();

  CFTypeRef CFURLCreatePropertyFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    CFStringRef property,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreatePropertyFromResource(
      alloc,
      url,
      property,
      errorCode,
    );
  }

  late final _CFURLCreatePropertyFromResourcePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              ffi.Pointer<SInt32>)>>('CFURLCreatePropertyFromResource');
  late final _CFURLCreatePropertyFromResource =
      _CFURLCreatePropertyFromResourcePtr.asFunction<
          CFTypeRef Function(
              CFAllocatorRef, CFURLRef, CFStringRef, ffi.Pointer<SInt32>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLFileExists =
      _lookup<CFStringRef>('kCFURLFileExists');

  CFStringRef get kCFURLFileExists => _kCFURLFileExists.value;

  set kCFURLFileExists(CFStringRef value) => _kCFURLFileExists.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileDirectoryContents =
      _lookup<CFStringRef>('kCFURLFileDirectoryContents');

  CFStringRef get kCFURLFileDirectoryContents =>
      _kCFURLFileDirectoryContents.value;

  set kCFURLFileDirectoryContents(CFStringRef value) =>
      _kCFURLFileDirectoryContents.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLength =
      _lookup<CFStringRef>('kCFURLFileLength');

  CFStringRef get kCFURLFileLength => _kCFURLFileLength.value;

  set kCFURLFileLength(CFStringRef value) => _kCFURLFileLength.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLastModificationTime =
      _lookup<CFStringRef>('kCFURLFileLastModificationTime');

  CFStringRef get kCFURLFileLastModificationTime =>
      _kCFURLFileLastModificationTime.value;

  set kCFURLFileLastModificationTime(CFStringRef value) =>
      _kCFURLFileLastModificationTime.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFilePOSIXMode =
      _lookup<CFStringRef>('kCFURLFilePOSIXMode');

  CFStringRef get kCFURLFilePOSIXMode => _kCFURLFilePOSIXMode.value;

  set kCFURLFilePOSIXMode(CFStringRef value) =>
      _kCFURLFilePOSIXMode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileOwnerID =
      _lookup<CFStringRef>('kCFURLFileOwnerID');

  CFStringRef get kCFURLFileOwnerID => _kCFURLFileOwnerID.value;

  set kCFURLFileOwnerID(CFStringRef value) => _kCFURLFileOwnerID.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusCode =
      _lookup<CFStringRef>('kCFURLHTTPStatusCode');

  CFStringRef get kCFURLHTTPStatusCode => _kCFURLHTTPStatusCode.value;

  set kCFURLHTTPStatusCode(CFStringRef value) =>
      _kCFURLHTTPStatusCode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusLine =
      _lookup<CFStringRef>('kCFURLHTTPStatusLine');

  CFStringRef get kCFURLHTTPStatusLine => _kCFURLHTTPStatusLine.value;

  set kCFURLHTTPStatusLine(CFStringRef value) =>
      _kCFURLHTTPStatusLine.value = value;

  int CFUUIDGetTypeID() {
    return _CFUUIDGetTypeID();
  }

  late final _CFUUIDGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFUUIDGetTypeID');
  late final _CFUUIDGetTypeID =
      _CFUUIDGetTypeIDPtr.asFunction<int Function()>();

  CFUUIDRef CFUUIDCreate(
    CFAllocatorRef alloc,
  ) {
    return _CFUUIDCreate(
      alloc,
    );
  }

  late final _CFUUIDCreatePtr =
      _lookup<ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef)>>(
          'CFUUIDCreate');
  late final _CFUUIDCreate =
      _CFUUIDCreatePtr.asFunction<CFUUIDRef Function(CFAllocatorRef)>();

  CFUUIDRef CFUUIDCreateWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDCreateWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDCreateWithBytes');
  late final _CFUUIDCreateWithBytes = _CFUUIDCreateWithBytesPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int, int,
          int, int, int, int, int, int, int, int)>();

  CFUUIDRef CFUUIDCreateFromString(
    CFAllocatorRef alloc,
    CFStringRef uuidStr,
  ) {
    return _CFUUIDCreateFromString(
      alloc,
      uuidStr,
    );
  }

  late final _CFUUIDCreateFromStringPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFUUIDCreateFromString');
  late final _CFUUIDCreateFromString = _CFUUIDCreateFromStringPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFUUIDCreateString(
    CFAllocatorRef alloc,
    CFUUIDRef uuid,
  ) {
    return _CFUUIDCreateString(
      alloc,
      uuid,
    );
  }

  late final _CFUUIDCreateStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFAllocatorRef, CFUUIDRef)>>(
      'CFUUIDCreateString');
  late final _CFUUIDCreateString = _CFUUIDCreateStringPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFUUIDRef)>();

  CFUUIDRef CFUUIDGetConstantUUIDWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDGetConstantUUIDWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDGetConstantUUIDWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDGetConstantUUIDWithBytes');
  late final _CFUUIDGetConstantUUIDWithBytes =
      _CFUUIDGetConstantUUIDWithBytesPtr.asFunction<
          CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, int)>();

  CFUUIDBytes CFUUIDGetUUIDBytes(
    CFUUIDRef uuid,
  ) {
    return _CFUUIDGetUUIDBytes(
      uuid,
    );
  }

  late final _CFUUIDGetUUIDBytesPtr =
      _lookup<ffi.NativeFunction<CFUUIDBytes Function(CFUUIDRef)>>(
          'CFUUIDGetUUIDBytes');
  late final _CFUUIDGetUUIDBytes =
      _CFUUIDGetUUIDBytesPtr.asFunction<CFUUIDBytes Function(CFUUIDRef)>();

  CFUUIDRef CFUUIDCreateFromUUIDBytes(
    CFAllocatorRef alloc,
    CFUUIDBytes bytes,
  ) {
    return _CFUUIDCreateFromUUIDBytes(
      alloc,
      bytes,
    );
  }

  late final _CFUUIDCreateFromUUIDBytesPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>>(
      'CFUUIDCreateFromUUIDBytes');
  late final _CFUUIDCreateFromUUIDBytes = _CFUUIDCreateFromUUIDBytesPtr
      .asFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>();

  CFURLRef CFCopyHomeDirectoryURL() {
    return _CFCopyHomeDirectoryURL();
  }

  late final _CFCopyHomeDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function()>>(
          'CFCopyHomeDirectoryURL');
  late final _CFCopyHomeDirectoryURL =
      _CFCopyHomeDirectoryURLPtr.asFunction<CFURLRef Function()>();

  late final ffi.Pointer<CFStringRef> _kCFBundleInfoDictionaryVersionKey =
      _lookup<CFStringRef>('kCFBundleInfoDictionaryVersionKey');

  CFStringRef get kCFBundleInfoDictionaryVersionKey =>
      _kCFBundleInfoDictionaryVersionKey.value;

  set kCFBundleInfoDictionaryVersionKey(CFStringRef value) =>
      _kCFBundleInfoDictionaryVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleExecutableKey =
      _lookup<CFStringRef>('kCFBundleExecutableKey');

  CFStringRef get kCFBundleExecutableKey => _kCFBundleExecutableKey.value;

  set kCFBundleExecutableKey(CFStringRef value) =>
      _kCFBundleExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleIdentifierKey =
      _lookup<CFStringRef>('kCFBundleIdentifierKey');

  CFStringRef get kCFBundleIdentifierKey => _kCFBundleIdentifierKey.value;

  set kCFBundleIdentifierKey(CFStringRef value) =>
      _kCFBundleIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleVersionKey =
      _lookup<CFStringRef>('kCFBundleVersionKey');

  CFStringRef get kCFBundleVersionKey => _kCFBundleVersionKey.value;

  set kCFBundleVersionKey(CFStringRef value) =>
      _kCFBundleVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleDevelopmentRegionKey =
      _lookup<CFStringRef>('kCFBundleDevelopmentRegionKey');

  CFStringRef get kCFBundleDevelopmentRegionKey =>
      _kCFBundleDevelopmentRegionKey.value;

  set kCFBundleDevelopmentRegionKey(CFStringRef value) =>
      _kCFBundleDevelopmentRegionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleNameKey =
      _lookup<CFStringRef>('kCFBundleNameKey');

  CFStringRef get kCFBundleNameKey => _kCFBundleNameKey.value;

  set kCFBundleNameKey(CFStringRef value) => _kCFBundleNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleLocalizationsKey =
      _lookup<CFStringRef>('kCFBundleLocalizationsKey');

  CFStringRef get kCFBundleLocalizationsKey => _kCFBundleLocalizationsKey.value;

  set kCFBundleLocalizationsKey(CFStringRef value) =>
      _kCFBundleLocalizationsKey.value = value;

  CFBundleRef CFBundleGetMainBundle() {
    return _CFBundleGetMainBundle();
  }

  late final _CFBundleGetMainBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function()>>(
          'CFBundleGetMainBundle');
  late final _CFBundleGetMainBundle =
      _CFBundleGetMainBundlePtr.asFunction<CFBundleRef Function()>();

  CFBundleRef CFBundleGetBundleWithIdentifier(
    CFStringRef bundleID,
  ) {
    return _CFBundleGetBundleWithIdentifier(
      bundleID,
    );
  }

  late final _CFBundleGetBundleWithIdentifierPtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFStringRef)>>(
          'CFBundleGetBundleWithIdentifier');
  late final _CFBundleGetBundleWithIdentifier =
      _CFBundleGetBundleWithIdentifierPtr.asFunction<
          CFBundleRef Function(CFStringRef)>();

  CFArrayRef CFBundleGetAllBundles() {
    return _CFBundleGetAllBundles();
  }

  late final _CFBundleGetAllBundlesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFBundleGetAllBundles');
  late final _CFBundleGetAllBundles =
      _CFBundleGetAllBundlesPtr.asFunction<CFArrayRef Function()>();

  int CFBundleGetTypeID() {
    return _CFBundleGetTypeID();
  }

  late final _CFBundleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBundleGetTypeID');
  late final _CFBundleGetTypeID =
      _CFBundleGetTypeIDPtr.asFunction<int Function()>();

  CFBundleRef CFBundleCreate(
    CFAllocatorRef allocator,
    CFURLRef bundleURL,
  ) {
    return _CFBundleCreate(
      allocator,
      bundleURL,
    );
  }

  late final _CFBundleCreatePtr = _lookup<
          ffi.NativeFunction<CFBundleRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFBundleCreate');
  late final _CFBundleCreate = _CFBundleCreatePtr.asFunction<
      CFBundleRef Function(CFAllocatorRef, CFURLRef)>();

  CFArrayRef CFBundleCreateBundlesFromDirectory(
    CFAllocatorRef allocator,
    CFURLRef directoryURL,
    CFStringRef bundleType,
  ) {
    return _CFBundleCreateBundlesFromDirectory(
      allocator,
      directoryURL,
      bundleType,
    );
  }

  late final _CFBundleCreateBundlesFromDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFBundleCreateBundlesFromDirectory');
  late final _CFBundleCreateBundlesFromDirectory =
      _CFBundleCreateBundlesFromDirectoryPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFBundleCopyBundleURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleURL(
      bundle,
    );
  }

  late final _CFBundleCopyBundleURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleURL');
  late final _CFBundleCopyBundleURL =
      _CFBundleCopyBundleURLPtr.asFunction<CFURLRef Function(CFBundleRef)>();

  CFTypeRef CFBundleGetValueForInfoDictionaryKey(
    CFBundleRef bundle,
    CFStringRef key,
  ) {
    return _CFBundleGetValueForInfoDictionaryKey(
      bundle,
      key,
    );
  }

  late final _CFBundleGetValueForInfoDictionaryKeyPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleGetValueForInfoDictionaryKey');
  late final _CFBundleGetValueForInfoDictionaryKey =
      _CFBundleGetValueForInfoDictionaryKeyPtr.asFunction<
          CFTypeRef Function(CFBundleRef, CFStringRef)>();

  CFDictionaryRef CFBundleGetInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetInfoDictionary');
  late final _CFBundleGetInfoDictionary = _CFBundleGetInfoDictionaryPtr
      .asFunction<CFDictionaryRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleGetLocalInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetLocalInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetLocalInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetLocalInfoDictionary');
  late final _CFBundleGetLocalInfoDictionary =
      _CFBundleGetLocalInfoDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFBundleRef)>();

  void CFBundleGetPackageInfo(
    CFBundleRef bundle,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfo(
      bundle,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBundleRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfo');
  late final _CFBundleGetPackageInfo = _CFBundleGetPackageInfoPtr.asFunction<
      void Function(CFBundleRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFStringRef CFBundleGetIdentifier(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetIdentifier(
      bundle,
    );
  }

  late final _CFBundleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetIdentifier');
  late final _CFBundleGetIdentifier =
      _CFBundleGetIdentifierPtr.asFunction<CFStringRef Function(CFBundleRef)>();

  int CFBundleGetVersionNumber(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetVersionNumber(
      bundle,
    );
  }

  late final _CFBundleGetVersionNumberPtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFBundleRef)>>(
          'CFBundleGetVersionNumber');
  late final _CFBundleGetVersionNumber =
      _CFBundleGetVersionNumberPtr.asFunction<int Function(CFBundleRef)>();

  CFStringRef CFBundleGetDevelopmentRegion(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetDevelopmentRegion(
      bundle,
    );
  }

  late final _CFBundleGetDevelopmentRegionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetDevelopmentRegion');
  late final _CFBundleGetDevelopmentRegion = _CFBundleGetDevelopmentRegionPtr
      .asFunction<CFStringRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySupportFilesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySupportFilesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopySupportFilesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySupportFilesDirectoryURL');
  late final _CFBundleCopySupportFilesDirectoryURL =
      _CFBundleCopySupportFilesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyResourcesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyResourcesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopyResourcesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyResourcesDirectoryURL');
  late final _CFBundleCopyResourcesDirectoryURL =
      _CFBundleCopyResourcesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyPrivateFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyPrivateFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopyPrivateFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyPrivateFrameworksURL');
  late final _CFBundleCopyPrivateFrameworksURL =
      _CFBundleCopyPrivateFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedFrameworksURL');
  late final _CFBundleCopySharedFrameworksURL =
      _CFBundleCopySharedFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedSupportURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedSupportURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedSupportURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedSupportURL');
  late final _CFBundleCopySharedSupportURL = _CFBundleCopySharedSupportURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyBuiltInPlugInsURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBuiltInPlugInsURL(
      bundle,
    );
  }

  late final _CFBundleCopyBuiltInPlugInsURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBuiltInPlugInsURL');
  late final _CFBundleCopyBuiltInPlugInsURL = _CFBundleCopyBuiltInPlugInsURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(
    CFURLRef bundleURL,
  ) {
    return _CFBundleCopyInfoDictionaryInDirectory(
      bundleURL,
    );
  }

  late final _CFBundleCopyInfoDictionaryInDirectoryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryInDirectory');
  late final _CFBundleCopyInfoDictionaryInDirectory =
      _CFBundleCopyInfoDictionaryInDirectoryPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  int CFBundleGetPackageInfoInDirectory(
    CFURLRef url,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfoInDirectory(
      url,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfoInDirectory');
  late final _CFBundleGetPackageInfoInDirectory =
      _CFBundleGetPackageInfoInDirectoryPtr.asFunction<
          int Function(CFURLRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFURLRef CFBundleCopyResourceURL(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURL(
      bundle,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURL');
  late final _CFBundleCopyResourceURL = _CFBundleCopyResourceURLPtr.asFunction<
      CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfType(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfType(
      bundle,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfType');
  late final _CFBundleCopyResourceURLsOfType =
      _CFBundleCopyResourceURLsOfTypePtr.asFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef)>();

  CFStringRef CFBundleCopyLocalizedString(
    CFBundleRef bundle,
    CFStringRef key,
    CFStringRef value,
    CFStringRef tableName,
  ) {
    return _CFBundleCopyLocalizedString(
      bundle,
      key,
      value,
      tableName,
    );
  }

  late final _CFBundleCopyLocalizedStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyLocalizedString');
  late final _CFBundleCopyLocalizedString =
      _CFBundleCopyLocalizedStringPtr.asFunction<
          CFStringRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFURLRef CFBundleCopyResourceURLInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLInDirectory(
      bundleURL,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLInDirectory');
  late final _CFBundleCopyResourceURLInDirectory =
      _CFBundleCopyResourceURLInDirectoryPtr.asFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeInDirectory(
      bundleURL,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFURLRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeInDirectory');
  late final _CFBundleCopyResourceURLsOfTypeInDirectory =
      _CFBundleCopyResourceURLsOfTypeInDirectoryPtr.asFunction<
          CFArrayRef Function(CFURLRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyBundleLocalizations(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleLocalizations(
      bundle,
    );
  }

  late final _CFBundleCopyBundleLocalizationsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleLocalizations');
  late final _CFBundleCopyBundleLocalizations =
      _CFBundleCopyBundleLocalizationsPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(
    CFArrayRef locArray,
  ) {
    return _CFBundleCopyPreferredLocalizationsFromArray(
      locArray,
    );
  }

  late final _CFBundleCopyPreferredLocalizationsFromArrayPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef)>>(
          'CFBundleCopyPreferredLocalizationsFromArray');
  late final _CFBundleCopyPreferredLocalizationsFromArray =
      _CFBundleCopyPreferredLocalizationsFromArrayPtr.asFunction<
          CFArrayRef Function(CFArrayRef)>();

  CFArrayRef CFBundleCopyLocalizationsForPreferences(
    CFArrayRef locArray,
    CFArrayRef prefArray,
  ) {
    return _CFBundleCopyLocalizationsForPreferences(
      locArray,
      prefArray,
    );
  }

  late final _CFBundleCopyLocalizationsForPreferencesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef, CFArrayRef)>>(
          'CFBundleCopyLocalizationsForPreferences');
  late final _CFBundleCopyLocalizationsForPreferences =
      _CFBundleCopyLocalizationsForPreferencesPtr.asFunction<
          CFArrayRef Function(CFArrayRef, CFArrayRef)>();

  CFURLRef CFBundleCopyResourceURLForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLForLocalization(
      bundle,
      resourceName,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLForLocalization');
  late final _CFBundleCopyResourceURLForLocalization =
      _CFBundleCopyResourceURLForLocalizationPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeForLocalization(
      bundle,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeForLocalization');
  late final _CFBundleCopyResourceURLsOfTypeForLocalization =
      _CFBundleCopyResourceURLsOfTypeForLocalizationPtr.asFunction<
          CFArrayRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyInfoDictionaryForURL(
      url,
    );
  }

  late final _CFBundleCopyInfoDictionaryForURLPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryForURL');
  late final _CFBundleCopyInfoDictionaryForURL =
      _CFBundleCopyInfoDictionaryForURLPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyLocalizationsForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyLocalizationsForURL(
      url,
    );
  }

  late final _CFBundleCopyLocalizationsForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyLocalizationsForURL');
  late final _CFBundleCopyLocalizationsForURL =
      _CFBundleCopyLocalizationsForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyExecutableArchitecturesForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyExecutableArchitecturesForURL(
      url,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyExecutableArchitecturesForURL');
  late final _CFBundleCopyExecutableArchitecturesForURL =
      _CFBundleCopyExecutableArchitecturesForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFURLRef CFBundleCopyExecutableURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableURL(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableURL');
  late final _CFBundleCopyExecutableURL = _CFBundleCopyExecutableURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyExecutableArchitectures(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableArchitectures(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableArchitectures');
  late final _CFBundleCopyExecutableArchitectures =
      _CFBundleCopyExecutableArchitecturesPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  int CFBundlePreflightExecutable(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundlePreflightExecutable(
      bundle,
      error,
    );
  }

  late final _CFBundlePreflightExecutablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBundleRef,
              ffi.Pointer<CFErrorRef>)>>('CFBundlePreflightExecutable');
  late final _CFBundlePreflightExecutable = _CFBundlePreflightExecutablePtr
      .asFunction<int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutableAndReturnError(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundleLoadExecutableAndReturnError(
      bundle,
      error,
    );
  }

  late final _CFBundleLoadExecutableAndReturnErrorPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>>(
      'CFBundleLoadExecutableAndReturnError');
  late final _CFBundleLoadExecutableAndReturnError =
      _CFBundleLoadExecutableAndReturnErrorPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleLoadExecutable(
      bundle,
    );
  }

  late final _CFBundleLoadExecutablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleLoadExecutable');
  late final _CFBundleLoadExecutable =
      _CFBundleLoadExecutablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoaded(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoaded(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoaded');
  late final _CFBundleIsExecutableLoaded =
      _CFBundleIsExecutableLoadedPtr.asFunction<int Function(CFBundleRef)>();

  void CFBundleUnloadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleUnloadExecutable(
      bundle,
    );
  }

  late final _CFBundleUnloadExecutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBundleRef)>>(
          'CFBundleUnloadExecutable');
  late final _CFBundleUnloadExecutable =
      _CFBundleUnloadExecutablePtr.asFunction<void Function(CFBundleRef)>();

  ffi.Pointer<ffi.Void> CFBundleGetFunctionPointerForName(
    CFBundleRef bundle,
    CFStringRef functionName,
  ) {
    return _CFBundleGetFunctionPointerForName(
      bundle,
      functionName,
    );
  }

  late final _CFBundleGetFunctionPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetFunctionPointerForName');
  late final _CFBundleGetFunctionPointerForName =
      _CFBundleGetFunctionPointerForNamePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetFunctionPointersForNames(
    CFBundleRef bundle,
    CFArrayRef functionNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFBundleGetFunctionPointersForNames(
      bundle,
      functionNames,
      ftbl,
    );
  }

  late final _CFBundleGetFunctionPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetFunctionPointersForNames');
  late final _CFBundleGetFunctionPointersForNames =
      _CFBundleGetFunctionPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> CFBundleGetDataPointerForName(
    CFBundleRef bundle,
    CFStringRef symbolName,
  ) {
    return _CFBundleGetDataPointerForName(
      bundle,
      symbolName,
    );
  }

  late final _CFBundleGetDataPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetDataPointerForName');
  late final _CFBundleGetDataPointerForName = _CFBundleGetDataPointerForNamePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetDataPointersForNames(
    CFBundleRef bundle,
    CFArrayRef symbolNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> stbl,
  ) {
    return _CFBundleGetDataPointersForNames(
      bundle,
      symbolNames,
      stbl,
    );
  }

  late final _CFBundleGetDataPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetDataPointersForNames');
  late final _CFBundleGetDataPointersForNames =
      _CFBundleGetDataPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFURLRef CFBundleCopyAuxiliaryExecutableURL(
    CFBundleRef bundle,
    CFStringRef executableName,
  ) {
    return _CFBundleCopyAuxiliaryExecutableURL(
      bundle,
      executableName,
    );
  }

  late final _CFBundleCopyAuxiliaryExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleCopyAuxiliaryExecutableURL');
  late final _CFBundleCopyAuxiliaryExecutableURL =
      _CFBundleCopyAuxiliaryExecutableURLPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef)>();

  int CFBundleIsExecutableLoadable(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoadable(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoadable');
  late final _CFBundleIsExecutableLoadable =
      _CFBundleIsExecutableLoadablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoadableForURL(
    CFURLRef url,
  ) {
    return _CFBundleIsExecutableLoadableForURL(
      url,
    );
  }

  late final _CFBundleIsExecutableLoadableForURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFBundleIsExecutableLoadableForURL');
  late final _CFBundleIsExecutableLoadableForURL =
      _CFBundleIsExecutableLoadableForURLPtr.asFunction<
          int Function(CFURLRef)>();

  int CFBundleIsArchitectureLoadable(
    int arch,
  ) {
    return _CFBundleIsArchitectureLoadable(
      arch,
    );
  }

  late final _CFBundleIsArchitectureLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(cpu_type_t)>>(
          'CFBundleIsArchitectureLoadable');
  late final _CFBundleIsArchitectureLoadable =
      _CFBundleIsArchitectureLoadablePtr.asFunction<int Function(int)>();

  CFPlugInRef CFBundleGetPlugIn(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetPlugIn(
      bundle,
    );
  }

  late final _CFBundleGetPlugInPtr =
      _lookup<ffi.NativeFunction<CFPlugInRef Function(CFBundleRef)>>(
          'CFBundleGetPlugIn');
  late final _CFBundleGetPlugIn =
      _CFBundleGetPlugInPtr.asFunction<CFPlugInRef Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceMap(
    CFBundleRef bundle,
  ) {
    return _CFBundleOpenBundleResourceMap(
      bundle,
    );
  }

  late final _CFBundleOpenBundleResourceMapPtr =
      _lookup<ffi.NativeFunction<CFBundleRefNum Function(CFBundleRef)>>(
          'CFBundleOpenBundleResourceMap');
  late final _CFBundleOpenBundleResourceMap =
      _CFBundleOpenBundleResourceMapPtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceFiles(
    CFBundleRef bundle,
    ffi.Pointer<CFBundleRefNum> refNum,
    ffi.Pointer<CFBundleRefNum> localizedRefNum,
  ) {
    return _CFBundleOpenBundleResourceFiles(
      bundle,
      refNum,
      localizedRefNum,
    );
  }

  late final _CFBundleOpenBundleResourceFilesPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>>('CFBundleOpenBundleResourceFiles');
  late final _CFBundleOpenBundleResourceFiles =
      _CFBundleOpenBundleResourceFilesPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>();

  void CFBundleCloseBundleResourceMap(
    CFBundleRef bundle,
    int refNum,
  ) {
    return _CFBundleCloseBundleResourceMap(
      bundle,
      refNum,
    );
  }

  late final _CFBundleCloseBundleResourceMapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFBundleRef, CFBundleRefNum)>>(
      'CFBundleCloseBundleResourceMap');
  late final _CFBundleCloseBundleResourceMap =
      _CFBundleCloseBundleResourceMapPtr.asFunction<
          void Function(CFBundleRef, int)>();

  int CFMessagePortGetTypeID() {
    return _CFMessagePortGetTypeID();
  }

  late final _CFMessagePortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFMessagePortGetTypeID');
  late final _CFMessagePortGetTypeID =
      _CFMessagePortGetTypeIDPtr.asFunction<int Function()>();

  CFMessagePortRef CFMessagePortCreateLocal(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFMessagePortCallBack callout,
    ffi.Pointer<CFMessagePortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMessagePortCreateLocal(
      allocator,
      name,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMessagePortCreateLocalPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>>('CFMessagePortCreateLocal');
  late final _CFMessagePortCreateLocal =
      _CFMessagePortCreateLocalPtr.asFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>();

  CFMessagePortRef CFMessagePortCreateRemote(
    CFAllocatorRef allocator,
    CFStringRef name,
  ) {
    return _CFMessagePortCreateRemote(
      allocator,
      name,
    );
  }

  late final _CFMessagePortCreateRemotePtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef, CFStringRef)>>('CFMessagePortCreateRemote');
  late final _CFMessagePortCreateRemote = _CFMessagePortCreateRemotePtr
      .asFunction<CFMessagePortRef Function(CFAllocatorRef, CFStringRef)>();

  int CFMessagePortIsRemote(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsRemote(
      ms,
    );
  }

  late final _CFMessagePortIsRemotePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsRemote');
  late final _CFMessagePortIsRemote =
      _CFMessagePortIsRemotePtr.asFunction<int Function(CFMessagePortRef)>();

  CFStringRef CFMessagePortGetName(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetName(
      ms,
    );
  }

  late final _CFMessagePortGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFMessagePortRef)>>(
          'CFMessagePortGetName');
  late final _CFMessagePortGetName = _CFMessagePortGetNamePtr.asFunction<
      CFStringRef Function(CFMessagePortRef)>();

  int CFMessagePortSetName(
    CFMessagePortRef ms,
    CFStringRef newName,
  ) {
    return _CFMessagePortSetName(
      ms,
      newName,
    );
  }

  late final _CFMessagePortSetNamePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFMessagePortRef, CFStringRef)>>(
      'CFMessagePortSetName');
  late final _CFMessagePortSetName = _CFMessagePortSetNamePtr.asFunction<
      int Function(CFMessagePortRef, CFStringRef)>();

  void CFMessagePortGetContext(
    CFMessagePortRef ms,
    ffi.Pointer<CFMessagePortContext> context,
  ) {
    return _CFMessagePortGetContext(
      ms,
      context,
    );
  }

  late final _CFMessagePortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              ffi.Pointer<CFMessagePortContext>)>>('CFMessagePortGetContext');
  late final _CFMessagePortGetContext = _CFMessagePortGetContextPtr.asFunction<
      void Function(CFMessagePortRef, ffi.Pointer<CFMessagePortContext>)>();

  void CFMessagePortInvalidate(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortInvalidate(
      ms,
    );
  }

  late final _CFMessagePortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMessagePortRef)>>(
          'CFMessagePortInvalidate');
  late final _CFMessagePortInvalidate =
      _CFMessagePortInvalidatePtr.asFunction<void Function(CFMessagePortRef)>();

  int CFMessagePortIsValid(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsValid(
      ms,
    );
  }

  late final _CFMessagePortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsValid');
  late final _CFMessagePortIsValid =
      _CFMessagePortIsValidPtr.asFunction<int Function(CFMessagePortRef)>();

  CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetInvalidationCallBack(
      ms,
    );
  }

  late final _CFMessagePortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortInvalidationCallBack Function(
              CFMessagePortRef)>>('CFMessagePortGetInvalidationCallBack');
  late final _CFMessagePortGetInvalidationCallBack =
      _CFMessagePortGetInvalidationCallBackPtr.asFunction<
          CFMessagePortInvalidationCallBack Function(CFMessagePortRef)>();

  void CFMessagePortSetInvalidationCallBack(
    CFMessagePortRef ms,
    CFMessagePortInvalidationCallBack callout,
  ) {
    return _CFMessagePortSetInvalidationCallBack(
      ms,
      callout,
    );
  }

  late final _CFMessagePortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMessagePortRef, CFMessagePortInvalidationCallBack)>>(
      'CFMessagePortSetInvalidationCallBack');
  late final _CFMessagePortSetInvalidationCallBack =
      _CFMessagePortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMessagePortRef, CFMessagePortInvalidationCallBack)>();

  int CFMessagePortSendRequest(
    CFMessagePortRef remote,
    int msgid,
    CFDataRef data,
    double sendTimeout,
    double rcvTimeout,
    CFStringRef replyMode,
    ffi.Pointer<CFDataRef> returnData,
  ) {
    return _CFMessagePortSendRequest(
      remote,
      msgid,
      data,
      sendTimeout,
      rcvTimeout,
      replyMode,
      returnData,
    );
  }

  late final _CFMessagePortSendRequestPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFMessagePortRef,
              SInt32,
              CFDataRef,
              CFTimeInterval,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFDataRef>)>>('CFMessagePortSendRequest');
  late final _CFMessagePortSendRequest =
      _CFMessagePortSendRequestPtr.asFunction<
          int Function(CFMessagePortRef, int, CFDataRef, double, double,
              CFStringRef, ffi.Pointer<CFDataRef>)>();

  CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMessagePortRef local,
    int order,
  ) {
    return _CFMessagePortCreateRunLoopSource(
      allocator,
      local,
      order,
    );
  }

  late final _CFMessagePortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef,
              CFIndex)>>('CFMessagePortCreateRunLoopSource');
  late final _CFMessagePortCreateRunLoopSource =
      _CFMessagePortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef, int)>();

  void CFMessagePortSetDispatchQueue(
    CFMessagePortRef ms,
    dispatch_queue_t queue,
  ) {
    return _CFMessagePortSetDispatchQueue(
      ms,
      queue,
    );
  }

  late final _CFMessagePortSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              dispatch_queue_t)>>('CFMessagePortSetDispatchQueue');
  late final _CFMessagePortSetDispatchQueue = _CFMessagePortSetDispatchQueuePtr
      .asFunction<void Function(CFMessagePortRef, dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegistrationKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegistrationKey');

  CFStringRef get kCFPlugInDynamicRegistrationKey =>
      _kCFPlugInDynamicRegistrationKey.value;

  set kCFPlugInDynamicRegistrationKey(CFStringRef value) =>
      _kCFPlugInDynamicRegistrationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegisterFunctionKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegisterFunctionKey');

  CFStringRef get kCFPlugInDynamicRegisterFunctionKey =>
      _kCFPlugInDynamicRegisterFunctionKey.value;

  set kCFPlugInDynamicRegisterFunctionKey(CFStringRef value) =>
      _kCFPlugInDynamicRegisterFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInUnloadFunctionKey =
      _lookup<CFStringRef>('kCFPlugInUnloadFunctionKey');

  CFStringRef get kCFPlugInUnloadFunctionKey =>
      _kCFPlugInUnloadFunctionKey.value;

  set kCFPlugInUnloadFunctionKey(CFStringRef value) =>
      _kCFPlugInUnloadFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInFactoriesKey =
      _lookup<CFStringRef>('kCFPlugInFactoriesKey');

  CFStringRef get kCFPlugInFactoriesKey => _kCFPlugInFactoriesKey.value;

  set kCFPlugInFactoriesKey(CFStringRef value) =>
      _kCFPlugInFactoriesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInTypesKey =
      _lookup<CFStringRef>('kCFPlugInTypesKey');

  CFStringRef get kCFPlugInTypesKey => _kCFPlugInTypesKey.value;

  set kCFPlugInTypesKey(CFStringRef value) => _kCFPlugInTypesKey.value = value;

  int CFPlugInGetTypeID() {
    return _CFPlugInGetTypeID();
  }

  late final _CFPlugInGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFPlugInGetTypeID');
  late final _CFPlugInGetTypeID =
      _CFPlugInGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInRef CFPlugInCreate(
    CFAllocatorRef allocator,
    CFURLRef plugInURL,
  ) {
    return _CFPlugInCreate(
      allocator,
      plugInURL,
    );
  }

  late final _CFPlugInCreatePtr = _lookup<
          ffi.NativeFunction<CFPlugInRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFPlugInCreate');
  late final _CFPlugInCreate = _CFPlugInCreatePtr.asFunction<
      CFPlugInRef Function(CFAllocatorRef, CFURLRef)>();

  CFBundleRef CFPlugInGetBundle(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInGetBundle(
      plugIn,
    );
  }

  late final _CFPlugInGetBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFPlugInRef)>>(
          'CFPlugInGetBundle');
  late final _CFPlugInGetBundle =
      _CFPlugInGetBundlePtr.asFunction<CFBundleRef Function(CFPlugInRef)>();

  void CFPlugInSetLoadOnDemand(
    CFPlugInRef plugIn,
    int flag,
  ) {
    return _CFPlugInSetLoadOnDemand(
      plugIn,
      flag,
    );
  }

  late final _CFPlugInSetLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFPlugInRef, Boolean)>>(
          'CFPlugInSetLoadOnDemand');
  late final _CFPlugInSetLoadOnDemand =
      _CFPlugInSetLoadOnDemandPtr.asFunction<void Function(CFPlugInRef, int)>();

  int CFPlugInIsLoadOnDemand(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInIsLoadOnDemand(
      plugIn,
    );
  }

  late final _CFPlugInIsLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPlugInRef)>>(
          'CFPlugInIsLoadOnDemand');
  late final _CFPlugInIsLoadOnDemand =
      _CFPlugInIsLoadOnDemandPtr.asFunction<int Function(CFPlugInRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInType(
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInFindFactoriesForPlugInType(
      typeUUID,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypePtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef)>>(
          'CFPlugInFindFactoriesForPlugInType');
  late final _CFPlugInFindFactoriesForPlugInType =
      _CFPlugInFindFactoriesForPlugInTypePtr.asFunction<
          CFArrayRef Function(CFUUIDRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(
    CFUUIDRef typeUUID,
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInFindFactoriesForPlugInTypeInPlugIn(
      typeUUID,
      plugIn,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef, CFPlugInRef)>>(
          'CFPlugInFindFactoriesForPlugInTypeInPlugIn');
  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn =
      _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr.asFunction<
          CFArrayRef Function(CFUUIDRef, CFPlugInRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceCreate(
    CFAllocatorRef allocator,
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInInstanceCreate(
      allocator,
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInInstanceCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFUUIDRef, CFUUIDRef)>>('CFPlugInInstanceCreate');
  late final _CFPlugInInstanceCreate = _CFPlugInInstanceCreatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef, CFUUIDRef)>();

  int CFPlugInRegisterFactoryFunction(
    CFUUIDRef factoryUUID,
    CFPlugInFactoryFunction func,
  ) {
    return _CFPlugInRegisterFactoryFunction(
      factoryUUID,
      func,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef,
              CFPlugInFactoryFunction)>>('CFPlugInRegisterFactoryFunction');
  late final _CFPlugInRegisterFactoryFunction =
      _CFPlugInRegisterFactoryFunctionPtr.asFunction<
          int Function(CFUUIDRef, CFPlugInFactoryFunction)>();

  int CFPlugInRegisterFactoryFunctionByName(
    CFUUIDRef factoryUUID,
    CFPlugInRef plugIn,
    CFStringRef functionName,
  ) {
    return _CFPlugInRegisterFactoryFunctionByName(
      factoryUUID,
      plugIn,
      functionName,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionByNamePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef, CFPlugInRef,
              CFStringRef)>>('CFPlugInRegisterFactoryFunctionByName');
  late final _CFPlugInRegisterFactoryFunctionByName =
      _CFPlugInRegisterFactoryFunctionByNamePtr.asFunction<
          int Function(CFUUIDRef, CFPlugInRef, CFStringRef)>();

  int CFPlugInUnregisterFactory(
    CFUUIDRef factoryUUID,
  ) {
    return _CFPlugInUnregisterFactory(
      factoryUUID,
    );
  }

  late final _CFPlugInUnregisterFactoryPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef)>>(
          'CFPlugInUnregisterFactory');
  late final _CFPlugInUnregisterFactory =
      _CFPlugInUnregisterFactoryPtr.asFunction<int Function(CFUUIDRef)>();

  int CFPlugInRegisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInRegisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInRegisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInRegisterPlugInType');
  late final _CFPlugInRegisterPlugInType = _CFPlugInRegisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  int CFPlugInUnregisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInUnregisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInUnregisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInUnregisterPlugInType');
  late final _CFPlugInUnregisterPlugInType = _CFPlugInUnregisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  void CFPlugInAddInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInAddInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInAddInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInAddInstanceForFactory');
  late final _CFPlugInAddInstanceForFactory =
      _CFPlugInAddInstanceForFactoryPtr.asFunction<void Function(CFUUIDRef)>();

  void CFPlugInRemoveInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInRemoveInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInRemoveInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInRemoveInstanceForFactory');
  late final _CFPlugInRemoveInstanceForFactory =
      _CFPlugInRemoveInstanceForFactoryPtr.asFunction<
          void Function(CFUUIDRef)>();

  int CFPlugInInstanceGetInterfaceFunctionTable(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFPlugInInstanceGetInterfaceFunctionTable(
      instance,
      interfaceName,
      ftbl,
    );
  }

  late final _CFPlugInInstanceGetInterfaceFunctionTablePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFPlugInInstanceRef, CFStringRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFPlugInInstanceGetInterfaceFunctionTable');
  late final _CFPlugInInstanceGetInterfaceFunctionTable =
      _CFPlugInInstanceGetInterfaceFunctionTablePtr.asFunction<
          int Function(CFPlugInInstanceRef, CFStringRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFStringRef CFPlugInInstanceGetFactoryName(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetFactoryName(
      instance,
    );
  }

  late final _CFPlugInInstanceGetFactoryNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFPlugInInstanceRef)>>(
          'CFPlugInInstanceGetFactoryName');
  late final _CFPlugInInstanceGetFactoryName =
      _CFPlugInInstanceGetFactoryNamePtr.asFunction<
          CFStringRef Function(CFPlugInInstanceRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceGetInstanceData(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetInstanceData(
      instance,
    );
  }

  late final _CFPlugInInstanceGetInstanceDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFPlugInInstanceRef)>>('CFPlugInInstanceGetInstanceData');
  late final _CFPlugInInstanceGetInstanceData =
      _CFPlugInInstanceGetInstanceDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>();

  int CFPlugInInstanceGetTypeID() {
    return _CFPlugInInstanceGetTypeID();
  }

  late final _CFPlugInInstanceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFPlugInInstanceGetTypeID');
  late final _CFPlugInInstanceGetTypeID =
      _CFPlugInInstanceGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(
    CFAllocatorRef allocator,
    int instanceDataSize,
    CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction,
    CFStringRef factoryName,
    CFPlugInInstanceGetInterfaceFunction getInterfaceFunction,
  ) {
    return _CFPlugInInstanceCreateWithInstanceDataSize(
      allocator,
      instanceDataSize,
      deallocateInstanceFunction,
      factoryName,
      getInterfaceFunction,
    );
  }

  late final _CFPlugInInstanceCreateWithInstanceDataSizePtr = _lookup<
          ffi.NativeFunction<
              CFPlugInInstanceRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  CFPlugInInstanceDeallocateInstanceDataFunction,
                  CFStringRef,
                  CFPlugInInstanceGetInterfaceFunction)>>(
      'CFPlugInInstanceCreateWithInstanceDataSize');
  late final _CFPlugInInstanceCreateWithInstanceDataSize =
      _CFPlugInInstanceCreateWithInstanceDataSizePtr.asFunction<
          CFPlugInInstanceRef Function(
              CFAllocatorRef,
              int,
              CFPlugInInstanceDeallocateInstanceDataFunction,
              CFStringRef,
              CFPlugInInstanceGetInterfaceFunction)>();

  int CFMachPortGetTypeID() {
    return _CFMachPortGetTypeID();
  }

  late final _CFMachPortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFMachPortGetTypeID');
  late final _CFMachPortGetTypeID =
      _CFMachPortGetTypeIDPtr.asFunction<int Function()>();

  CFMachPortRef CFMachPortCreate(
    CFAllocatorRef allocator,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreate(
      allocator,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreatePtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreate');
  late final _CFMachPortCreate = _CFMachPortCreatePtr.asFunction<
      CFMachPortRef Function(CFAllocatorRef, CFMachPortCallBack,
          ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  CFMachPortRef CFMachPortCreateWithPort(
    CFAllocatorRef allocator,
    int portNum,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreateWithPort(
      allocator,
      portNum,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreateWithPortPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              mach_port_t,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreateWithPort');
  late final _CFMachPortCreateWithPort =
      _CFMachPortCreateWithPortPtr.asFunction<
          CFMachPortRef Function(CFAllocatorRef, int, CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  int CFMachPortGetPort(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetPort(
      port,
    );
  }

  late final _CFMachPortGetPortPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(CFMachPortRef)>>(
          'CFMachPortGetPort');
  late final _CFMachPortGetPort =
      _CFMachPortGetPortPtr.asFunction<int Function(CFMachPortRef)>();

  void CFMachPortGetContext(
    CFMachPortRef port,
    ffi.Pointer<CFMachPortContext> context,
  ) {
    return _CFMachPortGetContext(
      port,
      context,
    );
  }

  late final _CFMachPortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMachPortRef,
              ffi.Pointer<CFMachPortContext>)>>('CFMachPortGetContext');
  late final _CFMachPortGetContext = _CFMachPortGetContextPtr.asFunction<
      void Function(CFMachPortRef, ffi.Pointer<CFMachPortContext>)>();

  void CFMachPortInvalidate(
    CFMachPortRef port,
  ) {
    return _CFMachPortInvalidate(
      port,
    );
  }

  late final _CFMachPortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMachPortRef)>>(
          'CFMachPortInvalidate');
  late final _CFMachPortInvalidate =
      _CFMachPortInvalidatePtr.asFunction<void Function(CFMachPortRef)>();

  int CFMachPortIsValid(
    CFMachPortRef port,
  ) {
    return _CFMachPortIsValid(
      port,
    );
  }

  late final _CFMachPortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMachPortRef)>>(
          'CFMachPortIsValid');
  late final _CFMachPortIsValid =
      _CFMachPortIsValidPtr.asFunction<int Function(CFMachPortRef)>();

  CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetInvalidationCallBack(
      port,
    );
  }

  late final _CFMachPortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortInvalidationCallBack Function(
              CFMachPortRef)>>('CFMachPortGetInvalidationCallBack');
  late final _CFMachPortGetInvalidationCallBack =
      _CFMachPortGetInvalidationCallBackPtr.asFunction<
          CFMachPortInvalidationCallBack Function(CFMachPortRef)>();

  void CFMachPortSetInvalidationCallBack(
    CFMachPortRef port,
    CFMachPortInvalidationCallBack callout,
  ) {
    return _CFMachPortSetInvalidationCallBack(
      port,
      callout,
    );
  }

  late final _CFMachPortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMachPortRef, CFMachPortInvalidationCallBack)>>(
      'CFMachPortSetInvalidationCallBack');
  late final _CFMachPortSetInvalidationCallBack =
      _CFMachPortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMachPortRef, CFMachPortInvalidationCallBack)>();

  CFRunLoopSourceRef CFMachPortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMachPortRef port,
    int order,
  ) {
    return _CFMachPortCreateRunLoopSource(
      allocator,
      port,
      order,
    );
  }

  late final _CFMachPortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef,
              CFIndex)>>('CFMachPortCreateRunLoopSource');
  late final _CFMachPortCreateRunLoopSource =
      _CFMachPortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef, int)>();

  int CFAttributedStringGetTypeID() {
    return _CFAttributedStringGetTypeID();
  }

  late final _CFAttributedStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFAttributedStringGetTypeID');
  late final _CFAttributedStringGetTypeID =
      _CFAttributedStringGetTypeIDPtr.asFunction<int Function()>();

  CFAttributedStringRef CFAttributedStringCreate(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFDictionaryRef attributes,
  ) {
    return _CFAttributedStringCreate(
      alloc,
      str,
      attributes,
    );
  }

  late final _CFAttributedStringCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFAttributedStringCreate');
  late final _CFAttributedStringCreate =
      _CFAttributedStringCreatePtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFAttributedStringRef CFAttributedStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
    CFRange range,
  ) {
    return _CFAttributedStringCreateWithSubstring(
      alloc,
      aStr,
      range,
    );
  }

  late final _CFAttributedStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFAttributedStringRef,
              CFRange)>>('CFAttributedStringCreateWithSubstring');
  late final _CFAttributedStringCreateWithSubstring =
      _CFAttributedStringCreateWithSubstringPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef, CFRange)>();

  CFAttributedStringRef CFAttributedStringCreateCopy(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateCopy(
      alloc,
      aStr,
    );
  }

  late final _CFAttributedStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef,
              CFAttributedStringRef)>>('CFAttributedStringCreateCopy');
  late final _CFAttributedStringCreateCopy =
      _CFAttributedStringCreateCopyPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef)>();

  CFStringRef CFAttributedStringGetString(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetString(
      aStr,
    );
  }

  late final _CFAttributedStringGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetString');
  late final _CFAttributedStringGetString = _CFAttributedStringGetStringPtr
      .asFunction<CFStringRef Function(CFAttributedStringRef)>();

  int CFAttributedStringGetLength(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetLength(
      aStr,
    );
  }

  late final _CFAttributedStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetLength');
  late final _CFAttributedStringGetLength = _CFAttributedStringGetLengthPtr
      .asFunction<int Function(CFAttributedStringRef)>();

  CFDictionaryRef CFAttributedStringGetAttributes(
    CFAttributedStringRef aStr,
    int loc,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttributes(
      aStr,
      loc,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttributes');
  late final _CFAttributedStringGetAttributes =
      _CFAttributedStringGetAttributesPtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttribute(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttribute(
      aStr,
      loc,
      attrName,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAttributedStringRef, CFIndex, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttribute');
  late final _CFAttributedStringGetAttribute =
      _CFAttributedStringGetAttributePtr.asFunction<
          CFTypeRef Function(
              CFAttributedStringRef, int, CFStringRef, ffi.Pointer<CFRange>)>();

  CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributesAndLongestEffectiveRange(
      aStr,
      loc,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
                      CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributesAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange =
      _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, CFRange, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributeAndLongestEffectiveRange(
      aStr,
      loc,
      attrName,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFTypeRef Function(CFAttributedStringRef, CFIndex,
                      CFStringRef, CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributeAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange =
      _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr.asFunction<
          CFTypeRef Function(CFAttributedStringRef, int, CFStringRef, CFRange,
              ffi.Pointer<CFRange>)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateMutableCopy(
      alloc,
      maxLength,
      aStr,
    );
  }

  late final _CFAttributedStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, CFIndex,
              CFAttributedStringRef)>>('CFAttributedStringCreateMutableCopy');
  late final _CFAttributedStringCreateMutableCopy =
      _CFAttributedStringCreateMutableCopyPtr.asFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, int, CFAttributedStringRef)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFAttributedStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFAttributedStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFAttributedStringCreateMutable');
  late final _CFAttributedStringCreateMutable =
      _CFAttributedStringCreateMutablePtr.asFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, int)>();

  void CFAttributedStringReplaceString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFAttributedStringReplaceString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringReplaceString');
  late final _CFAttributedStringReplaceString =
      _CFAttributedStringReplaceStringPtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  CFMutableStringRef CFAttributedStringGetMutableString(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetMutableString(
      aStr,
    );
  }

  late final _CFAttributedStringGetMutableStringPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringGetMutableString');
  late final _CFAttributedStringGetMutableString =
      _CFAttributedStringGetMutableStringPtr.asFunction<
          CFMutableStringRef Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringSetAttributes(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFDictionaryRef replacement,
    int clearOtherAttributes,
  ) {
    return _CFAttributedStringSetAttributes(
      aStr,
      range,
      replacement,
      clearOtherAttributes,
    );
  }

  late final _CFAttributedStringSetAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFDictionaryRef, Boolean)>>('CFAttributedStringSetAttributes');
  late final _CFAttributedStringSetAttributes =
      _CFAttributedStringSetAttributesPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFDictionaryRef, int)>();

  void CFAttributedStringSetAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
    CFTypeRef value,
  ) {
    return _CFAttributedStringSetAttribute(
      aStr,
      range,
      attrName,
      value,
    );
  }

  late final _CFAttributedStringSetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange, CFStringRef,
              CFTypeRef)>>('CFAttributedStringSetAttribute');
  late final _CFAttributedStringSetAttribute =
      _CFAttributedStringSetAttributePtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFStringRef, CFTypeRef)>();

  void CFAttributedStringRemoveAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
  ) {
    return _CFAttributedStringRemoveAttribute(
      aStr,
      range,
      attrName,
    );
  }

  late final _CFAttributedStringRemoveAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringRemoveAttribute');
  late final _CFAttributedStringRemoveAttribute =
      _CFAttributedStringRemoveAttributePtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  void CFAttributedStringReplaceAttributedString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFAttributedStringRef replacement,
  ) {
    return _CFAttributedStringReplaceAttributedString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceAttributedStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFMutableAttributedStringRef, CFRange,
                  CFAttributedStringRef)>>(
      'CFAttributedStringReplaceAttributedString');
  late final _CFAttributedStringReplaceAttributedString =
      _CFAttributedStringReplaceAttributedStringPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFAttributedStringRef)>();

  void CFAttributedStringBeginEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringBeginEditing(
      aStr,
    );
  }

  late final _CFAttributedStringBeginEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringBeginEditing');
  late final _CFAttributedStringBeginEditing =
      _CFAttributedStringBeginEditingPtr.asFunction<
          void Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringEndEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringEndEditing(
      aStr,
    );
  }

  late final _CFAttributedStringEndEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringEndEditing');
  late final _CFAttributedStringEndEditing = _CFAttributedStringEndEditingPtr
      .asFunction<void Function(CFMutableAttributedStringRef)>();

  int CFURLEnumeratorGetTypeID() {
    return _CFURLEnumeratorGetTypeID();
  }

  late final _CFURLEnumeratorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFURLEnumeratorGetTypeID');
  late final _CFURLEnumeratorGetTypeID =
      _CFURLEnumeratorGetTypeIDPtr.asFunction<int Function()>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(
    CFAllocatorRef alloc,
    CFURLRef directoryURL,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForDirectoryURL(
      alloc,
      directoryURL,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForDirectoryURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFURLRef, ffi.Int32,
              CFArrayRef)>>('CFURLEnumeratorCreateForDirectoryURL');
  late final _CFURLEnumeratorCreateForDirectoryURL =
      _CFURLEnumeratorCreateForDirectoryURLPtr.asFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef, CFURLRef, int, CFArrayRef)>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes(
    CFAllocatorRef alloc,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForMountedVolumes(
      alloc,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForMountedVolumesPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, ffi.Int32,
              CFArrayRef)>>('CFURLEnumeratorCreateForMountedVolumes');
  late final _CFURLEnumeratorCreateForMountedVolumes =
      _CFURLEnumeratorCreateForMountedVolumesPtr.asFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFURLEnumeratorGetNextURL(
    CFURLEnumeratorRef enumerator,
    ffi.Pointer<CFURLRef> url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLEnumeratorGetNextURL(
      enumerator,
      url,
      error,
    );
  }

  late final _CFURLEnumeratorGetNextURLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>>('CFURLEnumeratorGetNextURL');
  late final _CFURLEnumeratorGetNextURL =
      _CFURLEnumeratorGetNextURLPtr.asFunction<
          int Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>();

  void CFURLEnumeratorSkipDescendents(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorSkipDescendents(
      enumerator,
    );
  }

  late final _CFURLEnumeratorSkipDescendentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorSkipDescendents');
  late final _CFURLEnumeratorSkipDescendents =
      _CFURLEnumeratorSkipDescendentsPtr.asFunction<
          void Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetDescendentLevel(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetDescendentLevel(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetDescendentLevelPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetDescendentLevel');
  late final _CFURLEnumeratorGetDescendentLevel =
      _CFURLEnumeratorGetDescendentLevelPtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetSourceDidChange(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetSourceDidChange(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetSourceDidChangePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetSourceDidChange');
  late final _CFURLEnumeratorGetSourceDidChange =
      _CFURLEnumeratorGetSourceDidChangePtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFFileSecurityGetTypeID() {
    return _CFFileSecurityGetTypeID();
  }

  late final _CFFileSecurityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileSecurityGetTypeID');
  late final _CFFileSecurityGetTypeID =
      _CFFileSecurityGetTypeIDPtr.asFunction<int Function()>();

  CFFileSecurityRef CFFileSecurityCreate(
    CFAllocatorRef allocator,
  ) {
    return _CFFileSecurityCreate(
      allocator,
    );
  }

  late final _CFFileSecurityCreatePtr =
      _lookup<ffi.NativeFunction<CFFileSecurityRef Function(CFAllocatorRef)>>(
          'CFFileSecurityCreate');
  late final _CFFileSecurityCreate = _CFFileSecurityCreatePtr.asFunction<
      CFFileSecurityRef Function(CFAllocatorRef)>();

  CFFileSecurityRef CFFileSecurityCreateCopy(
    CFAllocatorRef allocator,
    CFFileSecurityRef fileSec,
  ) {
    return _CFFileSecurityCreateCopy(
      allocator,
      fileSec,
    );
  }

  late final _CFFileSecurityCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFFileSecurityRef Function(
              CFAllocatorRef, CFFileSecurityRef)>>('CFFileSecurityCreateCopy');
  late final _CFFileSecurityCreateCopy =
      _CFFileSecurityCreateCopyPtr.asFunction<
          CFFileSecurityRef Function(CFAllocatorRef, CFFileSecurityRef)>();

  int CFFileSecurityCopyOwnerUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> ownerUUID,
  ) {
    return _CFFileSecurityCopyOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecurityCopyOwnerUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyOwnerUUID');
  late final _CFFileSecurityCopyOwnerUUID = _CFFileSecurityCopyOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetOwnerUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef ownerUUID,
  ) {
    return _CFFileSecuritySetOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecuritySetOwnerUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetOwnerUUID');
  late final _CFFileSecuritySetOwnerUUID = _CFFileSecuritySetOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyGroupUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> groupUUID,
  ) {
    return _CFFileSecurityCopyGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecurityCopyGroupUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyGroupUUID');
  late final _CFFileSecurityCopyGroupUUID = _CFFileSecurityCopyGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetGroupUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef groupUUID,
  ) {
    return _CFFileSecuritySetGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecuritySetGroupUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetGroupUUID');
  late final _CFFileSecuritySetGroupUUID = _CFFileSecuritySetGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyAccessControlList(
    CFFileSecurityRef fileSec,
    ffi.Pointer<acl_t> accessControlList,
  ) {
    return _CFFileSecurityCopyAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecurityCopyAccessControlListPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<acl_t>)>>('CFFileSecurityCopyAccessControlList');
  late final _CFFileSecurityCopyAccessControlList =
      _CFFileSecurityCopyAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, ffi.Pointer<acl_t>)>();

  int CFFileSecuritySetAccessControlList(
    CFFileSecurityRef fileSec,
    acl_t accessControlList,
  ) {
    return _CFFileSecuritySetAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecuritySetAccessControlListPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, acl_t)>>(
          'CFFileSecuritySetAccessControlList');
  late final _CFFileSecuritySetAccessControlList =
      _CFFileSecuritySetAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, acl_t)>();

  int CFFileSecurityGetOwner(
    CFFileSecurityRef fileSec,
    ffi.Pointer<uid_t> owner,
  ) {
    return _CFFileSecurityGetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecurityGetOwnerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<uid_t>)>>('CFFileSecurityGetOwner');
  late final _CFFileSecurityGetOwner = _CFFileSecurityGetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<uid_t>)>();

  int CFFileSecuritySetOwner(
    CFFileSecurityRef fileSec,
    int owner,
  ) {
    return _CFFileSecuritySetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecuritySetOwnerPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, uid_t)>>(
          'CFFileSecuritySetOwner');
  late final _CFFileSecuritySetOwner = _CFFileSecuritySetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetGroup(
    CFFileSecurityRef fileSec,
    ffi.Pointer<gid_t> group,
  ) {
    return _CFFileSecurityGetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecurityGetGroupPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<gid_t>)>>('CFFileSecurityGetGroup');
  late final _CFFileSecurityGetGroup = _CFFileSecurityGetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<gid_t>)>();

  int CFFileSecuritySetGroup(
    CFFileSecurityRef fileSec,
    int group,
  ) {
    return _CFFileSecuritySetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecuritySetGroupPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, gid_t)>>(
          'CFFileSecuritySetGroup');
  late final _CFFileSecuritySetGroup = _CFFileSecuritySetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetMode(
    CFFileSecurityRef fileSec,
    ffi.Pointer<mode_t> mode,
  ) {
    return _CFFileSecurityGetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecurityGetModePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<mode_t>)>>('CFFileSecurityGetMode');
  late final _CFFileSecurityGetMode = _CFFileSecurityGetModePtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<mode_t>)>();

  int CFFileSecuritySetMode(
    CFFileSecurityRef fileSec,
    int mode,
  ) {
    return _CFFileSecuritySetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecuritySetModePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, mode_t)>>(
          'CFFileSecuritySetMode');
  late final _CFFileSecuritySetMode = _CFFileSecuritySetModePtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityClearProperties(
    CFFileSecurityRef fileSec,
    int clearPropertyMask,
  ) {
    return _CFFileSecurityClearProperties(
      fileSec,
      clearPropertyMask,
    );
  }

  late final _CFFileSecurityClearPropertiesPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, ffi.Int32)>>(
      'CFFileSecurityClearProperties');
  late final _CFFileSecurityClearProperties = _CFFileSecurityClearPropertiesPtr
      .asFunction<int Function(CFFileSecurityRef, int)>();

  CFStringRef CFStringTokenizerCopyBestStringLanguage(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguagePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage =
      _CFStringTokenizerCopyBestStringLanguagePtr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID() {
    return _CFStringTokenizerGetTypeID();
  }

  late final _CFStringTokenizerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID =
      _CFStringTokenizerGetTypeIDPtr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate(
    CFAllocatorRef alloc,
    CFStringRef string,
    CFRange range,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFStringTokenizerCreate(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(CFAllocatorRef, CFStringRef, CFRange,
              CFOptionFlags, CFLocaleRef)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate = _CFStringTokenizerCreatePtr.asFunction<
      CFStringTokenizerRef Function(
          CFAllocatorRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  void CFStringTokenizerSetString(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString = _CFStringTokenizerSetStringPtr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  int CFStringTokenizerGoToTokenAtIndex(
    CFStringTokenizerRef tokenizer,
    int index,
  ) {
    return _CFStringTokenizerGoToTokenAtIndex(
      tokenizer,
      index,
    );
  }

  late final _CFStringTokenizerGoToTokenAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringTokenizerRef,
              CFIndex)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex =
      _CFStringTokenizerGoToTokenAtIndexPtr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerAdvanceToNextToken(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerAdvanceToNextToken(
      tokenizer,
    );
  }

  late final _CFStringTokenizerAdvanceToNextTokenPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken =
      _CFStringTokenizerAdvanceToNextTokenPtr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRangePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange =
      _CFStringTokenizerGetCurrentTokenRangePtr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              CFOptionFlags)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute =
      _CFStringTokenizerCopyCurrentTokenAttributePtr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    CFMutableArrayRef derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokensPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, CFIndex,
              CFMutableArrayRef)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens =
      _CFStringTokenizerGetCurrentSubTokensPtr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              CFMutableArrayRef)>();

  int CFFileDescriptorGetTypeID() {
    return _CFFileDescriptorGetTypeID();
  }

  late final _CFFileDescriptorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileDescriptorGetTypeID');
  late final _CFFileDescriptorGetTypeID =
      _CFFileDescriptorGetTypeIDPtr.asFunction<int Function()>();

  CFFileDescriptorRef CFFileDescriptorCreate(
    CFAllocatorRef allocator,
    int fd,
    int closeOnInvalidate,
    CFFileDescriptorCallBack callout,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorCreate(
      allocator,
      fd,
      closeOnInvalidate,
      callout,
      context,
    );
  }

  late final _CFFileDescriptorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorRef Function(
              CFAllocatorRef,
              CFFileDescriptorNativeDescriptor,
              Boolean,
              CFFileDescriptorCallBack,
              ffi.Pointer<CFFileDescriptorContext>)>>('CFFileDescriptorCreate');
  late final _CFFileDescriptorCreate = _CFFileDescriptorCreatePtr.asFunction<
      CFFileDescriptorRef Function(CFAllocatorRef, int, int,
          CFFileDescriptorCallBack, ffi.Pointer<CFFileDescriptorContext>)>();

  int CFFileDescriptorGetNativeDescriptor(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorGetNativeDescriptor(
      f,
    );
  }

  late final _CFFileDescriptorGetNativeDescriptorPtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorNativeDescriptor Function(
              CFFileDescriptorRef)>>('CFFileDescriptorGetNativeDescriptor');
  late final _CFFileDescriptorGetNativeDescriptor =
      _CFFileDescriptorGetNativeDescriptorPtr.asFunction<
          int Function(CFFileDescriptorRef)>();

  void CFFileDescriptorGetContext(
    CFFileDescriptorRef f,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorGetContext(
      f,
      context,
    );
  }

  late final _CFFileDescriptorGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>>(
      'CFFileDescriptorGetContext');
  late final _CFFileDescriptorGetContext =
      _CFFileDescriptorGetContextPtr.asFunction<
          void Function(
              CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>();

  void CFFileDescriptorEnableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorEnableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorEnableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorEnableCallBacks');
  late final _CFFileDescriptorEnableCallBacks =
      _CFFileDescriptorEnableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorDisableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorDisableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorDisableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorDisableCallBacks');
  late final _CFFileDescriptorDisableCallBacks =
      _CFFileDescriptorDisableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorInvalidate(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorInvalidate(
      f,
    );
  }

  late final _CFFileDescriptorInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorInvalidate');
  late final _CFFileDescriptorInvalidate = _CFFileDescriptorInvalidatePtr
      .asFunction<void Function(CFFileDescriptorRef)>();

  int CFFileDescriptorIsValid(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorIsValid(
      f,
    );
  }

  late final _CFFileDescriptorIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorIsValid');
  late final _CFFileDescriptorIsValid = _CFFileDescriptorIsValidPtr.asFunction<
      int Function(CFFileDescriptorRef)>();

  CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFFileDescriptorRef f,
    int order,
  ) {
    return _CFFileDescriptorCreateRunLoopSource(
      allocator,
      f,
      order,
    );
  }

  late final _CFFileDescriptorCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFFileDescriptorRef,
              CFIndex)>>('CFFileDescriptorCreateRunLoopSource');
  late final _CFFileDescriptorCreateRunLoopSource =
      _CFFileDescriptorCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef, CFFileDescriptorRef, int)>();

  int CFUserNotificationGetTypeID() {
    return _CFUserNotificationGetTypeID();
  }

  late final _CFUserNotificationGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFUserNotificationGetTypeID');
  late final _CFUserNotificationGetTypeID =
      _CFUserNotificationGetTypeIDPtr.asFunction<int Function()>();

  CFUserNotificationRef CFUserNotificationCreate(
    CFAllocatorRef allocator,
    double timeout,
    int flags,
    ffi.Pointer<SInt32> error,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationCreate(
      allocator,
      timeout,
      flags,
      error,
      dictionary,
    );
  }

  late final _CFUserNotificationCreatePtr = _lookup<
      ffi.NativeFunction<
          CFUserNotificationRef Function(
              CFAllocatorRef,
              CFTimeInterval,
              CFOptionFlags,
              ffi.Pointer<SInt32>,
              CFDictionaryRef)>>('CFUserNotificationCreate');
  late final _CFUserNotificationCreate =
      _CFUserNotificationCreatePtr.asFunction<
          CFUserNotificationRef Function(CFAllocatorRef, double, int,
              ffi.Pointer<SInt32>, CFDictionaryRef)>();

  int CFUserNotificationReceiveResponse(
    CFUserNotificationRef userNotification,
    double timeout,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationReceiveResponse(
      userNotification,
      timeout,
      responseFlags,
    );
  }

  late final _CFUserNotificationReceiveResponsePtr = _lookup<
          ffi.NativeFunction<
              SInt32 Function(CFUserNotificationRef, CFTimeInterval,
                  ffi.Pointer<CFOptionFlags>)>>(
      'CFUserNotificationReceiveResponse');
  late final _CFUserNotificationReceiveResponse =
      _CFUserNotificationReceiveResponsePtr.asFunction<
          int Function(
              CFUserNotificationRef, double, ffi.Pointer<CFOptionFlags>)>();

  CFStringRef CFUserNotificationGetResponseValue(
    CFUserNotificationRef userNotification,
    CFStringRef key,
    int idx,
  ) {
    return _CFUserNotificationGetResponseValue(
      userNotification,
      key,
      idx,
    );
  }

  late final _CFUserNotificationGetResponseValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef,
              CFIndex)>>('CFUserNotificationGetResponseValue');
  late final _CFUserNotificationGetResponseValue =
      _CFUserNotificationGetResponseValuePtr.asFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef, int)>();

  CFDictionaryRef CFUserNotificationGetResponseDictionary(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationGetResponseDictionary(
      userNotification,
    );
  }

  late final _CFUserNotificationGetResponseDictionaryPtr = _lookup<
          ffi.NativeFunction<CFDictionaryRef Function(CFUserNotificationRef)>>(
      'CFUserNotificationGetResponseDictionary');
  late final _CFUserNotificationGetResponseDictionary =
      _CFUserNotificationGetResponseDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFUserNotificationRef)>();

  int CFUserNotificationUpdate(
    CFUserNotificationRef userNotification,
    double timeout,
    int flags,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationUpdate(
      userNotification,
      timeout,
      flags,
      dictionary,
    );
  }

  late final _CFUserNotificationUpdatePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFUserNotificationRef, CFTimeInterval, CFOptionFlags,
              CFDictionaryRef)>>('CFUserNotificationUpdate');
  late final _CFUserNotificationUpdate =
      _CFUserNotificationUpdatePtr.asFunction<
          int Function(CFUserNotificationRef, double, int, CFDictionaryRef)>();

  int CFUserNotificationCancel(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationCancel(
      userNotification,
    );
  }

  late final _CFUserNotificationCancelPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFUserNotificationRef)>>(
          'CFUserNotificationCancel');
  late final _CFUserNotificationCancel = _CFUserNotificationCancelPtr
      .asFunction<int Function(CFUserNotificationRef)>();

  CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFUserNotificationRef userNotification,
    CFUserNotificationCallBack callout,
    int order,
  ) {
    return _CFUserNotificationCreateRunLoopSource(
      allocator,
      userNotification,
      callout,
      order,
    );
  }

  late final _CFUserNotificationCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef,
              CFUserNotificationRef,
              CFUserNotificationCallBack,
              CFIndex)>>('CFUserNotificationCreateRunLoopSource');
  late final _CFUserNotificationCreateRunLoopSource =
      _CFUserNotificationCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFUserNotificationRef,
              CFUserNotificationCallBack, int)>();

  int CFUserNotificationDisplayNotice(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
  ) {
    return _CFUserNotificationDisplayNotice(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
    );
  }

  late final _CFUserNotificationDisplayNoticePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef)>>('CFUserNotificationDisplayNotice');
  late final _CFUserNotificationDisplayNotice =
      _CFUserNotificationDisplayNoticePtr.asFunction<
          int Function(double, int, CFURLRef, CFURLRef, CFURLRef, CFStringRef,
              CFStringRef, CFStringRef)>();

  int CFUserNotificationDisplayAlert(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
    CFStringRef alternateButtonTitle,
    CFStringRef otherButtonTitle,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationDisplayAlert(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
      alternateButtonTitle,
      otherButtonTitle,
      responseFlags,
    );
  }

  late final _CFUserNotificationDisplayAlertPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>>('CFUserNotificationDisplayAlert');
  late final _CFUserNotificationDisplayAlert =
      _CFUserNotificationDisplayAlertPtr.asFunction<
          int Function(
              double,
              int,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>();

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationIconURLKey =
      _lookup<CFStringRef>('kCFUserNotificationIconURLKey');

  CFStringRef get kCFUserNotificationIconURLKey =>
      _kCFUserNotificationIconURLKey.value;

  set kCFUserNotificationIconURLKey(CFStringRef value) =>
      _kCFUserNotificationIconURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationSoundURLKey =
      _lookup<CFStringRef>('kCFUserNotificationSoundURLKey');

  CFStringRef get kCFUserNotificationSoundURLKey =>
      _kCFUserNotificationSoundURLKey.value;

  set kCFUserNotificationSoundURLKey(CFStringRef value) =>
      _kCFUserNotificationSoundURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationLocalizationURLKey =
      _lookup<CFStringRef>('kCFUserNotificationLocalizationURLKey');

  CFStringRef get kCFUserNotificationLocalizationURLKey =>
      _kCFUserNotificationLocalizationURLKey.value;

  set kCFUserNotificationLocalizationURLKey(CFStringRef value) =>
      _kCFUserNotificationLocalizationURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertHeaderKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertHeaderKey');

  CFStringRef get kCFUserNotificationAlertHeaderKey =>
      _kCFUserNotificationAlertHeaderKey.value;

  set kCFUserNotificationAlertHeaderKey(CFStringRef value) =>
      _kCFUserNotificationAlertHeaderKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertMessageKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertMessageKey');

  CFStringRef get kCFUserNotificationAlertMessageKey =>
      _kCFUserNotificationAlertMessageKey.value;

  set kCFUserNotificationAlertMessageKey(CFStringRef value) =>
      _kCFUserNotificationAlertMessageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationDefaultButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationDefaultButtonTitleKey');

  CFStringRef get kCFUserNotificationDefaultButtonTitleKey =>
      _kCFUserNotificationDefaultButtonTitleKey.value;

  set kCFUserNotificationDefaultButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationDefaultButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationAlternateButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationAlternateButtonTitleKey');

  CFStringRef get kCFUserNotificationAlternateButtonTitleKey =>
      _kCFUserNotificationAlternateButtonTitleKey.value;

  set kCFUserNotificationAlternateButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationAlternateButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationOtherButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationOtherButtonTitleKey');

  CFStringRef get kCFUserNotificationOtherButtonTitleKey =>
      _kCFUserNotificationOtherButtonTitleKey.value;

  set kCFUserNotificationOtherButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationOtherButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationProgressIndicatorValueKey =
      _lookup<CFStringRef>('kCFUserNotificationProgressIndicatorValueKey');

  CFStringRef get kCFUserNotificationProgressIndicatorValueKey =>
      _kCFUserNotificationProgressIndicatorValueKey.value;

  set kCFUserNotificationProgressIndicatorValueKey(CFStringRef value) =>
      _kCFUserNotificationProgressIndicatorValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpTitlesKey');

  CFStringRef get kCFUserNotificationPopUpTitlesKey =>
      _kCFUserNotificationPopUpTitlesKey.value;

  set kCFUserNotificationPopUpTitlesKey(CFStringRef value) =>
      _kCFUserNotificationPopUpTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldTitlesKey');

  CFStringRef get kCFUserNotificationTextFieldTitlesKey =>
      _kCFUserNotificationTextFieldTitlesKey.value;

  set kCFUserNotificationTextFieldTitlesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationCheckBoxTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationCheckBoxTitlesKey');

  CFStringRef get kCFUserNotificationCheckBoxTitlesKey =>
      _kCFUserNotificationCheckBoxTitlesKey.value;

  set kCFUserNotificationCheckBoxTitlesKey(CFStringRef value) =>
      _kCFUserNotificationCheckBoxTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldValuesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldValuesKey');

  CFStringRef get kCFUserNotificationTextFieldValuesKey =>
      _kCFUserNotificationTextFieldValuesKey.value;

  set kCFUserNotificationTextFieldValuesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldValuesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpSelectionKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpSelectionKey');

  CFStringRef get kCFUserNotificationPopUpSelectionKey =>
      _kCFUserNotificationPopUpSelectionKey.value;

  set kCFUserNotificationPopUpSelectionKey(CFStringRef value) =>
      _kCFUserNotificationPopUpSelectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertTopMostKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertTopMostKey');

  CFStringRef get kCFUserNotificationAlertTopMostKey =>
      _kCFUserNotificationAlertTopMostKey.value;

  set kCFUserNotificationAlertTopMostKey(CFStringRef value) =>
      _kCFUserNotificationAlertTopMostKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationKeyboardTypesKey =
      _lookup<CFStringRef>('kCFUserNotificationKeyboardTypesKey');

  CFStringRef get kCFUserNotificationKeyboardTypesKey =>
      _kCFUserNotificationKeyboardTypesKey.value;

  set kCFUserNotificationKeyboardTypesKey(CFStringRef value) =>
      _kCFUserNotificationKeyboardTypesKey.value = value;

  int CFXMLNodeGetTypeID() {
    return _CFXMLNodeGetTypeID();
  }

  late final _CFXMLNodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLNodeGetTypeID');
  late final _CFXMLNodeGetTypeID =
      _CFXMLNodeGetTypeIDPtr.asFunction<int Function()>();

  CFXMLNodeRef CFXMLNodeCreate(
    CFAllocatorRef alloc,
    int xmlType,
    CFStringRef dataString,
    ffi.Pointer<ffi.Void> additionalInfoPtr,
    int version,
  ) {
    return _CFXMLNodeCreate(
      alloc,
      xmlType,
      dataString,
      additionalInfoPtr,
      version,
    );
  }

  late final _CFXMLNodeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(CFAllocatorRef, ffi.Int32, CFStringRef,
              ffi.Pointer<ffi.Void>, CFIndex)>>('CFXMLNodeCreate');
  late final _CFXMLNodeCreate = _CFXMLNodeCreatePtr.asFunction<
      CFXMLNodeRef Function(
          CFAllocatorRef, int, CFStringRef, ffi.Pointer<ffi.Void>, int)>();

  CFXMLNodeRef CFXMLNodeCreateCopy(
    CFAllocatorRef alloc,
    CFXMLNodeRef origNode,
  ) {
    return _CFXMLNodeCreateCopy(
      alloc,
      origNode,
    );
  }

  late final _CFXMLNodeCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLNodeCreateCopy');
  late final _CFXMLNodeCreateCopy = _CFXMLNodeCreateCopyPtr.asFunction<
      CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  int CFXMLNodeGetTypeCode(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetTypeCode(
      node,
    );
  }

  late final _CFXMLNodeGetTypeCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetTypeCode');
  late final _CFXMLNodeGetTypeCode =
      _CFXMLNodeGetTypeCodePtr.asFunction<int Function(CFXMLNodeRef)>();

  CFStringRef CFXMLNodeGetString(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetString(
      node,
    );
  }

  late final _CFXMLNodeGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetString');
  late final _CFXMLNodeGetString =
      _CFXMLNodeGetStringPtr.asFunction<CFStringRef Function(CFXMLNodeRef)>();

  ffi.Pointer<ffi.Void> CFXMLNodeGetInfoPtr(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetInfoPtr(
      node,
    );
  }

  late final _CFXMLNodeGetInfoPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetInfoPtr');
  late final _CFXMLNodeGetInfoPtr = _CFXMLNodeGetInfoPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>();

  int CFXMLNodeGetVersion(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetVersion(
      node,
    );
  }

  late final _CFXMLNodeGetVersionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetVersion');
  late final _CFXMLNodeGetVersion =
      _CFXMLNodeGetVersionPtr.asFunction<int Function(CFXMLNodeRef)>();

  CFXMLTreeRef CFXMLTreeCreateWithNode(
    CFAllocatorRef allocator,
    CFXMLNodeRef node,
  ) {
    return _CFXMLTreeCreateWithNode(
      allocator,
      node,
    );
  }

  late final _CFXMLTreeCreateWithNodePtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLTreeCreateWithNode');
  late final _CFXMLTreeCreateWithNode = _CFXMLTreeCreateWithNodePtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeRef CFXMLTreeGetNode(
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeGetNode(
      xmlTree,
    );
  }

  late final _CFXMLTreeGetNodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeRef Function(CFXMLTreeRef)>>(
          'CFXMLTreeGetNode');
  late final _CFXMLTreeGetNode =
      _CFXMLTreeGetNodePtr.asFunction<CFXMLNodeRef Function(CFXMLTreeRef)>();

  int CFXMLParserGetTypeID() {
    return _CFXMLParserGetTypeID();
  }

  late final _CFXMLParserGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLParserGetTypeID');
  late final _CFXMLParserGetTypeID =
      _CFXMLParserGetTypeIDPtr.asFunction<int Function()>();

  CFXMLParserRef CFXMLParserCreate(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreate(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLRef,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserCreate');
  late final _CFXMLParserCreate = _CFXMLParserCreatePtr.asFunction<
      CFXMLParserRef Function(
          CFAllocatorRef,
          CFDataRef,
          CFURLRef,
          int,
          int,
          ffi.Pointer<CFXMLParserCallBacks>,
          ffi.Pointer<CFXMLParserContext>)>();

  CFXMLParserRef CFXMLParserCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreateWithDataFromURLPtr = _lookup<
          ffi.NativeFunction<
              CFXMLParserRef Function(
                  CFAllocatorRef,
                  CFURLRef,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<CFXMLParserCallBacks>,
                  ffi.Pointer<CFXMLParserContext>)>>(
      'CFXMLParserCreateWithDataFromURL');
  late final _CFXMLParserCreateWithDataFromURL =
      _CFXMLParserCreateWithDataFromURLPtr.asFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFURLRef,
              int,
              int,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetContext(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserGetContext(
      parser,
      context,
    );
  }

  late final _CFXMLParserGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserGetContext');
  late final _CFXMLParserGetContext = _CFXMLParserGetContextPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetCallBacks(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
  ) {
    return _CFXMLParserGetCallBacks(
      parser,
      callBacks,
    );
  }

  late final _CFXMLParserGetCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserCallBacks>)>>('CFXMLParserGetCallBacks');
  late final _CFXMLParserGetCallBacks = _CFXMLParserGetCallBacksPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserCallBacks>)>();

  CFURLRef CFXMLParserGetSourceURL(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetSourceURL(
      parser,
    );
  }

  late final _CFXMLParserGetSourceURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFXMLParserRef)>>(
          'CFXMLParserGetSourceURL');
  late final _CFXMLParserGetSourceURL = _CFXMLParserGetSourceURLPtr.asFunction<
      CFURLRef Function(CFXMLParserRef)>();

  int CFXMLParserGetLocation(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLocation(
      parser,
    );
  }

  late final _CFXMLParserGetLocationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLocation');
  late final _CFXMLParserGetLocation =
      _CFXMLParserGetLocationPtr.asFunction<int Function(CFXMLParserRef)>();

  int CFXMLParserGetLineNumber(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLineNumber(
      parser,
    );
  }

  late final _CFXMLParserGetLineNumberPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLineNumber');
  late final _CFXMLParserGetLineNumber =
      _CFXMLParserGetLineNumberPtr.asFunction<int Function(CFXMLParserRef)>();

  ffi.Pointer<ffi.Void> CFXMLParserGetDocument(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetDocument(
      parser,
    );
  }

  late final _CFXMLParserGetDocumentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>>(
      'CFXMLParserGetDocument');
  late final _CFXMLParserGetDocument = _CFXMLParserGetDocumentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>();

  int CFXMLParserGetStatusCode(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetStatusCode(
      parser,
    );
  }

  late final _CFXMLParserGetStatusCodePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFXMLParserRef)>>(
          'CFXMLParserGetStatusCode');
  late final _CFXMLParserGetStatusCode =
      _CFXMLParserGetStatusCodePtr.asFunction<int Function(CFXMLParserRef)>();

  CFStringRef CFXMLParserCopyErrorDescription(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserCopyErrorDescription(
      parser,
    );
  }

  late final _CFXMLParserCopyErrorDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLParserRef)>>(
          'CFXMLParserCopyErrorDescription');
  late final _CFXMLParserCopyErrorDescription =
      _CFXMLParserCopyErrorDescriptionPtr.asFunction<
          CFStringRef Function(CFXMLParserRef)>();

  void CFXMLParserAbort(
    CFXMLParserRef parser,
    int errorCode,
    CFStringRef errorDescription,
  ) {
    return _CFXMLParserAbort(
      parser,
      errorCode,
      errorDescription,
    );
  }

  late final _CFXMLParserAbortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFXMLParserRef, ffi.Int32, CFStringRef)>>('CFXMLParserAbort');
  late final _CFXMLParserAbort = _CFXMLParserAbortPtr.asFunction<
      void Function(CFXMLParserRef, int, CFStringRef)>();

  int CFXMLParserParse(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserParse(
      parser,
    );
  }

  late final _CFXMLParserParsePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFXMLParserRef)>>(
          'CFXMLParserParse');
  late final _CFXMLParserParse =
      _CFXMLParserParsePtr.asFunction<int Function(CFXMLParserRef)>();

  CFXMLTreeRef CFXMLTreeCreateFromData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateFromData(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
              CFOptionFlags, CFIndex)>>('CFXMLTreeCreateFromData');
  late final _CFXMLTreeCreateFromData = _CFXMLTreeCreateFromDataPtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int)>();

  CFXMLTreeRef CFXMLTreeCreateFromDataWithError(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFDictionaryRef> errorDict,
  ) {
    return _CFXMLTreeCreateFromDataWithError(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      errorDict,
    );
  }

  late final _CFXMLTreeCreateFromDataWithErrorPtr = _lookup<
          ffi.NativeFunction<
              CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
                  CFOptionFlags, CFIndex, ffi.Pointer<CFDictionaryRef>)>>(
      'CFXMLTreeCreateFromDataWithError');
  late final _CFXMLTreeCreateFromDataWithError =
      _CFXMLTreeCreateFromDataWithErrorPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int,
              ffi.Pointer<CFDictionaryRef>)>();

  CFXMLTreeRef CFXMLTreeCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateWithDataFromURLPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFIndex)>>('CFXMLTreeCreateWithDataFromURL');
  late final _CFXMLTreeCreateWithDataFromURL =
      _CFXMLTreeCreateWithDataFromURLPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFDataRef CFXMLTreeCreateXMLData(
    CFAllocatorRef allocator,
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeCreateXMLData(
      allocator,
      xmlTree,
    );
  }

  late final _CFXMLTreeCreateXMLDataPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>>(
      'CFXMLTreeCreateXMLData');
  late final _CFXMLTreeCreateXMLData = _CFXMLTreeCreateXMLDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>();

  CFStringRef CFXMLCreateStringByEscapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByEscapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByEscapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByEscapingEntities');
  late final _CFXMLCreateStringByEscapingEntities =
      _CFXMLCreateStringByEscapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFStringRef CFXMLCreateStringByUnescapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByUnescapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByUnescapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByUnescapingEntities');
  late final _CFXMLCreateStringByUnescapingEntities =
      _CFXMLCreateStringByUnescapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorDescription =
      _lookup<CFStringRef>('kCFXMLTreeErrorDescription');

  CFStringRef get kCFXMLTreeErrorDescription =>
      _kCFXMLTreeErrorDescription.value;

  set kCFXMLTreeErrorDescription(CFStringRef value) =>
      _kCFXMLTreeErrorDescription.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLineNumber =
      _lookup<CFStringRef>('kCFXMLTreeErrorLineNumber');

  CFStringRef get kCFXMLTreeErrorLineNumber => _kCFXMLTreeErrorLineNumber.value;

  set kCFXMLTreeErrorLineNumber(CFStringRef value) =>
      _kCFXMLTreeErrorLineNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLocation =
      _lookup<CFStringRef>('kCFXMLTreeErrorLocation');

  CFStringRef get kCFXMLTreeErrorLocation => _kCFXMLTreeErrorLocation.value;

  set kCFXMLTreeErrorLocation(CFStringRef value) =>
      _kCFXMLTreeErrorLocation.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorStatusCode =
      _lookup<CFStringRef>('kCFXMLTreeErrorStatusCode');

  CFStringRef get kCFXMLTreeErrorStatusCode => _kCFXMLTreeErrorStatusCode.value;

  set kCFXMLTreeErrorStatusCode(CFStringRef value) =>
      _kCFXMLTreeErrorStatusCode.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeTitle =
      _lookup<CFStringRef>('kSecPropertyTypeTitle');

  CFStringRef get kSecPropertyTypeTitle => _kSecPropertyTypeTitle.value;

  set kSecPropertyTypeTitle(CFStringRef value) =>
      _kSecPropertyTypeTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeError =
      _lookup<CFStringRef>('kSecPropertyTypeError');

  CFStringRef get kSecPropertyTypeError => _kSecPropertyTypeError.value;

  set kSecPropertyTypeError(CFStringRef value) =>
      _kSecPropertyTypeError.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustEvaluationDate =
      _lookup<CFStringRef>('kSecTrustEvaluationDate');

  CFStringRef get kSecTrustEvaluationDate => _kSecTrustEvaluationDate.value;

  set kSecTrustEvaluationDate(CFStringRef value) =>
      _kSecTrustEvaluationDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustExtendedValidation =
      _lookup<CFStringRef>('kSecTrustExtendedValidation');

  CFStringRef get kSecTrustExtendedValidation =>
      _kSecTrustExtendedValidation.value;

  set kSecTrustExtendedValidation(CFStringRef value) =>
      _kSecTrustExtendedValidation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustOrganizationName =
      _lookup<CFStringRef>('kSecTrustOrganizationName');

  CFStringRef get kSecTrustOrganizationName => _kSecTrustOrganizationName.value;

  set kSecTrustOrganizationName(CFStringRef value) =>
      _kSecTrustOrganizationName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustResultValue =
      _lookup<CFStringRef>('kSecTrustResultValue');

  CFStringRef get kSecTrustResultValue => _kSecTrustResultValue.value;

  set kSecTrustResultValue(CFStringRef value) =>
      _kSecTrustResultValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationChecked =
      _lookup<CFStringRef>('kSecTrustRevocationChecked');

  CFStringRef get kSecTrustRevocationChecked =>
      _kSecTrustRevocationChecked.value;

  set kSecTrustRevocationChecked(CFStringRef value) =>
      _kSecTrustRevocationChecked.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationValidUntilDate =
      _lookup<CFStringRef>('kSecTrustRevocationValidUntilDate');

  CFStringRef get kSecTrustRevocationValidUntilDate =>
      _kSecTrustRevocationValidUntilDate.value;

  set kSecTrustRevocationValidUntilDate(CFStringRef value) =>
      _kSecTrustRevocationValidUntilDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustCertificateTransparency =
      _lookup<CFStringRef>('kSecTrustCertificateTransparency');

  CFStringRef get kSecTrustCertificateTransparency =>
      _kSecTrustCertificateTransparency.value;

  set kSecTrustCertificateTransparency(CFStringRef value) =>
      _kSecTrustCertificateTransparency.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecTrustCertificateTransparencyWhiteList =
      _lookup<CFStringRef>('kSecTrustCertificateTransparencyWhiteList');

  CFStringRef get kSecTrustCertificateTransparencyWhiteList =>
      _kSecTrustCertificateTransparencyWhiteList.value;

  set kSecTrustCertificateTransparencyWhiteList(CFStringRef value) =>
      _kSecTrustCertificateTransparencyWhiteList.value = value;

  int SecTrustGetTypeID() {
    return _SecTrustGetTypeID();
  }

  late final _SecTrustGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecTrustGetTypeID');
  late final _SecTrustGetTypeID =
      _SecTrustGetTypeIDPtr.asFunction<int Function()>();

  int SecTrustCreateWithCertificates(
    CFTypeRef certificates,
    CFTypeRef policies,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SecTrustCreateWithCertificates(
      certificates,
      policies,
      trust,
    );
  }

  late final _SecTrustCreateWithCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFTypeRef, CFTypeRef,
              ffi.Pointer<SecTrustRef>)>>('SecTrustCreateWithCertificates');
  late final _SecTrustCreateWithCertificates =
      _SecTrustCreateWithCertificatesPtr.asFunction<
          int Function(CFTypeRef, CFTypeRef, ffi.Pointer<SecTrustRef>)>();

  int SecTrustSetPolicies(
    SecTrustRef trust,
    CFTypeRef policies,
  ) {
    return _SecTrustSetPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustSetPoliciesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetPolicies');
  late final _SecTrustSetPolicies = _SecTrustSetPoliciesPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustCopyPolicies(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> policies,
  ) {
    return _SecTrustCopyPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustCopyPoliciesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<CFArrayRef>)>>('SecTrustCopyPolicies');
  late final _SecTrustCopyPolicies = _SecTrustCopyPoliciesPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetNetworkFetchAllowed(
    SecTrustRef trust,
    int allowFetch,
  ) {
    return _SecTrustSetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustSetNetworkFetchAllowedPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetNetworkFetchAllowed');
  late final _SecTrustSetNetworkFetchAllowed =
      _SecTrustSetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustGetNetworkFetchAllowed(
    SecTrustRef trust,
    ffi.Pointer<Boolean> allowFetch,
  ) {
    return _SecTrustGetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustGetNetworkFetchAllowedPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<Boolean>)>>('SecTrustGetNetworkFetchAllowed');
  late final _SecTrustGetNetworkFetchAllowed =
      _SecTrustGetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<Boolean>)>();

  int SecTrustSetAnchorCertificates(
    SecTrustRef trust,
    CFArrayRef anchorCertificates,
  ) {
    return _SecTrustSetAnchorCertificates(
      trust,
      anchorCertificates,
    );
  }

  late final _SecTrustSetAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetAnchorCertificates');
  late final _SecTrustSetAnchorCertificates = _SecTrustSetAnchorCertificatesPtr
      .asFunction<int Function(SecTrustRef, CFArrayRef)>();

  int SecTrustSetAnchorCertificatesOnly(
    SecTrustRef trust,
    int anchorCertificatesOnly,
  ) {
    return _SecTrustSetAnchorCertificatesOnly(
      trust,
      anchorCertificatesOnly,
    );
  }

  late final _SecTrustSetAnchorCertificatesOnlyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetAnchorCertificatesOnly');
  late final _SecTrustSetAnchorCertificatesOnly =
      _SecTrustSetAnchorCertificatesOnlyPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustCopyCustomAnchorCertificates(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyCustomAnchorCertificates(
      trust,
      anchors,
    );
  }

  late final _SecTrustCopyCustomAnchorCertificatesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>>(
      'SecTrustCopyCustomAnchorCertificates');
  late final _SecTrustCopyCustomAnchorCertificates =
      _SecTrustCopyCustomAnchorCertificatesPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetVerifyDate(
    SecTrustRef trust,
    CFDateRef verifyDate,
  ) {
    return _SecTrustSetVerifyDate(
      trust,
      verifyDate,
    );
  }

  late final _SecTrustSetVerifyDatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFDateRef)>>(
          'SecTrustSetVerifyDate');
  late final _SecTrustSetVerifyDate = _SecTrustSetVerifyDatePtr.asFunction<
      int Function(SecTrustRef, CFDateRef)>();

  double SecTrustGetVerifyTime(
    SecTrustRef trust,
  ) {
    return _SecTrustGetVerifyTime(
      trust,
    );
  }

  late final _SecTrustGetVerifyTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(SecTrustRef)>>(
          'SecTrustGetVerifyTime');
  late final _SecTrustGetVerifyTime =
      _SecTrustGetVerifyTimePtr.asFunction<double Function(SecTrustRef)>();

  int SecTrustEvaluate(
    SecTrustRef trust,
    ffi.Pointer<ffi.Int32> result,
  ) {
    return _SecTrustEvaluate(
      trust,
      result,
    );
  }

  late final _SecTrustEvaluatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Int32>)>>('SecTrustEvaluate');
  late final _SecTrustEvaluate = _SecTrustEvaluatePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>)>();

  int SecTrustEvaluateAsync(
    SecTrustRef trust,
    dispatch_queue_t queue,
    SecTrustCallback result,
  ) {
    return _SecTrustEvaluateAsync(
      trust,
      queue,
      result,
    );
  }

  late final _SecTrustEvaluateAsyncPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustCallback)>>('SecTrustEvaluateAsync');
  late final _SecTrustEvaluateAsync = _SecTrustEvaluateAsyncPtr.asFunction<
      int Function(SecTrustRef, dispatch_queue_t, SecTrustCallback)>();

  bool SecTrustEvaluateWithError(
    SecTrustRef trust,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecTrustEvaluateWithError(
          trust,
          error,
        ) !=
        0;
  }

  late final _SecTrustEvaluateWithErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(SecTrustRef,
              ffi.Pointer<CFErrorRef>)>>('SecTrustEvaluateWithError');
  late final _SecTrustEvaluateWithError = _SecTrustEvaluateWithErrorPtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<CFErrorRef>)>();

  int SecTrustEvaluateAsyncWithError(
    SecTrustRef trust,
    dispatch_queue_t queue,
    SecTrustWithErrorCallback result,
  ) {
    return _SecTrustEvaluateAsyncWithError(
      trust,
      queue,
      result,
    );
  }

  late final _SecTrustEvaluateAsyncWithErrorPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustWithErrorCallback)>>('SecTrustEvaluateAsyncWithError');
  late final _SecTrustEvaluateAsyncWithError =
      _SecTrustEvaluateAsyncWithErrorPtr.asFunction<
          int Function(
              SecTrustRef, dispatch_queue_t, SecTrustWithErrorCallback)>();

  int SecTrustGetTrustResult(
    SecTrustRef trust,
    ffi.Pointer<ffi.Int32> result,
  ) {
    return _SecTrustGetTrustResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetTrustResultPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Int32>)>>('SecTrustGetTrustResult');
  late final _SecTrustGetTrustResult = _SecTrustGetTrustResultPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>)>();

  SecKeyRef SecTrustCopyPublicKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyPublicKey(
      trust,
    );
  }

  late final _SecTrustCopyPublicKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyPublicKey');
  late final _SecTrustCopyPublicKey =
      _SecTrustCopyPublicKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  SecKeyRef SecTrustCopyKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyKey(
      trust,
    );
  }

  late final _SecTrustCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyKey');
  late final _SecTrustCopyKey =
      _SecTrustCopyKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  int SecTrustGetCertificateCount(
    SecTrustRef trust,
  ) {
    return _SecTrustGetCertificateCount(
      trust,
    );
  }

  late final _SecTrustGetCertificateCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(SecTrustRef)>>(
          'SecTrustGetCertificateCount');
  late final _SecTrustGetCertificateCount =
      _SecTrustGetCertificateCountPtr.asFunction<int Function(SecTrustRef)>();

  SecCertificateRef SecTrustGetCertificateAtIndex(
    SecTrustRef trust,
    int ix,
  ) {
    return _SecTrustGetCertificateAtIndex(
      trust,
      ix,
    );
  }

  late final _SecTrustGetCertificateAtIndexPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(SecTrustRef, CFIndex)>>(
      'SecTrustGetCertificateAtIndex');
  late final _SecTrustGetCertificateAtIndex = _SecTrustGetCertificateAtIndexPtr
      .asFunction<SecCertificateRef Function(SecTrustRef, int)>();

  CFDataRef SecTrustCopyExceptions(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyExceptions(
      trust,
    );
  }

  late final _SecTrustCopyExceptionsPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecTrustRef)>>(
          'SecTrustCopyExceptions');
  late final _SecTrustCopyExceptions =
      _SecTrustCopyExceptionsPtr.asFunction<CFDataRef Function(SecTrustRef)>();

  bool SecTrustSetExceptions(
    SecTrustRef trust,
    CFDataRef exceptions,
  ) {
    return _SecTrustSetExceptions(
          trust,
          exceptions,
        ) !=
        0;
  }

  late final _SecTrustSetExceptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(SecTrustRef, CFDataRef)>>(
          'SecTrustSetExceptions');
  late final _SecTrustSetExceptions = _SecTrustSetExceptionsPtr.asFunction<
      int Function(SecTrustRef, CFDataRef)>();

  CFArrayRef SecTrustCopyProperties(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyProperties(
      trust,
    );
  }

  late final _SecTrustCopyPropertiesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyProperties');
  late final _SecTrustCopyProperties =
      _SecTrustCopyPropertiesPtr.asFunction<CFArrayRef Function(SecTrustRef)>();

  CFDictionaryRef SecTrustCopyResult(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyResult(
      trust,
    );
  }

  late final _SecTrustCopyResultPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(SecTrustRef)>>(
          'SecTrustCopyResult');
  late final _SecTrustCopyResult = _SecTrustCopyResultPtr.asFunction<
      CFDictionaryRef Function(SecTrustRef)>();

  int SecTrustSetOCSPResponse(
    SecTrustRef trust,
    CFTypeRef responseData,
  ) {
    return _SecTrustSetOCSPResponse(
      trust,
      responseData,
    );
  }

  late final _SecTrustSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetOCSPResponse');
  late final _SecTrustSetOCSPResponse = _SecTrustSetOCSPResponsePtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustSetSignedCertificateTimestamps(
    SecTrustRef trust,
    CFArrayRef sctArray,
  ) {
    return _SecTrustSetSignedCertificateTimestamps(
      trust,
      sctArray,
    );
  }

  late final _SecTrustSetSignedCertificateTimestampsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetSignedCertificateTimestamps');
  late final _SecTrustSetSignedCertificateTimestamps =
      _SecTrustSetSignedCertificateTimestampsPtr.asFunction<
          int Function(SecTrustRef, CFArrayRef)>();

  CFArrayRef SecTrustCopyCertificateChain(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyCertificateChain(
      trust,
    );
  }

  late final _SecTrustCopyCertificateChainPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyCertificateChain');
  late final _SecTrustCopyCertificateChain = _SecTrustCopyCertificateChainPtr
      .asFunction<CFArrayRef Function(SecTrustRef)>();

  late final ffi.Pointer<CSSM_GUID> _gGuidCssm =
      _lookup<CSSM_GUID>('gGuidCssm');

  CSSM_GUID get gGuidCssm => _gGuidCssm.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleFileDL =
      _lookup<CSSM_GUID>('gGuidAppleFileDL');

  CSSM_GUID get gGuidAppleFileDL => _gGuidAppleFileDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSP =
      _lookup<CSSM_GUID>('gGuidAppleCSP');

  CSSM_GUID get gGuidAppleCSP => _gGuidAppleCSP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleCSPDL');

  CSSM_GUID get gGuidAppleCSPDL => _gGuidAppleCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509CL =
      _lookup<CSSM_GUID>('gGuidAppleX509CL');

  CSSM_GUID get gGuidAppleX509CL => _gGuidAppleX509CL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509TP =
      _lookup<CSSM_GUID>('gGuidAppleX509TP');

  CSSM_GUID get gGuidAppleX509TP => _gGuidAppleX509TP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleLDAPDL =
      _lookup<CSSM_GUID>('gGuidAppleLDAPDL');

  CSSM_GUID get gGuidAppleLDAPDL => _gGuidAppleLDAPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacTP =
      _lookup<CSSM_GUID>('gGuidAppleDotMacTP');

  CSSM_GUID get gGuidAppleDotMacTP => _gGuidAppleDotMacTP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleSdCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleSdCSPDL');

  CSSM_GUID get gGuidAppleSdCSPDL => _gGuidAppleSdCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacDL =
      _lookup<CSSM_GUID>('gGuidAppleDotMacDL');

  CSSM_GUID get gGuidAppleDotMacDL => _gGuidAppleDotMacDL.ref;

  void cssmPerror(
    ffi.Pointer<pkg_ffi.Char> how,
    int error,
  ) {
    return _cssmPerror(
      how,
      error,
    );
  }

  late final _cssmPerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Char>, CSSM_RETURN)>>('cssmPerror');
  late final _cssmPerror = _cssmPerrorPtr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  bool cssmOidToAlg(
    ffi.Pointer<SecAsn1Oid> oid,
    ffi.Pointer<CSSM_ALGORITHMS> alg,
  ) {
    return _cssmOidToAlg(
          oid,
          alg,
        ) !=
        0;
  }

  late final _cssmOidToAlgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<SecAsn1Oid>,
              ffi.Pointer<CSSM_ALGORITHMS>)>>('cssmOidToAlg');
  late final _cssmOidToAlg = _cssmOidToAlgPtr.asFunction<
      int Function(ffi.Pointer<SecAsn1Oid>, ffi.Pointer<CSSM_ALGORITHMS>)>();

  ffi.Pointer<SecAsn1Oid> cssmAlgToOid(
    int algId,
  ) {
    return _cssmAlgToOid(
      algId,
    );
  }

  late final _cssmAlgToOidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SecAsn1Oid> Function(CSSM_ALGORITHMS)>>('cssmAlgToOid');
  late final _cssmAlgToOid =
      _cssmAlgToOidPtr.asFunction<ffi.Pointer<SecAsn1Oid> Function(int)>();

  int SecTrustSetOptions(
    SecTrustRef trustRef,
    int options,
  ) {
    return _SecTrustSetOptions(
      trustRef,
      options,
    );
  }

  late final _SecTrustSetOptionsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, ffi.Int32)>>(
          'SecTrustSetOptions');
  late final _SecTrustSetOptions =
      _SecTrustSetOptionsPtr.asFunction<int Function(SecTrustRef, int)>();

  int SecTrustSetParameters(
    SecTrustRef trustRef,
    int action,
    CFDataRef actionData,
  ) {
    return _SecTrustSetParameters(
      trustRef,
      action,
      actionData,
    );
  }

  late final _SecTrustSetParametersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, CSSM_TP_ACTION,
              CFDataRef)>>('SecTrustSetParameters');
  late final _SecTrustSetParameters = _SecTrustSetParametersPtr.asFunction<
      int Function(SecTrustRef, int, CFDataRef)>();

  int SecTrustSetKeychains(
    SecTrustRef trust,
    CFTypeRef keychainOrArray,
  ) {
    return _SecTrustSetKeychains(
      trust,
      keychainOrArray,
    );
  }

  late final _SecTrustSetKeychainsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetKeychains');
  late final _SecTrustSetKeychains = _SecTrustSetKeychainsPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustGetResult(
    SecTrustRef trustRef,
    ffi.Pointer<ffi.Int32> result,
    ffi.Pointer<CFArrayRef> certChain,
    ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>> statusChain,
  ) {
    return _SecTrustGetResult(
      trustRef,
      result,
      certChain,
      statusChain,
    );
  }

  late final _SecTrustGetResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustRef,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<CFArrayRef>,
                  ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>>(
      'SecTrustGetResult');
  late final _SecTrustGetResult = _SecTrustGetResultPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<CFArrayRef>,
          ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>();

  int SecTrustGetCssmResult(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR> result,
  ) {
    return _SecTrustGetCssmResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetCssmResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef,
                  ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>>(
      'SecTrustGetCssmResult');
  late final _SecTrustGetCssmResult = _SecTrustGetCssmResultPtr.asFunction<
      int Function(
          SecTrustRef, ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>();

  int SecTrustGetCssmResultCode(
    SecTrustRef trust,
    ffi.Pointer<OSStatus> resultCode,
  ) {
    return _SecTrustGetCssmResultCode(
      trust,
      resultCode,
    );
  }

  late final _SecTrustGetCssmResultCodePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<OSStatus>)>>('SecTrustGetCssmResultCode');
  late final _SecTrustGetCssmResultCode = _SecTrustGetCssmResultCodePtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<OSStatus>)>();

  int SecTrustGetTPHandle(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_HANDLE> handle,
  ) {
    return _SecTrustGetTPHandle(
      trust,
      handle,
    );
  }

  late final _SecTrustGetTPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<CSSM_TP_HANDLE>)>>('SecTrustGetTPHandle');
  late final _SecTrustGetTPHandle = _SecTrustGetTPHandlePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CSSM_TP_HANDLE>)>();

  int SecTrustCopyAnchorCertificates(
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyAnchorCertificates(
      anchors,
    );
  }

  late final _SecTrustCopyAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(ffi.Pointer<CFArrayRef>)>>(
          'SecTrustCopyAnchorCertificates');
  late final _SecTrustCopyAnchorCertificates =
      _SecTrustCopyAnchorCertificatesPtr.asFunction<
          int Function(ffi.Pointer<CFArrayRef>)>();

  int SecCertificateGetTypeID() {
    return _SecCertificateGetTypeID();
  }

  late final _SecCertificateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'SecCertificateGetTypeID');
  late final _SecCertificateGetTypeID =
      _SecCertificateGetTypeIDPtr.asFunction<int Function()>();

  SecCertificateRef SecCertificateCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
  ) {
    return _SecCertificateCreateWithData(
      allocator,
      data,
    );
  }

  late final _SecCertificateCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFAllocatorRef, CFDataRef)>>('SecCertificateCreateWithData');
  late final _SecCertificateCreateWithData = _SecCertificateCreateWithDataPtr
      .asFunction<SecCertificateRef Function(CFAllocatorRef, CFDataRef)>();

  CFDataRef SecCertificateCopyData(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyData(
      certificate,
    );
  }

  late final _SecCertificateCopyDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyData');
  late final _SecCertificateCopyData = _SecCertificateCopyDataPtr.asFunction<
      CFDataRef Function(SecCertificateRef)>();

  CFStringRef SecCertificateCopySubjectSummary(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopySubjectSummary(
      certificate,
    );
  }

  late final _SecCertificateCopySubjectSummaryPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(SecCertificateRef)>>(
          'SecCertificateCopySubjectSummary');
  late final _SecCertificateCopySubjectSummary =
      _SecCertificateCopySubjectSummaryPtr.asFunction<
          CFStringRef Function(SecCertificateRef)>();

  int SecCertificateCopyCommonName(
    SecCertificateRef certificate,
    ffi.Pointer<CFStringRef> commonName,
  ) {
    return _SecCertificateCopyCommonName(
      certificate,
      commonName,
    );
  }

  late final _SecCertificateCopyCommonNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFStringRef>)>>('SecCertificateCopyCommonName');
  late final _SecCertificateCopyCommonName = _SecCertificateCopyCommonNamePtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<CFStringRef>)>();

  int SecCertificateCopyEmailAddresses(
    SecCertificateRef certificate,
    ffi.Pointer<CFArrayRef> emailAddresses,
  ) {
    return _SecCertificateCopyEmailAddresses(
      certificate,
      emailAddresses,
    );
  }

  late final _SecCertificateCopyEmailAddressesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFArrayRef>)>>('SecCertificateCopyEmailAddresses');
  late final _SecCertificateCopyEmailAddresses =
      _SecCertificateCopyEmailAddressesPtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CFArrayRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedIssuerSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedIssuerSequence');
  late final _SecCertificateCopyNormalizedIssuerSequence =
      _SecCertificateCopyNormalizedIssuerSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  CFDataRef SecCertificateCopyNormalizedSubjectSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedSubjectSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedSubjectSequence');
  late final _SecCertificateCopyNormalizedSubjectSequence =
      _SecCertificateCopyNormalizedSubjectSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  SecKeyRef SecCertificateCopyKey(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyKey(
      certificate,
    );
  }

  late final _SecCertificateCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecCertificateRef)>>(
          'SecCertificateCopyKey');
  late final _SecCertificateCopyKey = _SecCertificateCopyKeyPtr.asFunction<
      SecKeyRef Function(SecCertificateRef)>();

  int SecCertificateCopyPublicKey(
    SecCertificateRef certificate,
    ffi.Pointer<SecKeyRef> key,
  ) {
    return _SecCertificateCopyPublicKey(
      certificate,
      key,
    );
  }

  late final _SecCertificateCopyPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<SecKeyRef>)>>('SecCertificateCopyPublicKey');
  late final _SecCertificateCopyPublicKey = _SecCertificateCopyPublicKeyPtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<SecKeyRef>)>();

  CFDataRef SecCertificateCopySerialNumberData(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumberData(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumberData');
  late final _SecCertificateCopySerialNumberData =
      _SecCertificateCopySerialNumberDataPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopySerialNumber(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumber(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumber');
  late final _SecCertificateCopySerialNumber =
      _SecCertificateCopySerialNumberPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecCertificateCreateFromData(
    ffi.Pointer<SecAsn1Item> data,
    int type,
    int encoding,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCreateFromData(
      data,
      type,
      encoding,
      certificate,
    );
  }

  late final _SecCertificateCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<SecAsn1Item>,
              CSSM_CERT_TYPE,
              CSSM_CERT_ENCODING,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCreateFromData');
  late final _SecCertificateCreateFromData =
      _SecCertificateCreateFromDataPtr.asFunction<
          int Function(ffi.Pointer<SecAsn1Item>, int, int,
              ffi.Pointer<SecCertificateRef>)>();

  int SecCertificateAddToKeychain(
    SecCertificateRef certificate,
    SecKeychainRef keychain,
  ) {
    return _SecCertificateAddToKeychain(
      certificate,
      keychain,
    );
  }

  late final _SecCertificateAddToKeychainPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              SecKeychainRef)>>('SecCertificateAddToKeychain');
  late final _SecCertificateAddToKeychain = _SecCertificateAddToKeychainPtr
      .asFunction<int Function(SecCertificateRef, SecKeychainRef)>();

  int SecCertificateGetData(
    SecCertificateRef certificate,
    CSSM_DATA_PTR data,
  ) {
    return _SecCertificateGetData(
      certificate,
      data,
    );
  }

  late final _SecCertificateGetDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCertificateRef, CSSM_DATA_PTR)>>('SecCertificateGetData');
  late final _SecCertificateGetData = _SecCertificateGetDataPtr.asFunction<
      int Function(SecCertificateRef, CSSM_DATA_PTR)>();

  int SecCertificateGetType(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CERT_TYPE> certificateType,
  ) {
    return _SecCertificateGetType(
      certificate,
      certificateType,
    );
  }

  late final _SecCertificateGetTypePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CERT_TYPE>)>>('SecCertificateGetType');
  late final _SecCertificateGetType = _SecCertificateGetTypePtr.asFunction<
      int Function(SecCertificateRef, ffi.Pointer<CSSM_CERT_TYPE>)>();

  int SecCertificateGetSubject(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> subject,
  ) {
    return _SecCertificateGetSubject(
      certificate,
      subject,
    );
  }

  late final _SecCertificateGetSubjectPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetSubject');
  late final _SecCertificateGetSubject =
      _SecCertificateGetSubjectPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetIssuer(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> issuer,
  ) {
    return _SecCertificateGetIssuer(
      certificate,
      issuer,
    );
  }

  late final _SecCertificateGetIssuerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetIssuer');
  late final _SecCertificateGetIssuer = _SecCertificateGetIssuerPtr.asFunction<
      int Function(
          SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetCLHandle(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CL_HANDLE> clHandle,
  ) {
    return _SecCertificateGetCLHandle(
      certificate,
      clHandle,
    );
  }

  late final _SecCertificateGetCLHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CL_HANDLE>)>>('SecCertificateGetCLHandle');
  late final _SecCertificateGetCLHandle =
      _SecCertificateGetCLHandlePtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CSSM_CL_HANDLE>)>();

  int SecCertificateGetAlgorithmID(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<SecAsn1AlgId>> algid,
  ) {
    return _SecCertificateGetAlgorithmID(
      certificate,
      algid,
    );
  }

  late final _SecCertificateGetAlgorithmIDPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>>(
      'SecCertificateGetAlgorithmID');
  late final _SecCertificateGetAlgorithmID =
      _SecCertificateGetAlgorithmIDPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>();

  int SecCertificateCopyPreference(
    CFStringRef name,
    int keyUsage,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCopyPreference(
      name,
      keyUsage,
      certificate,
    );
  }

  late final _SecCertificateCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, uint32,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCopyPreference');
  late final _SecCertificateCopyPreference =
      _SecCertificateCopyPreferencePtr.asFunction<
          int Function(CFStringRef, int, ffi.Pointer<SecCertificateRef>)>();

  SecCertificateRef SecCertificateCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateCopyPreferred(
      name,
      keyUsage,
    );
  }

  late final _SecCertificateCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFStringRef, CFArrayRef)>>('SecCertificateCopyPreferred');
  late final _SecCertificateCopyPreferred = _SecCertificateCopyPreferredPtr
      .asFunction<SecCertificateRef Function(CFStringRef, CFArrayRef)>();

  int SecCertificateSetPreference(
    SecCertificateRef certificate,
    CFStringRef name,
    int keyUsage,
    CFDateRef date,
  ) {
    return _SecCertificateSetPreference(
      certificate,
      name,
      keyUsage,
      date,
    );
  }

  late final _SecCertificateSetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef, uint32,
              CFDateRef)>>('SecCertificateSetPreference');
  late final _SecCertificateSetPreference =
      _SecCertificateSetPreferencePtr.asFunction<
          int Function(SecCertificateRef, CFStringRef, int, CFDateRef)>();

  int SecCertificateSetPreferred(
    SecCertificateRef certificate,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateSetPreferred(
      certificate,
      name,
      keyUsage,
    );
  }

  late final _SecCertificateSetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef,
              CFArrayRef)>>('SecCertificateSetPreferred');
  late final _SecCertificateSetPreferred = _SecCertificateSetPreferredPtr
      .asFunction<int Function(SecCertificateRef, CFStringRef, CFArrayRef)>();

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyType =
      _lookup<CFStringRef>('kSecPropertyKeyType');

  CFStringRef get kSecPropertyKeyType => _kSecPropertyKeyType.value;

  set kSecPropertyKeyType(CFStringRef value) =>
      _kSecPropertyKeyType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLabel');

  CFStringRef get kSecPropertyKeyLabel => _kSecPropertyKeyLabel.value;

  set kSecPropertyKeyLabel(CFStringRef value) =>
      _kSecPropertyKeyLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLocalizedLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLocalizedLabel');

  CFStringRef get kSecPropertyKeyLocalizedLabel =>
      _kSecPropertyKeyLocalizedLabel.value;

  set kSecPropertyKeyLocalizedLabel(CFStringRef value) =>
      _kSecPropertyKeyLocalizedLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyValue =
      _lookup<CFStringRef>('kSecPropertyKeyValue');

  CFStringRef get kSecPropertyKeyValue => _kSecPropertyKeyValue.value;

  set kSecPropertyKeyValue(CFStringRef value) =>
      _kSecPropertyKeyValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeWarning =
      _lookup<CFStringRef>('kSecPropertyTypeWarning');

  CFStringRef get kSecPropertyTypeWarning => _kSecPropertyTypeWarning.value;

  set kSecPropertyTypeWarning(CFStringRef value) =>
      _kSecPropertyTypeWarning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSuccess =
      _lookup<CFStringRef>('kSecPropertyTypeSuccess');

  CFStringRef get kSecPropertyTypeSuccess => _kSecPropertyTypeSuccess.value;

  set kSecPropertyTypeSuccess(CFStringRef value) =>
      _kSecPropertyTypeSuccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSection =
      _lookup<CFStringRef>('kSecPropertyTypeSection');

  CFStringRef get kSecPropertyTypeSection => _kSecPropertyTypeSection.value;

  set kSecPropertyTypeSection(CFStringRef value) =>
      _kSecPropertyTypeSection.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeData =
      _lookup<CFStringRef>('kSecPropertyTypeData');

  CFStringRef get kSecPropertyTypeData => _kSecPropertyTypeData.value;

  set kSecPropertyTypeData(CFStringRef value) =>
      _kSecPropertyTypeData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeString =
      _lookup<CFStringRef>('kSecPropertyTypeString');

  CFStringRef get kSecPropertyTypeString => _kSecPropertyTypeString.value;

  set kSecPropertyTypeString(CFStringRef value) =>
      _kSecPropertyTypeString.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeURL =
      _lookup<CFStringRef>('kSecPropertyTypeURL');

  CFStringRef get kSecPropertyTypeURL => _kSecPropertyTypeURL.value;

  set kSecPropertyTypeURL(CFStringRef value) =>
      _kSecPropertyTypeURL.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeDate =
      _lookup<CFStringRef>('kSecPropertyTypeDate');

  CFStringRef get kSecPropertyTypeDate => _kSecPropertyTypeDate.value;

  set kSecPropertyTypeDate(CFStringRef value) =>
      _kSecPropertyTypeDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeArray =
      _lookup<CFStringRef>('kSecPropertyTypeArray');

  CFStringRef get kSecPropertyTypeArray => _kSecPropertyTypeArray.value;

  set kSecPropertyTypeArray(CFStringRef value) =>
      _kSecPropertyTypeArray.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeNumber =
      _lookup<CFStringRef>('kSecPropertyTypeNumber');

  CFStringRef get kSecPropertyTypeNumber => _kSecPropertyTypeNumber.value;

  set kSecPropertyTypeNumber(CFStringRef value) =>
      _kSecPropertyTypeNumber.value = value;

  CFDictionaryRef SecCertificateCopyValues(
    SecCertificateRef certificate,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyValues(
      certificate,
      keys,
      error,
    );
  }

  late final _SecCertificateCopyValuesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(SecCertificateRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyValues');
  late final _SecCertificateCopyValues =
      _SecCertificateCopyValuesPtr.asFunction<
          CFDictionaryRef Function(
              SecCertificateRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyLongDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyLongDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyLongDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyLongDescription');
  late final _SecCertificateCopyLongDescription =
      _SecCertificateCopyLongDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyShortDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyShortDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyShortDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyShortDescription');
  late final _SecCertificateCopyShortDescription =
      _SecCertificateCopyShortDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedIssuerContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedIssuerContent');
  late final _SecCertificateCopyNormalizedIssuerContent =
      _SecCertificateCopyNormalizedIssuerContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedSubjectContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedSubjectContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedSubjectContent');
  late final _SecCertificateCopyNormalizedSubjectContent =
      _SecCertificateCopyNormalizedSubjectContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecIdentityGetTypeID() {
    return _SecIdentityGetTypeID();
  }

  late final _SecIdentityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecIdentityGetTypeID');
  late final _SecIdentityGetTypeID =
      _SecIdentityGetTypeIDPtr.asFunction<int Function()>();

  int SecIdentityCreateWithCertificate(
    CFTypeRef keychainOrArray,
    SecCertificateRef certificateRef,
    ffi.Pointer<SecIdentityRef> identityRef,
  ) {
    return _SecIdentityCreateWithCertificate(
      keychainOrArray,
      certificateRef,
      identityRef,
    );
  }

  late final _SecIdentityCreateWithCertificatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>>(
      'SecIdentityCreateWithCertificate');
  late final _SecIdentityCreateWithCertificate =
      _SecIdentityCreateWithCertificatePtr.asFunction<
          int Function(
              CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>();

  int SecIdentityCopyCertificate(
    SecIdentityRef identityRef,
    ffi.Pointer<SecCertificateRef> certificateRef,
  ) {
    return _SecIdentityCopyCertificate(
      identityRef,
      certificateRef,
    );
  }

  late final _SecIdentityCopyCertificatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecCertificateRef>)>>('SecIdentityCopyCertificate');
  late final _SecIdentityCopyCertificate =
      _SecIdentityCopyCertificatePtr.asFunction<
          int Function(SecIdentityRef, ffi.Pointer<SecCertificateRef>)>();

  int SecIdentityCopyPrivateKey(
    SecIdentityRef identityRef,
    ffi.Pointer<SecKeyRef> privateKeyRef,
  ) {
    return _SecIdentityCopyPrivateKey(
      identityRef,
      privateKeyRef,
    );
  }

  late final _SecIdentityCopyPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecKeyRef>)>>('SecIdentityCopyPrivateKey');
  late final _SecIdentityCopyPrivateKey = _SecIdentityCopyPrivateKeyPtr
      .asFunction<int Function(SecIdentityRef, ffi.Pointer<SecKeyRef>)>();

  int SecIdentityCopyPreference(
    CFStringRef name,
    int keyUsage,
    CFArrayRef validIssuers,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentityCopyPreference(
      name,
      keyUsage,
      validIssuers,
      identity,
    );
  }

  late final _SecIdentityCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, CSSM_KEYUSE, CFArrayRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentityCopyPreference');
  late final _SecIdentityCopyPreference =
      _SecIdentityCopyPreferencePtr.asFunction<
          int Function(
              CFStringRef, int, CFArrayRef, ffi.Pointer<SecIdentityRef>)>();

  SecIdentityRef SecIdentityCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
    CFArrayRef validIssuers,
  ) {
    return _SecIdentityCopyPreferred(
      name,
      keyUsage,
      validIssuers,
    );
  }

  late final _SecIdentityCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef,
              CFArrayRef)>>('SecIdentityCopyPreferred');
  late final _SecIdentityCopyPreferred =
      _SecIdentityCopyPreferredPtr.asFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef, CFArrayRef)>();

  int SecIdentitySetPreference(
    SecIdentityRef identity,
    CFStringRef name,
    int keyUsage,
  ) {
    return _SecIdentitySetPreference(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CSSM_KEYUSE)>>('SecIdentitySetPreference');
  late final _SecIdentitySetPreference = _SecIdentitySetPreferencePtr
      .asFunction<int Function(SecIdentityRef, CFStringRef, int)>();

  int SecIdentitySetPreferred(
    SecIdentityRef identity,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecIdentitySetPreferred(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CFArrayRef)>>('SecIdentitySetPreferred');
  late final _SecIdentitySetPreferred = _SecIdentitySetPreferredPtr.asFunction<
      int Function(SecIdentityRef, CFStringRef, CFArrayRef)>();

  int SecIdentityCopySystemIdentity(
    CFStringRef domain,
    ffi.Pointer<SecIdentityRef> idRef,
    ffi.Pointer<CFStringRef> actualDomain,
  ) {
    return _SecIdentityCopySystemIdentity(
      domain,
      idRef,
      actualDomain,
    );
  }

  late final _SecIdentityCopySystemIdentityPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>>('SecIdentityCopySystemIdentity');
  late final _SecIdentityCopySystemIdentity =
      _SecIdentityCopySystemIdentityPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>();

  int SecIdentitySetSystemIdentity(
    CFStringRef domain,
    SecIdentityRef idRef,
  ) {
    return _SecIdentitySetSystemIdentity(
      domain,
      idRef,
    );
  }

  late final _SecIdentitySetSystemIdentityPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(CFStringRef, SecIdentityRef)>>(
      'SecIdentitySetSystemIdentity');
  late final _SecIdentitySetSystemIdentity = _SecIdentitySetSystemIdentityPtr
      .asFunction<int Function(CFStringRef, SecIdentityRef)>();

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainDefault =
      _lookup<CFStringRef>('kSecIdentityDomainDefault');

  CFStringRef get kSecIdentityDomainDefault => _kSecIdentityDomainDefault.value;

  set kSecIdentityDomainDefault(CFStringRef value) =>
      _kSecIdentityDomainDefault.value = value;

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainKerberosKDC =
      _lookup<CFStringRef>('kSecIdentityDomainKerberosKDC');

  CFStringRef get kSecIdentityDomainKerberosKDC =>
      _kSecIdentityDomainKerberosKDC.value;

  set kSecIdentityDomainKerberosKDC(CFStringRef value) =>
      _kSecIdentityDomainKerberosKDC.value = value;

  sec_trust_t sec_trust_create(
    SecTrustRef trust,
  ) {
    return _sec_trust_create(
      trust,
    );
  }

  late final _sec_trust_createPtr =
      _lookup<ffi.NativeFunction<sec_trust_t Function(SecTrustRef)>>(
          'sec_trust_create');
  late final _sec_trust_create =
      _sec_trust_createPtr.asFunction<sec_trust_t Function(SecTrustRef)>();

  SecTrustRef sec_trust_copy_ref(
    sec_trust_t trust,
  ) {
    return _sec_trust_copy_ref(
      trust,
    );
  }

  late final _sec_trust_copy_refPtr =
      _lookup<ffi.NativeFunction<SecTrustRef Function(sec_trust_t)>>(
          'sec_trust_copy_ref');
  late final _sec_trust_copy_ref =
      _sec_trust_copy_refPtr.asFunction<SecTrustRef Function(sec_trust_t)>();

  sec_identity_t sec_identity_create(
    SecIdentityRef identity,
  ) {
    return _sec_identity_create(
      identity,
    );
  }

  late final _sec_identity_createPtr =
      _lookup<ffi.NativeFunction<sec_identity_t Function(SecIdentityRef)>>(
          'sec_identity_create');
  late final _sec_identity_create = _sec_identity_createPtr
      .asFunction<sec_identity_t Function(SecIdentityRef)>();

  sec_identity_t sec_identity_create_with_certificates(
    SecIdentityRef identity,
    CFArrayRef certificates,
  ) {
    return _sec_identity_create_with_certificates(
      identity,
      certificates,
    );
  }

  late final _sec_identity_create_with_certificatesPtr = _lookup<
      ffi.NativeFunction<
          sec_identity_t Function(SecIdentityRef,
              CFArrayRef)>>('sec_identity_create_with_certificates');
  late final _sec_identity_create_with_certificates =
      _sec_identity_create_with_certificatesPtr
          .asFunction<sec_identity_t Function(SecIdentityRef, CFArrayRef)>();

  bool sec_identity_access_certificates(
    sec_identity_t identity,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_identity_access_certificates(
          identity,
          handler,
        ) !=
        0;
  }

  late final _sec_identity_access_certificatesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(sec_identity_t,
              ffi.Pointer<_ObjCBlock>)>>('sec_identity_access_certificates');
  late final _sec_identity_access_certificates =
      _sec_identity_access_certificatesPtr
          .asFunction<int Function(sec_identity_t, ffi.Pointer<_ObjCBlock>)>();

  SecIdentityRef sec_identity_copy_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_ref(
      identity,
    );
  }

  late final _sec_identity_copy_refPtr =
      _lookup<ffi.NativeFunction<SecIdentityRef Function(sec_identity_t)>>(
          'sec_identity_copy_ref');
  late final _sec_identity_copy_ref = _sec_identity_copy_refPtr
      .asFunction<SecIdentityRef Function(sec_identity_t)>();

  CFArrayRef sec_identity_copy_certificates_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_certificates_ref(
      identity,
    );
  }

  late final _sec_identity_copy_certificates_refPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(sec_identity_t)>>(
          'sec_identity_copy_certificates_ref');
  late final _sec_identity_copy_certificates_ref =
      _sec_identity_copy_certificates_refPtr
          .asFunction<CFArrayRef Function(sec_identity_t)>();

  sec_certificate_t sec_certificate_create(
    SecCertificateRef certificate,
  ) {
    return _sec_certificate_create(
      certificate,
    );
  }

  late final _sec_certificate_createPtr = _lookup<
          ffi.NativeFunction<sec_certificate_t Function(SecCertificateRef)>>(
      'sec_certificate_create');
  late final _sec_certificate_create = _sec_certificate_createPtr
      .asFunction<sec_certificate_t Function(SecCertificateRef)>();

  SecCertificateRef sec_certificate_copy_ref(
    sec_certificate_t certificate,
  ) {
    return _sec_certificate_copy_ref(
      certificate,
    );
  }

  late final _sec_certificate_copy_refPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(sec_certificate_t)>>(
      'sec_certificate_copy_ref');
  late final _sec_certificate_copy_ref = _sec_certificate_copy_refPtr
      .asFunction<SecCertificateRef Function(sec_certificate_t)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_negotiated_protocol(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_protocol');
  late final _sec_protocol_metadata_get_negotiated_protocol =
      _sec_protocol_metadata_get_negotiated_protocolPtr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_copy_peer_public_key(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_copy_peer_public_key(
      metadata,
    );
  }

  late final _sec_protocol_metadata_copy_peer_public_keyPtr = _lookup<
          ffi.NativeFunction<
              dispatch_data_t Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_copy_peer_public_key');
  late final _sec_protocol_metadata_copy_peer_public_key =
      _sec_protocol_metadata_copy_peer_public_keyPtr
          .asFunction<dispatch_data_t Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_protocol_version(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_tls_protocol_version =
      _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol_version(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_protocol_version =
      _sec_protocol_metadata_get_negotiated_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_ciphersuite(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuite =
      _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_ciphersuite(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_ciphersuitePtr = _lookup<
          ffi.NativeFunction<SSLCipherSuite Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_ciphersuite =
      _sec_protocol_metadata_get_negotiated_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_get_early_data_accepted(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_early_data_accepted(
          metadata,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_get_early_data_acceptedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_early_data_accepted');
  late final _sec_protocol_metadata_get_early_data_accepted =
      _sec_protocol_metadata_get_early_data_acceptedPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_access_peer_certificate_chain(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_peer_certificate_chain(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_peer_certificate_chainPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_peer_certificate_chain');
  late final _sec_protocol_metadata_access_peer_certificate_chain =
      _sec_protocol_metadata_access_peer_certificate_chainPtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_ocsp_response(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_ocsp_response(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_ocsp_responsePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_ocsp_response');
  late final _sec_protocol_metadata_access_ocsp_response =
      _sec_protocol_metadata_access_ocsp_responsePtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_supported_signature_algorithms(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_supported_signature_algorithms(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_supported_signature_algorithmsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
          'sec_protocol_metadata_access_supported_signature_algorithms');
  late final _sec_protocol_metadata_access_supported_signature_algorithms =
      _sec_protocol_metadata_access_supported_signature_algorithmsPtr
          .asFunction<
              int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_distinguished_names(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_distinguished_names(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_distinguished_namesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_distinguished_names');
  late final _sec_protocol_metadata_access_distinguished_names =
      _sec_protocol_metadata_access_distinguished_namesPtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_pre_shared_keys(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_pre_shared_keys(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_pre_shared_keysPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_pre_shared_keys');
  late final _sec_protocol_metadata_access_pre_shared_keys =
      _sec_protocol_metadata_access_pre_shared_keysPtr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_server_name(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_server_name(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_server_name');
  late final _sec_protocol_metadata_get_server_name =
      _sec_protocol_metadata_get_server_namePtr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_peers_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_peers_are_equal(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_peers_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_peers_are_equal');
  late final _sec_protocol_metadata_peers_are_equal =
      _sec_protocol_metadata_peers_are_equalPtr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_challenge_parameters_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_challenge_parameters_are_equal(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_challenge_parameters_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_challenge_parameters_are_equal');
  late final _sec_protocol_metadata_challenge_parameters_are_equal =
      _sec_protocol_metadata_challenge_parameters_are_equalPtr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_create_secret(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret(
      metadata,
      label_len,
      label,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secretPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('sec_protocol_metadata_create_secret');
  late final _sec_protocol_metadata_create_secret =
      _sec_protocol_metadata_create_secretPtr.asFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t, int, ffi.Pointer<pkg_ffi.Char>, int)>();

  dispatch_data_t sec_protocol_metadata_create_secret_with_context(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int context_len,
    ffi.Pointer<ffi.Uint8> context,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret_with_context(
      metadata,
      label_len,
      label,
      context_len,
      context,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secret_with_contextPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              pkg_ffi
                  .Size)>>('sec_protocol_metadata_create_secret_with_context');
  late final _sec_protocol_metadata_create_secret_with_context =
      _sec_protocol_metadata_create_secret_with_contextPtr.asFunction<
          dispatch_data_t Function(sec_protocol_metadata_t, int,
              ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<ffi.Uint8>, int)>();

  bool sec_protocol_options_are_equal(
    sec_protocol_options_t optionsA,
    sec_protocol_options_t optionsB,
  ) {
    return _sec_protocol_options_are_equal(
          optionsA,
          optionsB,
        ) !=
        0;
  }

  late final _sec_protocol_options_are_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(sec_protocol_options_t,
              sec_protocol_options_t)>>('sec_protocol_options_are_equal');
  late final _sec_protocol_options_are_equal =
      _sec_protocol_options_are_equalPtr.asFunction<
          int Function(sec_protocol_options_t, sec_protocol_options_t)>();

  void sec_protocol_options_set_local_identity(
    sec_protocol_options_t options,
    sec_identity_t identity,
  ) {
    return _sec_protocol_options_set_local_identity(
      options,
      identity,
    );
  }

  late final _sec_protocol_options_set_local_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              sec_identity_t)>>('sec_protocol_options_set_local_identity');
  late final _sec_protocol_options_set_local_identity =
      _sec_protocol_options_set_local_identityPtr
          .asFunction<void Function(sec_protocol_options_t, sec_identity_t)>();

  void sec_protocol_options_append_tls_ciphersuite(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_append_tls_ciphersuite');
  late final _sec_protocol_options_append_tls_ciphersuite =
      _sec_protocol_options_append_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              SSLCipherSuite)>>('sec_protocol_options_add_tls_ciphersuite');
  late final _sec_protocol_options_add_tls_ciphersuite =
      _sec_protocol_options_add_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_append_tls_ciphersuite_group(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite_group(
      options,
      group,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuite_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_append_tls_ciphersuite_group');
  late final _sec_protocol_options_append_tls_ciphersuite_group =
      _sec_protocol_options_append_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite_group(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite_group(
      options,
      group,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuite_groupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_add_tls_ciphersuite_group');
  late final _sec_protocol_options_add_tls_ciphersuite_group =
      _sec_protocol_options_add_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_min_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_min_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_min_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_tls_min_version');
  late final _sec_protocol_options_set_tls_min_version =
      _sec_protocol_options_set_tls_min_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_min_tls_protocol_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_min_tls_protocol_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_min_tls_protocol_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_min_tls_protocol_version');
  late final _sec_protocol_options_set_min_tls_protocol_version =
      _sec_protocol_options_set_min_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_min_tls_protocol_version() {
    return _sec_protocol_options_get_default_min_tls_protocol_version();
  }

  late final _sec_protocol_options_get_default_min_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_min_tls_protocol_version');
  late final _sec_protocol_options_get_default_min_tls_protocol_version =
      _sec_protocol_options_get_default_min_tls_protocol_versionPtr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_min_dtls_protocol_version() {
    return _sec_protocol_options_get_default_min_dtls_protocol_version();
  }

  late final _sec_protocol_options_get_default_min_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_min_dtls_protocol_version');
  late final _sec_protocol_options_get_default_min_dtls_protocol_version =
      _sec_protocol_options_get_default_min_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  void sec_protocol_options_set_tls_max_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_max_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_max_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_tls_max_version');
  late final _sec_protocol_options_set_tls_max_version =
      _sec_protocol_options_set_tls_max_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_max_tls_protocol_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_max_tls_protocol_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_max_tls_protocol_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_max_tls_protocol_version');
  late final _sec_protocol_options_set_max_tls_protocol_version =
      _sec_protocol_options_set_max_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_max_tls_protocol_version() {
    return _sec_protocol_options_get_default_max_tls_protocol_version();
  }

  late final _sec_protocol_options_get_default_max_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_max_tls_protocol_version');
  late final _sec_protocol_options_get_default_max_tls_protocol_version =
      _sec_protocol_options_get_default_max_tls_protocol_versionPtr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_max_dtls_protocol_version() {
    return _sec_protocol_options_get_default_max_dtls_protocol_version();
  }

  late final _sec_protocol_options_get_default_max_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_max_dtls_protocol_version');
  late final _sec_protocol_options_get_default_max_dtls_protocol_version =
      _sec_protocol_options_get_default_max_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  bool sec_protocol_options_get_enable_encrypted_client_hello(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_enable_encrypted_client_hello(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_enable_encrypted_client_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_enable_encrypted_client_hello');
  late final _sec_protocol_options_get_enable_encrypted_client_hello =
      _sec_protocol_options_get_enable_encrypted_client_helloPtr
          .asFunction<int Function(sec_protocol_options_t)>();

  bool sec_protocol_options_get_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_quic_use_legacy_codepoint(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_quic_use_legacy_codepointPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_quic_use_legacy_codepoint');
  late final _sec_protocol_options_get_quic_use_legacy_codepoint =
      _sec_protocol_options_get_quic_use_legacy_codepointPtr
          .asFunction<int Function(sec_protocol_options_t)>();

  void sec_protocol_options_add_tls_application_protocol(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> application_protocol,
  ) {
    return _sec_protocol_options_add_tls_application_protocol(
      options,
      application_protocol,
    );
  }

  late final _sec_protocol_options_add_tls_application_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_add_tls_application_protocol');
  late final _sec_protocol_options_add_tls_application_protocol =
      _sec_protocol_options_add_tls_application_protocolPtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_server_name(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> server_name,
  ) {
    return _sec_protocol_options_set_tls_server_name(
      options,
      server_name,
    );
  }

  late final _sec_protocol_options_set_tls_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_set_tls_server_name');
  late final _sec_protocol_options_set_tls_server_name =
      _sec_protocol_options_set_tls_server_namePtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_diffie_hellman_parameters(
    sec_protocol_options_t options,
    dispatch_data_t params,
  ) {
    return _sec_protocol_options_set_tls_diffie_hellman_parameters(
      options,
      params,
    );
  }

  late final _sec_protocol_options_set_tls_diffie_hellman_parametersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_diffie_hellman_parameters');
  late final _sec_protocol_options_set_tls_diffie_hellman_parameters =
      _sec_protocol_options_set_tls_diffie_hellman_parametersPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_add_pre_shared_key(
    sec_protocol_options_t options,
    dispatch_data_t psk,
    dispatch_data_t psk_identity,
  ) {
    return _sec_protocol_options_add_pre_shared_key(
      options,
      psk,
      psk_identity,
    );
  }

  late final _sec_protocol_options_add_pre_shared_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, dispatch_data_t,
              dispatch_data_t)>>('sec_protocol_options_add_pre_shared_key');
  late final _sec_protocol_options_add_pre_shared_key =
      _sec_protocol_options_add_pre_shared_keyPtr.asFunction<
          void Function(
              sec_protocol_options_t, dispatch_data_t, dispatch_data_t)>();

  void sec_protocol_options_set_tls_pre_shared_key_identity_hint(
    sec_protocol_options_t options,
    dispatch_data_t psk_identity_hint,
  ) {
    return _sec_protocol_options_set_tls_pre_shared_key_identity_hint(
      options,
      psk_identity_hint,
    );
  }

  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_pre_shared_key_identity_hint');
  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hint =
      _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_set_pre_shared_key_selection_block(
    sec_protocol_options_t options,
    sec_protocol_pre_shared_key_selection_t psk_selection_block,
    dispatch_queue_t psk_selection_queue,
  ) {
    return _sec_protocol_options_set_pre_shared_key_selection_block(
      options,
      psk_selection_block,
      psk_selection_queue,
    );
  }

  late final _sec_protocol_options_set_pre_shared_key_selection_blockPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      sec_protocol_options_t,
                      sec_protocol_pre_shared_key_selection_t,
                      dispatch_queue_t)>>(
          'sec_protocol_options_set_pre_shared_key_selection_block');
  late final _sec_protocol_options_set_pre_shared_key_selection_block =
      _sec_protocol_options_set_pre_shared_key_selection_blockPtr.asFunction<
          void Function(sec_protocol_options_t,
              sec_protocol_pre_shared_key_selection_t, dispatch_queue_t)>();

  void sec_protocol_options_set_tls_tickets_enabled(
    sec_protocol_options_t options,
    bool tickets_enabled,
  ) {
    return _sec_protocol_options_set_tls_tickets_enabled(
      options,
      tickets_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_tickets_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_tickets_enabled');
  late final _sec_protocol_options_set_tls_tickets_enabled =
      _sec_protocol_options_set_tls_tickets_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_is_fallback_attempt(
    sec_protocol_options_t options,
    bool is_fallback_attempt,
  ) {
    return _sec_protocol_options_set_tls_is_fallback_attempt(
      options,
      is_fallback_attempt ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_is_fallback_attemptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_is_fallback_attempt');
  late final _sec_protocol_options_set_tls_is_fallback_attempt =
      _sec_protocol_options_set_tls_is_fallback_attemptPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_resumption_enabled(
    sec_protocol_options_t options,
    bool resumption_enabled,
  ) {
    return _sec_protocol_options_set_tls_resumption_enabled(
      options,
      resumption_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_resumption_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_resumption_enabled');
  late final _sec_protocol_options_set_tls_resumption_enabled =
      _sec_protocol_options_set_tls_resumption_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_false_start_enabled(
    sec_protocol_options_t options,
    bool false_start_enabled,
  ) {
    return _sec_protocol_options_set_tls_false_start_enabled(
      options,
      false_start_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_false_start_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_false_start_enabled');
  late final _sec_protocol_options_set_tls_false_start_enabled =
      _sec_protocol_options_set_tls_false_start_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_ocsp_enabled(
    sec_protocol_options_t options,
    bool ocsp_enabled,
  ) {
    return _sec_protocol_options_set_tls_ocsp_enabled(
      options,
      ocsp_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_ocsp_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_ocsp_enabled');
  late final _sec_protocol_options_set_tls_ocsp_enabled =
      _sec_protocol_options_set_tls_ocsp_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_sct_enabled(
    sec_protocol_options_t options,
    bool sct_enabled,
  ) {
    return _sec_protocol_options_set_tls_sct_enabled(
      options,
      sct_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_sct_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_sct_enabled');
  late final _sec_protocol_options_set_tls_sct_enabled =
      _sec_protocol_options_set_tls_sct_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_renegotiation_enabled(
    sec_protocol_options_t options,
    bool renegotiation_enabled,
  ) {
    return _sec_protocol_options_set_tls_renegotiation_enabled(
      options,
      renegotiation_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_renegotiation_enabledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_tls_renegotiation_enabled');
  late final _sec_protocol_options_set_tls_renegotiation_enabled =
      _sec_protocol_options_set_tls_renegotiation_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_required(
    sec_protocol_options_t options,
    bool peer_authentication_required,
  ) {
    return _sec_protocol_options_set_peer_authentication_required(
      options,
      peer_authentication_required ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_requiredPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_required');
  late final _sec_protocol_options_set_peer_authentication_required =
      _sec_protocol_options_set_peer_authentication_requiredPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_optional(
    sec_protocol_options_t options,
    bool peer_authentication_optional,
  ) {
    return _sec_protocol_options_set_peer_authentication_optional(
      options,
      peer_authentication_optional ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_optionalPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_optional');
  late final _sec_protocol_options_set_peer_authentication_optional =
      _sec_protocol_options_set_peer_authentication_optionalPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_enable_encrypted_client_hello(
    sec_protocol_options_t options,
    bool enable_encrypted_client_hello,
  ) {
    return _sec_protocol_options_set_enable_encrypted_client_hello(
      options,
      enable_encrypted_client_hello ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_enable_encrypted_client_helloPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_enable_encrypted_client_hello');
  late final _sec_protocol_options_set_enable_encrypted_client_hello =
      _sec_protocol_options_set_enable_encrypted_client_helloPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
    bool quic_use_legacy_codepoint,
  ) {
    return _sec_protocol_options_set_quic_use_legacy_codepoint(
      options,
      quic_use_legacy_codepoint ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_quic_use_legacy_codepointPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_quic_use_legacy_codepoint');
  late final _sec_protocol_options_set_quic_use_legacy_codepoint =
      _sec_protocol_options_set_quic_use_legacy_codepointPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_key_update_block(
    sec_protocol_options_t options,
    sec_protocol_key_update_t key_update_block,
    dispatch_queue_t key_update_queue,
  ) {
    return _sec_protocol_options_set_key_update_block(
      options,
      key_update_block,
      key_update_queue,
    );
  }

  late final _sec_protocol_options_set_key_update_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>>('sec_protocol_options_set_key_update_block');
  late final _sec_protocol_options_set_key_update_block =
      _sec_protocol_options_set_key_update_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_challenge_block(
    sec_protocol_options_t options,
    sec_protocol_challenge_t challenge_block,
    dispatch_queue_t challenge_queue,
  ) {
    return _sec_protocol_options_set_challenge_block(
      options,
      challenge_block,
      challenge_queue,
    );
  }

  late final _sec_protocol_options_set_challenge_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>>('sec_protocol_options_set_challenge_block');
  late final _sec_protocol_options_set_challenge_block =
      _sec_protocol_options_set_challenge_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_verify_block(
    sec_protocol_options_t options,
    sec_protocol_verify_t verify_block,
    dispatch_queue_t verify_block_queue,
  ) {
    return _sec_protocol_options_set_verify_block(
      options,
      verify_block,
      verify_block_queue,
    );
  }

  late final _sec_protocol_options_set_verify_blockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>>('sec_protocol_options_set_verify_block');
  late final _sec_protocol_options_set_verify_block =
      _sec_protocol_options_set_verify_blockPtr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_default =
      _lookup<CFStringRef>('kSSLSessionConfig_default');

  CFStringRef get kSSLSessionConfig_default => _kSSLSessionConfig_default.value;

  set kSSLSessionConfig_default(CFStringRef value) =>
      _kSSLSessionConfig_default.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1 =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1');

  CFStringRef get kSSLSessionConfig_ATSv1 => _kSSLSessionConfig_ATSv1.value;

  set kSSLSessionConfig_ATSv1(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1_noPFS =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1_noPFS');

  CFStringRef get kSSLSessionConfig_ATSv1_noPFS =>
      _kSSLSessionConfig_ATSv1_noPFS.value;

  set kSSLSessionConfig_ATSv1_noPFS(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1_noPFS.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_standard =
      _lookup<CFStringRef>('kSSLSessionConfig_standard');

  CFStringRef get kSSLSessionConfig_standard =>
      _kSSLSessionConfig_standard.value;

  set kSSLSessionConfig_standard(CFStringRef value) =>
      _kSSLSessionConfig_standard.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_RC4_fallback');

  CFStringRef get kSSLSessionConfig_RC4_fallback =>
      _kSSLSessionConfig_RC4_fallback.value;

  set kSSLSessionConfig_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_fallback =>
      _kSSLSessionConfig_TLSv1_fallback.value;

  set kSSLSessionConfig_TLSv1_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_RC4_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_RC4_fallback =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value;

  set kSSLSessionConfig_TLSv1_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy');

  CFStringRef get kSSLSessionConfig_legacy => _kSSLSessionConfig_legacy.value;

  set kSSLSessionConfig_legacy(CFStringRef value) =>
      _kSSLSessionConfig_legacy.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy_DHE =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy_DHE');

  CFStringRef get kSSLSessionConfig_legacy_DHE =>
      _kSSLSessionConfig_legacy_DHE.value;

  set kSSLSessionConfig_legacy_DHE(CFStringRef value) =>
      _kSSLSessionConfig_legacy_DHE.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_anonymous =
      _lookup<CFStringRef>('kSSLSessionConfig_anonymous');

  CFStringRef get kSSLSessionConfig_anonymous =>
      _kSSLSessionConfig_anonymous.value;

  set kSSLSessionConfig_anonymous(CFStringRef value) =>
      _kSSLSessionConfig_anonymous.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_3DES_fallback');

  CFStringRef get kSSLSessionConfig_3DES_fallback =>
      _kSSLSessionConfig_3DES_fallback.value;

  set kSSLSessionConfig_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_3DES_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_3DES_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_3DES_fallback =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value;

  set kSSLSessionConfig_TLSv1_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value = value;

  int SSLContextGetTypeID() {
    return _SSLContextGetTypeID();
  }

  late final _SSLContextGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SSLContextGetTypeID');
  late final _SSLContextGetTypeID =
      _SSLContextGetTypeIDPtr.asFunction<int Function()>();

  SSLContextRef SSLCreateContext(
    CFAllocatorRef alloc,
    int protocolSide,
    int connectionType,
  ) {
    return _SSLCreateContext(
      alloc,
      protocolSide,
      connectionType,
    );
  }

  late final _SSLCreateContextPtr = _lookup<
      ffi.NativeFunction<
          SSLContextRef Function(
              CFAllocatorRef, ffi.Int32, ffi.Int32)>>('SSLCreateContext');
  late final _SSLCreateContext = _SSLCreateContextPtr.asFunction<
      SSLContextRef Function(CFAllocatorRef, int, int)>();

  int SSLNewContext(
    int isServer,
    ffi.Pointer<SSLContextRef> contextPtr,
  ) {
    return _SSLNewContext(
      isServer,
      contextPtr,
    );
  }

  late final _SSLNewContextPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              Boolean, ffi.Pointer<SSLContextRef>)>>('SSLNewContext');
  late final _SSLNewContext = _SSLNewContextPtr.asFunction<
      int Function(int, ffi.Pointer<SSLContextRef>)>();

  int SSLDisposeContext(
    SSLContextRef context,
  ) {
    return _SSLDisposeContext(
      context,
    );
  }

  late final _SSLDisposeContextPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLDisposeContext');
  late final _SSLDisposeContext =
      _SSLDisposeContextPtr.asFunction<int Function(SSLContextRef)>();

  int SSLGetSessionState(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _SSLGetSessionState(
      context,
      state,
    );
  }

  late final _SSLGetSessionStatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Int32>)>>('SSLGetSessionState');
  late final _SSLGetSessionState = _SSLGetSessionStatePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetSessionOption(
    SSLContextRef context,
    int option,
    int value,
  ) {
    return _SSLSetSessionOption(
      context,
      option,
      value,
    );
  }

  late final _SSLSetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Int32, Boolean)>>('SSLSetSessionOption');
  late final _SSLSetSessionOption = _SSLSetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, int)>();

  int SSLGetSessionOption(
    SSLContextRef context,
    int option,
    ffi.Pointer<Boolean> value,
  ) {
    return _SSLGetSessionOption(
      context,
      option,
      value,
    );
  }

  late final _SSLGetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              ffi.Pointer<Boolean>)>>('SSLGetSessionOption');
  late final _SSLGetSessionOption = _SSLGetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetIOFuncs(
    SSLContextRef context,
    SSLReadFunc readFunc,
    SSLWriteFunc writeFunc,
  ) {
    return _SSLSetIOFuncs(
      context,
      readFunc,
      writeFunc,
    );
  }

  late final _SSLSetIOFuncsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLReadFunc, SSLWriteFunc)>>('SSLSetIOFuncs');
  late final _SSLSetIOFuncs = _SSLSetIOFuncsPtr.asFunction<
      int Function(SSLContextRef, SSLReadFunc, SSLWriteFunc)>();

  int SSLSetSessionConfig(
    SSLContextRef context,
    CFStringRef config,
  ) {
    return _SSLSetSessionConfig(
      context,
      config,
    );
  }

  late final _SSLSetSessionConfigPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, CFStringRef)>>(
      'SSLSetSessionConfig');
  late final _SSLSetSessionConfig = _SSLSetSessionConfigPtr.asFunction<
      int Function(SSLContextRef, CFStringRef)>();

  int SSLSetProtocolVersionMin(
    SSLContextRef context,
    int minVersion,
  ) {
    return _SSLSetProtocolVersionMin(
      context,
      minVersion,
    );
  }

  late final _SSLSetProtocolVersionMinPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersionMin');
  late final _SSLSetProtocolVersionMin = _SSLSetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMin(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> minVersion,
  ) {
    return _SSLGetProtocolVersionMin(
      context,
      minVersion,
    );
  }

  late final _SSLGetProtocolVersionMinPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersionMin');
  late final _SSLGetProtocolVersionMin = _SSLGetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetProtocolVersionMax(
    SSLContextRef context,
    int maxVersion,
  ) {
    return _SSLSetProtocolVersionMax(
      context,
      maxVersion,
    );
  }

  late final _SSLSetProtocolVersionMaxPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersionMax');
  late final _SSLSetProtocolVersionMax = _SSLSetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMax(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> maxVersion,
  ) {
    return _SSLGetProtocolVersionMax(
      context,
      maxVersion,
    );
  }

  late final _SSLGetProtocolVersionMaxPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersionMax');
  late final _SSLGetProtocolVersionMax = _SSLGetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetProtocolVersionEnabled(
    SSLContextRef context,
    int protocol,
    int enable,
  ) {
    return _SSLSetProtocolVersionEnabled(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLSetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              Boolean)>>('SSLSetProtocolVersionEnabled');
  late final _SSLSetProtocolVersionEnabled = _SSLSetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, int)>();

  int SSLGetProtocolVersionEnabled(
    SSLContextRef context,
    int protocol,
    ffi.Pointer<Boolean> enable,
  ) {
    return _SSLGetProtocolVersionEnabled(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLGetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              ffi.Pointer<Boolean>)>>('SSLGetProtocolVersionEnabled');
  late final _SSLGetProtocolVersionEnabled = _SSLGetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetProtocolVersion(
    SSLContextRef context,
    int version,
  ) {
    return _SSLSetProtocolVersion(
      context,
      version,
    );
  }

  late final _SSLSetProtocolVersionPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersion');
  late final _SSLSetProtocolVersion =
      _SSLSetProtocolVersionPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> protocol,
  ) {
    return _SSLGetProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetProtocolVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersion');
  late final _SSLGetProtocolVersion = _SSLGetProtocolVersionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetCertificate');
  late final _SSLSetCertificate = _SSLSetCertificatePtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetConnection(
    SSLContextRef context,
    SSLConnectionRef connection,
  ) {
    return _SSLSetConnection(
      context,
      connection,
    );
  }

  late final _SSLSetConnectionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLConnectionRef)>>('SSLSetConnection');
  late final _SSLSetConnection = _SSLSetConnectionPtr.asFunction<
      int Function(SSLContextRef, SSLConnectionRef)>();

  int SSLGetConnection(
    SSLContextRef context,
    ffi.Pointer<SSLConnectionRef> connection,
  ) {
    return _SSLGetConnection(
      context,
      connection,
    );
  }

  late final _SSLGetConnectionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLConnectionRef>)>>('SSLGetConnection');
  late final _SSLGetConnection = _SSLGetConnectionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLConnectionRef>)>();

  int SSLSetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    int peerNameLen,
  ) {
    return _SSLSetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLSetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('SSLSetPeerDomainName');
  late final _SSLSetPeerDomainName = _SSLSetPeerDomainNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int SSLGetPeerDomainNameLength(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainNameLength(
      context,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainNameLength');
  late final _SSLGetPeerDomainNameLength = _SSLGetPeerDomainNameLengthPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainName');
  late final _SSLGetPeerDomainName = _SSLGetPeerDomainNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerNameLength(
    SSLContextRef ctx,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerNameLength(
      ctx,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerNameLength');
  late final _SSLCopyRequestedPeerNameLength =
      _SSLCopyRequestedPeerNameLengthPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerName');
  late final _SSLCopyRequestedPeerName =
      _SSLCopyRequestedPeerNamePtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetDatagramHelloCookie(
    SSLContextRef dtlsContext,
    ffi.Pointer<ffi.Void> cookie,
    int cookieLen,
  ) {
    return _SSLSetDatagramHelloCookie(
      dtlsContext,
      cookie,
      cookieLen,
    );
  }

  late final _SSLSetDatagramHelloCookiePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDatagramHelloCookie');
  late final _SSLSetDatagramHelloCookie = _SSLSetDatagramHelloCookiePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    int maxSize,
  ) {
    return _SSLSetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLSetMaxDatagramRecordSizePtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, pkg_ffi.Size)>>(
      'SSLSetMaxDatagramRecordSize');
  late final _SSLSetMaxDatagramRecordSize = _SSLSetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> maxSize,
  ) {
    return _SSLGetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLGetMaxDatagramRecordSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetMaxDatagramRecordSize');
  late final _SSLGetMaxDatagramRecordSize = _SSLGetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> protocol,
  ) {
    return _SSLGetNegotiatedProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetNegotiatedProtocolVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetNegotiatedProtocolVersion');
  late final _SSLGetNegotiatedProtocolVersion =
      _SSLGetNegotiatedProtocolVersionPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLGetNumberSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberSupportedCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberSupportedCiphers');
  late final _SSLGetNumberSupportedCiphers = _SSLGetNumberSupportedCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetSupportedCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetSupportedCiphers');
  late final _SSLGetSupportedCiphers = _SSLGetSupportedCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNumberEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberEnabledCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberEnabledCiphers');
  late final _SSLGetNumberEnabledCiphers = _SSLGetNumberEnabledCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    int numCiphers,
  ) {
    return _SSLSetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLSetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              pkg_ffi.Size)>>('SSLSetEnabledCiphers');
  late final _SSLSetEnabledCiphers = _SSLSetEnabledCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>, int)>();

  int SSLGetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetEnabledCiphers');
  late final _SSLGetEnabledCiphers = _SSLGetEnabledCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetSessionTicketsEnabled(
    SSLContextRef context,
    int enabled,
  ) {
    return _SSLSetSessionTicketsEnabled(
      context,
      enabled,
    );
  }

  late final _SSLSetSessionTicketsEnabledPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetSessionTicketsEnabled');
  late final _SSLSetSessionTicketsEnabled = _SSLSetSessionTicketsEnabledPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLSetEnableCertVerify(
    SSLContextRef context,
    int enableVerify,
  ) {
    return _SSLSetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLSetEnableCertVerifyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetEnableCertVerify');
  late final _SSLSetEnableCertVerify =
      _SSLSetEnableCertVerifyPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetEnableCertVerify(
    SSLContextRef context,
    ffi.Pointer<Boolean> enableVerify,
  ) {
    return _SSLGetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLGetEnableCertVerifyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetEnableCertVerify');
  late final _SSLGetEnableCertVerify = _SSLGetEnableCertVerifyPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredCerts(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredCertsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredCerts');
  late final _SSLSetAllowsExpiredCerts = _SSLSetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredCerts(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredCertsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredCerts');
  late final _SSLGetAllowsExpiredCerts = _SSLGetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredRoots(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredRootsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredRoots');
  late final _SSLSetAllowsExpiredRoots = _SSLSetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredRoots(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredRoots');
  late final _SSLGetAllowsExpiredRoots = _SSLGetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsAnyRoot(
    SSLContextRef context,
    int anyRoot,
  ) {
    return _SSLSetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLSetAllowsAnyRootPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsAnyRoot');
  late final _SSLSetAllowsAnyRoot =
      _SSLSetAllowsAnyRootPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsAnyRoot(
    SSLContextRef context,
    ffi.Pointer<Boolean> anyRoot,
  ) {
    return _SSLGetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLGetAllowsAnyRootPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetAllowsAnyRoot');
  late final _SSLGetAllowsAnyRoot = _SSLGetAllowsAnyRootPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetTrustedRoots(
    SSLContextRef context,
    CFArrayRef trustedRoots,
    int replaceExisting,
  ) {
    return _SSLSetTrustedRoots(
      context,
      trustedRoots,
      replaceExisting,
    );
  }

  late final _SSLSetTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, CFArrayRef, Boolean)>>('SSLSetTrustedRoots');
  late final _SSLSetTrustedRoots = _SSLSetTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef, int)>();

  int SSLCopyTrustedRoots(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> trustedRoots,
  ) {
    return _SSLCopyTrustedRoots(
      context,
      trustedRoots,
    );
  }

  late final _SSLCopyTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyTrustedRoots');
  late final _SSLCopyTrustedRoots = _SSLCopyTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerCertificates(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certs,
  ) {
    return _SSLCopyPeerCertificates(
      context,
      certs,
    );
  }

  late final _SSLCopyPeerCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyPeerCertificates');
  late final _SSLCopyPeerCertificates = _SSLCopyPeerCertificatesPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerTrust(
    SSLContextRef context,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SSLCopyPeerTrust(
      context,
      trust,
    );
  }

  late final _SSLCopyPeerTrustPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<SecTrustRef>)>>('SSLCopyPeerTrust');
  late final _SSLCopyPeerTrust = _SSLCopyPeerTrustPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SecTrustRef>)>();

  int SSLSetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> peerID,
    int peerIDLen,
  ) {
    return _SSLSetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLSetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetPeerID');
  late final _SSLSetPeerID = _SSLSetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peerID,
    ffi.Pointer<pkg_ffi.Size> peerIDLen,
  ) {
    return _SSLGetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLGetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerID');
  late final _SSLGetPeerID = _SSLGetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedCipher(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> cipherSuite,
  ) {
    return _SSLGetNegotiatedCipher(
      context,
      cipherSuite,
    );
  }

  late final _SSLGetNegotiatedCipherPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLCipherSuite>)>>('SSLGetNegotiatedCipher');
  late final _SSLGetNegotiatedCipher = _SSLGetNegotiatedCipherPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>)>();

  int SSLSetALPNProtocols(
    SSLContextRef context,
    CFArrayRef protocols,
  ) {
    return _SSLSetALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLSetALPNProtocolsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetALPNProtocols');
  late final _SSLSetALPNProtocols = _SSLSetALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLCopyALPNProtocols(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> protocols,
  ) {
    return _SSLCopyALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLCopyALPNProtocolsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyALPNProtocols');
  late final _SSLCopyALPNProtocols = _SSLCopyALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLSetOCSPResponse(
    SSLContextRef context,
    CFDataRef response,
  ) {
    return _SSLSetOCSPResponse(
      context,
      response,
    );
  }

  late final _SSLSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFDataRef)>>(
          'SSLSetOCSPResponse');
  late final _SSLSetOCSPResponse = _SSLSetOCSPResponsePtr.asFunction<
      int Function(SSLContextRef, CFDataRef)>();

  int SSLSetEncryptionCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetEncryptionCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetEncryptionCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetEncryptionCertificate');
  late final _SSLSetEncryptionCertificate = _SSLSetEncryptionCertificatePtr
      .asFunction<int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetClientSideAuthenticate(
    SSLContextRef context,
    int auth,
  ) {
    return _SSLSetClientSideAuthenticate(
      context,
      auth,
    );
  }

  late final _SSLSetClientSideAuthenticatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetClientSideAuthenticate');
  late final _SSLSetClientSideAuthenticate = _SSLSetClientSideAuthenticatePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLAddDistinguishedName(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> derDN,
    int derDNLen,
  ) {
    return _SSLAddDistinguishedName(
      context,
      derDN,
      derDNLen,
    );
  }

  late final _SSLAddDistinguishedNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLAddDistinguishedName');
  late final _SSLAddDistinguishedName = _SSLAddDistinguishedNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetCertificateAuthorities(
    SSLContextRef context,
    CFTypeRef certificateOrArray,
    int replaceExisting,
  ) {
    return _SSLSetCertificateAuthorities(
      context,
      certificateOrArray,
      replaceExisting,
    );
  }

  late final _SSLSetCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, CFTypeRef,
              Boolean)>>('SSLSetCertificateAuthorities');
  late final _SSLSetCertificateAuthorities = _SSLSetCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, CFTypeRef, int)>();

  int SSLCopyCertificateAuthorities(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certificates,
  ) {
    return _SSLCopyCertificateAuthorities(
      context,
      certificates,
    );
  }

  late final _SSLCopyCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyCertificateAuthorities');
  late final _SSLCopyCertificateAuthorities = _SSLCopyCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyDistinguishedNames(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> names,
  ) {
    return _SSLCopyDistinguishedNames(
      context,
      names,
    );
  }

  late final _SSLCopyDistinguishedNamesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyDistinguishedNames');
  late final _SSLCopyDistinguishedNames = _SSLCopyDistinguishedNamesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLGetClientCertificateState(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> clientState,
  ) {
    return _SSLGetClientCertificateState(
      context,
      clientState,
    );
  }

  late final _SSLGetClientCertificateStatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetClientCertificateState');
  late final _SSLGetClientCertificateState = _SSLGetClientCertificateStatePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> dhParams,
    int dhParamsLen,
  ) {
    return _SSLSetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLSetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDiffieHellmanParams');
  late final _SSLSetDiffieHellmanParams = _SSLSetDiffieHellmanParamsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dhParams,
    ffi.Pointer<pkg_ffi.Size> dhParamsLen,
  ) {
    return _SSLGetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLGetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDiffieHellmanParams');
  late final _SSLGetDiffieHellmanParams =
      _SSLGetDiffieHellmanParamsPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetRsaBlinding(
    SSLContextRef context,
    int blinding,
  ) {
    return _SSLSetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLSetRsaBlindingPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetRsaBlinding');
  late final _SSLSetRsaBlinding =
      _SSLSetRsaBlindingPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetRsaBlinding(
    SSLContextRef context,
    ffi.Pointer<Boolean> blinding,
  ) {
    return _SSLGetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLGetRsaBlindingPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetRsaBlinding');
  late final _SSLGetRsaBlinding = _SSLGetRsaBlindingPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLHandshake(
    SSLContextRef context,
  ) {
    return _SSLHandshake(
      context,
    );
  }

  late final _SSLHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLHandshake');
  late final _SSLHandshake =
      _SSLHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLReHandshake(
    SSLContextRef context,
  ) {
    return _SSLReHandshake(
      context,
    );
  }

  late final _SSLReHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLReHandshake');
  late final _SSLReHandshake =
      _SSLReHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLWrite(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLWrite(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLWritePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLWrite');
  late final _SSLWrite = _SSLWritePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLRead(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLRead(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLReadPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLRead');
  late final _SSLRead = _SSLReadPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetBufferedReadSize(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> bufferSize,
  ) {
    return _SSLGetBufferedReadSize(
      context,
      bufferSize,
    );
  }

  late final _SSLGetBufferedReadSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetBufferedReadSize');
  late final _SSLGetBufferedReadSize = _SSLGetBufferedReadSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetDatagramWriteSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> bufSize,
  ) {
    return _SSLGetDatagramWriteSize(
      dtlsContext,
      bufSize,
    );
  }

  late final _SSLGetDatagramWriteSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDatagramWriteSize');
  late final _SSLGetDatagramWriteSize = _SSLGetDatagramWriteSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLClose(
    SSLContextRef context,
  ) {
    return _SSLClose(
      context,
    );
  }

  late final _SSLClosePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>('SSLClose');
  late final _SSLClose = _SSLClosePtr.asFunction<int Function(SSLContextRef)>();

  int SSLSetError(
    SSLContextRef context,
    int status,
  ) {
    return _SSLSetError(
      context,
      status,
    );
  }

  late final _SSLSetErrorPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, OSStatus)>>(
          'SSLSetError');
  late final _SSLSetError =
      _SSLSetErrorPtr.asFunction<int Function(SSLContextRef, int)>();

  late final ffi.Pointer<ffi.Int64> _NSURLSessionTransferSizeUnknown =
      _lookup<ffi.Int64>('NSURLSessionTransferSizeUnknown');

  int get NSURLSessionTransferSizeUnknown =>
      _NSURLSessionTransferSizeUnknown.value;

  set NSURLSessionTransferSizeUnknown(int value) =>
      _NSURLSessionTransferSizeUnknown.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSURLSession1 =
      _getClass1("NSURLSession");
  late final ffi.Pointer<ObjCSel> _sel_sharedSession1 =
      _registerName1("sharedSession");
  late final ffi.Pointer<ObjCSel> _sel_sessionWithConfiguration_1 =
      _registerName1("sessionWithConfiguration:");
  ffi.Pointer<ObjCObject> _objc_msgSend_211(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> configuration,
  ) {
    return __objc_msgSend_211(
      obj,
      sel,
      configuration,
    );
  }

  late final __objc_msgSend_211Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_211 = __objc_msgSend_211Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_sessionWithConfiguration_delegate_delegateQueue_1 =
      _registerName1("sessionWithConfiguration:delegate:delegateQueue:");
  ffi.Pointer<ObjCObject> _objc_msgSend_212(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> configuration,
    ffi.Pointer<ObjCObject> delegate,
    ffi.Pointer<ObjCObject> queue,
  ) {
    return __objc_msgSend_212(
      obj,
      sel,
      configuration,
      delegate,
      queue,
    );
  }

  late final __objc_msgSend_212Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_212 = __objc_msgSend_212Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_delegateQueue1 =
      _registerName1("delegateQueue");
  late final ffi.Pointer<ObjCSel> _sel_delegate1 = _registerName1("delegate");
  late final ffi.Pointer<ObjCSel> _sel_configuration1 =
      _registerName1("configuration");
  late final ffi.Pointer<ObjCSel> _sel_sessionDescription1 =
      _registerName1("sessionDescription");
  late final ffi.Pointer<ObjCSel> _sel_setSessionDescription_1 =
      _registerName1("setSessionDescription:");
  late final ffi.Pointer<ObjCSel> _sel_finishTasksAndInvalidate1 =
      _registerName1("finishTasksAndInvalidate");
  late final ffi.Pointer<ObjCSel> _sel_invalidateAndCancel1 =
      _registerName1("invalidateAndCancel");
  late final ffi.Pointer<ObjCSel> _sel_resetWithCompletionHandler_1 =
      _registerName1("resetWithCompletionHandler:");
  late final ffi.Pointer<ObjCSel> _sel_flushWithCompletionHandler_1 =
      _registerName1("flushWithCompletionHandler:");
  late final ffi.Pointer<ObjCSel> _sel_getTasksWithCompletionHandler_1 =
      _registerName1("getTasksWithCompletionHandler:");
  void _objc_msgSend_213(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_213(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_213Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_213 = __objc_msgSend_213Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_getAllTasksWithCompletionHandler_1 =
      _registerName1("getAllTasksWithCompletionHandler:");
  void _objc_msgSend_214(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_214(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_214Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_214 = __objc_msgSend_214Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCObject> _class_NSURLSessionDataTask1 =
      _getClass1("NSURLSessionDataTask");
  late final ffi.Pointer<ObjCObject> _class_NSURLSessionTask1 =
      _getClass1("NSURLSessionTask");
  late final ffi.Pointer<ObjCSel> _sel_taskIdentifier1 =
      _registerName1("taskIdentifier");
  late final ffi.Pointer<ObjCSel> _sel_originalRequest1 =
      _registerName1("originalRequest");
  late final ffi.Pointer<ObjCSel> _sel_currentRequest1 =
      _registerName1("currentRequest");
  late final ffi.Pointer<ObjCSel> _sel_response1 = _registerName1("response");
  late final ffi.Pointer<ObjCSel> _sel_progress1 = _registerName1("progress");
  late final ffi.Pointer<ObjCSel> _sel_earliestBeginDate1 =
      _registerName1("earliestBeginDate");
  late final ffi.Pointer<ObjCSel> _sel_setEarliestBeginDate_1 =
      _registerName1("setEarliestBeginDate:");
  late final ffi.Pointer<ObjCSel> _sel_countOfBytesClientExpectsToSend1 =
      _registerName1("countOfBytesClientExpectsToSend");
  late final ffi.Pointer<ObjCSel> _sel_setCountOfBytesClientExpectsToSend_1 =
      _registerName1("setCountOfBytesClientExpectsToSend:");
  late final ffi.Pointer<ObjCSel> _sel_countOfBytesClientExpectsToReceive1 =
      _registerName1("countOfBytesClientExpectsToReceive");
  late final ffi.Pointer<ObjCSel> _sel_setCountOfBytesClientExpectsToReceive_1 =
      _registerName1("setCountOfBytesClientExpectsToReceive:");
  late final ffi.Pointer<ObjCSel> _sel_countOfBytesReceived1 =
      _registerName1("countOfBytesReceived");
  late final ffi.Pointer<ObjCSel> _sel_countOfBytesSent1 =
      _registerName1("countOfBytesSent");
  late final ffi.Pointer<ObjCSel> _sel_countOfBytesExpectedToSend1 =
      _registerName1("countOfBytesExpectedToSend");
  late final ffi.Pointer<ObjCSel> _sel_countOfBytesExpectedToReceive1 =
      _registerName1("countOfBytesExpectedToReceive");
  late final ffi.Pointer<ObjCSel> _sel_taskDescription1 =
      _registerName1("taskDescription");
  late final ffi.Pointer<ObjCSel> _sel_setTaskDescription_1 =
      _registerName1("setTaskDescription:");
  late final ffi.Pointer<ObjCSel> _sel_state1 = _registerName1("state");
  int _objc_msgSend_215(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_215(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_215Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_215 = __objc_msgSend_215Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_error1 = _registerName1("error");
  late final ffi.Pointer<ObjCSel> _sel_suspend1 = _registerName1("suspend");
  late final ffi.Pointer<ObjCSel> _sel_priority1 = _registerName1("priority");
  late final ffi.Pointer<ObjCSel> _sel_setPriority_1 =
      _registerName1("setPriority:");
  void _objc_msgSend_216(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    double value,
  ) {
    return __objc_msgSend_216(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_216Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Float)>>('objc_msgSend');
  late final __objc_msgSend_216 = __objc_msgSend_216Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, double)>();

  late final ffi.Pointer<ObjCSel> _sel_prefersIncrementalDelivery1 =
      _registerName1("prefersIncrementalDelivery");
  late final ffi.Pointer<ObjCSel> _sel_setPrefersIncrementalDelivery_1 =
      _registerName1("setPrefersIncrementalDelivery:");
  late final ffi.Pointer<ObjCSel> _sel_dataTaskWithRequest_1 =
      _registerName1("dataTaskWithRequest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_217(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
  ) {
    return __objc_msgSend_217(
      obj,
      sel,
      request,
    );
  }

  late final __objc_msgSend_217Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_217 = __objc_msgSend_217Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_dataTaskWithURL_1 =
      _registerName1("dataTaskWithURL:");
  late final ffi.Pointer<ObjCObject> _class_NSURLSessionUploadTask1 =
      _getClass1("NSURLSessionUploadTask");
  late final ffi.Pointer<ObjCSel> _sel_uploadTaskWithRequest_fromFile_1 =
      _registerName1("uploadTaskWithRequest:fromFile:");
  ffi.Pointer<ObjCObject> _objc_msgSend_218(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<ObjCObject> fileURL,
  ) {
    return __objc_msgSend_218(
      obj,
      sel,
      request,
      fileURL,
    );
  }

  late final __objc_msgSend_218Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_218 = __objc_msgSend_218Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_uploadTaskWithRequest_fromData_1 =
      _registerName1("uploadTaskWithRequest:fromData:");
  late final ffi.Pointer<ObjCSel> _sel_uploadTaskWithStreamedRequest_1 =
      _registerName1("uploadTaskWithStreamedRequest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_219(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
  ) {
    return __objc_msgSend_219(
      obj,
      sel,
      request,
    );
  }

  late final __objc_msgSend_219Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_219 = __objc_msgSend_219Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSURLSessionDownloadTask1 =
      _getClass1("NSURLSessionDownloadTask");
  late final ffi.Pointer<ObjCSel> _sel_cancelByProducingResumeData_1 =
      _registerName1("cancelByProducingResumeData:");
  late final ffi.Pointer<ObjCSel> _sel_downloadTaskWithRequest_1 =
      _registerName1("downloadTaskWithRequest:");
  ffi.Pointer<ObjCObject> _objc_msgSend_220(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
  ) {
    return __objc_msgSend_220(
      obj,
      sel,
      request,
    );
  }

  late final __objc_msgSend_220Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_220 = __objc_msgSend_220Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_downloadTaskWithURL_1 =
      _registerName1("downloadTaskWithURL:");
  late final ffi.Pointer<ObjCSel> _sel_downloadTaskWithResumeData_1 =
      _registerName1("downloadTaskWithResumeData:");
  late final ffi.Pointer<ObjCObject> _class_NSURLSessionStreamTask1 =
      _getClass1("NSURLSessionStreamTask");
  late final ffi.Pointer<ObjCSel>
      _sel_readDataOfMinLength_maxLength_timeout_completionHandler_1 =
      _registerName1(
          "readDataOfMinLength:maxLength:timeout:completionHandler:");
  void _objc_msgSend_221(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int minBytes,
    int maxBytes,
    double timeout,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_221(
      obj,
      sel,
      minBytes,
      maxBytes,
      timeout,
      completionHandler,
    );
  }

  late final __objc_msgSend_221Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSUInteger,
              NSUInteger,
              NSTimeInterval,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_221 = __objc_msgSend_221Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int, int,
          double, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_writeData_timeout_completionHandler_1 =
      _registerName1("writeData:timeout:completionHandler:");
  void _objc_msgSend_222(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> data,
    double timeout,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_222(
      obj,
      sel,
      data,
      timeout,
      completionHandler,
    );
  }

  late final __objc_msgSend_222Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSTimeInterval,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_222 = __objc_msgSend_222Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, double, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_captureStreams1 =
      _registerName1("captureStreams");
  late final ffi.Pointer<ObjCSel> _sel_closeWrite1 =
      _registerName1("closeWrite");
  late final ffi.Pointer<ObjCSel> _sel_closeRead1 = _registerName1("closeRead");
  late final ffi.Pointer<ObjCSel> _sel_startSecureConnection1 =
      _registerName1("startSecureConnection");
  late final ffi.Pointer<ObjCSel> _sel_stopSecureConnection1 =
      _registerName1("stopSecureConnection");
  late final ffi.Pointer<ObjCSel> _sel_streamTaskWithHostName_port_1 =
      _registerName1("streamTaskWithHostName:port:");
  ffi.Pointer<ObjCObject> _objc_msgSend_223(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> hostname,
    int port,
  ) {
    return __objc_msgSend_223(
      obj,
      sel,
      hostname,
      port,
    );
  }

  late final __objc_msgSend_223Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_223 = __objc_msgSend_223Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_streamTaskWithNetService_1 =
      _registerName1("streamTaskWithNetService:");
  ffi.Pointer<ObjCObject> _objc_msgSend_224(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> service,
  ) {
    return __objc_msgSend_224(
      obj,
      sel,
      service,
    );
  }

  late final __objc_msgSend_224Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_224 = __objc_msgSend_224Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSURLSessionWebSocketTask1 =
      _getClass1("NSURLSessionWebSocketTask");
  late final ffi.Pointer<ObjCSel> _sel_sendMessage_completionHandler_1 =
      _registerName1("sendMessage:completionHandler:");
  late final ffi.Pointer<ObjCSel> _sel_receiveMessageWithCompletionHandler_1 =
      _registerName1("receiveMessageWithCompletionHandler:");
  void _objc_msgSend_225(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_225(
      obj,
      sel,
      completionHandler,
    );
  }

  late final __objc_msgSend_225Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_225 = __objc_msgSend_225Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_sendPingWithPongReceiveHandler_1 =
      _registerName1("sendPingWithPongReceiveHandler:");
  late final ffi.Pointer<ObjCSel> _sel_cancelWithCloseCode_reason_1 =
      _registerName1("cancelWithCloseCode:reason:");
  void _objc_msgSend_226(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int closeCode,
    ffi.Pointer<ObjCObject> reason,
  ) {
    return __objc_msgSend_226(
      obj,
      sel,
      closeCode,
      reason,
    );
  }

  late final __objc_msgSend_226Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_226 = __objc_msgSend_226Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_maximumMessageSize1 =
      _registerName1("maximumMessageSize");
  late final ffi.Pointer<ObjCSel> _sel_setMaximumMessageSize_1 =
      _registerName1("setMaximumMessageSize:");
  late final ffi.Pointer<ObjCSel> _sel_closeCode1 = _registerName1("closeCode");
  int _objc_msgSend_227(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_227(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_227Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_227 = __objc_msgSend_227Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_closeReason1 =
      _registerName1("closeReason");
  late final ffi.Pointer<ObjCSel> _sel_webSocketTaskWithURL_1 =
      _registerName1("webSocketTaskWithURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_228(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
  ) {
    return __objc_msgSend_228(
      obj,
      sel,
      url,
    );
  }

  late final __objc_msgSend_228Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_228 = __objc_msgSend_228Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_webSocketTaskWithURL_protocols_1 =
      _registerName1("webSocketTaskWithURL:protocols:");
  ffi.Pointer<ObjCObject> _objc_msgSend_229(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    ffi.Pointer<ObjCObject> protocols,
  ) {
    return __objc_msgSend_229(
      obj,
      sel,
      url,
      protocols,
    );
  }

  late final __objc_msgSend_229Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_229 = __objc_msgSend_229Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_webSocketTaskWithRequest_1 =
      _registerName1("webSocketTaskWithRequest:");
  late final ffi.Pointer<ObjCSel> _sel_dataTaskWithRequest_completionHandler_1 =
      _registerName1("dataTaskWithRequest:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_230(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_230(
      obj,
      sel,
      request,
      completionHandler,
    );
  }

  late final __objc_msgSend_230Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_230 = __objc_msgSend_230Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_dataTaskWithURL_completionHandler_1 =
      _registerName1("dataTaskWithURL:completionHandler:");
  late final ffi.Pointer<ObjCSel>
      _sel_uploadTaskWithRequest_fromFile_completionHandler_1 =
      _registerName1("uploadTaskWithRequest:fromFile:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_231(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<ObjCObject> fileURL,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_231(
      obj,
      sel,
      request,
      fileURL,
      completionHandler,
    );
  }

  late final __objc_msgSend_231Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_231 = __objc_msgSend_231Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_uploadTaskWithRequest_fromData_completionHandler_1 =
      _registerName1("uploadTaskWithRequest:fromData:completionHandler:");
  late final ffi.Pointer<ObjCSel>
      _sel_downloadTaskWithRequest_completionHandler_1 =
      _registerName1("downloadTaskWithRequest:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_232(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> request,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_232(
      obj,
      sel,
      request,
      completionHandler,
    );
  }

  late final __objc_msgSend_232Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_232 = __objc_msgSend_232Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_downloadTaskWithURL_completionHandler_1 =
      _registerName1("downloadTaskWithURL:completionHandler:");
  late final ffi.Pointer<ObjCSel>
      _sel_downloadTaskWithResumeData_completionHandler_1 =
      _registerName1("downloadTaskWithResumeData:completionHandler:");
  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityDefault =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityDefault');

  double get NSURLSessionTaskPriorityDefault =>
      _NSURLSessionTaskPriorityDefault.value;

  set NSURLSessionTaskPriorityDefault(double value) =>
      _NSURLSessionTaskPriorityDefault.value = value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityLow =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityLow');

  double get NSURLSessionTaskPriorityLow => _NSURLSessionTaskPriorityLow.value;

  set NSURLSessionTaskPriorityLow(double value) =>
      _NSURLSessionTaskPriorityLow.value = value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityHigh =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityHigh');

  double get NSURLSessionTaskPriorityHigh =>
      _NSURLSessionTaskPriorityHigh.value;

  set NSURLSessionTaskPriorityHigh(double value) =>
      _NSURLSessionTaskPriorityHigh.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSURLSessionWebSocketMessage1 =
      _getClass1("NSURLSessionWebSocketMessage");
  late final ffi.Pointer<ObjCSel> _sel_type1 = _registerName1("type");
  int _objc_msgSend_233(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_233(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_233Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_233 = __objc_msgSend_233Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCObject> _class_NSURLSessionConfiguration1 =
      _getClass1("NSURLSessionConfiguration");
  late final ffi.Pointer<ObjCSel> _sel_defaultSessionConfiguration1 =
      _registerName1("defaultSessionConfiguration");
  late final ffi.Pointer<ObjCSel> _sel_ephemeralSessionConfiguration1 =
      _registerName1("ephemeralSessionConfiguration");
  late final ffi.Pointer<ObjCSel>
      _sel_backgroundSessionConfigurationWithIdentifier_1 =
      _registerName1("backgroundSessionConfigurationWithIdentifier:");
  ffi.Pointer<ObjCObject> _objc_msgSend_234(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> identifier,
  ) {
    return __objc_msgSend_234(
      obj,
      sel,
      identifier,
    );
  }

  late final __objc_msgSend_234Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_234 = __objc_msgSend_234Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_identifier1 =
      _registerName1("identifier");
  late final ffi.Pointer<ObjCSel> _sel_requestCachePolicy1 =
      _registerName1("requestCachePolicy");
  late final ffi.Pointer<ObjCSel> _sel_setRequestCachePolicy_1 =
      _registerName1("setRequestCachePolicy:");
  late final ffi.Pointer<ObjCSel> _sel_timeoutIntervalForRequest1 =
      _registerName1("timeoutIntervalForRequest");
  late final ffi.Pointer<ObjCSel> _sel_setTimeoutIntervalForRequest_1 =
      _registerName1("setTimeoutIntervalForRequest:");
  late final ffi.Pointer<ObjCSel> _sel_timeoutIntervalForResource1 =
      _registerName1("timeoutIntervalForResource");
  late final ffi.Pointer<ObjCSel> _sel_setTimeoutIntervalForResource_1 =
      _registerName1("setTimeoutIntervalForResource:");
  late final ffi.Pointer<ObjCSel> _sel_waitsForConnectivity1 =
      _registerName1("waitsForConnectivity");
  late final ffi.Pointer<ObjCSel> _sel_setWaitsForConnectivity_1 =
      _registerName1("setWaitsForConnectivity:");
  late final ffi.Pointer<ObjCSel> _sel_isDiscretionary1 =
      _registerName1("isDiscretionary");
  late final ffi.Pointer<ObjCSel> _sel_setDiscretionary_1 =
      _registerName1("setDiscretionary:");
  late final ffi.Pointer<ObjCSel> _sel_sharedContainerIdentifier1 =
      _registerName1("sharedContainerIdentifier");
  late final ffi.Pointer<ObjCSel> _sel_setSharedContainerIdentifier_1 =
      _registerName1("setSharedContainerIdentifier:");
  late final ffi.Pointer<ObjCSel> _sel_sessionSendsLaunchEvents1 =
      _registerName1("sessionSendsLaunchEvents");
  late final ffi.Pointer<ObjCSel> _sel_setSessionSendsLaunchEvents_1 =
      _registerName1("setSessionSendsLaunchEvents:");
  late final ffi.Pointer<ObjCSel> _sel_connectionProxyDictionary1 =
      _registerName1("connectionProxyDictionary");
  late final ffi.Pointer<ObjCSel> _sel_setConnectionProxyDictionary_1 =
      _registerName1("setConnectionProxyDictionary:");
  late final ffi.Pointer<ObjCSel> _sel_TLSMinimumSupportedProtocol1 =
      _registerName1("TLSMinimumSupportedProtocol");
  int _objc_msgSend_235(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_235(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_235Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_235 = __objc_msgSend_235Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setTLSMinimumSupportedProtocol_1 =
      _registerName1("setTLSMinimumSupportedProtocol:");
  void _objc_msgSend_236(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_236(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_236Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_236 = __objc_msgSend_236Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_TLSMaximumSupportedProtocol1 =
      _registerName1("TLSMaximumSupportedProtocol");
  late final ffi.Pointer<ObjCSel> _sel_setTLSMaximumSupportedProtocol_1 =
      _registerName1("setTLSMaximumSupportedProtocol:");
  late final ffi.Pointer<ObjCSel> _sel_TLSMinimumSupportedProtocolVersion1 =
      _registerName1("TLSMinimumSupportedProtocolVersion");
  int _objc_msgSend_237(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_237(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_237Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_237 = __objc_msgSend_237Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setTLSMinimumSupportedProtocolVersion_1 =
      _registerName1("setTLSMinimumSupportedProtocolVersion:");
  void _objc_msgSend_238(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_238(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_238Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_238 = __objc_msgSend_238Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_TLSMaximumSupportedProtocolVersion1 =
      _registerName1("TLSMaximumSupportedProtocolVersion");
  late final ffi.Pointer<ObjCSel> _sel_setTLSMaximumSupportedProtocolVersion_1 =
      _registerName1("setTLSMaximumSupportedProtocolVersion:");
  late final ffi.Pointer<ObjCSel> _sel_HTTPShouldSetCookies1 =
      _registerName1("HTTPShouldSetCookies");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPShouldSetCookies_1 =
      _registerName1("setHTTPShouldSetCookies:");
  late final ffi.Pointer<ObjCSel> _sel_HTTPCookieAcceptPolicy1 =
      _registerName1("HTTPCookieAcceptPolicy");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPCookieAcceptPolicy_1 =
      _registerName1("setHTTPCookieAcceptPolicy:");
  late final ffi.Pointer<ObjCSel> _sel_HTTPAdditionalHeaders1 =
      _registerName1("HTTPAdditionalHeaders");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPAdditionalHeaders_1 =
      _registerName1("setHTTPAdditionalHeaders:");
  late final ffi.Pointer<ObjCSel> _sel_HTTPMaximumConnectionsPerHost1 =
      _registerName1("HTTPMaximumConnectionsPerHost");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPMaximumConnectionsPerHost_1 =
      _registerName1("setHTTPMaximumConnectionsPerHost:");
  late final ffi.Pointer<ObjCSel> _sel_HTTPCookieStorage1 =
      _registerName1("HTTPCookieStorage");
  late final ffi.Pointer<ObjCSel> _sel_setHTTPCookieStorage_1 =
      _registerName1("setHTTPCookieStorage:");
  late final ffi.Pointer<ObjCSel> _sel_URLCredentialStorage1 =
      _registerName1("URLCredentialStorage");
  late final ffi.Pointer<ObjCSel> _sel_setURLCredentialStorage_1 =
      _registerName1("setURLCredentialStorage:");
  late final ffi.Pointer<ObjCSel> _sel_URLCache1 = _registerName1("URLCache");
  late final ffi.Pointer<ObjCSel> _sel_setURLCache_1 =
      _registerName1("setURLCache:");
  late final ffi.Pointer<ObjCSel> _sel_shouldUseExtendedBackgroundIdleMode1 =
      _registerName1("shouldUseExtendedBackgroundIdleMode");
  late final ffi.Pointer<ObjCSel>
      _sel_setShouldUseExtendedBackgroundIdleMode_1 =
      _registerName1("setShouldUseExtendedBackgroundIdleMode:");
  late final ffi.Pointer<ObjCSel> _sel_protocolClasses1 =
      _registerName1("protocolClasses");
  late final ffi.Pointer<ObjCSel> _sel_setProtocolClasses_1 =
      _registerName1("setProtocolClasses:");
  late final ffi.Pointer<ObjCSel> _sel_multipathServiceType1 =
      _registerName1("multipathServiceType");
  int _objc_msgSend_239(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_239(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_239Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_239 = __objc_msgSend_239Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setMultipathServiceType_1 =
      _registerName1("setMultipathServiceType:");
  void _objc_msgSend_240(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_240(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_240Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_240 = __objc_msgSend_240Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_backgroundSessionConfiguration_1 =
      _registerName1("backgroundSessionConfiguration:");
  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSURLSessionDownloadTaskResumeData =
      _lookup<ffi.Pointer<ObjCObject>>('NSURLSessionDownloadTaskResumeData');

  ffi.Pointer<ObjCObject> get NSURLSessionDownloadTaskResumeData =>
      _NSURLSessionDownloadTaskResumeData.value;

  set NSURLSessionDownloadTaskResumeData(ffi.Pointer<ObjCObject> value) =>
      _NSURLSessionDownloadTaskResumeData.value = value;

  late final ffi.Pointer<ObjCObject>
      _class_NSURLSessionTaskTransactionMetrics1 =
      _getClass1("NSURLSessionTaskTransactionMetrics");
  late final ffi.Pointer<ObjCSel> _sel_request1 = _registerName1("request");
  late final ffi.Pointer<ObjCSel> _sel_fetchStartDate1 =
      _registerName1("fetchStartDate");
  late final ffi.Pointer<ObjCSel> _sel_domainLookupStartDate1 =
      _registerName1("domainLookupStartDate");
  late final ffi.Pointer<ObjCSel> _sel_domainLookupEndDate1 =
      _registerName1("domainLookupEndDate");
  late final ffi.Pointer<ObjCSel> _sel_connectStartDate1 =
      _registerName1("connectStartDate");
  late final ffi.Pointer<ObjCSel> _sel_secureConnectionStartDate1 =
      _registerName1("secureConnectionStartDate");
  late final ffi.Pointer<ObjCSel> _sel_secureConnectionEndDate1 =
      _registerName1("secureConnectionEndDate");
  late final ffi.Pointer<ObjCSel> _sel_connectEndDate1 =
      _registerName1("connectEndDate");
  late final ffi.Pointer<ObjCSel> _sel_requestStartDate1 =
      _registerName1("requestStartDate");
  late final ffi.Pointer<ObjCSel> _sel_requestEndDate1 =
      _registerName1("requestEndDate");
  late final ffi.Pointer<ObjCSel> _sel_responseStartDate1 =
      _registerName1("responseStartDate");
  late final ffi.Pointer<ObjCSel> _sel_responseEndDate1 =
      _registerName1("responseEndDate");
  late final ffi.Pointer<ObjCSel> _sel_networkProtocolName1 =
      _registerName1("networkProtocolName");
  late final ffi.Pointer<ObjCSel> _sel_isProxyConnection1 =
      _registerName1("isProxyConnection");
  late final ffi.Pointer<ObjCSel> _sel_isReusedConnection1 =
      _registerName1("isReusedConnection");
  late final ffi.Pointer<ObjCSel> _sel_resourceFetchType1 =
      _registerName1("resourceFetchType");
  int _objc_msgSend_241(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_241(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_241Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_241 = __objc_msgSend_241Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_countOfRequestHeaderBytesSent1 =
      _registerName1("countOfRequestHeaderBytesSent");
  late final ffi.Pointer<ObjCSel> _sel_countOfRequestBodyBytesSent1 =
      _registerName1("countOfRequestBodyBytesSent");
  late final ffi.Pointer<ObjCSel> _sel_countOfRequestBodyBytesBeforeEncoding1 =
      _registerName1("countOfRequestBodyBytesBeforeEncoding");
  late final ffi.Pointer<ObjCSel> _sel_countOfResponseHeaderBytesReceived1 =
      _registerName1("countOfResponseHeaderBytesReceived");
  late final ffi.Pointer<ObjCSel> _sel_countOfResponseBodyBytesReceived1 =
      _registerName1("countOfResponseBodyBytesReceived");
  late final ffi.Pointer<ObjCSel> _sel_countOfResponseBodyBytesAfterDecoding1 =
      _registerName1("countOfResponseBodyBytesAfterDecoding");
  late final ffi.Pointer<ObjCSel> _sel_localAddress1 =
      _registerName1("localAddress");
  late final ffi.Pointer<ObjCSel> _sel_localPort1 = _registerName1("localPort");
  late final ffi.Pointer<ObjCSel> _sel_remoteAddress1 =
      _registerName1("remoteAddress");
  late final ffi.Pointer<ObjCSel> _sel_remotePort1 =
      _registerName1("remotePort");
  late final ffi.Pointer<ObjCSel> _sel_negotiatedTLSProtocolVersion1 =
      _registerName1("negotiatedTLSProtocolVersion");
  late final ffi.Pointer<ObjCSel> _sel_negotiatedTLSCipherSuite1 =
      _registerName1("negotiatedTLSCipherSuite");
  late final ffi.Pointer<ObjCSel> _sel_isCellular1 =
      _registerName1("isCellular");
  late final ffi.Pointer<ObjCSel> _sel_isExpensive1 =
      _registerName1("isExpensive");
  late final ffi.Pointer<ObjCSel> _sel_isConstrained1 =
      _registerName1("isConstrained");
  late final ffi.Pointer<ObjCSel> _sel_isMultipath1 =
      _registerName1("isMultipath");
  late final ffi.Pointer<ObjCSel> _sel_domainResolutionProtocol1 =
      _registerName1("domainResolutionProtocol");
  int _objc_msgSend_242(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_242(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_242Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_242 = __objc_msgSend_242Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCObject> _class_NSURLSessionTaskMetrics1 =
      _getClass1("NSURLSessionTaskMetrics");
  late final ffi.Pointer<ObjCSel> _sel_transactionMetrics1 =
      _registerName1("transactionMetrics");
  late final ffi.Pointer<ObjCSel> _sel_taskInterval1 =
      _registerName1("taskInterval");
  late final ffi.Pointer<ObjCSel> _sel_redirectCount1 =
      _registerName1("redirectCount");
  ffi.Pointer<ObjCObject> NSStringFromSelector5(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector5(
      aSelector,
    );
  }

  late final _NSStringFromSelector5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector5 = _NSStringFromSelector5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString5(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString5(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString5 = _NSSelectorFromString5Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass5(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass5(
      aClass,
    );
  }

  late final _NSStringFromClass5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass5 = _NSStringFromClass5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString5(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString5(
      aClassName,
    );
  }

  late final _NSClassFromString5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString5 = _NSClassFromString5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol5(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol5(
      proto,
    );
  }

  late final _NSStringFromProtocol5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol5 = _NSStringFromProtocol5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString5(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString5(
      namestr,
    );
  }

  late final _NSProtocolFromString5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString5 = _NSProtocolFromString5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment5(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment5(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment5 = _NSGetSizeAndAlignment5Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog5(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog5(
      format,
    );
  }

  late final _NSLog5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog5 =
      _NSLog5Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv5(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv5(
      format,
      args,
    );
  }

  late final _NSLogv5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv5 =
      _NSLogv5Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake5(
    int loc,
    int len,
  ) {
    return ___CFRangeMake5(
      loc,
      len,
    );
  }

  late final ___CFRangeMake5Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake5 =
      ___CFRangeMake5Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID5() {
    return _CFNullGetTypeID5();
  }

  late final _CFNullGetTypeID5Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID5 =
      _CFNullGetTypeID5Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID5() {
    return _CFAllocatorGetTypeID5();
  }

  late final _CFAllocatorGetTypeID5Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID5 =
      _CFAllocatorGetTypeID5Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault5(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault5(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault5 =
      _CFAllocatorSetDefault5Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault5() {
    return _CFAllocatorGetDefault5();
  }

  late final _CFAllocatorGetDefault5Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault5 =
      _CFAllocatorGetDefault5Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate5(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate5(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate5Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate5 = _CFAllocatorCreate5Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate5(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate5(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate5 = _CFAllocatorAllocate5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate5(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate5(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate5 = _CFAllocatorReallocate5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate5(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate5(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate5 = _CFAllocatorDeallocate5Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize5(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize5(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize5Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize5 =
      _CFAllocatorGetPreferredSizeForSize5Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext5(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext5(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext5 = _CFAllocatorGetContext5Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID5(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID5(
      cf,
    );
  }

  late final _CFGetTypeID5Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID5 =
      _CFGetTypeID5Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription5(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription5(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription5Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription5 =
      _CFCopyTypeIDDescription5Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain5(
    CFTypeRef cf,
  ) {
    return _CFRetain5(
      cf,
    );
  }

  late final _CFRetain5Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain5 =
      _CFRetain5Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease5(
    CFTypeRef cf,
  ) {
    return _CFRelease5(
      cf,
    );
  }

  late final _CFRelease5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease5 =
      _CFRelease5Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease5(
    CFTypeRef arg,
  ) {
    return _CFAutorelease5(
      arg,
    );
  }

  late final _CFAutorelease5Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease5 =
      _CFAutorelease5Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount5(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount5(
      cf,
    );
  }

  late final _CFGetRetainCount5Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount5 =
      _CFGetRetainCount5Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual5(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual5(
      cf1,
      cf2,
    );
  }

  late final _CFEqual5Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual5 =
      _CFEqual5Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash5(
    CFTypeRef cf,
  ) {
    return _CFHash5(
      cf,
    );
  }

  late final _CFHash5Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash5 = _CFHash5Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription5(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription5(
      cf,
    );
  }

  late final _CFCopyDescription5Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription5 =
      _CFCopyDescription5Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator5(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator5(
      cf,
    );
  }

  late final _CFGetAllocator5Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator5 =
      _CFGetAllocator5Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable5(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable5(
      cf,
    );
  }

  late final _CFMakeCollectable5Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable5 =
      _CFMakeCollectable5Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone5() {
    return _NSDefaultMallocZone5();
  }

  late final _NSDefaultMallocZone5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone5 =
      _NSDefaultMallocZone5Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone5(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone5(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone5 = _NSCreateZone5Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone5(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone5(
      zone,
    );
  }

  late final _NSRecycleZone5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone5 =
      _NSRecycleZone5Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName5(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName5(
      zone,
      name,
    );
  }

  late final _NSSetZoneName5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName5 = _NSSetZoneName5Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName5(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName5(
      zone,
    );
  }

  late final _NSZoneName5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName5 = _NSZoneName5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer5(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer5(
      ptr,
    );
  }

  late final _NSZoneFromPointer5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer5 = _NSZoneFromPointer5Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc5(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc5(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc5 = _NSZoneMalloc5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc5(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc5(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc5 = _NSZoneCalloc5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc5(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc5(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc5 = _NSZoneRealloc5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree5(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree5(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree5 = _NSZoneFree5Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable5(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable5(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable5 = _NSAllocateCollectable5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable5(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable5(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable5 =
      _NSReallocateCollectable5Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize5() {
    return _NSPageSize5();
  }

  late final _NSPageSize5Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize5 = _NSPageSize5Ptr.asFunction<int Function()>();

  int NSLogPageSize5() {
    return _NSLogPageSize5();
  }

  late final _NSLogPageSize5Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize5 = _NSLogPageSize5Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize5(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize5(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize5Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize5 =
      _NSRoundUpToMultipleOfPageSize5Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize5(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize5(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize5Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize5 =
      _NSRoundDownToMultipleOfPageSize5Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages5(
    int bytes,
  ) {
    return _NSAllocateMemoryPages5(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages5Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages5 = _NSAllocateMemoryPages5Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages5(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages5(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages5 = _NSDeallocateMemoryPages5Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages5(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages5(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages5 = _NSCopyMemoryPages5Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable5() {
    return _NSRealMemoryAvailable5();
  }

  late final _NSRealMemoryAvailable5Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable5 =
      _NSRealMemoryAvailable5Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject5(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject5(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject5 = _NSAllocateObject5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject5(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject5(
      object,
    );
  }

  late final _NSDeallocateObject5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject5 = _NSDeallocateObject5Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject5(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject5(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject5 = _NSCopyObject5Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone5(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone5(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone5 = _NSShouldRetainWithZone5Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount5(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount5(
      object,
    );
  }

  late final _NSIncrementExtraRefCount5Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount5 = _NSIncrementExtraRefCount5Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero5(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero5(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero5Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero5 =
      _NSDecrementExtraRefCountWasZero5Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount5(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount5(
      object,
    );
  }

  late final _NSExtraRefCount5Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount5 =
      _NSExtraRefCount5Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  NSRange NSUnionRange2(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSUnionRange2(
      range1,
      range2,
    );
  }

  late final _NSUnionRange2Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSUnionRange');
  late final _NSUnionRange2 =
      _NSUnionRange2Ptr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSRange NSIntersectionRange2(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSIntersectionRange2(
      range1,
      range2,
    );
  }

  late final _NSIntersectionRange2Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSIntersectionRange');
  late final _NSIntersectionRange2 =
      _NSIntersectionRange2Ptr.asFunction<NSRange Function(NSRange, NSRange)>();

  ffi.Pointer<ObjCObject> NSStringFromRange2(
    NSRange range,
  ) {
    return _NSStringFromRange2(
      range,
    );
  }

  late final _NSStringFromRange2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(NSRange)>>(
          'NSStringFromRange');
  late final _NSStringFromRange2 = _NSStringFromRange2Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(NSRange)>();

  NSRange NSRangeFromString2(
    ffi.Pointer<ObjCObject> aString,
  ) {
    return _NSRangeFromString2(
      aString,
    );
  }

  late final _NSRangeFromString2Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(ffi.Pointer<ObjCObject>)>>(
          'NSRangeFromString');
  late final _NSRangeFromString2 = _NSRangeFromString2Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSItemProvider1 =
      _getClass1("NSItemProvider");
  late final ffi.Pointer<ObjCSel>
      _sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1 =
      _registerName1(
          "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:");
  void _objc_msgSend_243(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_243(
      obj,
      sel,
      typeIdentifier,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_243Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_243 = __objc_msgSend_243Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1 =
      _registerName1(
          "registerFileRepresentationForTypeIdentifier:fileOptions:visibility:loadHandler:");
  void _objc_msgSend_244(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
    int visibility,
    ffi.Pointer<_ObjCBlock> loadHandler,
  ) {
    return __objc_msgSend_244(
      obj,
      sel,
      typeIdentifier,
      fileOptions,
      visibility,
      loadHandler,
    );
  }

  late final __objc_msgSend_244Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_244 = __objc_msgSend_244Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, int, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_registeredTypeIdentifiers1 =
      _registerName1("registeredTypeIdentifiers");
  late final ffi.Pointer<ObjCSel> _sel_hasItemConformingToTypeIdentifier_1 =
      _registerName1("hasItemConformingToTypeIdentifier:");
  late final ffi.Pointer<ObjCSel>
      _sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1 =
      _registerName1(
          "hasRepresentationConformingToTypeIdentifier:fileOptions:");
  bool _objc_msgSend_245(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    int fileOptions,
  ) {
    return __objc_msgSend_245(
          obj,
          sel,
          typeIdentifier,
          fileOptions,
        ) !=
        0;
  }

  late final __objc_msgSend_245Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_245 = __objc_msgSend_245Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_loadDataRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadDataRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_246(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_246(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_246Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_246 = __objc_msgSend_246Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_loadFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadFileRepresentationForTypeIdentifier:completionHandler:");
  late final ffi.Pointer<ObjCSel>
      _sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1 =
      _registerName1(
          "loadInPlaceFileRepresentationForTypeIdentifier:completionHandler:");
  ffi.Pointer<ObjCObject> _objc_msgSend_247(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<_ObjCBlock> completionHandler,
  ) {
    return __objc_msgSend_247(
      obj,
      sel,
      typeIdentifier,
      completionHandler,
    );
  }

  late final __objc_msgSend_247Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_247 = __objc_msgSend_247Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_suggestedName1 =
      _registerName1("suggestedName");
  late final ffi.Pointer<ObjCSel> _sel_setSuggestedName_1 =
      _registerName1("setSuggestedName:");
  late final ffi.Pointer<ObjCSel> _sel_initWithObject_1 =
      _registerName1("initWithObject:");
  late final ffi.Pointer<ObjCSel> _sel_registerObject_visibility_1 =
      _registerName1("registerObject:visibility:");
  void _objc_msgSend_248(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> object,
    int visibility,
  ) {
    return __objc_msgSend_248(
      obj,
      sel,
      object,
      visibility,
    );
  }

  late final __objc_msgSend_248Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_248 = __objc_msgSend_248Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_registerObjectOfClass_visibility_loadHandler_1 =
      _registerName1("registerObjectOfClass:visibility:loadHandler:");
  late final ffi.Pointer<ObjCSel> _sel_canLoadObjectOfClass_1 =
      _registerName1("canLoadObjectOfClass:");
  late final ffi.Pointer<ObjCSel> _sel_loadObjectOfClass_completionHandler_1 =
      _registerName1("loadObjectOfClass:completionHandler:");
  late final ffi.Pointer<ObjCSel> _sel_initWithItem_typeIdentifier_1 =
      _registerName1("initWithItem:typeIdentifier:");
  late final ffi.Pointer<ObjCSel>
      _sel_registerItemForTypeIdentifier_loadHandler_1 =
      _registerName1("registerItemForTypeIdentifier:loadHandler:");
  void _objc_msgSend_249(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    NSItemProviderLoadHandler loadHandler,
  ) {
    return __objc_msgSend_249(
      obj,
      sel,
      typeIdentifier,
      loadHandler,
    );
  }

  late final __objc_msgSend_249Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderLoadHandler)>>('objc_msgSend');
  late final __objc_msgSend_249 = __objc_msgSend_249Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSItemProviderLoadHandler)>();

  late final ffi.Pointer<ObjCSel>
      _sel_loadItemForTypeIdentifier_options_completionHandler_1 =
      _registerName1("loadItemForTypeIdentifier:options:completionHandler:");
  void _objc_msgSend_250(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> typeIdentifier,
    ffi.Pointer<ObjCObject> options,
    NSItemProviderCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_250(
      obj,
      sel,
      typeIdentifier,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_250Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_250 = __objc_msgSend_250Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          NSItemProviderCompletionHandler)>();

  late final ffi.Pointer<ObjCSel> _sel_previewImageHandler1 =
      _registerName1("previewImageHandler");
  NSItemProviderLoadHandler _objc_msgSend_251(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_251(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_251Ptr = _lookup<
      ffi.NativeFunction<
          NSItemProviderLoadHandler Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_251 = __objc_msgSend_251Ptr.asFunction<
      NSItemProviderLoadHandler Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setPreviewImageHandler_1 =
      _registerName1("setPreviewImageHandler:");
  void _objc_msgSend_252(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSItemProviderLoadHandler value,
  ) {
    return __objc_msgSend_252(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_252Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSItemProviderLoadHandler)>>('objc_msgSend');
  late final __objc_msgSend_252 = __objc_msgSend_252Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSItemProviderLoadHandler)>();

  late final ffi.Pointer<ObjCSel>
      _sel_loadPreviewImageWithOptions_completionHandler_1 =
      _registerName1("loadPreviewImageWithOptions:completionHandler:");
  void _objc_msgSend_253(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> options,
    NSItemProviderCompletionHandler completionHandler,
  ) {
    return __objc_msgSend_253(
      obj,
      sel,
      options,
      completionHandler,
    );
  }

  late final __objc_msgSend_253Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSItemProviderCompletionHandler)>>('objc_msgSend');
  late final __objc_msgSend_253 = __objc_msgSend_253Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, NSItemProviderCompletionHandler)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSItemProviderPreferredImageSizeKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSItemProviderPreferredImageSizeKey');

  ffi.Pointer<ObjCObject> get NSItemProviderPreferredImageSizeKey =>
      _NSItemProviderPreferredImageSizeKey.value;

  set NSItemProviderPreferredImageSizeKey(ffi.Pointer<ObjCObject> value) =>
      _NSItemProviderPreferredImageSizeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSExtensionJavaScriptPreprocessingResultsKey =
      _lookup<ffi.Pointer<ObjCObject>>(
          'NSExtensionJavaScriptPreprocessingResultsKey');

  ffi.Pointer<ObjCObject> get NSExtensionJavaScriptPreprocessingResultsKey =>
      _NSExtensionJavaScriptPreprocessingResultsKey.value;

  set NSExtensionJavaScriptPreprocessingResultsKey(
          ffi.Pointer<ObjCObject> value) =>
      _NSExtensionJavaScriptPreprocessingResultsKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSExtensionJavaScriptFinalizeArgumentKey =
      _lookup<ffi.Pointer<ObjCObject>>(
          'NSExtensionJavaScriptFinalizeArgumentKey');

  ffi.Pointer<ObjCObject> get NSExtensionJavaScriptFinalizeArgumentKey =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value;

  set NSExtensionJavaScriptFinalizeArgumentKey(ffi.Pointer<ObjCObject> value) =>
      _NSExtensionJavaScriptFinalizeArgumentKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSItemProviderErrorDomain =
      _lookup<ffi.Pointer<ObjCObject>>('NSItemProviderErrorDomain');

  ffi.Pointer<ObjCObject> get NSItemProviderErrorDomain =>
      _NSItemProviderErrorDomain.value;

  set NSItemProviderErrorDomain(ffi.Pointer<ObjCObject> value) =>
      _NSItemProviderErrorDomain.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToKatakana =
      _lookup<NSStringTransform>('NSStringTransformLatinToKatakana');

  NSStringTransform get NSStringTransformLatinToKatakana =>
      _NSStringTransformLatinToKatakana.value;

  set NSStringTransformLatinToKatakana(NSStringTransform value) =>
      _NSStringTransformLatinToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHiragana =
      _lookup<NSStringTransform>('NSStringTransformLatinToHiragana');

  NSStringTransform get NSStringTransformLatinToHiragana =>
      _NSStringTransformLatinToHiragana.value;

  set NSStringTransformLatinToHiragana(NSStringTransform value) =>
      _NSStringTransformLatinToHiragana.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHangul =
      _lookup<NSStringTransform>('NSStringTransformLatinToHangul');

  NSStringTransform get NSStringTransformLatinToHangul =>
      _NSStringTransformLatinToHangul.value;

  set NSStringTransformLatinToHangul(NSStringTransform value) =>
      _NSStringTransformLatinToHangul.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToArabic =
      _lookup<NSStringTransform>('NSStringTransformLatinToArabic');

  NSStringTransform get NSStringTransformLatinToArabic =>
      _NSStringTransformLatinToArabic.value;

  set NSStringTransformLatinToArabic(NSStringTransform value) =>
      _NSStringTransformLatinToArabic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToHebrew =
      _lookup<NSStringTransform>('NSStringTransformLatinToHebrew');

  NSStringTransform get NSStringTransformLatinToHebrew =>
      _NSStringTransformLatinToHebrew.value;

  set NSStringTransformLatinToHebrew(NSStringTransform value) =>
      _NSStringTransformLatinToHebrew.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToThai =
      _lookup<NSStringTransform>('NSStringTransformLatinToThai');

  NSStringTransform get NSStringTransformLatinToThai =>
      _NSStringTransformLatinToThai.value;

  set NSStringTransformLatinToThai(NSStringTransform value) =>
      _NSStringTransformLatinToThai.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToCyrillic =
      _lookup<NSStringTransform>('NSStringTransformLatinToCyrillic');

  NSStringTransform get NSStringTransformLatinToCyrillic =>
      _NSStringTransformLatinToCyrillic.value;

  set NSStringTransformLatinToCyrillic(NSStringTransform value) =>
      _NSStringTransformLatinToCyrillic.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformLatinToGreek =
      _lookup<NSStringTransform>('NSStringTransformLatinToGreek');

  NSStringTransform get NSStringTransformLatinToGreek =>
      _NSStringTransformLatinToGreek.value;

  set NSStringTransformLatinToGreek(NSStringTransform value) =>
      _NSStringTransformLatinToGreek.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToLatin =
      _lookup<NSStringTransform>('NSStringTransformToLatin');

  NSStringTransform get NSStringTransformToLatin =>
      _NSStringTransformToLatin.value;

  set NSStringTransformToLatin(NSStringTransform value) =>
      _NSStringTransformToLatin.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformMandarinToLatin =
      _lookup<NSStringTransform>('NSStringTransformMandarinToLatin');

  NSStringTransform get NSStringTransformMandarinToLatin =>
      _NSStringTransformMandarinToLatin.value;

  set NSStringTransformMandarinToLatin(NSStringTransform value) =>
      _NSStringTransformMandarinToLatin.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformHiraganaToKatakana =
      _lookup<NSStringTransform>('NSStringTransformHiraganaToKatakana');

  NSStringTransform get NSStringTransformHiraganaToKatakana =>
      _NSStringTransformHiraganaToKatakana.value;

  set NSStringTransformHiraganaToKatakana(NSStringTransform value) =>
      _NSStringTransformHiraganaToKatakana.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformFullwidthToHalfwidth =
      _lookup<NSStringTransform>('NSStringTransformFullwidthToHalfwidth');

  NSStringTransform get NSStringTransformFullwidthToHalfwidth =>
      _NSStringTransformFullwidthToHalfwidth.value;

  set NSStringTransformFullwidthToHalfwidth(NSStringTransform value) =>
      _NSStringTransformFullwidthToHalfwidth.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToXMLHex =
      _lookup<NSStringTransform>('NSStringTransformToXMLHex');

  NSStringTransform get NSStringTransformToXMLHex =>
      _NSStringTransformToXMLHex.value;

  set NSStringTransformToXMLHex(NSStringTransform value) =>
      _NSStringTransformToXMLHex.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformToUnicodeName =
      _lookup<NSStringTransform>('NSStringTransformToUnicodeName');

  NSStringTransform get NSStringTransformToUnicodeName =>
      _NSStringTransformToUnicodeName.value;

  set NSStringTransformToUnicodeName(NSStringTransform value) =>
      _NSStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<NSStringTransform>
      _NSStringTransformStripCombiningMarks =
      _lookup<NSStringTransform>('NSStringTransformStripCombiningMarks');

  NSStringTransform get NSStringTransformStripCombiningMarks =>
      _NSStringTransformStripCombiningMarks.value;

  set NSStringTransformStripCombiningMarks(NSStringTransform value) =>
      _NSStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<NSStringTransform> _NSStringTransformStripDiacritics =
      _lookup<NSStringTransform>('NSStringTransformStripDiacritics');

  NSStringTransform get NSStringTransformStripDiacritics =>
      _NSStringTransformStripDiacritics.value;

  set NSStringTransformStripDiacritics(NSStringTransform value) =>
      _NSStringTransformStripDiacritics.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionSuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionSuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionSuggestedEncodingsKey =>
          _NSStringEncodingDetectionSuggestedEncodingsKey.value;

  set NSStringEncodingDetectionSuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionSuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionDisallowedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionDisallowedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionDisallowedEncodingsKey =>
          _NSStringEncodingDetectionDisallowedEncodingsKey.value;

  set NSStringEncodingDetectionDisallowedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionDisallowedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionUseOnlySuggestedEncodingsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionUseOnlySuggestedEncodingsKey =>
          _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value;

  set NSStringEncodingDetectionUseOnlySuggestedEncodingsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionUseOnlySuggestedEncodingsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionAllowLossyKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionAllowLossyKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionAllowLossyKey =>
          _NSStringEncodingDetectionAllowLossyKey.value;

  set NSStringEncodingDetectionAllowLossyKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionAllowLossyKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionFromWindowsKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionFromWindowsKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionFromWindowsKey =>
          _NSStringEncodingDetectionFromWindowsKey.value;

  set NSStringEncodingDetectionFromWindowsKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionFromWindowsKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLossySubstitutionKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLossySubstitutionKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLossySubstitutionKey =>
          _NSStringEncodingDetectionLossySubstitutionKey.value;

  set NSStringEncodingDetectionLossySubstitutionKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLossySubstitutionKey.value = value;

  late final ffi.Pointer<NSStringEncodingDetectionOptionsKey>
      _NSStringEncodingDetectionLikelyLanguageKey =
      _lookup<NSStringEncodingDetectionOptionsKey>(
          'NSStringEncodingDetectionLikelyLanguageKey');

  NSStringEncodingDetectionOptionsKey
      get NSStringEncodingDetectionLikelyLanguageKey =>
          _NSStringEncodingDetectionLikelyLanguageKey.value;

  set NSStringEncodingDetectionLikelyLanguageKey(
          NSStringEncodingDetectionOptionsKey value) =>
      _NSStringEncodingDetectionLikelyLanguageKey.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSMutableString1 =
      _getClass1("NSMutableString");
  late final ffi.Pointer<ObjCSel> _sel_replaceCharactersInRange_withString_1 =
      _registerName1("replaceCharactersInRange:withString:");
  late final ffi.Pointer<ObjCSel> _sel_insertString_atIndex_1 =
      _registerName1("insertString:atIndex:");
  late final ffi.Pointer<ObjCSel> _sel_deleteCharactersInRange_1 =
      _registerName1("deleteCharactersInRange:");
  late final ffi.Pointer<ObjCSel> _sel_appendString_1 =
      _registerName1("appendString:");
  late final ffi.Pointer<ObjCSel> _sel_appendFormat_1 =
      _registerName1("appendFormat:");
  late final ffi.Pointer<ObjCSel> _sel_setString_1 =
      _registerName1("setString:");
  late final ffi.Pointer<ObjCSel>
      _sel_replaceOccurrencesOfString_withString_options_range_1 =
      _registerName1("replaceOccurrencesOfString:withString:options:range:");
  int _objc_msgSend_254(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCObject> replacement,
    int options,
    NSRange searchRange,
  ) {
    return __objc_msgSend_254(
      obj,
      sel,
      target,
      replacement,
      options,
      searchRange,
    );
  }

  late final __objc_msgSend_254Ptr = _lookup<
      ffi.NativeFunction<
          NSUInteger Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              NSRange)>>('objc_msgSend');
  late final __objc_msgSend_254 = __objc_msgSend_254Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>, int, NSRange)>();

  late final ffi.Pointer<ObjCSel>
      _sel_applyTransform_reverse_range_updatedRange_1 =
      _registerName1("applyTransform:reverse:range:updatedRange:");
  bool _objc_msgSend_255(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSStringTransform transform,
    bool reverse,
    NSRange range,
    NSRangePointer resultingRange,
  ) {
    return __objc_msgSend_255(
          obj,
          sel,
          transform,
          reverse ? 1 : 0,
          range,
          resultingRange,
        ) !=
        0;
  }

  late final __objc_msgSend_255Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSStringTransform,
              ffi.Uint8,
              NSRange,
              NSRangePointer)>>('objc_msgSend');
  late final __objc_msgSend_255 = __objc_msgSend_255Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSStringTransform, int, NSRange, NSRangePointer)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_256(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int capacity,
  ) {
    return __objc_msgSend_256(
      obj,
      sel,
      capacity,
    );
  }

  late final __objc_msgSend_256Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_256 = __objc_msgSend_256Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_stringWithCapacity_1 =
      _registerName1("stringWithCapacity:");
  late final ffi.Pointer<NSExceptionName> _NSCharacterConversionException =
      _lookup<NSExceptionName>('NSCharacterConversionException');

  NSExceptionName get NSCharacterConversionException =>
      _NSCharacterConversionException.value;

  set NSCharacterConversionException(NSExceptionName value) =>
      _NSCharacterConversionException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSParseErrorException =
      _lookup<NSExceptionName>('NSParseErrorException');

  NSExceptionName get NSParseErrorException => _NSParseErrorException.value;

  set NSParseErrorException(NSExceptionName value) =>
      _NSParseErrorException.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSSimpleCString1 =
      _getClass1("NSSimpleCString");
  late final ffi.Pointer<ObjCObject> _class_NSConstantString1 =
      _getClass1("NSConstantString");
  int CFDataGetTypeID1() {
    return _CFDataGetTypeID1();
  }

  late final _CFDataGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID1 =
      _CFDataGetTypeID1Ptr.asFunction<int Function()>();

  CFDataRef CFDataCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate1(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate1 = _CFDataCreate1Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy1(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy1 =
      _CFDataCreateWithBytesNoCopy1Ptr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy1(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy1(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopy1Ptr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy1 = _CFDataCreateCopy1Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable1(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable1(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable1 = _CFDataCreateMutable1Ptr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy1(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy1 = _CFDataCreateMutableCopy1Ptr
      .asFunction<CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength1(
    CFDataRef theData,
  ) {
    return _CFDataGetLength1(
      theData,
    );
  }

  late final _CFDataGetLength1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength1 =
      _CFDataGetLength1Ptr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr1(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr1(
      theData,
    );
  }

  late final _CFDataGetBytePtr1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr1 = _CFDataGetBytePtr1Ptr.asFunction<
      ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr1(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr1(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtr1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr1 = _CFDataGetMutableBytePtr1Ptr
      .asFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes1(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes1(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytes1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes1 = _CFDataGetBytes1Ptr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength1(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength1(
      theData,
      length,
    );
  }

  late final _CFDataSetLength1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength1 =
      _CFDataSetLength1Ptr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength1(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength1(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLength1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength1 = _CFDataIncreaseLength1Ptr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes1(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes1(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytes1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes1 = _CFDataAppendBytes1Ptr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes1(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes1(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytes1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes1 = _CFDataReplaceBytes1Ptr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes1(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes1(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytes1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes1 = _CFDataDeleteBytes1Ptr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind1(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    int compareOptions,
  ) {
    return _CFDataFind1(
      theData,
      dataToFind,
      searchRange,
      compareOptions,
    );
  }

  late final _CFDataFind1Ptr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, ffi.Int32)>>('CFDataFind');
  late final _CFDataFind1 = _CFDataFind1Ptr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID1() {
    return _CFCharacterSetGetTypeID1();
  }

  late final _CFCharacterSetGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID1 =
      _CFCharacterSetGetTypeID1Ptr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined1(
    int theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined1(
      theSetIdentifier,
    );
  }

  late final _CFCharacterSetGetPredefined1Ptr =
      _lookup<ffi.NativeFunction<CFCharacterSetRef Function(ffi.Int32)>>(
          'CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined1 = _CFCharacterSetGetPredefined1Ptr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange1(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange1(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRange1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFRange)>>('CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange1 =
      _CFCharacterSetCreateWithCharactersInRange1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString1(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString1(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInString1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString1 =
      _CFCharacterSetCreateWithCharactersInString1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation1(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation1(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation1 =
      _CFCharacterSetCreateWithBitmapRepresentation1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSet1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet1 =
      _CFCharacterSetCreateInvertedSet1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet1(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet1(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSet1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet1 =
      _CFCharacterSetIsSupersetOfSet1Ptr.asFunction<
          int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane1(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane1(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlane1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane1 =
      _CFCharacterSetHasMemberInPlane1Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable1(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable1(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef)>>('CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable1 = _CFCharacterSetCreateMutable1Ptr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy1 =
      _CFCharacterSetCreateCopy1Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy1 =
      _CFCharacterSetCreateMutableCopy1Ptr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember1(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember1(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMember1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember1 =
      _CFCharacterSetIsCharacterMember1Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember1(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember1(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMember1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember1 =
      _CFCharacterSetIsLongCharacterMember1Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation1(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation1(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation1 =
      _CFCharacterSetCreateBitmapRepresentation1Ptr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange1(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange1(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRange1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange1 =
      _CFCharacterSetAddCharactersInRange1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange1(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange1(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRange1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange1 =
      _CFCharacterSetRemoveCharactersInRange1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString1(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString1(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString1 =
      _CFCharacterSetAddCharactersInString1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString1(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString1(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString1 =
      _CFCharacterSetRemoveCharactersInString1Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion1(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion1(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnion1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion1 = _CFCharacterSetUnion1Ptr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect1(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect1(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersect1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect1 = _CFCharacterSetIntersect1Ptr
      .asFunction<void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert1(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert1(
      theSet,
    );
  }

  late final _CFCharacterSetInvert1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert1 = _CFCharacterSetInvert1Ptr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  late final ffi.Pointer<ObjCObject> _class_NSCharacterSet1 =
      _getClass1("NSCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_controlCharacterSet1 =
      _registerName1("controlCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_whitespaceCharacterSet1 =
      _registerName1("whitespaceCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_whitespaceAndNewlineCharacterSet1 =
      _registerName1("whitespaceAndNewlineCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_decimalDigitCharacterSet1 =
      _registerName1("decimalDigitCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_letterCharacterSet1 =
      _registerName1("letterCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_lowercaseLetterCharacterSet1 =
      _registerName1("lowercaseLetterCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_uppercaseLetterCharacterSet1 =
      _registerName1("uppercaseLetterCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_nonBaseCharacterSet1 =
      _registerName1("nonBaseCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_alphanumericCharacterSet1 =
      _registerName1("alphanumericCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_decomposableCharacterSet1 =
      _registerName1("decomposableCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_illegalCharacterSet1 =
      _registerName1("illegalCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_punctuationCharacterSet1 =
      _registerName1("punctuationCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_capitalizedLetterCharacterSet1 =
      _registerName1("capitalizedLetterCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_symbolCharacterSet1 =
      _registerName1("symbolCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_newlineCharacterSet1 =
      _registerName1("newlineCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_characterSetWithRange_1 =
      _registerName1("characterSetWithRange:");
  ffi.Pointer<ObjCObject> _objc_msgSend_257(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange aRange,
  ) {
    return __objc_msgSend_257(
      obj,
      sel,
      aRange,
    );
  }

  late final __objc_msgSend_257Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_257 = __objc_msgSend_257Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  late final ffi.Pointer<ObjCSel> _sel_characterSetWithCharactersInString_1 =
      _registerName1("characterSetWithCharactersInString:");
  ffi.Pointer<ObjCObject> _objc_msgSend_258(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_258(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_258Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_258 = __objc_msgSend_258Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_characterSetWithBitmapRepresentation_1 =
      _registerName1("characterSetWithBitmapRepresentation:");
  late final ffi.Pointer<ObjCSel> _sel_characterSetWithContentsOfFile_1 =
      _registerName1("characterSetWithContentsOfFile:");
  late final ffi.Pointer<ObjCSel> _sel_characterIsMember_1 =
      _registerName1("characterIsMember:");
  bool _objc_msgSend_259(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int aCharacter,
  ) {
    return __objc_msgSend_259(
          obj,
          sel,
          aCharacter,
        ) !=
        0;
  }

  late final __objc_msgSend_259Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              unichar)>>('objc_msgSend');
  late final __objc_msgSend_259 = __objc_msgSend_259Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_bitmapRepresentation1 =
      _registerName1("bitmapRepresentation");
  late final ffi.Pointer<ObjCSel> _sel_invertedSet1 =
      _registerName1("invertedSet");
  late final ffi.Pointer<ObjCSel> _sel_longCharacterIsMember_1 =
      _registerName1("longCharacterIsMember:");
  bool _objc_msgSend_260(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int theLongChar,
  ) {
    return __objc_msgSend_260(
          obj,
          sel,
          theLongChar,
        ) !=
        0;
  }

  late final __objc_msgSend_260Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              UTF32Char)>>('objc_msgSend');
  late final __objc_msgSend_260 = __objc_msgSend_260Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_isSupersetOfSet_1 =
      _registerName1("isSupersetOfSet:");
  late final ffi.Pointer<ObjCSel> _sel_hasMemberInPlane_1 =
      _registerName1("hasMemberInPlane:");
  bool _objc_msgSend_261(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int thePlane,
  ) {
    return __objc_msgSend_261(
          obj,
          sel,
          thePlane,
        ) !=
        0;
  }

  late final __objc_msgSend_261Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_261 = __objc_msgSend_261Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_URLUserAllowedCharacterSet1 =
      _registerName1("URLUserAllowedCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_URLPasswordAllowedCharacterSet1 =
      _registerName1("URLPasswordAllowedCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_URLHostAllowedCharacterSet1 =
      _registerName1("URLHostAllowedCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_URLPathAllowedCharacterSet1 =
      _registerName1("URLPathAllowedCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_URLQueryAllowedCharacterSet1 =
      _registerName1("URLQueryAllowedCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_URLFragmentAllowedCharacterSet1 =
      _registerName1("URLFragmentAllowedCharacterSet");
  late final ffi.Pointer<ObjCObject> _class_NSMutableCharacterSet1 =
      _getClass1("NSMutableCharacterSet");
  late final ffi.Pointer<ObjCSel> _sel_addCharactersInRange_1 =
      _registerName1("addCharactersInRange:");
  late final ffi.Pointer<ObjCSel> _sel_removeCharactersInRange_1 =
      _registerName1("removeCharactersInRange:");
  late final ffi.Pointer<ObjCSel> _sel_addCharactersInString_1 =
      _registerName1("addCharactersInString:");
  late final ffi.Pointer<ObjCSel> _sel_removeCharactersInString_1 =
      _registerName1("removeCharactersInString:");
  late final ffi.Pointer<ObjCSel> _sel_formUnionWithCharacterSet_1 =
      _registerName1("formUnionWithCharacterSet:");
  late final ffi.Pointer<ObjCSel> _sel_formIntersectionWithCharacterSet_1 =
      _registerName1("formIntersectionWithCharacterSet:");
  late final ffi.Pointer<ObjCSel> _sel_invert1 = _registerName1("invert");
  ffi.Pointer<ObjCObject> _objc_msgSend_262(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_262(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_262Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_262 = __objc_msgSend_262Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_263(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSRange aRange,
  ) {
    return __objc_msgSend_263(
      obj,
      sel,
      aRange,
    );
  }

  late final __objc_msgSend_263Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSRange)>>('objc_msgSend');
  late final __objc_msgSend_263 = __objc_msgSend_263Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, NSRange)>();

  ffi.Pointer<ObjCObject> _objc_msgSend_264(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> aString,
  ) {
    return __objc_msgSend_264(
      obj,
      sel,
      aString,
    );
  }

  late final __objc_msgSend_264Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_264 = __objc_msgSend_264Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSHTTPPropertyStatusCodeKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyStatusCodeKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyStatusCodeKey =>
      _NSHTTPPropertyStatusCodeKey.value;

  set NSHTTPPropertyStatusCodeKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyStatusCodeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyStatusReasonKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyStatusReasonKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyStatusReasonKey =>
      _NSHTTPPropertyStatusReasonKey.value;

  set NSHTTPPropertyStatusReasonKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyStatusReasonKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyServerHTTPVersionKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyServerHTTPVersionKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyServerHTTPVersionKey =>
      _NSHTTPPropertyServerHTTPVersionKey.value;

  set NSHTTPPropertyServerHTTPVersionKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyServerHTTPVersionKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyRedirectionHeadersKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyRedirectionHeadersKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyRedirectionHeadersKey =>
      _NSHTTPPropertyRedirectionHeadersKey.value;

  set NSHTTPPropertyRedirectionHeadersKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyRedirectionHeadersKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSHTTPPropertyErrorPageDataKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyErrorPageDataKey');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyErrorPageDataKey =>
      _NSHTTPPropertyErrorPageDataKey.value;

  set NSHTTPPropertyErrorPageDataKey(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyErrorPageDataKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSHTTPPropertyHTTPProxy =
      _lookup<ffi.Pointer<ObjCObject>>('NSHTTPPropertyHTTPProxy');

  ffi.Pointer<ObjCObject> get NSHTTPPropertyHTTPProxy =>
      _NSHTTPPropertyHTTPProxy.value;

  set NSHTTPPropertyHTTPProxy(ffi.Pointer<ObjCObject> value) =>
      _NSHTTPPropertyHTTPProxy.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSFTPPropertyUserLoginKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyUserLoginKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyUserLoginKey =>
      _NSFTPPropertyUserLoginKey.value;

  set NSFTPPropertyUserLoginKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyUserLoginKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSFTPPropertyUserPasswordKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyUserPasswordKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyUserPasswordKey =>
      _NSFTPPropertyUserPasswordKey.value;

  set NSFTPPropertyUserPasswordKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyUserPasswordKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>>
      _NSFTPPropertyActiveTransferModeKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyActiveTransferModeKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyActiveTransferModeKey =>
      _NSFTPPropertyActiveTransferModeKey.value;

  set NSFTPPropertyActiveTransferModeKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyActiveTransferModeKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSFTPPropertyFileOffsetKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyFileOffsetKey');

  ffi.Pointer<ObjCObject> get NSFTPPropertyFileOffsetKey =>
      _NSFTPPropertyFileOffsetKey.value;

  set NSFTPPropertyFileOffsetKey(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyFileOffsetKey.value = value;

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSFTPPropertyFTPProxy =
      _lookup<ffi.Pointer<ObjCObject>>('NSFTPPropertyFTPProxy');

  ffi.Pointer<ObjCObject> get NSFTPPropertyFTPProxy =>
      _NSFTPPropertyFTPProxy.value;

  set NSFTPPropertyFTPProxy(ffi.Pointer<ObjCObject> value) =>
      _NSFTPPropertyFTPProxy.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSURLHandle1 =
      _getClass1("NSURLHandle");
  late final ffi.Pointer<ObjCSel> _sel_registerURLHandleClass_1 =
      _registerName1("registerURLHandleClass:");
  late final ffi.Pointer<ObjCSel> _sel_URLHandleClassForURL_1 =
      _registerName1("URLHandleClassForURL:");
  late final ffi.Pointer<ObjCSel> _sel_status1 = _registerName1("status");
  int _objc_msgSend_265(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_265(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_265Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_265 = __objc_msgSend_265Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_failureReason1 =
      _registerName1("failureReason");
  late final ffi.Pointer<ObjCSel> _sel_addClient_1 =
      _registerName1("addClient:");
  late final ffi.Pointer<ObjCSel> _sel_removeClient_1 =
      _registerName1("removeClient:");
  late final ffi.Pointer<ObjCSel> _sel_loadInBackground1 =
      _registerName1("loadInBackground");
  late final ffi.Pointer<ObjCSel> _sel_cancelLoadInBackground1 =
      _registerName1("cancelLoadInBackground");
  late final ffi.Pointer<ObjCSel> _sel_resourceData1 =
      _registerName1("resourceData");
  ffi.Pointer<ObjCObject> _objc_msgSend_266(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_266(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_266Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_266 = __objc_msgSend_266Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_availableResourceData1 =
      _registerName1("availableResourceData");
  late final ffi.Pointer<ObjCSel> _sel_expectedResourceDataSize1 =
      _registerName1("expectedResourceDataSize");
  late final ffi.Pointer<ObjCSel> _sel_flushCachedData1 =
      _registerName1("flushCachedData");
  late final ffi.Pointer<ObjCSel> _sel_backgroundLoadDidFailWithReason_1 =
      _registerName1("backgroundLoadDidFailWithReason:");
  late final ffi.Pointer<ObjCSel> _sel_didLoadBytes_loadComplete_1 =
      _registerName1("didLoadBytes:loadComplete:");
  void _objc_msgSend_267(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> newBytes,
    bool yorn,
  ) {
    return __objc_msgSend_267(
      obj,
      sel,
      newBytes,
      yorn ? 1 : 0,
    );
  }

  late final __objc_msgSend_267Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_267 = __objc_msgSend_267Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_canInitWithURL_1 =
      _registerName1("canInitWithURL:");
  late final ffi.Pointer<ObjCSel> _sel_cachedHandleForURL_1 =
      _registerName1("cachedHandleForURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_268(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> anURL,
  ) {
    return __objc_msgSend_268(
      obj,
      sel,
      anURL,
    );
  }

  late final __objc_msgSend_268Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_268 = __objc_msgSend_268Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithURL_cached_1 =
      _registerName1("initWithURL:cached:");
  late final ffi.Pointer<ObjCSel> _sel_propertyForKey_1 =
      _registerName1("propertyForKey:");
  late final ffi.Pointer<ObjCSel> _sel_propertyForKeyIfAvailable_1 =
      _registerName1("propertyForKeyIfAvailable:");
  late final ffi.Pointer<ObjCSel> _sel_writeProperty_forKey_1 =
      _registerName1("writeProperty:forKey:");
  bool _objc_msgSend_269(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> propertyValue,
    ffi.Pointer<ObjCObject> propertyKey,
  ) {
    return __objc_msgSend_269(
          obj,
          sel,
          propertyValue,
          propertyKey,
        ) !=
        0;
  }

  late final __objc_msgSend_269Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_269 = __objc_msgSend_269Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_writeData_1 =
      _registerName1("writeData:");
  late final ffi.Pointer<ObjCSel> _sel_loadInForeground1 =
      _registerName1("loadInForeground");
  late final ffi.Pointer<ObjCSel> _sel_beginLoadInBackground1 =
      _registerName1("beginLoadInBackground");
  late final ffi.Pointer<ObjCSel> _sel_endLoadInBackground1 =
      _registerName1("endLoadInBackground");
  late final ffi.Pointer<ObjCObject> _class_NSURL1 = _getClass1("NSURL");
  late final ffi.Pointer<ObjCSel> _sel_initWithScheme_host_path_1 =
      _registerName1("initWithScheme:host:path:");
  late final ffi.Pointer<ObjCSel>
      _sel_initFileURLWithPath_isDirectory_relativeToURL_1 =
      _registerName1("initFileURLWithPath:isDirectory:relativeToURL:");
  instancetype _objc_msgSend_270(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_270(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_270Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_270 = __objc_msgSend_270Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_initFileURLWithPath_relativeToURL_1 =
      _registerName1("initFileURLWithPath:relativeToURL:");
  late final ffi.Pointer<ObjCSel> _sel_initFileURLWithPath_isDirectory_1 =
      _registerName1("initFileURLWithPath:isDirectory:");
  late final ffi.Pointer<ObjCSel> _sel_initFileURLWithPath_1 =
      _registerName1("initFileURLWithPath:");
  late final ffi.Pointer<ObjCSel>
      _sel_fileURLWithPath_isDirectory_relativeToURL_1 =
      _registerName1("fileURLWithPath:isDirectory:relativeToURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_271(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_271(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_271Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_271 = __objc_msgSend_271Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_fileURLWithPath_relativeToURL_1 =
      _registerName1("fileURLWithPath:relativeToURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_272(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_272(
      obj,
      sel,
      path,
      baseURL,
    );
  }

  late final __objc_msgSend_272Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_272 = __objc_msgSend_272Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_fileURLWithPath_isDirectory_1 =
      _registerName1("fileURLWithPath:isDirectory:");
  ffi.Pointer<ObjCObject> _objc_msgSend_273(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
    bool isDir,
  ) {
    return __objc_msgSend_273(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
    );
  }

  late final __objc_msgSend_273Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_273 = __objc_msgSend_273Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_fileURLWithPath_1 =
      _registerName1("fileURLWithPath:");
  ffi.Pointer<ObjCObject> _objc_msgSend_274(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> path,
  ) {
    return __objc_msgSend_274(
      obj,
      sel,
      path,
    );
  }

  late final __objc_msgSend_274Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_274 = __objc_msgSend_274Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      _registerName1(
          "initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
  instancetype _objc_msgSend_275(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_275(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_275Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_275 = __objc_msgSend_275Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1 =
      _registerName1(
          "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:");
  ffi.Pointer<ObjCObject> _objc_msgSend_276(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> path,
    bool isDir,
    ffi.Pointer<ObjCObject> baseURL,
  ) {
    return __objc_msgSend_276(
      obj,
      sel,
      path,
      isDir ? 1 : 0,
      baseURL,
    );
  }

  late final __objc_msgSend_276Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_276 = __objc_msgSend_276Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithString_relativeToURL_1 =
      _registerName1("initWithString:relativeToURL:");
  late final ffi.Pointer<ObjCSel> _sel_URLWithString_1 =
      _registerName1("URLWithString:");
  late final ffi.Pointer<ObjCSel> _sel_URLWithString_relativeToURL_1 =
      _registerName1("URLWithString:relativeToURL:");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithDataRepresentation_relativeToURL_1 =
      _registerName1("initWithDataRepresentation:relativeToURL:");
  late final ffi.Pointer<ObjCSel>
      _sel_URLWithDataRepresentation_relativeToURL_1 =
      _registerName1("URLWithDataRepresentation:relativeToURL:");
  late final ffi.Pointer<ObjCSel>
      _sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1 =
      _registerName1("initAbsoluteURLWithDataRepresentation:relativeToURL:");
  late final ffi.Pointer<ObjCSel>
      _sel_absoluteURLWithDataRepresentation_relativeToURL_1 =
      _registerName1("absoluteURLWithDataRepresentation:relativeToURL:");
  late final ffi.Pointer<ObjCSel> _sel_dataRepresentation1 =
      _registerName1("dataRepresentation");
  late final ffi.Pointer<ObjCSel> _sel_absoluteString1 =
      _registerName1("absoluteString");
  late final ffi.Pointer<ObjCSel> _sel_relativeString1 =
      _registerName1("relativeString");
  late final ffi.Pointer<ObjCSel> _sel_baseURL1 = _registerName1("baseURL");
  late final ffi.Pointer<ObjCSel> _sel_absoluteURL1 =
      _registerName1("absoluteURL");
  late final ffi.Pointer<ObjCSel> _sel_scheme1 = _registerName1("scheme");
  late final ffi.Pointer<ObjCSel> _sel_resourceSpecifier1 =
      _registerName1("resourceSpecifier");
  late final ffi.Pointer<ObjCSel> _sel_host1 = _registerName1("host");
  late final ffi.Pointer<ObjCSel> _sel_port1 = _registerName1("port");
  late final ffi.Pointer<ObjCSel> _sel_user1 = _registerName1("user");
  late final ffi.Pointer<ObjCSel> _sel_password1 = _registerName1("password");
  late final ffi.Pointer<ObjCSel> _sel_path1 = _registerName1("path");
  late final ffi.Pointer<ObjCSel> _sel_fragment1 = _registerName1("fragment");
  late final ffi.Pointer<ObjCSel> _sel_parameterString1 =
      _registerName1("parameterString");
  late final ffi.Pointer<ObjCSel> _sel_query1 = _registerName1("query");
  late final ffi.Pointer<ObjCSel> _sel_relativePath1 =
      _registerName1("relativePath");
  late final ffi.Pointer<ObjCSel> _sel_hasDirectoryPath1 =
      _registerName1("hasDirectoryPath");
  late final ffi.Pointer<ObjCSel> _sel_getFileSystemRepresentation_maxLength_1 =
      _registerName1("getFileSystemRepresentation:maxLength:");
  bool _objc_msgSend_277(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int maxBufferLength,
  ) {
    return __objc_msgSend_277(
          obj,
          sel,
          buffer,
          maxBufferLength,
        ) !=
        0;
  }

  late final __objc_msgSend_277Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<pkg_ffi.Char>, NSUInteger)>>('objc_msgSend');
  late final __objc_msgSend_277 = __objc_msgSend_277Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<pkg_ffi.Char>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_fileSystemRepresentation1 =
      _registerName1("fileSystemRepresentation");
  late final ffi.Pointer<ObjCSel> _sel_isFileURL1 = _registerName1("isFileURL");
  late final ffi.Pointer<ObjCSel> _sel_standardizedURL1 =
      _registerName1("standardizedURL");
  late final ffi.Pointer<ObjCSel>
      _sel_checkResourceIsReachableAndReturnError_1 =
      _registerName1("checkResourceIsReachableAndReturnError:");
  bool _objc_msgSend_278(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_278(
          obj,
          sel,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_278Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_278 = __objc_msgSend_278Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_isFileReferenceURL1 =
      _registerName1("isFileReferenceURL");
  late final ffi.Pointer<ObjCSel> _sel_fileReferenceURL1 =
      _registerName1("fileReferenceURL");
  ffi.Pointer<ObjCObject> _objc_msgSend_279(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_279(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_279Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_279 = __objc_msgSend_279Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_filePathURL1 =
      _registerName1("filePathURL");
  late final ffi.Pointer<ObjCSel> _sel_getResourceValue_forKey_error_1 =
      _registerName1("getResourceValue:forKey:error:");
  bool _objc_msgSend_280(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ffi.Pointer<ObjCObject>> value,
    NSURLResourceKey key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_280(
          obj,
          sel,
          value,
          key,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_280Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>,
              NSURLResourceKey,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_280 = __objc_msgSend_280Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>,
          NSURLResourceKey,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_setResourceValue_forKey_error_1 =
      _registerName1("setResourceValue:forKey:error:");
  bool _objc_msgSend_281(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> value,
    NSURLResourceKey key,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_281(
          obj,
          sel,
          value,
          key,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_281Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSURLResourceKey,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_281 = __objc_msgSend_281Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          NSURLResourceKey,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_setResourceValues_error_1 =
      _registerName1("setResourceValues:error:");
  late final ffi.Pointer<ObjCSel> _sel_removeCachedResourceValueForKey_1 =
      _registerName1("removeCachedResourceValueForKey:");
  late final ffi.Pointer<ObjCSel> _sel_removeAllCachedResourceValues1 =
      _registerName1("removeAllCachedResourceValues");
  late final ffi.Pointer<ObjCSel> _sel_setTemporaryResourceValue_forKey_1 =
      _registerName1("setTemporaryResourceValue:forKey:");
  late final ffi.Pointer<ObjCSel>
      _sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1 =
      _registerName1(
          "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_282(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int options,
    ffi.Pointer<ObjCObject> keys,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_282(
      obj,
      sel,
      options,
      keys,
      relativeURL,
      error,
    );
  }

  late final __objc_msgSend_282Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_282 = __objc_msgSend_282Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      _registerName1(
          "initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
  instancetype _objc_msgSend_283(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    int options,
    ffi.Pointer<ObjCObject> relativeURL,
    ffi.Pointer<ffi.Uint8> isStale,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_283(
      obj,
      sel,
      bookmarkData,
      options,
      relativeURL,
      isStale,
      error,
    );
  }

  late final __objc_msgSend_283Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_283 = __objc_msgSend_283Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1 =
      _registerName1(
          "URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:");
  late final ffi.Pointer<ObjCSel> _sel_writeBookmarkData_toURL_options_error_1 =
      _registerName1("writeBookmarkData:toURL:options:error:");
  bool _objc_msgSend_284(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkData,
    ffi.Pointer<ObjCObject> bookmarkFileURL,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_284(
          obj,
          sel,
          bookmarkData,
          bookmarkFileURL,
          options,
          error,
        ) !=
        0;
  }

  late final __objc_msgSend_284Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSURLBookmarkFileCreationOptions,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_284 = __objc_msgSend_284Ptr.asFunction<
      int Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_bookmarkDataWithContentsOfURL_error_1 =
      _registerName1("bookmarkDataWithContentsOfURL:error:");
  ffi.Pointer<ObjCObject> _objc_msgSend_285(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> bookmarkFileURL,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_285(
      obj,
      sel,
      bookmarkFileURL,
      error,
    );
  }

  late final __objc_msgSend_285Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_285 = __objc_msgSend_285Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_URLByResolvingAliasFileAtURL_options_error_1 =
      _registerName1("URLByResolvingAliasFileAtURL:options:error:");
  instancetype _objc_msgSend_286(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int options,
    ffi.Pointer<ffi.Pointer<ObjCObject>> error,
  ) {
    return __objc_msgSend_286(
      obj,
      sel,
      url,
      options,
      error,
    );
  }

  late final __objc_msgSend_286Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ObjCObject>>)>>('objc_msgSend');
  late final __objc_msgSend_286 = __objc_msgSend_286Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ffi.Pointer<ObjCObject>>)>();

  late final ffi.Pointer<ObjCSel> _sel_startAccessingSecurityScopedResource1 =
      _registerName1("startAccessingSecurityScopedResource");
  late final ffi.Pointer<ObjCSel> _sel_stopAccessingSecurityScopedResource1 =
      _registerName1("stopAccessingSecurityScopedResource");
  late final ffi.Pointer<ObjCSel>
      _sel_getPromisedItemResourceValue_forKey_error_1 =
      _registerName1("getPromisedItemResourceValue:forKey:error:");
  late final ffi.Pointer<ObjCSel>
      _sel_checkPromisedItemIsReachableAndReturnError_1 =
      _registerName1("checkPromisedItemIsReachableAndReturnError:");
  late final ffi.Pointer<ObjCSel> _sel_fileURLWithPathComponents_1 =
      _registerName1("fileURLWithPathComponents:");
  late final ffi.Pointer<ObjCSel> _sel_pathComponents1 =
      _registerName1("pathComponents");
  late final ffi.Pointer<ObjCSel> _sel_lastPathComponent1 =
      _registerName1("lastPathComponent");
  late final ffi.Pointer<ObjCSel> _sel_pathExtension1 =
      _registerName1("pathExtension");
  late final ffi.Pointer<ObjCSel> _sel_URLByAppendingPathComponent_1 =
      _registerName1("URLByAppendingPathComponent:");
  late final ffi.Pointer<ObjCSel>
      _sel_URLByAppendingPathComponent_isDirectory_1 =
      _registerName1("URLByAppendingPathComponent:isDirectory:");
  late final ffi.Pointer<ObjCSel> _sel_URLByDeletingLastPathComponent1 =
      _registerName1("URLByDeletingLastPathComponent");
  late final ffi.Pointer<ObjCSel> _sel_URLByAppendingPathExtension_1 =
      _registerName1("URLByAppendingPathExtension:");
  late final ffi.Pointer<ObjCSel> _sel_URLByDeletingPathExtension1 =
      _registerName1("URLByDeletingPathExtension");
  late final ffi.Pointer<ObjCSel> _sel_URLByStandardizingPath1 =
      _registerName1("URLByStandardizingPath");
  late final ffi.Pointer<ObjCSel> _sel_URLByResolvingSymlinksInPath1 =
      _registerName1("URLByResolvingSymlinksInPath");
  late final ffi.Pointer<ObjCSel> _sel_resourceDataUsingCache_1 =
      _registerName1("resourceDataUsingCache:");
  ffi.Pointer<ObjCObject> _objc_msgSend_287(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool shouldUseCache,
  ) {
    return __objc_msgSend_287(
      obj,
      sel,
      shouldUseCache ? 1 : 0,
    );
  }

  late final __objc_msgSend_287Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_287 = __objc_msgSend_287Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel>
      _sel_loadResourceDataNotifyingClient_usingCache_1 =
      _registerName1("loadResourceDataNotifyingClient:usingCache:");
  late final ffi.Pointer<ObjCSel> _sel_setResourceData_1 =
      _registerName1("setResourceData:");
  late final ffi.Pointer<ObjCSel> _sel_setProperty_forKey_1 =
      _registerName1("setProperty:forKey:");
  late final ffi.Pointer<ObjCSel> _sel_URLHandleUsingCache_1 =
      _registerName1("URLHandleUsingCache:");
  ffi.Pointer<ObjCObject> _objc_msgSend_288(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    bool shouldUseCache,
  ) {
    return __objc_msgSend_288(
      obj,
      sel,
      shouldUseCache ? 1 : 0,
    );
  }

  late final __objc_msgSend_288Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, ffi.Uint8)>>('objc_msgSend');
  late final __objc_msgSend_288 = __objc_msgSend_288Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSURLFileScheme =
      _lookup<ffi.Pointer<ObjCObject>>('NSURLFileScheme');

  ffi.Pointer<ObjCObject> get NSURLFileScheme => _NSURLFileScheme.value;

  set NSURLFileScheme(ffi.Pointer<ObjCObject> value) =>
      _NSURLFileScheme.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLKeysOfUnsetValuesKey =
      _lookup<NSURLResourceKey>('NSURLKeysOfUnsetValuesKey');

  NSURLResourceKey get NSURLKeysOfUnsetValuesKey =>
      _NSURLKeysOfUnsetValuesKey.value;

  set NSURLKeysOfUnsetValuesKey(NSURLResourceKey value) =>
      _NSURLKeysOfUnsetValuesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLNameKey =
      _lookup<NSURLResourceKey>('NSURLNameKey');

  NSURLResourceKey get NSURLNameKey => _NSURLNameKey.value;

  set NSURLNameKey(NSURLResourceKey value) => _NSURLNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedNameKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedNameKey');

  NSURLResourceKey get NSURLLocalizedNameKey => _NSURLLocalizedNameKey.value;

  set NSURLLocalizedNameKey(NSURLResourceKey value) =>
      _NSURLLocalizedNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsRegularFileKey =
      _lookup<NSURLResourceKey>('NSURLIsRegularFileKey');

  NSURLResourceKey get NSURLIsRegularFileKey => _NSURLIsRegularFileKey.value;

  set NSURLIsRegularFileKey(NSURLResourceKey value) =>
      _NSURLIsRegularFileKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsDirectoryKey =
      _lookup<NSURLResourceKey>('NSURLIsDirectoryKey');

  NSURLResourceKey get NSURLIsDirectoryKey => _NSURLIsDirectoryKey.value;

  set NSURLIsDirectoryKey(NSURLResourceKey value) =>
      _NSURLIsDirectoryKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSymbolicLinkKey =
      _lookup<NSURLResourceKey>('NSURLIsSymbolicLinkKey');

  NSURLResourceKey get NSURLIsSymbolicLinkKey => _NSURLIsSymbolicLinkKey.value;

  set NSURLIsSymbolicLinkKey(NSURLResourceKey value) =>
      _NSURLIsSymbolicLinkKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsVolumeKey =
      _lookup<NSURLResourceKey>('NSURLIsVolumeKey');

  NSURLResourceKey get NSURLIsVolumeKey => _NSURLIsVolumeKey.value;

  set NSURLIsVolumeKey(NSURLResourceKey value) =>
      _NSURLIsVolumeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsPackageKey =
      _lookup<NSURLResourceKey>('NSURLIsPackageKey');

  NSURLResourceKey get NSURLIsPackageKey => _NSURLIsPackageKey.value;

  set NSURLIsPackageKey(NSURLResourceKey value) =>
      _NSURLIsPackageKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsApplicationKey =
      _lookup<NSURLResourceKey>('NSURLIsApplicationKey');

  NSURLResourceKey get NSURLIsApplicationKey => _NSURLIsApplicationKey.value;

  set NSURLIsApplicationKey(NSURLResourceKey value) =>
      _NSURLIsApplicationKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLApplicationIsScriptableKey =
      _lookup<NSURLResourceKey>('NSURLApplicationIsScriptableKey');

  NSURLResourceKey get NSURLApplicationIsScriptableKey =>
      _NSURLApplicationIsScriptableKey.value;

  set NSURLApplicationIsScriptableKey(NSURLResourceKey value) =>
      _NSURLApplicationIsScriptableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSystemImmutableKey =
      _lookup<NSURLResourceKey>('NSURLIsSystemImmutableKey');

  NSURLResourceKey get NSURLIsSystemImmutableKey =>
      _NSURLIsSystemImmutableKey.value;

  set NSURLIsSystemImmutableKey(NSURLResourceKey value) =>
      _NSURLIsSystemImmutableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsUserImmutableKey =
      _lookup<NSURLResourceKey>('NSURLIsUserImmutableKey');

  NSURLResourceKey get NSURLIsUserImmutableKey =>
      _NSURLIsUserImmutableKey.value;

  set NSURLIsUserImmutableKey(NSURLResourceKey value) =>
      _NSURLIsUserImmutableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsHiddenKey =
      _lookup<NSURLResourceKey>('NSURLIsHiddenKey');

  NSURLResourceKey get NSURLIsHiddenKey => _NSURLIsHiddenKey.value;

  set NSURLIsHiddenKey(NSURLResourceKey value) =>
      _NSURLIsHiddenKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLHasHiddenExtensionKey =
      _lookup<NSURLResourceKey>('NSURLHasHiddenExtensionKey');

  NSURLResourceKey get NSURLHasHiddenExtensionKey =>
      _NSURLHasHiddenExtensionKey.value;

  set NSURLHasHiddenExtensionKey(NSURLResourceKey value) =>
      _NSURLHasHiddenExtensionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLCreationDateKey =
      _lookup<NSURLResourceKey>('NSURLCreationDateKey');

  NSURLResourceKey get NSURLCreationDateKey => _NSURLCreationDateKey.value;

  set NSURLCreationDateKey(NSURLResourceKey value) =>
      _NSURLCreationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLContentAccessDateKey =
      _lookup<NSURLResourceKey>('NSURLContentAccessDateKey');

  NSURLResourceKey get NSURLContentAccessDateKey =>
      _NSURLContentAccessDateKey.value;

  set NSURLContentAccessDateKey(NSURLResourceKey value) =>
      _NSURLContentAccessDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLContentModificationDateKey =
      _lookup<NSURLResourceKey>('NSURLContentModificationDateKey');

  NSURLResourceKey get NSURLContentModificationDateKey =>
      _NSURLContentModificationDateKey.value;

  set NSURLContentModificationDateKey(NSURLResourceKey value) =>
      _NSURLContentModificationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLAttributeModificationDateKey =
      _lookup<NSURLResourceKey>('NSURLAttributeModificationDateKey');

  NSURLResourceKey get NSURLAttributeModificationDateKey =>
      _NSURLAttributeModificationDateKey.value;

  set NSURLAttributeModificationDateKey(NSURLResourceKey value) =>
      _NSURLAttributeModificationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLinkCountKey =
      _lookup<NSURLResourceKey>('NSURLLinkCountKey');

  NSURLResourceKey get NSURLLinkCountKey => _NSURLLinkCountKey.value;

  set NSURLLinkCountKey(NSURLResourceKey value) =>
      _NSURLLinkCountKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLParentDirectoryURLKey =
      _lookup<NSURLResourceKey>('NSURLParentDirectoryURLKey');

  NSURLResourceKey get NSURLParentDirectoryURLKey =>
      _NSURLParentDirectoryURLKey.value;

  set NSURLParentDirectoryURLKey(NSURLResourceKey value) =>
      _NSURLParentDirectoryURLKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeURLKey =
      _lookup<NSURLResourceKey>('NSURLVolumeURLKey');

  NSURLResourceKey get NSURLVolumeURLKey => _NSURLVolumeURLKey.value;

  set NSURLVolumeURLKey(NSURLResourceKey value) =>
      _NSURLVolumeURLKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTypeIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLTypeIdentifierKey');

  NSURLResourceKey get NSURLTypeIdentifierKey => _NSURLTypeIdentifierKey.value;

  set NSURLTypeIdentifierKey(NSURLResourceKey value) =>
      _NSURLTypeIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLContentTypeKey =
      _lookup<NSURLResourceKey>('NSURLContentTypeKey');

  NSURLResourceKey get NSURLContentTypeKey => _NSURLContentTypeKey.value;

  set NSURLContentTypeKey(NSURLResourceKey value) =>
      _NSURLContentTypeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedTypeDescriptionKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedTypeDescriptionKey');

  NSURLResourceKey get NSURLLocalizedTypeDescriptionKey =>
      _NSURLLocalizedTypeDescriptionKey.value;

  set NSURLLocalizedTypeDescriptionKey(NSURLResourceKey value) =>
      _NSURLLocalizedTypeDescriptionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLabelNumberKey =
      _lookup<NSURLResourceKey>('NSURLLabelNumberKey');

  NSURLResourceKey get NSURLLabelNumberKey => _NSURLLabelNumberKey.value;

  set NSURLLabelNumberKey(NSURLResourceKey value) =>
      _NSURLLabelNumberKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLabelColorKey =
      _lookup<NSURLResourceKey>('NSURLLabelColorKey');

  NSURLResourceKey get NSURLLabelColorKey => _NSURLLabelColorKey.value;

  set NSURLLabelColorKey(NSURLResourceKey value) =>
      _NSURLLabelColorKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLLocalizedLabelKey =
      _lookup<NSURLResourceKey>('NSURLLocalizedLabelKey');

  NSURLResourceKey get NSURLLocalizedLabelKey => _NSURLLocalizedLabelKey.value;

  set NSURLLocalizedLabelKey(NSURLResourceKey value) =>
      _NSURLLocalizedLabelKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLEffectiveIconKey =
      _lookup<NSURLResourceKey>('NSURLEffectiveIconKey');

  NSURLResourceKey get NSURLEffectiveIconKey => _NSURLEffectiveIconKey.value;

  set NSURLEffectiveIconKey(NSURLResourceKey value) =>
      _NSURLEffectiveIconKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLCustomIconKey =
      _lookup<NSURLResourceKey>('NSURLCustomIconKey');

  NSURLResourceKey get NSURLCustomIconKey => _NSURLCustomIconKey.value;

  set NSURLCustomIconKey(NSURLResourceKey value) =>
      _NSURLCustomIconKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileResourceIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLFileResourceIdentifierKey');

  NSURLResourceKey get NSURLFileResourceIdentifierKey =>
      _NSURLFileResourceIdentifierKey.value;

  set NSURLFileResourceIdentifierKey(NSURLResourceKey value) =>
      _NSURLFileResourceIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIdentifierKey');

  NSURLResourceKey get NSURLVolumeIdentifierKey =>
      _NSURLVolumeIdentifierKey.value;

  set NSURLVolumeIdentifierKey(NSURLResourceKey value) =>
      _NSURLVolumeIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLPreferredIOBlockSizeKey =
      _lookup<NSURLResourceKey>('NSURLPreferredIOBlockSizeKey');

  NSURLResourceKey get NSURLPreferredIOBlockSizeKey =>
      _NSURLPreferredIOBlockSizeKey.value;

  set NSURLPreferredIOBlockSizeKey(NSURLResourceKey value) =>
      _NSURLPreferredIOBlockSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsReadableKey =
      _lookup<NSURLResourceKey>('NSURLIsReadableKey');

  NSURLResourceKey get NSURLIsReadableKey => _NSURLIsReadableKey.value;

  set NSURLIsReadableKey(NSURLResourceKey value) =>
      _NSURLIsReadableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsWritableKey =
      _lookup<NSURLResourceKey>('NSURLIsWritableKey');

  NSURLResourceKey get NSURLIsWritableKey => _NSURLIsWritableKey.value;

  set NSURLIsWritableKey(NSURLResourceKey value) =>
      _NSURLIsWritableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsExecutableKey =
      _lookup<NSURLResourceKey>('NSURLIsExecutableKey');

  NSURLResourceKey get NSURLIsExecutableKey => _NSURLIsExecutableKey.value;

  set NSURLIsExecutableKey(NSURLResourceKey value) =>
      _NSURLIsExecutableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileSecurityKey =
      _lookup<NSURLResourceKey>('NSURLFileSecurityKey');

  NSURLResourceKey get NSURLFileSecurityKey => _NSURLFileSecurityKey.value;

  set NSURLFileSecurityKey(NSURLResourceKey value) =>
      _NSURLFileSecurityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsExcludedFromBackupKey =
      _lookup<NSURLResourceKey>('NSURLIsExcludedFromBackupKey');

  NSURLResourceKey get NSURLIsExcludedFromBackupKey =>
      _NSURLIsExcludedFromBackupKey.value;

  set NSURLIsExcludedFromBackupKey(NSURLResourceKey value) =>
      _NSURLIsExcludedFromBackupKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTagNamesKey =
      _lookup<NSURLResourceKey>('NSURLTagNamesKey');

  NSURLResourceKey get NSURLTagNamesKey => _NSURLTagNamesKey.value;

  set NSURLTagNamesKey(NSURLResourceKey value) =>
      _NSURLTagNamesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLPathKey =
      _lookup<NSURLResourceKey>('NSURLPathKey');

  NSURLResourceKey get NSURLPathKey => _NSURLPathKey.value;

  set NSURLPathKey(NSURLResourceKey value) => _NSURLPathKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLCanonicalPathKey =
      _lookup<NSURLResourceKey>('NSURLCanonicalPathKey');

  NSURLResourceKey get NSURLCanonicalPathKey => _NSURLCanonicalPathKey.value;

  set NSURLCanonicalPathKey(NSURLResourceKey value) =>
      _NSURLCanonicalPathKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsMountTriggerKey =
      _lookup<NSURLResourceKey>('NSURLIsMountTriggerKey');

  NSURLResourceKey get NSURLIsMountTriggerKey => _NSURLIsMountTriggerKey.value;

  set NSURLIsMountTriggerKey(NSURLResourceKey value) =>
      _NSURLIsMountTriggerKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLGenerationIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLGenerationIdentifierKey');

  NSURLResourceKey get NSURLGenerationIdentifierKey =>
      _NSURLGenerationIdentifierKey.value;

  set NSURLGenerationIdentifierKey(NSURLResourceKey value) =>
      _NSURLGenerationIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLDocumentIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLDocumentIdentifierKey');

  NSURLResourceKey get NSURLDocumentIdentifierKey =>
      _NSURLDocumentIdentifierKey.value;

  set NSURLDocumentIdentifierKey(NSURLResourceKey value) =>
      _NSURLDocumentIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLAddedToDirectoryDateKey =
      _lookup<NSURLResourceKey>('NSURLAddedToDirectoryDateKey');

  NSURLResourceKey get NSURLAddedToDirectoryDateKey =>
      _NSURLAddedToDirectoryDateKey.value;

  set NSURLAddedToDirectoryDateKey(NSURLResourceKey value) =>
      _NSURLAddedToDirectoryDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLQuarantinePropertiesKey =
      _lookup<NSURLResourceKey>('NSURLQuarantinePropertiesKey');

  NSURLResourceKey get NSURLQuarantinePropertiesKey =>
      _NSURLQuarantinePropertiesKey.value;

  set NSURLQuarantinePropertiesKey(NSURLResourceKey value) =>
      _NSURLQuarantinePropertiesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileResourceTypeKey =
      _lookup<NSURLResourceKey>('NSURLFileResourceTypeKey');

  NSURLResourceKey get NSURLFileResourceTypeKey =>
      _NSURLFileResourceTypeKey.value;

  set NSURLFileResourceTypeKey(NSURLResourceKey value) =>
      _NSURLFileResourceTypeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileContentIdentifierKey =
      _lookup<NSURLResourceKey>('NSURLFileContentIdentifierKey');

  NSURLResourceKey get NSURLFileContentIdentifierKey =>
      _NSURLFileContentIdentifierKey.value;

  set NSURLFileContentIdentifierKey(NSURLResourceKey value) =>
      _NSURLFileContentIdentifierKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLMayShareFileContentKey =
      _lookup<NSURLResourceKey>('NSURLMayShareFileContentKey');

  NSURLResourceKey get NSURLMayShareFileContentKey =>
      _NSURLMayShareFileContentKey.value;

  set NSURLMayShareFileContentKey(NSURLResourceKey value) =>
      _NSURLMayShareFileContentKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLMayHaveExtendedAttributesKey =
      _lookup<NSURLResourceKey>('NSURLMayHaveExtendedAttributesKey');

  NSURLResourceKey get NSURLMayHaveExtendedAttributesKey =>
      _NSURLMayHaveExtendedAttributesKey.value;

  set NSURLMayHaveExtendedAttributesKey(NSURLResourceKey value) =>
      _NSURLMayHaveExtendedAttributesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsPurgeableKey =
      _lookup<NSURLResourceKey>('NSURLIsPurgeableKey');

  NSURLResourceKey get NSURLIsPurgeableKey => _NSURLIsPurgeableKey.value;

  set NSURLIsPurgeableKey(NSURLResourceKey value) =>
      _NSURLIsPurgeableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsSparseKey =
      _lookup<NSURLResourceKey>('NSURLIsSparseKey');

  NSURLResourceKey get NSURLIsSparseKey => _NSURLIsSparseKey.value;

  set NSURLIsSparseKey(NSURLResourceKey value) =>
      _NSURLIsSparseKey.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeNamedPipe =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeNamedPipe');

  NSURLFileResourceType get NSURLFileResourceTypeNamedPipe =>
      _NSURLFileResourceTypeNamedPipe.value;

  set NSURLFileResourceTypeNamedPipe(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeNamedPipe.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeCharacterSpecial =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeCharacterSpecial');

  NSURLFileResourceType get NSURLFileResourceTypeCharacterSpecial =>
      _NSURLFileResourceTypeCharacterSpecial.value;

  set NSURLFileResourceTypeCharacterSpecial(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeCharacterSpecial.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeDirectory =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeDirectory');

  NSURLFileResourceType get NSURLFileResourceTypeDirectory =>
      _NSURLFileResourceTypeDirectory.value;

  set NSURLFileResourceTypeDirectory(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeDirectory.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeBlockSpecial =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeBlockSpecial');

  NSURLFileResourceType get NSURLFileResourceTypeBlockSpecial =>
      _NSURLFileResourceTypeBlockSpecial.value;

  set NSURLFileResourceTypeBlockSpecial(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeBlockSpecial.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeRegular =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeRegular');

  NSURLFileResourceType get NSURLFileResourceTypeRegular =>
      _NSURLFileResourceTypeRegular.value;

  set NSURLFileResourceTypeRegular(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeRegular.value = value;

  late final ffi.Pointer<NSURLFileResourceType>
      _NSURLFileResourceTypeSymbolicLink =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeSymbolicLink');

  NSURLFileResourceType get NSURLFileResourceTypeSymbolicLink =>
      _NSURLFileResourceTypeSymbolicLink.value;

  set NSURLFileResourceTypeSymbolicLink(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeSymbolicLink.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeSocket =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeSocket');

  NSURLFileResourceType get NSURLFileResourceTypeSocket =>
      _NSURLFileResourceTypeSocket.value;

  set NSURLFileResourceTypeSocket(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeSocket.value = value;

  late final ffi.Pointer<NSURLFileResourceType> _NSURLFileResourceTypeUnknown =
      _lookup<NSURLFileResourceType>('NSURLFileResourceTypeUnknown');

  NSURLFileResourceType get NSURLFileResourceTypeUnknown =>
      _NSURLFileResourceTypeUnknown.value;

  set NSURLFileResourceTypeUnknown(NSURLFileResourceType value) =>
      _NSURLFileResourceTypeUnknown.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLThumbnailDictionaryKey =
      _lookup<NSURLResourceKey>('NSURLThumbnailDictionaryKey');

  NSURLResourceKey get NSURLThumbnailDictionaryKey =>
      _NSURLThumbnailDictionaryKey.value;

  set NSURLThumbnailDictionaryKey(NSURLResourceKey value) =>
      _NSURLThumbnailDictionaryKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLThumbnailKey =
      _lookup<NSURLResourceKey>('NSURLThumbnailKey');

  NSURLResourceKey get NSURLThumbnailKey => _NSURLThumbnailKey.value;

  set NSURLThumbnailKey(NSURLResourceKey value) =>
      _NSURLThumbnailKey.value = value;

  late final ffi.Pointer<NSURLThumbnailDictionaryItem>
      _NSThumbnail1024x1024SizeKey =
      _lookup<NSURLThumbnailDictionaryItem>('NSThumbnail1024x1024SizeKey');

  NSURLThumbnailDictionaryItem get NSThumbnail1024x1024SizeKey =>
      _NSThumbnail1024x1024SizeKey.value;

  set NSThumbnail1024x1024SizeKey(NSURLThumbnailDictionaryItem value) =>
      _NSThumbnail1024x1024SizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLFileSizeKey');

  NSURLResourceKey get NSURLFileSizeKey => _NSURLFileSizeKey.value;

  set NSURLFileSizeKey(NSURLResourceKey value) =>
      _NSURLFileSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileAllocatedSizeKey =
      _lookup<NSURLResourceKey>('NSURLFileAllocatedSizeKey');

  NSURLResourceKey get NSURLFileAllocatedSizeKey =>
      _NSURLFileAllocatedSizeKey.value;

  set NSURLFileAllocatedSizeKey(NSURLResourceKey value) =>
      _NSURLFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTotalFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLTotalFileSizeKey');

  NSURLResourceKey get NSURLTotalFileSizeKey => _NSURLTotalFileSizeKey.value;

  set NSURLTotalFileSizeKey(NSURLResourceKey value) =>
      _NSURLTotalFileSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLTotalFileAllocatedSizeKey =
      _lookup<NSURLResourceKey>('NSURLTotalFileAllocatedSizeKey');

  NSURLResourceKey get NSURLTotalFileAllocatedSizeKey =>
      _NSURLTotalFileAllocatedSizeKey.value;

  set NSURLTotalFileAllocatedSizeKey(NSURLResourceKey value) =>
      _NSURLTotalFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsAliasFileKey =
      _lookup<NSURLResourceKey>('NSURLIsAliasFileKey');

  NSURLResourceKey get NSURLIsAliasFileKey => _NSURLIsAliasFileKey.value;

  set NSURLIsAliasFileKey(NSURLResourceKey value) =>
      _NSURLIsAliasFileKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLFileProtectionKey =
      _lookup<NSURLResourceKey>('NSURLFileProtectionKey');

  NSURLResourceKey get NSURLFileProtectionKey => _NSURLFileProtectionKey.value;

  set NSURLFileProtectionKey(NSURLResourceKey value) =>
      _NSURLFileProtectionKey.value = value;

  late final ffi.Pointer<NSURLFileProtectionType> _NSURLFileProtectionNone =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionNone');

  NSURLFileProtectionType get NSURLFileProtectionNone =>
      _NSURLFileProtectionNone.value;

  set NSURLFileProtectionNone(NSURLFileProtectionType value) =>
      _NSURLFileProtectionNone.value = value;

  late final ffi.Pointer<NSURLFileProtectionType> _NSURLFileProtectionComplete =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionComplete');

  NSURLFileProtectionType get NSURLFileProtectionComplete =>
      _NSURLFileProtectionComplete.value;

  set NSURLFileProtectionComplete(NSURLFileProtectionType value) =>
      _NSURLFileProtectionComplete.value = value;

  late final ffi.Pointer<NSURLFileProtectionType>
      _NSURLFileProtectionCompleteUnlessOpen =
      _lookup<NSURLFileProtectionType>('NSURLFileProtectionCompleteUnlessOpen');

  NSURLFileProtectionType get NSURLFileProtectionCompleteUnlessOpen =>
      _NSURLFileProtectionCompleteUnlessOpen.value;

  set NSURLFileProtectionCompleteUnlessOpen(NSURLFileProtectionType value) =>
      _NSURLFileProtectionCompleteUnlessOpen.value = value;

  late final ffi.Pointer<NSURLFileProtectionType>
      _NSURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<NSURLFileProtectionType>(
          'NSURLFileProtectionCompleteUntilFirstUserAuthentication');

  NSURLFileProtectionType
      get NSURLFileProtectionCompleteUntilFirstUserAuthentication =>
          _NSURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  set NSURLFileProtectionCompleteUntilFirstUserAuthentication(
          NSURLFileProtectionType value) =>
      _NSURLFileProtectionCompleteUntilFirstUserAuthentication.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeLocalizedFormatDescriptionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeLocalizedFormatDescriptionKey');

  NSURLResourceKey get NSURLVolumeLocalizedFormatDescriptionKey =>
      _NSURLVolumeLocalizedFormatDescriptionKey.value;

  set NSURLVolumeLocalizedFormatDescriptionKey(NSURLResourceKey value) =>
      _NSURLVolumeLocalizedFormatDescriptionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeTotalCapacityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeTotalCapacityKey');

  NSURLResourceKey get NSURLVolumeTotalCapacityKey =>
      _NSURLVolumeTotalCapacityKey.value;

  set NSURLVolumeTotalCapacityKey(NSURLResourceKey value) =>
      _NSURLVolumeTotalCapacityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeAvailableCapacityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeAvailableCapacityKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityKey =>
      _NSURLVolumeAvailableCapacityKey.value;

  set NSURLVolumeAvailableCapacityKey(NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeResourceCountKey =
      _lookup<NSURLResourceKey>('NSURLVolumeResourceCountKey');

  NSURLResourceKey get NSURLVolumeResourceCountKey =>
      _NSURLVolumeResourceCountKey.value;

  set NSURLVolumeResourceCountKey(NSURLResourceKey value) =>
      _NSURLVolumeResourceCountKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsPersistentIDsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsPersistentIDsKey');

  NSURLResourceKey get NSURLVolumeSupportsPersistentIDsKey =>
      _NSURLVolumeSupportsPersistentIDsKey.value;

  set NSURLVolumeSupportsPersistentIDsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsPersistentIDsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsSymbolicLinksKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSymbolicLinksKey');

  NSURLResourceKey get NSURLVolumeSupportsSymbolicLinksKey =>
      _NSURLVolumeSupportsSymbolicLinksKey.value;

  set NSURLVolumeSupportsSymbolicLinksKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSymbolicLinksKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsHardLinksKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsHardLinksKey');

  NSURLResourceKey get NSURLVolumeSupportsHardLinksKey =>
      _NSURLVolumeSupportsHardLinksKey.value;

  set NSURLVolumeSupportsHardLinksKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsHardLinksKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsJournalingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsJournalingKey');

  NSURLResourceKey get NSURLVolumeSupportsJournalingKey =>
      _NSURLVolumeSupportsJournalingKey.value;

  set NSURLVolumeSupportsJournalingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsJournalingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsJournalingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsJournalingKey');

  NSURLResourceKey get NSURLVolumeIsJournalingKey =>
      _NSURLVolumeIsJournalingKey.value;

  set NSURLVolumeIsJournalingKey(NSURLResourceKey value) =>
      _NSURLVolumeIsJournalingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsSparseFilesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSparseFilesKey');

  NSURLResourceKey get NSURLVolumeSupportsSparseFilesKey =>
      _NSURLVolumeSupportsSparseFilesKey.value;

  set NSURLVolumeSupportsSparseFilesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSparseFilesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsZeroRunsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsZeroRunsKey');

  NSURLResourceKey get NSURLVolumeSupportsZeroRunsKey =>
      _NSURLVolumeSupportsZeroRunsKey.value;

  set NSURLVolumeSupportsZeroRunsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsZeroRunsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCaseSensitiveNamesKey');

  NSURLResourceKey get NSURLVolumeSupportsCaseSensitiveNamesKey =>
      _NSURLVolumeSupportsCaseSensitiveNamesKey.value;

  set NSURLVolumeSupportsCaseSensitiveNamesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCaseSensitiveNamesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsCasePreservedNamesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCasePreservedNamesKey');

  NSURLResourceKey get NSURLVolumeSupportsCasePreservedNamesKey =>
      _NSURLVolumeSupportsCasePreservedNamesKey.value;

  set NSURLVolumeSupportsCasePreservedNamesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCasePreservedNamesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsRootDirectoryDatesKey');

  NSURLResourceKey get NSURLVolumeSupportsRootDirectoryDatesKey =>
      _NSURLVolumeSupportsRootDirectoryDatesKey.value;

  set NSURLVolumeSupportsRootDirectoryDatesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsRootDirectoryDatesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsVolumeSizesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsVolumeSizesKey');

  NSURLResourceKey get NSURLVolumeSupportsVolumeSizesKey =>
      _NSURLVolumeSupportsVolumeSizesKey.value;

  set NSURLVolumeSupportsVolumeSizesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsVolumeSizesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsRenamingKey =>
      _NSURLVolumeSupportsRenamingKey.value;

  set NSURLVolumeSupportsRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsRenamingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsAdvisoryFileLockingKey');

  NSURLResourceKey get NSURLVolumeSupportsAdvisoryFileLockingKey =>
      _NSURLVolumeSupportsAdvisoryFileLockingKey.value;

  set NSURLVolumeSupportsAdvisoryFileLockingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsAdvisoryFileLockingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsExtendedSecurityKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsExtendedSecurityKey');

  NSURLResourceKey get NSURLVolumeSupportsExtendedSecurityKey =>
      _NSURLVolumeSupportsExtendedSecurityKey.value;

  set NSURLVolumeSupportsExtendedSecurityKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsExtendedSecurityKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsBrowsableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsBrowsableKey');

  NSURLResourceKey get NSURLVolumeIsBrowsableKey =>
      _NSURLVolumeIsBrowsableKey.value;

  set NSURLVolumeIsBrowsableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsBrowsableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeMaximumFileSizeKey =
      _lookup<NSURLResourceKey>('NSURLVolumeMaximumFileSizeKey');

  NSURLResourceKey get NSURLVolumeMaximumFileSizeKey =>
      _NSURLVolumeMaximumFileSizeKey.value;

  set NSURLVolumeMaximumFileSizeKey(NSURLResourceKey value) =>
      _NSURLVolumeMaximumFileSizeKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsEjectableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsEjectableKey');

  NSURLResourceKey get NSURLVolumeIsEjectableKey =>
      _NSURLVolumeIsEjectableKey.value;

  set NSURLVolumeIsEjectableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsEjectableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsRemovableKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsRemovableKey');

  NSURLResourceKey get NSURLVolumeIsRemovableKey =>
      _NSURLVolumeIsRemovableKey.value;

  set NSURLVolumeIsRemovableKey(NSURLResourceKey value) =>
      _NSURLVolumeIsRemovableKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsInternalKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsInternalKey');

  NSURLResourceKey get NSURLVolumeIsInternalKey =>
      _NSURLVolumeIsInternalKey.value;

  set NSURLVolumeIsInternalKey(NSURLResourceKey value) =>
      _NSURLVolumeIsInternalKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsAutomountedKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsAutomountedKey');

  NSURLResourceKey get NSURLVolumeIsAutomountedKey =>
      _NSURLVolumeIsAutomountedKey.value;

  set NSURLVolumeIsAutomountedKey(NSURLResourceKey value) =>
      _NSURLVolumeIsAutomountedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsLocalKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsLocalKey');

  NSURLResourceKey get NSURLVolumeIsLocalKey => _NSURLVolumeIsLocalKey.value;

  set NSURLVolumeIsLocalKey(NSURLResourceKey value) =>
      _NSURLVolumeIsLocalKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsReadOnlyKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsReadOnlyKey');

  NSURLResourceKey get NSURLVolumeIsReadOnlyKey =>
      _NSURLVolumeIsReadOnlyKey.value;

  set NSURLVolumeIsReadOnlyKey(NSURLResourceKey value) =>
      _NSURLVolumeIsReadOnlyKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeCreationDateKey =
      _lookup<NSURLResourceKey>('NSURLVolumeCreationDateKey');

  NSURLResourceKey get NSURLVolumeCreationDateKey =>
      _NSURLVolumeCreationDateKey.value;

  set NSURLVolumeCreationDateKey(NSURLResourceKey value) =>
      _NSURLVolumeCreationDateKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeURLForRemountingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeURLForRemountingKey');

  NSURLResourceKey get NSURLVolumeURLForRemountingKey =>
      _NSURLVolumeURLForRemountingKey.value;

  set NSURLVolumeURLForRemountingKey(NSURLResourceKey value) =>
      _NSURLVolumeURLForRemountingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeUUIDStringKey =
      _lookup<NSURLResourceKey>('NSURLVolumeUUIDStringKey');

  NSURLResourceKey get NSURLVolumeUUIDStringKey =>
      _NSURLVolumeUUIDStringKey.value;

  set NSURLVolumeUUIDStringKey(NSURLResourceKey value) =>
      _NSURLVolumeUUIDStringKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeNameKey =
      _lookup<NSURLResourceKey>('NSURLVolumeNameKey');

  NSURLResourceKey get NSURLVolumeNameKey => _NSURLVolumeNameKey.value;

  set NSURLVolumeNameKey(NSURLResourceKey value) =>
      _NSURLVolumeNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeLocalizedNameKey =
      _lookup<NSURLResourceKey>('NSURLVolumeLocalizedNameKey');

  NSURLResourceKey get NSURLVolumeLocalizedNameKey =>
      _NSURLVolumeLocalizedNameKey.value;

  set NSURLVolumeLocalizedNameKey(NSURLResourceKey value) =>
      _NSURLVolumeLocalizedNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsEncryptedKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsEncryptedKey');

  NSURLResourceKey get NSURLVolumeIsEncryptedKey =>
      _NSURLVolumeIsEncryptedKey.value;

  set NSURLVolumeIsEncryptedKey(NSURLResourceKey value) =>
      _NSURLVolumeIsEncryptedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeIsRootFileSystemKey =
      _lookup<NSURLResourceKey>('NSURLVolumeIsRootFileSystemKey');

  NSURLResourceKey get NSURLVolumeIsRootFileSystemKey =>
      _NSURLVolumeIsRootFileSystemKey.value;

  set NSURLVolumeIsRootFileSystemKey(NSURLResourceKey value) =>
      _NSURLVolumeIsRootFileSystemKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsCompressionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsCompressionKey');

  NSURLResourceKey get NSURLVolumeSupportsCompressionKey =>
      _NSURLVolumeSupportsCompressionKey.value;

  set NSURLVolumeSupportsCompressionKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsCompressionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsFileCloningKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsFileCloningKey');

  NSURLResourceKey get NSURLVolumeSupportsFileCloningKey =>
      _NSURLVolumeSupportsFileCloningKey.value;

  set NSURLVolumeSupportsFileCloningKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsFileCloningKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLVolumeSupportsSwapRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsSwapRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsSwapRenamingKey =>
      _NSURLVolumeSupportsSwapRenamingKey.value;

  set NSURLVolumeSupportsSwapRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsSwapRenamingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsExclusiveRenamingKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsExclusiveRenamingKey');

  NSURLResourceKey get NSURLVolumeSupportsExclusiveRenamingKey =>
      _NSURLVolumeSupportsExclusiveRenamingKey.value;

  set NSURLVolumeSupportsExclusiveRenamingKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsExclusiveRenamingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsImmutableFilesKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsImmutableFilesKey');

  NSURLResourceKey get NSURLVolumeSupportsImmutableFilesKey =>
      _NSURLVolumeSupportsImmutableFilesKey.value;

  set NSURLVolumeSupportsImmutableFilesKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsImmutableFilesKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsAccessPermissionsKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsAccessPermissionsKey');

  NSURLResourceKey get NSURLVolumeSupportsAccessPermissionsKey =>
      _NSURLVolumeSupportsAccessPermissionsKey.value;

  set NSURLVolumeSupportsAccessPermissionsKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsAccessPermissionsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeSupportsFileProtectionKey =
      _lookup<NSURLResourceKey>('NSURLVolumeSupportsFileProtectionKey');

  NSURLResourceKey get NSURLVolumeSupportsFileProtectionKey =>
      _NSURLVolumeSupportsFileProtectionKey.value;

  set NSURLVolumeSupportsFileProtectionKey(NSURLResourceKey value) =>
      _NSURLVolumeSupportsFileProtectionKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<NSURLResourceKey>(
          'NSURLVolumeAvailableCapacityForImportantUsageKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityForImportantUsageKey =>
      _NSURLVolumeAvailableCapacityForImportantUsageKey.value;

  set NSURLVolumeAvailableCapacityForImportantUsageKey(
          NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityForImportantUsageKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<NSURLResourceKey>(
          'NSURLVolumeAvailableCapacityForOpportunisticUsageKey');

  NSURLResourceKey get NSURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  set NSURLVolumeAvailableCapacityForOpportunisticUsageKey(
          NSURLResourceKey value) =>
      _NSURLVolumeAvailableCapacityForOpportunisticUsageKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLIsUbiquitousItemKey =
      _lookup<NSURLResourceKey>('NSURLIsUbiquitousItemKey');

  NSURLResourceKey get NSURLIsUbiquitousItemKey =>
      _NSURLIsUbiquitousItemKey.value;

  set NSURLIsUbiquitousItemKey(NSURLResourceKey value) =>
      _NSURLIsUbiquitousItemKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemHasUnresolvedConflictsKey');

  NSURLResourceKey get NSURLUbiquitousItemHasUnresolvedConflictsKey =>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey.value;

  set NSURLUbiquitousItemHasUnresolvedConflictsKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemHasUnresolvedConflictsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsDownloadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsDownloadedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsDownloadedKey =>
      _NSURLUbiquitousItemIsDownloadedKey.value;

  set NSURLUbiquitousItemIsDownloadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsDownloadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemIsDownloadingKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsDownloadingKey');

  NSURLResourceKey get NSURLUbiquitousItemIsDownloadingKey =>
      _NSURLUbiquitousItemIsDownloadingKey.value;

  set NSURLUbiquitousItemIsDownloadingKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsDownloadingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsUploadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsUploadedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsUploadedKey =>
      _NSURLUbiquitousItemIsUploadedKey.value;

  set NSURLUbiquitousItemIsUploadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsUploadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsUploadingKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsUploadingKey');

  NSURLResourceKey get NSURLUbiquitousItemIsUploadingKey =>
      _NSURLUbiquitousItemIsUploadingKey.value;

  set NSURLUbiquitousItemIsUploadingKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsUploadingKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemPercentDownloadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemPercentDownloadedKey');

  NSURLResourceKey get NSURLUbiquitousItemPercentDownloadedKey =>
      _NSURLUbiquitousItemPercentDownloadedKey.value;

  set NSURLUbiquitousItemPercentDownloadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemPercentDownloadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemPercentUploadedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemPercentUploadedKey');

  NSURLResourceKey get NSURLUbiquitousItemPercentUploadedKey =>
      _NSURLUbiquitousItemPercentUploadedKey.value;

  set NSURLUbiquitousItemPercentUploadedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemPercentUploadedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadingStatusKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadingStatusKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadingStatusKey =>
      _NSURLUbiquitousItemDownloadingStatusKey.value;

  set NSURLUbiquitousItemDownloadingStatusKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadingStatusKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadingErrorKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadingErrorKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadingErrorKey =>
      _NSURLUbiquitousItemDownloadingErrorKey.value;

  set NSURLUbiquitousItemDownloadingErrorKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadingErrorKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemUploadingErrorKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemUploadingErrorKey');

  NSURLResourceKey get NSURLUbiquitousItemUploadingErrorKey =>
      _NSURLUbiquitousItemUploadingErrorKey.value;

  set NSURLUbiquitousItemUploadingErrorKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemUploadingErrorKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemDownloadRequestedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemDownloadRequestedKey');

  NSURLResourceKey get NSURLUbiquitousItemDownloadRequestedKey =>
      _NSURLUbiquitousItemDownloadRequestedKey.value;

  set NSURLUbiquitousItemDownloadRequestedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemDownloadRequestedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemContainerDisplayNameKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemContainerDisplayNameKey');

  NSURLResourceKey get NSURLUbiquitousItemContainerDisplayNameKey =>
      _NSURLUbiquitousItemContainerDisplayNameKey.value;

  set NSURLUbiquitousItemContainerDisplayNameKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemContainerDisplayNameKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsExcludedFromSyncKey');

  NSURLResourceKey get NSURLUbiquitousItemIsExcludedFromSyncKey =>
      _NSURLUbiquitousItemIsExcludedFromSyncKey.value;

  set NSURLUbiquitousItemIsExcludedFromSyncKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsExcludedFromSyncKey.value = value;

  late final ffi.Pointer<NSURLResourceKey> _NSURLUbiquitousItemIsSharedKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousItemIsSharedKey');

  NSURLResourceKey get NSURLUbiquitousItemIsSharedKey =>
      _NSURLUbiquitousItemIsSharedKey.value;

  set NSURLUbiquitousItemIsSharedKey(NSURLResourceKey value) =>
      _NSURLUbiquitousItemIsSharedKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey =
      _lookup<NSURLResourceKey>('NSURLUbiquitousSharedItemCurrentUserRoleKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemCurrentUserRoleKey =>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey.value;

  set NSURLUbiquitousSharedItemCurrentUserRoleKey(NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemCurrentUserRoleKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemCurrentUserPermissionsKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemCurrentUserPermissionsKey =>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey.value;

  set NSURLUbiquitousSharedItemCurrentUserPermissionsKey(
          NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemCurrentUserPermissionsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemOwnerNameComponentsKey');

  NSURLResourceKey get NSURLUbiquitousSharedItemOwnerNameComponentsKey =>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey.value;

  set NSURLUbiquitousSharedItemOwnerNameComponentsKey(NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemOwnerNameComponentsKey.value = value;

  late final ffi.Pointer<NSURLResourceKey>
      _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey =
      _lookup<NSURLResourceKey>(
          'NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey');

  NSURLResourceKey
      get NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey =>
          _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey.value;

  set NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey(
          NSURLResourceKey value) =>
      _NSURLUbiquitousSharedItemMostRecentEditorNameComponentsKey.value = value;

  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusNotDownloaded');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusNotDownloaded =>
          _NSURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  set NSURLUbiquitousItemDownloadingStatusNotDownloaded(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusNotDownloaded.value = value;

  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusDownloaded');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusDownloaded =>
          _NSURLUbiquitousItemDownloadingStatusDownloaded.value;

  set NSURLUbiquitousItemDownloadingStatusDownloaded(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusDownloaded.value = value;

  late final ffi.Pointer<NSURLUbiquitousItemDownloadingStatus>
      _NSURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<NSURLUbiquitousItemDownloadingStatus>(
          'NSURLUbiquitousItemDownloadingStatusCurrent');

  NSURLUbiquitousItemDownloadingStatus
      get NSURLUbiquitousItemDownloadingStatusCurrent =>
          _NSURLUbiquitousItemDownloadingStatusCurrent.value;

  set NSURLUbiquitousItemDownloadingStatusCurrent(
          NSURLUbiquitousItemDownloadingStatus value) =>
      _NSURLUbiquitousItemDownloadingStatusCurrent.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemRole>
      _NSURLUbiquitousSharedItemRoleOwner =
      _lookup<NSURLUbiquitousSharedItemRole>(
          'NSURLUbiquitousSharedItemRoleOwner');

  NSURLUbiquitousSharedItemRole get NSURLUbiquitousSharedItemRoleOwner =>
      _NSURLUbiquitousSharedItemRoleOwner.value;

  set NSURLUbiquitousSharedItemRoleOwner(NSURLUbiquitousSharedItemRole value) =>
      _NSURLUbiquitousSharedItemRoleOwner.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemRole>
      _NSURLUbiquitousSharedItemRoleParticipant =
      _lookup<NSURLUbiquitousSharedItemRole>(
          'NSURLUbiquitousSharedItemRoleParticipant');

  NSURLUbiquitousSharedItemRole get NSURLUbiquitousSharedItemRoleParticipant =>
      _NSURLUbiquitousSharedItemRoleParticipant.value;

  set NSURLUbiquitousSharedItemRoleParticipant(
          NSURLUbiquitousSharedItemRole value) =>
      _NSURLUbiquitousSharedItemRoleParticipant.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemPermissions>
      _NSURLUbiquitousSharedItemPermissionsReadOnly =
      _lookup<NSURLUbiquitousSharedItemPermissions>(
          'NSURLUbiquitousSharedItemPermissionsReadOnly');

  NSURLUbiquitousSharedItemPermissions
      get NSURLUbiquitousSharedItemPermissionsReadOnly =>
          _NSURLUbiquitousSharedItemPermissionsReadOnly.value;

  set NSURLUbiquitousSharedItemPermissionsReadOnly(
          NSURLUbiquitousSharedItemPermissions value) =>
      _NSURLUbiquitousSharedItemPermissionsReadOnly.value = value;

  late final ffi.Pointer<NSURLUbiquitousSharedItemPermissions>
      _NSURLUbiquitousSharedItemPermissionsReadWrite =
      _lookup<NSURLUbiquitousSharedItemPermissions>(
          'NSURLUbiquitousSharedItemPermissionsReadWrite');

  NSURLUbiquitousSharedItemPermissions
      get NSURLUbiquitousSharedItemPermissionsReadWrite =>
          _NSURLUbiquitousSharedItemPermissionsReadWrite.value;

  set NSURLUbiquitousSharedItemPermissionsReadWrite(
          NSURLUbiquitousSharedItemPermissions value) =>
      _NSURLUbiquitousSharedItemPermissionsReadWrite.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSURLQueryItem1 =
      _getClass1("NSURLQueryItem");
  late final ffi.Pointer<ObjCSel> _sel_initWithName_value_1 =
      _registerName1("initWithName:value:");
  late final ffi.Pointer<ObjCSel> _sel_queryItemWithName_value_1 =
      _registerName1("queryItemWithName:value:");
  late final ffi.Pointer<ObjCSel> _sel_value1 = _registerName1("value");
  late final ffi.Pointer<ObjCObject> _class_NSURLComponents1 =
      _getClass1("NSURLComponents");
  late final ffi.Pointer<ObjCSel> _sel_initWithURL_resolvingAgainstBaseURL_1 =
      _registerName1("initWithURL:resolvingAgainstBaseURL:");
  late final ffi.Pointer<ObjCSel>
      _sel_componentsWithURL_resolvingAgainstBaseURL_1 =
      _registerName1("componentsWithURL:resolvingAgainstBaseURL:");
  late final ffi.Pointer<ObjCSel> _sel_componentsWithString_1 =
      _registerName1("componentsWithString:");
  late final ffi.Pointer<ObjCSel> _sel_URLRelativeToURL_1 =
      _registerName1("URLRelativeToURL:");
  late final ffi.Pointer<ObjCSel> _sel_setScheme_1 =
      _registerName1("setScheme:");
  late final ffi.Pointer<ObjCSel> _sel_setUser_1 = _registerName1("setUser:");
  late final ffi.Pointer<ObjCSel> _sel_setPassword_1 =
      _registerName1("setPassword:");
  late final ffi.Pointer<ObjCSel> _sel_setHost_1 = _registerName1("setHost:");
  late final ffi.Pointer<ObjCSel> _sel_setPort_1 = _registerName1("setPort:");
  late final ffi.Pointer<ObjCSel> _sel_setPath_1 = _registerName1("setPath:");
  late final ffi.Pointer<ObjCSel> _sel_setQuery_1 = _registerName1("setQuery:");
  late final ffi.Pointer<ObjCSel> _sel_setFragment_1 =
      _registerName1("setFragment:");
  late final ffi.Pointer<ObjCSel> _sel_percentEncodedUser1 =
      _registerName1("percentEncodedUser");
  late final ffi.Pointer<ObjCSel> _sel_setPercentEncodedUser_1 =
      _registerName1("setPercentEncodedUser:");
  late final ffi.Pointer<ObjCSel> _sel_percentEncodedPassword1 =
      _registerName1("percentEncodedPassword");
  late final ffi.Pointer<ObjCSel> _sel_setPercentEncodedPassword_1 =
      _registerName1("setPercentEncodedPassword:");
  late final ffi.Pointer<ObjCSel> _sel_percentEncodedHost1 =
      _registerName1("percentEncodedHost");
  late final ffi.Pointer<ObjCSel> _sel_setPercentEncodedHost_1 =
      _registerName1("setPercentEncodedHost:");
  late final ffi.Pointer<ObjCSel> _sel_percentEncodedPath1 =
      _registerName1("percentEncodedPath");
  late final ffi.Pointer<ObjCSel> _sel_setPercentEncodedPath_1 =
      _registerName1("setPercentEncodedPath:");
  late final ffi.Pointer<ObjCSel> _sel_percentEncodedQuery1 =
      _registerName1("percentEncodedQuery");
  late final ffi.Pointer<ObjCSel> _sel_setPercentEncodedQuery_1 =
      _registerName1("setPercentEncodedQuery:");
  late final ffi.Pointer<ObjCSel> _sel_percentEncodedFragment1 =
      _registerName1("percentEncodedFragment");
  late final ffi.Pointer<ObjCSel> _sel_setPercentEncodedFragment_1 =
      _registerName1("setPercentEncodedFragment:");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfScheme1 =
      _registerName1("rangeOfScheme");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfUser1 =
      _registerName1("rangeOfUser");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfPassword1 =
      _registerName1("rangeOfPassword");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfHost1 =
      _registerName1("rangeOfHost");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfPort1 =
      _registerName1("rangeOfPort");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfPath1 =
      _registerName1("rangeOfPath");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfQuery1 =
      _registerName1("rangeOfQuery");
  late final ffi.Pointer<ObjCSel> _sel_rangeOfFragment1 =
      _registerName1("rangeOfFragment");
  late final ffi.Pointer<ObjCSel> _sel_queryItems1 =
      _registerName1("queryItems");
  late final ffi.Pointer<ObjCSel> _sel_setQueryItems_1 =
      _registerName1("setQueryItems:");
  late final ffi.Pointer<ObjCSel> _sel_percentEncodedQueryItems1 =
      _registerName1("percentEncodedQueryItems");
  late final ffi.Pointer<ObjCSel> _sel_setPercentEncodedQueryItems_1 =
      _registerName1("setPercentEncodedQueryItems:");
  late final ffi.Pointer<ObjCObject> _class_NSFileSecurity1 =
      _getClass1("NSFileSecurity");
  ffi.Pointer<ObjCObject> NSStringFromSelector6(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector6(
      aSelector,
    );
  }

  late final _NSStringFromSelector6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector6 = _NSStringFromSelector6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString6(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString6(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString6 = _NSSelectorFromString6Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass6(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass6(
      aClass,
    );
  }

  late final _NSStringFromClass6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass6 = _NSStringFromClass6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString6(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString6(
      aClassName,
    );
  }

  late final _NSClassFromString6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString6 = _NSClassFromString6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol6(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol6(
      proto,
    );
  }

  late final _NSStringFromProtocol6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol6 = _NSStringFromProtocol6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString6(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString6(
      namestr,
    );
  }

  late final _NSProtocolFromString6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString6 = _NSProtocolFromString6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment6(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment6(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment6 = _NSGetSizeAndAlignment6Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog6(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog6(
      format,
    );
  }

  late final _NSLog6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog6 =
      _NSLog6Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv6(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv6(
      format,
      args,
    );
  }

  late final _NSLogv6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv6 =
      _NSLogv6Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake6(
    int loc,
    int len,
  ) {
    return ___CFRangeMake6(
      loc,
      len,
    );
  }

  late final ___CFRangeMake6Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake6 =
      ___CFRangeMake6Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID6() {
    return _CFNullGetTypeID6();
  }

  late final _CFNullGetTypeID6Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID6 =
      _CFNullGetTypeID6Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID6() {
    return _CFAllocatorGetTypeID6();
  }

  late final _CFAllocatorGetTypeID6Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID6 =
      _CFAllocatorGetTypeID6Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault6(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault6(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault6 =
      _CFAllocatorSetDefault6Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault6() {
    return _CFAllocatorGetDefault6();
  }

  late final _CFAllocatorGetDefault6Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault6 =
      _CFAllocatorGetDefault6Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate6(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate6(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate6Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate6 = _CFAllocatorCreate6Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate6(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate6(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate6 = _CFAllocatorAllocate6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate6(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate6(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate6 = _CFAllocatorReallocate6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate6(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate6(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate6 = _CFAllocatorDeallocate6Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize6(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize6(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize6Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize6 =
      _CFAllocatorGetPreferredSizeForSize6Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext6(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext6(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext6 = _CFAllocatorGetContext6Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID6(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID6(
      cf,
    );
  }

  late final _CFGetTypeID6Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID6 =
      _CFGetTypeID6Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription6(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription6(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription6Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription6 =
      _CFCopyTypeIDDescription6Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain6(
    CFTypeRef cf,
  ) {
    return _CFRetain6(
      cf,
    );
  }

  late final _CFRetain6Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain6 =
      _CFRetain6Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease6(
    CFTypeRef cf,
  ) {
    return _CFRelease6(
      cf,
    );
  }

  late final _CFRelease6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease6 =
      _CFRelease6Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease6(
    CFTypeRef arg,
  ) {
    return _CFAutorelease6(
      arg,
    );
  }

  late final _CFAutorelease6Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease6 =
      _CFAutorelease6Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount6(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount6(
      cf,
    );
  }

  late final _CFGetRetainCount6Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount6 =
      _CFGetRetainCount6Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual6(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual6(
      cf1,
      cf2,
    );
  }

  late final _CFEqual6Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual6 =
      _CFEqual6Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash6(
    CFTypeRef cf,
  ) {
    return _CFHash6(
      cf,
    );
  }

  late final _CFHash6Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash6 = _CFHash6Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription6(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription6(
      cf,
    );
  }

  late final _CFCopyDescription6Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription6 =
      _CFCopyDescription6Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator6(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator6(
      cf,
    );
  }

  late final _CFGetAllocator6Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator6 =
      _CFGetAllocator6Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable6(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable6(
      cf,
    );
  }

  late final _CFMakeCollectable6Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable6 =
      _CFMakeCollectable6Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone6() {
    return _NSDefaultMallocZone6();
  }

  late final _NSDefaultMallocZone6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone6 =
      _NSDefaultMallocZone6Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone6(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone6(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone6 = _NSCreateZone6Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone6(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone6(
      zone,
    );
  }

  late final _NSRecycleZone6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone6 =
      _NSRecycleZone6Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName6(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName6(
      zone,
      name,
    );
  }

  late final _NSSetZoneName6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName6 = _NSSetZoneName6Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName6(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName6(
      zone,
    );
  }

  late final _NSZoneName6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName6 = _NSZoneName6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer6(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer6(
      ptr,
    );
  }

  late final _NSZoneFromPointer6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer6 = _NSZoneFromPointer6Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc6(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc6(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc6 = _NSZoneMalloc6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc6(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc6(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc6 = _NSZoneCalloc6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc6(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc6(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc6 = _NSZoneRealloc6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree6(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree6(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree6 = _NSZoneFree6Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable6(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable6(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable6 = _NSAllocateCollectable6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable6(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable6(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable6 =
      _NSReallocateCollectable6Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize6() {
    return _NSPageSize6();
  }

  late final _NSPageSize6Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize6 = _NSPageSize6Ptr.asFunction<int Function()>();

  int NSLogPageSize6() {
    return _NSLogPageSize6();
  }

  late final _NSLogPageSize6Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize6 = _NSLogPageSize6Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize6(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize6(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize6Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize6 =
      _NSRoundUpToMultipleOfPageSize6Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize6(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize6(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize6Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize6 =
      _NSRoundDownToMultipleOfPageSize6Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages6(
    int bytes,
  ) {
    return _NSAllocateMemoryPages6(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages6Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages6 = _NSAllocateMemoryPages6Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages6(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages6(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages6 = _NSDeallocateMemoryPages6Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages6(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages6(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages6 = _NSCopyMemoryPages6Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable6() {
    return _NSRealMemoryAvailable6();
  }

  late final _NSRealMemoryAvailable6Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable6 =
      _NSRealMemoryAvailable6Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject6(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject6(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject6 = _NSAllocateObject6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject6(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject6(
      object,
    );
  }

  late final _NSDeallocateObject6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject6 = _NSDeallocateObject6Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject6(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject6(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject6 = _NSCopyObject6Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone6(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone6(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone6Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone6 = _NSShouldRetainWithZone6Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount6(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount6(
      object,
    );
  }

  late final _NSIncrementExtraRefCount6Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount6 = _NSIncrementExtraRefCount6Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero6(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero6(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero6Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero6 =
      _NSDecrementExtraRefCountWasZero6Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount6(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount6(
      object,
    );
  }

  late final _NSExtraRefCount6Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount6 =
      _NSExtraRefCount6Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromSelector7(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector7(
      aSelector,
    );
  }

  late final _NSStringFromSelector7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector7 = _NSStringFromSelector7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString7(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString7(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString7 = _NSSelectorFromString7Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass7(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass7(
      aClass,
    );
  }

  late final _NSStringFromClass7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass7 = _NSStringFromClass7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString7(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString7(
      aClassName,
    );
  }

  late final _NSClassFromString7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString7 = _NSClassFromString7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol7(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol7(
      proto,
    );
  }

  late final _NSStringFromProtocol7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol7 = _NSStringFromProtocol7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString7(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString7(
      namestr,
    );
  }

  late final _NSProtocolFromString7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString7 = _NSProtocolFromString7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment7(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment7(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment7 = _NSGetSizeAndAlignment7Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog7(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog7(
      format,
    );
  }

  late final _NSLog7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog7 =
      _NSLog7Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv7(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv7(
      format,
      args,
    );
  }

  late final _NSLogv7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv7 =
      _NSLogv7Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake7(
    int loc,
    int len,
  ) {
    return ___CFRangeMake7(
      loc,
      len,
    );
  }

  late final ___CFRangeMake7Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake7 =
      ___CFRangeMake7Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID7() {
    return _CFNullGetTypeID7();
  }

  late final _CFNullGetTypeID7Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID7 =
      _CFNullGetTypeID7Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID7() {
    return _CFAllocatorGetTypeID7();
  }

  late final _CFAllocatorGetTypeID7Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID7 =
      _CFAllocatorGetTypeID7Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault7(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault7(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault7 =
      _CFAllocatorSetDefault7Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault7() {
    return _CFAllocatorGetDefault7();
  }

  late final _CFAllocatorGetDefault7Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault7 =
      _CFAllocatorGetDefault7Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate7(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate7(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate7Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate7 = _CFAllocatorCreate7Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate7(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate7(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate7 = _CFAllocatorAllocate7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate7(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate7(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate7 = _CFAllocatorReallocate7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate7(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate7(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate7 = _CFAllocatorDeallocate7Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize7(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize7(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize7Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize7 =
      _CFAllocatorGetPreferredSizeForSize7Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext7(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext7(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext7 = _CFAllocatorGetContext7Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID7(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID7(
      cf,
    );
  }

  late final _CFGetTypeID7Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID7 =
      _CFGetTypeID7Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription7(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription7(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription7Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription7 =
      _CFCopyTypeIDDescription7Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain7(
    CFTypeRef cf,
  ) {
    return _CFRetain7(
      cf,
    );
  }

  late final _CFRetain7Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain7 =
      _CFRetain7Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease7(
    CFTypeRef cf,
  ) {
    return _CFRelease7(
      cf,
    );
  }

  late final _CFRelease7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease7 =
      _CFRelease7Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease7(
    CFTypeRef arg,
  ) {
    return _CFAutorelease7(
      arg,
    );
  }

  late final _CFAutorelease7Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease7 =
      _CFAutorelease7Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount7(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount7(
      cf,
    );
  }

  late final _CFGetRetainCount7Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount7 =
      _CFGetRetainCount7Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual7(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual7(
      cf1,
      cf2,
    );
  }

  late final _CFEqual7Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual7 =
      _CFEqual7Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash7(
    CFTypeRef cf,
  ) {
    return _CFHash7(
      cf,
    );
  }

  late final _CFHash7Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash7 = _CFHash7Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription7(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription7(
      cf,
    );
  }

  late final _CFCopyDescription7Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription7 =
      _CFCopyDescription7Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator7(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator7(
      cf,
    );
  }

  late final _CFGetAllocator7Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator7 =
      _CFGetAllocator7Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable7(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable7(
      cf,
    );
  }

  late final _CFMakeCollectable7Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable7 =
      _CFMakeCollectable7Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone7() {
    return _NSDefaultMallocZone7();
  }

  late final _NSDefaultMallocZone7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone7 =
      _NSDefaultMallocZone7Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone7(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone7(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone7 = _NSCreateZone7Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone7(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone7(
      zone,
    );
  }

  late final _NSRecycleZone7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone7 =
      _NSRecycleZone7Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName7(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName7(
      zone,
      name,
    );
  }

  late final _NSSetZoneName7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName7 = _NSSetZoneName7Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName7(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName7(
      zone,
    );
  }

  late final _NSZoneName7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName7 = _NSZoneName7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer7(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer7(
      ptr,
    );
  }

  late final _NSZoneFromPointer7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer7 = _NSZoneFromPointer7Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc7(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc7(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc7 = _NSZoneMalloc7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc7(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc7(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc7 = _NSZoneCalloc7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc7(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc7(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc7 = _NSZoneRealloc7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree7(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree7(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree7 = _NSZoneFree7Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable7(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable7(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable7 = _NSAllocateCollectable7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable7(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable7(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable7 =
      _NSReallocateCollectable7Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize7() {
    return _NSPageSize7();
  }

  late final _NSPageSize7Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize7 = _NSPageSize7Ptr.asFunction<int Function()>();

  int NSLogPageSize7() {
    return _NSLogPageSize7();
  }

  late final _NSLogPageSize7Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize7 = _NSLogPageSize7Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize7(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize7(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize7Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize7 =
      _NSRoundUpToMultipleOfPageSize7Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize7(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize7(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize7Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize7 =
      _NSRoundDownToMultipleOfPageSize7Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages7(
    int bytes,
  ) {
    return _NSAllocateMemoryPages7(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages7Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages7 = _NSAllocateMemoryPages7Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages7(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages7(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages7 = _NSDeallocateMemoryPages7Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages7(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages7(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages7 = _NSCopyMemoryPages7Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable7() {
    return _NSRealMemoryAvailable7();
  }

  late final _NSRealMemoryAvailable7Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable7 =
      _NSRealMemoryAvailable7Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject7(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject7(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject7 = _NSAllocateObject7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject7(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject7(
      object,
    );
  }

  late final _NSDeallocateObject7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject7 = _NSDeallocateObject7Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject7(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject7(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject7 = _NSCopyObject7Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone7(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone7(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone7 = _NSShouldRetainWithZone7Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount7(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount7(
      object,
    );
  }

  late final _NSIncrementExtraRefCount7Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount7 = _NSIncrementExtraRefCount7Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero7(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero7(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero7Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero7 =
      _NSDecrementExtraRefCountWasZero7Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount7(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount7(
      object,
    );
  }

  late final _NSExtraRefCount7Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount7 =
      _NSExtraRefCount7Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSURLResponse1 =
      _getClass1("NSURLResponse");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_1 =
      _registerName1(
          "initWithURL:MIMEType:expectedContentLength:textEncodingName:");
  instancetype _objc_msgSend_289(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> URL,
    ffi.Pointer<ObjCObject> MIMEType,
    int length,
    ffi.Pointer<ObjCObject> name,
  ) {
    return __objc_msgSend_289(
      obj,
      sel,
      URL,
      MIMEType,
      length,
      name,
    );
  }

  late final __objc_msgSend_289Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_289 = __objc_msgSend_289Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_MIMEType1 = _registerName1("MIMEType");
  late final ffi.Pointer<ObjCSel> _sel_expectedContentLength1 =
      _registerName1("expectedContentLength");
  late final ffi.Pointer<ObjCSel> _sel_textEncodingName1 =
      _registerName1("textEncodingName");
  late final ffi.Pointer<ObjCSel> _sel_suggestedFilename1 =
      _registerName1("suggestedFilename");
  late final ffi.Pointer<ObjCObject> _class_NSHTTPURLResponse1 =
      _getClass1("NSHTTPURLResponse");
  late final ffi.Pointer<ObjCSel>
      _sel_initWithURL_statusCode_HTTPVersion_headerFields_1 =
      _registerName1("initWithURL:statusCode:HTTPVersion:headerFields:");
  instancetype _objc_msgSend_290(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> url,
    int statusCode,
    ffi.Pointer<ObjCObject> HTTPVersion,
    ffi.Pointer<ObjCObject> headerFields,
  ) {
    return __objc_msgSend_290(
      obj,
      sel,
      url,
      statusCode,
      HTTPVersion,
      headerFields,
    );
  }

  late final __objc_msgSend_290Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_290 = __objc_msgSend_290Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_statusCode1 =
      _registerName1("statusCode");
  late final ffi.Pointer<ObjCSel> _sel_allHeaderFields1 =
      _registerName1("allHeaderFields");
  late final ffi.Pointer<ObjCSel> _sel_localizedStringForStatusCode_1 =
      _registerName1("localizedStringForStatusCode:");
  ffi.Pointer<ObjCObject> _objc_msgSend_291(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int statusCode,
  ) {
    return __objc_msgSend_291(
      obj,
      sel,
      statusCode,
    );
  }

  late final __objc_msgSend_291Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>, NSInteger)>>('objc_msgSend');
  late final __objc_msgSend_291 = __objc_msgSend_291Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  ffi.Pointer<ObjCObject> NSStringFromSelector8(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector8(
      aSelector,
    );
  }

  late final _NSStringFromSelector8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector8 = _NSStringFromSelector8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString8(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString8(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString8 = _NSSelectorFromString8Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass8(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass8(
      aClass,
    );
  }

  late final _NSStringFromClass8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass8 = _NSStringFromClass8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString8(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString8(
      aClassName,
    );
  }

  late final _NSClassFromString8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString8 = _NSClassFromString8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol8(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol8(
      proto,
    );
  }

  late final _NSStringFromProtocol8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol8 = _NSStringFromProtocol8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString8(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString8(
      namestr,
    );
  }

  late final _NSProtocolFromString8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString8 = _NSProtocolFromString8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment8(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment8(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment8 = _NSGetSizeAndAlignment8Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog8(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog8(
      format,
    );
  }

  late final _NSLog8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog8 =
      _NSLog8Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv8(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv8(
      format,
      args,
    );
  }

  late final _NSLogv8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv8 =
      _NSLogv8Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake8(
    int loc,
    int len,
  ) {
    return ___CFRangeMake8(
      loc,
      len,
    );
  }

  late final ___CFRangeMake8Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake8 =
      ___CFRangeMake8Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID8() {
    return _CFNullGetTypeID8();
  }

  late final _CFNullGetTypeID8Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID8 =
      _CFNullGetTypeID8Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID8() {
    return _CFAllocatorGetTypeID8();
  }

  late final _CFAllocatorGetTypeID8Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID8 =
      _CFAllocatorGetTypeID8Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault8(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault8(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault8 =
      _CFAllocatorSetDefault8Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault8() {
    return _CFAllocatorGetDefault8();
  }

  late final _CFAllocatorGetDefault8Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault8 =
      _CFAllocatorGetDefault8Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate8(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate8(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate8Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate8 = _CFAllocatorCreate8Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate8(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate8(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate8 = _CFAllocatorAllocate8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate8(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate8(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate8 = _CFAllocatorReallocate8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate8(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate8(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate8 = _CFAllocatorDeallocate8Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize8(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize8(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize8Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize8 =
      _CFAllocatorGetPreferredSizeForSize8Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext8(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext8(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext8 = _CFAllocatorGetContext8Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID8(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID8(
      cf,
    );
  }

  late final _CFGetTypeID8Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID8 =
      _CFGetTypeID8Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription8(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription8(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription8Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription8 =
      _CFCopyTypeIDDescription8Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain8(
    CFTypeRef cf,
  ) {
    return _CFRetain8(
      cf,
    );
  }

  late final _CFRetain8Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain8 =
      _CFRetain8Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease8(
    CFTypeRef cf,
  ) {
    return _CFRelease8(
      cf,
    );
  }

  late final _CFRelease8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease8 =
      _CFRelease8Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease8(
    CFTypeRef arg,
  ) {
    return _CFAutorelease8(
      arg,
    );
  }

  late final _CFAutorelease8Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease8 =
      _CFAutorelease8Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount8(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount8(
      cf,
    );
  }

  late final _CFGetRetainCount8Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount8 =
      _CFGetRetainCount8Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual8(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual8(
      cf1,
      cf2,
    );
  }

  late final _CFEqual8Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual8 =
      _CFEqual8Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash8(
    CFTypeRef cf,
  ) {
    return _CFHash8(
      cf,
    );
  }

  late final _CFHash8Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash8 = _CFHash8Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription8(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription8(
      cf,
    );
  }

  late final _CFCopyDescription8Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription8 =
      _CFCopyDescription8Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator8(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator8(
      cf,
    );
  }

  late final _CFGetAllocator8Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator8 =
      _CFGetAllocator8Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable8(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable8(
      cf,
    );
  }

  late final _CFMakeCollectable8Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable8 =
      _CFMakeCollectable8Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone8() {
    return _NSDefaultMallocZone8();
  }

  late final _NSDefaultMallocZone8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone8 =
      _NSDefaultMallocZone8Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone8(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone8(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone8 = _NSCreateZone8Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone8(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone8(
      zone,
    );
  }

  late final _NSRecycleZone8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone8 =
      _NSRecycleZone8Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName8(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName8(
      zone,
      name,
    );
  }

  late final _NSSetZoneName8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName8 = _NSSetZoneName8Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName8(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName8(
      zone,
    );
  }

  late final _NSZoneName8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName8 = _NSZoneName8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer8(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer8(
      ptr,
    );
  }

  late final _NSZoneFromPointer8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer8 = _NSZoneFromPointer8Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc8(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc8(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc8 = _NSZoneMalloc8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc8(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc8(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc8 = _NSZoneCalloc8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc8(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc8(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc8 = _NSZoneRealloc8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree8(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree8(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree8 = _NSZoneFree8Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable8(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable8(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable8 = _NSAllocateCollectable8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable8(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable8(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable8 =
      _NSReallocateCollectable8Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize8() {
    return _NSPageSize8();
  }

  late final _NSPageSize8Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize8 = _NSPageSize8Ptr.asFunction<int Function()>();

  int NSLogPageSize8() {
    return _NSLogPageSize8();
  }

  late final _NSLogPageSize8Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize8 = _NSLogPageSize8Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize8(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize8(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize8Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize8 =
      _NSRoundUpToMultipleOfPageSize8Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize8(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize8(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize8Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize8 =
      _NSRoundDownToMultipleOfPageSize8Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages8(
    int bytes,
  ) {
    return _NSAllocateMemoryPages8(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages8Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages8 = _NSAllocateMemoryPages8Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages8(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages8(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages8 = _NSDeallocateMemoryPages8Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages8(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages8(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages8 = _NSCopyMemoryPages8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable8() {
    return _NSRealMemoryAvailable8();
  }

  late final _NSRealMemoryAvailable8Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable8 =
      _NSRealMemoryAvailable8Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject8(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject8(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject8 = _NSAllocateObject8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject8(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject8(
      object,
    );
  }

  late final _NSDeallocateObject8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject8 = _NSDeallocateObject8Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject8(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject8(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject8 = _NSCopyObject8Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone8(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone8(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone8 = _NSShouldRetainWithZone8Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount8(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount8(
      object,
    );
  }

  late final _NSIncrementExtraRefCount8Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount8 = _NSIncrementExtraRefCount8Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero8(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero8(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero8Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero8 =
      _NSDecrementExtraRefCountWasZero8Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount8(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount8(
      object,
    );
  }

  late final _NSExtraRefCount8Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount8 =
      _NSExtraRefCount8Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromSelector9(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector9(
      aSelector,
    );
  }

  late final _NSStringFromSelector9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector9 = _NSStringFromSelector9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString9(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString9(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString9 = _NSSelectorFromString9Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass9(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass9(
      aClass,
    );
  }

  late final _NSStringFromClass9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass9 = _NSStringFromClass9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString9(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString9(
      aClassName,
    );
  }

  late final _NSClassFromString9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString9 = _NSClassFromString9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol9(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol9(
      proto,
    );
  }

  late final _NSStringFromProtocol9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol9 = _NSStringFromProtocol9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString9(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString9(
      namestr,
    );
  }

  late final _NSProtocolFromString9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString9 = _NSProtocolFromString9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment9(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment9(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment9 = _NSGetSizeAndAlignment9Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog9(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog9(
      format,
    );
  }

  late final _NSLog9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog9 =
      _NSLog9Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv9(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv9(
      format,
      args,
    );
  }

  late final _NSLogv9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv9 =
      _NSLogv9Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake9(
    int loc,
    int len,
  ) {
    return ___CFRangeMake9(
      loc,
      len,
    );
  }

  late final ___CFRangeMake9Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake9 =
      ___CFRangeMake9Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID9() {
    return _CFNullGetTypeID9();
  }

  late final _CFNullGetTypeID9Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID9 =
      _CFNullGetTypeID9Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID9() {
    return _CFAllocatorGetTypeID9();
  }

  late final _CFAllocatorGetTypeID9Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID9 =
      _CFAllocatorGetTypeID9Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault9(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault9(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault9 =
      _CFAllocatorSetDefault9Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault9() {
    return _CFAllocatorGetDefault9();
  }

  late final _CFAllocatorGetDefault9Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault9 =
      _CFAllocatorGetDefault9Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate9(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate9(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate9Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate9 = _CFAllocatorCreate9Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate9(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate9(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate9 = _CFAllocatorAllocate9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate9(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate9(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate9 = _CFAllocatorReallocate9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate9(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate9(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate9 = _CFAllocatorDeallocate9Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize9(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize9(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize9Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize9 =
      _CFAllocatorGetPreferredSizeForSize9Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext9(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext9(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext9 = _CFAllocatorGetContext9Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID9(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID9(
      cf,
    );
  }

  late final _CFGetTypeID9Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID9 =
      _CFGetTypeID9Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription9(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription9(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription9Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription9 =
      _CFCopyTypeIDDescription9Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain9(
    CFTypeRef cf,
  ) {
    return _CFRetain9(
      cf,
    );
  }

  late final _CFRetain9Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain9 =
      _CFRetain9Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease9(
    CFTypeRef cf,
  ) {
    return _CFRelease9(
      cf,
    );
  }

  late final _CFRelease9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease9 =
      _CFRelease9Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease9(
    CFTypeRef arg,
  ) {
    return _CFAutorelease9(
      arg,
    );
  }

  late final _CFAutorelease9Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease9 =
      _CFAutorelease9Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount9(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount9(
      cf,
    );
  }

  late final _CFGetRetainCount9Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount9 =
      _CFGetRetainCount9Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual9(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual9(
      cf1,
      cf2,
    );
  }

  late final _CFEqual9Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual9 =
      _CFEqual9Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash9(
    CFTypeRef cf,
  ) {
    return _CFHash9(
      cf,
    );
  }

  late final _CFHash9Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash9 = _CFHash9Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription9(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription9(
      cf,
    );
  }

  late final _CFCopyDescription9Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription9 =
      _CFCopyDescription9Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator9(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator9(
      cf,
    );
  }

  late final _CFGetAllocator9Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator9 =
      _CFGetAllocator9Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable9(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable9(
      cf,
    );
  }

  late final _CFMakeCollectable9Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable9 =
      _CFMakeCollectable9Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone9() {
    return _NSDefaultMallocZone9();
  }

  late final _NSDefaultMallocZone9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone9 =
      _NSDefaultMallocZone9Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone9(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone9(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone9 = _NSCreateZone9Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone9(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone9(
      zone,
    );
  }

  late final _NSRecycleZone9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone9 =
      _NSRecycleZone9Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName9(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName9(
      zone,
      name,
    );
  }

  late final _NSSetZoneName9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName9 = _NSSetZoneName9Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName9(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName9(
      zone,
    );
  }

  late final _NSZoneName9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName9 = _NSZoneName9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer9(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer9(
      ptr,
    );
  }

  late final _NSZoneFromPointer9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer9 = _NSZoneFromPointer9Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc9(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc9(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc9 = _NSZoneMalloc9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc9(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc9(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc9 = _NSZoneCalloc9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc9(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc9(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc9 = _NSZoneRealloc9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree9(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree9(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree9 = _NSZoneFree9Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable9(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable9(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable9 = _NSAllocateCollectable9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable9(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable9(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable9 =
      _NSReallocateCollectable9Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize9() {
    return _NSPageSize9();
  }

  late final _NSPageSize9Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize9 = _NSPageSize9Ptr.asFunction<int Function()>();

  int NSLogPageSize9() {
    return _NSLogPageSize9();
  }

  late final _NSLogPageSize9Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize9 = _NSLogPageSize9Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize9(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize9(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize9Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize9 =
      _NSRoundUpToMultipleOfPageSize9Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize9(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize9(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize9Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize9 =
      _NSRoundDownToMultipleOfPageSize9Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages9(
    int bytes,
  ) {
    return _NSAllocateMemoryPages9(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages9Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages9 = _NSAllocateMemoryPages9Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages9(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages9(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages9 = _NSDeallocateMemoryPages9Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages9(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages9(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages9 = _NSCopyMemoryPages9Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable9() {
    return _NSRealMemoryAvailable9();
  }

  late final _NSRealMemoryAvailable9Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable9 =
      _NSRealMemoryAvailable9Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject9(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject9(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject9 = _NSAllocateObject9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject9(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject9(
      object,
    );
  }

  late final _NSDeallocateObject9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject9 = _NSDeallocateObject9Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject9(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject9(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject9 = _NSCopyObject9Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone9(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone9(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone9Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone9 = _NSShouldRetainWithZone9Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount9(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount9(
      object,
    );
  }

  late final _NSIncrementExtraRefCount9Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount9 = _NSIncrementExtraRefCount9Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero9(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero9(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero9Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero9 =
      _NSDecrementExtraRefCountWasZero9Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount9(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount9(
      object,
    );
  }

  late final _NSExtraRefCount9Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount9 =
      _NSExtraRefCount9Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  NSRange NSUnionRange3(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSUnionRange3(
      range1,
      range2,
    );
  }

  late final _NSUnionRange3Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSUnionRange');
  late final _NSUnionRange3 =
      _NSUnionRange3Ptr.asFunction<NSRange Function(NSRange, NSRange)>();

  NSRange NSIntersectionRange3(
    NSRange range1,
    NSRange range2,
  ) {
    return _NSIntersectionRange3(
      range1,
      range2,
    );
  }

  late final _NSIntersectionRange3Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(NSRange, NSRange)>>(
          'NSIntersectionRange');
  late final _NSIntersectionRange3 =
      _NSIntersectionRange3Ptr.asFunction<NSRange Function(NSRange, NSRange)>();

  ffi.Pointer<ObjCObject> NSStringFromRange3(
    NSRange range,
  ) {
    return _NSStringFromRange3(
      range,
    );
  }

  late final _NSStringFromRange3Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ObjCObject> Function(NSRange)>>(
          'NSStringFromRange');
  late final _NSStringFromRange3 = _NSStringFromRange3Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(NSRange)>();

  NSRange NSRangeFromString3(
    ffi.Pointer<ObjCObject> aString,
  ) {
    return _NSRangeFromString3(
      aString,
    );
  }

  late final _NSRangeFromString3Ptr =
      _lookup<ffi.NativeFunction<NSRange Function(ffi.Pointer<ObjCObject>)>>(
          'NSRangeFromString');
  late final _NSRangeFromString3 = _NSRangeFromString3Ptr.asFunction<
      NSRange Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<NSExceptionName> _NSGenericException =
      _lookup<NSExceptionName>('NSGenericException');

  NSExceptionName get NSGenericException => _NSGenericException.value;

  set NSGenericException(NSExceptionName value) =>
      _NSGenericException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSRangeException =
      _lookup<NSExceptionName>('NSRangeException');

  NSExceptionName get NSRangeException => _NSRangeException.value;

  set NSRangeException(NSExceptionName value) =>
      _NSRangeException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInvalidArgumentException =
      _lookup<NSExceptionName>('NSInvalidArgumentException');

  NSExceptionName get NSInvalidArgumentException =>
      _NSInvalidArgumentException.value;

  set NSInvalidArgumentException(NSExceptionName value) =>
      _NSInvalidArgumentException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInternalInconsistencyException =
      _lookup<NSExceptionName>('NSInternalInconsistencyException');

  NSExceptionName get NSInternalInconsistencyException =>
      _NSInternalInconsistencyException.value;

  set NSInternalInconsistencyException(NSExceptionName value) =>
      _NSInternalInconsistencyException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSMallocException =
      _lookup<NSExceptionName>('NSMallocException');

  NSExceptionName get NSMallocException => _NSMallocException.value;

  set NSMallocException(NSExceptionName value) =>
      _NSMallocException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSObjectInaccessibleException =
      _lookup<NSExceptionName>('NSObjectInaccessibleException');

  NSExceptionName get NSObjectInaccessibleException =>
      _NSObjectInaccessibleException.value;

  set NSObjectInaccessibleException(NSExceptionName value) =>
      _NSObjectInaccessibleException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSObjectNotAvailableException =
      _lookup<NSExceptionName>('NSObjectNotAvailableException');

  NSExceptionName get NSObjectNotAvailableException =>
      _NSObjectNotAvailableException.value;

  set NSObjectNotAvailableException(NSExceptionName value) =>
      _NSObjectNotAvailableException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSDestinationInvalidException =
      _lookup<NSExceptionName>('NSDestinationInvalidException');

  NSExceptionName get NSDestinationInvalidException =>
      _NSDestinationInvalidException.value;

  set NSDestinationInvalidException(NSExceptionName value) =>
      _NSDestinationInvalidException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSPortTimeoutException =
      _lookup<NSExceptionName>('NSPortTimeoutException');

  NSExceptionName get NSPortTimeoutException => _NSPortTimeoutException.value;

  set NSPortTimeoutException(NSExceptionName value) =>
      _NSPortTimeoutException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInvalidSendPortException =
      _lookup<NSExceptionName>('NSInvalidSendPortException');

  NSExceptionName get NSInvalidSendPortException =>
      _NSInvalidSendPortException.value;

  set NSInvalidSendPortException(NSExceptionName value) =>
      _NSInvalidSendPortException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInvalidReceivePortException =
      _lookup<NSExceptionName>('NSInvalidReceivePortException');

  NSExceptionName get NSInvalidReceivePortException =>
      _NSInvalidReceivePortException.value;

  set NSInvalidReceivePortException(NSExceptionName value) =>
      _NSInvalidReceivePortException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSPortSendException =
      _lookup<NSExceptionName>('NSPortSendException');

  NSExceptionName get NSPortSendException => _NSPortSendException.value;

  set NSPortSendException(NSExceptionName value) =>
      _NSPortSendException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSPortReceiveException =
      _lookup<NSExceptionName>('NSPortReceiveException');

  NSExceptionName get NSPortReceiveException => _NSPortReceiveException.value;

  set NSPortReceiveException(NSExceptionName value) =>
      _NSPortReceiveException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSOldStyleException =
      _lookup<NSExceptionName>('NSOldStyleException');

  NSExceptionName get NSOldStyleException => _NSOldStyleException.value;

  set NSOldStyleException(NSExceptionName value) =>
      _NSOldStyleException.value = value;

  late final ffi.Pointer<NSExceptionName> _NSInconsistentArchiveException =
      _lookup<NSExceptionName>('NSInconsistentArchiveException');

  NSExceptionName get NSInconsistentArchiveException =>
      _NSInconsistentArchiveException.value;

  set NSInconsistentArchiveException(NSExceptionName value) =>
      _NSInconsistentArchiveException.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSException1 =
      _getClass1("NSException");
  late final ffi.Pointer<ObjCSel> _sel_exceptionWithName_reason_userInfo_1 =
      _registerName1("exceptionWithName:reason:userInfo:");
  ffi.Pointer<ObjCObject> _objc_msgSend_292(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSExceptionName name,
    ffi.Pointer<ObjCObject> reason,
    ffi.Pointer<ObjCObject> userInfo,
  ) {
    return __objc_msgSend_292(
      obj,
      sel,
      name,
      reason,
      userInfo,
    );
  }

  late final __objc_msgSend_292Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSExceptionName,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_292 = __objc_msgSend_292Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          NSExceptionName,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithName_reason_userInfo_1 =
      _registerName1("initWithName:reason:userInfo:");
  late final ffi.Pointer<ObjCSel> _sel_reason1 = _registerName1("reason");
  late final ffi.Pointer<ObjCSel> _sel_callStackReturnAddresses1 =
      _registerName1("callStackReturnAddresses");
  late final ffi.Pointer<ObjCSel> _sel_callStackSymbols1 =
      _registerName1("callStackSymbols");
  late final ffi.Pointer<ObjCSel> _sel_raise1 = _registerName1("raise");
  late final ffi.Pointer<ObjCSel> _sel_raise_format_1 =
      _registerName1("raise:format:");
  late final ffi.Pointer<ObjCSel> _sel_raise_format_arguments_1 =
      _registerName1("raise:format:arguments:");
  void _objc_msgSend_293(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSExceptionName name,
    ffi.Pointer<ObjCObject> format,
    va_list argList,
  ) {
    return __objc_msgSend_293(
      obj,
      sel,
      name,
      format,
      argList,
    );
  }

  late final __objc_msgSend_293Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSExceptionName,
              ffi.Pointer<ObjCObject>,
              va_list)>>('objc_msgSend');
  late final __objc_msgSend_293 = __objc_msgSend_293Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSExceptionName, ffi.Pointer<ObjCObject>, va_list)>();

  ffi.Pointer<NSUncaughtExceptionHandler> NSGetUncaughtExceptionHandler() {
    return _NSGetUncaughtExceptionHandler();
  }

  late final _NSGetUncaughtExceptionHandlerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSUncaughtExceptionHandler>
              Function()>>('NSGetUncaughtExceptionHandler');
  late final _NSGetUncaughtExceptionHandler = _NSGetUncaughtExceptionHandlerPtr
      .asFunction<ffi.Pointer<NSUncaughtExceptionHandler> Function()>();

  void NSSetUncaughtExceptionHandler(
    ffi.Pointer<NSUncaughtExceptionHandler> arg0,
  ) {
    return _NSSetUncaughtExceptionHandler(
      arg0,
    );
  }

  late final _NSSetUncaughtExceptionHandlerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<NSUncaughtExceptionHandler>)>>(
      'NSSetUncaughtExceptionHandler');
  late final _NSSetUncaughtExceptionHandler = _NSSetUncaughtExceptionHandlerPtr
      .asFunction<void Function(ffi.Pointer<NSUncaughtExceptionHandler>)>();

  late final ffi.Pointer<ffi.Pointer<ObjCObject>> _NSAssertionHandlerKey =
      _lookup<ffi.Pointer<ObjCObject>>('NSAssertionHandlerKey');

  ffi.Pointer<ObjCObject> get NSAssertionHandlerKey =>
      _NSAssertionHandlerKey.value;

  set NSAssertionHandlerKey(ffi.Pointer<ObjCObject> value) =>
      _NSAssertionHandlerKey.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSAssertionHandler1 =
      _getClass1("NSAssertionHandler");
  late final ffi.Pointer<ObjCSel> _sel_currentHandler1 =
      _registerName1("currentHandler");
  late final ffi.Pointer<ObjCSel>
      _sel_handleFailureInMethod_object_file_lineNumber_description_1 =
      _registerName1(
          "handleFailureInMethod:object:file:lineNumber:description:");
  void _objc_msgSend_294(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCSel> selector,
    ffi.Pointer<ObjCObject> object,
    ffi.Pointer<ObjCObject> fileName,
    int line,
    ffi.Pointer<ObjCObject> format,
  ) {
    return __objc_msgSend_294(
      obj,
      sel,
      selector,
      object,
      fileName,
      line,
      format,
    );
  }

  late final __objc_msgSend_294Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_294 = __objc_msgSend_294Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel>
      _sel_handleFailureInFunction_file_lineNumber_description_1 =
      _registerName1("handleFailureInFunction:file:lineNumber:description:");
  void _objc_msgSend_295(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> functionName,
    ffi.Pointer<ObjCObject> fileName,
    int line,
    ffi.Pointer<ObjCObject> format,
  ) {
    return __objc_msgSend_295(
      obj,
      sel,
      functionName,
      fileName,
      line,
      format,
    );
  }

  late final __objc_msgSend_295Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              NSInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_295 = __objc_msgSend_295Ptr.asFunction<
      void Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCObject> _class_NSOperation1 =
      _getClass1("NSOperation");
  late final ffi.Pointer<ObjCSel> _sel_start1 = _registerName1("start");
  late final ffi.Pointer<ObjCSel> _sel_main1 = _registerName1("main");
  late final ffi.Pointer<ObjCSel> _sel_isExecuting1 =
      _registerName1("isExecuting");
  late final ffi.Pointer<ObjCSel> _sel_isConcurrent1 =
      _registerName1("isConcurrent");
  late final ffi.Pointer<ObjCSel> _sel_isAsynchronous1 =
      _registerName1("isAsynchronous");
  late final ffi.Pointer<ObjCSel> _sel_isReady1 = _registerName1("isReady");
  late final ffi.Pointer<ObjCSel> _sel_addDependency_1 =
      _registerName1("addDependency:");
  late final ffi.Pointer<ObjCSel> _sel_removeDependency_1 =
      _registerName1("removeDependency:");
  late final ffi.Pointer<ObjCSel> _sel_dependencies1 =
      _registerName1("dependencies");
  late final ffi.Pointer<ObjCSel> _sel_queuePriority1 =
      _registerName1("queuePriority");
  int _objc_msgSend_296(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_296(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_296Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_296 = __objc_msgSend_296Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setQueuePriority_1 =
      _registerName1("setQueuePriority:");
  void _objc_msgSend_297(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_297(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_297Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_297 = __objc_msgSend_297Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_completionBlock1 =
      _registerName1("completionBlock");
  late final ffi.Pointer<ObjCSel> _sel_setCompletionBlock_1 =
      _registerName1("setCompletionBlock:");
  late final ffi.Pointer<ObjCSel> _sel_waitUntilFinished1 =
      _registerName1("waitUntilFinished");
  late final ffi.Pointer<ObjCSel> _sel_threadPriority1 =
      _registerName1("threadPriority");
  late final ffi.Pointer<ObjCSel> _sel_setThreadPriority_1 =
      _registerName1("setThreadPriority:");
  late final ffi.Pointer<ObjCSel> _sel_qualityOfService1 =
      _registerName1("qualityOfService");
  int _objc_msgSend_298(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
  ) {
    return __objc_msgSend_298(
      obj,
      sel,
    );
  }

  late final __objc_msgSend_298Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>>('objc_msgSend');
  late final __objc_msgSend_298 = __objc_msgSend_298Ptr.asFunction<
      int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>)>();

  late final ffi.Pointer<ObjCSel> _sel_setQualityOfService_1 =
      _registerName1("setQualityOfService:");
  void _objc_msgSend_299(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    int value,
  ) {
    return __objc_msgSend_299(
      obj,
      sel,
      value,
    );
  }

  late final __objc_msgSend_299Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Int32)>>('objc_msgSend');
  late final __objc_msgSend_299 = __objc_msgSend_299Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>, int)>();

  late final ffi.Pointer<ObjCSel> _sel_setName_1 = _registerName1("setName:");
  late final ffi.Pointer<ObjCObject> _class_NSBlockOperation1 =
      _getClass1("NSBlockOperation");
  late final ffi.Pointer<ObjCSel> _sel_blockOperationWithBlock_1 =
      _registerName1("blockOperationWithBlock:");
  instancetype _objc_msgSend_300(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return __objc_msgSend_300(
      obj,
      sel,
      block,
    );
  }

  late final __objc_msgSend_300Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_300 = __objc_msgSend_300Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_addExecutionBlock_1 =
      _registerName1("addExecutionBlock:");
  late final ffi.Pointer<ObjCSel> _sel_executionBlocks1 =
      _registerName1("executionBlocks");
  late final ffi.Pointer<ObjCObject> _class_NSInvocationOperation1 =
      _getClass1("NSInvocationOperation");
  late final ffi.Pointer<ObjCSel> _sel_initWithTarget_selector_object_1 =
      _registerName1("initWithTarget:selector:object:");
  instancetype _objc_msgSend_301(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> target,
    ffi.Pointer<ObjCSel> sel1,
    ffi.Pointer<ObjCObject> arg,
  ) {
    return __objc_msgSend_301(
      obj,
      sel,
      target,
      sel1,
      arg,
    );
  }

  late final __objc_msgSend_301Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_301 = __objc_msgSend_301Ptr.asFunction<
      instancetype Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_initWithInvocation_1 =
      _registerName1("initWithInvocation:");
  late final ffi.Pointer<ObjCSel> _sel_invocation1 =
      _registerName1("invocation");
  late final ffi.Pointer<ObjCSel> _sel_result1 = _registerName1("result");
  late final ffi.Pointer<NSExceptionName>
      _NSInvocationOperationVoidResultException =
      _lookup<NSExceptionName>('NSInvocationOperationVoidResultException');

  NSExceptionName get NSInvocationOperationVoidResultException =>
      _NSInvocationOperationVoidResultException.value;

  set NSInvocationOperationVoidResultException(NSExceptionName value) =>
      _NSInvocationOperationVoidResultException.value = value;

  late final ffi.Pointer<NSExceptionName>
      _NSInvocationOperationCancelledException =
      _lookup<NSExceptionName>('NSInvocationOperationCancelledException');

  NSExceptionName get NSInvocationOperationCancelledException =>
      _NSInvocationOperationCancelledException.value;

  set NSInvocationOperationCancelledException(NSExceptionName value) =>
      _NSInvocationOperationCancelledException.value = value;

  late final ffi.Pointer<NSInteger>
      _NSOperationQueueDefaultMaxConcurrentOperationCount =
      _lookup<NSInteger>('NSOperationQueueDefaultMaxConcurrentOperationCount');

  int get NSOperationQueueDefaultMaxConcurrentOperationCount =>
      _NSOperationQueueDefaultMaxConcurrentOperationCount.value;

  set NSOperationQueueDefaultMaxConcurrentOperationCount(int value) =>
      _NSOperationQueueDefaultMaxConcurrentOperationCount.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSOperationQueue1 =
      _getClass1("NSOperationQueue");
  late final ffi.Pointer<ObjCSel> _sel_addOperation_1 =
      _registerName1("addOperation:");
  late final ffi.Pointer<ObjCSel> _sel_addOperations_waitUntilFinished_1 =
      _registerName1("addOperations:waitUntilFinished:");
  late final ffi.Pointer<ObjCSel> _sel_addOperationWithBlock_1 =
      _registerName1("addOperationWithBlock:");
  late final ffi.Pointer<ObjCSel> _sel_addBarrierBlock_1 =
      _registerName1("addBarrierBlock:");
  late final ffi.Pointer<ObjCSel> _sel_maxConcurrentOperationCount1 =
      _registerName1("maxConcurrentOperationCount");
  late final ffi.Pointer<ObjCSel> _sel_setMaxConcurrentOperationCount_1 =
      _registerName1("setMaxConcurrentOperationCount:");
  late final ffi.Pointer<ObjCSel> _sel_isSuspended1 =
      _registerName1("isSuspended");
  late final ffi.Pointer<ObjCSel> _sel_setSuspended_1 =
      _registerName1("setSuspended:");
  late final ffi.Pointer<ObjCSel> _sel_underlyingQueue1 =
      _registerName1("underlyingQueue");
  late final ffi.Pointer<ObjCSel> _sel_setUnderlyingQueue_1 =
      _registerName1("setUnderlyingQueue:");
  late final ffi.Pointer<ObjCSel> _sel_cancelAllOperations1 =
      _registerName1("cancelAllOperations");
  late final ffi.Pointer<ObjCSel> _sel_waitUntilAllOperationsAreFinished1 =
      _registerName1("waitUntilAllOperationsAreFinished");
  late final ffi.Pointer<ObjCSel> _sel_currentQueue1 =
      _registerName1("currentQueue");
  late final ffi.Pointer<ObjCSel> _sel_mainQueue1 = _registerName1("mainQueue");
  late final ffi.Pointer<ObjCSel> _sel_operations1 =
      _registerName1("operations");
  late final ffi.Pointer<ObjCSel> _sel_operationCount1 =
      _registerName1("operationCount");
  ffi.Pointer<ObjCObject> NSStringFromSelector10(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector10(
      aSelector,
    );
  }

  late final _NSStringFromSelector10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector10 = _NSStringFromSelector10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString10(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString10(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString10 = _NSSelectorFromString10Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass10(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass10(
      aClass,
    );
  }

  late final _NSStringFromClass10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass10 = _NSStringFromClass10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString10(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString10(
      aClassName,
    );
  }

  late final _NSClassFromString10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString10 = _NSClassFromString10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol10(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol10(
      proto,
    );
  }

  late final _NSStringFromProtocol10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol10 = _NSStringFromProtocol10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString10(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString10(
      namestr,
    );
  }

  late final _NSProtocolFromString10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString10 = _NSProtocolFromString10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment10(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment10(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment10 = _NSGetSizeAndAlignment10Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog10(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog10(
      format,
    );
  }

  late final _NSLog10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog10 =
      _NSLog10Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv10(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv10(
      format,
      args,
    );
  }

  late final _NSLogv10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv10 = _NSLogv10Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake10(
    int loc,
    int len,
  ) {
    return ___CFRangeMake10(
      loc,
      len,
    );
  }

  late final ___CFRangeMake10Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake10 =
      ___CFRangeMake10Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID10() {
    return _CFNullGetTypeID10();
  }

  late final _CFNullGetTypeID10Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID10 =
      _CFNullGetTypeID10Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID10() {
    return _CFAllocatorGetTypeID10();
  }

  late final _CFAllocatorGetTypeID10Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID10 =
      _CFAllocatorGetTypeID10Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault10(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault10(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault10 =
      _CFAllocatorSetDefault10Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault10() {
    return _CFAllocatorGetDefault10();
  }

  late final _CFAllocatorGetDefault10Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault10 =
      _CFAllocatorGetDefault10Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate10(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate10(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate10Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate10 = _CFAllocatorCreate10Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate10(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate10(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate10 = _CFAllocatorAllocate10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate10(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate10(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate10 = _CFAllocatorReallocate10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate10(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate10(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate10 = _CFAllocatorDeallocate10Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize10(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize10(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize10Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize10 =
      _CFAllocatorGetPreferredSizeForSize10Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext10(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext10(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext10 = _CFAllocatorGetContext10Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID10(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID10(
      cf,
    );
  }

  late final _CFGetTypeID10Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID10 =
      _CFGetTypeID10Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription10(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription10(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription10Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription10 =
      _CFCopyTypeIDDescription10Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain10(
    CFTypeRef cf,
  ) {
    return _CFRetain10(
      cf,
    );
  }

  late final _CFRetain10Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain10 =
      _CFRetain10Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease10(
    CFTypeRef cf,
  ) {
    return _CFRelease10(
      cf,
    );
  }

  late final _CFRelease10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease10 =
      _CFRelease10Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease10(
    CFTypeRef arg,
  ) {
    return _CFAutorelease10(
      arg,
    );
  }

  late final _CFAutorelease10Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease10 =
      _CFAutorelease10Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount10(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount10(
      cf,
    );
  }

  late final _CFGetRetainCount10Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount10 =
      _CFGetRetainCount10Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual10(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual10(
      cf1,
      cf2,
    );
  }

  late final _CFEqual10Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual10 =
      _CFEqual10Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash10(
    CFTypeRef cf,
  ) {
    return _CFHash10(
      cf,
    );
  }

  late final _CFHash10Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash10 = _CFHash10Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription10(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription10(
      cf,
    );
  }

  late final _CFCopyDescription10Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription10 =
      _CFCopyDescription10Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator10(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator10(
      cf,
    );
  }

  late final _CFGetAllocator10Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator10 =
      _CFGetAllocator10Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable10(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable10(
      cf,
    );
  }

  late final _CFMakeCollectable10Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable10 =
      _CFMakeCollectable10Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone10() {
    return _NSDefaultMallocZone10();
  }

  late final _NSDefaultMallocZone10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone10 =
      _NSDefaultMallocZone10Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone10(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone10(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone10 = _NSCreateZone10Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone10(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone10(
      zone,
    );
  }

  late final _NSRecycleZone10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone10 =
      _NSRecycleZone10Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName10(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName10(
      zone,
      name,
    );
  }

  late final _NSSetZoneName10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName10 = _NSSetZoneName10Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName10(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName10(
      zone,
    );
  }

  late final _NSZoneName10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName10 = _NSZoneName10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer10(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer10(
      ptr,
    );
  }

  late final _NSZoneFromPointer10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer10 = _NSZoneFromPointer10Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc10(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc10(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc10 = _NSZoneMalloc10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc10(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc10(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc10 = _NSZoneCalloc10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc10(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc10(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc10 = _NSZoneRealloc10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree10(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree10(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree10 = _NSZoneFree10Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable10(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable10(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable10 = _NSAllocateCollectable10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable10(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable10(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable10 =
      _NSReallocateCollectable10Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize10() {
    return _NSPageSize10();
  }

  late final _NSPageSize10Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize10 = _NSPageSize10Ptr.asFunction<int Function()>();

  int NSLogPageSize10() {
    return _NSLogPageSize10();
  }

  late final _NSLogPageSize10Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize10 =
      _NSLogPageSize10Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize10(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize10(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize10Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize10 =
      _NSRoundUpToMultipleOfPageSize10Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize10(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize10(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize10Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize10 =
      _NSRoundDownToMultipleOfPageSize10Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages10(
    int bytes,
  ) {
    return _NSAllocateMemoryPages10(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages10Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages10 = _NSAllocateMemoryPages10Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages10(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages10(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages10 = _NSDeallocateMemoryPages10Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages10(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages10(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages10 = _NSCopyMemoryPages10Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable10() {
    return _NSRealMemoryAvailable10();
  }

  late final _NSRealMemoryAvailable10Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable10 =
      _NSRealMemoryAvailable10Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject10(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject10(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject10 = _NSAllocateObject10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject10(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject10(
      object,
    );
  }

  late final _NSDeallocateObject10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject10 = _NSDeallocateObject10Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject10(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject10(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject10 = _NSCopyObject10Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone10(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone10(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone10Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone10 = _NSShouldRetainWithZone10Ptr
      .asFunction<int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount10(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount10(
      object,
    );
  }

  late final _NSIncrementExtraRefCount10Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount10 = _NSIncrementExtraRefCount10Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero10(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero10(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero10Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero10 =
      _NSDecrementExtraRefCountWasZero10Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount10(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount10(
      object,
    );
  }

  late final _NSExtraRefCount10Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount10 =
      _NSExtraRefCount10Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<NSErrorDomain> _NSCocoaErrorDomain =
      _lookup<NSErrorDomain>('NSCocoaErrorDomain');

  NSErrorDomain get NSCocoaErrorDomain => _NSCocoaErrorDomain.value;

  set NSCocoaErrorDomain(NSErrorDomain value) =>
      _NSCocoaErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSPOSIXErrorDomain =
      _lookup<NSErrorDomain>('NSPOSIXErrorDomain');

  NSErrorDomain get NSPOSIXErrorDomain => _NSPOSIXErrorDomain.value;

  set NSPOSIXErrorDomain(NSErrorDomain value) =>
      _NSPOSIXErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSOSStatusErrorDomain =
      _lookup<NSErrorDomain>('NSOSStatusErrorDomain');

  NSErrorDomain get NSOSStatusErrorDomain => _NSOSStatusErrorDomain.value;

  set NSOSStatusErrorDomain(NSErrorDomain value) =>
      _NSOSStatusErrorDomain.value = value;

  late final ffi.Pointer<NSErrorDomain> _NSMachErrorDomain =
      _lookup<NSErrorDomain>('NSMachErrorDomain');

  NSErrorDomain get NSMachErrorDomain => _NSMachErrorDomain.value;

  set NSMachErrorDomain(NSErrorDomain value) =>
      _NSMachErrorDomain.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSUnderlyingErrorKey =
      _lookup<NSErrorUserInfoKey>('NSUnderlyingErrorKey');

  NSErrorUserInfoKey get NSUnderlyingErrorKey => _NSUnderlyingErrorKey.value;

  set NSUnderlyingErrorKey(NSErrorUserInfoKey value) =>
      _NSUnderlyingErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSMultipleUnderlyingErrorsKey =
      _lookup<NSErrorUserInfoKey>('NSMultipleUnderlyingErrorsKey');

  NSErrorUserInfoKey get NSMultipleUnderlyingErrorsKey =>
      _NSMultipleUnderlyingErrorsKey.value;

  set NSMultipleUnderlyingErrorsKey(NSErrorUserInfoKey value) =>
      _NSMultipleUnderlyingErrorsKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedDescriptionKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedDescriptionKey');

  NSErrorUserInfoKey get NSLocalizedDescriptionKey =>
      _NSLocalizedDescriptionKey.value;

  set NSLocalizedDescriptionKey(NSErrorUserInfoKey value) =>
      _NSLocalizedDescriptionKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedFailureReasonErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedFailureReasonErrorKey');

  NSErrorUserInfoKey get NSLocalizedFailureReasonErrorKey =>
      _NSLocalizedFailureReasonErrorKey.value;

  set NSLocalizedFailureReasonErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedFailureReasonErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey>
      _NSLocalizedRecoverySuggestionErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedRecoverySuggestionErrorKey');

  NSErrorUserInfoKey get NSLocalizedRecoverySuggestionErrorKey =>
      _NSLocalizedRecoverySuggestionErrorKey.value;

  set NSLocalizedRecoverySuggestionErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedRecoverySuggestionErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey>
      _NSLocalizedRecoveryOptionsErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedRecoveryOptionsErrorKey');

  NSErrorUserInfoKey get NSLocalizedRecoveryOptionsErrorKey =>
      _NSLocalizedRecoveryOptionsErrorKey.value;

  set NSLocalizedRecoveryOptionsErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedRecoveryOptionsErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSRecoveryAttempterErrorKey =
      _lookup<NSErrorUserInfoKey>('NSRecoveryAttempterErrorKey');

  NSErrorUserInfoKey get NSRecoveryAttempterErrorKey =>
      _NSRecoveryAttempterErrorKey.value;

  set NSRecoveryAttempterErrorKey(NSErrorUserInfoKey value) =>
      _NSRecoveryAttempterErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSHelpAnchorErrorKey =
      _lookup<NSErrorUserInfoKey>('NSHelpAnchorErrorKey');

  NSErrorUserInfoKey get NSHelpAnchorErrorKey => _NSHelpAnchorErrorKey.value;

  set NSHelpAnchorErrorKey(NSErrorUserInfoKey value) =>
      _NSHelpAnchorErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSDebugDescriptionErrorKey =
      _lookup<NSErrorUserInfoKey>('NSDebugDescriptionErrorKey');

  NSErrorUserInfoKey get NSDebugDescriptionErrorKey =>
      _NSDebugDescriptionErrorKey.value;

  set NSDebugDescriptionErrorKey(NSErrorUserInfoKey value) =>
      _NSDebugDescriptionErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSLocalizedFailureErrorKey =
      _lookup<NSErrorUserInfoKey>('NSLocalizedFailureErrorKey');

  NSErrorUserInfoKey get NSLocalizedFailureErrorKey =>
      _NSLocalizedFailureErrorKey.value;

  set NSLocalizedFailureErrorKey(NSErrorUserInfoKey value) =>
      _NSLocalizedFailureErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSStringEncodingErrorKey =
      _lookup<NSErrorUserInfoKey>('NSStringEncodingErrorKey');

  NSErrorUserInfoKey get NSStringEncodingErrorKey =>
      _NSStringEncodingErrorKey.value;

  set NSStringEncodingErrorKey(NSErrorUserInfoKey value) =>
      _NSStringEncodingErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSURLErrorKey =
      _lookup<NSErrorUserInfoKey>('NSURLErrorKey');

  NSErrorUserInfoKey get NSURLErrorKey => _NSURLErrorKey.value;

  set NSURLErrorKey(NSErrorUserInfoKey value) => _NSURLErrorKey.value = value;

  late final ffi.Pointer<NSErrorUserInfoKey> _NSFilePathErrorKey =
      _lookup<NSErrorUserInfoKey>('NSFilePathErrorKey');

  NSErrorUserInfoKey get NSFilePathErrorKey => _NSFilePathErrorKey.value;

  set NSFilePathErrorKey(NSErrorUserInfoKey value) =>
      _NSFilePathErrorKey.value = value;

  late final ffi.Pointer<ObjCObject> _class_NSError1 = _getClass1("NSError");
  late final ffi.Pointer<ObjCSel> _sel_initWithDomain_code_userInfo_1 =
      _registerName1("initWithDomain:code:userInfo:");
  instancetype _objc_msgSend_302(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSErrorDomain domain,
    int code,
    ffi.Pointer<ObjCObject> dict,
  ) {
    return __objc_msgSend_302(
      obj,
      sel,
      domain,
      code,
      dict,
    );
  }

  late final __objc_msgSend_302Ptr = _lookup<
      ffi.NativeFunction<
          instancetype Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              NSErrorDomain,
              NSInteger,
              ffi.Pointer<ObjCObject>)>>('objc_msgSend');
  late final __objc_msgSend_302 = __objc_msgSend_302Ptr.asFunction<
      instancetype Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSErrorDomain, int, ffi.Pointer<ObjCObject>)>();

  late final ffi.Pointer<ObjCSel> _sel_errorWithDomain_code_userInfo_1 =
      _registerName1("errorWithDomain:code:userInfo:");
  late final ffi.Pointer<ObjCSel> _sel_domain1 = _registerName1("domain");
  late final ffi.Pointer<ObjCSel> _sel_code1 = _registerName1("code");
  late final ffi.Pointer<ObjCSel> _sel_localizedFailureReason1 =
      _registerName1("localizedFailureReason");
  late final ffi.Pointer<ObjCSel> _sel_localizedRecoverySuggestion1 =
      _registerName1("localizedRecoverySuggestion");
  late final ffi.Pointer<ObjCSel> _sel_localizedRecoveryOptions1 =
      _registerName1("localizedRecoveryOptions");
  late final ffi.Pointer<ObjCSel> _sel_recoveryAttempter1 =
      _registerName1("recoveryAttempter");
  late final ffi.Pointer<ObjCSel> _sel_helpAnchor1 =
      _registerName1("helpAnchor");
  late final ffi.Pointer<ObjCSel> _sel_underlyingErrors1 =
      _registerName1("underlyingErrors");
  late final ffi.Pointer<ObjCSel>
      _sel_setUserInfoValueProviderForDomain_provider_1 =
      _registerName1("setUserInfoValueProviderForDomain:provider:");
  void _objc_msgSend_303(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    NSErrorDomain errorDomain,
    ffi.Pointer<_ObjCBlock> provider,
  ) {
    return __objc_msgSend_303(
      obj,
      sel,
      errorDomain,
      provider,
    );
  }

  late final __objc_msgSend_303Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
              NSErrorDomain, ffi.Pointer<_ObjCBlock>)>>('objc_msgSend');
  late final __objc_msgSend_303 = __objc_msgSend_303Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, ffi.Pointer<ObjCSel>,
          NSErrorDomain, ffi.Pointer<_ObjCBlock>)>();

  late final ffi.Pointer<ObjCSel> _sel_userInfoValueProviderForDomain_1 =
      _registerName1("userInfoValueProviderForDomain:");
  ffi.Pointer<ObjCObject> NSStringFromSelector11(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector11(
      aSelector,
    );
  }

  late final _NSStringFromSelector11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector11 = _NSStringFromSelector11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString11(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString11(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString11 = _NSSelectorFromString11Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass11(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass11(
      aClass,
    );
  }

  late final _NSStringFromClass11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass11 = _NSStringFromClass11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString11(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString11(
      aClassName,
    );
  }

  late final _NSClassFromString11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString11 = _NSClassFromString11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol11(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol11(
      proto,
    );
  }

  late final _NSStringFromProtocol11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol11 = _NSStringFromProtocol11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString11(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString11(
      namestr,
    );
  }

  late final _NSProtocolFromString11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString11 = _NSProtocolFromString11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment11(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment11(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment11 = _NSGetSizeAndAlignment11Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog11(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog11(
      format,
    );
  }

  late final _NSLog11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog11 =
      _NSLog11Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv11(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv11(
      format,
      args,
    );
  }

  late final _NSLogv11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv11 = _NSLogv11Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake11(
    int loc,
    int len,
  ) {
    return ___CFRangeMake11(
      loc,
      len,
    );
  }

  late final ___CFRangeMake11Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake11 =
      ___CFRangeMake11Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID11() {
    return _CFNullGetTypeID11();
  }

  late final _CFNullGetTypeID11Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID11 =
      _CFNullGetTypeID11Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID11() {
    return _CFAllocatorGetTypeID11();
  }

  late final _CFAllocatorGetTypeID11Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID11 =
      _CFAllocatorGetTypeID11Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault11(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault11(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault11 =
      _CFAllocatorSetDefault11Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault11() {
    return _CFAllocatorGetDefault11();
  }

  late final _CFAllocatorGetDefault11Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault11 =
      _CFAllocatorGetDefault11Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate11(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate11(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate11Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate11 = _CFAllocatorCreate11Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate11(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate11(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate11 = _CFAllocatorAllocate11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate11(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate11(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate11 = _CFAllocatorReallocate11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate11(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate11(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate11 = _CFAllocatorDeallocate11Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize11(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize11(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize11Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize11 =
      _CFAllocatorGetPreferredSizeForSize11Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext11(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext11(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext11 = _CFAllocatorGetContext11Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID11(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID11(
      cf,
    );
  }

  late final _CFGetTypeID11Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID11 =
      _CFGetTypeID11Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription11(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription11(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription11Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription11 =
      _CFCopyTypeIDDescription11Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain11(
    CFTypeRef cf,
  ) {
    return _CFRetain11(
      cf,
    );
  }

  late final _CFRetain11Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain11 =
      _CFRetain11Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease11(
    CFTypeRef cf,
  ) {
    return _CFRelease11(
      cf,
    );
  }

  late final _CFRelease11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease11 =
      _CFRelease11Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease11(
    CFTypeRef arg,
  ) {
    return _CFAutorelease11(
      arg,
    );
  }

  late final _CFAutorelease11Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease11 =
      _CFAutorelease11Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount11(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount11(
      cf,
    );
  }

  late final _CFGetRetainCount11Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount11 =
      _CFGetRetainCount11Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual11(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual11(
      cf1,
      cf2,
    );
  }

  late final _CFEqual11Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual11 =
      _CFEqual11Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash11(
    CFTypeRef cf,
  ) {
    return _CFHash11(
      cf,
    );
  }

  late final _CFHash11Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash11 = _CFHash11Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription11(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription11(
      cf,
    );
  }

  late final _CFCopyDescription11Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription11 =
      _CFCopyDescription11Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator11(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator11(
      cf,
    );
  }

  late final _CFGetAllocator11Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator11 =
      _CFGetAllocator11Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable11(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable11(
      cf,
    );
  }

  late final _CFMakeCollectable11Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable11 =
      _CFMakeCollectable11Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone11() {
    return _NSDefaultMallocZone11();
  }

  late final _NSDefaultMallocZone11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone11 =
      _NSDefaultMallocZone11Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone11(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone11(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone11 = _NSCreateZone11Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone11(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone11(
      zone,
    );
  }

  late final _NSRecycleZone11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone11 =
      _NSRecycleZone11Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName11(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName11(
      zone,
      name,
    );
  }

  late final _NSSetZoneName11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName11 = _NSSetZoneName11Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName11(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName11(
      zone,
    );
  }

  late final _NSZoneName11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName11 = _NSZoneName11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer11(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer11(
      ptr,
    );
  }

  late final _NSZoneFromPointer11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer11 = _NSZoneFromPointer11Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc11(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc11(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc11 = _NSZoneMalloc11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc11(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc11(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc11 = _NSZoneCalloc11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc11(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc11(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc11 = _NSZoneRealloc11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree11(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree11(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree11 = _NSZoneFree11Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable11(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable11(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable11 = _NSAllocateCollectable11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable11(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable11(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable11 =
      _NSReallocateCollectable11Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize11() {
    return _NSPageSize11();
  }

  late final _NSPageSize11Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize11 = _NSPageSize11Ptr.asFunction<int Function()>();

  int NSLogPageSize11() {
    return _NSLogPageSize11();
  }

  late final _NSLogPageSize11Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize11 =
      _NSLogPageSize11Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize11(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize11(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize11Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize11 =
      _NSRoundUpToMultipleOfPageSize11Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize11(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize11(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize11Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize11 =
      _NSRoundDownToMultipleOfPageSize11Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages11(
    int bytes,
  ) {
    return _NSAllocateMemoryPages11(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages11Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages11 = _NSAllocateMemoryPages11Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages11(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages11(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages11 = _NSDeallocateMemoryPages11Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages11(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages11(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages11 = _NSCopyMemoryPages11Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable11() {
    return _NSRealMemoryAvailable11();
  }

  late final _NSRealMemoryAvailable11Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable11 =
      _NSRealMemoryAvailable11Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject11(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject11(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject11 = _NSAllocateObject11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject11(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject11(
      object,
    );
  }

  late final _NSDeallocateObject11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject11 = _NSDeallocateObject11Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject11(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject11(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject11 = _NSCopyObject11Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone11(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone11(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone11Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone11 = _NSShouldRetainWithZone11Ptr
      .asFunction<int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount11(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount11(
      object,
    );
  }

  late final _NSIncrementExtraRefCount11Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount11 = _NSIncrementExtraRefCount11Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero11(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero11(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero11Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero11 =
      _NSDecrementExtraRefCountWasZero11Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount11(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount11(
      object,
    );
  }

  late final _NSExtraRefCount11Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount11 =
      _NSExtraRefCount11Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  /// Is this an error handle?
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsError(
    Object handle,
  ) {
    return _Dart_IsError(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsError');
  late final _Dart_IsError =
      _Dart_IsErrorPtr.asFunction<int Function(Object)>();

  /// Is this an api error handle?
  ///
  /// Api error handles are produced when an api function is misused.
  /// This happens when a Dart embedding api function is called with
  /// invalid arguments or in an invalid context.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsApiError(
    Object handle,
  ) {
    return _Dart_IsApiError(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsApiErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsApiError');
  late final _Dart_IsApiError =
      _Dart_IsApiErrorPtr.asFunction<int Function(Object)>();

  /// Is this an unhandled exception error handle?
  ///
  /// Unhandled exception error handles are produced when, during the
  /// execution of Dart code, an exception is thrown but not caught.
  /// This can occur in any function which triggers the execution of Dart
  /// code.
  ///
  /// See Dart_ErrorGetException and Dart_ErrorGetStackTrace.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsUnhandledExceptionError(
    Object handle,
  ) {
    return _Dart_IsUnhandledExceptionError(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsUnhandledExceptionErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsUnhandledExceptionError');
  late final _Dart_IsUnhandledExceptionError =
      _Dart_IsUnhandledExceptionErrorPtr.asFunction<int Function(Object)>();

  /// Is this a compilation error handle?
  ///
  /// Compilation error handles are produced when, during the execution
  /// of Dart code, a compile-time error occurs.  This can occur in any
  /// function which triggers the execution of Dart code.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsCompilationError(
    Object handle,
  ) {
    return _Dart_IsCompilationError(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsCompilationErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsCompilationError');
  late final _Dart_IsCompilationError =
      _Dart_IsCompilationErrorPtr.asFunction<int Function(Object)>();

  /// Is this a fatal error handle?
  ///
  /// Fatal error handles are produced when the system wants to shut down
  /// the current isolate.
  ///
  /// Requires there to be a current isolate.
  bool Dart_IsFatalError(
    Object handle,
  ) {
    return _Dart_IsFatalError(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsFatalErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsFatalError');
  late final _Dart_IsFatalError =
      _Dart_IsFatalErrorPtr.asFunction<int Function(Object)>();

  /// Gets the error message from an error handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A C string containing an error message if the handle is
  /// error. An empty C string ("") if the handle is valid. This C
  /// String is scope allocated and is only valid until the next call
  /// to Dart_ExitScope.
  ffi.Pointer<pkg_ffi.Char> Dart_GetError(
    Object handle,
  ) {
    return _Dart_GetError(
      handle,
    );
  }

  late final _Dart_GetErrorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(ffi.Handle)>>(
      'Dart_GetError');
  late final _Dart_GetError = _Dart_GetErrorPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(Object)>();

  /// Is this an error handle for an unhandled exception?
  bool Dart_ErrorHasException(
    Object handle,
  ) {
    return _Dart_ErrorHasException(
          handle,
        ) !=
        0;
  }

  late final _Dart_ErrorHasExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_ErrorHasException');
  late final _Dart_ErrorHasException =
      _Dart_ErrorHasExceptionPtr.asFunction<int Function(Object)>();

  /// Gets the exception Object from an unhandled exception error handle.
  Object Dart_ErrorGetException(
    Object handle,
  ) {
    return _Dart_ErrorGetException(
      handle,
    );
  }

  late final _Dart_ErrorGetExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ErrorGetException');
  late final _Dart_ErrorGetException =
      _Dart_ErrorGetExceptionPtr.asFunction<Object Function(Object)>();

  /// Gets the stack trace Object from an unhandled exception error handle.
  Object Dart_ErrorGetStackTrace(
    Object handle,
  ) {
    return _Dart_ErrorGetStackTrace(
      handle,
    );
  }

  late final _Dart_ErrorGetStackTracePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ErrorGetStackTrace');
  late final _Dart_ErrorGetStackTrace =
      _Dart_ErrorGetStackTracePtr.asFunction<Object Function(Object)>();

  /// Produces an api error handle with the provided error message.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param error the error message.
  Object Dart_NewApiError(
    ffi.Pointer<pkg_ffi.Char> error,
  ) {
    return _Dart_NewApiError(
      error,
    );
  }

  late final _Dart_NewApiErrorPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'Dart_NewApiError');
  late final _Dart_NewApiError = _Dart_NewApiErrorPtr.asFunction<
      Object Function(ffi.Pointer<pkg_ffi.Char>)>();

  Object Dart_NewCompilationError(
    ffi.Pointer<pkg_ffi.Char> error,
  ) {
    return _Dart_NewCompilationError(
      error,
    );
  }

  late final _Dart_NewCompilationErrorPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'Dart_NewCompilationError');
  late final _Dart_NewCompilationError = _Dart_NewCompilationErrorPtr
      .asFunction<Object Function(ffi.Pointer<pkg_ffi.Char>)>();

  /// Produces a new unhandled exception error handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param exception An instance of a Dart object to be thrown or
  /// an ApiError or CompilationError handle.
  /// When an ApiError or CompilationError handle is passed in
  /// a string object of the error message is created and it becomes
  /// the Dart object to be thrown.
  Object Dart_NewUnhandledExceptionError(
    Object exception,
  ) {
    return _Dart_NewUnhandledExceptionError(
      exception,
    );
  }

  late final _Dart_NewUnhandledExceptionErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewUnhandledExceptionError');
  late final _Dart_NewUnhandledExceptionError =
      _Dart_NewUnhandledExceptionErrorPtr.asFunction<Object Function(Object)>();

  /// Propagates an error.
  ///
  /// If the provided handle is an unhandled exception error, this
  /// function will cause the unhandled exception to be rethrown.  This
  /// will proceed in the standard way, walking up Dart frames until an
  /// appropriate 'catch' block is found, executing 'finally' blocks,
  /// etc.
  ///
  /// If the error is not an unhandled exception error, we will unwind
  /// the stack to the next C frame.  Intervening Dart frames will be
  /// discarded; specifically, 'finally' blocks will not execute.  This
  /// is the standard way that compilation errors (and the like) are
  /// handled by the Dart runtime.
  ///
  /// In either case, when an error is propagated any current scopes
  /// created by Dart_EnterScope will be exited.
  ///
  /// See the additional discussion under "Propagating Errors" at the
  /// beginning of this file.
  ///
  /// \param An error handle (See Dart_IsError)
  ///
  /// \return On success, this function does not return.  On failure, the
  /// process is terminated.
  void Dart_PropagateError(
    Object handle,
  ) {
    return _Dart_PropagateError(
      handle,
    );
  }

  late final _Dart_PropagateErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_PropagateError');
  late final _Dart_PropagateError =
      _Dart_PropagateErrorPtr.asFunction<void Function(Object)>();

  /// Converts an object to a string.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return The converted string if no error occurs during
  /// the conversion. If an error does occur, an error handle is
  /// returned.
  Object Dart_ToString(
    Object object,
  ) {
    return _Dart_ToString(
      object,
    );
  }

  late final _Dart_ToStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ToString');
  late final _Dart_ToString =
      _Dart_ToStringPtr.asFunction<Object Function(Object)>();

  /// Checks to see if two handles refer to identically equal objects.
  ///
  /// If both handles refer to instances, this is equivalent to using the top-level
  /// function identical() from dart:core. Otherwise, returns whether the two
  /// argument handles refer to the same object.
  ///
  /// \param obj1 An object to be compared.
  /// \param obj2 An object to be compared.
  ///
  /// \return True if the objects are identically equal.  False otherwise.
  bool Dart_IdentityEquals(
    Object obj1,
    Object obj2,
  ) {
    return _Dart_IdentityEquals(
          obj1,
          obj2,
        ) !=
        0;
  }

  late final _Dart_IdentityEqualsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle, ffi.Handle)>>(
          'Dart_IdentityEquals');
  late final _Dart_IdentityEquals =
      _Dart_IdentityEqualsPtr.asFunction<int Function(Object, Object)>();

  /// Allocates a handle in the current scope from a persistent handle.
  Object Dart_HandleFromPersistent(
    Object object,
  ) {
    return _Dart_HandleFromPersistent(
      object,
    );
  }

  late final _Dart_HandleFromPersistentPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_HandleFromPersistent');
  late final _Dart_HandleFromPersistent =
      _Dart_HandleFromPersistentPtr.asFunction<Object Function(Object)>();

  /// Allocates a handle in the current scope from a weak persistent handle.
  ///
  /// This will be a handle to Dart_Null if the object has been garbage collected.
  Object Dart_HandleFromWeakPersistent(
    Dart_WeakPersistentHandle object,
  ) {
    return _Dart_HandleFromWeakPersistent(
      object,
    );
  }

  late final _Dart_HandleFromWeakPersistentPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_WeakPersistentHandle)>>(
      'Dart_HandleFromWeakPersistent');
  late final _Dart_HandleFromWeakPersistent = _Dart_HandleFromWeakPersistentPtr
      .asFunction<Object Function(Dart_WeakPersistentHandle)>();

  /// Allocates a persistent handle for an object.
  ///
  /// This handle has the lifetime of the current isolate unless it is
  /// explicitly deallocated by calling Dart_DeletePersistentHandle.
  ///
  /// Requires there to be a current isolate.
  Object Dart_NewPersistentHandle(
    Object object,
  ) {
    return _Dart_NewPersistentHandle(
      object,
    );
  }

  late final _Dart_NewPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewPersistentHandle');
  late final _Dart_NewPersistentHandle =
      _Dart_NewPersistentHandlePtr.asFunction<Object Function(Object)>();

  /// Assign value of local handle to a persistent handle.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param obj1 A persistent handle whose value needs to be set.
  /// \param obj2 An object whose value needs to be set to the persistent handle.
  ///
  /// \return Success if the persistent handle was set
  /// Otherwise, returns an error.
  void Dart_SetPersistentHandle(
    Object obj1,
    Object obj2,
  ) {
    return _Dart_SetPersistentHandle(
      obj1,
      obj2,
    );
  }

  late final _Dart_SetPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>(
          'Dart_SetPersistentHandle');
  late final _Dart_SetPersistentHandle =
      _Dart_SetPersistentHandlePtr.asFunction<void Function(Object, Object)>();

  /// Deallocates a persistent handle.
  ///
  /// Requires there to be a current isolate group.
  void Dart_DeletePersistentHandle(
    Object object,
  ) {
    return _Dart_DeletePersistentHandle(
      object,
    );
  }

  late final _Dart_DeletePersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_DeletePersistentHandle');
  late final _Dart_DeletePersistentHandle =
      _Dart_DeletePersistentHandlePtr.asFunction<void Function(Object)>();

  /// Allocates a weak persistent handle for an object.
  ///
  /// This handle has the lifetime of the current isolate. The handle can also be
  /// explicitly deallocated by calling Dart_DeleteWeakPersistentHandle.
  ///
  /// If the object becomes unreachable the callback is invoked with the peer as
  /// argument. The callback can be executed on any thread, will have a current
  /// isolate group, but will not have a current isolate. The callback can only
  /// call Dart_DeletePersistentHandle or Dart_DeleteWeakPersistentHandle. This
  /// gives the embedder the ability to cleanup data associated with the object.
  /// The handle will point to the Dart_Null object after the finalizer has been
  /// run. It is illegal to call into the VM with any other Dart_* functions from
  /// the callback. If the handle is deleted before the object becomes
  /// unreachable, the callback is never invoked.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param object An object with identity.
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The weak persistent handle or NULL. NULL is returned in case of bad
  /// parameters.
  Dart_WeakPersistentHandle Dart_NewWeakPersistentHandle(
    Object object,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewWeakPersistentHandle(
      object,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewWeakPersistentHandlePtr = _lookup<
      ffi.NativeFunction<
          Dart_WeakPersistentHandle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewWeakPersistentHandle');
  late final _Dart_NewWeakPersistentHandle =
      _Dart_NewWeakPersistentHandlePtr.asFunction<
          Dart_WeakPersistentHandle Function(
              Object, ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Deletes the given weak persistent [object] handle.
  ///
  /// Requires there to be a current isolate group.
  void Dart_DeleteWeakPersistentHandle(
    Dart_WeakPersistentHandle object,
  ) {
    return _Dart_DeleteWeakPersistentHandle(
      object,
    );
  }

  late final _Dart_DeleteWeakPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_WeakPersistentHandle)>>(
          'Dart_DeleteWeakPersistentHandle');
  late final _Dart_DeleteWeakPersistentHandle =
      _Dart_DeleteWeakPersistentHandlePtr.asFunction<
          void Function(Dart_WeakPersistentHandle)>();

  /// Updates the external memory size for the given weak persistent handle.
  ///
  /// May trigger garbage collection.
  void Dart_UpdateExternalSize(
    Dart_WeakPersistentHandle object,
    int external_allocation_size,
  ) {
    return _Dart_UpdateExternalSize(
      object,
      external_allocation_size,
    );
  }

  late final _Dart_UpdateExternalSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_WeakPersistentHandle,
              ffi.IntPtr)>>('Dart_UpdateExternalSize');
  late final _Dart_UpdateExternalSize = _Dart_UpdateExternalSizePtr.asFunction<
      void Function(Dart_WeakPersistentHandle, int)>();

  /// Allocates a finalizable handle for an object.
  ///
  /// This handle has the lifetime of the current isolate group unless the object
  /// pointed to by the handle is garbage collected, in this case the VM
  /// automatically deletes the handle after invoking the callback associated
  /// with the handle. The handle can also be explicitly deallocated by
  /// calling Dart_DeleteFinalizableHandle.
  ///
  /// If the object becomes unreachable the callback is invoked with the
  /// the peer as argument. The callback can be executed on any thread, will have
  /// an isolate group, but will not have a current isolate. The callback can only
  /// call Dart_DeletePersistentHandle or Dart_DeleteWeakPersistentHandle.
  /// This gives the embedder the ability to cleanup data associated with the
  /// object and clear out any cached references to the handle. All references to
  /// this handle after the callback will be invalid. It is illegal to call into
  /// the VM with any other Dart_* functions from the callback. If the handle is
  /// deleted before the object becomes unreachable, the callback is never
  /// invoked.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param object An object with identity.
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The finalizable handle or NULL. NULL is returned in case of bad
  /// parameters.
  Dart_FinalizableHandle Dart_NewFinalizableHandle(
    Object object,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewFinalizableHandle(
      object,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewFinalizableHandlePtr = _lookup<
      ffi.NativeFunction<
          Dart_FinalizableHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
              ffi.IntPtr, Dart_HandleFinalizer)>>('Dart_NewFinalizableHandle');
  late final _Dart_NewFinalizableHandle =
      _Dart_NewFinalizableHandlePtr.asFunction<
          Dart_FinalizableHandle Function(
              Object, ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Deletes the given finalizable [object] handle.
  ///
  /// The caller has to provide the actual Dart object the handle was created from
  /// to prove the object (and therefore the finalizable handle) is still alive.
  ///
  /// Requires there to be a current isolate.
  void Dart_DeleteFinalizableHandle(
    Dart_FinalizableHandle object,
    Object strong_ref_to_object,
  ) {
    return _Dart_DeleteFinalizableHandle(
      object,
      strong_ref_to_object,
    );
  }

  late final _Dart_DeleteFinalizableHandlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_FinalizableHandle,
              ffi.Handle)>>('Dart_DeleteFinalizableHandle');
  late final _Dart_DeleteFinalizableHandle = _Dart_DeleteFinalizableHandlePtr
      .asFunction<void Function(Dart_FinalizableHandle, Object)>();

  /// Updates the external memory size for the given finalizable handle.
  ///
  /// The caller has to provide the actual Dart object the handle was created from
  /// to prove the object (and therefore the finalizable handle) is still alive.
  ///
  /// May trigger garbage collection.
  void Dart_UpdateFinalizableExternalSize(
    Dart_FinalizableHandle object,
    Object strong_ref_to_object,
    int external_allocation_size,
  ) {
    return _Dart_UpdateFinalizableExternalSize(
      object,
      strong_ref_to_object,
      external_allocation_size,
    );
  }

  late final _Dart_UpdateFinalizableExternalSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_FinalizableHandle, ffi.Handle,
              ffi.IntPtr)>>('Dart_UpdateFinalizableExternalSize');
  late final _Dart_UpdateFinalizableExternalSize =
      _Dart_UpdateFinalizableExternalSizePtr.asFunction<
          void Function(Dart_FinalizableHandle, Object, int)>();

  /// Gets the version string for the Dart VM.
  ///
  /// The version of the Dart VM can be accessed without initializing the VM.
  ///
  /// \return The version string for the embedded Dart VM.
  ffi.Pointer<pkg_ffi.Char> Dart_VersionString() {
    return _Dart_VersionString();
  }

  late final _Dart_VersionStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function()>>(
          'Dart_VersionString');
  late final _Dart_VersionString =
      _Dart_VersionStringPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function()>();

  /// Initialize Dart_IsolateFlags with correct version and default values.
  void Dart_IsolateFlagsInitialize(
    ffi.Pointer<Dart_IsolateFlags> flags,
  ) {
    return _Dart_IsolateFlagsInitialize(
      flags,
    );
  }

  late final _Dart_IsolateFlagsInitializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Dart_IsolateFlags>)>>('Dart_IsolateFlagsInitialize');
  late final _Dart_IsolateFlagsInitialize = _Dart_IsolateFlagsInitializePtr
      .asFunction<void Function(ffi.Pointer<Dart_IsolateFlags>)>();

  /// Initializes the VM.
  ///
  /// \param params A struct containing initialization information. The version
  /// field of the struct must be DART_INITIALIZE_PARAMS_CURRENT_VERSION.
  ///
  /// \return NULL if initialization is successful. Returns an error message
  /// otherwise. The caller is responsible for freeing the error message.
  ffi.Pointer<pkg_ffi.Char> Dart_Initialize(
    ffi.Pointer<Dart_InitializeParams> params,
  ) {
    return _Dart_Initialize(
      params,
    );
  }

  late final _Dart_InitializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<Dart_InitializeParams>)>>('Dart_Initialize');
  late final _Dart_Initialize = _Dart_InitializePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<Dart_InitializeParams>)>();

  /// Cleanup state in the VM before process termination.
  ///
  /// \return NULL if cleanup is successful. Returns an error message otherwise.
  /// The caller is responsible for freeing the error message.
  ///
  /// NOTE: This function must not be called on a thread that was created by the VM
  /// itself.
  ffi.Pointer<pkg_ffi.Char> Dart_Cleanup() {
    return _Dart_Cleanup();
  }

  late final _Dart_CleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function()>>(
          'Dart_Cleanup');
  late final _Dart_Cleanup =
      _Dart_CleanupPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function()>();

  /// Sets command line flags. Should be called before Dart_Initialize.
  ///
  /// \param argc The length of the arguments array.
  /// \param argv An array of arguments.
  ///
  /// \return NULL if successful. Returns an error message otherwise.
  /// The caller is responsible for freeing the error message.
  ///
  /// NOTE: This call does not store references to the passed in c-strings.
  ffi.Pointer<pkg_ffi.Char> Dart_SetVMFlags(
    int argc,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> argv,
  ) {
    return _Dart_SetVMFlags(
      argc,
      argv,
    );
  }

  late final _Dart_SetVMFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(pkg_ffi.Int,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('Dart_SetVMFlags');
  late final _Dart_SetVMFlags = _Dart_SetVMFlagsPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          int, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Returns true if the named VM flag is of boolean type, specified, and set to
  /// true.
  ///
  /// \param flag_name The name of the flag without leading punctuation
  /// (example: "enable_asserts").
  bool Dart_IsVMFlagSet(
    ffi.Pointer<pkg_ffi.Char> flag_name,
  ) {
    return _Dart_IsVMFlagSet(
          flag_name,
        ) !=
        0;
  }

  late final _Dart_IsVMFlagSetPtr = _lookup<
          ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'Dart_IsVMFlagSet');
  late final _Dart_IsVMFlagSet = _Dart_IsVMFlagSetPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>)>();

  /// Creates a new isolate. The new isolate becomes the current isolate.
  ///
  /// A snapshot can be used to restore the VM quickly to a saved state
  /// and is useful for fast startup. If snapshot data is provided, the
  /// isolate will be started using that snapshot data. Requires a core snapshot or
  /// an app snapshot created by Dart_CreateSnapshot or
  /// Dart_CreatePrecompiledSnapshot* from a VM with the same version.
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param script_uri The main source file or snapshot this isolate will load.
  /// The VM will provide this URI to the Dart_IsolateGroupCreateCallback when a child
  /// isolate is created by Isolate.spawn. The embedder should use a URI that
  /// allows it to load the same program into such a child isolate.
  /// \param name A short name for the isolate to improve debugging messages.
  /// Typically of the format 'foo.dart:main()'.
  /// \param isolate_snapshot_data
  /// \param isolate_snapshot_instructions Buffers containing a snapshot of the
  /// isolate or NULL if no snapshot is provided. If provided, the buffers must
  /// remain valid until the isolate shuts down.
  /// \param flags Pointer to VM specific flags or NULL for default flags.
  /// \param isolate_group_data Embedder group data. This data can be obtained
  /// by calling Dart_IsolateGroupData and will be passed to the
  /// Dart_IsolateShutdownCallback, Dart_IsolateCleanupCallback, and
  /// Dart_IsolateGroupCleanupCallback.
  /// \param isolate_data Embedder data.  This data will be passed to
  /// the Dart_IsolateGroupCreateCallback when new isolates are spawned from
  /// this parent isolate.
  /// \param error Returns NULL if creation is successful, an error message
  /// otherwise. The caller is responsible for calling free() on the error
  /// message.
  ///
  /// \return The new isolate on success, or NULL if isolate creation failed.
  Dart_Isolate Dart_CreateIsolateGroup(
    ffi.Pointer<pkg_ffi.Char> script_uri,
    ffi.Pointer<pkg_ffi.Char> name,
    ffi.Pointer<ffi.Uint8> isolate_snapshot_data,
    ffi.Pointer<ffi.Uint8> isolate_snapshot_instructions,
    ffi.Pointer<Dart_IsolateFlags> flags,
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateGroup(
      script_uri,
      name,
      isolate_snapshot_data,
      isolate_snapshot_instructions,
      flags,
      isolate_group_data,
      isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateGroupPtr = _lookup<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  ffi.Pointer<pkg_ffi.Char>,
                  ffi.Pointer<pkg_ffi.Char>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Pointer<Dart_IsolateFlags>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>(
      'Dart_CreateIsolateGroup');
  late final _Dart_CreateIsolateGroup = _Dart_CreateIsolateGroupPtr.asFunction<
      Dart_Isolate Function(
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<Dart_IsolateFlags>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Creates a new isolate inside the isolate group of [group_member].
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param group_member An isolate from the same group into which the newly created
  /// isolate should be born into. Other threads may not have entered / enter this
  /// member isolate.
  /// \param name A short name for the isolate for debugging purposes.
  /// \param shutdown_callback A callback to be called when the isolate is being
  /// shutdown (may be NULL).
  /// \param cleanup_callback A callback to be called when the isolate is being
  /// cleaned up (may be NULL).
  /// \param isolate_data The embedder-specific data associated with this isolate.
  /// \param error Set to NULL if creation is successful, set to an error
  /// message otherwise. The caller is responsible for calling free() on the
  /// error message.
  ///
  /// \return The newly created isolate on success, or NULL if isolate creation
  /// failed.
  ///
  /// If successful, the newly created isolate will become the current isolate.
  Dart_Isolate Dart_CreateIsolateInGroup(
    Dart_Isolate group_member,
    ffi.Pointer<pkg_ffi.Char> name,
    Dart_IsolateShutdownCallback shutdown_callback,
    Dart_IsolateCleanupCallback cleanup_callback,
    ffi.Pointer<ffi.Void> child_isolate_data,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateInGroup(
      group_member,
      name,
      shutdown_callback,
      cleanup_callback,
      child_isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateInGroupPtr = _lookup<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  Dart_Isolate,
                  ffi.Pointer<pkg_ffi.Char>,
                  Dart_IsolateShutdownCallback,
                  Dart_IsolateCleanupCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>(
      'Dart_CreateIsolateInGroup');
  late final _Dart_CreateIsolateInGroup =
      _Dart_CreateIsolateInGroupPtr.asFunction<
          Dart_Isolate Function(
              Dart_Isolate,
              ffi.Pointer<pkg_ffi.Char>,
              Dart_IsolateShutdownCallback,
              Dart_IsolateCleanupCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Creates a new isolate from a Dart Kernel file. The new isolate
  /// becomes the current isolate.
  ///
  /// Requires there to be no current isolate.
  ///
  /// \param script_uri The main source file or snapshot this isolate will load.
  /// The VM will provide this URI to the Dart_IsolateGroupCreateCallback when a child
  /// isolate is created by Isolate.spawn. The embedder should use a URI that
  /// allows it to load the same program into such a child isolate.
  /// \param name A short name for the isolate to improve debugging messages.
  /// Typically of the format 'foo.dart:main()'.
  /// \param kernel_buffer
  /// \param kernel_buffer_size A buffer which contains a kernel/DIL program. Must
  /// remain valid until isolate shutdown.
  /// \param flags Pointer to VM specific flags or NULL for default flags.
  /// \param isolate_group_data Embedder group data. This data can be obtained
  /// by calling Dart_IsolateGroupData and will be passed to the
  /// Dart_IsolateShutdownCallback, Dart_IsolateCleanupCallback, and
  /// Dart_IsolateGroupCleanupCallback.
  /// \param isolate_data Embedder data.  This data will be passed to
  /// the Dart_IsolateGroupCreateCallback when new isolates are spawned from
  /// this parent isolate.
  /// \param error Returns NULL if creation is successful, an error message
  /// otherwise. The caller is responsible for calling free() on the error
  /// message.
  ///
  /// \return The new isolate on success, or NULL if isolate creation failed.
  Dart_Isolate Dart_CreateIsolateGroupFromKernel(
    ffi.Pointer<pkg_ffi.Char> script_uri,
    ffi.Pointer<pkg_ffi.Char> name,
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
    ffi.Pointer<Dart_IsolateFlags> flags,
    ffi.Pointer<ffi.Void> isolate_group_data,
    ffi.Pointer<ffi.Void> isolate_data,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> error,
  ) {
    return _Dart_CreateIsolateGroupFromKernel(
      script_uri,
      name,
      kernel_buffer,
      kernel_buffer_size,
      flags,
      isolate_group_data,
      isolate_data,
      error,
    );
  }

  late final _Dart_CreateIsolateGroupFromKernelPtr = _lookup<
          ffi.NativeFunction<
              Dart_Isolate Function(
                  ffi.Pointer<pkg_ffi.Char>,
                  ffi.Pointer<pkg_ffi.Char>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.IntPtr,
                  ffi.Pointer<Dart_IsolateFlags>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>(
      'Dart_CreateIsolateGroupFromKernel');
  late final _Dart_CreateIsolateGroupFromKernel =
      _Dart_CreateIsolateGroupFromKernelPtr.asFunction<
          Dart_Isolate Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<Dart_IsolateFlags>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Shuts down the current isolate. After this call, the current isolate is NULL.
  /// Any current scopes created by Dart_EnterScope will be exited. Invokes the
  /// shutdown callback and any callbacks of remaining weak persistent handles.
  ///
  /// Requires there to be a current isolate.
  void Dart_ShutdownIsolate() {
    return _Dart_ShutdownIsolate();
  }

  late final _Dart_ShutdownIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ShutdownIsolate');
  late final _Dart_ShutdownIsolate =
      _Dart_ShutdownIsolatePtr.asFunction<void Function()>();

  /// Returns the current isolate. Will return NULL if there is no
  /// current isolate.
  Dart_Isolate Dart_CurrentIsolate() {
    return _Dart_CurrentIsolate();
  }

  late final _Dart_CurrentIsolatePtr =
      _lookup<ffi.NativeFunction<Dart_Isolate Function()>>(
          'Dart_CurrentIsolate');
  late final _Dart_CurrentIsolate =
      _Dart_CurrentIsolatePtr.asFunction<Dart_Isolate Function()>();

  /// Returns the callback data associated with the current isolate. This
  /// data was set when the isolate got created or initialized.
  ffi.Pointer<ffi.Void> Dart_CurrentIsolateData() {
    return _Dart_CurrentIsolateData();
  }

  late final _Dart_CurrentIsolateDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'Dart_CurrentIsolateData');
  late final _Dart_CurrentIsolateData = _Dart_CurrentIsolateDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function()>();

  /// Returns the callback data associated with the given isolate. This
  /// data was set when the isolate got created or initialized.
  ffi.Pointer<ffi.Void> Dart_IsolateData(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateData(
      isolate,
    );
  }

  late final _Dart_IsolateDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>(
          'Dart_IsolateData');
  late final _Dart_IsolateData = _Dart_IsolateDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(Dart_Isolate)>();

  /// Returns the current isolate group. Will return NULL if there is no
  /// current isolate group.
  Dart_IsolateGroup Dart_CurrentIsolateGroup() {
    return _Dart_CurrentIsolateGroup();
  }

  late final _Dart_CurrentIsolateGroupPtr =
      _lookup<ffi.NativeFunction<Dart_IsolateGroup Function()>>(
          'Dart_CurrentIsolateGroup');
  late final _Dart_CurrentIsolateGroup =
      _Dart_CurrentIsolateGroupPtr.asFunction<Dart_IsolateGroup Function()>();

  /// Returns the callback data associated with the current isolate group. This
  /// data was passed to the isolate group when it was created.
  ffi.Pointer<ffi.Void> Dart_CurrentIsolateGroupData() {
    return _Dart_CurrentIsolateGroupData();
  }

  late final _Dart_CurrentIsolateGroupDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function()>>(
          'Dart_CurrentIsolateGroupData');
  late final _Dart_CurrentIsolateGroupData = _Dart_CurrentIsolateGroupDataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function()>();

  /// Returns the callback data associated with the specified isolate group. This
  /// data was passed to the isolate when it was created.
  /// The embedder is responsible for ensuring the consistency of this data
  /// with respect to the lifecycle of an isolate group.
  ffi.Pointer<ffi.Void> Dart_IsolateGroupData(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateGroupData(
      isolate,
    );
  }

  late final _Dart_IsolateGroupDataPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(Dart_Isolate)>>(
          'Dart_IsolateGroupData');
  late final _Dart_IsolateGroupData = _Dart_IsolateGroupDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(Dart_Isolate)>();

  /// Returns the debugging name for the current isolate.
  ///
  /// This name is unique to each isolate and should only be used to make
  /// debugging messages more comprehensible.
  Object Dart_DebugName() {
    return _Dart_DebugName();
  }

  late final _Dart_DebugNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_DebugName');
  late final _Dart_DebugName =
      _Dart_DebugNamePtr.asFunction<Object Function()>();

  /// Returns the ID for an isolate which is used to query the service protocol.
  ///
  /// It is the responsibility of the caller to free the returned ID.
  ffi.Pointer<pkg_ffi.Char> Dart_IsolateServiceId(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateServiceId(
      isolate,
    );
  }

  late final _Dart_IsolateServiceIdPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(Dart_Isolate)>>(
      'Dart_IsolateServiceId');
  late final _Dart_IsolateServiceId = _Dart_IsolateServiceIdPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(Dart_Isolate)>();

  /// Enters an isolate. After calling this function,
  /// the current isolate will be set to the provided isolate.
  ///
  /// Requires there to be no current isolate. Multiple threads may not be in
  /// the same isolate at once.
  void Dart_EnterIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_EnterIsolate(
      isolate,
    );
  }

  late final _Dart_EnterIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>(
          'Dart_EnterIsolate');
  late final _Dart_EnterIsolate =
      _Dart_EnterIsolatePtr.asFunction<void Function(Dart_Isolate)>();

  /// Kills the given isolate.
  ///
  /// This function has the same effect as dart:isolate's
  /// Isolate.kill(priority:immediate).
  /// It can interrupt ordinary Dart code but not native code. If the isolate is
  /// in the middle of a long running native function, the isolate will not be
  /// killed until control returns to Dart.
  ///
  /// Does not require a current isolate. It is safe to kill the current isolate if
  /// there is one.
  void Dart_KillIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_KillIsolate(
      isolate,
    );
  }

  late final _Dart_KillIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>(
          'Dart_KillIsolate');
  late final _Dart_KillIsolate =
      _Dart_KillIsolatePtr.asFunction<void Function(Dart_Isolate)>();

  /// Notifies the VM that the embedder expects |size| bytes of memory have become
  /// unreachable. The VM may use this hint to adjust the garbage collector's
  /// growth policy.
  ///
  /// Multiple calls are interpreted as increasing, not replacing, the estimate of
  /// unreachable memory.
  ///
  /// Requires there to be a current isolate.
  void Dart_HintFreed(
    int size,
  ) {
    return _Dart_HintFreed(
      size,
    );
  }

  late final _Dart_HintFreedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.IntPtr)>>(
          'Dart_HintFreed');
  late final _Dart_HintFreed =
      _Dart_HintFreedPtr.asFunction<void Function(int)>();

  /// Notifies the VM that the embedder expects to be idle until |deadline|. The VM
  /// may use this time to perform garbage collection or other tasks to avoid
  /// delays during execution of Dart code in the future.
  ///
  /// |deadline| is measured in microseconds against the system's monotonic time.
  /// This clock can be accessed via Dart_TimelineGetMicros().
  ///
  /// Requires there to be a current isolate.
  void Dart_NotifyIdle(
    int deadline,
  ) {
    return _Dart_NotifyIdle(
      deadline,
    );
  }

  late final _Dart_NotifyIdlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'Dart_NotifyIdle');
  late final _Dart_NotifyIdle =
      _Dart_NotifyIdlePtr.asFunction<void Function(int)>();

  /// Notifies the VM that the system is running low on memory.
  ///
  /// Does not require a current isolate. Only valid after calling Dart_Initialize.
  void Dart_NotifyLowMemory() {
    return _Dart_NotifyLowMemory();
  }

  late final _Dart_NotifyLowMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_NotifyLowMemory');
  late final _Dart_NotifyLowMemory =
      _Dart_NotifyLowMemoryPtr.asFunction<void Function()>();

  /// Starts the CPU sampling profiler.
  void Dart_StartProfiling() {
    return _Dart_StartProfiling();
  }

  late final _Dart_StartProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_StartProfiling');
  late final _Dart_StartProfiling =
      _Dart_StartProfilingPtr.asFunction<void Function()>();

  /// Stops the CPU sampling profiler.
  ///
  /// Note that some profile samples might still be taken after this fucntion
  /// returns due to the asynchronous nature of the implementation on some
  /// platforms.
  void Dart_StopProfiling() {
    return _Dart_StopProfiling();
  }

  late final _Dart_StopProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_StopProfiling');
  late final _Dart_StopProfiling =
      _Dart_StopProfilingPtr.asFunction<void Function()>();

  /// Notifies the VM that the current thread should not be profiled until a
  /// matching call to Dart_ThreadEnableProfiling is made.
  ///
  /// NOTE: By default, if a thread has entered an isolate it will be profiled.
  /// This function should be used when an embedder knows a thread is about
  /// to make a blocking call and wants to avoid unnecessary interrupts by
  /// the profiler.
  void Dart_ThreadDisableProfiling() {
    return _Dart_ThreadDisableProfiling();
  }

  late final _Dart_ThreadDisableProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'Dart_ThreadDisableProfiling');
  late final _Dart_ThreadDisableProfiling =
      _Dart_ThreadDisableProfilingPtr.asFunction<void Function()>();

  /// Notifies the VM that the current thread should be profiled.
  ///
  /// NOTE: It is only legal to call this function *after* calling
  /// Dart_ThreadDisableProfiling.
  ///
  /// NOTE: By default, if a thread has entered an isolate it will be profiled.
  void Dart_ThreadEnableProfiling() {
    return _Dart_ThreadEnableProfiling();
  }

  late final _Dart_ThreadEnableProfilingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'Dart_ThreadEnableProfiling');
  late final _Dart_ThreadEnableProfiling =
      _Dart_ThreadEnableProfilingPtr.asFunction<void Function()>();

  /// Register symbol information for the Dart VM's profiler and crash dumps.
  ///
  /// This consumes the output of //topaz/runtime/dart/profiler_symbols, which
  /// should be treated as opaque.
  void Dart_AddSymbols(
    ffi.Pointer<pkg_ffi.Char> dso_name,
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _Dart_AddSymbols(
      dso_name,
      buffer,
      buffer_size,
    );
  }

  late final _Dart_AddSymbolsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.IntPtr)>>('Dart_AddSymbols');
  late final _Dart_AddSymbols = _Dart_AddSymbolsPtr.asFunction<
      void Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  /// Exits an isolate. After this call, Dart_CurrentIsolate will
  /// return NULL.
  ///
  /// Requires there to be a current isolate.
  void Dart_ExitIsolate() {
    return _Dart_ExitIsolate();
  }

  late final _Dart_ExitIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ExitIsolate');
  late final _Dart_ExitIsolate =
      _Dart_ExitIsolatePtr.asFunction<void Function()>();

  /// Creates a full snapshot of the current isolate heap.
  ///
  /// A full snapshot is a compact representation of the dart vm isolate heap
  /// and dart isolate heap states. These snapshots are used to initialize
  /// the vm isolate on startup and fast initialization of an isolate.
  /// A Snapshot of the heap is created before any dart code has executed.
  ///
  /// Requires there to be a current isolate. Not available in the precompiled
  /// runtime (check Dart_IsPrecompiledRuntime).
  ///
  /// \param buffer Returns a pointer to a buffer containing the
  /// snapshot. This buffer is scope allocated and is only valid
  /// until the next call to Dart_ExitScope.
  /// \param size Returns the size of the buffer.
  /// \param is_core Create a snapshot containing core libraries.
  /// Such snapshot should be agnostic to null safety mode.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateSnapshot(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    bool is_core,
  ) {
    return _Dart_CreateSnapshot(
      vm_snapshot_data_buffer,
      vm_snapshot_data_size,
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      is_core ? 1 : 0,
    );
  }

  late final _Dart_CreateSnapshotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Uint8)>>('Dart_CreateSnapshot');
  late final _Dart_CreateSnapshot = _Dart_CreateSnapshotPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>,
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>,
          int)>();

  /// Returns whether the buffer contains a kernel file.
  ///
  /// \param buffer Pointer to a buffer that might contain a kernel binary.
  /// \param buffer_size Size of the buffer.
  ///
  /// \return Whether the buffer contains a kernel binary (full or partial).
  bool Dart_IsKernel(
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_size,
  ) {
    return _Dart_IsKernel(
          buffer,
          buffer_size,
        ) !=
        0;
  }

  late final _Dart_IsKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('Dart_IsKernel');
  late final _Dart_IsKernel =
      _Dart_IsKernelPtr.asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Make isolate runnable.
  ///
  /// When isolates are spawned, this function is used to indicate that
  /// the creation and initialization (including script loading) of the
  /// isolate is complete and the isolate can start.
  /// This function expects there to be no current isolate.
  ///
  /// \param isolate The isolate to be made runnable.
  ///
  /// \return NULL if successful. Returns an error message otherwise. The caller
  /// is responsible for freeing the error message.
  ffi.Pointer<pkg_ffi.Char> Dart_IsolateMakeRunnable(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsolateMakeRunnable(
      isolate,
    );
  }

  late final _Dart_IsolateMakeRunnablePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(Dart_Isolate)>>(
      'Dart_IsolateMakeRunnable');
  late final _Dart_IsolateMakeRunnable = _Dart_IsolateMakeRunnablePtr
      .asFunction<ffi.Pointer<pkg_ffi.Char> Function(Dart_Isolate)>();

  /// Allows embedders to provide an alternative wakeup mechanism for the
  /// delivery of inter-isolate messages. This setting only applies to
  /// the current isolate.
  ///
  /// Most embedders will only call this function once, before isolate
  /// execution begins. If this function is called after isolate
  /// execution begins, the embedder is responsible for threading issues.
  void Dart_SetMessageNotifyCallback(
    Dart_MessageNotifyCallback message_notify_callback,
  ) {
    return _Dart_SetMessageNotifyCallback(
      message_notify_callback,
    );
  }

  late final _Dart_SetMessageNotifyCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(Dart_MessageNotifyCallback)>>(
      'Dart_SetMessageNotifyCallback');
  late final _Dart_SetMessageNotifyCallback = _Dart_SetMessageNotifyCallbackPtr
      .asFunction<void Function(Dart_MessageNotifyCallback)>();

  /// Query the current message notify callback for the isolate.
  ///
  /// \return The current message notify callback for the isolate.
  Dart_MessageNotifyCallback Dart_GetMessageNotifyCallback() {
    return _Dart_GetMessageNotifyCallback();
  }

  late final _Dart_GetMessageNotifyCallbackPtr =
      _lookup<ffi.NativeFunction<Dart_MessageNotifyCallback Function()>>(
          'Dart_GetMessageNotifyCallback');
  late final _Dart_GetMessageNotifyCallback = _Dart_GetMessageNotifyCallbackPtr
      .asFunction<Dart_MessageNotifyCallback Function()>();

  /// If the VM flag `--pause-isolates-on-start` was passed this will be true.
  ///
  /// \return A boolean value indicating if pause on start was requested.
  bool Dart_ShouldPauseOnStart() {
    return _Dart_ShouldPauseOnStart() != 0;
  }

  late final _Dart_ShouldPauseOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'Dart_ShouldPauseOnStart');
  late final _Dart_ShouldPauseOnStart =
      _Dart_ShouldPauseOnStartPtr.asFunction<int Function()>();

  /// Override the VM flag `--pause-isolates-on-start` for the current isolate.
  ///
  /// \param should_pause Should the isolate be paused on start?
  ///
  /// NOTE: This must be called before Dart_IsolateMakeRunnable.
  void Dart_SetShouldPauseOnStart(
    bool should_pause,
  ) {
    return _Dart_SetShouldPauseOnStart(
      should_pause ? 1 : 0,
    );
  }

  late final _Dart_SetShouldPauseOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'Dart_SetShouldPauseOnStart');
  late final _Dart_SetShouldPauseOnStart =
      _Dart_SetShouldPauseOnStartPtr.asFunction<void Function(int)>();

  /// Is the current isolate paused on start?
  ///
  /// \return A boolean value indicating if the isolate is paused on start.
  bool Dart_IsPausedOnStart() {
    return _Dart_IsPausedOnStart() != 0;
  }

  late final _Dart_IsPausedOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Dart_IsPausedOnStart');
  late final _Dart_IsPausedOnStart =
      _Dart_IsPausedOnStartPtr.asFunction<int Function()>();

  /// Called when the embedder has paused the current isolate on start and when
  /// the embedder has resumed the isolate.
  ///
  /// \param paused Is the isolate paused on start?
  void Dart_SetPausedOnStart(
    bool paused,
  ) {
    return _Dart_SetPausedOnStart(
      paused ? 1 : 0,
    );
  }

  late final _Dart_SetPausedOnStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'Dart_SetPausedOnStart');
  late final _Dart_SetPausedOnStart =
      _Dart_SetPausedOnStartPtr.asFunction<void Function(int)>();

  /// If the VM flag `--pause-isolates-on-exit` was passed this will be true.
  ///
  /// \return A boolean value indicating if pause on exit was requested.
  bool Dart_ShouldPauseOnExit() {
    return _Dart_ShouldPauseOnExit() != 0;
  }

  late final _Dart_ShouldPauseOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'Dart_ShouldPauseOnExit');
  late final _Dart_ShouldPauseOnExit =
      _Dart_ShouldPauseOnExitPtr.asFunction<int Function()>();

  /// Override the VM flag `--pause-isolates-on-exit` for the current isolate.
  ///
  /// \param should_pause Should the isolate be paused on exit?
  void Dart_SetShouldPauseOnExit(
    bool should_pause,
  ) {
    return _Dart_SetShouldPauseOnExit(
      should_pause ? 1 : 0,
    );
  }

  late final _Dart_SetShouldPauseOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'Dart_SetShouldPauseOnExit');
  late final _Dart_SetShouldPauseOnExit =
      _Dart_SetShouldPauseOnExitPtr.asFunction<void Function(int)>();

  /// Is the current isolate paused on exit?
  ///
  /// \return A boolean value indicating if the isolate is paused on exit.
  bool Dart_IsPausedOnExit() {
    return _Dart_IsPausedOnExit() != 0;
  }

  late final _Dart_IsPausedOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Dart_IsPausedOnExit');
  late final _Dart_IsPausedOnExit =
      _Dart_IsPausedOnExitPtr.asFunction<int Function()>();

  /// Called when the embedder has paused the current isolate on exit and when
  /// the embedder has resumed the isolate.
  ///
  /// \param paused Is the isolate paused on exit?
  void Dart_SetPausedOnExit(
    bool paused,
  ) {
    return _Dart_SetPausedOnExit(
      paused ? 1 : 0,
    );
  }

  late final _Dart_SetPausedOnExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Uint8)>>(
          'Dart_SetPausedOnExit');
  late final _Dart_SetPausedOnExit =
      _Dart_SetPausedOnExitPtr.asFunction<void Function(int)>();

  /// Called when the embedder has caught a top level unhandled exception error
  /// in the current isolate.
  ///
  /// NOTE: It is illegal to call this twice on the same isolate without first
  /// clearing the sticky error to null.
  ///
  /// \param error The unhandled exception error.
  void Dart_SetStickyError(
    Object error,
  ) {
    return _Dart_SetStickyError(
      error,
    );
  }

  late final _Dart_SetStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>(
          'Dart_SetStickyError');
  late final _Dart_SetStickyError =
      _Dart_SetStickyErrorPtr.asFunction<void Function(Object)>();

  /// Does the current isolate have a sticky error?
  bool Dart_HasStickyError() {
    return _Dart_HasStickyError() != 0;
  }

  late final _Dart_HasStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Dart_HasStickyError');
  late final _Dart_HasStickyError =
      _Dart_HasStickyErrorPtr.asFunction<int Function()>();

  /// Gets the sticky error for the current isolate.
  ///
  /// \return A handle to the sticky error object or null.
  Object Dart_GetStickyError() {
    return _Dart_GetStickyError();
  }

  late final _Dart_GetStickyErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_GetStickyError');
  late final _Dart_GetStickyError =
      _Dart_GetStickyErrorPtr.asFunction<Object Function()>();

  /// Handles the next pending message for the current isolate.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_HandleMessage() {
    return _Dart_HandleMessage();
  }

  late final _Dart_HandleMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_HandleMessage');
  late final _Dart_HandleMessage =
      _Dart_HandleMessagePtr.asFunction<Object Function()>();

  /// Drains the microtask queue, then blocks the calling thread until the current
  /// isolate recieves a message, then handles all messages.
  ///
  /// \param timeout_millis When non-zero, the call returns after the indicated
  /// number of milliseconds even if no message was received.
  /// \return A valid handle if no error occurs, otherwise an error handle.
  Object Dart_WaitForEvent(
    int timeout_millis,
  ) {
    return _Dart_WaitForEvent(
      timeout_millis,
    );
  }

  late final _Dart_WaitForEventPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>(
          'Dart_WaitForEvent');
  late final _Dart_WaitForEvent =
      _Dart_WaitForEventPtr.asFunction<Object Function(int)>();

  /// Handles any pending messages for the vm service for the current
  /// isolate.
  ///
  /// This function may be used by an embedder at a breakpoint to avoid
  /// pausing the vm service.
  ///
  /// This function can indirectly cause the message notify callback to
  /// be called.
  ///
  /// \return true if the vm service requests the program resume
  /// execution, false otherwise
  bool Dart_HandleServiceMessages() {
    return _Dart_HandleServiceMessages() != 0;
  }

  late final _Dart_HandleServiceMessagesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'Dart_HandleServiceMessages');
  late final _Dart_HandleServiceMessages =
      _Dart_HandleServiceMessagesPtr.asFunction<int Function()>();

  /// Does the current isolate have pending service messages?
  ///
  /// \return true if the isolate has pending service messages, false otherwise.
  bool Dart_HasServiceMessages() {
    return _Dart_HasServiceMessages() != 0;
  }

  late final _Dart_HasServiceMessagesPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'Dart_HasServiceMessages');
  late final _Dart_HasServiceMessages =
      _Dart_HasServiceMessagesPtr.asFunction<int Function()>();

  /// Processes any incoming messages for the current isolate.
  ///
  /// This function may only be used when the embedder has not provided
  /// an alternate message delivery mechanism with
  /// Dart_SetMessageCallbacks. It is provided for convenience.
  ///
  /// This function waits for incoming messages for the current
  /// isolate. As new messages arrive, they are handled using
  /// Dart_HandleMessage. The routine exits when all ports to the
  /// current isolate are closed.
  ///
  /// \return A valid handle if the run loop exited successfully.  If an
  /// exception or other error occurs while processing messages, an
  /// error handle is returned.
  Object Dart_RunLoop() {
    return _Dart_RunLoop();
  }

  late final _Dart_RunLoopPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_RunLoop');
  late final _Dart_RunLoop = _Dart_RunLoopPtr.asFunction<Object Function()>();

  /// Lets the VM run message processing for the isolate.
  ///
  /// This function expects there to a current isolate and the current isolate
  /// must not have an active api scope. The VM will take care of making the
  /// isolate runnable (if not already), handles its message loop and will take
  /// care of shutting the isolate down once it's done.
  ///
  /// \param errors_are_fatal Whether uncaught errors should be fatal.
  /// \param on_error_port A port to notify on uncaught errors (or ILLEGAL_PORT).
  /// \param on_exit_port A port to notify on exit (or ILLEGAL_PORT).
  /// \param error A non-NULL pointer which will hold an error message if the call
  /// fails. The error has to be free()ed by the caller.
  ///
  /// \return If successfull the VM takes owernship of the isolate and takes care
  /// of its message loop. If not successful the caller retains owernship of the
  /// isolate.
  bool Dart_RunLoopAsync(
    bool errors_are_fatal,
    int on_error_port,
    int on_exit_port,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> error,
  ) {
    return _Dart_RunLoopAsync(
          errors_are_fatal ? 1 : 0,
          on_error_port,
          on_exit_port,
          error,
        ) !=
        0;
  }

  late final _Dart_RunLoopAsyncPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Uint8, Dart_Port, Dart_Port,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('Dart_RunLoopAsync');
  late final _Dart_RunLoopAsync = _Dart_RunLoopAsyncPtr.asFunction<
      int Function(int, int, int, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Gets the main port id for the current isolate.
  int Dart_GetMainPortId() {
    return _Dart_GetMainPortId();
  }

  late final _Dart_GetMainPortIdPtr =
      _lookup<ffi.NativeFunction<Dart_Port Function()>>('Dart_GetMainPortId');
  late final _Dart_GetMainPortId =
      _Dart_GetMainPortIdPtr.asFunction<int Function()>();

  /// Does the current isolate have live ReceivePorts?
  ///
  /// A ReceivePort is live when it has not been closed.
  bool Dart_HasLivePorts() {
    return _Dart_HasLivePorts() != 0;
  }

  late final _Dart_HasLivePortsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>('Dart_HasLivePorts');
  late final _Dart_HasLivePorts =
      _Dart_HasLivePortsPtr.asFunction<int Function()>();

  /// Posts a message for some isolate. The message is a serialized
  /// object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param port The destination port.
  /// \param object An object from the current isolate.
  ///
  /// \return True if the message was posted.
  bool Dart_Post(
    int port_id,
    Object object,
  ) {
    return _Dart_Post(
          port_id,
          object,
        ) !=
        0;
  }

  late final _Dart_PostPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Dart_Port, ffi.Handle)>>(
          'Dart_Post');
  late final _Dart_Post = _Dart_PostPtr.asFunction<int Function(int, Object)>();

  /// Returns a new SendPort with the provided port id.
  ///
  /// \param port_id The destination port.
  ///
  /// \return A new SendPort if no errors occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewSendPort(
    int port_id,
  ) {
    return _Dart_NewSendPort(
      port_id,
    );
  }

  late final _Dart_NewSendPortPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(Dart_Port)>>(
          'Dart_NewSendPort');
  late final _Dart_NewSendPort =
      _Dart_NewSendPortPtr.asFunction<Object Function(int)>();

  /// Gets the SendPort id for the provided SendPort.
  /// \param port A SendPort object whose id is desired.
  /// \param port_id Returns the id of the SendPort.
  /// \return Success if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_SendPortGetId(
    Object port,
    ffi.Pointer<Dart_Port> port_id,
  ) {
    return _Dart_SendPortGetId(
      port,
      port_id,
    );
  }

  late final _Dart_SendPortGetIdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<Dart_Port>)>>('Dart_SendPortGetId');
  late final _Dart_SendPortGetId = _Dart_SendPortGetIdPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_Port>)>();

  /// Enters a new scope.
  ///
  /// All new local handles will be created in this scope. Additionally,
  /// some functions may return "scope allocated" memory which is only
  /// valid within this scope.
  ///
  /// Requires there to be a current isolate.
  void Dart_EnterScope() {
    return _Dart_EnterScope();
  }

  late final _Dart_EnterScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_EnterScope');
  late final _Dart_EnterScope =
      _Dart_EnterScopePtr.asFunction<void Function()>();

  /// Exits a scope.
  ///
  /// The previous scope (if any) becomes the current scope.
  ///
  /// Requires there to be a current isolate.
  void Dart_ExitScope() {
    return _Dart_ExitScope();
  }

  late final _Dart_ExitScopePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_ExitScope');
  late final _Dart_ExitScope = _Dart_ExitScopePtr.asFunction<void Function()>();

  /// The Dart VM uses "zone allocation" for temporary structures. Zones
  /// support very fast allocation of small chunks of memory. The chunks
  /// cannot be deallocated individually, but instead zones support
  /// deallocating all chunks in one fast operation.
  ///
  /// This function makes it possible for the embedder to allocate
  /// temporary data in the VMs zone allocator.
  ///
  /// Zone allocation is possible:
  /// 1. when inside a scope where local handles can be allocated
  /// 2. when processing a message from a native port in a native port
  /// handler
  ///
  /// All the memory allocated this way will be reclaimed either on the
  /// next call to Dart_ExitScope or when the native port handler exits.
  ///
  /// \param size Size of the memory to allocate.
  ///
  /// \return A pointer to the allocated memory. NULL if allocation
  /// failed. Failure might due to is no current VM zone.
  ffi.Pointer<ffi.Uint8> Dart_ScopeAllocate(
    int size,
  ) {
    return _Dart_ScopeAllocate(
      size,
    );
  }

  late final _Dart_ScopeAllocatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.IntPtr)>>(
          'Dart_ScopeAllocate');
  late final _Dart_ScopeAllocate =
      _Dart_ScopeAllocatePtr.asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  /// Returns the null object.
  ///
  /// \return A handle to the null object.
  Object Dart_Null() {
    return _Dart_Null();
  }

  late final _Dart_NullPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_Null');
  late final _Dart_Null = _Dart_NullPtr.asFunction<Object Function()>();

  /// Is this object null?
  bool Dart_IsNull(
    Object object,
  ) {
    return _Dart_IsNull(
          object,
        ) !=
        0;
  }

  late final _Dart_IsNullPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsNull');
  late final _Dart_IsNull = _Dart_IsNullPtr.asFunction<int Function(Object)>();

  /// Returns the empty string object.
  ///
  /// \return A handle to the empty string object.
  Object Dart_EmptyString() {
    return _Dart_EmptyString();
  }

  late final _Dart_EmptyStringPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_EmptyString');
  late final _Dart_EmptyString =
      _Dart_EmptyStringPtr.asFunction<Object Function()>();

  /// Returns types that are not classes, and which therefore cannot be looked up
  /// as library members by Dart_GetType.
  ///
  /// \return A handle to the dynamic, void or Never type.
  Object Dart_TypeDynamic() {
    return _Dart_TypeDynamic();
  }

  late final _Dart_TypeDynamicPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeDynamic');
  late final _Dart_TypeDynamic =
      _Dart_TypeDynamicPtr.asFunction<Object Function()>();

  Object Dart_TypeVoid() {
    return _Dart_TypeVoid();
  }

  late final _Dart_TypeVoidPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeVoid');
  late final _Dart_TypeVoid = _Dart_TypeVoidPtr.asFunction<Object Function()>();

  Object Dart_TypeNever() {
    return _Dart_TypeNever();
  }

  late final _Dart_TypeNeverPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_TypeNever');
  late final _Dart_TypeNever =
      _Dart_TypeNeverPtr.asFunction<Object Function()>();

  /// Checks if the two objects are equal.
  ///
  /// The result of the comparison is returned through the 'equal'
  /// parameter. The return value itself is used to indicate success or
  /// failure, not equality.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param obj1 An object to be compared.
  /// \param obj2 An object to be compared.
  /// \param equal Returns the result of the equality comparison.
  ///
  /// \return A valid handle if no error occurs during the comparison.
  Object Dart_ObjectEquals(
    Object obj1,
    Object obj2,
    ffi.Pointer<ffi.Uint8> equal,
  ) {
    return _Dart_ObjectEquals(
      obj1,
      obj2,
      equal,
    );
  }

  late final _Dart_ObjectEqualsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Pointer<ffi.Uint8>)>>('Dart_ObjectEquals');
  late final _Dart_ObjectEquals = _Dart_ObjectEqualsPtr.asFunction<
      Object Function(Object, Object, ffi.Pointer<ffi.Uint8>)>();

  /// Is this object an instance of some type?
  ///
  /// The result of the test is returned through the 'instanceof' parameter.
  /// The return value itself is used to indicate success or failure.
  ///
  /// \param object An object.
  /// \param type A type.
  /// \param instanceof Return true if 'object' is an instance of type 'type'.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ObjectIsType(
    Object object,
    Object type,
    ffi.Pointer<ffi.Uint8> instanceof,
  ) {
    return _Dart_ObjectIsType(
      object,
      type,
      instanceof,
    );
  }

  late final _Dart_ObjectIsTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Pointer<ffi.Uint8>)>>('Dart_ObjectIsType');
  late final _Dart_ObjectIsType = _Dart_ObjectIsTypePtr.asFunction<
      Object Function(Object, Object, ffi.Pointer<ffi.Uint8>)>();

  /// Query object type.
  ///
  /// \param object Some Object.
  ///
  /// \return true if Object is of the specified type.
  bool Dart_IsInstance(
    Object object,
  ) {
    return _Dart_IsInstance(
          object,
        ) !=
        0;
  }

  late final _Dart_IsInstancePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsInstance');
  late final _Dart_IsInstance =
      _Dart_IsInstancePtr.asFunction<int Function(Object)>();

  bool Dart_IsNumber(
    Object object,
  ) {
    return _Dart_IsNumber(
          object,
        ) !=
        0;
  }

  late final _Dart_IsNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsNumber');
  late final _Dart_IsNumber =
      _Dart_IsNumberPtr.asFunction<int Function(Object)>();

  bool Dart_IsInteger(
    Object object,
  ) {
    return _Dart_IsInteger(
          object,
        ) !=
        0;
  }

  late final _Dart_IsIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsInteger');
  late final _Dart_IsInteger =
      _Dart_IsIntegerPtr.asFunction<int Function(Object)>();

  bool Dart_IsDouble(
    Object object,
  ) {
    return _Dart_IsDouble(
          object,
        ) !=
        0;
  }

  late final _Dart_IsDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsDouble');
  late final _Dart_IsDouble =
      _Dart_IsDoublePtr.asFunction<int Function(Object)>();

  bool Dart_IsBoolean(
    Object object,
  ) {
    return _Dart_IsBoolean(
          object,
        ) !=
        0;
  }

  late final _Dart_IsBooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsBoolean');
  late final _Dart_IsBoolean =
      _Dart_IsBooleanPtr.asFunction<int Function(Object)>();

  bool Dart_IsString(
    Object object,
  ) {
    return _Dart_IsString(
          object,
        ) !=
        0;
  }

  late final _Dart_IsStringPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsString');
  late final _Dart_IsString =
      _Dart_IsStringPtr.asFunction<int Function(Object)>();

  bool Dart_IsStringLatin1(
    Object object,
  ) {
    return _Dart_IsStringLatin1(
          object,
        ) !=
        0;
  }

  late final _Dart_IsStringLatin1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsStringLatin1');
  late final _Dart_IsStringLatin1 =
      _Dart_IsStringLatin1Ptr.asFunction<int Function(Object)>();

  bool Dart_IsExternalString(
    Object object,
  ) {
    return _Dart_IsExternalString(
          object,
        ) !=
        0;
  }

  late final _Dart_IsExternalStringPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsExternalString');
  late final _Dart_IsExternalString =
      _Dart_IsExternalStringPtr.asFunction<int Function(Object)>();

  bool Dart_IsList(
    Object object,
  ) {
    return _Dart_IsList(
          object,
        ) !=
        0;
  }

  late final _Dart_IsListPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsList');
  late final _Dart_IsList = _Dart_IsListPtr.asFunction<int Function(Object)>();

  bool Dart_IsMap(
    Object object,
  ) {
    return _Dart_IsMap(
          object,
        ) !=
        0;
  }

  late final _Dart_IsMapPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>('Dart_IsMap');
  late final _Dart_IsMap = _Dart_IsMapPtr.asFunction<int Function(Object)>();

  bool Dart_IsLibrary(
    Object object,
  ) {
    return _Dart_IsLibrary(
          object,
        ) !=
        0;
  }

  late final _Dart_IsLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsLibrary');
  late final _Dart_IsLibrary =
      _Dart_IsLibraryPtr.asFunction<int Function(Object)>();

  bool Dart_IsType(
    Object handle,
  ) {
    return _Dart_IsType(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsTypePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsType');
  late final _Dart_IsType = _Dart_IsTypePtr.asFunction<int Function(Object)>();

  bool Dart_IsFunction(
    Object handle,
  ) {
    return _Dart_IsFunction(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsFunction');
  late final _Dart_IsFunction =
      _Dart_IsFunctionPtr.asFunction<int Function(Object)>();

  bool Dart_IsVariable(
    Object handle,
  ) {
    return _Dart_IsVariable(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsVariable');
  late final _Dart_IsVariable =
      _Dart_IsVariablePtr.asFunction<int Function(Object)>();

  bool Dart_IsTypeVariable(
    Object handle,
  ) {
    return _Dart_IsTypeVariable(
          handle,
        ) !=
        0;
  }

  late final _Dart_IsTypeVariablePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsTypeVariable');
  late final _Dart_IsTypeVariable =
      _Dart_IsTypeVariablePtr.asFunction<int Function(Object)>();

  bool Dart_IsClosure(
    Object object,
  ) {
    return _Dart_IsClosure(
          object,
        ) !=
        0;
  }

  late final _Dart_IsClosurePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsClosure');
  late final _Dart_IsClosure =
      _Dart_IsClosurePtr.asFunction<int Function(Object)>();

  bool Dart_IsTypedData(
    Object object,
  ) {
    return _Dart_IsTypedData(
          object,
        ) !=
        0;
  }

  late final _Dart_IsTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsTypedData');
  late final _Dart_IsTypedData =
      _Dart_IsTypedDataPtr.asFunction<int Function(Object)>();

  bool Dart_IsByteBuffer(
    Object object,
  ) {
    return _Dart_IsByteBuffer(
          object,
        ) !=
        0;
  }

  late final _Dart_IsByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsByteBuffer');
  late final _Dart_IsByteBuffer =
      _Dart_IsByteBufferPtr.asFunction<int Function(Object)>();

  bool Dart_IsFuture(
    Object object,
  ) {
    return _Dart_IsFuture(
          object,
        ) !=
        0;
  }

  late final _Dart_IsFuturePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsFuture');
  late final _Dart_IsFuture =
      _Dart_IsFuturePtr.asFunction<int Function(Object)>();

  /// Gets the type of a Dart language object.
  ///
  /// \param instance Some Dart object.
  ///
  /// \return If no error occurs, the type is returned. Otherwise an
  /// error handle is returned.
  Object Dart_InstanceGetType(
    Object instance,
  ) {
    return _Dart_InstanceGetType(
      instance,
    );
  }

  late final _Dart_InstanceGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_InstanceGetType');
  late final _Dart_InstanceGetType =
      _Dart_InstanceGetTypePtr.asFunction<Object Function(Object)>();

  /// Returns the name for the provided class type.
  ///
  /// \return A valid string handle if no error occurs during the
  /// operation.
  Object Dart_ClassName(
    Object cls_type,
  ) {
    return _Dart_ClassName(
      cls_type,
    );
  }

  late final _Dart_ClassNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClassName');
  late final _Dart_ClassName =
      _Dart_ClassNamePtr.asFunction<Object Function(Object)>();

  /// Returns the name for the provided function or method.
  ///
  /// \return A valid string handle if no error occurs during the
  /// operation.
  Object Dart_FunctionName(
    Object function,
  ) {
    return _Dart_FunctionName(
      function,
    );
  }

  late final _Dart_FunctionNamePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_FunctionName');
  late final _Dart_FunctionName =
      _Dart_FunctionNamePtr.asFunction<Object Function(Object)>();

  /// Returns a handle to the owner of a function.
  ///
  /// The owner of an instance method or a static method is its defining
  /// class. The owner of a top-level function is its defining
  /// library. The owner of the function of a non-implicit closure is the
  /// function of the method or closure that defines the non-implicit
  /// closure.
  ///
  /// \return A valid handle to the owner of the function, or an error
  /// handle if the argument is not a valid handle to a function.
  Object Dart_FunctionOwner(
    Object function,
  ) {
    return _Dart_FunctionOwner(
      function,
    );
  }

  late final _Dart_FunctionOwnerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_FunctionOwner');
  late final _Dart_FunctionOwner =
      _Dart_FunctionOwnerPtr.asFunction<Object Function(Object)>();

  /// Determines whether a function handle referes to a static function
  /// of method.
  ///
  /// For the purposes of the embedding API, a top-level function is
  /// implicitly declared static.
  ///
  /// \param function A handle to a function or method declaration.
  /// \param is_static Returns whether the function or method is declared static.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_FunctionIsStatic(
    Object function,
    ffi.Pointer<ffi.Uint8> is_static,
  ) {
    return _Dart_FunctionIsStatic(
      function,
      is_static,
    );
  }

  late final _Dart_FunctionIsStaticPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint8>)>>('Dart_FunctionIsStatic');
  late final _Dart_FunctionIsStatic = _Dart_FunctionIsStaticPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint8>)>();

  /// Is this object a closure resulting from a tear-off (closurized method)?
  ///
  /// Returns true for closures produced when an ordinary method is accessed
  /// through a getter call. Returns false otherwise, in particular for closures
  /// produced from local function declarations.
  ///
  /// \param object Some Object.
  ///
  /// \return true if Object is a tear-off.
  bool Dart_IsTearOff(
    Object object,
  ) {
    return _Dart_IsTearOff(
          object,
        ) !=
        0;
  }

  late final _Dart_IsTearOffPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>(
          'Dart_IsTearOff');
  late final _Dart_IsTearOff =
      _Dart_IsTearOffPtr.asFunction<int Function(Object)>();

  /// Retrieves the function of a closure.
  ///
  /// \return A handle to the function of the closure, or an error handle if the
  /// argument is not a closure.
  Object Dart_ClosureFunction(
    Object closure,
  ) {
    return _Dart_ClosureFunction(
      closure,
    );
  }

  late final _Dart_ClosureFunctionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClosureFunction');
  late final _Dart_ClosureFunction =
      _Dart_ClosureFunctionPtr.asFunction<Object Function(Object)>();

  /// Returns a handle to the library which contains class.
  ///
  /// \return A valid handle to the library with owns class, null if the class
  /// has no library or an error handle if the argument is not a valid handle
  /// to a class type.
  Object Dart_ClassLibrary(
    Object cls_type,
  ) {
    return _Dart_ClassLibrary(
      cls_type,
    );
  }

  late final _Dart_ClassLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ClassLibrary');
  late final _Dart_ClassLibrary =
      _Dart_ClassLibraryPtr.asFunction<Object Function(Object)>();

  /// Does this Integer fit into a 64-bit signed integer?
  ///
  /// \param integer An integer.
  /// \param fits Returns true if the integer fits into a 64-bit signed integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerFitsIntoInt64(
    Object integer,
    ffi.Pointer<ffi.Uint8> fits,
  ) {
    return _Dart_IntegerFitsIntoInt64(
      integer,
      fits,
    );
  }

  late final _Dart_IntegerFitsIntoInt64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Uint8>)>>('Dart_IntegerFitsIntoInt64');
  late final _Dart_IntegerFitsIntoInt64 = _Dart_IntegerFitsIntoInt64Ptr
      .asFunction<Object Function(Object, ffi.Pointer<ffi.Uint8>)>();

  /// Does this Integer fit into a 64-bit unsigned integer?
  ///
  /// \param integer An integer.
  /// \param fits Returns true if the integer fits into a 64-bit unsigned integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerFitsIntoUint64(
    Object integer,
    ffi.Pointer<ffi.Uint8> fits,
  ) {
    return _Dart_IntegerFitsIntoUint64(
      integer,
      fits,
    );
  }

  late final _Dart_IntegerFitsIntoUint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Uint8>)>>('Dart_IntegerFitsIntoUint64');
  late final _Dart_IntegerFitsIntoUint64 = _Dart_IntegerFitsIntoUint64Ptr
      .asFunction<Object Function(Object, ffi.Pointer<ffi.Uint8>)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The value of the integer.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewInteger(
    int value,
  ) {
    return _Dart_NewInteger(
      value,
    );
  }

  late final _Dart_NewIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int64)>>(
          'Dart_NewInteger');
  late final _Dart_NewInteger =
      _Dart_NewIntegerPtr.asFunction<Object Function(int)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The unsigned value of the integer.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewIntegerFromUint64(
    int value,
  ) {
    return _Dart_NewIntegerFromUint64(
      value,
    );
  }

  late final _Dart_NewIntegerFromUint64Ptr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Uint64)>>(
          'Dart_NewIntegerFromUint64');
  late final _Dart_NewIntegerFromUint64 =
      _Dart_NewIntegerFromUint64Ptr.asFunction<Object Function(int)>();

  /// Returns an Integer with the provided value.
  ///
  /// \param value The value of the integer represented as a C string
  /// containing a hexadecimal number.
  ///
  /// \return The Integer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewIntegerFromHexCString(
    ffi.Pointer<pkg_ffi.Char> value,
  ) {
    return _Dart_NewIntegerFromHexCString(
      value,
    );
  }

  late final _Dart_NewIntegerFromHexCStringPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'Dart_NewIntegerFromHexCString');
  late final _Dart_NewIntegerFromHexCString = _Dart_NewIntegerFromHexCStringPtr
      .asFunction<Object Function(ffi.Pointer<pkg_ffi.Char>)>();

  /// Gets the value of an Integer.
  ///
  /// The integer must fit into a 64-bit signed integer, otherwise an error occurs.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToInt64(
    Object integer,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _Dart_IntegerToInt64(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToInt64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Int64>)>>('Dart_IntegerToInt64');
  late final _Dart_IntegerToInt64 = _Dart_IntegerToInt64Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Int64>)>();

  /// Gets the value of an Integer.
  ///
  /// The integer must fit into a 64-bit unsigned integer, otherwise an
  /// error occurs.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToUint64(
    Object integer,
    ffi.Pointer<ffi.Uint64> value,
  ) {
    return _Dart_IntegerToUint64(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToUint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint64>)>>('Dart_IntegerToUint64');
  late final _Dart_IntegerToUint64 = _Dart_IntegerToUint64Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint64>)>();

  /// Gets the value of an integer as a hexadecimal C string.
  ///
  /// \param integer An Integer.
  /// \param value Returns the value of the Integer as a hexadecimal C
  /// string. This C string is scope allocated and is only valid until
  /// the next call to Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_IntegerToHexCString(
    Object integer,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> value,
  ) {
    return _Dart_IntegerToHexCString(
      integer,
      value,
    );
  }

  late final _Dart_IntegerToHexCStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>(
      'Dart_IntegerToHexCString');
  late final _Dart_IntegerToHexCString =
      _Dart_IntegerToHexCStringPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Returns a Double with the provided value.
  ///
  /// \param value A double.
  ///
  /// \return The Double object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewDouble(
    double value,
  ) {
    return _Dart_NewDouble(
      value,
    );
  }

  late final _Dart_NewDoublePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Double)>>(
          'Dart_NewDouble');
  late final _Dart_NewDouble =
      _Dart_NewDoublePtr.asFunction<Object Function(double)>();

  /// Gets the value of a Double
  ///
  /// \param double_obj A Double
  /// \param value Returns the value of the Double.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_DoubleValue(
    Object double_obj,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _Dart_DoubleValue(
      double_obj,
      value,
    );
  }

  late final _Dart_DoubleValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Double>)>>('Dart_DoubleValue');
  late final _Dart_DoubleValue = _Dart_DoubleValuePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Double>)>();

  /// Returns a closure of static function 'function_name' in the class 'class_name'
  /// in the exported namespace of specified 'library'.
  ///
  /// \param library Library object
  /// \param cls_type Type object representing a Class
  /// \param function_name Name of the static function in the class
  ///
  /// \return A valid Dart instance if no error occurs during the operation.
  Object Dart_GetStaticMethodClosure(
    Object library1,
    Object cls_type,
    Object function_name,
  ) {
    return _Dart_GetStaticMethodClosure(
      library1,
      cls_type,
      function_name,
    );
  }

  late final _Dart_GetStaticMethodClosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle,
              ffi.Handle)>>('Dart_GetStaticMethodClosure');
  late final _Dart_GetStaticMethodClosure = _Dart_GetStaticMethodClosurePtr
      .asFunction<Object Function(Object, Object, Object)>();

  /// Returns the True object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A handle to the True object.
  Object Dart_True() {
    return _Dart_True();
  }

  late final _Dart_TruePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_True');
  late final _Dart_True = _Dart_TruePtr.asFunction<Object Function()>();

  /// Returns the False object.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \return A handle to the False object.
  Object Dart_False() {
    return _Dart_False();
  }

  late final _Dart_FalsePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_False');
  late final _Dart_False = _Dart_FalsePtr.asFunction<Object Function()>();

  /// Returns a Boolean with the provided value.
  ///
  /// \param value true or false.
  ///
  /// \return The Boolean object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewBoolean(
    bool value,
  ) {
    return _Dart_NewBoolean(
      value ? 1 : 0,
    );
  }

  late final _Dart_NewBooleanPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Uint8)>>(
          'Dart_NewBoolean');
  late final _Dart_NewBoolean =
      _Dart_NewBooleanPtr.asFunction<Object Function(int)>();

  /// Gets the value of a Boolean
  ///
  /// \param boolean_obj A Boolean
  /// \param value Returns the value of the Boolean.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_BooleanValue(
    Object boolean_obj,
    ffi.Pointer<ffi.Uint8> value,
  ) {
    return _Dart_BooleanValue(
      boolean_obj,
      value,
    );
  }

  late final _Dart_BooleanValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint8>)>>('Dart_BooleanValue');
  late final _Dart_BooleanValue = _Dart_BooleanValuePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint8>)>();

  /// Gets the length of a String.
  ///
  /// \param str A String.
  /// \param length Returns the length of the String.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringLength(
    Object str,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringLength(
      str,
      length,
    );
  }

  late final _Dart_StringLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_StringLength');
  late final _Dart_StringLength = _Dart_StringLengthPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Returns a String built from the provided C string
  /// (There is an implicit assumption that the C string passed in contains
  /// UTF-8 encoded characters and '\0' is considered as a termination
  /// character).
  ///
  /// \param value A C String
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromCString(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return _Dart_NewStringFromCString(
      str,
    );
  }

  late final _Dart_NewStringFromCStringPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'Dart_NewStringFromCString');
  late final _Dart_NewStringFromCString = _Dart_NewStringFromCStringPtr
      .asFunction<Object Function(ffi.Pointer<pkg_ffi.Char>)>();

  /// Returns a String built from an array of UTF-8 encoded characters.
  ///
  /// \param utf8_array An array of UTF-8 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF8(
    ffi.Pointer<ffi.Uint8> utf8_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF8(
      utf8_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>('Dart_NewStringFromUTF8');
  late final _Dart_NewStringFromUTF8 = _Dart_NewStringFromUTF8Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Returns a String built from an array of UTF-16 encoded characters.
  ///
  /// \param utf16_array An array of UTF-16 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF16(
    ffi.Pointer<ffi.Uint16> utf16_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF16(
      utf16_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint16>, ffi.IntPtr)>>('Dart_NewStringFromUTF16');
  late final _Dart_NewStringFromUTF16 = _Dart_NewStringFromUTF16Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Uint16>, int)>();

  /// Returns a String built from an array of UTF-32 encoded characters.
  ///
  /// \param utf32_array An array of UTF-32 encoded characters.
  /// \param length The length of the codepoints array.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewStringFromUTF32(
    ffi.Pointer<ffi.Int32> utf32_array,
    int length,
  ) {
    return _Dart_NewStringFromUTF32(
      utf32_array,
      length,
    );
  }

  late final _Dart_NewStringFromUTF32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Int32>, ffi.IntPtr)>>('Dart_NewStringFromUTF32');
  late final _Dart_NewStringFromUTF32 = _Dart_NewStringFromUTF32Ptr.asFunction<
      Object Function(ffi.Pointer<ffi.Int32>, int)>();

  /// Returns a String which references an external array of
  /// Latin-1 (ISO-8859-1) encoded characters.
  ///
  /// \param latin1_array Array of Latin-1 encoded characters. This must not move.
  /// \param length The length of the characters array.
  /// \param peer An external pointer to associate with this string.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A callback to be called when this string is finalized.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalLatin1String(
    ffi.Pointer<ffi.Uint8> latin1_array,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalLatin1String(
      latin1_array,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalLatin1StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalLatin1String');
  late final _Dart_NewExternalLatin1String =
      _Dart_NewExternalLatin1StringPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Void>,
              int, Dart_HandleFinalizer)>();

  /// Returns a String which references an external array of UTF-16 encoded
  /// characters.
  ///
  /// \param utf16_array An array of UTF-16 encoded characters. This must not move.
  /// \param length The length of the characters array.
  /// \param peer An external pointer to associate with this string.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A callback to be called when this string is finalized.
  ///
  /// \return The String object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalUTF16String(
    ffi.Pointer<ffi.Uint16> utf16_array,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalUTF16String(
      utf16_array,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalUTF16StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Uint16>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalUTF16String');
  late final _Dart_NewExternalUTF16String =
      _Dart_NewExternalUTF16StringPtr.asFunction<
          Object Function(ffi.Pointer<ffi.Uint16>, int, ffi.Pointer<ffi.Void>,
              int, Dart_HandleFinalizer)>();

  /// Gets the C string representation of a String.
  /// (It is a sequence of UTF-8 encoded values with a '\0' termination.)
  ///
  /// \param str A string.
  /// \param cstr Returns the String represented as a C string.
  /// This C string is scope allocated and is only valid until
  /// the next call to Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToCString(
    Object str,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> cstr,
  ) {
    return _Dart_StringToCString(
      str,
      cstr,
    );
  }

  late final _Dart_StringToCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('Dart_StringToCString');
  late final _Dart_StringToCString = _Dart_StringToCStringPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Gets a UTF-8 encoded representation of a String.
  ///
  /// Any unpaired surrogate code points in the string will be converted as
  /// replacement characters (U+FFFD, 0xEF 0xBF 0xBD in UTF-8). If you need
  /// to preserve unpaired surrogates, use the Dart_StringToUTF16 function.
  ///
  /// \param str A string.
  /// \param utf8_array Returns the String represented as UTF-8 code
  /// units.  This UTF-8 array is scope allocated and is only valid
  /// until the next call to Dart_ExitScope.
  /// \param length Used to return the length of the array which was
  /// actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToUTF8(
    Object str,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> utf8_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToUTF8(
      str,
      utf8_array,
      length,
    );
  }

  late final _Dart_StringToUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToUTF8');
  late final _Dart_StringToUTF8 = _Dart_StringToUTF8Ptr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
          ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the data corresponding to the string object. This function returns
  /// the data only for Latin-1 (ISO-8859-1) string objects. For all other
  /// string objects it returns an error.
  ///
  /// \param str A string.
  /// \param latin1_array An array allocated by the caller, used to return
  /// the string data.
  /// \param length Used to pass in the length of the provided array.
  /// Used to return the length of the array which was actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToLatin1(
    Object str,
    ffi.Pointer<ffi.Uint8> latin1_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToLatin1(
      str,
      latin1_array,
      length,
    );
  }

  late final _Dart_StringToLatin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToLatin1');
  late final _Dart_StringToLatin1 = _Dart_StringToLatin1Ptr.asFunction<
      Object Function(
          Object, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the UTF-16 encoded representation of a string.
  ///
  /// \param str A string.
  /// \param utf16_array An array allocated by the caller, used to return
  /// the array of UTF-16 encoded characters.
  /// \param length Used to pass in the length of the provided array.
  /// Used to return the length of the array which was actually used.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringToUTF16(
    Object str,
    ffi.Pointer<ffi.Uint16> utf16_array,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_StringToUTF16(
      str,
      utf16_array,
      length,
    );
  }

  late final _Dart_StringToUTF16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Pointer<ffi.Uint16>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_StringToUTF16');
  late final _Dart_StringToUTF16 = _Dart_StringToUTF16Ptr.asFunction<
      Object Function(
          Object, ffi.Pointer<ffi.Uint16>, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the storage size in bytes of a String.
  ///
  /// \param str A String.
  /// \param length Returns the storage size in bytes of the String.
  /// This is the size in bytes needed to store the String.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_StringStorageSize(
    Object str,
    ffi.Pointer<ffi.IntPtr> size,
  ) {
    return _Dart_StringStorageSize(
      str,
      size,
    );
  }

  late final _Dart_StringStorageSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_StringStorageSize');
  late final _Dart_StringStorageSize = _Dart_StringStorageSizePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Retrieves some properties associated with a String.
  /// Properties retrieved are:
  /// - character size of the string (one or two byte)
  /// - length of the string
  /// - peer pointer of string if it is an external string.
  /// \param str A String.
  /// \param char_size Returns the character size of the String.
  /// \param str_len Returns the length of the String.
  /// \param peer Returns the peer pointer associated with the String or 0 if
  /// there is no peer pointer for it.
  /// \return Success if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_StringGetProperties(
    Object str,
    ffi.Pointer<ffi.IntPtr> char_size,
    ffi.Pointer<ffi.IntPtr> str_len,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_StringGetProperties(
      str,
      char_size,
      str_len,
      peer,
    );
  }

  late final _Dart_StringGetPropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('Dart_StringGetProperties');
  late final _Dart_StringGetProperties =
      _Dart_StringGetPropertiesPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Returns a List<dynamic> of the desired length.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewList(
    int length,
  ) {
    return _Dart_NewList(
      length,
    );
  }

  late final _Dart_NewListPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>(
          'Dart_NewList');
  late final _Dart_NewList =
      _Dart_NewListPtr.asFunction<Object Function(int)>();

  /// Returns a List of the desired length with the desired legacy element type.
  ///
  /// \param element_type_id The type of elements of the list.
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns an error
  /// handle.
  Object Dart_NewListOf(
    int element_type_id,
    int length,
  ) {
    return _Dart_NewListOf(
      element_type_id,
      length,
    );
  }

  late final _Dart_NewListOfPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.IntPtr)>>(
          'Dart_NewListOf');
  late final _Dart_NewListOf =
      _Dart_NewListOfPtr.asFunction<Object Function(int, int)>();

  /// Returns a List of the desired length with the desired element type.
  ///
  /// \param element_type Handle to a nullable type object. E.g., from
  /// Dart_GetType or Dart_GetNullableType.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewListOfType(
    Object element_type,
    int length,
  ) {
    return _Dart_NewListOfType(
      element_type,
      length,
    );
  }

  late final _Dart_NewListOfTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>(
          'Dart_NewListOfType');
  late final _Dart_NewListOfType =
      _Dart_NewListOfTypePtr.asFunction<Object Function(Object, int)>();

  /// Returns a List of the desired length with the desired element type, filled
  /// with the provided object.
  ///
  /// \param element_type Handle to a type object. E.g., from Dart_GetType.
  ///
  /// \param fill_object Handle to an object of type 'element_type' that will be
  /// used to populate the list. This parameter can only be Dart_Null() if the
  /// length of the list is 0 or 'element_type' is a nullable type.
  ///
  /// \param length The length of the list.
  ///
  /// \return The List object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewListOfTypeFilled(
    Object element_type,
    Object fill_object,
    int length,
  ) {
    return _Dart_NewListOfTypeFilled(
      element_type,
      fill_object,
      length,
    );
  }

  late final _Dart_NewListOfTypeFilledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Handle, ffi.IntPtr)>>('Dart_NewListOfTypeFilled');
  late final _Dart_NewListOfTypeFilled = _Dart_NewListOfTypeFilledPtr
      .asFunction<Object Function(Object, Object, int)>();

  /// Gets the length of a List.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param length Returns the length of the List.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ListLength(
    Object list,
    ffi.Pointer<ffi.IntPtr> length,
  ) {
    return _Dart_ListLength(
      list,
      length,
    );
  }

  late final _Dart_ListLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.IntPtr>)>>('Dart_ListLength');
  late final _Dart_ListLength = _Dart_ListLengthPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the Object at some index of a List.
  ///
  /// If the index is out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param index A valid index into the List.
  ///
  /// \return The Object in the List at the specified index if no error
  /// occurs. Otherwise returns an error handle.
  Object Dart_ListGetAt(
    Object list,
    int index,
  ) {
    return _Dart_ListGetAt(
      list,
      index,
    );
  }

  late final _Dart_ListGetAtPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.IntPtr)>>(
          'Dart_ListGetAt');
  late final _Dart_ListGetAt =
      _Dart_ListGetAtPtr.asFunction<Object Function(Object, int)>();

  /// Gets a range of Objects from a List.
  ///
  /// If any of the requested index values are out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param list A List.
  /// \param offset The offset of the first item to get.
  /// \param length The number of items to get.
  /// \param result A pointer to fill with the objects.
  ///
  /// \return Success if no error occurs during the operation.
  Object Dart_ListGetRange(
    Object list,
    int offset,
    int length,
    ffi.Pointer<ffi.Handle> result,
  ) {
    return _Dart_ListGetRange(
      list,
      offset,
      length,
      result,
    );
  }

  late final _Dart_ListGetRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_ListGetRange');
  late final _Dart_ListGetRange = _Dart_ListGetRangePtr.asFunction<
      Object Function(Object, int, int, ffi.Pointer<ffi.Handle>)>();

  /// Sets the Object at some index of a List.
  ///
  /// If the index is out of bounds, an error occurs.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param array A List.
  /// \param index A valid index into the List.
  /// \param value The Object to put in the List.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_ListSetAt(
    Object list,
    int index,
    Object value,
  ) {
    return _Dart_ListSetAt(
      list,
      index,
      value,
    );
  }

  late final _Dart_ListSetAtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.IntPtr, ffi.Handle)>>('Dart_ListSetAt');
  late final _Dart_ListSetAt =
      _Dart_ListSetAtPtr.asFunction<Object Function(Object, int, Object)>();

  /// May generate an unhandled exception error.
  Object Dart_ListGetAsBytes(
    Object list,
    int offset,
    ffi.Pointer<ffi.Uint8> native_array,
    int length,
  ) {
    return _Dart_ListGetAsBytes(
      list,
      offset,
      native_array,
      length,
    );
  }

  late final _Dart_ListGetAsBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_ListGetAsBytes');
  late final _Dart_ListGetAsBytes = _Dart_ListGetAsBytesPtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// May generate an unhandled exception error.
  Object Dart_ListSetAsBytes(
    Object list,
    int offset,
    ffi.Pointer<ffi.Uint8> native_array,
    int length,
  ) {
    return _Dart_ListSetAsBytes(
      list,
      offset,
      native_array,
      length,
    );
  }

  late final _Dart_ListSetAsBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_ListSetAsBytes');
  late final _Dart_ListSetAsBytes = _Dart_ListSetAsBytesPtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Gets the Object at some key of a Map.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  /// \param key An Object.
  ///
  /// \return The value in the map at the specified key, null if the map does not
  /// contain the key, or an error handle.
  Object Dart_MapGetAt(
    Object map,
    Object key,
  ) {
    return _Dart_MapGetAt(
      map,
      key,
    );
  }

  late final _Dart_MapGetAtPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_MapGetAt');
  late final _Dart_MapGetAt =
      _Dart_MapGetAtPtr.asFunction<Object Function(Object, Object)>();

  /// Returns whether the Map contains a given key.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  ///
  /// \return A handle on a boolean indicating whether map contains the key.
  /// Otherwise returns an error handle.
  Object Dart_MapContainsKey(
    Object map,
    Object key,
  ) {
    return _Dart_MapContainsKey(
      map,
      key,
    );
  }

  late final _Dart_MapContainsKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_MapContainsKey');
  late final _Dart_MapContainsKey =
      _Dart_MapContainsKeyPtr.asFunction<Object Function(Object, Object)>();

  /// Gets the list of keys of a Map.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param map A Map.
  ///
  /// \return The list of key Objects if no error occurs. Otherwise returns an
  /// error handle.
  Object Dart_MapKeys(
    Object map,
  ) {
    return _Dart_MapKeys(
      map,
    );
  }

  late final _Dart_MapKeysPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_MapKeys');
  late final _Dart_MapKeys =
      _Dart_MapKeysPtr.asFunction<Object Function(Object)>();

  /// Return type if this object is a TypedData object.
  ///
  /// \return kInvalid if the object is not a TypedData object or the appropriate
  /// Dart_TypedData_Type.
  int Dart_GetTypeOfTypedData(
    Object object,
  ) {
    return _Dart_GetTypeOfTypedData(
      object,
    );
  }

  late final _Dart_GetTypeOfTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>(
          'Dart_GetTypeOfTypedData');
  late final _Dart_GetTypeOfTypedData =
      _Dart_GetTypeOfTypedDataPtr.asFunction<int Function(Object)>();

  /// Return type if this object is an external TypedData object.
  ///
  /// \return kInvalid if the object is not an external TypedData object or
  /// the appropriate Dart_TypedData_Type.
  int Dart_GetTypeOfExternalTypedData(
    Object object,
  ) {
    return _Dart_GetTypeOfExternalTypedData(
      object,
    );
  }

  late final _Dart_GetTypeOfExternalTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Handle)>>(
          'Dart_GetTypeOfExternalTypedData');
  late final _Dart_GetTypeOfExternalTypedData =
      _Dart_GetTypeOfExternalTypedDataPtr.asFunction<int Function(Object)>();

  /// Returns a TypedData object of the desired length and type.
  ///
  /// \param type The type of the TypedData object.
  /// \param length The length of the TypedData object (length in type units).
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewTypedData(
    int type,
    int length,
  ) {
    return _Dart_NewTypedData(
      type,
      length,
    );
  }

  late final _Dart_NewTypedDataPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.IntPtr)>>(
          'Dart_NewTypedData');
  late final _Dart_NewTypedData =
      _Dart_NewTypedDataPtr.asFunction<Object Function(int, int)>();

  /// Returns a TypedData object which references an external data array.
  ///
  /// \param type The type of the data array.
  /// \param data A data array. This array must not move.
  /// \param length The length of the data array (length in type units).
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalTypedData(
    int type,
    ffi.Pointer<ffi.Void> data,
    int length,
  ) {
    return _Dart_NewExternalTypedData(
      type,
      data,
      length,
    );
  }

  late final _Dart_NewExternalTypedDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Int32, ffi.Pointer<ffi.Void>,
              ffi.IntPtr)>>('Dart_NewExternalTypedData');
  late final _Dart_NewExternalTypedData = _Dart_NewExternalTypedDataPtr
      .asFunction<Object Function(int, ffi.Pointer<ffi.Void>, int)>();

  /// Returns a TypedData object which references an external data array.
  ///
  /// \param type The type of the data array.
  /// \param data A data array. This array must not move.
  /// \param length The length of the data array (length in type units).
  /// \param peer A pointer to a native object or NULL.  This value is
  /// provided to callback when it is invoked.
  /// \param external_allocation_size The number of externally allocated
  /// bytes for peer. Used to inform the garbage collector.
  /// \param callback A function pointer that will be invoked sometime
  /// after the object is garbage collected, unless the handle has been deleted.
  /// A valid callback needs to be specified it cannot be NULL.
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewExternalTypedDataWithFinalizer(
    int type,
    ffi.Pointer<ffi.Void> data,
    int length,
    ffi.Pointer<ffi.Void> peer,
    int external_allocation_size,
    Dart_HandleFinalizer callback,
  ) {
    return _Dart_NewExternalTypedDataWithFinalizer(
      type,
      data,
      length,
      peer,
      external_allocation_size,
      callback,
    );
  }

  late final _Dart_NewExternalTypedDataWithFinalizerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              Dart_HandleFinalizer)>>('Dart_NewExternalTypedDataWithFinalizer');
  late final _Dart_NewExternalTypedDataWithFinalizer =
      _Dart_NewExternalTypedDataWithFinalizerPtr.asFunction<
          Object Function(int, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.Void>, int, Dart_HandleFinalizer)>();

  /// Returns a ByteBuffer object for the typed data.
  ///
  /// \param type_data The TypedData object.
  ///
  /// \return The ByteBuffer object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_NewByteBuffer(
    Object typed_data,
  ) {
    return _Dart_NewByteBuffer(
      typed_data,
    );
  }

  late final _Dart_NewByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_NewByteBuffer');
  late final _Dart_NewByteBuffer =
      _Dart_NewByteBufferPtr.asFunction<Object Function(Object)>();

  /// Acquires access to the internal data address of a TypedData object.
  ///
  /// \param object The typed data object whose internal data address is to
  /// be accessed.
  /// \param type The type of the object is returned here.
  /// \param data The internal data address is returned here.
  /// \param len Size of the typed array is returned here.
  ///
  /// Notes:
  /// When the internal address of the object is acquired any calls to a
  /// Dart API function that could potentially allocate an object or run
  /// any Dart code will return an error.
  ///
  /// Any Dart API functions for accessing the data should not be called
  /// before the corresponding release. In particular, the object should
  /// not be acquired again before its release. This leads to undefined
  /// behavior.
  ///
  /// \return Success if the internal data address is acquired successfully.
  /// Otherwise, returns an error handle.
  Object Dart_TypedDataAcquireData(
    Object object,
    ffi.Pointer<ffi.Int32> type,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
    ffi.Pointer<ffi.IntPtr> len,
  ) {
    return _Dart_TypedDataAcquireData(
      object,
      type,
      data,
      len,
    );
  }

  late final _Dart_TypedDataAcquireDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_TypedDataAcquireData');
  late final _Dart_TypedDataAcquireData =
      _Dart_TypedDataAcquireDataPtr.asFunction<
          Object Function(Object, ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.IntPtr>)>();

  /// Releases access to the internal data address that was acquired earlier using
  /// Dart_TypedDataAcquireData.
  ///
  /// \param object The typed data object whose internal data address is to be
  /// released.
  ///
  /// \return Success if the internal data address is released successfully.
  /// Otherwise, returns an error handle.
  Object Dart_TypedDataReleaseData(
    Object object,
  ) {
    return _Dart_TypedDataReleaseData(
      object,
    );
  }

  late final _Dart_TypedDataReleaseDataPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypedDataReleaseData');
  late final _Dart_TypedDataReleaseData =
      _Dart_TypedDataReleaseDataPtr.asFunction<Object Function(Object)>();

  /// Returns the TypedData object associated with the ByteBuffer object.
  ///
  /// \param byte_buffer The ByteBuffer object.
  ///
  /// \return The TypedData object if no error occurs. Otherwise returns
  /// an error handle.
  Object Dart_GetDataFromByteBuffer(
    Object byte_buffer,
  ) {
    return _Dart_GetDataFromByteBuffer(
      byte_buffer,
    );
  }

  late final _Dart_GetDataFromByteBufferPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_GetDataFromByteBuffer');
  late final _Dart_GetDataFromByteBuffer =
      _Dart_GetDataFromByteBufferPtr.asFunction<Object Function(Object)>();

  /// Invokes a constructor, creating a new object.
  ///
  /// This function allows hidden constructors (constructors with leading
  /// underscores) to be called.
  ///
  /// \param type Type of object to be constructed.
  /// \param constructor_name The name of the constructor to invoke.  Use
  /// Dart_Null() or Dart_EmptyString() to invoke the unnamed constructor.
  /// This name should not include the name of the class.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the constructor.
  ///
  /// \return If the constructor is called and completes successfully,
  /// then the new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_New(
    Object type,
    Object constructor_name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_New(
      type,
      constructor_name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, pkg_ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_New');
  late final _Dart_New = _Dart_NewPtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Allocate a new object without invoking a constructor.
  ///
  /// \param type The type of an object to be allocated.
  ///
  /// \return The new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_Allocate(
    Object type,
  ) {
    return _Dart_Allocate(
      type,
    );
  }

  late final _Dart_AllocatePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_Allocate');
  late final _Dart_Allocate =
      _Dart_AllocatePtr.asFunction<Object Function(Object)>();

  /// Allocate a new object without invoking a constructor, and sets specified
  /// native fields.
  ///
  /// \param type The type of an object to be allocated.
  /// \param num_native_fields The number of native fields to set.
  /// \param native_fields An array containing the value of native fields.
  ///
  /// \return The new object. If an error occurs during execution, then an
  /// error handle is returned.
  Object Dart_AllocateWithNativeFields(
    Object type,
    int num_native_fields,
    ffi.Pointer<ffi.IntPtr> native_fields,
  ) {
    return _Dart_AllocateWithNativeFields(
      type,
      num_native_fields,
      native_fields,
    );
  }

  late final _Dart_AllocateWithNativeFieldsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_AllocateWithNativeFields');
  late final _Dart_AllocateWithNativeFields = _Dart_AllocateWithNativeFieldsPtr
      .asFunction<Object Function(Object, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Invokes a method or function.
  ///
  /// The 'target' parameter may be an object, type, or library.  If
  /// 'target' is an object, then this function will invoke an instance
  /// method.  If 'target' is a type, then this function will invoke a
  /// static method.  If 'target' is a library, then this function will
  /// invoke a top-level function from that library.
  /// NOTE: This API call cannot be used to invoke methods of a type object.
  ///
  /// This function ignores visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param target An object, type, or library.
  /// \param name The name of the function or method to invoke.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the function.
  ///
  /// \return If the function or method is called and completes
  /// successfully, then the return value is returned. If an error
  /// occurs during execution, then an error handle is returned.
  Object Dart_Invoke(
    Object target,
    Object name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_Invoke(
      target,
      name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, pkg_ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_Invoke');
  late final _Dart_Invoke = _Dart_InvokePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Invokes a Closure with the given arguments.
  ///
  /// May generate an unhandled exception error.
  ///
  /// \return If no error occurs during execution, then the result of
  /// invoking the closure is returned. If an error occurs during
  /// execution, then an error handle is returned.
  Object Dart_InvokeClosure(
    Object closure,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_InvokeClosure(
      closure,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokeClosurePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, pkg_ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_InvokeClosure');
  late final _Dart_InvokeClosure = _Dart_InvokeClosurePtr.asFunction<
      Object Function(Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Invokes a Generative Constructor on an object that was previously
  /// allocated using Dart_Allocate/Dart_AllocateWithNativeFields.
  ///
  /// The 'target' parameter must be an object.
  ///
  /// This function ignores visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param target An object.
  /// \param name The name of the constructor to invoke.
  /// Use Dart_Null() or Dart_EmptyString() to invoke the unnamed constructor.
  /// \param number_of_arguments Size of the arguments array.
  /// \param arguments An array of arguments to the function.
  ///
  /// \return If the constructor is called and completes
  /// successfully, then the object is returned. If an error
  /// occurs during execution, then an error handle is returned.
  Object Dart_InvokeConstructor(
    Object object,
    Object name,
    int number_of_arguments,
    ffi.Pointer<ffi.Handle> arguments,
  ) {
    return _Dart_InvokeConstructor(
      object,
      name,
      number_of_arguments,
      arguments,
    );
  }

  late final _Dart_InvokeConstructorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, pkg_ffi.Int,
              ffi.Pointer<ffi.Handle>)>>('Dart_InvokeConstructor');
  late final _Dart_InvokeConstructor = _Dart_InvokeConstructorPtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Gets the value of a field.
  ///
  /// The 'container' parameter may be an object, type, or library.  If
  /// 'container' is an object, then this function will access an
  /// instance field.  If 'container' is a type, then this function will
  /// access a static field.  If 'container' is a library, then this
  /// function will access a top-level variable.
  /// NOTE: This API call cannot be used to access fields of a type object.
  ///
  /// This function ignores field visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param container An object, type, or library.
  /// \param name A field name.
  ///
  /// \return If no error occurs, then the value of the field is
  /// returned. Otherwise an error handle is returned.
  Object Dart_GetField(
    Object container,
    Object name,
  ) {
    return _Dart_GetField(
      container,
      name,
    );
  }

  late final _Dart_GetFieldPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_GetField');
  late final _Dart_GetField =
      _Dart_GetFieldPtr.asFunction<Object Function(Object, Object)>();

  /// Sets the value of a field.
  ///
  /// The 'container' parameter may actually be an object, type, or
  /// library.  If 'container' is an object, then this function will
  /// access an instance field.  If 'container' is a type, then this
  /// function will access a static field.  If 'container' is a library,
  /// then this function will access a top-level variable.
  /// NOTE: This API call cannot be used to access fields of a type object.
  ///
  /// This function ignores field visibility (leading underscores in names).
  ///
  /// May generate an unhandled exception error.
  ///
  /// \param container An object, type, or library.
  /// \param name A field name.
  /// \param value The new field value.
  ///
  /// \return A valid handle if no error occurs.
  Object Dart_SetField(
    Object container,
    Object name,
    Object value,
  ) {
    return _Dart_SetField(
      container,
      name,
      value,
    );
  }

  late final _Dart_SetFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Handle, ffi.Handle)>>('Dart_SetField');
  late final _Dart_SetField =
      _Dart_SetFieldPtr.asFunction<Object Function(Object, Object, Object)>();

  /// Throws an exception.
  ///
  /// This function causes a Dart language exception to be thrown. This
  /// will proceed in the standard way, walking up Dart frames until an
  /// appropriate 'catch' block is found, executing 'finally' blocks,
  /// etc.
  ///
  /// If an error handle is passed into this function, the error is
  /// propagated immediately.  See Dart_PropagateError for a discussion
  /// of error propagation.
  ///
  /// If successful, this function does not return. Note that this means
  /// that the destructors of any stack-allocated C++ objects will not be
  /// called. If there are no Dart frames on the stack, an error occurs.
  ///
  /// \return An error handle if the exception was not thrown.
  /// Otherwise the function does not return.
  Object Dart_ThrowException(
    Object exception,
  ) {
    return _Dart_ThrowException(
      exception,
    );
  }

  late final _Dart_ThrowExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_ThrowException');
  late final _Dart_ThrowException =
      _Dart_ThrowExceptionPtr.asFunction<Object Function(Object)>();

  /// Rethrows an exception.
  ///
  /// Rethrows an exception, unwinding all dart frames on the stack. If
  /// successful, this function does not return. Note that this means
  /// that the destructors of any stack-allocated C++ objects will not be
  /// called. If there are no Dart frames on the stack, an error occurs.
  ///
  /// \return An error handle if the exception was not thrown.
  /// Otherwise the function does not return.
  Object Dart_ReThrowException(
    Object exception,
    Object stacktrace,
  ) {
    return _Dart_ReThrowException(
      exception,
      stacktrace,
    );
  }

  late final _Dart_ReThrowExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_ReThrowException');
  late final _Dart_ReThrowException =
      _Dart_ReThrowExceptionPtr.asFunction<Object Function(Object, Object)>();

  /// Gets the number of native instance fields in an object.
  Object Dart_GetNativeInstanceFieldCount(
    Object obj,
    ffi.Pointer<pkg_ffi.Int> count,
  ) {
    return _Dart_GetNativeInstanceFieldCount(
      obj,
      count,
    );
  }

  late final _Dart_GetNativeInstanceFieldCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<pkg_ffi.Int>)>>('Dart_GetNativeInstanceFieldCount');
  late final _Dart_GetNativeInstanceFieldCount =
      _Dart_GetNativeInstanceFieldCountPtr.asFunction<
          Object Function(Object, ffi.Pointer<pkg_ffi.Int>)>();

  /// Gets the value of a native field.
  ///
  /// TODO(turnidge): Document.
  Object Dart_GetNativeInstanceField(
    Object obj,
    int index,
    ffi.Pointer<ffi.IntPtr> value,
  ) {
    return _Dart_GetNativeInstanceField(
      obj,
      index,
      value,
    );
  }

  late final _Dart_GetNativeInstanceFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, pkg_ffi.Int,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeInstanceField');
  late final _Dart_GetNativeInstanceField = _Dart_GetNativeInstanceFieldPtr
      .asFunction<Object Function(Object, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Sets the value of a native field.
  ///
  /// TODO(turnidge): Document.
  Object Dart_SetNativeInstanceField(
    Object obj,
    int index,
    int value,
  ) {
    return _Dart_SetNativeInstanceField(
      obj,
      index,
      value,
    );
  }

  late final _Dart_SetNativeInstanceFieldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, pkg_ffi.Int,
              ffi.IntPtr)>>('Dart_SetNativeInstanceField');
  late final _Dart_SetNativeInstanceField = _Dart_SetNativeInstanceFieldPtr
      .asFunction<Object Function(Object, int, int)>();

  /// Extracts current isolate group data from the native arguments structure.
  ffi.Pointer<ffi.Void> Dart_GetNativeIsolateGroupData(
    Dart_NativeArguments args,
  ) {
    return _Dart_GetNativeIsolateGroupData(
      args,
    );
  }

  late final _Dart_GetNativeIsolateGroupDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              Dart_NativeArguments)>>('Dart_GetNativeIsolateGroupData');
  late final _Dart_GetNativeIsolateGroupData =
      _Dart_GetNativeIsolateGroupDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(Dart_NativeArguments)>();

  /// Gets the native arguments based on the types passed in and populates
  /// the passed arguments buffer with appropriate native values.
  ///
  /// \param args the Native arguments block passed into the native call.
  /// \param num_arguments length of argument descriptor array and argument
  /// values array passed in.
  /// \param arg_descriptors an array that describes the arguments that
  /// need to be retrieved. For each argument to be retrieved the descriptor
  /// contains the argument number (0, 1 etc.) and the argument type
  /// described using Dart_NativeArgument_Type, e.g:
  /// DART_NATIVE_ARG_DESCRIPTOR(Dart_NativeArgument_kBool, 1) indicates
  /// that the first argument is to be retrieved and it should be a boolean.
  /// \param arg_values array into which the native arguments need to be
  /// extracted into, the array is allocated by the caller (it could be
  /// stack allocated to avoid the malloc/free performance overhead).
  ///
  /// \return Success if all the arguments could be extracted correctly,
  /// returns an error handle if there were any errors while extracting the
  /// arguments (mismatched number of arguments, incorrect types, etc.).
  Object Dart_GetNativeArguments(
    Dart_NativeArguments args,
    int num_arguments,
    ffi.Pointer<Dart_NativeArgument_Descriptor> arg_descriptors,
    ffi.Pointer<Dart_NativeArgument_Value> arg_values,
  ) {
    return _Dart_GetNativeArguments(
      args,
      num_arguments,
      arg_descriptors,
      arg_values,
    );
  }

  late final _Dart_GetNativeArgumentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_NativeArguments,
                  pkg_ffi.Int,
                  ffi.Pointer<Dart_NativeArgument_Descriptor>,
                  ffi.Pointer<Dart_NativeArgument_Value>)>>(
      'Dart_GetNativeArguments');
  late final _Dart_GetNativeArguments = _Dart_GetNativeArgumentsPtr.asFunction<
      Object Function(
          Dart_NativeArguments,
          int,
          ffi.Pointer<Dart_NativeArgument_Descriptor>,
          ffi.Pointer<Dart_NativeArgument_Value>)>();

  /// Gets the native argument at some index.
  Object Dart_GetNativeArgument(
    Dart_NativeArguments args,
    int index,
  ) {
    return _Dart_GetNativeArgument(
      args,
      index,
    );
  }

  late final _Dart_GetNativeArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_NativeArguments, pkg_ffi.Int)>>('Dart_GetNativeArgument');
  late final _Dart_GetNativeArgument = _Dart_GetNativeArgumentPtr.asFunction<
      Object Function(Dart_NativeArguments, int)>();

  /// Gets the number of native arguments.
  int Dart_GetNativeArgumentCount(
    Dart_NativeArguments args,
  ) {
    return _Dart_GetNativeArgumentCount(
      args,
    );
  }

  late final _Dart_GetNativeArgumentCountPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(Dart_NativeArguments)>>(
          'Dart_GetNativeArgumentCount');
  late final _Dart_GetNativeArgumentCount = _Dart_GetNativeArgumentCountPtr
      .asFunction<int Function(Dart_NativeArguments)>();

  /// Gets all the native fields of the native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param num_fields size of the intptr_t array 'field_values' passed in.
  /// \param field_values intptr_t array in which native field values are returned.
  /// \return Success if the native fields where copied in successfully. Otherwise
  /// returns an error handle. On success the native field values are copied
  /// into the 'field_values' array, if the argument at 'arg_index' is a
  /// null object then 0 is copied as the native field values into the
  /// 'field_values' array.
  Object Dart_GetNativeFieldsOfArgument(
    Dart_NativeArguments args,
    int arg_index,
    int num_fields,
    ffi.Pointer<ffi.IntPtr> field_values,
  ) {
    return _Dart_GetNativeFieldsOfArgument(
      args,
      arg_index,
      num_fields,
      field_values,
    );
  }

  late final _Dart_GetNativeFieldsOfArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, pkg_ffi.Int, pkg_ffi.Int,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeFieldsOfArgument');
  late final _Dart_GetNativeFieldsOfArgument =
      _Dart_GetNativeFieldsOfArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, int, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets the native field of the receiver.
  Object Dart_GetNativeReceiver(
    Dart_NativeArguments args,
    ffi.Pointer<ffi.IntPtr> value,
  ) {
    return _Dart_GetNativeReceiver(
      args,
      value,
    );
  }

  late final _Dart_GetNativeReceiverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetNativeReceiver');
  late final _Dart_GetNativeReceiver = _Dart_GetNativeReceiverPtr.asFunction<
      Object Function(Dart_NativeArguments, ffi.Pointer<ffi.IntPtr>)>();

  /// Gets a string native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param peer Returns the peer pointer if the string argument has one.
  /// \return Success if the string argument has a peer, if it does not
  /// have a peer then the String object is returned. Otherwise returns
  /// an error handle (argument is not a String object).
  Object Dart_GetNativeStringArgument(
    Dart_NativeArguments args,
    int arg_index,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_GetNativeStringArgument(
      args,
      arg_index,
      peer,
    );
  }

  late final _Dart_GetNativeStringArgumentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(Dart_NativeArguments, pkg_ffi.Int,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'Dart_GetNativeStringArgument');
  late final _Dart_GetNativeStringArgument =
      _Dart_GetNativeStringArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Gets an integer native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param value Returns the integer value if the argument is an Integer.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeIntegerArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Int64> value,
  ) {
    return _Dart_GetNativeIntegerArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeIntegerArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, pkg_ffi.Int,
              ffi.Pointer<ffi.Int64>)>>('Dart_GetNativeIntegerArgument');
  late final _Dart_GetNativeIntegerArgument =
      _Dart_GetNativeIntegerArgumentPtr.asFunction<
          Object Function(Dart_NativeArguments, int, ffi.Pointer<ffi.Int64>)>();

  /// Gets a boolean native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param value Returns the boolean value if the argument is a Boolean.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeBooleanArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Uint8> value,
  ) {
    return _Dart_GetNativeBooleanArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeBooleanArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, pkg_ffi.Int,
              ffi.Pointer<ffi.Uint8>)>>('Dart_GetNativeBooleanArgument');
  late final _Dart_GetNativeBooleanArgument =
      _Dart_GetNativeBooleanArgumentPtr.asFunction<
          Object Function(Dart_NativeArguments, int, ffi.Pointer<ffi.Uint8>)>();

  /// Gets a double native argument at some index.
  /// \param args Native arguments structure.
  /// \param arg_index Index of the desired argument in the structure above.
  /// \param value Returns the double value if the argument is a double.
  /// \return Success if no error occurs. Otherwise returns an error handle.
  Object Dart_GetNativeDoubleArgument(
    Dart_NativeArguments args,
    int index,
    ffi.Pointer<ffi.Double> value,
  ) {
    return _Dart_GetNativeDoubleArgument(
      args,
      index,
      value,
    );
  }

  late final _Dart_GetNativeDoubleArgumentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_NativeArguments, pkg_ffi.Int,
              ffi.Pointer<ffi.Double>)>>('Dart_GetNativeDoubleArgument');
  late final _Dart_GetNativeDoubleArgument =
      _Dart_GetNativeDoubleArgumentPtr.asFunction<
          Object Function(
              Dart_NativeArguments, int, ffi.Pointer<ffi.Double>)>();

  /// Sets the return value for a native function.
  ///
  /// If retval is an Error handle, then error will be propagated once
  /// the native functions exits. See Dart_PropagateError for a
  /// discussion of how different types of errors are propagated.
  void Dart_SetReturnValue(
    Dart_NativeArguments args,
    Object retval,
  ) {
    return _Dart_SetReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Handle)>>('Dart_SetReturnValue');
  late final _Dart_SetReturnValue = _Dart_SetReturnValuePtr.asFunction<
      void Function(Dart_NativeArguments, Object)>();

  void Dart_SetWeakHandleReturnValue(
    Dart_NativeArguments args,
    Dart_WeakPersistentHandle rval,
  ) {
    return _Dart_SetWeakHandleReturnValue(
      args,
      rval,
    );
  }

  late final _Dart_SetWeakHandleReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(Dart_NativeArguments,
              Dart_WeakPersistentHandle)>>('Dart_SetWeakHandleReturnValue');
  late final _Dart_SetWeakHandleReturnValue =
      _Dart_SetWeakHandleReturnValuePtr.asFunction<
          void Function(Dart_NativeArguments, Dart_WeakPersistentHandle)>();

  void Dart_SetBooleanReturnValue(
    Dart_NativeArguments args,
    bool retval,
  ) {
    return _Dart_SetBooleanReturnValue(
      args,
      retval ? 1 : 0,
    );
  }

  late final _Dart_SetBooleanReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Uint8)>>('Dart_SetBooleanReturnValue');
  late final _Dart_SetBooleanReturnValue = _Dart_SetBooleanReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, int)>();

  void Dart_SetIntegerReturnValue(
    Dart_NativeArguments args,
    int retval,
  ) {
    return _Dart_SetIntegerReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetIntegerReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Int64)>>('Dart_SetIntegerReturnValue');
  late final _Dart_SetIntegerReturnValue = _Dart_SetIntegerReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, int)>();

  void Dart_SetDoubleReturnValue(
    Dart_NativeArguments args,
    double retval,
  ) {
    return _Dart_SetDoubleReturnValue(
      args,
      retval,
    );
  }

  late final _Dart_SetDoubleReturnValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              Dart_NativeArguments, ffi.Double)>>('Dart_SetDoubleReturnValue');
  late final _Dart_SetDoubleReturnValue = _Dart_SetDoubleReturnValuePtr
      .asFunction<void Function(Dart_NativeArguments, double)>();

  /// Sets the environment callback for the current isolate. This
  /// callback is used to lookup environment values by name in the
  /// current environment. This enables the embedder to supply values for
  /// the const constructors bool.fromEnvironment, int.fromEnvironment
  /// and String.fromEnvironment.
  Object Dart_SetEnvironmentCallback(
    Dart_EnvironmentCallback callback,
  ) {
    return _Dart_SetEnvironmentCallback(
      callback,
    );
  }

  late final _Dart_SetEnvironmentCallbackPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_EnvironmentCallback)>>(
      'Dart_SetEnvironmentCallback');
  late final _Dart_SetEnvironmentCallback = _Dart_SetEnvironmentCallbackPtr
      .asFunction<Object Function(Dart_EnvironmentCallback)>();

  /// Sets the callback used to resolve native functions for a library.
  ///
  /// \param library A library.
  /// \param resolver A native entry resolver.
  ///
  /// \return A valid handle if the native resolver was set successfully.
  Object Dart_SetNativeResolver(
    Object library1,
    Dart_NativeEntryResolver resolver,
    Dart_NativeEntrySymbol symbol,
  ) {
    return _Dart_SetNativeResolver(
      library1,
      resolver,
      symbol,
    );
  }

  late final _Dart_SetNativeResolverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, Dart_NativeEntryResolver,
              Dart_NativeEntrySymbol)>>('Dart_SetNativeResolver');
  late final _Dart_SetNativeResolver = _Dart_SetNativeResolverPtr.asFunction<
      Object Function(
          Object, Dart_NativeEntryResolver, Dart_NativeEntrySymbol)>();

  /// Returns the callback used to resolve native functions for a library.
  ///
  /// \param library A library.
  /// \param resolver a pointer to a Dart_NativeEntryResolver
  ///
  /// \return A valid handle if the library was found.
  Object Dart_GetNativeResolver(
    Object library1,
    ffi.Pointer<Dart_NativeEntryResolver> resolver,
  ) {
    return _Dart_GetNativeResolver(
      library1,
      resolver,
    );
  }

  late final _Dart_GetNativeResolverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  ffi.Handle, ffi.Pointer<Dart_NativeEntryResolver>)>>(
      'Dart_GetNativeResolver');
  late final _Dart_GetNativeResolver = _Dart_GetNativeResolverPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_NativeEntryResolver>)>();

  /// Returns the callback used to resolve native function symbols for a library.
  ///
  /// \param library A library.
  /// \param resolver a pointer to a Dart_NativeEntrySymbol.
  ///
  /// \return A valid handle if the library was found.
  Object Dart_GetNativeSymbol(
    Object library1,
    ffi.Pointer<Dart_NativeEntrySymbol> resolver,
  ) {
    return _Dart_GetNativeSymbol(
      library1,
      resolver,
    );
  }

  late final _Dart_GetNativeSymbolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              ffi.Pointer<Dart_NativeEntrySymbol>)>>('Dart_GetNativeSymbol');
  late final _Dart_GetNativeSymbol = _Dart_GetNativeSymbolPtr.asFunction<
      Object Function(Object, ffi.Pointer<Dart_NativeEntrySymbol>)>();

  /// Sets the callback used to resolve FFI native functions for a library.
  /// The resolved functions are expected to be a C function pointer of the
  /// correct signature (as specified in the `@FfiNative<NFT>()` function
  /// annotation in Dart code).
  ///
  /// NOTE: This is an experimental feature and might change in the future.
  ///
  /// \param library A library.
  /// \param resolver A native function resolver.
  ///
  /// \return A valid handle if the native resolver was set successfully.
  Object Dart_SetFfiNativeResolver(
    Object library1,
    Dart_FfiNativeResolver resolver,
  ) {
    return _Dart_SetFfiNativeResolver(
      library1,
      resolver,
    );
  }

  late final _Dart_SetFfiNativeResolverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle,
              Dart_FfiNativeResolver)>>('Dart_SetFfiNativeResolver');
  late final _Dart_SetFfiNativeResolver = _Dart_SetFfiNativeResolverPtr
      .asFunction<Object Function(Object, Dart_FfiNativeResolver)>();

  /// Sets library tag handler for the current isolate. This handler is
  /// used to handle the various tags encountered while loading libraries
  /// or scripts in the isolate.
  ///
  /// \param handler Handler code to be used for handling the various tags
  /// encountered while loading libraries or scripts in the isolate.
  ///
  /// \return If no error occurs, the handler is set for the isolate.
  /// Otherwise an error handle is returned.
  ///
  /// TODO(turnidge): Document.
  Object Dart_SetLibraryTagHandler(
    Dart_LibraryTagHandler handler,
  ) {
    return _Dart_SetLibraryTagHandler(
      handler,
    );
  }

  late final _Dart_SetLibraryTagHandlerPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(Dart_LibraryTagHandler)>>(
          'Dart_SetLibraryTagHandler');
  late final _Dart_SetLibraryTagHandler = _Dart_SetLibraryTagHandlerPtr
      .asFunction<Object Function(Dart_LibraryTagHandler)>();

  /// Sets the deferred load handler for the current isolate. This handler is
  /// used to handle loading deferred imports in an AppJIT or AppAOT program.
  Object Dart_SetDeferredLoadHandler(
    Dart_DeferredLoadHandler handler,
  ) {
    return _Dart_SetDeferredLoadHandler(
      handler,
    );
  }

  late final _Dart_SetDeferredLoadHandlerPtr = _lookup<
          ffi.NativeFunction<ffi.Handle Function(Dart_DeferredLoadHandler)>>(
      'Dart_SetDeferredLoadHandler');
  late final _Dart_SetDeferredLoadHandler = _Dart_SetDeferredLoadHandlerPtr
      .asFunction<Object Function(Dart_DeferredLoadHandler)>();

  /// Notifies the VM that a deferred load completed successfully. This function
  /// will eventually cause the corresponding `prefix.loadLibrary()` futures to
  /// complete.
  ///
  /// Requires the current isolate to be the same current isolate during the
  /// invocation of the Dart_DeferredLoadHandler.
  Object Dart_DeferredLoadComplete(
    int loading_unit_id,
    ffi.Pointer<ffi.Uint8> snapshot_data,
    ffi.Pointer<ffi.Uint8> snapshot_instructions,
  ) {
    return _Dart_DeferredLoadComplete(
      loading_unit_id,
      snapshot_data,
      snapshot_instructions,
    );
  }

  late final _Dart_DeferredLoadCompletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.IntPtr, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('Dart_DeferredLoadComplete');
  late final _Dart_DeferredLoadComplete =
      _Dart_DeferredLoadCompletePtr.asFunction<
          Object Function(
              int, ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// Notifies the VM that a deferred load failed. This function
  /// will eventually cause the corresponding `prefix.loadLibrary()` futures to
  /// complete with an error.
  ///
  /// If `transient` is true, future invocations of `prefix.loadLibrary()` will
  /// trigger new load requests. If false, futures invocation will complete with
  /// the same error.
  ///
  /// Requires the current isolate to be the same current isolate during the
  /// invocation of the Dart_DeferredLoadHandler.
  Object Dart_DeferredLoadCompleteError(
    int loading_unit_id,
    ffi.Pointer<pkg_ffi.Char> error_message,
    bool transient,
  ) {
    return _Dart_DeferredLoadCompleteError(
      loading_unit_id,
      error_message,
      transient ? 1 : 0,
    );
  }

  late final _Dart_DeferredLoadCompleteErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.IntPtr, ffi.Pointer<pkg_ffi.Char>,
              ffi.Uint8)>>('Dart_DeferredLoadCompleteError');
  late final _Dart_DeferredLoadCompleteError =
      _Dart_DeferredLoadCompleteErrorPtr.asFunction<
          Object Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  /// Canonicalizes a url with respect to some library.
  ///
  /// The url is resolved with respect to the library's url and some url
  /// normalizations are performed.
  ///
  /// This canonicalization function should be sufficient for most
  /// embedders to implement the Dart_kCanonicalizeUrl tag.
  ///
  /// \param base_url The base url relative to which the url is
  /// being resolved.
  /// \param url The url being resolved and canonicalized.  This
  /// parameter is a string handle.
  ///
  /// \return If no error occurs, a String object is returned.  Otherwise
  /// an error handle is returned.
  Object Dart_DefaultCanonicalizeUrl(
    Object base_url,
    Object url,
  ) {
    return _Dart_DefaultCanonicalizeUrl(
      base_url,
      url,
    );
  }

  late final _Dart_DefaultCanonicalizeUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_DefaultCanonicalizeUrl');
  late final _Dart_DefaultCanonicalizeUrl = _Dart_DefaultCanonicalizeUrlPtr
      .asFunction<Object Function(Object, Object)>();

  /// Loads the root library for the current isolate.
  ///
  /// Requires there to be no current root library.
  ///
  /// \param buffer A buffer which contains a kernel binary (see
  /// pkg/kernel/binary.md). Must remain valid until isolate group shutdown.
  /// \param buffer_size Length of the passed in buffer.
  ///
  /// \return A handle to the root library, or an error.
  Object Dart_LoadScriptFromKernel(
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_size,
  ) {
    return _Dart_LoadScriptFromKernel(
      kernel_buffer,
      kernel_size,
    );
  }

  late final _Dart_LoadScriptFromKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_LoadScriptFromKernel');
  late final _Dart_LoadScriptFromKernel = _Dart_LoadScriptFromKernelPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Gets the library for the root script for the current isolate.
  ///
  /// If the root script has not yet been set for the current isolate,
  /// this function returns Dart_Null().  This function never returns an
  /// error handle.
  ///
  /// \return Returns the root Library for the current isolate or Dart_Null().
  Object Dart_RootLibrary() {
    return _Dart_RootLibrary();
  }

  late final _Dart_RootLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_RootLibrary');
  late final _Dart_RootLibrary =
      _Dart_RootLibraryPtr.asFunction<Object Function()>();

  /// Sets the root library for the current isolate.
  ///
  /// \return Returns an error handle if `library` is not a library handle.
  Object Dart_SetRootLibrary(
    Object library1,
  ) {
    return _Dart_SetRootLibrary(
      library1,
    );
  }

  late final _Dart_SetRootLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_SetRootLibrary');
  late final _Dart_SetRootLibrary =
      _Dart_SetRootLibraryPtr.asFunction<Object Function(Object)>();

  /// Lookup or instantiate a legacy type by name and type arguments from a
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetType');
  late final _Dart_GetType = _Dart_GetTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Lookup or instantiate a nullable type by name and type arguments from
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetNullableType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetNullableType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetNullableType');
  late final _Dart_GetNullableType = _Dart_GetNullableTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Lookup or instantiate a non-nullable type by name and type arguments from
  /// Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The class name for the type.
  /// \param number_of_type_arguments Number of type arguments.
  /// For non parametric types the number of type arguments would be 0.
  /// \param type_arguments Pointer to an array of type arguments.
  /// For non parameteric types a NULL would be passed in for this argument.
  ///
  /// \return If no error occurs, the type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_GetNonNullableType(
    Object library1,
    Object class_name,
    int number_of_type_arguments,
    ffi.Pointer<ffi.Handle> type_arguments,
  ) {
    return _Dart_GetNonNullableType(
      library1,
      class_name,
      number_of_type_arguments,
      type_arguments,
    );
  }

  late final _Dart_GetNonNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Handle, ffi.Handle, ffi.IntPtr,
              ffi.Pointer<ffi.Handle>)>>('Dart_GetNonNullableType');
  late final _Dart_GetNonNullableType = _Dart_GetNonNullableTypePtr.asFunction<
      Object Function(Object, Object, int, ffi.Pointer<ffi.Handle>)>();

  /// Creates a nullable version of the provided type.
  ///
  /// \param type The type to be converted to a nullable type.
  ///
  /// \return If no error occurs, a nullable type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_TypeToNullableType(
    Object type,
  ) {
    return _Dart_TypeToNullableType(
      type,
    );
  }

  late final _Dart_TypeToNullableTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypeToNullableType');
  late final _Dart_TypeToNullableType =
      _Dart_TypeToNullableTypePtr.asFunction<Object Function(Object)>();

  /// Creates a non-nullable version of the provided type.
  ///
  /// \param type The type to be converted to a non-nullable type.
  ///
  /// \return If no error occurs, a non-nullable type is returned.
  /// Otherwise an error handle is returned.
  Object Dart_TypeToNonNullableType(
    Object type,
  ) {
    return _Dart_TypeToNonNullableType(
      type,
    );
  }

  late final _Dart_TypeToNonNullableTypePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_TypeToNonNullableType');
  late final _Dart_TypeToNonNullableType =
      _Dart_TypeToNonNullableTypePtr.asFunction<Object Function(Object)>();

  /// A type's nullability.
  ///
  /// \param type A Dart type.
  /// \param result An out parameter containing the result of the check. True if
  /// the type is of the specified nullability, false otherwise.
  ///
  /// \return Returns an error handle if type is not of type Type.
  Object Dart_IsNullableType(
    Object type,
    ffi.Pointer<ffi.Uint8> result,
  ) {
    return _Dart_IsNullableType(
      type,
      result,
    );
  }

  late final _Dart_IsNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint8>)>>('Dart_IsNullableType');
  late final _Dart_IsNullableType = _Dart_IsNullableTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint8>)>();

  Object Dart_IsNonNullableType(
    Object type,
    ffi.Pointer<ffi.Uint8> result,
  ) {
    return _Dart_IsNonNullableType(
      type,
      result,
    );
  }

  late final _Dart_IsNonNullableTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint8>)>>('Dart_IsNonNullableType');
  late final _Dart_IsNonNullableType = _Dart_IsNonNullableTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint8>)>();

  Object Dart_IsLegacyType(
    Object type,
    ffi.Pointer<ffi.Uint8> result,
  ) {
    return _Dart_IsLegacyType(
      type,
      result,
    );
  }

  late final _Dart_IsLegacyTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Uint8>)>>('Dart_IsLegacyType');
  late final _Dart_IsLegacyType = _Dart_IsLegacyTypePtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Uint8>)>();

  /// Lookup a class or interface by name from a Library.
  ///
  /// \param library The library containing the class or interface.
  /// \param class_name The name of the class or interface.
  ///
  /// \return If no error occurs, the class or interface is
  /// returned. Otherwise an error handle is returned.
  Object Dart_GetClass(
    Object library1,
    Object class_name,
  ) {
    return _Dart_GetClass(
      library1,
      class_name,
    );
  }

  late final _Dart_GetClassPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_GetClass');
  late final _Dart_GetClass =
      _Dart_GetClassPtr.asFunction<Object Function(Object, Object)>();

  /// Returns an import path to a Library, such as "file:///test.dart" or
  /// "dart:core".
  Object Dart_LibraryUrl(
    Object library1,
  ) {
    return _Dart_LibraryUrl(
      library1,
    );
  }

  late final _Dart_LibraryUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LibraryUrl');
  late final _Dart_LibraryUrl =
      _Dart_LibraryUrlPtr.asFunction<Object Function(Object)>();

  /// Returns a URL from which a Library was loaded.
  Object Dart_LibraryResolvedUrl(
    Object library1,
  ) {
    return _Dart_LibraryResolvedUrl(
      library1,
    );
  }

  late final _Dart_LibraryResolvedUrlPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LibraryResolvedUrl');
  late final _Dart_LibraryResolvedUrl =
      _Dart_LibraryResolvedUrlPtr.asFunction<Object Function(Object)>();

  /// \return An array of libraries.
  Object Dart_GetLoadedLibraries() {
    return _Dart_GetLoadedLibraries();
  }

  late final _Dart_GetLoadedLibrariesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'Dart_GetLoadedLibraries');
  late final _Dart_GetLoadedLibraries =
      _Dart_GetLoadedLibrariesPtr.asFunction<Object Function()>();

  Object Dart_LookupLibrary(
    Object url,
  ) {
    return _Dart_LookupLibrary(
      url,
    );
  }

  late final _Dart_LookupLibraryPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>(
          'Dart_LookupLibrary');
  late final _Dart_LookupLibrary =
      _Dart_LookupLibraryPtr.asFunction<Object Function(Object)>();

  /// Report an loading error for the library.
  ///
  /// \param library The library that failed to load.
  /// \param error The Dart error instance containing the load error.
  ///
  /// \return If the VM handles the error, the return value is
  /// a null handle. If it doesn't handle the error, the error
  /// object is returned.
  Object Dart_LibraryHandleError(
    Object library1,
    Object error,
  ) {
    return _Dart_LibraryHandleError(
      library1,
      error,
    );
  }

  late final _Dart_LibraryHandleErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Handle, ffi.Handle)>>(
          'Dart_LibraryHandleError');
  late final _Dart_LibraryHandleError =
      _Dart_LibraryHandleErrorPtr.asFunction<Object Function(Object, Object)>();

  /// Called by the embedder to load a partial program. Does not set the root
  /// library.
  ///
  /// \param buffer A buffer which contains a kernel binary (see
  /// pkg/kernel/binary.md). Must remain valid until isolate shutdown.
  /// \param buffer_size Length of the passed in buffer.
  ///
  /// \return A handle to the main library of the compilation unit, or an error.
  Object Dart_LoadLibraryFromKernel(
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
  ) {
    return _Dart_LoadLibraryFromKernel(
      kernel_buffer,
      kernel_buffer_size,
    );
  }

  late final _Dart_LoadLibraryFromKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_LoadLibraryFromKernel');
  late final _Dart_LoadLibraryFromKernel = _Dart_LoadLibraryFromKernelPtr
      .asFunction<Object Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Indicates that all outstanding load requests have been satisfied.
  /// This finalizes all the new classes loaded and optionally completes
  /// deferred library futures.
  ///
  /// Requires there to be a current isolate.
  ///
  /// \param complete_futures Specify true if all deferred library
  /// futures should be completed, false otherwise.
  ///
  /// \return Success if all classes have been finalized and deferred library
  /// futures are completed. Otherwise, returns an error.
  Object Dart_FinalizeLoading(
    bool complete_futures,
  ) {
    return _Dart_FinalizeLoading(
      complete_futures ? 1 : 0,
    );
  }

  late final _Dart_FinalizeLoadingPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Uint8)>>(
          'Dart_FinalizeLoading');
  late final _Dart_FinalizeLoading =
      _Dart_FinalizeLoadingPtr.asFunction<Object Function(int)>();

  /// Returns the value of peer field of 'object' in 'peer'.
  ///
  /// \param object An object.
  /// \param peer An out parameter that returns the value of the peer
  /// field.
  ///
  /// \return Returns an error if 'object' is a subtype of Null, num, or
  /// bool.
  Object Dart_GetPeer(
    Object object,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peer,
  ) {
    return _Dart_GetPeer(
      object,
      peer,
    );
  }

  late final _Dart_GetPeerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('Dart_GetPeer');
  late final _Dart_GetPeer = _Dart_GetPeerPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Sets the value of the peer field of 'object' to the value of
  /// 'peer'.
  ///
  /// \param object An object.
  /// \param peer A value to store in the peer field.
  ///
  /// \return Returns an error if 'object' is a subtype of Null, num, or
  /// bool.
  Object Dart_SetPeer(
    Object object,
    ffi.Pointer<ffi.Void> peer,
  ) {
    return _Dart_SetPeer(
      object,
      peer,
    );
  }

  late final _Dart_SetPeerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Handle, ffi.Pointer<ffi.Void>)>>('Dart_SetPeer');
  late final _Dart_SetPeer = _Dart_SetPeerPtr.asFunction<
      Object Function(Object, ffi.Pointer<ffi.Void>)>();

  bool Dart_IsKernelIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsKernelIsolate(
          isolate,
        ) !=
        0;
  }

  late final _Dart_IsKernelIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Dart_Isolate)>>(
          'Dart_IsKernelIsolate');
  late final _Dart_IsKernelIsolate =
      _Dart_IsKernelIsolatePtr.asFunction<int Function(Dart_Isolate)>();

  bool Dart_KernelIsolateIsRunning() {
    return _Dart_KernelIsolateIsRunning() != 0;
  }

  late final _Dart_KernelIsolateIsRunningPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'Dart_KernelIsolateIsRunning');
  late final _Dart_KernelIsolateIsRunning =
      _Dart_KernelIsolateIsRunningPtr.asFunction<int Function()>();

  int Dart_KernelPort() {
    return _Dart_KernelPort();
  }

  late final _Dart_KernelPortPtr =
      _lookup<ffi.NativeFunction<Dart_Port Function()>>('Dart_KernelPort');
  late final _Dart_KernelPort =
      _Dart_KernelPortPtr.asFunction<int Function()>();

  /// Compiles the given `script_uri` to a kernel file.
  ///
  /// \param platform_kernel A buffer containing the kernel of the platform (e.g.
  /// `vm_platform_strong.dill`). The VM does not take ownership of this memory.
  ///
  /// \param platform_kernel_size The length of the platform_kernel buffer.
  ///
  /// \param snapshot_compile Set to `true` when the compilation is for a snapshot.
  /// This is used by the frontend to determine if compilation related information
  /// should be printed to console (e.g., null safety mode).
  ///
  /// \param verbosity Specifies the logging behavior of the kernel compilation
  /// service.
  ///
  /// \return Returns the result of the compilation.
  ///
  /// On a successful compilation the returned [Dart_KernelCompilationResult] has
  /// a status of [Dart_KernelCompilationStatus_Ok] and the `kernel`/`kernel_size`
  /// fields are set. The caller takes ownership of the malloc()ed buffer.
  ///
  /// On a failed compilation the `error` might be set describing the reason for
  /// the failed compilation. The caller takes ownership of the malloc()ed
  /// error.
  ///
  /// Requires there to be a current isolate.
  Dart_KernelCompilationResult Dart_CompileToKernel(
    ffi.Pointer<pkg_ffi.Char> script_uri,
    ffi.Pointer<ffi.Uint8> platform_kernel,
    int platform_kernel_size,
    bool incremental_compile,
    bool snapshot_compile,
    ffi.Pointer<pkg_ffi.Char> package_config,
    int verbosity,
  ) {
    return _Dart_CompileToKernel(
      script_uri,
      platform_kernel,
      platform_kernel_size,
      incremental_compile ? 1 : 0,
      snapshot_compile ? 1 : 0,
      package_config,
      verbosity,
    );
  }

  late final _Dart_CompileToKernelPtr = _lookup<
      ffi.NativeFunction<
          Dart_KernelCompilationResult Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Int32)>>('Dart_CompileToKernel');
  late final _Dart_CompileToKernel = _Dart_CompileToKernelPtr.asFunction<
      Dart_KernelCompilationResult Function(
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          int,
          int,
          int,
          ffi.Pointer<pkg_ffi.Char>,
          int)>();

  Dart_KernelCompilationResult Dart_KernelListDependencies() {
    return _Dart_KernelListDependencies();
  }

  late final _Dart_KernelListDependenciesPtr =
      _lookup<ffi.NativeFunction<Dart_KernelCompilationResult Function()>>(
          'Dart_KernelListDependencies');
  late final _Dart_KernelListDependencies = _Dart_KernelListDependenciesPtr
      .asFunction<Dart_KernelCompilationResult Function()>();

  /// Sets the kernel buffer which will be used to load Dart SDK sources
  /// dynamically at runtime.
  ///
  /// \param platform_kernel A buffer containing kernel which has sources for the
  /// Dart SDK populated. Note: The VM does not take ownership of this memory.
  ///
  /// \param platform_kernel_size The length of the platform_kernel buffer.
  void Dart_SetDartLibrarySourcesKernel(
    ffi.Pointer<ffi.Uint8> platform_kernel,
    int platform_kernel_size,
  ) {
    return _Dart_SetDartLibrarySourcesKernel(
      platform_kernel,
      platform_kernel_size,
    );
  }

  late final _Dart_SetDartLibrarySourcesKernelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_SetDartLibrarySourcesKernel');
  late final _Dart_SetDartLibrarySourcesKernel =
      _Dart_SetDartLibrarySourcesKernelPtr.asFunction<
          void Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Detect the null safety opt-in status.
  ///
  /// When running from source, it is based on the opt-in status of `script_uri`.
  /// When running from a kernel buffer, it is based on the mode used when
  /// generating `kernel_buffer`.
  /// When running from an appJIT or AOT snapshot, it is based on the mode used
  /// when generating `snapshot_data`.
  ///
  /// \param script_uri Uri of the script that contains the source code
  ///
  /// \param package_config Uri of the package configuration file (either in format
  /// of .packages or .dart_tool/package_config.json) for the null safety
  /// detection to resolve package imports against. If this parameter is not
  /// passed the package resolution of the parent isolate should be used.
  ///
  /// \param original_working_directory current working directory when the VM
  /// process was launched, this is used to correctly resolve the path specified
  /// for package_config.
  ///
  /// \param snapshot_data
  ///
  /// \param snapshot_instructions Buffers containing a snapshot of the
  /// isolate or NULL if no snapshot is provided. If provided, the buffers must
  /// remain valid until the isolate shuts down.
  ///
  /// \param kernel_buffer
  ///
  /// \param kernel_buffer_size A buffer which contains a kernel/DIL program. Must
  /// remain valid until isolate shutdown.
  ///
  /// \return Returns true if the null safety is opted in by the input being
  /// run `script_uri`, `snapshot_data` or `kernel_buffer`.
  bool Dart_DetectNullSafety(
    ffi.Pointer<pkg_ffi.Char> script_uri,
    ffi.Pointer<pkg_ffi.Char> package_config,
    ffi.Pointer<pkg_ffi.Char> original_working_directory,
    ffi.Pointer<ffi.Uint8> snapshot_data,
    ffi.Pointer<ffi.Uint8> snapshot_instructions,
    ffi.Pointer<ffi.Uint8> kernel_buffer,
    int kernel_buffer_size,
  ) {
    return _Dart_DetectNullSafety(
          script_uri,
          package_config,
          original_working_directory,
          snapshot_data,
          snapshot_instructions,
          kernel_buffer,
          kernel_buffer_size,
        ) !=
        0;
  }

  late final _Dart_DetectNullSafetyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.IntPtr)>>('Dart_DetectNullSafety');
  late final _Dart_DetectNullSafety = _Dart_DetectNullSafetyPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Uint8>,
          int)>();

  /// Returns true if isolate is the service isolate.
  ///
  /// \param isolate An isolate
  ///
  /// \return Returns true if 'isolate' is the service isolate.
  bool Dart_IsServiceIsolate(
    Dart_Isolate isolate,
  ) {
    return _Dart_IsServiceIsolate(
          isolate,
        ) !=
        0;
  }

  late final _Dart_IsServiceIsolatePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Dart_Isolate)>>(
          'Dart_IsServiceIsolate');
  late final _Dart_IsServiceIsolate =
      _Dart_IsServiceIsolatePtr.asFunction<int Function(Dart_Isolate)>();

  /// Writes the CPU profile to the timeline as a series of 'instant' events.
  ///
  /// Note that this is an expensive operation.
  ///
  /// \param main_port The main port of the Isolate whose profile samples to write.
  /// \param error An optional error, must be free()ed by caller.
  ///
  /// \return Returns true if the profile is successfully written and false
  /// otherwise.
  bool Dart_WriteProfileToTimeline(
    int main_port,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> error,
  ) {
    return _Dart_WriteProfileToTimeline(
          main_port,
          error,
        ) !=
        0;
  }

  late final _Dart_WriteProfileToTimelinePtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  Dart_Port, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>(
      'Dart_WriteProfileToTimeline');
  late final _Dart_WriteProfileToTimeline = _Dart_WriteProfileToTimelinePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  /// Compiles all functions reachable from entry points and marks
  /// the isolate to disallow future compilation.
  ///
  /// Entry points should be specified using `@pragma("vm:entry-point")`
  /// annotation.
  ///
  /// \return An error handle if a compilation error or runtime error running const
  /// constructors was encountered.
  Object Dart_Precompile() {
    return _Dart_Precompile();
  }

  late final _Dart_PrecompilePtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_Precompile');
  late final _Dart_Precompile =
      _Dart_PrecompilePtr.asFunction<Object Function()>();

  Object Dart_LoadingUnitLibraryUris(
    int loading_unit_id,
  ) {
    return _Dart_LoadingUnitLibraryUris(
      loading_unit_id,
    );
  }

  late final _Dart_LoadingUnitLibraryUrisPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>(
          'Dart_LoadingUnitLibraryUris');
  late final _Dart_LoadingUnitLibraryUris =
      _Dart_LoadingUnitLibraryUrisPtr.asFunction<Object Function(int)>();

  /// Creates a precompiled snapshot.
  /// - A root library must have been loaded.
  /// - Dart_Precompile must have been called.
  ///
  /// Outputs an assembly file defining the symbols listed in the definitions
  /// above.
  ///
  /// The assembly should be compiled as a static or shared library and linked or
  /// loaded by the embedder. Running this snapshot requires a VM compiled with
  /// DART_PRECOMPILED_SNAPSHOT. The kDartVmSnapshotData and
  /// kDartVmSnapshotInstructions should be passed to Dart_Initialize. The
  /// kDartIsolateSnapshotData and kDartIsolateSnapshotInstructions should be
  /// passed to Dart_CreateIsolateGroup.
  ///
  /// The callback will be invoked one or more times to provide the assembly code.
  ///
  /// If stripped is true, then the assembly code will not include DWARF
  /// debugging sections.
  ///
  /// If debug_callback_data is provided, debug_callback_data will be used with
  /// the callback to provide separate debugging information.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppAOTSnapshotAsAssembly(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
    bool stripped,
    ffi.Pointer<ffi.Void> debug_callback_data,
  ) {
    return _Dart_CreateAppAOTSnapshotAsAssembly(
      callback,
      callback_data,
      stripped ? 1 : 0,
      debug_callback_data,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsAssemblyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Uint8,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateAppAOTSnapshotAsAssembly');
  late final _Dart_CreateAppAOTSnapshotAsAssembly =
      _Dart_CreateAppAOTSnapshotAsAssemblyPtr.asFunction<
          Object Function(Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  Object Dart_CreateAppAOTSnapshotAsAssemblies(
    Dart_CreateLoadingUnitCallback next_callback,
    ffi.Pointer<ffi.Void> next_callback_data,
    bool stripped,
    Dart_StreamingWriteCallback write_callback,
    Dart_StreamingCloseCallback close_callback,
  ) {
    return _Dart_CreateAppAOTSnapshotAsAssemblies(
      next_callback,
      next_callback_data,
      stripped ? 1 : 0,
      write_callback,
      close_callback,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsAssembliesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Handle Function(
                  Dart_CreateLoadingUnitCallback,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  Dart_StreamingWriteCallback,
                  Dart_StreamingCloseCallback)>>(
      'Dart_CreateAppAOTSnapshotAsAssemblies');
  late final _Dart_CreateAppAOTSnapshotAsAssemblies =
      _Dart_CreateAppAOTSnapshotAsAssembliesPtr.asFunction<
          Object Function(Dart_CreateLoadingUnitCallback, ffi.Pointer<ffi.Void>,
              int, Dart_StreamingWriteCallback, Dart_StreamingCloseCallback)>();

  /// Creates a precompiled snapshot.
  /// - A root library must have been loaded.
  /// - Dart_Precompile must have been called.
  ///
  /// Outputs an ELF shared library defining the symbols
  /// - _kDartVmSnapshotData
  /// - _kDartVmSnapshotInstructions
  /// - _kDartIsolateSnapshotData
  /// - _kDartIsolateSnapshotInstructions
  ///
  /// The shared library should be dynamically loaded by the embedder.
  /// Running this snapshot requires a VM compiled with DART_PRECOMPILED_SNAPSHOT.
  /// The kDartVmSnapshotData and kDartVmSnapshotInstructions should be passed to
  /// Dart_Initialize. The kDartIsolateSnapshotData and
  /// kDartIsolateSnapshotInstructions should be passed to Dart_CreateIsolate.
  ///
  /// The callback will be invoked one or more times to provide the binary output.
  ///
  /// If stripped is true, then the binary output will not include DWARF
  /// debugging sections.
  ///
  /// If debug_callback_data is provided, debug_callback_data will be used with
  /// the callback to provide separate debugging information.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppAOTSnapshotAsElf(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
    bool stripped,
    ffi.Pointer<ffi.Void> debug_callback_data,
  ) {
    return _Dart_CreateAppAOTSnapshotAsElf(
      callback,
      callback_data,
      stripped ? 1 : 0,
      debug_callback_data,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsElfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Uint8,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateAppAOTSnapshotAsElf');
  late final _Dart_CreateAppAOTSnapshotAsElf =
      _Dart_CreateAppAOTSnapshotAsElfPtr.asFunction<
          Object Function(Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  Object Dart_CreateAppAOTSnapshotAsElfs(
    Dart_CreateLoadingUnitCallback next_callback,
    ffi.Pointer<ffi.Void> next_callback_data,
    bool stripped,
    Dart_StreamingWriteCallback write_callback,
    Dart_StreamingCloseCallback close_callback,
  ) {
    return _Dart_CreateAppAOTSnapshotAsElfs(
      next_callback,
      next_callback_data,
      stripped ? 1 : 0,
      write_callback,
      close_callback,
    );
  }

  late final _Dart_CreateAppAOTSnapshotAsElfsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              Dart_CreateLoadingUnitCallback,
              ffi.Pointer<ffi.Void>,
              ffi.Uint8,
              Dart_StreamingWriteCallback,
              Dart_StreamingCloseCallback)>>('Dart_CreateAppAOTSnapshotAsElfs');
  late final _Dart_CreateAppAOTSnapshotAsElfs =
      _Dart_CreateAppAOTSnapshotAsElfsPtr.asFunction<
          Object Function(Dart_CreateLoadingUnitCallback, ffi.Pointer<ffi.Void>,
              int, Dart_StreamingWriteCallback, Dart_StreamingCloseCallback)>();

  /// Like Dart_CreateAppAOTSnapshotAsAssembly, but only includes
  /// kDartVmSnapshotData and kDartVmSnapshotInstructions. It also does
  /// not strip DWARF information from the generated assembly or allow for
  /// separate debug information.
  Object Dart_CreateVMAOTSnapshotAsAssembly(
    Dart_StreamingWriteCallback callback,
    ffi.Pointer<ffi.Void> callback_data,
  ) {
    return _Dart_CreateVMAOTSnapshotAsAssembly(
      callback,
      callback_data,
    );
  }

  late final _Dart_CreateVMAOTSnapshotAsAssemblyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(Dart_StreamingWriteCallback,
              ffi.Pointer<ffi.Void>)>>('Dart_CreateVMAOTSnapshotAsAssembly');
  late final _Dart_CreateVMAOTSnapshotAsAssembly =
      _Dart_CreateVMAOTSnapshotAsAssemblyPtr.asFunction<
          Object Function(
              Dart_StreamingWriteCallback, ffi.Pointer<ffi.Void>)>();

  /// Sorts the class-ids in depth first traversal order of the inheritance
  /// tree. This is a costly operation, but it can make method dispatch
  /// more efficient and is done before writing snapshots.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_SortClasses() {
    return _Dart_SortClasses();
  }

  late final _Dart_SortClassesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_SortClasses');
  late final _Dart_SortClasses =
      _Dart_SortClassesPtr.asFunction<Object Function()>();

  /// Creates a snapshot that caches compiled code and type feedback for faster
  /// startup and quicker warmup in a subsequent process.
  ///
  /// Outputs a snapshot in two pieces. The pieces should be passed to
  /// Dart_CreateIsolateGroup in a VM using the same VM snapshot pieces used in the
  /// current VM. The instructions piece must be loaded with read and execute
  /// permissions; the data piece may be loaded as read-only.
  ///
  /// - Requires the VM to have not been started with --precompilation.
  /// - Not supported when targeting IA32.
  /// - The VM writing the snapshot and the VM reading the snapshot must be the
  /// same version, must be built in the same DEBUG/RELEASE/PRODUCT mode, must
  /// be targeting the same architecture, and must both be in checked mode or
  /// both in unchecked mode.
  ///
  /// The buffers are scope allocated and are only valid until the next call to
  /// Dart_ExitScope.
  ///
  /// \return A valid handle if no error occurs during the operation.
  Object Dart_CreateAppJITSnapshotAsBlobs(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_instructions_size,
  ) {
    return _Dart_CreateAppJITSnapshotAsBlobs(
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      isolate_snapshot_instructions_buffer,
      isolate_snapshot_instructions_size,
    );
  }

  late final _Dart_CreateAppJITSnapshotAsBlobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_CreateAppJITSnapshotAsBlobs');
  late final _Dart_CreateAppJITSnapshotAsBlobs =
      _Dart_CreateAppJITSnapshotAsBlobsPtr.asFunction<
          Object Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Like Dart_CreateAppJITSnapshotAsBlobs, but also creates a new VM snapshot.
  Object Dart_CreateCoreJITSnapshotAsBlobs(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> vm_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> vm_snapshot_instructions_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_data_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_data_size,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> isolate_snapshot_instructions_buffer,
    ffi.Pointer<ffi.IntPtr> isolate_snapshot_instructions_size,
  ) {
    return _Dart_CreateCoreJITSnapshotAsBlobs(
      vm_snapshot_data_buffer,
      vm_snapshot_data_size,
      vm_snapshot_instructions_buffer,
      vm_snapshot_instructions_size,
      isolate_snapshot_data_buffer,
      isolate_snapshot_data_size,
      isolate_snapshot_instructions_buffer,
      isolate_snapshot_instructions_size,
    );
  }

  late final _Dart_CreateCoreJITSnapshotAsBlobsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_CreateCoreJITSnapshotAsBlobs');
  late final _Dart_CreateCoreJITSnapshotAsBlobs =
      _Dart_CreateCoreJITSnapshotAsBlobsPtr.asFunction<
          Object Function(
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>();

  /// Get obfuscation map for precompiled code.
  ///
  /// Obfuscation map is encoded as a JSON array of pairs (original name,
  /// obfuscated name).
  ///
  /// \return Returns an error handler if the VM was built in a mode that does not
  /// support obfuscation.
  Object Dart_GetObfuscationMap(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> buffer,
    ffi.Pointer<ffi.IntPtr> buffer_length,
  ) {
    return _Dart_GetObfuscationMap(
      buffer,
      buffer_length,
    );
  }

  late final _Dart_GetObfuscationMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Handle Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.IntPtr>)>>('Dart_GetObfuscationMap');
  late final _Dart_GetObfuscationMap = _Dart_GetObfuscationMapPtr.asFunction<
      Object Function(
          ffi.Pointer<ffi.Pointer<ffi.Uint8>>, ffi.Pointer<ffi.IntPtr>)>();

  /// Returns whether the VM only supports running from precompiled snapshots and
  /// not from any other kind of snapshot or from source (that is, the VM was
  /// compiled with DART_PRECOMPILED_RUNTIME).
  bool Dart_IsPrecompiledRuntime() {
    return _Dart_IsPrecompiledRuntime() != 0;
  }

  late final _Dart_IsPrecompiledRuntimePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function()>>(
          'Dart_IsPrecompiledRuntime');
  late final _Dart_IsPrecompiledRuntime =
      _Dart_IsPrecompiledRuntimePtr.asFunction<int Function()>();

  /// Print a native stack trace. Used for crash handling.
  ///
  /// If context is NULL, prints the current stack trace. Otherwise, context
  /// should be a CONTEXT* (Windows) or ucontext_t* (POSIX) from a signal handler
  /// running on the current thread.
  void Dart_DumpNativeStackTrace(
    ffi.Pointer<ffi.Void> context,
  ) {
    return _Dart_DumpNativeStackTrace(
      context,
    );
  }

  late final _Dart_DumpNativeStackTracePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'Dart_DumpNativeStackTrace');
  late final _Dart_DumpNativeStackTrace = _Dart_DumpNativeStackTracePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  /// Indicate that the process is about to abort, and the Dart VM should not
  /// attempt to cleanup resources.
  void Dart_PrepareToAbort() {
    return _Dart_PrepareToAbort();
  }

  late final _Dart_PrepareToAbortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Dart_PrepareToAbort');
  late final _Dart_PrepareToAbort =
      _Dart_PrepareToAbortPtr.asFunction<void Function()>();

  /// Posts a message on some port. The message will contain the Dart_CObject
  /// object graph rooted in 'message'.
  ///
  /// While the message is being sent the state of the graph of Dart_CObject
  /// structures rooted in 'message' should not be accessed, as the message
  /// generation will make temporary modifications to the data. When the message
  /// has been sent the graph will be fully restored.
  ///
  /// If true is returned, the message was enqueued, and finalizers for external
  /// typed data will eventually run, even if the receiving isolate shuts down
  /// before processing the message. If false is returned, the message was not
  /// enqueued and ownership of external typed data in the message remains with the
  /// caller.
  ///
  /// This function may be called on any thread when the VM is running (that is,
  /// after Dart_Initialize has returned and before Dart_Cleanup has been called).
  ///
  /// \param port_id The destination port.
  /// \param message The message to send.
  ///
  /// \return True if the message was posted.
  bool Dart_PostCObject(
    int port_id,
    ffi.Pointer<Dart_CObject> message,
  ) {
    return _Dart_PostCObject(
          port_id,
          message,
        ) !=
        0;
  }

  late final _Dart_PostCObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              Dart_Port, ffi.Pointer<Dart_CObject>)>>('Dart_PostCObject');
  late final _Dart_PostCObject = _Dart_PostCObjectPtr.asFunction<
      int Function(int, ffi.Pointer<Dart_CObject>)>();

  /// Posts a message on some port. The message will contain the integer 'message'.
  ///
  /// \param port_id The destination port.
  /// \param message The message to send.
  ///
  /// \return True if the message was posted.
  bool Dart_PostInteger(
    int port_id,
    int message,
  ) {
    return _Dart_PostInteger(
          port_id,
          message,
        ) !=
        0;
  }

  late final _Dart_PostIntegerPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Dart_Port, ffi.Int64)>>(
          'Dart_PostInteger');
  late final _Dart_PostInteger =
      _Dart_PostIntegerPtr.asFunction<int Function(int, int)>();

  /// Creates a new native port.  When messages are received on this
  /// native port, then they will be dispatched to the provided native
  /// message handler.
  ///
  /// \param name The name of this port in debugging messages.
  /// \param handler The C handler to run when messages arrive on the port.
  /// \param handle_concurrently Is it okay to process requests on this
  /// native port concurrently?
  ///
  /// \return If successful, returns the port id for the native port.  In
  /// case of error, returns ILLEGAL_PORT.
  int Dart_NewNativePort(
    ffi.Pointer<pkg_ffi.Char> name,
    Dart_NativeMessageHandler handler,
    bool handle_concurrently,
  ) {
    return _Dart_NewNativePort(
      name,
      handler,
      handle_concurrently ? 1 : 0,
    );
  }

  late final _Dart_NewNativePortPtr = _lookup<
      ffi.NativeFunction<
          Dart_Port Function(ffi.Pointer<pkg_ffi.Char>,
              Dart_NativeMessageHandler, ffi.Uint8)>>('Dart_NewNativePort');
  late final _Dart_NewNativePort = _Dart_NewNativePortPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, Dart_NativeMessageHandler, int)>();

  /// Closes the native port with the given id.
  ///
  /// The port must have been allocated by a call to Dart_NewNativePort.
  ///
  /// \param native_port_id The id of the native port to close.
  ///
  /// \return Returns true if the port was closed successfully.
  bool Dart_CloseNativePort(
    int native_port_id,
  ) {
    return _Dart_CloseNativePort(
          native_port_id,
        ) !=
        0;
  }

  late final _Dart_CloseNativePortPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(Dart_Port)>>(
          'Dart_CloseNativePort');
  late final _Dart_CloseNativePort =
      _Dart_CloseNativePortPtr.asFunction<int Function(int)>();

  /// Forces all loaded classes and functions to be compiled eagerly in
  /// the current isolate..
  ///
  /// TODO(turnidge): Document.
  Object Dart_CompileAll() {
    return _Dart_CompileAll();
  }

  late final _Dart_CompileAllPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>('Dart_CompileAll');
  late final _Dart_CompileAll =
      _Dart_CompileAllPtr.asFunction<Object Function()>();

  /// Finalizes all classes.
  Object Dart_FinalizeAllClasses() {
    return _Dart_FinalizeAllClasses();
  }

  late final _Dart_FinalizeAllClassesPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function()>>(
          'Dart_FinalizeAllClasses');
  late final _Dart_FinalizeAllClasses =
      _Dart_FinalizeAllClassesPtr.asFunction<Object Function()>();

  ffi.Pointer<ffi.Void> Dart_ExecuteInternalCommand(
    ffi.Pointer<pkg_ffi.Char> command,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _Dart_ExecuteInternalCommand(
      command,
      arg,
    );
  }

  late final _Dart_ExecuteInternalCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('Dart_ExecuteInternalCommand');
  late final _Dart_ExecuteInternalCommand =
      _Dart_ExecuteInternalCommandPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Void>)>();

  /// \mainpage Dynamically Linked Dart API
  ///
  /// This exposes a subset of symbols from dart_api.h and dart_native_api.h
  /// available in every Dart embedder through dynamic linking.
  ///
  /// All symbols are postfixed with _DL to indicate that they are dynamically
  /// linked and to prevent conflicts with the original symbol.
  ///
  /// Link `dart_api_dl.c` file into your library and invoke
  /// `Dart_InitializeApiDL` with `NativeApi.initializeApiDLData`.
  int Dart_InitializeApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _Dart_InitializeApiDL(
      data,
    );
  }

  late final _Dart_InitializeApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'Dart_InitializeApiDL');
  late final _Dart_InitializeApiDL = _Dart_InitializeApiDLPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<Dart_PostCObject_Type> _Dart_PostCObject_DL =
      _lookup<Dart_PostCObject_Type>('Dart_PostCObject_DL');

  Dart_PostCObject_Type get Dart_PostCObject_DL => _Dart_PostCObject_DL.value;

  set Dart_PostCObject_DL(Dart_PostCObject_Type value) =>
      _Dart_PostCObject_DL.value = value;

  late final ffi.Pointer<Dart_PostInteger_Type> _Dart_PostInteger_DL =
      _lookup<Dart_PostInteger_Type>('Dart_PostInteger_DL');

  Dart_PostInteger_Type get Dart_PostInteger_DL => _Dart_PostInteger_DL.value;

  set Dart_PostInteger_DL(Dart_PostInteger_Type value) =>
      _Dart_PostInteger_DL.value = value;

  late final ffi.Pointer<Dart_NewNativePort_Type> _Dart_NewNativePort_DL =
      _lookup<Dart_NewNativePort_Type>('Dart_NewNativePort_DL');

  Dart_NewNativePort_Type get Dart_NewNativePort_DL =>
      _Dart_NewNativePort_DL.value;

  set Dart_NewNativePort_DL(Dart_NewNativePort_Type value) =>
      _Dart_NewNativePort_DL.value = value;

  late final ffi.Pointer<Dart_CloseNativePort_Type> _Dart_CloseNativePort_DL =
      _lookup<Dart_CloseNativePort_Type>('Dart_CloseNativePort_DL');

  Dart_CloseNativePort_Type get Dart_CloseNativePort_DL =>
      _Dart_CloseNativePort_DL.value;

  set Dart_CloseNativePort_DL(Dart_CloseNativePort_Type value) =>
      _Dart_CloseNativePort_DL.value = value;

  late final ffi.Pointer<Dart_IsError_Type> _Dart_IsError_DL =
      _lookup<Dart_IsError_Type>('Dart_IsError_DL');

  Dart_IsError_Type get Dart_IsError_DL => _Dart_IsError_DL.value;

  set Dart_IsError_DL(Dart_IsError_Type value) =>
      _Dart_IsError_DL.value = value;

  late final ffi.Pointer<Dart_IsApiError_Type> _Dart_IsApiError_DL =
      _lookup<Dart_IsApiError_Type>('Dart_IsApiError_DL');

  Dart_IsApiError_Type get Dart_IsApiError_DL => _Dart_IsApiError_DL.value;

  set Dart_IsApiError_DL(Dart_IsApiError_Type value) =>
      _Dart_IsApiError_DL.value = value;

  late final ffi.Pointer<Dart_IsUnhandledExceptionError_Type>
      _Dart_IsUnhandledExceptionError_DL =
      _lookup<Dart_IsUnhandledExceptionError_Type>(
          'Dart_IsUnhandledExceptionError_DL');

  Dart_IsUnhandledExceptionError_Type get Dart_IsUnhandledExceptionError_DL =>
      _Dart_IsUnhandledExceptionError_DL.value;

  set Dart_IsUnhandledExceptionError_DL(
          Dart_IsUnhandledExceptionError_Type value) =>
      _Dart_IsUnhandledExceptionError_DL.value = value;

  late final ffi.Pointer<Dart_IsCompilationError_Type>
      _Dart_IsCompilationError_DL =
      _lookup<Dart_IsCompilationError_Type>('Dart_IsCompilationError_DL');

  Dart_IsCompilationError_Type get Dart_IsCompilationError_DL =>
      _Dart_IsCompilationError_DL.value;

  set Dart_IsCompilationError_DL(Dart_IsCompilationError_Type value) =>
      _Dart_IsCompilationError_DL.value = value;

  late final ffi.Pointer<Dart_IsFatalError_Type> _Dart_IsFatalError_DL =
      _lookup<Dart_IsFatalError_Type>('Dart_IsFatalError_DL');

  Dart_IsFatalError_Type get Dart_IsFatalError_DL =>
      _Dart_IsFatalError_DL.value;

  set Dart_IsFatalError_DL(Dart_IsFatalError_Type value) =>
      _Dart_IsFatalError_DL.value = value;

  late final ffi.Pointer<Dart_GetError_Type> _Dart_GetError_DL =
      _lookup<Dart_GetError_Type>('Dart_GetError_DL');

  Dart_GetError_Type get Dart_GetError_DL => _Dart_GetError_DL.value;

  set Dart_GetError_DL(Dart_GetError_Type value) =>
      _Dart_GetError_DL.value = value;

  late final ffi.Pointer<Dart_ErrorHasException_Type>
      _Dart_ErrorHasException_DL =
      _lookup<Dart_ErrorHasException_Type>('Dart_ErrorHasException_DL');

  Dart_ErrorHasException_Type get Dart_ErrorHasException_DL =>
      _Dart_ErrorHasException_DL.value;

  set Dart_ErrorHasException_DL(Dart_ErrorHasException_Type value) =>
      _Dart_ErrorHasException_DL.value = value;

  late final ffi.Pointer<Dart_ErrorGetException_Type>
      _Dart_ErrorGetException_DL =
      _lookup<Dart_ErrorGetException_Type>('Dart_ErrorGetException_DL');

  Dart_ErrorGetException_Type get Dart_ErrorGetException_DL =>
      _Dart_ErrorGetException_DL.value;

  set Dart_ErrorGetException_DL(Dart_ErrorGetException_Type value) =>
      _Dart_ErrorGetException_DL.value = value;

  late final ffi.Pointer<Dart_ErrorGetStackTrace_Type>
      _Dart_ErrorGetStackTrace_DL =
      _lookup<Dart_ErrorGetStackTrace_Type>('Dart_ErrorGetStackTrace_DL');

  Dart_ErrorGetStackTrace_Type get Dart_ErrorGetStackTrace_DL =>
      _Dart_ErrorGetStackTrace_DL.value;

  set Dart_ErrorGetStackTrace_DL(Dart_ErrorGetStackTrace_Type value) =>
      _Dart_ErrorGetStackTrace_DL.value = value;

  late final ffi.Pointer<Dart_NewApiError_Type> _Dart_NewApiError_DL =
      _lookup<Dart_NewApiError_Type>('Dart_NewApiError_DL');

  Dart_NewApiError_Type get Dart_NewApiError_DL => _Dart_NewApiError_DL.value;

  set Dart_NewApiError_DL(Dart_NewApiError_Type value) =>
      _Dart_NewApiError_DL.value = value;

  late final ffi.Pointer<Dart_NewCompilationError_Type>
      _Dart_NewCompilationError_DL =
      _lookup<Dart_NewCompilationError_Type>('Dart_NewCompilationError_DL');

  Dart_NewCompilationError_Type get Dart_NewCompilationError_DL =>
      _Dart_NewCompilationError_DL.value;

  set Dart_NewCompilationError_DL(Dart_NewCompilationError_Type value) =>
      _Dart_NewCompilationError_DL.value = value;

  late final ffi.Pointer<Dart_NewUnhandledExceptionError_Type>
      _Dart_NewUnhandledExceptionError_DL =
      _lookup<Dart_NewUnhandledExceptionError_Type>(
          'Dart_NewUnhandledExceptionError_DL');

  Dart_NewUnhandledExceptionError_Type get Dart_NewUnhandledExceptionError_DL =>
      _Dart_NewUnhandledExceptionError_DL.value;

  set Dart_NewUnhandledExceptionError_DL(
          Dart_NewUnhandledExceptionError_Type value) =>
      _Dart_NewUnhandledExceptionError_DL.value = value;

  late final ffi.Pointer<Dart_PropagateError_Type> _Dart_PropagateError_DL =
      _lookup<Dart_PropagateError_Type>('Dart_PropagateError_DL');

  Dart_PropagateError_Type get Dart_PropagateError_DL =>
      _Dart_PropagateError_DL.value;

  set Dart_PropagateError_DL(Dart_PropagateError_Type value) =>
      _Dart_PropagateError_DL.value = value;

  late final ffi.Pointer<Dart_HandleFromPersistent_Type>
      _Dart_HandleFromPersistent_DL =
      _lookup<Dart_HandleFromPersistent_Type>('Dart_HandleFromPersistent_DL');

  Dart_HandleFromPersistent_Type get Dart_HandleFromPersistent_DL =>
      _Dart_HandleFromPersistent_DL.value;

  set Dart_HandleFromPersistent_DL(Dart_HandleFromPersistent_Type value) =>
      _Dart_HandleFromPersistent_DL.value = value;

  late final ffi.Pointer<Dart_HandleFromWeakPersistent_Type>
      _Dart_HandleFromWeakPersistent_DL =
      _lookup<Dart_HandleFromWeakPersistent_Type>(
          'Dart_HandleFromWeakPersistent_DL');

  Dart_HandleFromWeakPersistent_Type get Dart_HandleFromWeakPersistent_DL =>
      _Dart_HandleFromWeakPersistent_DL.value;

  set Dart_HandleFromWeakPersistent_DL(
          Dart_HandleFromWeakPersistent_Type value) =>
      _Dart_HandleFromWeakPersistent_DL.value = value;

  late final ffi.Pointer<Dart_NewPersistentHandle_Type>
      _Dart_NewPersistentHandle_DL =
      _lookup<Dart_NewPersistentHandle_Type>('Dart_NewPersistentHandle_DL');

  Dart_NewPersistentHandle_Type get Dart_NewPersistentHandle_DL =>
      _Dart_NewPersistentHandle_DL.value;

  set Dart_NewPersistentHandle_DL(Dart_NewPersistentHandle_Type value) =>
      _Dart_NewPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_SetPersistentHandle_Type>
      _Dart_SetPersistentHandle_DL =
      _lookup<Dart_SetPersistentHandle_Type>('Dart_SetPersistentHandle_DL');

  Dart_SetPersistentHandle_Type get Dart_SetPersistentHandle_DL =>
      _Dart_SetPersistentHandle_DL.value;

  set Dart_SetPersistentHandle_DL(Dart_SetPersistentHandle_Type value) =>
      _Dart_SetPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeletePersistentHandle_Type>
      _Dart_DeletePersistentHandle_DL =
      _lookup<Dart_DeletePersistentHandle_Type>(
          'Dart_DeletePersistentHandle_DL');

  Dart_DeletePersistentHandle_Type get Dart_DeletePersistentHandle_DL =>
      _Dart_DeletePersistentHandle_DL.value;

  set Dart_DeletePersistentHandle_DL(Dart_DeletePersistentHandle_Type value) =>
      _Dart_DeletePersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_NewWeakPersistentHandle_Type>
      _Dart_NewWeakPersistentHandle_DL =
      _lookup<Dart_NewWeakPersistentHandle_Type>(
          'Dart_NewWeakPersistentHandle_DL');

  Dart_NewWeakPersistentHandle_Type get Dart_NewWeakPersistentHandle_DL =>
      _Dart_NewWeakPersistentHandle_DL.value;

  set Dart_NewWeakPersistentHandle_DL(
          Dart_NewWeakPersistentHandle_Type value) =>
      _Dart_NewWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeleteWeakPersistentHandle_Type>
      _Dart_DeleteWeakPersistentHandle_DL =
      _lookup<Dart_DeleteWeakPersistentHandle_Type>(
          'Dart_DeleteWeakPersistentHandle_DL');

  Dart_DeleteWeakPersistentHandle_Type get Dart_DeleteWeakPersistentHandle_DL =>
      _Dart_DeleteWeakPersistentHandle_DL.value;

  set Dart_DeleteWeakPersistentHandle_DL(
          Dart_DeleteWeakPersistentHandle_Type value) =>
      _Dart_DeleteWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<Dart_UpdateExternalSize_Type>
      _Dart_UpdateExternalSize_DL =
      _lookup<Dart_UpdateExternalSize_Type>('Dart_UpdateExternalSize_DL');

  Dart_UpdateExternalSize_Type get Dart_UpdateExternalSize_DL =>
      _Dart_UpdateExternalSize_DL.value;

  set Dart_UpdateExternalSize_DL(Dart_UpdateExternalSize_Type value) =>
      _Dart_UpdateExternalSize_DL.value = value;

  late final ffi.Pointer<Dart_NewFinalizableHandle_Type>
      _Dart_NewFinalizableHandle_DL =
      _lookup<Dart_NewFinalizableHandle_Type>('Dart_NewFinalizableHandle_DL');

  Dart_NewFinalizableHandle_Type get Dart_NewFinalizableHandle_DL =>
      _Dart_NewFinalizableHandle_DL.value;

  set Dart_NewFinalizableHandle_DL(Dart_NewFinalizableHandle_Type value) =>
      _Dart_NewFinalizableHandle_DL.value = value;

  late final ffi.Pointer<Dart_DeleteFinalizableHandle_Type>
      _Dart_DeleteFinalizableHandle_DL =
      _lookup<Dart_DeleteFinalizableHandle_Type>(
          'Dart_DeleteFinalizableHandle_DL');

  Dart_DeleteFinalizableHandle_Type get Dart_DeleteFinalizableHandle_DL =>
      _Dart_DeleteFinalizableHandle_DL.value;

  set Dart_DeleteFinalizableHandle_DL(
          Dart_DeleteFinalizableHandle_Type value) =>
      _Dart_DeleteFinalizableHandle_DL.value = value;

  late final ffi.Pointer<Dart_UpdateFinalizableExternalSize_Type>
      _Dart_UpdateFinalizableExternalSize_DL =
      _lookup<Dart_UpdateFinalizableExternalSize_Type>(
          'Dart_UpdateFinalizableExternalSize_DL');

  Dart_UpdateFinalizableExternalSize_Type
      get Dart_UpdateFinalizableExternalSize_DL =>
          _Dart_UpdateFinalizableExternalSize_DL.value;

  set Dart_UpdateFinalizableExternalSize_DL(
          Dart_UpdateFinalizableExternalSize_Type value) =>
      _Dart_UpdateFinalizableExternalSize_DL.value = value;

  late final ffi.Pointer<Dart_Post_Type> _Dart_Post_DL =
      _lookup<Dart_Post_Type>('Dart_Post_DL');

  Dart_Post_Type get Dart_Post_DL => _Dart_Post_DL.value;

  set Dart_Post_DL(Dart_Post_Type value) => _Dart_Post_DL.value = value;

  late final ffi.Pointer<Dart_NewSendPort_Type> _Dart_NewSendPort_DL =
      _lookup<Dart_NewSendPort_Type>('Dart_NewSendPort_DL');

  Dart_NewSendPort_Type get Dart_NewSendPort_DL => _Dart_NewSendPort_DL.value;

  set Dart_NewSendPort_DL(Dart_NewSendPort_Type value) =>
      _Dart_NewSendPort_DL.value = value;

  late final ffi.Pointer<Dart_SendPortGetId_Type> _Dart_SendPortGetId_DL =
      _lookup<Dart_SendPortGetId_Type>('Dart_SendPortGetId_DL');

  Dart_SendPortGetId_Type get Dart_SendPortGetId_DL =>
      _Dart_SendPortGetId_DL.value;

  set Dart_SendPortGetId_DL(Dart_SendPortGetId_Type value) =>
      _Dart_SendPortGetId_DL.value = value;

  late final ffi.Pointer<Dart_EnterScope_Type> _Dart_EnterScope_DL =
      _lookup<Dart_EnterScope_Type>('Dart_EnterScope_DL');

  Dart_EnterScope_Type get Dart_EnterScope_DL => _Dart_EnterScope_DL.value;

  set Dart_EnterScope_DL(Dart_EnterScope_Type value) =>
      _Dart_EnterScope_DL.value = value;

  late final ffi.Pointer<Dart_ExitScope_Type> _Dart_ExitScope_DL =
      _lookup<Dart_ExitScope_Type>('Dart_ExitScope_DL');

  Dart_ExitScope_Type get Dart_ExitScope_DL => _Dart_ExitScope_DL.value;

  set Dart_ExitScope_DL(Dart_ExitScope_Type value) =>
      _Dart_ExitScope_DL.value = value;

  ffi.Pointer<ObjCObject> NSStringFromSelector12(
    ffi.Pointer<ObjCSel> aSelector,
  ) {
    return _NSStringFromSelector12(
      aSelector,
    );
  }

  late final _NSStringFromSelector12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCSel>)>>('NSStringFromSelector');
  late final _NSStringFromSelector12 = _NSStringFromSelector12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCSel>)>();

  ffi.Pointer<ObjCSel> NSSelectorFromString12(
    ffi.Pointer<ObjCObject> aSelectorName,
  ) {
    return _NSSelectorFromString12(
      aSelectorName,
    );
  }

  late final _NSSelectorFromString12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCSel> Function(
              ffi.Pointer<ObjCObject>)>>('NSSelectorFromString');
  late final _NSSelectorFromString12 = _NSSelectorFromString12Ptr.asFunction<
      ffi.Pointer<ObjCSel> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromClass12(
    ffi.Pointer<ObjCObject> aClass,
  ) {
    return _NSStringFromClass12(
      aClass,
    );
  }

  late final _NSStringFromClass12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromClass');
  late final _NSStringFromClass12 = _NSStringFromClass12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSClassFromString12(
    ffi.Pointer<ObjCObject> aClassName,
  ) {
    return _NSClassFromString12(
      aClassName,
    );
  }

  late final _NSClassFromString12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSClassFromString');
  late final _NSClassFromString12 = _NSClassFromString12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSStringFromProtocol12(
    ffi.Pointer<ObjCObject> proto,
  ) {
    return _NSStringFromProtocol12(
      proto,
    );
  }

  late final _NSStringFromProtocol12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol12 = _NSStringFromProtocol12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSProtocolFromString12(
    ffi.Pointer<ObjCObject> namestr,
  ) {
    return _NSProtocolFromString12(
      namestr,
    );
  }

  late final _NSProtocolFromString12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>)>>('NSProtocolFromString');
  late final _NSProtocolFromString12 = _NSProtocolFromString12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment12(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment12(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignment12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment12 = _NSGetSizeAndAlignment12Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog12(
    ffi.Pointer<ObjCObject> format,
  ) {
    return _NSLog12(
      format,
    );
  }

  late final _NSLog12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSLog');
  late final _NSLog12 =
      _NSLog12Ptr.asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  void NSLogv12(
    ffi.Pointer<ObjCObject> format,
    va_list args,
  ) {
    return _NSLogv12(
      format,
      args,
    );
  }

  late final _NSLogv12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ObjCObject>, va_list)>>('NSLogv');
  late final _NSLogv12 = _NSLogv12Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>, va_list)>();

  CFRange __CFRangeMake12(
    int loc,
    int len,
  ) {
    return ___CFRangeMake12(
      loc,
      len,
    );
  }

  late final ___CFRangeMake12Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake12 =
      ___CFRangeMake12Ptr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID12() {
    return _CFNullGetTypeID12();
  }

  late final _CFNullGetTypeID12Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID12 =
      _CFNullGetTypeID12Ptr.asFunction<int Function()>();

  int CFAllocatorGetTypeID12() {
    return _CFAllocatorGetTypeID12();
  }

  late final _CFAllocatorGetTypeID12Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID12 =
      _CFAllocatorGetTypeID12Ptr.asFunction<int Function()>();

  void CFAllocatorSetDefault12(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault12(
      allocator,
    );
  }

  late final _CFAllocatorSetDefault12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault12 =
      _CFAllocatorSetDefault12Ptr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault12() {
    return _CFAllocatorGetDefault12();
  }

  late final _CFAllocatorGetDefault12Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault12 =
      _CFAllocatorGetDefault12Ptr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate12(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate12(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreate12Ptr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate12 = _CFAllocatorCreate12Ptr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate12(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate12(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocate12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate12 = _CFAllocatorAllocate12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate12(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate12(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocate12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate12 = _CFAllocatorReallocate12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate12(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate12(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocate12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate12 = _CFAllocatorDeallocate12Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize12(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize12(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSize12Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize12 =
      _CFAllocatorGetPreferredSizeForSize12Ptr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext12(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext12(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContext12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext12 = _CFAllocatorGetContext12Ptr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID12(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID12(
      cf,
    );
  }

  late final _CFGetTypeID12Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID12 =
      _CFGetTypeID12Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription12(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription12(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescription12Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription12 =
      _CFCopyTypeIDDescription12Ptr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain12(
    CFTypeRef cf,
  ) {
    return _CFRetain12(
      cf,
    );
  }

  late final _CFRetain12Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain12 =
      _CFRetain12Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease12(
    CFTypeRef cf,
  ) {
    return _CFRelease12(
      cf,
    );
  }

  late final _CFRelease12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease12 =
      _CFRelease12Ptr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease12(
    CFTypeRef arg,
  ) {
    return _CFAutorelease12(
      arg,
    );
  }

  late final _CFAutorelease12Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease12 =
      _CFAutorelease12Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount12(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount12(
      cf,
    );
  }

  late final _CFGetRetainCount12Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount12 =
      _CFGetRetainCount12Ptr.asFunction<int Function(CFTypeRef)>();

  int CFEqual12(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual12(
      cf1,
      cf2,
    );
  }

  late final _CFEqual12Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual12 =
      _CFEqual12Ptr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash12(
    CFTypeRef cf,
  ) {
    return _CFHash12(
      cf,
    );
  }

  late final _CFHash12Ptr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash12 = _CFHash12Ptr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription12(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription12(
      cf,
    );
  }

  late final _CFCopyDescription12Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription12 =
      _CFCopyDescription12Ptr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator12(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator12(
      cf,
    );
  }

  late final _CFGetAllocator12Ptr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator12 =
      _CFGetAllocator12Ptr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable12(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable12(
      cf,
    );
  }

  late final _CFMakeCollectable12Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable12 =
      _CFMakeCollectable12Ptr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone12() {
    return _NSDefaultMallocZone12();
  }

  late final _NSDefaultMallocZone12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone12 =
      _NSDefaultMallocZone12Ptr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone12(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone12(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZone12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone12 = _NSCreateZone12Ptr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone12(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone12(
      zone,
    );
  }

  late final _NSRecycleZone12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone12 =
      _NSRecycleZone12Ptr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName12(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ObjCObject> name,
  ) {
    return _NSSetZoneName12(
      zone,
      name,
    );
  }

  late final _NSSetZoneName12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>>('NSSetZoneName');
  late final _NSSetZoneName12 = _NSSetZoneName12Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSZoneName12(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName12(
      zone,
    );
  }

  late final _NSZoneName12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName12 = _NSZoneName12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer12(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer12(
      ptr,
    );
  }

  late final _NSZoneFromPointer12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer12 = _NSZoneFromPointer12Ptr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc12(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc12(
      zone,
      size,
    );
  }

  late final _NSZoneMalloc12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc12 = _NSZoneMalloc12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc12(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc12(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCalloc12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc12 = _NSZoneCalloc12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc12(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc12(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneRealloc12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc12 = _NSZoneRealloc12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree12(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree12(
      zone,
      ptr,
    );
  }

  late final _NSZoneFree12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree12 = _NSZoneFree12Ptr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable12(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable12(
      size,
      options,
    );
  }

  late final _NSAllocateCollectable12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable12 = _NSAllocateCollectable12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable12(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable12(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectable12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable12 =
      _NSReallocateCollectable12Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize12() {
    return _NSPageSize12();
  }

  late final _NSPageSize12Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize12 = _NSPageSize12Ptr.asFunction<int Function()>();

  int NSLogPageSize12() {
    return _NSLogPageSize12();
  }

  late final _NSLogPageSize12Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize12 =
      _NSLogPageSize12Ptr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize12(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize12(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSize12Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize12 =
      _NSRoundUpToMultipleOfPageSize12Ptr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize12(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize12(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSize12Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize12 =
      _NSRoundDownToMultipleOfPageSize12Ptr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages12(
    int bytes,
  ) {
    return _NSAllocateMemoryPages12(
      bytes,
    );
  }

  late final _NSAllocateMemoryPages12Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages12 = _NSAllocateMemoryPages12Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages12(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages12(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPages12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages12 = _NSDeallocateMemoryPages12Ptr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages12(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages12(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPages12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages12 = _NSCopyMemoryPages12Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable12() {
    return _NSRealMemoryAvailable12();
  }

  late final _NSRealMemoryAvailable12Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable12 =
      _NSRealMemoryAvailable12Ptr.asFunction<int Function()>();

  ffi.Pointer<ObjCObject> NSAllocateObject12(
    ffi.Pointer<ObjCObject> aClass,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSAllocateObject12(
      aClass,
      extraBytes,
      zone,
    );
  }

  late final _NSAllocateObject12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSAllocateObject');
  late final _NSAllocateObject12 = _NSAllocateObject12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  void NSDeallocateObject12(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDeallocateObject12(
      object,
    );
  }

  late final _NSDeallocateObject12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSDeallocateObject');
  late final _NSDeallocateObject12 = _NSDeallocateObject12Ptr.asFunction<
      void Function(ffi.Pointer<ObjCObject>)>();

  ffi.Pointer<ObjCObject> NSCopyObject12(
    ffi.Pointer<ObjCObject> object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject12(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObject12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject>, NSUInteger,
              ffi.Pointer<NSZone>)>>('NSCopyObject');
  late final _NSCopyObject12 = _NSCopyObject12Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone12(
    ffi.Pointer<ObjCObject> anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone12(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZone12Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<ObjCObject>,
              ffi.Pointer<NSZone>)>>('NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone12 = _NSShouldRetainWithZone12Ptr
      .asFunction<int Function(ffi.Pointer<ObjCObject>, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount12(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSIncrementExtraRefCount12(
      object,
    );
  }

  late final _NSIncrementExtraRefCount12Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount12 = _NSIncrementExtraRefCount12Ptr
      .asFunction<void Function(ffi.Pointer<ObjCObject>)>();

  bool NSDecrementExtraRefCountWasZero12(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSDecrementExtraRefCountWasZero12(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZero12Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ObjCObject>)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero12 =
      _NSDecrementExtraRefCountWasZero12Ptr.asFunction<
          int Function(ffi.Pointer<ObjCObject>)>();

  int NSExtraRefCount12(
    ffi.Pointer<ObjCObject> object,
  ) {
    return _NSExtraRefCount12(
      object,
    );
  }

  late final _NSExtraRefCount12Ptr =
      _lookup<ffi.NativeFunction<NSUInteger Function(ffi.Pointer<ObjCObject>)>>(
          'NSExtraRefCount');
  late final _NSExtraRefCount12 =
      _NSExtraRefCount12Ptr.asFunction<int Function(ffi.Pointer<ObjCObject>)>();

  int CFArrayGetTypeID1() {
    return _CFArrayGetTypeID1();
  }

  late final _CFArrayGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFArrayGetTypeID');
  late final _CFArrayGetTypeID1 =
      _CFArrayGetTypeID1Ptr.asFunction<int Function()>();

  CFArrayRef CFArrayCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreate1(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFArrayCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreate');
  late final _CFArrayCreate1 = _CFArrayCreate1Ptr.asFunction<
      CFArrayRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int, ffi.Pointer<CFArrayCallBacks>)>();

  CFArrayRef CFArrayCreateCopy1(
    CFAllocatorRef allocator,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateCopy1(
      allocator,
      theArray,
    );
  }

  late final _CFArrayCreateCopy1Ptr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFAllocatorRef, CFArrayRef)>>(
      'CFArrayCreateCopy');
  late final _CFArrayCreateCopy1 = _CFArrayCreateCopy1Ptr.asFunction<
      CFArrayRef Function(CFAllocatorRef, CFArrayRef)>();

  CFMutableArrayRef CFArrayCreateMutable1(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreateMutable1(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFArrayCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreateMutable');
  late final _CFArrayCreateMutable1 = _CFArrayCreateMutable1Ptr.asFunction<
      CFMutableArrayRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFArrayCallBacks>)>();

  CFMutableArrayRef CFArrayCreateMutableCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateMutableCopy1(
      allocator,
      capacity,
      theArray,
    );
  }

  late final _CFArrayCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              CFArrayRef)>>('CFArrayCreateMutableCopy');
  late final _CFArrayCreateMutableCopy1 =
      _CFArrayCreateMutableCopy1Ptr.asFunction<
          CFMutableArrayRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFArrayGetCount1(
    CFArrayRef theArray,
  ) {
    return _CFArrayGetCount1(
      theArray,
    );
  }

  late final _CFArrayGetCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFArrayRef)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount1 =
      _CFArrayGetCount1Ptr.asFunction<int Function(CFArrayRef)>();

  int CFArrayGetCountOfValue1(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetCountOfValue1(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetCountOfValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetCountOfValue');
  late final _CFArrayGetCountOfValue1 = _CFArrayGetCountOfValue1Ptr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayContainsValue1(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayContainsValue1(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayContainsValue1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayContainsValue');
  late final _CFArrayContainsValue1 = _CFArrayContainsValue1Ptr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex1(
    CFArrayRef theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex1(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndex1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFArrayRef, CFIndex)>>('CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex1 = _CFArrayGetValueAtIndex1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFArrayRef, int)>();

  void CFArrayGetValues1(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFArrayGetValues1(
      theArray,
      range,
      values,
    );
  }

  late final _CFArrayGetValues1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFArrayGetValues');
  late final _CFArrayGetValues1 = _CFArrayGetValues1Ptr.asFunction<
      void Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFArrayApplyFunction1(
    CFArrayRef theArray,
    CFRange range,
    CFArrayApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayApplyFunction1(
      theArray,
      range,
      applier,
      context,
    );
  }

  late final _CFArrayApplyFunction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayApplyFunction');
  late final _CFArrayApplyFunction1 = _CFArrayApplyFunction1Ptr.asFunction<
      void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
          ffi.Pointer<ffi.Void>)>();

  int CFArrayGetFirstIndexOfValue1(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetFirstIndexOfValue1(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetFirstIndexOfValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetFirstIndexOfValue');
  late final _CFArrayGetFirstIndexOfValue1 = _CFArrayGetFirstIndexOfValue1Ptr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayGetLastIndexOfValue1(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetLastIndexOfValue1(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetLastIndexOfValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetLastIndexOfValue');
  late final _CFArrayGetLastIndexOfValue1 = _CFArrayGetLastIndexOfValue1Ptr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayBSearchValues1(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayBSearchValues1(
      theArray,
      range,
      value,
      comparator,
      context,
    );
  }

  late final _CFArrayBSearchValues1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFArrayRef,
              CFRange,
              ffi.Pointer<ffi.Void>,
              CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayBSearchValues');
  late final _CFArrayBSearchValues1 = _CFArrayBSearchValues1Ptr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>,
          CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendValue1(
    CFMutableArrayRef theArray,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayAppendValue1(
      theArray,
      value,
    );
  }

  late final _CFArrayAppendValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, ffi.Pointer<ffi.Void>)>>('CFArrayAppendValue');
  late final _CFArrayAppendValue1 = _CFArrayAppendValue1Ptr.asFunction<
      void Function(CFMutableArrayRef, ffi.Pointer<ffi.Void>)>();

  void CFArrayInsertValueAtIndex1(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayInsertValueAtIndex1(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArrayInsertValueAtIndex1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArrayInsertValueAtIndex');
  late final _CFArrayInsertValueAtIndex1 =
      _CFArrayInsertValueAtIndex1Ptr.asFunction<
          void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArraySetValueAtIndex1(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArraySetValueAtIndex1(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArraySetValueAtIndex1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArraySetValueAtIndex');
  late final _CFArraySetValueAtIndex1 = _CFArraySetValueAtIndex1Ptr.asFunction<
      void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArrayRemoveValueAtIndex1(
    CFMutableArrayRef theArray,
    int idx,
  ) {
    return _CFArrayRemoveValueAtIndex1(
      theArray,
      idx,
    );
  }

  late final _CFArrayRemoveValueAtIndex1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef, CFIndex)>>(
      'CFArrayRemoveValueAtIndex');
  late final _CFArrayRemoveValueAtIndex1 = _CFArrayRemoveValueAtIndex1Ptr
      .asFunction<void Function(CFMutableArrayRef, int)>();

  void CFArrayRemoveAllValues1(
    CFMutableArrayRef theArray,
  ) {
    return _CFArrayRemoveAllValues1(
      theArray,
    );
  }

  late final _CFArrayRemoveAllValues1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef)>>(
          'CFArrayRemoveAllValues');
  late final _CFArrayRemoveAllValues1 = _CFArrayRemoveAllValues1Ptr.asFunction<
      void Function(CFMutableArrayRef)>();

  void CFArrayReplaceValues1(
    CFMutableArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> newValues,
    int newCount,
  ) {
    return _CFArrayReplaceValues1(
      theArray,
      range,
      newValues,
      newCount,
    );
  }

  late final _CFArrayReplaceValues1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef,
              CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFArrayReplaceValues');
  late final _CFArrayReplaceValues1 = _CFArrayReplaceValues1Ptr.asFunction<
      void Function(CFMutableArrayRef, CFRange,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  void CFArrayExchangeValuesAtIndices1(
    CFMutableArrayRef theArray,
    int idx1,
    int idx2,
  ) {
    return _CFArrayExchangeValuesAtIndices1(
      theArray,
      idx1,
      idx2,
    );
  }

  late final _CFArrayExchangeValuesAtIndices1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              CFIndex)>>('CFArrayExchangeValuesAtIndices');
  late final _CFArrayExchangeValuesAtIndices1 =
      _CFArrayExchangeValuesAtIndices1Ptr.asFunction<
          void Function(CFMutableArrayRef, int, int)>();

  void CFArraySortValues1(
    CFMutableArrayRef theArray,
    CFRange range,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArraySortValues1(
      theArray,
      range,
      comparator,
      context,
    );
  }

  late final _CFArraySortValues1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArraySortValues');
  late final _CFArraySortValues1 = _CFArraySortValues1Ptr.asFunction<
      void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
          ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendArray1(
    CFMutableArrayRef theArray,
    CFArrayRef otherArray,
    CFRange otherRange,
  ) {
    return _CFArrayAppendArray1(
      theArray,
      otherArray,
      otherRange,
    );
  }

  late final _CFArrayAppendArray1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, CFArrayRef, CFRange)>>('CFArrayAppendArray');
  late final _CFArrayAppendArray1 = _CFArrayAppendArray1Ptr.asFunction<
      void Function(CFMutableArrayRef, CFArrayRef, CFRange)>();

  ffi.Pointer<ffi.Void> sec_retain1(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_retain1(
      obj,
    );
  }

  late final _sec_retain1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('sec_retain');
  late final _sec_retain1 = _sec_retain1Ptr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void sec_release1(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_release1(
      obj,
    );
  }

  late final _sec_release1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sec_release');
  late final _sec_release1 =
      _sec_release1Ptr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  CFStringRef SecCopyErrorMessageString1(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString1(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageString1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              OSStatus, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString1 = _SecCopyErrorMessageString1Ptr
      .asFunction<CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  int CFBagGetTypeID1() {
    return _CFBagGetTypeID1();
  }

  late final _CFBagGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBagGetTypeID');
  late final _CFBagGetTypeID1 =
      _CFBagGetTypeID1Ptr.asFunction<int Function()>();

  CFBagRef CFBagCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreate1(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFBagCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFBagCallBacks>)>>('CFBagCreate');
  late final _CFBagCreate1 = _CFBagCreate1Ptr.asFunction<
      CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFBagCallBacks>)>();

  CFBagRef CFBagCreateCopy1(
    CFAllocatorRef allocator,
    CFBagRef theBag,
  ) {
    return _CFBagCreateCopy1(
      allocator,
      theBag,
    );
  }

  late final _CFBagCreateCopy1Ptr =
      _lookup<ffi.NativeFunction<CFBagRef Function(CFAllocatorRef, CFBagRef)>>(
          'CFBagCreateCopy');
  late final _CFBagCreateCopy1 = _CFBagCreateCopy1Ptr.asFunction<
      CFBagRef Function(CFAllocatorRef, CFBagRef)>();

  CFMutableBagRef CFBagCreateMutable1(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreateMutable1(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFBagCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFBagCallBacks>)>>('CFBagCreateMutable');
  late final _CFBagCreateMutable1 = _CFBagCreateMutable1Ptr.asFunction<
      CFMutableBagRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFBagCallBacks>)>();

  CFMutableBagRef CFBagCreateMutableCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFBagRef theBag,
  ) {
    return _CFBagCreateMutableCopy1(
      allocator,
      capacity,
      theBag,
    );
  }

  late final _CFBagCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(
              CFAllocatorRef, CFIndex, CFBagRef)>>('CFBagCreateMutableCopy');
  late final _CFBagCreateMutableCopy1 = _CFBagCreateMutableCopy1Ptr.asFunction<
      CFMutableBagRef Function(CFAllocatorRef, int, CFBagRef)>();

  int CFBagGetCount1(
    CFBagRef theBag,
  ) {
    return _CFBagGetCount1(
      theBag,
    );
  }

  late final _CFBagGetCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBagRef)>>('CFBagGetCount');
  late final _CFBagGetCount1 =
      _CFBagGetCount1Ptr.asFunction<int Function(CFBagRef)>();

  int CFBagGetCountOfValue1(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetCountOfValue1(
      theBag,
      value,
    );
  }

  late final _CFBagGetCountOfValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetCountOfValue');
  late final _CFBagGetCountOfValue1 = _CFBagGetCountOfValue1Ptr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagContainsValue1(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagContainsValue1(
      theBag,
      value,
    );
  }

  late final _CFBagContainsValue1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagContainsValue');
  late final _CFBagContainsValue1 = _CFBagContainsValue1Ptr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBagGetValue1(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetValue1(
      theBag,
      value,
    );
  }

  late final _CFBagGetValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetValue');
  late final _CFBagGetValue1 = _CFBagGetValue1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagGetValueIfPresent1(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBagGetValueIfPresent1(
      theBag,
      candidate,
      value,
    );
  }

  late final _CFBagGetValueIfPresent1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValueIfPresent');
  late final _CFBagGetValueIfPresent1 = _CFBagGetValueIfPresent1Ptr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagGetValues1(
    CFBagRef theBag,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBagGetValues1(
      theBag,
      values,
    );
  }

  late final _CFBagGetValues1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValues');
  late final _CFBagGetValues1 = _CFBagGetValues1Ptr.asFunction<
      void Function(CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagApplyFunction1(
    CFBagRef theBag,
    CFBagApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBagApplyFunction1(
      theBag,
      applier,
      context,
    );
  }

  late final _CFBagApplyFunction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBagRef, CFBagApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBagApplyFunction');
  late final _CFBagApplyFunction1 = _CFBagApplyFunction1Ptr.asFunction<
      void Function(CFBagRef, CFBagApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFBagAddValue1(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagAddValue1(
      theBag,
      value,
    );
  }

  late final _CFBagAddValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagAddValue');
  late final _CFBagAddValue1 = _CFBagAddValue1Ptr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagReplaceValue1(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagReplaceValue1(
      theBag,
      value,
    );
  }

  late final _CFBagReplaceValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagReplaceValue');
  late final _CFBagReplaceValue1 = _CFBagReplaceValue1Ptr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagSetValue1(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagSetValue1(
      theBag,
      value,
    );
  }

  late final _CFBagSetValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagSetValue');
  late final _CFBagSetValue1 = _CFBagSetValue1Ptr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveValue1(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagRemoveValue1(
      theBag,
      value,
    );
  }

  late final _CFBagRemoveValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagRemoveValue');
  late final _CFBagRemoveValue1 = _CFBagRemoveValue1Ptr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveAllValues1(
    CFMutableBagRef theBag,
  ) {
    return _CFBagRemoveAllValues1(
      theBag,
    );
  }

  late final _CFBagRemoveAllValues1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableBagRef)>>(
          'CFBagRemoveAllValues');
  late final _CFBagRemoveAllValues1 =
      _CFBagRemoveAllValues1Ptr.asFunction<void Function(CFMutableBagRef)>();

  int CFBinaryHeapGetTypeID1() {
    return _CFBinaryHeapGetTypeID1();
  }

  late final _CFBinaryHeapGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBinaryHeapGetTypeID');
  late final _CFBinaryHeapGetTypeID1 =
      _CFBinaryHeapGetTypeID1Ptr.asFunction<int Function()>();

  CFBinaryHeapRef CFBinaryHeapCreate1(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBinaryHeapCallBacks> callBacks,
    ffi.Pointer<CFBinaryHeapCompareContext> compareContext,
  ) {
    return _CFBinaryHeapCreate1(
      allocator,
      capacity,
      callBacks,
      compareContext,
    );
  }

  late final _CFBinaryHeapCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(
              CFAllocatorRef,
              CFIndex,
              ffi.Pointer<CFBinaryHeapCallBacks>,
              ffi.Pointer<CFBinaryHeapCompareContext>)>>('CFBinaryHeapCreate');
  late final _CFBinaryHeapCreate1 = _CFBinaryHeapCreate1Ptr.asFunction<
      CFBinaryHeapRef Function(
          CFAllocatorRef,
          int,
          ffi.Pointer<CFBinaryHeapCallBacks>,
          ffi.Pointer<CFBinaryHeapCompareContext>)>();

  CFBinaryHeapRef CFBinaryHeapCreateCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapCreateCopy1(
      allocator,
      capacity,
      heap,
    );
  }

  late final _CFBinaryHeapCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(CFAllocatorRef, CFIndex,
              CFBinaryHeapRef)>>('CFBinaryHeapCreateCopy');
  late final _CFBinaryHeapCreateCopy1 = _CFBinaryHeapCreateCopy1Ptr.asFunction<
      CFBinaryHeapRef Function(CFAllocatorRef, int, CFBinaryHeapRef)>();

  int CFBinaryHeapGetCount1(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetCount1(
      heap,
    );
  }

  late final _CFBinaryHeapGetCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapGetCount');
  late final _CFBinaryHeapGetCount1 =
      _CFBinaryHeapGetCount1Ptr.asFunction<int Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetCountOfValue1(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapGetCountOfValue1(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetCountOfValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapGetCountOfValue');
  late final _CFBinaryHeapGetCountOfValue1 = _CFBinaryHeapGetCountOfValue1Ptr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  int CFBinaryHeapContainsValue1(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapContainsValue1(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapContainsValue1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapContainsValue');
  late final _CFBinaryHeapContainsValue1 = _CFBinaryHeapContainsValue1Ptr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBinaryHeapGetMinimum1(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetMinimum1(
      heap,
    );
  }

  late final _CFBinaryHeapGetMinimum1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>>(
      'CFBinaryHeapGetMinimum');
  late final _CFBinaryHeapGetMinimum1 = _CFBinaryHeapGetMinimum1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetMinimumIfPresent1(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBinaryHeapGetMinimumIfPresent1(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetMinimumIfPresent1Ptr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBinaryHeapGetMinimumIfPresent');
  late final _CFBinaryHeapGetMinimumIfPresent1 =
      _CFBinaryHeapGetMinimumIfPresent1Ptr.asFunction<
          int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapGetValues1(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBinaryHeapGetValues1(
      heap,
      values,
    );
  }

  late final _CFBinaryHeapGetValues1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBinaryHeapGetValues');
  late final _CFBinaryHeapGetValues1 = _CFBinaryHeapGetValues1Ptr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapApplyFunction1(
    CFBinaryHeapRef heap,
    CFBinaryHeapApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBinaryHeapApplyFunction1(
      heap,
      applier,
      context,
    );
  }

  late final _CFBinaryHeapApplyFunction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapApplyFunction');
  late final _CFBinaryHeapApplyFunction1 =
      _CFBinaryHeapApplyFunction1Ptr.asFunction<
          void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapAddValue1(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapAddValue1(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapAddValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>>('CFBinaryHeapAddValue');
  late final _CFBinaryHeapAddValue1 = _CFBinaryHeapAddValue1Ptr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapRemoveMinimumValue1(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveMinimumValue1(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveMinimumValue1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveMinimumValue');
  late final _CFBinaryHeapRemoveMinimumValue1 =
      _CFBinaryHeapRemoveMinimumValue1Ptr.asFunction<
          void Function(CFBinaryHeapRef)>();

  void CFBinaryHeapRemoveAllValues1(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveAllValues1(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveAllValues1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveAllValues');
  late final _CFBinaryHeapRemoveAllValues1 = _CFBinaryHeapRemoveAllValues1Ptr
      .asFunction<void Function(CFBinaryHeapRef)>();

  int CFBitVectorGetTypeID1() {
    return _CFBitVectorGetTypeID1();
  }

  late final _CFBitVectorGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBitVectorGetTypeID');
  late final _CFBitVectorGetTypeID1 =
      _CFBitVectorGetTypeID1Ptr.asFunction<int Function()>();

  CFBitVectorRef CFBitVectorCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int numBits,
  ) {
    return _CFBitVectorCreate1(
      allocator,
      bytes,
      numBits,
    );
  }

  late final _CFBitVectorCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFBitVectorCreate');
  late final _CFBitVectorCreate1 = _CFBitVectorCreate1Ptr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFBitVectorRef CFBitVectorCreateCopy1(
    CFAllocatorRef allocator,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateCopy1(
      allocator,
      bv,
    );
  }

  late final _CFBitVectorCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(
              CFAllocatorRef, CFBitVectorRef)>>('CFBitVectorCreateCopy');
  late final _CFBitVectorCreateCopy1 = _CFBitVectorCreateCopy1Ptr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, CFBitVectorRef)>();

  CFMutableBitVectorRef CFBitVectorCreateMutable1(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFBitVectorCreateMutable1(
      allocator,
      capacity,
    );
  }

  late final _CFBitVectorCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, CFIndex)>>('CFBitVectorCreateMutable');
  late final _CFBitVectorCreateMutable1 = _CFBitVectorCreateMutable1Ptr
      .asFunction<CFMutableBitVectorRef Function(CFAllocatorRef, int)>();

  CFMutableBitVectorRef CFBitVectorCreateMutableCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateMutableCopy1(
      allocator,
      capacity,
      bv,
    );
  }

  late final _CFBitVectorCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(CFAllocatorRef, CFIndex,
              CFBitVectorRef)>>('CFBitVectorCreateMutableCopy');
  late final _CFBitVectorCreateMutableCopy1 =
      _CFBitVectorCreateMutableCopy1Ptr.asFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, int, CFBitVectorRef)>();

  int CFBitVectorGetCount1(
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorGetCount1(
      bv,
    );
  }

  late final _CFBitVectorGetCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBitVectorRef)>>(
          'CFBitVectorGetCount');
  late final _CFBitVectorGetCount1 =
      _CFBitVectorGetCount1Ptr.asFunction<int Function(CFBitVectorRef)>();

  int CFBitVectorGetCountOfBit1(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetCountOfBit1(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetCountOfBit1Ptr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetCountOfBit');
  late final _CFBitVectorGetCountOfBit1 = _CFBitVectorGetCountOfBit1Ptr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorContainsBit1(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorContainsBit1(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorContainsBit1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorContainsBit');
  late final _CFBitVectorContainsBit1 = _CFBitVectorContainsBit1Ptr.asFunction<
      int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetBitAtIndex1(
    CFBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorGetBitAtIndex1(
      bv,
      idx,
    );
  }

  late final _CFBitVectorGetBitAtIndex1Ptr =
      _lookup<ffi.NativeFunction<CFBit Function(CFBitVectorRef, CFIndex)>>(
          'CFBitVectorGetBitAtIndex');
  late final _CFBitVectorGetBitAtIndex1 = _CFBitVectorGetBitAtIndex1Ptr
      .asFunction<int Function(CFBitVectorRef, int)>();

  void CFBitVectorGetBits1(
    CFBitVectorRef bv,
    CFRange range,
    ffi.Pointer<UInt8> bytes,
  ) {
    return _CFBitVectorGetBits1(
      bv,
      range,
      bytes,
    );
  }

  late final _CFBitVectorGetBits1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBitVectorRef, CFRange,
              ffi.Pointer<UInt8>)>>('CFBitVectorGetBits');
  late final _CFBitVectorGetBits1 = _CFBitVectorGetBits1Ptr.asFunction<
      void Function(CFBitVectorRef, CFRange, ffi.Pointer<UInt8>)>();

  int CFBitVectorGetFirstIndexOfBit1(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetFirstIndexOfBit1(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetFirstIndexOfBit1Ptr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetFirstIndexOfBit');
  late final _CFBitVectorGetFirstIndexOfBit1 =
      _CFBitVectorGetFirstIndexOfBit1Ptr.asFunction<
          int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetLastIndexOfBit1(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetLastIndexOfBit1(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetLastIndexOfBit1Ptr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetLastIndexOfBit');
  late final _CFBitVectorGetLastIndexOfBit1 = _CFBitVectorGetLastIndexOfBit1Ptr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  void CFBitVectorSetCount1(
    CFMutableBitVectorRef bv,
    int count,
  ) {
    return _CFBitVectorSetCount1(
      bv,
      count,
    );
  }

  late final _CFBitVectorSetCount1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorSetCount');
  late final _CFBitVectorSetCount1 = _CFBitVectorSetCount1Ptr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBitAtIndex1(
    CFMutableBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorFlipBitAtIndex1(
      bv,
      idx,
    );
  }

  late final _CFBitVectorFlipBitAtIndex1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorFlipBitAtIndex');
  late final _CFBitVectorFlipBitAtIndex1 = _CFBitVectorFlipBitAtIndex1Ptr
      .asFunction<void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBits1(
    CFMutableBitVectorRef bv,
    CFRange range,
  ) {
    return _CFBitVectorFlipBits1(
      bv,
      range,
    );
  }

  late final _CFBitVectorFlipBits1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange)>>('CFBitVectorFlipBits');
  late final _CFBitVectorFlipBits1 = _CFBitVectorFlipBits1Ptr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange)>();

  void CFBitVectorSetBitAtIndex1(
    CFMutableBitVectorRef bv,
    int idx,
    int value,
  ) {
    return _CFBitVectorSetBitAtIndex1(
      bv,
      idx,
      value,
    );
  }

  late final _CFBitVectorSetBitAtIndex1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableBitVectorRef, CFIndex,
              CFBit)>>('CFBitVectorSetBitAtIndex');
  late final _CFBitVectorSetBitAtIndex1 = _CFBitVectorSetBitAtIndex1Ptr
      .asFunction<void Function(CFMutableBitVectorRef, int, int)>();

  void CFBitVectorSetBits1(
    CFMutableBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorSetBits1(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorSetBits1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange, CFBit)>>('CFBitVectorSetBits');
  late final _CFBitVectorSetBits1 = _CFBitVectorSetBits1Ptr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange, int)>();

  void CFBitVectorSetAllBits1(
    CFMutableBitVectorRef bv,
    int value,
  ) {
    return _CFBitVectorSetAllBits1(
      bv,
      value,
    );
  }

  late final _CFBitVectorSetAllBits1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFBit)>>(
      'CFBitVectorSetAllBits');
  late final _CFBitVectorSetAllBits1 = _CFBitVectorSetAllBits1Ptr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  int CFDictionaryGetTypeID1() {
    return _CFDictionaryGetTypeID1();
  }

  late final _CFDictionaryGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID1 =
      _CFDictionaryGetTypeID1Ptr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate1(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate1 = _CFDictionaryCreate1Ptr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy1(
    CFAllocatorRef allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy1(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef, CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy1 = _CFDictionaryCreateCopy1Ptr.asFunction<
      CFDictionaryRef Function(CFAllocatorRef, CFDictionaryRef)>();

  CFMutableDictionaryRef CFDictionaryCreateMutable1(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable1(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutable1Ptr = _lookup<
          ffi.NativeFunction<
              CFMutableDictionaryRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable1 =
      _CFDictionaryCreateMutable1Ptr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFMutableDictionaryRef CFDictionaryCreateMutableCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy1(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(CFAllocatorRef, CFIndex,
              CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy1 =
      _CFDictionaryCreateMutableCopy1Ptr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef, int, CFDictionaryRef)>();

  int CFDictionaryGetCount1(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount1(
      theDict,
    );
  }

  late final _CFDictionaryGetCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount1 =
      _CFDictionaryGetCount1Ptr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey1(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey1(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKey1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey1 = _CFDictionaryGetCountOfKey1Ptr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue1(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue1(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue1 = _CFDictionaryGetCountOfValue1Ptr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey1(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey1(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKey1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey1 = _CFDictionaryContainsKey1Ptr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue1(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue1(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValue1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue1 = _CFDictionaryContainsValue1Ptr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue1(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue1(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue1 = _CFDictionaryGetValue1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent1(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent1(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresent1Ptr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent1 =
      _CFDictionaryGetValueIfPresent1Ptr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues1(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues1(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValues1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues1 =
      _CFDictionaryGetKeysAndValues1Ptr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction1(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction1(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction1 =
      _CFDictionaryApplyFunction1Ptr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue1(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue1(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue1 = _CFDictionaryAddValue1Ptr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue1(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue1(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue1 = _CFDictionarySetValue1Ptr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue1(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue1(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue1 =
      _CFDictionaryReplaceValue1Ptr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue1(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue1(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue1 =
      _CFDictionaryRemoveValue1Ptr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues1(
    CFMutableDictionaryRef theDict,
  ) {
    return _CFDictionaryRemoveAllValues1(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValues1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDictionaryRef)>>(
          'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues1 = _CFDictionaryRemoveAllValues1Ptr
      .asFunction<void Function(CFMutableDictionaryRef)>();

  int CFNotificationCenterGetTypeID1() {
    return _CFNotificationCenterGetTypeID1();
  }

  late final _CFNotificationCenterGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNotificationCenterGetTypeID');
  late final _CFNotificationCenterGetTypeID1 =
      _CFNotificationCenterGetTypeID1Ptr.asFunction<int Function()>();

  CFNotificationCenterRef CFNotificationCenterGetLocalCenter1() {
    return _CFNotificationCenterGetLocalCenter1();
  }

  late final _CFNotificationCenterGetLocalCenter1Ptr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetLocalCenter');
  late final _CFNotificationCenterGetLocalCenter1 =
      _CFNotificationCenterGetLocalCenter1Ptr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDistributedCenter1() {
    return _CFNotificationCenterGetDistributedCenter1();
  }

  late final _CFNotificationCenterGetDistributedCenter1Ptr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDistributedCenter');
  late final _CFNotificationCenterGetDistributedCenter1 =
      _CFNotificationCenterGetDistributedCenter1Ptr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter1() {
    return _CFNotificationCenterGetDarwinNotifyCenter1();
  }

  late final _CFNotificationCenterGetDarwinNotifyCenter1Ptr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDarwinNotifyCenter');
  late final _CFNotificationCenterGetDarwinNotifyCenter1 =
      _CFNotificationCenterGetDarwinNotifyCenter1Ptr.asFunction<
          CFNotificationCenterRef Function()>();

  void CFNotificationCenterAddObserver1(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationCallback callBack,
    CFStringRef name,
    ffi.Pointer<ffi.Void> object,
    int suspensionBehavior,
  ) {
    return _CFNotificationCenterAddObserver1(
      center,
      observer,
      callBack,
      name,
      object,
      suspensionBehavior,
    );
  }

  late final _CFNotificationCenterAddObserver1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              ffi.Int32)>>('CFNotificationCenterAddObserver');
  late final _CFNotificationCenterAddObserver1 =
      _CFNotificationCenterAddObserver1Ptr.asFunction<
          void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              int)>();

  void CFNotificationCenterRemoveObserver1(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
  ) {
    return _CFNotificationCenterRemoveObserver1(
      center,
      observer,
      name,
      object,
    );
  }

  late final _CFNotificationCenterRemoveObserver1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationName,
              ffi.Pointer<ffi.Void>)>>('CFNotificationCenterRemoveObserver');
  late final _CFNotificationCenterRemoveObserver1 =
      _CFNotificationCenterRemoveObserver1Ptr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
              CFNotificationName, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterRemoveEveryObserver1(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
  ) {
    return _CFNotificationCenterRemoveEveryObserver1(
      center,
      observer,
    );
  }

  late final _CFNotificationCenterRemoveEveryObserver1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>>(
      'CFNotificationCenterRemoveEveryObserver');
  late final _CFNotificationCenterRemoveEveryObserver1 =
      _CFNotificationCenterRemoveEveryObserver1Ptr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterPostNotification1(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int deliverImmediately,
  ) {
    return _CFNotificationCenterPostNotification1(
      center,
      name,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  late final _CFNotificationCenterPostNotification1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              CFNotificationName,
              ffi.Pointer<ffi.Void>,
              CFDictionaryRef,
              Boolean)>>('CFNotificationCenterPostNotification');
  late final _CFNotificationCenterPostNotification1 =
      _CFNotificationCenterPostNotification1Ptr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  void CFNotificationCenterPostNotificationWithOptions1(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int options,
  ) {
    return _CFNotificationCenterPostNotificationWithOptions1(
      center,
      name,
      object,
      userInfo,
      options,
    );
  }

  late final _CFNotificationCenterPostNotificationWithOptions1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFNotificationCenterRef, CFNotificationName,
                  ffi.Pointer<ffi.Void>, CFDictionaryRef, CFOptionFlags)>>(
      'CFNotificationCenterPostNotificationWithOptions');
  late final _CFNotificationCenterPostNotificationWithOptions1 =
      _CFNotificationCenterPostNotificationWithOptions1Ptr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  int CFLocaleGetTypeID1() {
    return _CFLocaleGetTypeID1();
  }

  late final _CFLocaleGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFLocaleGetTypeID');
  late final _CFLocaleGetTypeID1 =
      _CFLocaleGetTypeID1Ptr.asFunction<int Function()>();

  CFLocaleRef CFLocaleGetSystem1() {
    return _CFLocaleGetSystem1();
  }

  late final _CFLocaleGetSystem1Ptr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>('CFLocaleGetSystem');
  late final _CFLocaleGetSystem1 =
      _CFLocaleGetSystem1Ptr.asFunction<CFLocaleRef Function()>();

  CFLocaleRef CFLocaleCopyCurrent1() {
    return _CFLocaleCopyCurrent1();
  }

  late final _CFLocaleCopyCurrent1Ptr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>(
          'CFLocaleCopyCurrent');
  late final _CFLocaleCopyCurrent1 =
      _CFLocaleCopyCurrent1Ptr.asFunction<CFLocaleRef Function()>();

  CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers1() {
    return _CFLocaleCopyAvailableLocaleIdentifiers1();
  }

  late final _CFLocaleCopyAvailableLocaleIdentifiers1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyAvailableLocaleIdentifiers');
  late final _CFLocaleCopyAvailableLocaleIdentifiers1 =
      _CFLocaleCopyAvailableLocaleIdentifiers1Ptr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOLanguageCodes1() {
    return _CFLocaleCopyISOLanguageCodes1();
  }

  late final _CFLocaleCopyISOLanguageCodes1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOLanguageCodes');
  late final _CFLocaleCopyISOLanguageCodes1 =
      _CFLocaleCopyISOLanguageCodes1Ptr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCountryCodes1() {
    return _CFLocaleCopyISOCountryCodes1();
  }

  late final _CFLocaleCopyISOCountryCodes1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCountryCodes');
  late final _CFLocaleCopyISOCountryCodes1 =
      _CFLocaleCopyISOCountryCodes1Ptr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCurrencyCodes1() {
    return _CFLocaleCopyISOCurrencyCodes1();
  }

  late final _CFLocaleCopyISOCurrencyCodes1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCurrencyCodes');
  late final _CFLocaleCopyISOCurrencyCodes1 =
      _CFLocaleCopyISOCurrencyCodes1Ptr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyCommonISOCurrencyCodes1() {
    return _CFLocaleCopyCommonISOCurrencyCodes1();
  }

  late final _CFLocaleCopyCommonISOCurrencyCodes1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyCommonISOCurrencyCodes');
  late final _CFLocaleCopyCommonISOCurrencyCodes1 =
      _CFLocaleCopyCommonISOCurrencyCodes1Ptr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyPreferredLanguages1() {
    return _CFLocaleCopyPreferredLanguages1();
  }

  late final _CFLocaleCopyPreferredLanguages1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyPreferredLanguages');
  late final _CFLocaleCopyPreferredLanguages1 =
      _CFLocaleCopyPreferredLanguages1Ptr.asFunction<CFArrayRef Function()>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString1(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLanguageIdentifierFromString1(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString1Ptr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLanguageIdentifierFromString');
  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString1 =
      _CFLocaleCreateCanonicalLanguageIdentifierFromString1Ptr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString1(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromString1(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString1Ptr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLocaleIdentifierFromString');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString1 =
      _CFLocaleCreateCanonicalLocaleIdentifierFromString1Ptr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier
      CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes1(
    CFAllocatorRef allocator,
    int lcode,
    int rcode,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes1(
      allocator,
      lcode,
      rcode,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes1Ptr =
      _lookup<
              ffi.NativeFunction<
                  CFLocaleIdentifier Function(
                      CFAllocatorRef, LangCode, RegionCode)>>(
          'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes1 =
      _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes1Ptr
          .asFunction<CFLocaleIdentifier Function(CFAllocatorRef, int, int)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode1(
    CFAllocatorRef allocator,
    int lcid,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode1(
      allocator,
      lcid,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode1Ptr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, ffi.Uint32)>>(
      'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode');
  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode1 =
      _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode1Ptr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, int)>();

  int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier1(
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier1(
      localeIdentifier,
    );
  }

  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CFLocaleIdentifier)>>(
          'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier');
  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier1 =
      _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier1Ptr.asFunction<
          int Function(CFLocaleIdentifier)>();

  int CFLocaleGetLanguageCharacterDirection1(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageCharacterDirection1(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageCharacterDirection1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringRef)>>(
          'CFLocaleGetLanguageCharacterDirection');
  late final _CFLocaleGetLanguageCharacterDirection1 =
      _CFLocaleGetLanguageCharacterDirection1Ptr.asFunction<
          int Function(CFStringRef)>();

  int CFLocaleGetLanguageLineDirection1(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageLineDirection1(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageLineDirection1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringRef)>>(
          'CFLocaleGetLanguageLineDirection');
  late final _CFLocaleGetLanguageLineDirection1 =
      _CFLocaleGetLanguageLineDirection1Ptr.asFunction<
          int Function(CFStringRef)>();

  CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier1(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeID,
  ) {
    return _CFLocaleCreateComponentsFromLocaleIdentifier1(
      allocator,
      localeID,
    );
  }

  late final _CFLocaleCreateComponentsFromLocaleIdentifier1Ptr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>>(
      'CFLocaleCreateComponentsFromLocaleIdentifier');
  late final _CFLocaleCreateComponentsFromLocaleIdentifier1 =
      _CFLocaleCreateComponentsFromLocaleIdentifier1Ptr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents1(
    CFAllocatorRef allocator,
    CFDictionaryRef dictionary,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromComponents1(
      allocator,
      dictionary,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromComponents1Ptr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>>(
      'CFLocaleCreateLocaleIdentifierFromComponents');
  late final _CFLocaleCreateLocaleIdentifierFromComponents1 =
      _CFLocaleCreateLocaleIdentifierFromComponents1Ptr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>();

  CFLocaleRef CFLocaleCreate1(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleCreate1(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleIdentifier)>>('CFLocaleCreate');
  late final _CFLocaleCreate1 = _CFLocaleCreate1Ptr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleRef CFLocaleCreateCopy1(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
  ) {
    return _CFLocaleCreateCopy1(
      allocator,
      locale,
    );
  }

  late final _CFLocaleCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleRef)>>('CFLocaleCreateCopy');
  late final _CFLocaleCreateCopy1 = _CFLocaleCreateCopy1Ptr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>();

  CFLocaleIdentifier CFLocaleGetIdentifier1(
    CFLocaleRef locale,
  ) {
    return _CFLocaleGetIdentifier1(
      locale,
    );
  }

  late final _CFLocaleGetIdentifier1Ptr =
      _lookup<ffi.NativeFunction<CFLocaleIdentifier Function(CFLocaleRef)>>(
          'CFLocaleGetIdentifier');
  late final _CFLocaleGetIdentifier1 = _CFLocaleGetIdentifier1Ptr.asFunction<
      CFLocaleIdentifier Function(CFLocaleRef)>();

  CFTypeRef CFLocaleGetValue1(
    CFLocaleRef locale,
    CFLocaleKey key,
  ) {
    return _CFLocaleGetValue1(
      locale,
      key,
    );
  }

  late final _CFLocaleGetValue1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFLocaleRef, CFLocaleKey)>>(
          'CFLocaleGetValue');
  late final _CFLocaleGetValue1 = _CFLocaleGetValue1Ptr.asFunction<
      CFTypeRef Function(CFLocaleRef, CFLocaleKey)>();

  CFStringRef CFLocaleCopyDisplayNameForPropertyValue1(
    CFLocaleRef displayLocale,
    CFLocaleKey key,
    CFStringRef value,
  ) {
    return _CFLocaleCopyDisplayNameForPropertyValue1(
      displayLocale,
      key,
      value,
    );
  }

  late final _CFLocaleCopyDisplayNameForPropertyValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey,
              CFStringRef)>>('CFLocaleCopyDisplayNameForPropertyValue');
  late final _CFLocaleCopyDisplayNameForPropertyValue1 =
      _CFLocaleCopyDisplayNameForPropertyValue1Ptr.asFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey, CFStringRef)>();

  double CFAbsoluteTimeGetCurrent1() {
    return _CFAbsoluteTimeGetCurrent1();
  }

  late final _CFAbsoluteTimeGetCurrent1Ptr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function()>>(
          'CFAbsoluteTimeGetCurrent');
  late final _CFAbsoluteTimeGetCurrent1 =
      _CFAbsoluteTimeGetCurrent1Ptr.asFunction<double Function()>();

  int CFDateGetTypeID1() {
    return _CFDateGetTypeID1();
  }

  late final _CFDateGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDateGetTypeID');
  late final _CFDateGetTypeID1 =
      _CFDateGetTypeID1Ptr.asFunction<int Function()>();

  CFDateRef CFDateCreate1(
    CFAllocatorRef allocator,
    double at,
  ) {
    return _CFDateCreate1(
      allocator,
      at,
    );
  }

  late final _CFDateCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFAbsoluteTime)>>('CFDateCreate');
  late final _CFDateCreate1 = _CFDateCreate1Ptr.asFunction<
      CFDateRef Function(CFAllocatorRef, double)>();

  double CFDateGetAbsoluteTime1(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime1(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTime1Ptr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime1 =
      _CFDateGetAbsoluteTime1Ptr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate1(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate1(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDate1Ptr = _lookup<
          ffi.NativeFunction<CFTimeInterval Function(CFDateRef, CFDateRef)>>(
      'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate1 =
      _CFDateGetTimeIntervalSinceDate1Ptr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  int CFDateCompare1(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDateCompare1(
      theDate,
      otherDate,
      context,
    );
  }

  late final _CFDateCompare1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare1 = _CFDateCompare1Ptr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFGregorianDateIsValid1(
    CFGregorianDate gdate,
    int unitFlags,
  ) {
    return _CFGregorianDateIsValid1(
      gdate,
      unitFlags,
    );
  }

  late final _CFGregorianDateIsValid1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFGregorianDate, CFOptionFlags)>>(
      'CFGregorianDateIsValid');
  late final _CFGregorianDateIsValid1 = _CFGregorianDateIsValid1Ptr.asFunction<
      int Function(CFGregorianDate, int)>();

  double CFGregorianDateGetAbsoluteTime1(
    CFGregorianDate gdate,
    CFTimeZoneRef tz,
  ) {
    return _CFGregorianDateGetAbsoluteTime1(
      gdate,
      tz,
    );
  }

  late final _CFGregorianDateGetAbsoluteTime1Ptr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFGregorianDate,
              CFTimeZoneRef)>>('CFGregorianDateGetAbsoluteTime');
  late final _CFGregorianDateGetAbsoluteTime1 =
      _CFGregorianDateGetAbsoluteTime1Ptr.asFunction<
          double Function(CFGregorianDate, CFTimeZoneRef)>();

  CFGregorianDate CFAbsoluteTimeGetGregorianDate1(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetGregorianDate1(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetGregorianDate1Ptr = _lookup<
      ffi.NativeFunction<
          CFGregorianDate Function(CFAbsoluteTime,
              CFTimeZoneRef)>>('CFAbsoluteTimeGetGregorianDate');
  late final _CFAbsoluteTimeGetGregorianDate1 =
      _CFAbsoluteTimeGetGregorianDate1Ptr.asFunction<
          CFGregorianDate Function(double, CFTimeZoneRef)>();

  double CFAbsoluteTimeAddGregorianUnits1(
    double at,
    CFTimeZoneRef tz,
    CFGregorianUnits units,
  ) {
    return _CFAbsoluteTimeAddGregorianUnits1(
      at,
      tz,
      units,
    );
  }

  late final _CFAbsoluteTimeAddGregorianUnits1Ptr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFAbsoluteTime, CFTimeZoneRef,
              CFGregorianUnits)>>('CFAbsoluteTimeAddGregorianUnits');
  late final _CFAbsoluteTimeAddGregorianUnits1 =
      _CFAbsoluteTimeAddGregorianUnits1Ptr.asFunction<
          double Function(double, CFTimeZoneRef, CFGregorianUnits)>();

  CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits1(
    double at1,
    double at2,
    CFTimeZoneRef tz,
    int unitFlags,
  ) {
    return _CFAbsoluteTimeGetDifferenceAsGregorianUnits1(
      at1,
      at2,
      tz,
      unitFlags,
    );
  }

  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits1Ptr = _lookup<
      ffi.NativeFunction<
          CFGregorianUnits Function(
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFTimeZoneRef,
              CFOptionFlags)>>('CFAbsoluteTimeGetDifferenceAsGregorianUnits');
  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits1 =
      _CFAbsoluteTimeGetDifferenceAsGregorianUnits1Ptr.asFunction<
          CFGregorianUnits Function(double, double, CFTimeZoneRef, int)>();

  int CFAbsoluteTimeGetDayOfWeek1(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfWeek1(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfWeek1Ptr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfWeek');
  late final _CFAbsoluteTimeGetDayOfWeek1 = _CFAbsoluteTimeGetDayOfWeek1Ptr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetDayOfYear1(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfYear1(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfYear1Ptr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfYear');
  late final _CFAbsoluteTimeGetDayOfYear1 = _CFAbsoluteTimeGetDayOfYear1Ptr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetWeekOfYear1(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetWeekOfYear1(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetWeekOfYear1Ptr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetWeekOfYear');
  late final _CFAbsoluteTimeGetWeekOfYear1 = _CFAbsoluteTimeGetWeekOfYear1Ptr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFDataGetTypeID2() {
    return _CFDataGetTypeID2();
  }

  late final _CFDataGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID2 =
      _CFDataGetTypeID2Ptr.asFunction<int Function()>();

  CFDataRef CFDataCreate2(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate2(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreate2Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate2 = _CFDataCreate2Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy2(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy2(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopy2Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy2 =
      _CFDataCreateWithBytesNoCopy2Ptr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy2(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy2(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopy2Ptr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy2 = _CFDataCreateCopy2Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable2(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable2(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutable2Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable2 = _CFDataCreateMutable2Ptr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy2(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy2(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopy2Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy2 = _CFDataCreateMutableCopy2Ptr
      .asFunction<CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength2(
    CFDataRef theData,
  ) {
    return _CFDataGetLength2(
      theData,
    );
  }

  late final _CFDataGetLength2Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength2 =
      _CFDataGetLength2Ptr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr2(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr2(
      theData,
    );
  }

  late final _CFDataGetBytePtr2Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr2 = _CFDataGetBytePtr2Ptr.asFunction<
      ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr2(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr2(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtr2Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr2 = _CFDataGetMutableBytePtr2Ptr
      .asFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes2(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes2(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytes2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes2 = _CFDataGetBytes2Ptr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength2(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength2(
      theData,
      length,
    );
  }

  late final _CFDataSetLength2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength2 =
      _CFDataSetLength2Ptr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength2(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength2(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLength2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength2 = _CFDataIncreaseLength2Ptr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes2(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes2(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytes2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes2 = _CFDataAppendBytes2Ptr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes2(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes2(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytes2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes2 = _CFDataReplaceBytes2Ptr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes2(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes2(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytes2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes2 = _CFDataDeleteBytes2Ptr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind2(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    int compareOptions,
  ) {
    return _CFDataFind2(
      theData,
      dataToFind,
      searchRange,
      compareOptions,
    );
  }

  late final _CFDataFind2Ptr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, ffi.Int32)>>('CFDataFind');
  late final _CFDataFind2 = _CFDataFind2Ptr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID2() {
    return _CFCharacterSetGetTypeID2();
  }

  late final _CFCharacterSetGetTypeID2Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID2 =
      _CFCharacterSetGetTypeID2Ptr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined2(
    int theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined2(
      theSetIdentifier,
    );
  }

  late final _CFCharacterSetGetPredefined2Ptr =
      _lookup<ffi.NativeFunction<CFCharacterSetRef Function(ffi.Int32)>>(
          'CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined2 = _CFCharacterSetGetPredefined2Ptr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange2(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange2(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRange2Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFRange)>>('CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange2 =
      _CFCharacterSetCreateWithCharactersInRange2Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString2(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString2(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInString2Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString2 =
      _CFCharacterSetCreateWithCharactersInString2Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation2(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation2(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentation2Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation2 =
      _CFCharacterSetCreateWithBitmapRepresentation2Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet2(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet2(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSet2Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet2 =
      _CFCharacterSetCreateInvertedSet2Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet2(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet2(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSet2Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet2 =
      _CFCharacterSetIsSupersetOfSet2Ptr.asFunction<
          int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane2(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane2(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlane2Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane2 =
      _CFCharacterSetHasMemberInPlane2Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable2(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable2(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutable2Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef)>>('CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable2 = _CFCharacterSetCreateMutable2Ptr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy2(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy2(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopy2Ptr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy2 =
      _CFCharacterSetCreateCopy2Ptr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy2(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy2(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopy2Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy2 =
      _CFCharacterSetCreateMutableCopy2Ptr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember2(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember2(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMember2Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember2 =
      _CFCharacterSetIsCharacterMember2Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember2(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember2(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMember2Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember2 =
      _CFCharacterSetIsLongCharacterMember2Ptr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation2(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation2(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentation2Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation2 =
      _CFCharacterSetCreateBitmapRepresentation2Ptr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange2(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange2(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRange2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange2 =
      _CFCharacterSetAddCharactersInRange2Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange2(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange2(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRange2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange2 =
      _CFCharacterSetRemoveCharactersInRange2Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString2(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString2(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString2 =
      _CFCharacterSetAddCharactersInString2Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString2(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString2(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInString2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString2 =
      _CFCharacterSetRemoveCharactersInString2Ptr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion2(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion2(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnion2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion2 = _CFCharacterSetUnion2Ptr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect2(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect2(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersect2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect2 = _CFCharacterSetIntersect2Ptr
      .asFunction<void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert2(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert2(
      theSet,
    );
  }

  late final _CFCharacterSetInvert2Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert2 = _CFCharacterSetInvert2Ptr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  int CFStringGetTypeID1() {
    return _CFStringGetTypeID1();
  }

  late final _CFStringGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFStringGetTypeID');
  late final _CFStringGetTypeID1 =
      _CFStringGetTypeID1Ptr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString1(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString1(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalString1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString1 =
      _CFStringCreateWithPascalString1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param, int)>();

  CFStringRef CFStringCreateWithCString1(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString1(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCString1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString1 =
      _CFStringCreateWithCString1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes1(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes1(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytes1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, Boolean)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes1 =
      _CFStringCreateWithBytes1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters1(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters1(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharacters1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters1 =
      _CFStringCreateWithCharacters1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy1(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy1(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ConstStr255Param,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy1 =
      _CFStringCreateWithPascalStringNoCopy1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ConstStr255Param, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCStringNoCopy1(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy1(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy1 =
      _CFStringCreateWithCStringNoCopy1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int,
              CFAllocatorRef)>();

  CFStringRef CFStringCreateWithBytesNoCopy1(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy1(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              Boolean,
              CFAllocatorRef)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy1 =
      _CFStringCreateWithBytesNoCopy1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int,
              int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCharactersNoCopy1(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy1(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, CFIndex,
              CFAllocatorRef)>>('CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy1 =
      _CFStringCreateWithCharactersNoCopy1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UniChar>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithSubstring1(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring1(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstring1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring1 = _CFStringCreateWithSubstring1Ptr
      .asFunction<CFStringRef Function(CFAllocatorRef, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy1(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy1(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef)>>('CFStringCreateCopy');
  late final _CFStringCreateCopy1 = _CFStringCreateCopy1Ptr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat1(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat1(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormat1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat1 =
      _CFStringCreateWithFormat1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments1(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments1(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArguments1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments1 =
      _CFStringCreateWithFormatAndArguments1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDictionaryRef, CFStringRef, va_list)>();

  CFMutableStringRef CFStringCreateMutable1(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable1(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable1 = _CFStringCreateMutable1Ptr.asFunction<
      CFMutableStringRef Function(CFAllocatorRef, int)>();

  CFMutableStringRef CFStringCreateMutableCopy1(
    CFAllocatorRef alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy1(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(CFAllocatorRef, CFIndex,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy1 =
      _CFStringCreateMutableCopy1Ptr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, int, CFStringRef)>();

  CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy1(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    int capacity,
    CFAllocatorRef externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy1(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopy1Ptr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
                  CFIndex, CFIndex, CFAllocatorRef)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy1 =
      _CFStringCreateMutableWithExternalCharactersNoCopy1Ptr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int,
              int, CFAllocatorRef)>();

  int CFStringGetLength1(
    CFStringRef theString,
  ) {
    return _CFStringGetLength1(
      theString,
    );
  }

  late final _CFStringGetLength1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength1 =
      _CFStringGetLength1Ptr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex1(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex1(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndex1Ptr =
      _lookup<ffi.NativeFunction<UniChar Function(CFStringRef, CFIndex)>>(
          'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex1 = _CFStringGetCharacterAtIndex1Ptr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters1(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<UniChar> buffer,
  ) {
    return _CFStringGetCharacters1(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharacters1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<UniChar>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters1 = _CFStringGetCharacters1Ptr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<UniChar>)>();

  int CFStringGetPascalString1(
    CFStringRef theString,
    StringPtr buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString1(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalString1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, StringPtr, CFIndex,
              CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString1 = _CFStringGetPascalString1Ptr
      .asFunction<int Function(CFStringRef, StringPtr, int, int)>();

  int CFStringGetCString1(
    CFStringRef theString,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString1(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCString1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, CFIndex,
              CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString1 = _CFStringGetCString1Ptr.asFunction<
      int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  ConstStringPtr CFStringGetPascalStringPtr1(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr11(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr1Ptr = _lookup<
      ffi.NativeFunction<
          ConstStringPtr Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr11 = _CFStringGetPascalStringPtr1Ptr
      .asFunction<ConstStringPtr Function(CFStringRef, int)>();

  ffi.Pointer<pkg_ffi.Char> CFStringGetCStringPtr1(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr11(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr11 = _CFStringGetCStringPtr1Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<UniChar> CFStringGetCharactersPtr1(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr11(
      theString,
    );
  }

  late final _CFStringGetCharactersPtr1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UniChar> Function(CFStringRef)>>(
          'CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr11 = _CFStringGetCharactersPtr1Ptr
      .asFunction<ffi.Pointer<UniChar> Function(CFStringRef)>();

  int CFStringGetBytes1(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
    ffi.Pointer<CFIndex> usedBufLen,
  ) {
    return _CFStringGetBytes1(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytes1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              UInt8,
              Boolean,
              ffi.Pointer<UInt8>,
              CFIndex,
              ffi.Pointer<CFIndex>)>>('CFStringGetBytes');
  late final _CFStringGetBytes1 = _CFStringGetBytes1Ptr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int, ffi.Pointer<UInt8>, int,
          ffi.Pointer<CFIndex>)>();

  CFStringRef CFStringCreateFromExternalRepresentation1(
    CFAllocatorRef alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation1(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation1 =
      _CFStringCreateFromExternalRepresentation1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation1(
    CFAllocatorRef alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation1(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, CFStringEncoding,
              UInt8)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation1 =
      _CFStringCreateExternalRepresentation1Ptr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding1(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding1(
      theString,
    );
  }

  late final _CFStringGetSmallestEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding1 =
      _CFStringGetSmallestEncoding1Ptr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding1(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding1(
      theString,
    );
  }

  late final _CFStringGetFastestEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding1 =
      _CFStringGetFastestEncoding1Ptr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding1() {
    return _CFStringGetSystemEncoding1();
  }

  late final _CFStringGetSystemEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding1 =
      _CFStringGetSystemEncoding1Ptr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding1(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding1(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFIndex, CFStringEncoding)>>(
          'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding1 =
      _CFStringGetMaximumSizeForEncoding1Ptr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation1(
    CFStringRef string,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation1(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFIndex)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation1 =
      _CFStringGetFileSystemRepresentation1Ptr.asFunction<
          int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation1(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation1(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentation1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation1 =
      _CFStringGetMaximumSizeOfFileSystemRepresentation1Ptr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation1(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation1(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentation1Ptr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation1 =
      _CFStringCreateWithFileSystemRepresentation1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>();

  int CFStringCompareWithOptionsAndLocale1(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
    CFLocaleRef locale,
  ) {
    return _CFStringCompareWithOptionsAndLocale1(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
      locale,
    );
  }

  late final _CFStringCompareWithOptionsAndLocale1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringRef, CFStringRef, CFRange, ffi.Int32,
              CFLocaleRef)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale1 =
      _CFStringCompareWithOptionsAndLocale1Ptr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  int CFStringCompareWithOptions1(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
  ) {
    return _CFStringCompareWithOptions1(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
    );
  }

  late final _CFStringCompareWithOptions1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringRef, CFStringRef, CFRange,
              ffi.Int32)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions1 = _CFStringCompareWithOptions1Ptr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  int CFStringCompare1(
    CFStringRef theString1,
    CFStringRef theString2,
    int compareOptions,
  ) {
    return _CFStringCompare1(
      theString1,
      theString2,
      compareOptions,
    );
  }

  late final _CFStringCompare1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFStringRef, CFStringRef, ffi.Int32)>>('CFStringCompare');
  late final _CFStringCompare1 = _CFStringCompare1Ptr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  int CFStringFindWithOptionsAndLocale1(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    CFLocaleRef locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale1(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocale1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              ffi.Int32,
              CFLocaleRef,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale1 =
      _CFStringFindWithOptionsAndLocale1Ptr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef,
              ffi.Pointer<CFRange>)>();

  int CFStringFindWithOptions1(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions1(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindWithOptions1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef, CFRange, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions1 =
      _CFStringFindWithOptions1Ptr.asFunction<
          int Function(
              CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  CFArrayRef CFStringCreateArrayWithFindResults1(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults1(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringCreateArrayWithFindResults1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef, CFRange,
              ffi.Int32)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults1 =
      _CFStringCreateArrayWithFindResults1Ptr.asFunction<
          CFArrayRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind1(
    CFStringRef theString,
    CFStringRef stringToFind,
    int compareOptions,
  ) {
    return _CFStringFind1(
      theString,
      stringToFind,
      compareOptions,
    );
  }

  late final _CFStringFind1Ptr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, ffi.Int32)>>('CFStringFind');
  late final _CFStringFind1 = _CFStringFind1Ptr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix1(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix1(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefix1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasPrefix');
  late final _CFStringHasPrefix1 = _CFStringHasPrefix1Ptr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix1(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix1(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffix1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasSuffix');
  late final _CFStringHasSuffix1 = _CFStringHasSuffix1Ptr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex1(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex1(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndex1Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, CFIndex)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex1 =
      _CFStringGetRangeOfComposedCharactersAtIndex1Ptr.asFunction<
          CFRange Function(CFStringRef, int)>();

  int CFStringFindCharacterFromSet1(
    CFStringRef theString,
    CFCharacterSetRef theSet,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet1(
      theString,
      theSet,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindCharacterFromSet1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFCharacterSetRef, CFRange, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet1 =
      _CFStringFindCharacterFromSet1Ptr.asFunction<
          int Function(CFStringRef, CFCharacterSetRef, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds1(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<CFIndex> lineBeginIndex,
    ffi.Pointer<CFIndex> lineEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds1(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBounds1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds1 = _CFStringGetLineBounds1Ptr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
          ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  void CFStringGetParagraphBounds1(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<CFIndex> parBeginIndex,
    ffi.Pointer<CFIndex> parEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds1(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBounds1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds1 =
      _CFStringGetParagraphBounds1Ptr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  int CFStringGetHyphenationLocationBeforeIndex1(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    CFLocaleRef locale,
    ffi.Pointer<UTF32Char> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex1(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndex1Ptr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(CFStringRef, CFIndex, CFRange, CFOptionFlags,
                  CFLocaleRef, ffi.Pointer<UTF32Char>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex1 =
      _CFStringGetHyphenationLocationBeforeIndex1Ptr.asFunction<
          int Function(CFStringRef, int, CFRange, int, CFLocaleRef,
              ffi.Pointer<UTF32Char>)>();

  int CFStringIsHyphenationAvailableForLocale1(
    CFLocaleRef locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale1(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocale1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFLocaleRef)>>(
          'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale1 =
      _CFStringIsHyphenationAvailableForLocale1Ptr.asFunction<
          int Function(CFLocaleRef)>();

  CFStringRef CFStringCreateByCombiningStrings1(
    CFAllocatorRef alloc,
    CFArrayRef theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings1(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStrings1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings1 =
      _CFStringCreateByCombiningStrings1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef, CFStringRef)>();

  CFArrayRef CFStringCreateArrayBySeparatingStrings1(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings1(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStrings1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings1 =
      _CFStringCreateArrayBySeparatingStrings1Ptr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue1(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue1(
      str,
    );
  }

  late final _CFStringGetIntValue1Ptr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue1 =
      _CFStringGetIntValue1Ptr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue1(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue1(
      str,
    );
  }

  late final _CFStringGetDoubleValue1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue1 =
      _CFStringGetDoubleValue1Ptr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend1(
    CFMutableStringRef theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend1(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppend1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringAppend');
  late final _CFStringAppend1 = _CFStringAppend1Ptr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringAppendCharacters1(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters1(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharacters1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters1 =
      _CFStringAppendCharacters1Ptr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int)>();

  void CFStringAppendPascalString1(
    CFMutableStringRef theString,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString1(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString1 = _CFStringAppendPascalString1Ptr
      .asFunction<void Function(CFMutableStringRef, ConstStr255Param, int)>();

  void CFStringAppendCString1(
    CFMutableStringRef theString,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString1(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString1 = _CFStringAppendCString1Ptr.asFunction<
      void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  void CFStringAppendFormat1(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat1(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat1 = _CFStringAppendFormat1Ptr.asFunction<
      void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments1(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringAppendFormatAndArguments1(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArguments1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments1 =
      _CFStringAppendFormatAndArguments1Ptr.asFunction<
          void Function(
              CFMutableStringRef, CFDictionaryRef, CFStringRef, va_list)>();

  void CFStringInsert1(
    CFMutableStringRef str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert1(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsert1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFIndex, CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert1 = _CFStringInsert1Ptr.asFunction<
      void Function(CFMutableStringRef, int, CFStringRef)>();

  void CFStringDelete1(
    CFMutableStringRef theString,
    CFRange range,
  ) {
    return _CFStringDelete1(
      theString,
      range,
    );
  }

  late final _CFStringDelete1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete1 = _CFStringDelete1Ptr.asFunction<
      void Function(CFMutableStringRef, CFRange)>();

  void CFStringReplace1(
    CFMutableStringRef theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace1(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplace1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFRange, CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace1 = _CFStringReplace1Ptr.asFunction<
      void Function(CFMutableStringRef, CFRange, CFStringRef)>();

  void CFStringReplaceAll1(
    CFMutableStringRef theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll1(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAll1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringReplaceAll');
  late final _CFStringReplaceAll1 = _CFStringReplaceAll1Ptr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  int CFStringFindAndReplace1(
    CFMutableStringRef theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringFindAndReplace1(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringFindAndReplace1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFMutableStringRef, CFStringRef, CFStringRef,
              CFRange, ffi.Int32)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace1 = _CFStringFindAndReplace1Ptr.asFunction<
      int Function(
          CFMutableStringRef, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy1(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy1(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>, CFIndex,
              CFIndex)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy1 =
      _CFStringSetExternalCharactersNoCopy1Ptr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int, int)>();

  void CFStringPad1(
    CFMutableStringRef theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad1(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPad1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef, CFIndex,
              CFIndex)>>('CFStringPad');
  late final _CFStringPad1 = _CFStringPad1Ptr.asFunction<
      void Function(CFMutableStringRef, CFStringRef, int, int)>();

  void CFStringTrim1(
    CFMutableStringRef theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim1(
      theString,
      trimString,
    );
  }

  late final _CFStringTrim1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim1 = _CFStringTrim1Ptr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringTrimWhitespace1(
    CFMutableStringRef theString,
  ) {
    return _CFStringTrimWhitespace1(
      theString,
    );
  }

  late final _CFStringTrimWhitespace1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableStringRef)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace1 = _CFStringTrimWhitespace1Ptr.asFunction<
      void Function(CFMutableStringRef)>();

  void CFStringLowercase1(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringLowercase1(
      theString,
      locale,
    );
  }

  late final _CFStringLowercase1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringLowercase');
  late final _CFStringLowercase1 = _CFStringLowercase1Ptr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringUppercase1(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringUppercase1(
      theString,
      locale,
    );
  }

  late final _CFStringUppercase1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringUppercase');
  late final _CFStringUppercase1 = _CFStringUppercase1Ptr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringCapitalize1(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringCapitalize1(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalize1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringCapitalize');
  late final _CFStringCapitalize1 = _CFStringCapitalize1Ptr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringNormalize1(
    CFMutableStringRef theString,
    int theForm,
  ) {
    return _CFStringNormalize1(
      theString,
      theForm,
    );
  }

  late final _CFStringNormalize1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, ffi.Int32)>>(
      'CFStringNormalize');
  late final _CFStringNormalize1 = _CFStringNormalize1Ptr.asFunction<
      void Function(CFMutableStringRef, int)>();

  void CFStringFold1(
    CFMutableStringRef theString,
    int theFlags,
    CFLocaleRef theLocale,
  ) {
    return _CFStringFold1(
      theString,
      theFlags,
      theLocale,
    );
  }

  late final _CFStringFold1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, ffi.Int32, CFLocaleRef)>>('CFStringFold');
  late final _CFStringFold1 = _CFStringFold1Ptr.asFunction<
      void Function(CFMutableStringRef, int, CFLocaleRef)>();

  int CFStringTransform1(
    CFMutableStringRef string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform1(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransform1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFMutableStringRef, ffi.Pointer<CFRange>,
              CFStringRef, Boolean)>>('CFStringTransform');
  late final _CFStringTransform1 = _CFStringTransform1Ptr.asFunction<
      int Function(
          CFMutableStringRef, ffi.Pointer<CFRange>, CFStringRef, int)>();

  int CFStringIsEncodingAvailable1(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable1(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailable1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable1 =
      _CFStringIsEncodingAvailable1Ptr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings1() {
    return _CFStringGetListOfAvailableEncodings1();
  }

  late final _CFStringGetListOfAvailableEncodings1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings1 =
      _CFStringGetListOfAvailableEncodings1Ptr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding1(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding1(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding1 =
      _CFStringGetNameOfEncoding1Ptr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding1(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding1(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncoding1Ptr = _lookup<
          ffi.NativeFunction<pkg_ffi.UnsignedLong Function(CFStringEncoding)>>(
      'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding1 =
      _CFStringConvertEncodingToNSStringEncoding1Ptr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding1(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding1(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncoding1Ptr = _lookup<
          ffi.NativeFunction<CFStringEncoding Function(pkg_ffi.UnsignedLong)>>(
      'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding1 =
      _CFStringConvertNSStringEncodingToEncoding1Ptr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage1(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage1(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepage1Ptr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage1 =
      _CFStringConvertEncodingToWindowsCodepage1Ptr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding1(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding1(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(UInt32)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding1 =
      _CFStringConvertWindowsCodepageToEncoding1Ptr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding1(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding1(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding1 =
      _CFStringConvertIANACharSetNameToEncoding1Ptr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName1(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName1(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetName1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName1 =
      _CFStringConvertEncodingToIANACharSetName1Ptr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding1(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding1(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncoding1Ptr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding1 =
      _CFStringGetMostCompatibleMacStringEncoding1Ptr.asFunction<
          int Function(int)>();

  void CFShow1(
    CFTypeRef obj,
  ) {
    return _CFShow1(
      obj,
    );
  }

  late final _CFShow1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFShow');
  late final _CFShow1 = _CFShow1Ptr.asFunction<void Function(CFTypeRef)>();

  void CFShowStr1(
    CFStringRef str,
  ) {
    return _CFShowStr1(
      str,
    );
  }

  late final _CFShowStr1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef)>>('CFShowStr');
  late final _CFShowStr1 =
      _CFShowStr1Ptr.asFunction<void Function(CFStringRef)>();

  CFStringRef __CFStringMakeConstantString1(
    ffi.Pointer<pkg_ffi.Char> cStr,
  ) {
    return ___CFStringMakeConstantString1(
      cStr,
    );
  }

  late final ___CFStringMakeConstantString1Ptr = _lookup<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>>(
      '__CFStringMakeConstantString');
  late final ___CFStringMakeConstantString1 = ___CFStringMakeConstantString1Ptr
      .asFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>();

  int CFTimeZoneGetTypeID1() {
    return _CFTimeZoneGetTypeID1();
  }

  late final _CFTimeZoneGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTimeZoneGetTypeID');
  late final _CFTimeZoneGetTypeID1 =
      _CFTimeZoneGetTypeID1Ptr.asFunction<int Function()>();

  CFTimeZoneRef CFTimeZoneCopySystem1() {
    return _CFTimeZoneCopySystem1();
  }

  late final _CFTimeZoneCopySystem1Ptr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopySystem');
  late final _CFTimeZoneCopySystem1 =
      _CFTimeZoneCopySystem1Ptr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneResetSystem1() {
    return _CFTimeZoneResetSystem1();
  }

  late final _CFTimeZoneResetSystem1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFTimeZoneResetSystem');
  late final _CFTimeZoneResetSystem1 =
      _CFTimeZoneResetSystem1Ptr.asFunction<void Function()>();

  CFTimeZoneRef CFTimeZoneCopyDefault1() {
    return _CFTimeZoneCopyDefault1();
  }

  late final _CFTimeZoneCopyDefault1Ptr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopyDefault');
  late final _CFTimeZoneCopyDefault1 =
      _CFTimeZoneCopyDefault1Ptr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneSetDefault1(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneSetDefault1(
      tz,
    );
  }

  late final _CFTimeZoneSetDefault1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTimeZoneRef)>>(
          'CFTimeZoneSetDefault');
  late final _CFTimeZoneSetDefault1 =
      _CFTimeZoneSetDefault1Ptr.asFunction<void Function(CFTimeZoneRef)>();

  CFArrayRef CFTimeZoneCopyKnownNames1() {
    return _CFTimeZoneCopyKnownNames1();
  }

  late final _CFTimeZoneCopyKnownNames1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFTimeZoneCopyKnownNames');
  late final _CFTimeZoneCopyKnownNames1 =
      _CFTimeZoneCopyKnownNames1Ptr.asFunction<CFArrayRef Function()>();

  CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary1() {
    return _CFTimeZoneCopyAbbreviationDictionary1();
  }

  late final _CFTimeZoneCopyAbbreviationDictionary1Ptr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function()>>(
          'CFTimeZoneCopyAbbreviationDictionary');
  late final _CFTimeZoneCopyAbbreviationDictionary1 =
      _CFTimeZoneCopyAbbreviationDictionary1Ptr.asFunction<
          CFDictionaryRef Function()>();

  void CFTimeZoneSetAbbreviationDictionary1(
    CFDictionaryRef dict,
  ) {
    return _CFTimeZoneSetAbbreviationDictionary1(
      dict,
    );
  }

  late final _CFTimeZoneSetAbbreviationDictionary1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFDictionaryRef)>>(
          'CFTimeZoneSetAbbreviationDictionary');
  late final _CFTimeZoneSetAbbreviationDictionary1 =
      _CFTimeZoneSetAbbreviationDictionary1Ptr.asFunction<
          void Function(CFDictionaryRef)>();

  CFTimeZoneRef CFTimeZoneCreate1(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFDataRef data,
  ) {
    return _CFTimeZoneCreate1(
      allocator,
      name,
      data,
    );
  }

  late final _CFTimeZoneCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(
              CFAllocatorRef, CFStringRef, CFDataRef)>>('CFTimeZoneCreate');
  late final _CFTimeZoneCreate1 = _CFTimeZoneCreate1Ptr.asFunction<
      CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT1(
    CFAllocatorRef allocator,
    double ti,
  ) {
    return _CFTimeZoneCreateWithTimeIntervalFromGMT1(
      allocator,
      ti,
    );
  }

  late final _CFTimeZoneCreateWithTimeIntervalFromGMT1Ptr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef,
              CFTimeInterval)>>('CFTimeZoneCreateWithTimeIntervalFromGMT');
  late final _CFTimeZoneCreateWithTimeIntervalFromGMT1 =
      _CFTimeZoneCreateWithTimeIntervalFromGMT1Ptr.asFunction<
          CFTimeZoneRef Function(CFAllocatorRef, double)>();

  CFTimeZoneRef CFTimeZoneCreateWithName1(
    CFAllocatorRef allocator,
    CFStringRef name,
    int tryAbbrev,
  ) {
    return _CFTimeZoneCreateWithName1(
      allocator,
      name,
      tryAbbrev,
    );
  }

  late final _CFTimeZoneCreateWithName1Ptr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef, CFStringRef,
              Boolean)>>('CFTimeZoneCreateWithName');
  late final _CFTimeZoneCreateWithName1 = _CFTimeZoneCreateWithName1Ptr
      .asFunction<CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, int)>();

  CFStringRef CFTimeZoneGetName1(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetName1(
      tz,
    );
  }

  late final _CFTimeZoneGetName1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetName');
  late final _CFTimeZoneGetName1 =
      _CFTimeZoneGetName1Ptr.asFunction<CFStringRef Function(CFTimeZoneRef)>();

  CFDataRef CFTimeZoneGetData1(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetData1(
      tz,
    );
  }

  late final _CFTimeZoneGetData1Ptr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetData');
  late final _CFTimeZoneGetData1 =
      _CFTimeZoneGetData1Ptr.asFunction<CFDataRef Function(CFTimeZoneRef)>();

  double CFTimeZoneGetSecondsFromGMT1(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetSecondsFromGMT1(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetSecondsFromGMT1Ptr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneGetSecondsFromGMT');
  late final _CFTimeZoneGetSecondsFromGMT1 = _CFTimeZoneGetSecondsFromGMT1Ptr
      .asFunction<double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyAbbreviation1(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneCopyAbbreviation1(
      tz,
      at,
    );
  }

  late final _CFTimeZoneCopyAbbreviation1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneCopyAbbreviation');
  late final _CFTimeZoneCopyAbbreviation1 = _CFTimeZoneCopyAbbreviation1Ptr
      .asFunction<CFStringRef Function(CFTimeZoneRef, double)>();

  int CFTimeZoneIsDaylightSavingTime1(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneIsDaylightSavingTime1(
      tz,
      at,
    );
  }

  late final _CFTimeZoneIsDaylightSavingTime1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneIsDaylightSavingTime');
  late final _CFTimeZoneIsDaylightSavingTime1 =
      _CFTimeZoneIsDaylightSavingTime1Ptr.asFunction<
          int Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetDaylightSavingTimeOffset1(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetDaylightSavingTimeOffset1(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetDaylightSavingTimeOffset1Ptr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(CFTimeZoneRef,
              CFAbsoluteTime)>>('CFTimeZoneGetDaylightSavingTimeOffset');
  late final _CFTimeZoneGetDaylightSavingTimeOffset1 =
      _CFTimeZoneGetDaylightSavingTimeOffset1Ptr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetNextDaylightSavingTimeTransition1(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetNextDaylightSavingTimeTransition1(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetNextDaylightSavingTimeTransition1Ptr = _lookup<
          ffi.NativeFunction<
              CFAbsoluteTime Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneGetNextDaylightSavingTimeTransition');
  late final _CFTimeZoneGetNextDaylightSavingTimeTransition1 =
      _CFTimeZoneGetNextDaylightSavingTimeTransition1Ptr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyLocalizedName1(
    CFTimeZoneRef tz,
    int style,
    CFLocaleRef locale,
  ) {
    return _CFTimeZoneCopyLocalizedName1(
      tz,
      style,
      locale,
    );
  }

  late final _CFTimeZoneCopyLocalizedName1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFTimeZoneRef, ffi.Int32,
              CFLocaleRef)>>('CFTimeZoneCopyLocalizedName');
  late final _CFTimeZoneCopyLocalizedName1 = _CFTimeZoneCopyLocalizedName1Ptr
      .asFunction<CFStringRef Function(CFTimeZoneRef, int, CFLocaleRef)>();

  int CFCalendarGetTypeID1() {
    return _CFCalendarGetTypeID1();
  }

  late final _CFCalendarGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFCalendarGetTypeID');
  late final _CFCalendarGetTypeID1 =
      _CFCalendarGetTypeID1Ptr.asFunction<int Function()>();

  CFCalendarRef CFCalendarCopyCurrent1() {
    return _CFCalendarCopyCurrent1();
  }

  late final _CFCalendarCopyCurrent1Ptr =
      _lookup<ffi.NativeFunction<CFCalendarRef Function()>>(
          'CFCalendarCopyCurrent');
  late final _CFCalendarCopyCurrent1 =
      _CFCalendarCopyCurrent1Ptr.asFunction<CFCalendarRef Function()>();

  CFCalendarRef CFCalendarCreateWithIdentifier1(
    CFAllocatorRef allocator,
    CFCalendarIdentifier identifier,
  ) {
    return _CFCalendarCreateWithIdentifier1(
      allocator,
      identifier,
    );
  }

  late final _CFCalendarCreateWithIdentifier1Ptr = _lookup<
      ffi.NativeFunction<
          CFCalendarRef Function(CFAllocatorRef,
              CFCalendarIdentifier)>>('CFCalendarCreateWithIdentifier');
  late final _CFCalendarCreateWithIdentifier1 =
      _CFCalendarCreateWithIdentifier1Ptr.asFunction<
          CFCalendarRef Function(CFAllocatorRef, CFCalendarIdentifier)>();

  CFCalendarIdentifier CFCalendarGetIdentifier1(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetIdentifier1(
      calendar,
    );
  }

  late final _CFCalendarGetIdentifier1Ptr =
      _lookup<ffi.NativeFunction<CFCalendarIdentifier Function(CFCalendarRef)>>(
          'CFCalendarGetIdentifier');
  late final _CFCalendarGetIdentifier1 = _CFCalendarGetIdentifier1Ptr
      .asFunction<CFCalendarIdentifier Function(CFCalendarRef)>();

  CFLocaleRef CFCalendarCopyLocale1(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyLocale1(
      calendar,
    );
  }

  late final _CFCalendarCopyLocale1Ptr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFCalendarRef)>>(
          'CFCalendarCopyLocale');
  late final _CFCalendarCopyLocale1 = _CFCalendarCopyLocale1Ptr.asFunction<
      CFLocaleRef Function(CFCalendarRef)>();

  void CFCalendarSetLocale1(
    CFCalendarRef calendar,
    CFLocaleRef locale,
  ) {
    return _CFCalendarSetLocale1(
      calendar,
      locale,
    );
  }

  late final _CFCalendarSetLocale1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFLocaleRef)>>(
      'CFCalendarSetLocale');
  late final _CFCalendarSetLocale1 = _CFCalendarSetLocale1Ptr.asFunction<
      void Function(CFCalendarRef, CFLocaleRef)>();

  CFTimeZoneRef CFCalendarCopyTimeZone1(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyTimeZone1(
      calendar,
    );
  }

  late final _CFCalendarCopyTimeZone1Ptr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function(CFCalendarRef)>>(
          'CFCalendarCopyTimeZone');
  late final _CFCalendarCopyTimeZone1 = _CFCalendarCopyTimeZone1Ptr.asFunction<
      CFTimeZoneRef Function(CFCalendarRef)>();

  void CFCalendarSetTimeZone1(
    CFCalendarRef calendar,
    CFTimeZoneRef tz,
  ) {
    return _CFCalendarSetTimeZone1(
      calendar,
      tz,
    );
  }

  late final _CFCalendarSetTimeZone1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFTimeZoneRef)>>(
      'CFCalendarSetTimeZone');
  late final _CFCalendarSetTimeZone1 = _CFCalendarSetTimeZone1Ptr.asFunction<
      void Function(CFCalendarRef, CFTimeZoneRef)>();

  int CFCalendarGetFirstWeekday1(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetFirstWeekday1(
      calendar,
    );
  }

  late final _CFCalendarGetFirstWeekday1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetFirstWeekday');
  late final _CFCalendarGetFirstWeekday1 =
      _CFCalendarGetFirstWeekday1Ptr.asFunction<int Function(CFCalendarRef)>();

  void CFCalendarSetFirstWeekday1(
    CFCalendarRef calendar,
    int wkdy,
  ) {
    return _CFCalendarSetFirstWeekday1(
      calendar,
      wkdy,
    );
  }

  late final _CFCalendarSetFirstWeekday1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetFirstWeekday');
  late final _CFCalendarSetFirstWeekday1 = _CFCalendarSetFirstWeekday1Ptr
      .asFunction<void Function(CFCalendarRef, int)>();

  int CFCalendarGetMinimumDaysInFirstWeek1(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetMinimumDaysInFirstWeek1(
      calendar,
    );
  }

  late final _CFCalendarGetMinimumDaysInFirstWeek1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetMinimumDaysInFirstWeek');
  late final _CFCalendarGetMinimumDaysInFirstWeek1 =
      _CFCalendarGetMinimumDaysInFirstWeek1Ptr.asFunction<
          int Function(CFCalendarRef)>();

  void CFCalendarSetMinimumDaysInFirstWeek1(
    CFCalendarRef calendar,
    int mwd,
  ) {
    return _CFCalendarSetMinimumDaysInFirstWeek1(
      calendar,
      mwd,
    );
  }

  late final _CFCalendarSetMinimumDaysInFirstWeek1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetMinimumDaysInFirstWeek');
  late final _CFCalendarSetMinimumDaysInFirstWeek1 =
      _CFCalendarSetMinimumDaysInFirstWeek1Ptr.asFunction<
          void Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMinimumRangeOfUnit1(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMinimumRangeOfUnit1(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMinimumRangeOfUnit1Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFCalendarRef, ffi.Int32)>>(
          'CFCalendarGetMinimumRangeOfUnit');
  late final _CFCalendarGetMinimumRangeOfUnit1 =
      _CFCalendarGetMinimumRangeOfUnit1Ptr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMaximumRangeOfUnit1(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMaximumRangeOfUnit1(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMaximumRangeOfUnit1Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFCalendarRef, ffi.Int32)>>(
          'CFCalendarGetMaximumRangeOfUnit');
  late final _CFCalendarGetMaximumRangeOfUnit1 =
      _CFCalendarGetMaximumRangeOfUnit1Ptr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetRangeOfUnit1(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetRangeOfUnit1(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetRangeOfUnit1Ptr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFCalendarRef, ffi.Int32, ffi.Int32,
              CFAbsoluteTime)>>('CFCalendarGetRangeOfUnit');
  late final _CFCalendarGetRangeOfUnit1 = _CFCalendarGetRangeOfUnit1Ptr
      .asFunction<CFRange Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetOrdinalityOfUnit1(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetOrdinalityOfUnit1(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetOrdinalityOfUnit1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFCalendarRef, ffi.Int32, ffi.Int32,
              CFAbsoluteTime)>>('CFCalendarGetOrdinalityOfUnit');
  late final _CFCalendarGetOrdinalityOfUnit1 =
      _CFCalendarGetOrdinalityOfUnit1Ptr.asFunction<
          int Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetTimeRangeOfUnit1(
    CFCalendarRef calendar,
    int unit,
    double at,
    ffi.Pointer<CFAbsoluteTime> startp,
    ffi.Pointer<CFTimeInterval> tip,
  ) {
    return _CFCalendarGetTimeRangeOfUnit1(
      calendar,
      unit,
      at,
      startp,
      tip,
    );
  }

  late final _CFCalendarGetTimeRangeOfUnit1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Int32,
              CFAbsoluteTime,
              ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>>('CFCalendarGetTimeRangeOfUnit');
  late final _CFCalendarGetTimeRangeOfUnit1 =
      _CFCalendarGetTimeRangeOfUnit1Ptr.asFunction<
          int Function(CFCalendarRef, int, double, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>();

  int CFCalendarComposeAbsoluteTime1(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarComposeAbsoluteTime1(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarComposeAbsoluteTime1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarComposeAbsoluteTime');
  late final _CFCalendarComposeAbsoluteTime1 =
      _CFCalendarComposeAbsoluteTime1Ptr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarDecomposeAbsoluteTime1(
    CFCalendarRef calendar,
    double at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarDecomposeAbsoluteTime1(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarDecomposeAbsoluteTime1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, CFAbsoluteTime,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarDecomposeAbsoluteTime');
  late final _CFCalendarDecomposeAbsoluteTime1 =
      _CFCalendarDecomposeAbsoluteTime1Ptr.asFunction<
          int Function(CFCalendarRef, double, ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarAddComponents1(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarAddComponents1(
      calendar,
      at,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarAddComponents1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Pointer<CFAbsoluteTime>,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarAddComponents');
  late final _CFCalendarAddComponents1 =
      _CFCalendarAddComponents1Ptr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>, int,
              ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarGetComponentDifference1(
    CFCalendarRef calendar,
    double startingAT,
    double resultAT,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarGetComponentDifference1(
      calendar,
      startingAT,
      resultAT,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarGetComponentDifference1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarGetComponentDifference');
  late final _CFCalendarGetComponentDifference1 =
      _CFCalendarGetComponentDifference1Ptr.asFunction<
          int Function(
              CFCalendarRef, double, double, int, ffi.Pointer<pkg_ffi.Char>)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate1(
    CFAllocatorRef allocator,
    CFStringRef tmplate,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate1(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplate1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFOptionFlags,
              CFLocaleRef)>>('CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate1 =
      _CFDateFormatterCreateDateFormatFromTemplate1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, int, CFLocaleRef)>();

  int CFDateFormatterGetTypeID1() {
    return _CFDateFormatterGetTypeID1();
  }

  late final _CFDateFormatterGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID1 =
      _CFDateFormatterGetTypeID1Ptr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter1(
    CFAllocatorRef allocator,
    int formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter1(
      allocator,
      formatOptions,
    );
  }

  late final _CFDateFormatterCreateISO8601Formatter1Ptr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef,
              ffi.Int32)>>('CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter1 =
      _CFDateFormatterCreateISO8601Formatter1Ptr.asFunction<
          CFDateFormatterRef Function(CFAllocatorRef, int)>();

  CFDateFormatterRef CFDateFormatterCreate1(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int dateStyle,
    int timeStyle,
  ) {
    return _CFDateFormatterCreate1(
      allocator,
      locale,
      dateStyle,
      timeStyle,
    );
  }

  late final _CFDateFormatterCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, ffi.Int32,
              ffi.Int32)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate1 = _CFDateFormatterCreate1Ptr.asFunction<
      CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, int, int)>();

  CFLocaleRef CFDateFormatterGetLocale1(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale1(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocale1Ptr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale1 = _CFDateFormatterGetLocale1Ptr
      .asFunction<CFLocaleRef Function(CFDateFormatterRef)>();

  int CFDateFormatterGetDateStyle1(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetDateStyle1(
      formatter,
    );
  }

  late final _CFDateFormatterGetDateStyle1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle1 = _CFDateFormatterGetDateStyle1Ptr
      .asFunction<int Function(CFDateFormatterRef)>();

  int CFDateFormatterGetTimeStyle1(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetTimeStyle1(
      formatter,
    );
  }

  late final _CFDateFormatterGetTimeStyle1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle1 = _CFDateFormatterGetTimeStyle1Ptr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat1(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat1(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormat1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat1 = _CFDateFormatterGetFormat1Ptr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat1(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat1(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDateFormatterRef, CFStringRef)>>('CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat1 = _CFDateFormatterSetFormat1Ptr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate1(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate1(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDate1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate1 =
      _CFDateFormatterCreateStringWithDate1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime1(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime1(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTime1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFAbsoluteTime)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime1 =
      _CFDateFormatterCreateStringWithAbsoluteTime1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString1(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString1(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromString1Ptr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString1 =
      _CFDateFormatterCreateDateFromString1Ptr.asFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString1(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<CFAbsoluteTime> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString1(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromString1Ptr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<CFAbsoluteTime>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString1 =
      _CFDateFormatterGetAbsoluteTimeFromString1Ptr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<CFAbsoluteTime>)>();

  void CFDateFormatterSetProperty1(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty1(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetProperty1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty1 = _CFDateFormatterSetProperty1Ptr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty1(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty1(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyProperty1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty1 = _CFDateFormatterCopyProperty1Ptr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  int CFErrorGetTypeID1() {
    return _CFErrorGetTypeID1();
  }

  late final _CFErrorGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFErrorGetTypeID');
  late final _CFErrorGetTypeID1 =
      _CFErrorGetTypeID1Ptr.asFunction<int Function()>();

  CFErrorRef CFErrorCreate1(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    CFDictionaryRef userInfo,
  ) {
    return _CFErrorCreate1(
      allocator,
      domain,
      code,
      userInfo,
    );
  }

  late final _CFErrorCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(CFAllocatorRef, CFErrorDomain, CFIndex,
              CFDictionaryRef)>>('CFErrorCreate');
  late final _CFErrorCreate1 = _CFErrorCreate1Ptr.asFunction<
      CFErrorRef Function(
          CFAllocatorRef, CFErrorDomain, int, CFDictionaryRef)>();

  CFErrorRef CFErrorCreateWithUserInfoKeysAndValues1(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoKeys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoValues,
    int numUserInfoValues,
  ) {
    return _CFErrorCreateWithUserInfoKeysAndValues1(
      allocator,
      domain,
      code,
      userInfoKeys,
      userInfoValues,
      numUserInfoValues,
    );
  }

  late final _CFErrorCreateWithUserInfoKeysAndValues1Ptr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              CFIndex,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFErrorCreateWithUserInfoKeysAndValues');
  late final _CFErrorCreateWithUserInfoKeysAndValues1 =
      _CFErrorCreateWithUserInfoKeysAndValues1Ptr.asFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int)>();

  CFErrorDomain CFErrorGetDomain1(
    CFErrorRef err,
  ) {
    return _CFErrorGetDomain1(
      err,
    );
  }

  late final _CFErrorGetDomain1Ptr =
      _lookup<ffi.NativeFunction<CFErrorDomain Function(CFErrorRef)>>(
          'CFErrorGetDomain');
  late final _CFErrorGetDomain1 =
      _CFErrorGetDomain1Ptr.asFunction<CFErrorDomain Function(CFErrorRef)>();

  int CFErrorGetCode1(
    CFErrorRef err,
  ) {
    return _CFErrorGetCode1(
      err,
    );
  }

  late final _CFErrorGetCode1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFErrorRef)>>(
          'CFErrorGetCode');
  late final _CFErrorGetCode1 =
      _CFErrorGetCode1Ptr.asFunction<int Function(CFErrorRef)>();

  CFDictionaryRef CFErrorCopyUserInfo1(
    CFErrorRef err,
  ) {
    return _CFErrorCopyUserInfo1(
      err,
    );
  }

  late final _CFErrorCopyUserInfo1Ptr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFErrorRef)>>(
          'CFErrorCopyUserInfo');
  late final _CFErrorCopyUserInfo1 = _CFErrorCopyUserInfo1Ptr.asFunction<
      CFDictionaryRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyDescription1(
    CFErrorRef err,
  ) {
    return _CFErrorCopyDescription1(
      err,
    );
  }

  late final _CFErrorCopyDescription1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyDescription');
  late final _CFErrorCopyDescription1 = _CFErrorCopyDescription1Ptr.asFunction<
      CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyFailureReason1(
    CFErrorRef err,
  ) {
    return _CFErrorCopyFailureReason1(
      err,
    );
  }

  late final _CFErrorCopyFailureReason1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyFailureReason');
  late final _CFErrorCopyFailureReason1 = _CFErrorCopyFailureReason1Ptr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyRecoverySuggestion1(
    CFErrorRef err,
  ) {
    return _CFErrorCopyRecoverySuggestion1(
      err,
    );
  }

  late final _CFErrorCopyRecoverySuggestion1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyRecoverySuggestion');
  late final _CFErrorCopyRecoverySuggestion1 =
      _CFErrorCopyRecoverySuggestion1Ptr.asFunction<
          CFStringRef Function(CFErrorRef)>();

  int CFBooleanGetTypeID1() {
    return _CFBooleanGetTypeID1();
  }

  late final _CFBooleanGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID1 =
      _CFBooleanGetTypeID1Ptr.asFunction<int Function()>();

  int CFBooleanGetValue1(
    CFBooleanRef boolean,
  ) {
    return _CFBooleanGetValue1(
      boolean,
    );
  }

  late final _CFBooleanGetValue1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBooleanRef)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue1 =
      _CFBooleanGetValue1Ptr.asFunction<int Function(CFBooleanRef)>();

  int CFNumberGetTypeID1() {
    return _CFNumberGetTypeID1();
  }

  late final _CFNumberGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNumberGetTypeID');
  late final _CFNumberGetTypeID1 =
      _CFNumberGetTypeID1Ptr.asFunction<int Function()>();

  CFNumberRef CFNumberCreate1(
    CFAllocatorRef allocator,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberCreate1(
      allocator,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(CFAllocatorRef, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberCreate');
  late final _CFNumberCreate1 = _CFNumberCreate1Ptr.asFunction<
      CFNumberRef Function(CFAllocatorRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberGetType1(
    CFNumberRef number,
  ) {
    return _CFNumberGetType1(
      number,
    );
  }

  late final _CFNumberGetType1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFNumberRef)>>(
          'CFNumberGetType');
  late final _CFNumberGetType1 =
      _CFNumberGetType1Ptr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetByteSize1(
    CFNumberRef number,
  ) {
    return _CFNumberGetByteSize1(
      number,
    );
  }

  late final _CFNumberGetByteSize1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetByteSize');
  late final _CFNumberGetByteSize1 =
      _CFNumberGetByteSize1Ptr.asFunction<int Function(CFNumberRef)>();

  int CFNumberIsFloatType1(
    CFNumberRef number,
  ) {
    return _CFNumberIsFloatType1(
      number,
    );
  }

  late final _CFNumberIsFloatType1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFNumberRef)>>(
          'CFNumberIsFloatType');
  late final _CFNumberIsFloatType1 =
      _CFNumberIsFloatType1Ptr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetValue1(
    CFNumberRef number,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue1(
      number,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberGetValue1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFNumberRef, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue1 = _CFNumberGetValue1Ptr.asFunction<
      int Function(CFNumberRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberCompare1(
    CFNumberRef number,
    CFNumberRef otherNumber,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFNumberCompare1(
      number,
      otherNumber,
      context,
    );
  }

  late final _CFNumberCompare1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFNumberRef, CFNumberRef,
              ffi.Pointer<ffi.Void>)>>('CFNumberCompare');
  late final _CFNumberCompare1 = _CFNumberCompare1Ptr.asFunction<
      int Function(CFNumberRef, CFNumberRef, ffi.Pointer<ffi.Void>)>();

  int CFNumberFormatterGetTypeID1() {
    return _CFNumberFormatterGetTypeID1();
  }

  late final _CFNumberFormatterGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNumberFormatterGetTypeID');
  late final _CFNumberFormatterGetTypeID1 =
      _CFNumberFormatterGetTypeID1Ptr.asFunction<int Function()>();

  CFNumberFormatterRef CFNumberFormatterCreate1(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int style,
  ) {
    return _CFNumberFormatterCreate1(
      allocator,
      locale,
      style,
    );
  }

  late final _CFNumberFormatterCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef,
              ffi.Int32)>>('CFNumberFormatterCreate');
  late final _CFNumberFormatterCreate1 =
      _CFNumberFormatterCreate1Ptr.asFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef, int)>();

  CFLocaleRef CFNumberFormatterGetLocale1(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetLocale1(
      formatter,
    );
  }

  late final _CFNumberFormatterGetLocale1Ptr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetLocale');
  late final _CFNumberFormatterGetLocale1 = _CFNumberFormatterGetLocale1Ptr
      .asFunction<CFLocaleRef Function(CFNumberFormatterRef)>();

  int CFNumberFormatterGetStyle1(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetStyle1(
      formatter,
    );
  }

  late final _CFNumberFormatterGetStyle1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetStyle');
  late final _CFNumberFormatterGetStyle1 = _CFNumberFormatterGetStyle1Ptr
      .asFunction<int Function(CFNumberFormatterRef)>();

  CFStringRef CFNumberFormatterGetFormat1(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetFormat1(
      formatter,
    );
  }

  late final _CFNumberFormatterGetFormat1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetFormat');
  late final _CFNumberFormatterGetFormat1 = _CFNumberFormatterGetFormat1Ptr
      .asFunction<CFStringRef Function(CFNumberFormatterRef)>();

  void CFNumberFormatterSetFormat1(
    CFNumberFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFNumberFormatterSetFormat1(
      formatter,
      formatString,
    );
  }

  late final _CFNumberFormatterSetFormat1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef,
              CFStringRef)>>('CFNumberFormatterSetFormat');
  late final _CFNumberFormatterSetFormat1 = _CFNumberFormatterSetFormat1Ptr
      .asFunction<void Function(CFNumberFormatterRef, CFStringRef)>();

  CFStringRef CFNumberFormatterCreateStringWithNumber1(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberRef number,
  ) {
    return _CFNumberFormatterCreateStringWithNumber1(
      allocator,
      formatter,
      number,
    );
  }

  late final _CFNumberFormatterCreateStringWithNumber1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFNumberRef)>>('CFNumberFormatterCreateStringWithNumber');
  late final _CFNumberFormatterCreateStringWithNumber1 =
      _CFNumberFormatterCreateStringWithNumber1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFNumberFormatterRef, CFNumberRef)>();

  CFStringRef CFNumberFormatterCreateStringWithValue1(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterCreateStringWithValue1(
      allocator,
      formatter,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterCreateStringWithValue1Ptr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
                  ffi.Int32, ffi.Pointer<ffi.Void>)>>(
      'CFNumberFormatterCreateStringWithValue');
  late final _CFNumberFormatterCreateStringWithValue1 =
      _CFNumberFormatterCreateStringWithValue1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef, int,
              ffi.Pointer<ffi.Void>)>();

  CFNumberRef CFNumberFormatterCreateNumberFromString1(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int options,
  ) {
    return _CFNumberFormatterCreateNumberFromString1(
      allocator,
      formatter,
      string,
      rangep,
      options,
    );
  }

  late final _CFNumberFormatterCreateNumberFromString1Ptr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(
              CFAllocatorRef,
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFOptionFlags)>>('CFNumberFormatterCreateNumberFromString');
  late final _CFNumberFormatterCreateNumberFromString1 =
      _CFNumberFormatterCreateNumberFromString1Ptr.asFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>, int)>();

  int CFNumberFormatterGetValueFromString1(
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterGetValueFromString1(
      formatter,
      string,
      rangep,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterGetValueFromString1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('CFNumberFormatterGetValueFromString');
  late final _CFNumberFormatterGetValueFromString1 =
      _CFNumberFormatterGetValueFromString1Ptr.asFunction<
          int Function(CFNumberFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              int, ffi.Pointer<ffi.Void>)>();

  void CFNumberFormatterSetProperty1(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
    CFTypeRef value,
  ) {
    return _CFNumberFormatterSetProperty1(
      formatter,
      key,
      value,
    );
  }

  late final _CFNumberFormatterSetProperty1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef, CFNumberFormatterKey,
              CFTypeRef)>>('CFNumberFormatterSetProperty');
  late final _CFNumberFormatterSetProperty1 =
      _CFNumberFormatterSetProperty1Ptr.asFunction<
          void Function(
              CFNumberFormatterRef, CFNumberFormatterKey, CFTypeRef)>();

  CFTypeRef CFNumberFormatterCopyProperty1(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
  ) {
    return _CFNumberFormatterCopyProperty1(
      formatter,
      key,
    );
  }

  late final _CFNumberFormatterCopyProperty1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFNumberFormatterRef,
              CFNumberFormatterKey)>>('CFNumberFormatterCopyProperty');
  late final _CFNumberFormatterCopyProperty1 =
      _CFNumberFormatterCopyProperty1Ptr.asFunction<
          CFTypeRef Function(CFNumberFormatterRef, CFNumberFormatterKey)>();

  int CFNumberFormatterGetDecimalInfoForCurrencyCode1(
    CFStringRef currencyCode,
    ffi.Pointer<ffi.Int32> defaultFractionDigits,
    ffi.Pointer<ffi.Double> roundingIncrement,
  ) {
    return _CFNumberFormatterGetDecimalInfoForCurrencyCode1(
      currencyCode,
      defaultFractionDigits,
      roundingIncrement,
    );
  }

  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode1Ptr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFStringRef, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Double>)>>(
      'CFNumberFormatterGetDecimalInfoForCurrencyCode');
  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode1 =
      _CFNumberFormatterGetDecimalInfoForCurrencyCode1Ptr.asFunction<
          int Function(
              CFStringRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Double>)>();

  CFPropertyListRef CFPreferencesCopyAppValue1(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesCopyAppValue1(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesCopyAppValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFStringRef, CFStringRef)>>('CFPreferencesCopyAppValue');
  late final _CFPreferencesCopyAppValue1 = _CFPreferencesCopyAppValue1Ptr
      .asFunction<CFPropertyListRef Function(CFStringRef, CFStringRef)>();

  int CFPreferencesGetAppBooleanValue1(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppBooleanValue1(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppBooleanValue1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppBooleanValue');
  late final _CFPreferencesGetAppBooleanValue1 =
      _CFPreferencesGetAppBooleanValue1Ptr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  int CFPreferencesGetAppIntegerValue1(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppIntegerValue1(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppIntegerValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppIntegerValue');
  late final _CFPreferencesGetAppIntegerValue1 =
      _CFPreferencesGetAppIntegerValue1Ptr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  void CFPreferencesSetAppValue1(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesSetAppValue1(
      key,
      value,
      applicationID,
    );
  }

  late final _CFPreferencesSetAppValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef,
              CFStringRef)>>('CFPreferencesSetAppValue');
  late final _CFPreferencesSetAppValue1 = _CFPreferencesSetAppValue1Ptr
      .asFunction<void Function(CFStringRef, CFPropertyListRef, CFStringRef)>();

  void CFPreferencesAddSuitePreferencesToApp1(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesAddSuitePreferencesToApp1(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesAddSuitePreferencesToApp1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAddSuitePreferencesToApp');
  late final _CFPreferencesAddSuitePreferencesToApp1 =
      _CFPreferencesAddSuitePreferencesToApp1Ptr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  void CFPreferencesRemoveSuitePreferencesFromApp1(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesRemoveSuitePreferencesFromApp1(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesRemoveSuitePreferencesFromApp1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesRemoveSuitePreferencesFromApp');
  late final _CFPreferencesRemoveSuitePreferencesFromApp1 =
      _CFPreferencesRemoveSuitePreferencesFromApp1Ptr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  int CFPreferencesAppSynchronize1(
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppSynchronize1(
      applicationID,
    );
  }

  late final _CFPreferencesAppSynchronize1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef)>>(
          'CFPreferencesAppSynchronize');
  late final _CFPreferencesAppSynchronize1 =
      _CFPreferencesAppSynchronize1Ptr.asFunction<int Function(CFStringRef)>();

  CFPropertyListRef CFPreferencesCopyValue1(
    CFStringRef key,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyValue1(
      key,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyValue');
  late final _CFPreferencesCopyValue1 = _CFPreferencesCopyValue1Ptr.asFunction<
      CFPropertyListRef Function(
          CFStringRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFPreferencesCopyMultiple1(
    CFArrayRef keysToFetch,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyMultiple1(
      keysToFetch,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyMultiple1Ptr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyMultiple');
  late final _CFPreferencesCopyMultiple1 =
      _CFPreferencesCopyMultiple1Ptr.asFunction<
          CFDictionaryRef Function(
              CFArrayRef, CFStringRef, CFStringRef, CFStringRef)>();

  void CFPreferencesSetValue1(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetValue1(
      key,
      value,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetValue');
  late final _CFPreferencesSetValue1 = _CFPreferencesSetValue1Ptr.asFunction<
      void Function(CFStringRef, CFPropertyListRef, CFStringRef, CFStringRef,
          CFStringRef)>();

  void CFPreferencesSetMultiple1(
    CFDictionaryRef keysToSet,
    CFArrayRef keysToRemove,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetMultiple1(
      keysToSet,
      keysToRemove,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetMultiple1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFArrayRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetMultiple');
  late final _CFPreferencesSetMultiple1 =
      _CFPreferencesSetMultiple1Ptr.asFunction<
          void Function(CFDictionaryRef, CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  int CFPreferencesSynchronize1(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSynchronize1(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSynchronize1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesSynchronize');
  late final _CFPreferencesSynchronize1 = _CFPreferencesSynchronize1Ptr
      .asFunction<int Function(CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyApplicationList1(
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyApplicationList1(
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyApplicationList1Ptr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFStringRef, CFStringRef)>>(
      'CFPreferencesCopyApplicationList');
  late final _CFPreferencesCopyApplicationList1 =
      _CFPreferencesCopyApplicationList1Ptr.asFunction<
          CFArrayRef Function(CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyKeyList1(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyKeyList1(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyKeyList1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyKeyList');
  late final _CFPreferencesCopyKeyList1 = _CFPreferencesCopyKeyList1Ptr
      .asFunction<CFArrayRef Function(CFStringRef, CFStringRef, CFStringRef)>();

  int CFPreferencesAppValueIsForced1(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppValueIsForced1(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesAppValueIsForced1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAppValueIsForced');
  late final _CFPreferencesAppValueIsForced1 =
      _CFPreferencesAppValueIsForced1Ptr.asFunction<
          int Function(CFStringRef, CFStringRef)>();

  int CFURLGetTypeID1() {
    return _CFURLGetTypeID1();
  }

  late final _CFURLGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFURLGetTypeID');
  late final _CFURLGetTypeID1 =
      _CFURLGetTypeID1Ptr.asFunction<int Function()>();

  CFURLRef CFURLCreateWithBytes1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> URLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithBytes1(
      allocator,
      URLBytes,
      length,
      encoding,
      baseURL,
    );
  }

  late final _CFURLCreateWithBytes1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, CFURLRef)>>('CFURLCreateWithBytes');
  late final _CFURLCreateWithBytes1 = _CFURLCreateWithBytes1Ptr.asFunction<
      CFURLRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  CFDataRef CFURLCreateData1(
    CFAllocatorRef allocator,
    CFURLRef url,
    int encoding,
    int escapeWhitespace,
  ) {
    return _CFURLCreateData1(
      allocator,
      url,
      encoding,
      escapeWhitespace,
    );
  }

  late final _CFURLCreateData1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, CFStringEncoding,
              Boolean)>>('CFURLCreateData');
  late final _CFURLCreateData1 = _CFURLCreateData1Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFURLRef CFURLCreateWithString1(
    CFAllocatorRef allocator,
    CFStringRef URLString,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithString1(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithString1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, CFStringRef, CFURLRef)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString1 = _CFURLCreateWithString1Ptr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLRef)>();

  CFURLRef CFURLCreateAbsoluteURLWithBytes1(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> relativeURLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
    int useCompatibilityMode,
  ) {
    return _CFURLCreateAbsoluteURLWithBytes1(
      alloc,
      relativeURLBytes,
      length,
      encoding,
      baseURL,
      useCompatibilityMode,
    );
  }

  late final _CFURLCreateAbsoluteURLWithBytes1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              CFURLRef,
              Boolean)>>('CFURLCreateAbsoluteURLWithBytes');
  late final _CFURLCreateAbsoluteURLWithBytes1 =
      _CFURLCreateAbsoluteURLWithBytes1Ptr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef, int)>();

  CFURLRef CFURLCreateWithFileSystemPath1(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
  ) {
    return _CFURLCreateWithFileSystemPath1(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
    );
  }

  late final _CFURLCreateWithFileSystemPath1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, ffi.Int32,
              Boolean)>>('CFURLCreateWithFileSystemPath');
  late final _CFURLCreateWithFileSystemPath1 =
      _CFURLCreateWithFileSystemPath1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  CFURLRef CFURLCreateFromFileSystemRepresentation1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
  ) {
    return _CFURLCreateFromFileSystemRepresentation1(
      allocator,
      buffer,
      bufLen,
      isDirectory,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              Boolean)>>('CFURLCreateFromFileSystemRepresentation');
  late final _CFURLCreateFromFileSystemRepresentation1 =
      _CFURLCreateFromFileSystemRepresentation1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int)>();

  CFURLRef CFURLCreateWithFileSystemPathRelativeToBase1(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithFileSystemPathRelativeToBase1(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateWithFileSystemPathRelativeToBase1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, ffi.Int32, Boolean,
              CFURLRef)>>('CFURLCreateWithFileSystemPathRelativeToBase');
  late final _CFURLCreateWithFileSystemPathRelativeToBase1 =
      _CFURLCreateWithFileSystemPathRelativeToBase1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int, CFURLRef)>();

  CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase1(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateFromFileSystemRepresentationRelativeToBase1(
      allocator,
      buffer,
      bufLen,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase1Ptr =
      _lookup<
              ffi.NativeFunction<
                  CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
                      Boolean, CFURLRef)>>(
          'CFURLCreateFromFileSystemRepresentationRelativeToBase');
  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase1 =
      _CFURLCreateFromFileSystemRepresentationRelativeToBase1Ptr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  int CFURLGetFileSystemRepresentation1(
    CFURLRef url,
    int resolveAgainstBase,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
  ) {
    return _CFURLGetFileSystemRepresentation1(
      url,
      resolveAgainstBase,
      buffer,
      maxBufLen,
    );
  }

  late final _CFURLGetFileSystemRepresentation1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, Boolean, ffi.Pointer<UInt8>,
              CFIndex)>>('CFURLGetFileSystemRepresentation');
  late final _CFURLGetFileSystemRepresentation1 =
      _CFURLGetFileSystemRepresentation1Ptr.asFunction<
          int Function(CFURLRef, int, ffi.Pointer<UInt8>, int)>();

  CFURLRef CFURLCopyAbsoluteURL1(
    CFURLRef relativeURL,
  ) {
    return _CFURLCopyAbsoluteURL1(
      relativeURL,
    );
  }

  late final _CFURLCopyAbsoluteURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLCopyAbsoluteURL');
  late final _CFURLCopyAbsoluteURL1 =
      _CFURLCopyAbsoluteURL1Ptr.asFunction<CFURLRef Function(CFURLRef)>();

  CFStringRef CFURLGetString1(
    CFURLRef anURL,
  ) {
    return _CFURLGetString1(
      anURL,
    );
  }

  late final _CFURLGetString1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLGetString');
  late final _CFURLGetString1 =
      _CFURLGetString1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLGetBaseURL1(
    CFURLRef anURL,
  ) {
    return _CFURLGetBaseURL1(
      anURL,
    );
  }

  late final _CFURLGetBaseURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLGetBaseURL');
  late final _CFURLGetBaseURL1 =
      _CFURLGetBaseURL1Ptr.asFunction<CFURLRef Function(CFURLRef)>();

  int CFURLCanBeDecomposed1(
    CFURLRef anURL,
  ) {
    return _CFURLCanBeDecomposed1(
      anURL,
    );
  }

  late final _CFURLCanBeDecomposed1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLCanBeDecomposed');
  late final _CFURLCanBeDecomposed1 =
      _CFURLCanBeDecomposed1Ptr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyScheme1(
    CFURLRef anURL,
  ) {
    return _CFURLCopyScheme1(
      anURL,
    );
  }

  late final _CFURLCopyScheme1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyScheme');
  late final _CFURLCopyScheme1 =
      _CFURLCopyScheme1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyNetLocation1(
    CFURLRef anURL,
  ) {
    return _CFURLCopyNetLocation1(
      anURL,
    );
  }

  late final _CFURLCopyNetLocation1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyNetLocation');
  late final _CFURLCopyNetLocation1 =
      _CFURLCopyNetLocation1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPath1(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPath1(
      anURL,
    );
  }

  late final _CFURLCopyPath1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPath');
  late final _CFURLCopyPath1 =
      _CFURLCopyPath1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyStrictPath1(
    CFURLRef anURL,
    ffi.Pointer<Boolean> isAbsolute,
  ) {
    return _CFURLCopyStrictPath1(
      anURL,
      isAbsolute,
    );
  }

  late final _CFURLCopyStrictPath1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFURLRef, ffi.Pointer<Boolean>)>>('CFURLCopyStrictPath');
  late final _CFURLCopyStrictPath1 = _CFURLCopyStrictPath1Ptr.asFunction<
      CFStringRef Function(CFURLRef, ffi.Pointer<Boolean>)>();

  CFStringRef CFURLCopyFileSystemPath1(
    CFURLRef anURL,
    int pathStyle,
  ) {
    return _CFURLCopyFileSystemPath1(
      anURL,
      pathStyle,
    );
  }

  late final _CFURLCopyFileSystemPath1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, ffi.Int32)>>(
          'CFURLCopyFileSystemPath');
  late final _CFURLCopyFileSystemPath1 = _CFURLCopyFileSystemPath1Ptr
      .asFunction<CFStringRef Function(CFURLRef, int)>();

  int CFURLHasDirectoryPath1(
    CFURLRef anURL,
  ) {
    return _CFURLHasDirectoryPath1(
      anURL,
    );
  }

  late final _CFURLHasDirectoryPath1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLHasDirectoryPath');
  late final _CFURLHasDirectoryPath1 =
      _CFURLHasDirectoryPath1Ptr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyResourceSpecifier1(
    CFURLRef anURL,
  ) {
    return _CFURLCopyResourceSpecifier1(
      anURL,
    );
  }

  late final _CFURLCopyResourceSpecifier1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyResourceSpecifier');
  late final _CFURLCopyResourceSpecifier1 = _CFURLCopyResourceSpecifier1Ptr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyHostName1(
    CFURLRef anURL,
  ) {
    return _CFURLCopyHostName1(
      anURL,
    );
  }

  late final _CFURLCopyHostName1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyHostName');
  late final _CFURLCopyHostName1 =
      _CFURLCopyHostName1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  int CFURLGetPortNumber1(
    CFURLRef anURL,
  ) {
    return _CFURLGetPortNumber1(
      anURL,
    );
  }

  late final _CFURLGetPortNumber1Ptr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFURLRef)>>(
          'CFURLGetPortNumber');
  late final _CFURLGetPortNumber1 =
      _CFURLGetPortNumber1Ptr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyUserName1(
    CFURLRef anURL,
  ) {
    return _CFURLCopyUserName1(
      anURL,
    );
  }

  late final _CFURLCopyUserName1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyUserName');
  late final _CFURLCopyUserName1 =
      _CFURLCopyUserName1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPassword1(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPassword1(
      anURL,
    );
  }

  late final _CFURLCopyPassword1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPassword');
  late final _CFURLCopyPassword1 =
      _CFURLCopyPassword1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyParameterString1(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyParameterString1(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyParameterString1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyParameterString');
  late final _CFURLCopyParameterString1 = _CFURLCopyParameterString1Ptr
      .asFunction<CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyQueryString1(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyQueryString1(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyQueryString1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyQueryString');
  late final _CFURLCopyQueryString1 = _CFURLCopyQueryString1Ptr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyFragment1(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyFragment1(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyFragment1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyFragment');
  late final _CFURLCopyFragment1 = _CFURLCopyFragment1Ptr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyLastPathComponent1(
    CFURLRef url,
  ) {
    return _CFURLCopyLastPathComponent1(
      url,
    );
  }

  late final _CFURLCopyLastPathComponent1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyLastPathComponent');
  late final _CFURLCopyLastPathComponent1 = _CFURLCopyLastPathComponent1Ptr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPathExtension1(
    CFURLRef url,
  ) {
    return _CFURLCopyPathExtension1(
      url,
    );
  }

  late final _CFURLCopyPathExtension1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPathExtension');
  late final _CFURLCopyPathExtension1 =
      _CFURLCopyPathExtension1Ptr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathComponent1(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef pathComponent,
    int isDirectory,
  ) {
    return _CFURLCreateCopyAppendingPathComponent1(
      allocator,
      url,
      pathComponent,
      isDirectory,
    );
  }

  late final _CFURLCreateCopyAppendingPathComponent1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              Boolean)>>('CFURLCreateCopyAppendingPathComponent');
  late final _CFURLCreateCopyAppendingPathComponent1 =
      _CFURLCreateCopyAppendingPathComponent1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef, int)>();

  CFURLRef CFURLCreateCopyDeletingLastPathComponent1(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingLastPathComponent1(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingLastPathComponent1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingLastPathComponent');
  late final _CFURLCreateCopyDeletingLastPathComponent1 =
      _CFURLCreateCopyDeletingLastPathComponent1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathExtension1(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef extension1,
  ) {
    return _CFURLCreateCopyAppendingPathExtension1(
      allocator,
      url,
      extension1,
    );
  }

  late final _CFURLCreateCopyAppendingPathExtension1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFURLCreateCopyAppendingPathExtension');
  late final _CFURLCreateCopyAppendingPathExtension1 =
      _CFURLCreateCopyAppendingPathExtension1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFURLCreateCopyDeletingPathExtension1(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingPathExtension1(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingPathExtension1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingPathExtension');
  late final _CFURLCreateCopyDeletingPathExtension1 =
      _CFURLCreateCopyDeletingPathExtension1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  int CFURLGetBytes1(
    CFURLRef url,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFURLGetBytes1(
      url,
      buffer,
      bufferLength,
    );
  }

  late final _CFURLGetBytes1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFURLRef, ffi.Pointer<UInt8>, CFIndex)>>('CFURLGetBytes');
  late final _CFURLGetBytes1 = _CFURLGetBytes1Ptr.asFunction<
      int Function(CFURLRef, ffi.Pointer<UInt8>, int)>();

  CFRange CFURLGetByteRangeForComponent1(
    CFURLRef url,
    int component,
    ffi.Pointer<CFRange> rangeIncludingSeparators,
  ) {
    return _CFURLGetByteRangeForComponent1(
      url,
      component,
      rangeIncludingSeparators,
    );
  }

  late final _CFURLGetByteRangeForComponent1Ptr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFURLRef, ffi.Int32,
              ffi.Pointer<CFRange>)>>('CFURLGetByteRangeForComponent');
  late final _CFURLGetByteRangeForComponent1 =
      _CFURLGetByteRangeForComponent1Ptr.asFunction<
          CFRange Function(CFURLRef, int, ffi.Pointer<CFRange>)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapes1(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapes1(
      allocator,
      originalString,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapes1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFURLCreateStringByReplacingPercentEscapes');
  late final _CFURLCreateStringByReplacingPercentEscapes1 =
      _CFURLCreateStringByReplacingPercentEscapes1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding1(
    CFAllocatorRef allocator,
    CFStringRef origString,
    CFStringRef charsToLeaveEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapesUsingEncoding1(
      allocator,
      origString,
      charsToLeaveEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding1Ptr =
      _lookup<
              ffi.NativeFunction<
                  CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef,
                      CFStringEncoding)>>(
          'CFURLCreateStringByReplacingPercentEscapesUsingEncoding');
  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding1 =
      _CFURLCreateStringByReplacingPercentEscapesUsingEncoding1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, int)>();

  CFStringRef CFURLCreateStringByAddingPercentEscapes1(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveUnescaped,
    CFStringRef legalURLCharactersToBeEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByAddingPercentEscapes1(
      allocator,
      originalString,
      charactersToLeaveUnescaped,
      legalURLCharactersToBeEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByAddingPercentEscapes1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringEncoding)>>('CFURLCreateStringByAddingPercentEscapes');
  late final _CFURLCreateStringByAddingPercentEscapes1 =
      _CFURLCreateStringByAddingPercentEscapes1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFStringRef, int)>();

  int CFURLIsFileReferenceURL1(
    CFURLRef url,
  ) {
    return _CFURLIsFileReferenceURL1(
      url,
    );
  }

  late final _CFURLIsFileReferenceURL1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLIsFileReferenceURL');
  late final _CFURLIsFileReferenceURL1 =
      _CFURLIsFileReferenceURL1Ptr.asFunction<int Function(CFURLRef)>();

  CFURLRef CFURLCreateFileReferenceURL1(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFileReferenceURL1(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFileReferenceURL1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFileReferenceURL');
  late final _CFURLCreateFileReferenceURL1 =
      _CFURLCreateFileReferenceURL1Ptr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFilePathURL1(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFilePathURL1(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFilePathURL1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFilePathURL');
  late final _CFURLCreateFilePathURL1 = _CFURLCreateFilePathURL1Ptr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFromFSRef1(
    CFAllocatorRef allocator,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLCreateFromFSRef1(
      allocator,
      fsRef,
    );
  }

  late final _CFURLCreateFromFSRef1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<FSRef>)>>('CFURLCreateFromFSRef');
  late final _CFURLCreateFromFSRef1 = _CFURLCreateFromFSRef1Ptr.asFunction<
      CFURLRef Function(CFAllocatorRef, ffi.Pointer<FSRef>)>();

  int CFURLGetFSRef1(
    CFURLRef url,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLGetFSRef1(
      url,
      fsRef,
    );
  }

  late final _CFURLGetFSRef1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<FSRef>)>>(
      'CFURLGetFSRef');
  late final _CFURLGetFSRef1 = _CFURLGetFSRef1Ptr.asFunction<
      int Function(CFURLRef, ffi.Pointer<FSRef>)>();

  int CFURLCopyResourcePropertyForKey1(
    CFURLRef url,
    CFStringRef key,
    ffi.Pointer<ffi.Void> propertyValueTypeRefPtr,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertyForKey1(
      url,
      key,
      propertyValueTypeRefPtr,
      error,
    );
  }

  late final _CFURLCopyResourcePropertyForKey1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertyForKey');
  late final _CFURLCopyResourcePropertyForKey1 =
      _CFURLCopyResourcePropertyForKey1Ptr.asFunction<
          int Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCopyResourcePropertiesForKeys1(
    CFURLRef url,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertiesForKeys1(
      url,
      keys,
      error,
    );
  }

  late final _CFURLCopyResourcePropertiesForKeys1Ptr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFURLRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertiesForKeys');
  late final _CFURLCopyResourcePropertiesForKeys1 =
      _CFURLCopyResourcePropertiesForKeys1Ptr.asFunction<
          CFDictionaryRef Function(
              CFURLRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertyForKey1(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertyForKey1(
      url,
      key,
      propertyValue,
      error,
    );
  }

  late final _CFURLSetResourcePropertyForKey1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, CFTypeRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertyForKey');
  late final _CFURLSetResourcePropertyForKey1 =
      _CFURLSetResourcePropertyForKey1Ptr.asFunction<
          int Function(
              CFURLRef, CFStringRef, CFTypeRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertiesForKeys1(
    CFURLRef url,
    CFDictionaryRef keyedPropertyValues,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertiesForKeys1(
      url,
      keyedPropertyValues,
      error,
    );
  }

  late final _CFURLSetResourcePropertiesForKeys1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertiesForKeys');
  late final _CFURLSetResourcePropertiesForKeys1 =
      _CFURLSetResourcePropertiesForKeys1Ptr.asFunction<
          int Function(CFURLRef, CFDictionaryRef, ffi.Pointer<CFErrorRef>)>();

  void CFURLClearResourcePropertyCacheForKey1(
    CFURLRef url,
    CFStringRef key,
  ) {
    return _CFURLClearResourcePropertyCacheForKey1(
      url,
      key,
    );
  }

  late final _CFURLClearResourcePropertyCacheForKey1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef, CFStringRef)>>(
          'CFURLClearResourcePropertyCacheForKey');
  late final _CFURLClearResourcePropertyCacheForKey1 =
      _CFURLClearResourcePropertyCacheForKey1Ptr.asFunction<
          void Function(CFURLRef, CFStringRef)>();

  void CFURLClearResourcePropertyCache1(
    CFURLRef url,
  ) {
    return _CFURLClearResourcePropertyCache1(
      url,
    );
  }

  late final _CFURLClearResourcePropertyCache1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLClearResourcePropertyCache');
  late final _CFURLClearResourcePropertyCache1 =
      _CFURLClearResourcePropertyCache1Ptr.asFunction<
          void Function(CFURLRef)>();

  void CFURLSetTemporaryResourcePropertyForKey1(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
  ) {
    return _CFURLSetTemporaryResourcePropertyForKey1(
      url,
      key,
      propertyValue,
    );
  }

  late final _CFURLSetTemporaryResourcePropertyForKey1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFURLRef, CFStringRef,
              CFTypeRef)>>('CFURLSetTemporaryResourcePropertyForKey');
  late final _CFURLSetTemporaryResourcePropertyForKey1 =
      _CFURLSetTemporaryResourcePropertyForKey1Ptr.asFunction<
          void Function(CFURLRef, CFStringRef, CFTypeRef)>();

  int CFURLResourceIsReachable1(
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLResourceIsReachable1(
      url,
      error,
    );
  }

  late final _CFURLResourceIsReachable1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLResourceIsReachable');
  late final _CFURLResourceIsReachable1 = _CFURLResourceIsReachable1Ptr
      .asFunction<int Function(CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkData1(
    CFAllocatorRef allocator,
    CFURLRef url,
    int options,
    CFArrayRef resourcePropertiesToInclude,
    CFURLRef relativeToURL,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateBookmarkData1(
      allocator,
      url,
      options,
      resourcePropertiesToInclude,
      relativeToURL,
      error,
    );
  }

  late final _CFURLCreateBookmarkData1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, ffi.Int32, CFArrayRef,
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkData');
  late final _CFURLCreateBookmarkData1 =
      _CFURLCreateBookmarkData1Ptr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, int, CFArrayRef,
              CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateByResolvingBookmarkData1(
    CFAllocatorRef allocator,
    CFDataRef bookmark,
    int options,
    CFURLRef relativeToURL,
    CFArrayRef resourcePropertiesToInclude,
    ffi.Pointer<Boolean> isStale,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateByResolvingBookmarkData1(
      allocator,
      bookmark,
      options,
      relativeToURL,
      resourcePropertiesToInclude,
      isStale,
      error,
    );
  }

  late final _CFURLCreateByResolvingBookmarkData1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFDataRef,
              ffi.Int32,
              CFURLRef,
              CFArrayRef,
              ffi.Pointer<Boolean>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateByResolvingBookmarkData');
  late final _CFURLCreateByResolvingBookmarkData1 =
      _CFURLCreateByResolvingBookmarkData1Ptr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFDataRef, int, CFURLRef,
              CFArrayRef, ffi.Pointer<Boolean>, ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData1(
    CFAllocatorRef allocator,
    CFArrayRef resourcePropertiesToReturn,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertiesForKeysFromBookmarkData1(
      allocator,
      resourcePropertiesToReturn,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData1Ptr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(
                      CFAllocatorRef, CFArrayRef, CFDataRef)>>(
          'CFURLCreateResourcePropertiesForKeysFromBookmarkData');
  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData1 =
      _CFURLCreateResourcePropertiesForKeysFromBookmarkData1Ptr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>();

  CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData1(
    CFAllocatorRef allocator,
    CFStringRef resourcePropertyKey,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertyForKeyFromBookmarkData1(
      allocator,
      resourcePropertyKey,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef,
              CFDataRef)>>('CFURLCreateResourcePropertyForKeyFromBookmarkData');
  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData1 =
      _CFURLCreateResourcePropertyForKeyFromBookmarkData1Ptr.asFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFDataRef CFURLCreateBookmarkDataFromFile1(
    CFAllocatorRef allocator,
    CFURLRef fileURL,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLCreateBookmarkDataFromFile1(
      allocator,
      fileURL,
      errorRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromFile1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkDataFromFile');
  late final _CFURLCreateBookmarkDataFromFile1 =
      _CFURLCreateBookmarkDataFromFile1Ptr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLWriteBookmarkDataToFile1(
    CFDataRef bookmarkRef,
    CFURLRef fileURL,
    int options,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLWriteBookmarkDataToFile1(
      bookmarkRef,
      fileURL,
      options,
      errorRef,
    );
  }

  late final _CFURLWriteBookmarkDataToFile1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFDataRef,
              CFURLRef,
              CFURLBookmarkFileCreationOptions,
              ffi.Pointer<CFErrorRef>)>>('CFURLWriteBookmarkDataToFile');
  late final _CFURLWriteBookmarkDataToFile1 =
      _CFURLWriteBookmarkDataToFile1Ptr.asFunction<
          int Function(CFDataRef, CFURLRef, int, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkDataFromAliasRecord1(
    CFAllocatorRef allocatorRef,
    CFDataRef aliasRecordDataRef,
  ) {
    return _CFURLCreateBookmarkDataFromAliasRecord1(
      allocatorRef,
      aliasRecordDataRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromAliasRecord1Ptr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFURLCreateBookmarkDataFromAliasRecord');
  late final _CFURLCreateBookmarkDataFromAliasRecord1 =
      _CFURLCreateBookmarkDataFromAliasRecord1Ptr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  int CFURLStartAccessingSecurityScopedResource1(
    CFURLRef url,
  ) {
    return _CFURLStartAccessingSecurityScopedResource1(
      url,
    );
  }

  late final _CFURLStartAccessingSecurityScopedResource1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLStartAccessingSecurityScopedResource');
  late final _CFURLStartAccessingSecurityScopedResource1 =
      _CFURLStartAccessingSecurityScopedResource1Ptr.asFunction<
          int Function(CFURLRef)>();

  void CFURLStopAccessingSecurityScopedResource1(
    CFURLRef url,
  ) {
    return _CFURLStopAccessingSecurityScopedResource1(
      url,
    );
  }

  late final _CFURLStopAccessingSecurityScopedResource1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLStopAccessingSecurityScopedResource');
  late final _CFURLStopAccessingSecurityScopedResource1 =
      _CFURLStopAccessingSecurityScopedResource1Ptr.asFunction<
          void Function(CFURLRef)>();

  int CFRunLoopGetTypeID1() {
    return _CFRunLoopGetTypeID1();
  }

  late final _CFRunLoopGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFRunLoopGetTypeID');
  late final _CFRunLoopGetTypeID1 =
      _CFRunLoopGetTypeID1Ptr.asFunction<int Function()>();

  CFRunLoopRef CFRunLoopGetCurrent1() {
    return _CFRunLoopGetCurrent1();
  }

  late final _CFRunLoopGetCurrent1Ptr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent1 =
      _CFRunLoopGetCurrent1Ptr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopRef CFRunLoopGetMain1() {
    return _CFRunLoopGetMain1();
  }

  late final _CFRunLoopGetMain1Ptr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>('CFRunLoopGetMain');
  late final _CFRunLoopGetMain1 =
      _CFRunLoopGetMain1Ptr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopMode CFRunLoopCopyCurrentMode1(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyCurrentMode1(
      rl,
    );
  }

  late final _CFRunLoopCopyCurrentMode1Ptr =
      _lookup<ffi.NativeFunction<CFRunLoopMode Function(CFRunLoopRef)>>(
          'CFRunLoopCopyCurrentMode');
  late final _CFRunLoopCopyCurrentMode1 = _CFRunLoopCopyCurrentMode1Ptr
      .asFunction<CFRunLoopMode Function(CFRunLoopRef)>();

  CFArrayRef CFRunLoopCopyAllModes1(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyAllModes1(
      rl,
    );
  }

  late final _CFRunLoopCopyAllModes1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFRunLoopRef)>>(
          'CFRunLoopCopyAllModes');
  late final _CFRunLoopCopyAllModes1 = _CFRunLoopCopyAllModes1Ptr.asFunction<
      CFArrayRef Function(CFRunLoopRef)>();

  void CFRunLoopAddCommonMode1(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddCommonMode1(
      rl,
      mode,
    );
  }

  late final _CFRunLoopAddCommonMode1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFRunLoopRef, CFRunLoopMode)>>(
      'CFRunLoopAddCommonMode');
  late final _CFRunLoopAddCommonMode1 = _CFRunLoopAddCommonMode1Ptr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopMode)>();

  double CFRunLoopGetNextTimerFireDate1(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopGetNextTimerFireDate1(
      rl,
      mode,
    );
  }

  late final _CFRunLoopGetNextTimerFireDate1Ptr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(
              CFRunLoopRef, CFRunLoopMode)>>('CFRunLoopGetNextTimerFireDate');
  late final _CFRunLoopGetNextTimerFireDate1 =
      _CFRunLoopGetNextTimerFireDate1Ptr.asFunction<
          double Function(CFRunLoopRef, CFRunLoopMode)>();

  void CFRunLoopRun1() {
    return _CFRunLoopRun1();
  }

  late final _CFRunLoopRun1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFRunLoopRun');
  late final _CFRunLoopRun1 = _CFRunLoopRun1Ptr.asFunction<void Function()>();

  int CFRunLoopRunInMode1(
    CFRunLoopMode mode,
    double seconds,
    int returnAfterSourceHandled,
  ) {
    return _CFRunLoopRunInMode1(
      mode,
      seconds,
      returnAfterSourceHandled,
    );
  }

  late final _CFRunLoopRunInMode1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              CFRunLoopMode, CFTimeInterval, Boolean)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode1 = _CFRunLoopRunInMode1Ptr.asFunction<
      int Function(CFRunLoopMode, double, int)>();

  int CFRunLoopIsWaiting1(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopIsWaiting1(
      rl,
    );
  }

  late final _CFRunLoopIsWaiting1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopRef)>>(
          'CFRunLoopIsWaiting');
  late final _CFRunLoopIsWaiting1 =
      _CFRunLoopIsWaiting1Ptr.asFunction<int Function(CFRunLoopRef)>();

  void CFRunLoopWakeUp1(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopWakeUp1(
      rl,
    );
  }

  late final _CFRunLoopWakeUp1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopWakeUp');
  late final _CFRunLoopWakeUp1 =
      _CFRunLoopWakeUp1Ptr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopStop1(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopStop1(
      rl,
    );
  }

  late final _CFRunLoopStop1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopStop');
  late final _CFRunLoopStop1 =
      _CFRunLoopStop1Ptr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopPerformBlock1(
    CFRunLoopRef rl,
    CFTypeRef mode,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return _CFRunLoopPerformBlock1(
      rl,
      mode,
      block,
    );
  }

  late final _CFRunLoopPerformBlock1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFTypeRef,
              ffi.Pointer<_ObjCBlock>)>>('CFRunLoopPerformBlock');
  late final _CFRunLoopPerformBlock1 = _CFRunLoopPerformBlock1Ptr.asFunction<
      void Function(CFRunLoopRef, CFTypeRef, ffi.Pointer<_ObjCBlock>)>();

  int CFRunLoopContainsSource1(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsSource1(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopContainsSource1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopContainsSource');
  late final _CFRunLoopContainsSource1 =
      _CFRunLoopContainsSource1Ptr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopAddSource1(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddSource1(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSource1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource1 = _CFRunLoopAddSource1Ptr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopRemoveSource1(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveSource1(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopRemoveSource1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopRemoveSource');
  late final _CFRunLoopRemoveSource1 = _CFRunLoopRemoveSource1Ptr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  int CFRunLoopContainsObserver1(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsObserver1(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopContainsObserver1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopContainsObserver');
  late final _CFRunLoopContainsObserver1 =
      _CFRunLoopContainsObserver1Ptr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopAddObserver1(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddObserver1(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopAddObserver1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopAddObserver');
  late final _CFRunLoopAddObserver1 = _CFRunLoopAddObserver1Ptr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopRemoveObserver1(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveObserver1(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopRemoveObserver1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopRemoveObserver');
  late final _CFRunLoopRemoveObserver1 =
      _CFRunLoopRemoveObserver1Ptr.asFunction<
          void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  int CFRunLoopContainsTimer1(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsTimer1(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopContainsTimer1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopContainsTimer');
  late final _CFRunLoopContainsTimer1 = _CFRunLoopContainsTimer1Ptr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopAddTimer1(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddTimer1(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopAddTimer1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopAddTimer');
  late final _CFRunLoopAddTimer1 = _CFRunLoopAddTimer1Ptr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopRemoveTimer1(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveTimer1(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopRemoveTimer1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopRemoveTimer');
  late final _CFRunLoopRemoveTimer1 = _CFRunLoopRemoveTimer1Ptr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  int CFRunLoopSourceGetTypeID1() {
    return _CFRunLoopSourceGetTypeID1();
  }

  late final _CFRunLoopSourceGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopSourceGetTypeID');
  late final _CFRunLoopSourceGetTypeID1 =
      _CFRunLoopSourceGetTypeID1Ptr.asFunction<int Function()>();

  CFRunLoopSourceRef CFRunLoopSourceCreate1(
    CFAllocatorRef allocator,
    int order,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceCreate1(
      allocator,
      order,
      context,
    );
  }

  late final _CFRunLoopSourceCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFRunLoopSourceContext>)>>('CFRunLoopSourceCreate');
  late final _CFRunLoopSourceCreate1 = _CFRunLoopSourceCreate1Ptr.asFunction<
      CFRunLoopSourceRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFRunLoopSourceContext>)>();

  int CFRunLoopSourceGetOrder1(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceGetOrder1(
      source,
    );
  }

  late final _CFRunLoopSourceGetOrder1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceGetOrder');
  late final _CFRunLoopSourceGetOrder1 = _CFRunLoopSourceGetOrder1Ptr
      .asFunction<int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceInvalidate1(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceInvalidate1(
      source,
    );
  }

  late final _CFRunLoopSourceInvalidate1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceInvalidate');
  late final _CFRunLoopSourceInvalidate1 = _CFRunLoopSourceInvalidate1Ptr
      .asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopSourceIsValid1(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceIsValid1(
      source,
    );
  }

  late final _CFRunLoopSourceIsValid1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceIsValid');
  late final _CFRunLoopSourceIsValid1 = _CFRunLoopSourceIsValid1Ptr.asFunction<
      int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceGetContext1(
    CFRunLoopSourceRef source,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceGetContext1(
      source,
      context,
    );
  }

  late final _CFRunLoopSourceGetContext1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>>(
      'CFRunLoopSourceGetContext');
  late final _CFRunLoopSourceGetContext1 =
      _CFRunLoopSourceGetContext1Ptr.asFunction<
          void Function(
              CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>();

  void CFRunLoopSourceSignal1(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceSignal1(
      source,
    );
  }

  late final _CFRunLoopSourceSignal1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceSignal');
  late final _CFRunLoopSourceSignal1 = _CFRunLoopSourceSignal1Ptr.asFunction<
      void Function(CFRunLoopSourceRef)>();

  int CFRunLoopObserverGetTypeID1() {
    return _CFRunLoopObserverGetTypeID1();
  }

  late final _CFRunLoopObserverGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopObserverGetTypeID');
  late final _CFRunLoopObserverGetTypeID1 =
      _CFRunLoopObserverGetTypeID1Ptr.asFunction<int Function()>();

  CFRunLoopObserverRef CFRunLoopObserverCreate1(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    CFRunLoopObserverCallBack callout,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverCreate1(
      allocator,
      activities,
      repeats,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopObserverCreate1Ptr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(
                  CFAllocatorRef,
                  CFOptionFlags,
                  Boolean,
                  CFIndex,
                  CFRunLoopObserverCallBack,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverCreate');
  late final _CFRunLoopObserverCreate1 =
      _CFRunLoopObserverCreate1Ptr.asFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef,
              int,
              int,
              int,
              CFRunLoopObserverCallBack,
              ffi.Pointer<CFRunLoopObserverContext>)>();

  CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler1(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return _CFRunLoopObserverCreateWithHandler1(
      allocator,
      activities,
      repeats,
      order,
      block,
    );
  }

  late final _CFRunLoopObserverCreateWithHandler1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef,
              CFOptionFlags,
              Boolean,
              CFIndex,
              ffi.Pointer<_ObjCBlock>)>>('CFRunLoopObserverCreateWithHandler');
  late final _CFRunLoopObserverCreateWithHandler1 =
      _CFRunLoopObserverCreateWithHandler1Ptr.asFunction<
          CFRunLoopObserverRef Function(
              CFAllocatorRef, int, int, int, ffi.Pointer<_ObjCBlock>)>();

  int CFRunLoopObserverGetActivities1(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetActivities1(
      observer,
    );
  }

  late final _CFRunLoopObserverGetActivities1Ptr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetActivities');
  late final _CFRunLoopObserverGetActivities1 =
      _CFRunLoopObserverGetActivities1Ptr.asFunction<
          int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverDoesRepeat1(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverDoesRepeat1(
      observer,
    );
  }

  late final _CFRunLoopObserverDoesRepeat1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverDoesRepeat');
  late final _CFRunLoopObserverDoesRepeat1 = _CFRunLoopObserverDoesRepeat1Ptr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverGetOrder1(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetOrder1(
      observer,
    );
  }

  late final _CFRunLoopObserverGetOrder1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetOrder');
  late final _CFRunLoopObserverGetOrder1 = _CFRunLoopObserverGetOrder1Ptr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverInvalidate1(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverInvalidate1(
      observer,
    );
  }

  late final _CFRunLoopObserverInvalidate1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverInvalidate');
  late final _CFRunLoopObserverInvalidate1 = _CFRunLoopObserverInvalidate1Ptr
      .asFunction<void Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverIsValid1(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverIsValid1(
      observer,
    );
  }

  late final _CFRunLoopObserverIsValid1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverIsValid');
  late final _CFRunLoopObserverIsValid1 = _CFRunLoopObserverIsValid1Ptr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverGetContext1(
    CFRunLoopObserverRef observer,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverGetContext1(
      observer,
      context,
    );
  }

  late final _CFRunLoopObserverGetContext1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverGetContext');
  late final _CFRunLoopObserverGetContext1 =
      _CFRunLoopObserverGetContext1Ptr.asFunction<
          void Function(
              CFRunLoopObserverRef, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopTimerGetTypeID1() {
    return _CFRunLoopTimerGetTypeID1();
  }

  late final _CFRunLoopTimerGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopTimerGetTypeID');
  late final _CFRunLoopTimerGetTypeID1 =
      _CFRunLoopTimerGetTypeID1Ptr.asFunction<int Function()>();

  CFRunLoopTimerRef CFRunLoopTimerCreate1(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    CFRunLoopTimerCallBack callout,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerCreate1(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopTimerCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              CFRunLoopTimerCallBack,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerCreate');
  late final _CFRunLoopTimerCreate1 = _CFRunLoopTimerCreate1Ptr.asFunction<
      CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
          CFRunLoopTimerCallBack, ffi.Pointer<CFRunLoopTimerContext>)>();

  CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler1(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    ffi.Pointer<_ObjCBlock> block,
  ) {
    return _CFRunLoopTimerCreateWithHandler1(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      block,
    );
  }

  late final _CFRunLoopTimerCreateWithHandler1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<_ObjCBlock>)>>('CFRunLoopTimerCreateWithHandler');
  late final _CFRunLoopTimerCreateWithHandler1 =
      _CFRunLoopTimerCreateWithHandler1Ptr.asFunction<
          CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
              ffi.Pointer<_ObjCBlock>)>();

  double CFRunLoopTimerGetNextFireDate1(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetNextFireDate1(
      timer,
    );
  }

  late final _CFRunLoopTimerGetNextFireDate1Ptr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetNextFireDate');
  late final _CFRunLoopTimerGetNextFireDate1 =
      _CFRunLoopTimerGetNextFireDate1Ptr.asFunction<
          double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetNextFireDate1(
    CFRunLoopTimerRef timer,
    double fireDate,
  ) {
    return _CFRunLoopTimerSetNextFireDate1(
      timer,
      fireDate,
    );
  }

  late final _CFRunLoopTimerSetNextFireDate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFAbsoluteTime)>>('CFRunLoopTimerSetNextFireDate');
  late final _CFRunLoopTimerSetNextFireDate1 =
      _CFRunLoopTimerSetNextFireDate1Ptr.asFunction<
          void Function(CFRunLoopTimerRef, double)>();

  double CFRunLoopTimerGetInterval1(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetInterval1(
      timer,
    );
  }

  late final _CFRunLoopTimerGetInterval1Ptr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetInterval');
  late final _CFRunLoopTimerGetInterval1 = _CFRunLoopTimerGetInterval1Ptr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerDoesRepeat1(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerDoesRepeat1(
      timer,
    );
  }

  late final _CFRunLoopTimerDoesRepeat1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerDoesRepeat');
  late final _CFRunLoopTimerDoesRepeat1 = _CFRunLoopTimerDoesRepeat1Ptr
      .asFunction<int Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerGetOrder1(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetOrder1(
      timer,
    );
  }

  late final _CFRunLoopTimerGetOrder1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetOrder');
  late final _CFRunLoopTimerGetOrder1 =
      _CFRunLoopTimerGetOrder1Ptr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerInvalidate1(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerInvalidate1(
      timer,
    );
  }

  late final _CFRunLoopTimerInvalidate1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerInvalidate');
  late final _CFRunLoopTimerInvalidate1 = _CFRunLoopTimerInvalidate1Ptr
      .asFunction<void Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerIsValid1(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerIsValid1(
      timer,
    );
  }

  late final _CFRunLoopTimerIsValid1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerIsValid');
  late final _CFRunLoopTimerIsValid1 =
      _CFRunLoopTimerIsValid1Ptr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerGetContext1(
    CFRunLoopTimerRef timer,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerGetContext1(
      timer,
      context,
    );
  }

  late final _CFRunLoopTimerGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerGetContext');
  late final _CFRunLoopTimerGetContext1 =
      _CFRunLoopTimerGetContext1Ptr.asFunction<
          void Function(
              CFRunLoopTimerRef, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetTolerance1(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetTolerance1(
      timer,
    );
  }

  late final _CFRunLoopTimerGetTolerance1Ptr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetTolerance');
  late final _CFRunLoopTimerGetTolerance1 = _CFRunLoopTimerGetTolerance1Ptr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetTolerance1(
    CFRunLoopTimerRef timer,
    double tolerance,
  ) {
    return _CFRunLoopTimerSetTolerance1(
      timer,
      tolerance,
    );
  }

  late final _CFRunLoopTimerSetTolerance1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFTimeInterval)>>('CFRunLoopTimerSetTolerance');
  late final _CFRunLoopTimerSetTolerance1 = _CFRunLoopTimerSetTolerance1Ptr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  int CFSocketGetTypeID1() {
    return _CFSocketGetTypeID1();
  }

  late final _CFSocketGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSocketGetTypeID');
  late final _CFSocketGetTypeID1 =
      _CFSocketGetTypeID1Ptr.asFunction<int Function()>();

  CFSocketRef CFSocketCreate1(
    CFAllocatorRef allocator,
    int protocolFamily,
    int socketType,
    int protocol,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreate1(
      allocator,
      protocolFamily,
      socketType,
      protocol,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              SInt32,
              SInt32,
              SInt32,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreate');
  late final _CFSocketCreate1 = _CFSocketCreate1Ptr.asFunction<
      CFSocketRef Function(CFAllocatorRef, int, int, int, int, CFSocketCallBack,
          ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithNative1(
    CFAllocatorRef allocator,
    int sock,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithNative1(
      allocator,
      sock,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithNative1Ptr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreateWithNative');
  late final _CFSocketCreateWithNative1 =
      _CFSocketCreateWithNative1Ptr.asFunction<
          CFSocketRef Function(CFAllocatorRef, int, int, CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithSocketSignature1(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithSocketSignature1(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithSocketSignature1Ptr = _lookup<
          ffi.NativeFunction<
              CFSocketRef Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  CFOptionFlags,
                  CFSocketCallBack,
                  ffi.Pointer<CFSocketContext>)>>(
      'CFSocketCreateWithSocketSignature');
  late final _CFSocketCreateWithSocketSignature1 =
      _CFSocketCreateWithSocketSignature1Ptr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateConnectedToSocketSignature1(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
    double timeout,
  ) {
    return _CFSocketCreateConnectedToSocketSignature1(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
      timeout,
    );
  }

  late final _CFSocketCreateConnectedToSocketSignature1Ptr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              ffi.Pointer<CFSocketSignature>,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>,
              CFTimeInterval)>>('CFSocketCreateConnectedToSocketSignature');
  late final _CFSocketCreateConnectedToSocketSignature1 =
      _CFSocketCreateConnectedToSocketSignature1Ptr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>, double)>();

  int CFSocketSetAddress1(
    CFSocketRef s,
    CFDataRef address,
  ) {
    return _CFSocketSetAddress1(
      s,
      address,
    );
  }

  late final _CFSocketSetAddress1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFSocketRef, CFDataRef)>>(
          'CFSocketSetAddress');
  late final _CFSocketSetAddress1 = _CFSocketSetAddress1Ptr.asFunction<
      int Function(CFSocketRef, CFDataRef)>();

  int CFSocketConnectToAddress1(
    CFSocketRef s,
    CFDataRef address,
    double timeout,
  ) {
    return _CFSocketConnectToAddress1(
      s,
      address,
      timeout,
    );
  }

  late final _CFSocketConnectToAddress1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFSocketRef, CFDataRef,
              CFTimeInterval)>>('CFSocketConnectToAddress');
  late final _CFSocketConnectToAddress1 = _CFSocketConnectToAddress1Ptr
      .asFunction<int Function(CFSocketRef, CFDataRef, double)>();

  void CFSocketInvalidate1(
    CFSocketRef s,
  ) {
    return _CFSocketInvalidate1(
      s,
    );
  }

  late final _CFSocketInvalidate1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFSocketRef)>>(
          'CFSocketInvalidate');
  late final _CFSocketInvalidate1 =
      _CFSocketInvalidate1Ptr.asFunction<void Function(CFSocketRef)>();

  int CFSocketIsValid1(
    CFSocketRef s,
  ) {
    return _CFSocketIsValid1(
      s,
    );
  }

  late final _CFSocketIsValid1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFSocketRef)>>(
          'CFSocketIsValid');
  late final _CFSocketIsValid1 =
      _CFSocketIsValid1Ptr.asFunction<int Function(CFSocketRef)>();

  CFDataRef CFSocketCopyAddress1(
    CFSocketRef s,
  ) {
    return _CFSocketCopyAddress1(
      s,
    );
  }

  late final _CFSocketCopyAddress1Ptr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyAddress');
  late final _CFSocketCopyAddress1 =
      _CFSocketCopyAddress1Ptr.asFunction<CFDataRef Function(CFSocketRef)>();

  CFDataRef CFSocketCopyPeerAddress1(
    CFSocketRef s,
  ) {
    return _CFSocketCopyPeerAddress1(
      s,
    );
  }

  late final _CFSocketCopyPeerAddress1Ptr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyPeerAddress');
  late final _CFSocketCopyPeerAddress1 = _CFSocketCopyPeerAddress1Ptr
      .asFunction<CFDataRef Function(CFSocketRef)>();

  void CFSocketGetContext1(
    CFSocketRef s,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketGetContext1(
      s,
      context,
    );
  }

  late final _CFSocketGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSocketRef,
              ffi.Pointer<CFSocketContext>)>>('CFSocketGetContext');
  late final _CFSocketGetContext1 = _CFSocketGetContext1Ptr.asFunction<
      void Function(CFSocketRef, ffi.Pointer<CFSocketContext>)>();

  int CFSocketGetNative1(
    CFSocketRef s,
  ) {
    return _CFSocketGetNative1(
      s,
    );
  }

  late final _CFSocketGetNative1Ptr =
      _lookup<ffi.NativeFunction<CFSocketNativeHandle Function(CFSocketRef)>>(
          'CFSocketGetNative');
  late final _CFSocketGetNative1 =
      _CFSocketGetNative1Ptr.asFunction<int Function(CFSocketRef)>();

  CFRunLoopSourceRef CFSocketCreateRunLoopSource1(
    CFAllocatorRef allocator,
    CFSocketRef s,
    int order,
  ) {
    return _CFSocketCreateRunLoopSource1(
      allocator,
      s,
      order,
    );
  }

  late final _CFSocketCreateRunLoopSource1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef,
              CFIndex)>>('CFSocketCreateRunLoopSource');
  late final _CFSocketCreateRunLoopSource1 =
      _CFSocketCreateRunLoopSource1Ptr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef, int)>();

  int CFSocketGetSocketFlags1(
    CFSocketRef s,
  ) {
    return _CFSocketGetSocketFlags1(
      s,
    );
  }

  late final _CFSocketGetSocketFlags1Ptr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFSocketRef)>>(
          'CFSocketGetSocketFlags');
  late final _CFSocketGetSocketFlags1 =
      _CFSocketGetSocketFlags1Ptr.asFunction<int Function(CFSocketRef)>();

  void CFSocketSetSocketFlags1(
    CFSocketRef s,
    int flags,
  ) {
    return _CFSocketSetSocketFlags1(
      s,
      flags,
    );
  }

  late final _CFSocketSetSocketFlags1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketSetSocketFlags');
  late final _CFSocketSetSocketFlags1 =
      _CFSocketSetSocketFlags1Ptr.asFunction<void Function(CFSocketRef, int)>();

  void CFSocketDisableCallBacks1(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketDisableCallBacks1(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketDisableCallBacks1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketDisableCallBacks');
  late final _CFSocketDisableCallBacks1 = _CFSocketDisableCallBacks1Ptr
      .asFunction<void Function(CFSocketRef, int)>();

  void CFSocketEnableCallBacks1(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketEnableCallBacks1(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketEnableCallBacks1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketEnableCallBacks');
  late final _CFSocketEnableCallBacks1 = _CFSocketEnableCallBacks1Ptr
      .asFunction<void Function(CFSocketRef, int)>();

  int CFSocketSendData1(
    CFSocketRef s,
    CFDataRef address,
    CFDataRef data,
    double timeout,
  ) {
    return _CFSocketSendData1(
      s,
      address,
      data,
      timeout,
    );
  }

  late final _CFSocketSendData1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFSocketRef, CFDataRef, CFDataRef,
              CFTimeInterval)>>('CFSocketSendData');
  late final _CFSocketSendData1 = _CFSocketSendData1Ptr.asFunction<
      int Function(CFSocketRef, CFDataRef, CFDataRef, double)>();

  int CFSocketRegisterValue1(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    CFPropertyListRef value,
  ) {
    return _CFSocketRegisterValue1(
      nameServerSignature,
      timeout,
      name,
      value,
    );
  }

  late final _CFSocketRegisterValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef, CFPropertyListRef)>>('CFSocketRegisterValue');
  late final _CFSocketRegisterValue1 = _CFSocketRegisterValue1Ptr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
          CFPropertyListRef)>();

  int CFSocketCopyRegisteredValue1(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFPropertyListRef> value,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredValue1(
      nameServerSignature,
      timeout,
      name,
      value,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CFSocketSignature>,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFPropertyListRef>,
              ffi.Pointer<CFDataRef>)>>('CFSocketCopyRegisteredValue');
  late final _CFSocketCopyRegisteredValue1 =
      _CFSocketCopyRegisteredValue1Ptr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFPropertyListRef>, ffi.Pointer<CFDataRef>)>();

  int CFSocketRegisterSocketSignature1(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
  ) {
    return _CFSocketRegisterSocketSignature1(
      nameServerSignature,
      timeout,
      name,
      signature,
    );
  }

  late final _CFSocketRegisterSocketSignature1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
                  CFStringRef, ffi.Pointer<CFSocketSignature>)>>(
      'CFSocketRegisterSocketSignature');
  late final _CFSocketRegisterSocketSignature1 =
      _CFSocketRegisterSocketSignature1Ptr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>)>();

  int CFSocketCopyRegisteredSocketSignature1(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredSocketSignature1(
      nameServerSignature,
      timeout,
      name,
      signature,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredSocketSignature1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFDataRef>)>>(
      'CFSocketCopyRegisteredSocketSignature');
  late final _CFSocketCopyRegisteredSocketSignature1 =
      _CFSocketCopyRegisteredSocketSignature1Ptr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>, ffi.Pointer<CFDataRef>)>();

  int CFSocketUnregister1(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
  ) {
    return _CFSocketUnregister1(
      nameServerSignature,
      timeout,
      name,
    );
  }

  late final _CFSocketUnregister1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef)>>('CFSocketUnregister');
  late final _CFSocketUnregister1 = _CFSocketUnregister1Ptr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef)>();

  void CFSocketSetDefaultNameRegistryPortNumber1(
    int port,
  ) {
    return _CFSocketSetDefaultNameRegistryPortNumber1(
      port,
    );
  }

  late final _CFSocketSetDefaultNameRegistryPortNumber1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UInt16)>>(
          'CFSocketSetDefaultNameRegistryPortNumber');
  late final _CFSocketSetDefaultNameRegistryPortNumber1 =
      _CFSocketSetDefaultNameRegistryPortNumber1Ptr.asFunction<
          void Function(int)>();

  int CFSocketGetDefaultNameRegistryPortNumber1() {
    return _CFSocketGetDefaultNameRegistryPortNumber1();
  }

  late final _CFSocketGetDefaultNameRegistryPortNumber1Ptr =
      _lookup<ffi.NativeFunction<UInt16 Function()>>(
          'CFSocketGetDefaultNameRegistryPortNumber');
  late final _CFSocketGetDefaultNameRegistryPortNumber1 =
      _CFSocketGetDefaultNameRegistryPortNumber1Ptr.asFunction<
          int Function()>();

  int CFReadStreamGetTypeID1() {
    return _CFReadStreamGetTypeID1();
  }

  late final _CFReadStreamGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFReadStreamGetTypeID');
  late final _CFReadStreamGetTypeID1 =
      _CFReadStreamGetTypeID1Ptr.asFunction<int Function()>();

  int CFWriteStreamGetTypeID1() {
    return _CFWriteStreamGetTypeID1();
  }

  late final _CFWriteStreamGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFWriteStreamGetTypeID');
  late final _CFWriteStreamGetTypeID1 =
      _CFWriteStreamGetTypeID1Ptr.asFunction<int Function()>();

  CFReadStreamRef CFReadStreamCreateWithBytesNoCopy1(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFReadStreamCreateWithBytesNoCopy1(
      alloc,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFReadStreamCreateWithBytesNoCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFReadStreamCreateWithBytesNoCopy');
  late final _CFReadStreamCreateWithBytesNoCopy1 =
      _CFReadStreamCreateWithBytesNoCopy1Ptr.asFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithBuffer1(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> buffer,
    int bufferCapacity,
  ) {
    return _CFWriteStreamCreateWithBuffer1(
      alloc,
      buffer,
      bufferCapacity,
    );
  }

  late final _CFWriteStreamCreateWithBuffer1Ptr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamCreateWithBuffer');
  late final _CFWriteStreamCreateWithBuffer1 =
      _CFWriteStreamCreateWithBuffer1Ptr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers1(
    CFAllocatorRef alloc,
    CFAllocatorRef bufferAllocator,
  ) {
    return _CFWriteStreamCreateWithAllocatedBuffers1(
      alloc,
      bufferAllocator,
    );
  }

  late final _CFWriteStreamCreateWithAllocatedBuffers1Ptr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef,
              CFAllocatorRef)>>('CFWriteStreamCreateWithAllocatedBuffers');
  late final _CFWriteStreamCreateWithAllocatedBuffers1 =
      _CFWriteStreamCreateWithAllocatedBuffers1Ptr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, CFAllocatorRef)>();

  CFReadStreamRef CFReadStreamCreateWithFile1(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFReadStreamCreateWithFile1(
      alloc,
      fileURL,
    );
  }

  late final _CFReadStreamCreateWithFile1Ptr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFReadStreamCreateWithFile');
  late final _CFReadStreamCreateWithFile1 = _CFReadStreamCreateWithFile1Ptr
      .asFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithFile1(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFWriteStreamCreateWithFile1(
      alloc,
      fileURL,
    );
  }

  late final _CFWriteStreamCreateWithFile1Ptr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFWriteStreamCreateWithFile');
  late final _CFWriteStreamCreateWithFile1 = _CFWriteStreamCreateWithFile1Ptr
      .asFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>();

  void CFStreamCreateBoundPair1(
    CFAllocatorRef alloc,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
    int transferBufferSize,
  ) {
    return _CFStreamCreateBoundPair1(
      alloc,
      readStream,
      writeStream,
      transferBufferSize,
    );
  }

  late final _CFStreamCreateBoundPair1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>,
              CFIndex)>>('CFStreamCreateBoundPair');
  late final _CFStreamCreateBoundPair1 =
      _CFStreamCreateBoundPair1Ptr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>, int)>();

  void CFStreamCreatePairWithSocket1(
    CFAllocatorRef alloc,
    int sock,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocket1(
      alloc,
      sock,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocket1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>>('CFStreamCreatePairWithSocket');
  late final _CFStreamCreatePairWithSocket1 =
      _CFStreamCreatePairWithSocket1Ptr.asFunction<
          void Function(CFAllocatorRef, int, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithSocketToHost1(
    CFAllocatorRef alloc,
    CFStringRef host,
    int port,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocketToHost1(
      alloc,
      host,
      port,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketToHost1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  CFStringRef,
                  UInt32,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithSocketToHost');
  late final _CFStreamCreatePairWithSocketToHost1 =
      _CFStreamCreatePairWithSocketToHost1Ptr.asFunction<
          void Function(CFAllocatorRef, CFStringRef, int,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithPeerSocketSignature1(
    CFAllocatorRef alloc,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithPeerSocketSignature1(
      alloc,
      signature,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithPeerSocketSignature1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithPeerSocketSignature');
  late final _CFStreamCreatePairWithPeerSocketSignature1 =
      _CFStreamCreatePairWithPeerSocketSignature1Ptr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  int CFReadStreamGetStatus1(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetStatus1(
      stream,
    );
  }

  late final _CFReadStreamGetStatus1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFReadStreamRef)>>(
          'CFReadStreamGetStatus');
  late final _CFReadStreamGetStatus1 =
      _CFReadStreamGetStatus1Ptr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamGetStatus1(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetStatus1(
      stream,
    );
  }

  late final _CFWriteStreamGetStatus1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetStatus');
  late final _CFWriteStreamGetStatus1 =
      _CFWriteStreamGetStatus1Ptr.asFunction<int Function(CFWriteStreamRef)>();

  CFErrorRef CFReadStreamCopyError1(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyError1(
      stream,
    );
  }

  late final _CFReadStreamCopyError1Ptr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFReadStreamRef)>>(
          'CFReadStreamCopyError');
  late final _CFReadStreamCopyError1 = _CFReadStreamCopyError1Ptr.asFunction<
      CFErrorRef Function(CFReadStreamRef)>();

  CFErrorRef CFWriteStreamCopyError1(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyError1(
      stream,
    );
  }

  late final _CFWriteStreamCopyError1Ptr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyError');
  late final _CFWriteStreamCopyError1 = _CFWriteStreamCopyError1Ptr.asFunction<
      CFErrorRef Function(CFWriteStreamRef)>();

  int CFReadStreamOpen1(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamOpen1(
      stream,
    );
  }

  late final _CFReadStreamOpen1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamOpen');
  late final _CFReadStreamOpen1 =
      _CFReadStreamOpen1Ptr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamOpen1(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamOpen1(
      stream,
    );
  }

  late final _CFWriteStreamOpen1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamOpen');
  late final _CFWriteStreamOpen1 =
      _CFWriteStreamOpen1Ptr.asFunction<int Function(CFWriteStreamRef)>();

  void CFReadStreamClose1(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamClose1(
      stream,
    );
  }

  late final _CFReadStreamClose1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFReadStreamRef)>>(
          'CFReadStreamClose');
  late final _CFReadStreamClose1 =
      _CFReadStreamClose1Ptr.asFunction<void Function(CFReadStreamRef)>();

  void CFWriteStreamClose1(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamClose1(
      stream,
    );
  }

  late final _CFWriteStreamClose1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFWriteStreamRef)>>(
          'CFWriteStreamClose');
  late final _CFWriteStreamClose1 =
      _CFWriteStreamClose1Ptr.asFunction<void Function(CFWriteStreamRef)>();

  int CFReadStreamHasBytesAvailable1(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamHasBytesAvailable1(
      stream,
    );
  }

  late final _CFReadStreamHasBytesAvailable1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamHasBytesAvailable');
  late final _CFReadStreamHasBytesAvailable1 =
      _CFReadStreamHasBytesAvailable1Ptr.asFunction<
          int Function(CFReadStreamRef)>();

  int CFReadStreamRead1(
    CFReadStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFReadStreamRead1(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFReadStreamRead1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFReadStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFReadStreamRead');
  late final _CFReadStreamRead1 = _CFReadStreamRead1Ptr.asFunction<
      int Function(CFReadStreamRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFReadStreamGetBuffer1(
    CFReadStreamRef stream,
    int maxBytesToRead,
    ffi.Pointer<CFIndex> numBytesRead,
  ) {
    return _CFReadStreamGetBuffer1(
      stream,
      maxBytesToRead,
      numBytesRead,
    );
  }

  late final _CFReadStreamGetBuffer1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UInt8> Function(CFReadStreamRef, CFIndex,
              ffi.Pointer<CFIndex>)>>('CFReadStreamGetBuffer');
  late final _CFReadStreamGetBuffer1 = _CFReadStreamGetBuffer1Ptr.asFunction<
      ffi.Pointer<UInt8> Function(
          CFReadStreamRef, int, ffi.Pointer<CFIndex>)>();

  int CFWriteStreamCanAcceptBytes1(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCanAcceptBytes1(
      stream,
    );
  }

  late final _CFWriteStreamCanAcceptBytes1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamCanAcceptBytes');
  late final _CFWriteStreamCanAcceptBytes1 = _CFWriteStreamCanAcceptBytes1Ptr
      .asFunction<int Function(CFWriteStreamRef)>();

  int CFWriteStreamWrite1(
    CFWriteStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFWriteStreamWrite1(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFWriteStreamWrite1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFWriteStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamWrite');
  late final _CFWriteStreamWrite1 = _CFWriteStreamWrite1Ptr.asFunction<
      int Function(CFWriteStreamRef, ffi.Pointer<UInt8>, int)>();

  CFTypeRef CFReadStreamCopyProperty1(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFReadStreamCopyProperty1(
      stream,
      propertyName,
    );
  }

  late final _CFReadStreamCopyProperty1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFReadStreamRef,
              CFStreamPropertyKey)>>('CFReadStreamCopyProperty');
  late final _CFReadStreamCopyProperty1 = _CFReadStreamCopyProperty1Ptr
      .asFunction<CFTypeRef Function(CFReadStreamRef, CFStreamPropertyKey)>();

  CFTypeRef CFWriteStreamCopyProperty1(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFWriteStreamCopyProperty1(
      stream,
      propertyName,
    );
  }

  late final _CFWriteStreamCopyProperty1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFWriteStreamRef,
              CFStreamPropertyKey)>>('CFWriteStreamCopyProperty');
  late final _CFWriteStreamCopyProperty1 = _CFWriteStreamCopyProperty1Ptr
      .asFunction<CFTypeRef Function(CFWriteStreamRef, CFStreamPropertyKey)>();

  int CFReadStreamSetProperty1(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFReadStreamSetProperty1(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFReadStreamSetProperty1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFReadStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFReadStreamSetProperty');
  late final _CFReadStreamSetProperty1 =
      _CFReadStreamSetProperty1Ptr.asFunction<
          int Function(CFReadStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFWriteStreamSetProperty1(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFWriteStreamSetProperty1(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFWriteStreamSetProperty1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFWriteStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFWriteStreamSetProperty');
  late final _CFWriteStreamSetProperty1 =
      _CFWriteStreamSetProperty1Ptr.asFunction<
          int Function(CFWriteStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFReadStreamSetClient1(
    CFReadStreamRef stream,
    int streamEvents,
    CFReadStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFReadStreamSetClient1(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFReadStreamSetClient1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFReadStreamRef,
              CFOptionFlags,
              CFReadStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFReadStreamSetClient');
  late final _CFReadStreamSetClient1 = _CFReadStreamSetClient1Ptr.asFunction<
      int Function(CFReadStreamRef, int, CFReadStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  int CFWriteStreamSetClient1(
    CFWriteStreamRef stream,
    int streamEvents,
    CFWriteStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFWriteStreamSetClient1(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFWriteStreamSetClient1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFWriteStreamRef,
              CFOptionFlags,
              CFWriteStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFWriteStreamSetClient');
  late final _CFWriteStreamSetClient1 = _CFWriteStreamSetClient1Ptr.asFunction<
      int Function(CFWriteStreamRef, int, CFWriteStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  void CFReadStreamScheduleWithRunLoop1(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamScheduleWithRunLoop1(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamScheduleWithRunLoop1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamScheduleWithRunLoop');
  late final _CFReadStreamScheduleWithRunLoop1 =
      _CFReadStreamScheduleWithRunLoop1Ptr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamScheduleWithRunLoop1(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamScheduleWithRunLoop1(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamScheduleWithRunLoop1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamScheduleWithRunLoop');
  late final _CFWriteStreamScheduleWithRunLoop1 =
      _CFWriteStreamScheduleWithRunLoop1Ptr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamUnscheduleFromRunLoop1(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamUnscheduleFromRunLoop1(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamUnscheduleFromRunLoop1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamUnscheduleFromRunLoop');
  late final _CFReadStreamUnscheduleFromRunLoop1 =
      _CFReadStreamUnscheduleFromRunLoop1Ptr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamUnscheduleFromRunLoop1(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamUnscheduleFromRunLoop1(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamUnscheduleFromRunLoop1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamUnscheduleFromRunLoop');
  late final _CFWriteStreamUnscheduleFromRunLoop1 =
      _CFWriteStreamUnscheduleFromRunLoop1Ptr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamSetDispatchQueue1(
    CFReadStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFReadStreamSetDispatchQueue1(
      stream,
      q,
    );
  }

  late final _CFReadStreamSetDispatchQueue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef,
              dispatch_queue_t)>>('CFReadStreamSetDispatchQueue');
  late final _CFReadStreamSetDispatchQueue1 = _CFReadStreamSetDispatchQueue1Ptr
      .asFunction<void Function(CFReadStreamRef, dispatch_queue_t)>();

  void CFWriteStreamSetDispatchQueue1(
    CFWriteStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFWriteStreamSetDispatchQueue1(
      stream,
      q,
    );
  }

  late final _CFWriteStreamSetDispatchQueue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef,
              dispatch_queue_t)>>('CFWriteStreamSetDispatchQueue');
  late final _CFWriteStreamSetDispatchQueue1 =
      _CFWriteStreamSetDispatchQueue1Ptr.asFunction<
          void Function(CFWriteStreamRef, dispatch_queue_t)>();

  dispatch_queue_t CFReadStreamCopyDispatchQueue1(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyDispatchQueue1(
      stream,
    );
  }

  late final _CFReadStreamCopyDispatchQueue1Ptr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFReadStreamRef)>>(
          'CFReadStreamCopyDispatchQueue');
  late final _CFReadStreamCopyDispatchQueue1 =
      _CFReadStreamCopyDispatchQueue1Ptr.asFunction<
          dispatch_queue_t Function(CFReadStreamRef)>();

  dispatch_queue_t CFWriteStreamCopyDispatchQueue1(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyDispatchQueue1(
      stream,
    );
  }

  late final _CFWriteStreamCopyDispatchQueue1Ptr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyDispatchQueue');
  late final _CFWriteStreamCopyDispatchQueue1 =
      _CFWriteStreamCopyDispatchQueue1Ptr.asFunction<
          dispatch_queue_t Function(CFWriteStreamRef)>();

  CFStreamError CFReadStreamGetError1(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetError1(
      stream,
    );
  }

  late final _CFReadStreamGetError1Ptr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFReadStreamRef)>>(
          'CFReadStreamGetError');
  late final _CFReadStreamGetError1 = _CFReadStreamGetError1Ptr.asFunction<
      CFStreamError Function(CFReadStreamRef)>();

  CFStreamError CFWriteStreamGetError1(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetError1(
      stream,
    );
  }

  late final _CFWriteStreamGetError1Ptr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetError');
  late final _CFWriteStreamGetError1 = _CFWriteStreamGetError1Ptr.asFunction<
      CFStreamError Function(CFWriteStreamRef)>();

  CFPropertyListRef CFPropertyListCreateFromXMLData1(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    int mutabilityOption,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromXMLData1(
      allocator,
      xmlData,
      mutabilityOption,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromXMLData1Ptr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, CFOptionFlags,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromXMLData');
  late final _CFPropertyListCreateFromXMLData1 =
      _CFPropertyListCreateFromXMLData1Ptr.asFunction<
          CFPropertyListRef Function(
              CFAllocatorRef, CFDataRef, int, ffi.Pointer<CFStringRef>)>();

  CFDataRef CFPropertyListCreateXMLData1(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
  ) {
    return _CFPropertyListCreateXMLData1(
      allocator,
      propertyList,
    );
  }

  late final _CFPropertyListCreateXMLData1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFPropertyListRef)>>('CFPropertyListCreateXMLData');
  late final _CFPropertyListCreateXMLData1 = _CFPropertyListCreateXMLData1Ptr
      .asFunction<CFDataRef Function(CFAllocatorRef, CFPropertyListRef)>();

  CFPropertyListRef CFPropertyListCreateDeepCopy1(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int mutabilityOption,
  ) {
    return _CFPropertyListCreateDeepCopy1(
      allocator,
      propertyList,
      mutabilityOption,
    );
  }

  late final _CFPropertyListCreateDeepCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef,
              CFOptionFlags)>>('CFPropertyListCreateDeepCopy');
  late final _CFPropertyListCreateDeepCopy1 =
      _CFPropertyListCreateDeepCopy1Ptr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef, int)>();

  int CFPropertyListIsValid1(
    CFPropertyListRef plist,
    int format,
  ) {
    return _CFPropertyListIsValid1(
      plist,
      format,
    );
  }

  late final _CFPropertyListIsValid1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFPropertyListRef, ffi.Int32)>>(
      'CFPropertyListIsValid');
  late final _CFPropertyListIsValid1 = _CFPropertyListIsValid1Ptr.asFunction<
      int Function(CFPropertyListRef, int)>();

  int CFPropertyListWriteToStream1(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListWriteToStream1(
      propertyList,
      stream,
      format,
      errorString,
    );
  }

  late final _CFPropertyListWriteToStream1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, ffi.Int32,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListWriteToStream');
  late final _CFPropertyListWriteToStream1 =
      _CFPropertyListWriteToStream1Ptr.asFunction<
          int Function(CFPropertyListRef, CFWriteStreamRef, int,
              ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateFromStream1(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int mutabilityOption,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromStream1(
      allocator,
      stream,
      streamLength,
      mutabilityOption,
      format,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromStream1Ptr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromStream');
  late final _CFPropertyListCreateFromStream1 =
      _CFPropertyListCreateFromStream1Ptr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateWithData1(
    CFAllocatorRef allocator,
    CFDataRef data,
    int options,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithData1(
      allocator,
      data,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithData1Ptr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithData');
  late final _CFPropertyListCreateWithData1 =
      _CFPropertyListCreateWithData1Ptr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFErrorRef>)>();

  CFPropertyListRef CFPropertyListCreateWithStream1(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int options,
    ffi.Pointer<ffi.Int32> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithStream1(
      allocator,
      stream,
      streamLength,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithStream1Ptr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithStream');
  late final _CFPropertyListCreateWithStream1 =
      _CFPropertyListCreateWithStream1Ptr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<ffi.Int32>, ffi.Pointer<CFErrorRef>)>();

  int CFPropertyListWrite1(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListWrite1(
      propertyList,
      stream,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListWrite1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFPropertyListRef, CFWriteStreamRef, ffi.Int32,
              CFOptionFlags, ffi.Pointer<CFErrorRef>)>>('CFPropertyListWrite');
  late final _CFPropertyListWrite1 = _CFPropertyListWrite1Ptr.asFunction<
      int Function(CFPropertyListRef, CFWriteStreamRef, int, int,
          ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFPropertyListCreateData1(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateData1(
      allocator,
      propertyList,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListCreateData1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFPropertyListRef,
              ffi.Int32,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateData');
  late final _CFPropertyListCreateData1 =
      _CFPropertyListCreateData1Ptr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFPropertyListRef, int, int,
              ffi.Pointer<CFErrorRef>)>();

  int CFSetGetTypeID1() {
    return _CFSetGetTypeID1();
  }

  late final _CFSetGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSetGetTypeID');
  late final _CFSetGetTypeID1 =
      _CFSetGetTypeID1Ptr.asFunction<int Function()>();

  CFSetRef CFSetCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreate1(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFSetCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFSetCallBacks>)>>('CFSetCreate');
  late final _CFSetCreate1 = _CFSetCreate1Ptr.asFunction<
      CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFSetCallBacks>)>();

  CFSetRef CFSetCreateCopy1(
    CFAllocatorRef allocator,
    CFSetRef theSet,
  ) {
    return _CFSetCreateCopy1(
      allocator,
      theSet,
    );
  }

  late final _CFSetCreateCopy1Ptr =
      _lookup<ffi.NativeFunction<CFSetRef Function(CFAllocatorRef, CFSetRef)>>(
          'CFSetCreateCopy');
  late final _CFSetCreateCopy1 = _CFSetCreateCopy1Ptr.asFunction<
      CFSetRef Function(CFAllocatorRef, CFSetRef)>();

  CFMutableSetRef CFSetCreateMutable1(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreateMutable1(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFSetCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFSetCallBacks>)>>('CFSetCreateMutable');
  late final _CFSetCreateMutable1 = _CFSetCreateMutable1Ptr.asFunction<
      CFMutableSetRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFSetCallBacks>)>();

  CFMutableSetRef CFSetCreateMutableCopy1(
    CFAllocatorRef allocator,
    int capacity,
    CFSetRef theSet,
  ) {
    return _CFSetCreateMutableCopy1(
      allocator,
      capacity,
      theSet,
    );
  }

  late final _CFSetCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(
              CFAllocatorRef, CFIndex, CFSetRef)>>('CFSetCreateMutableCopy');
  late final _CFSetCreateMutableCopy1 = _CFSetCreateMutableCopy1Ptr.asFunction<
      CFMutableSetRef Function(CFAllocatorRef, int, CFSetRef)>();

  int CFSetGetCount1(
    CFSetRef theSet,
  ) {
    return _CFSetGetCount1(
      theSet,
    );
  }

  late final _CFSetGetCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSetRef)>>('CFSetGetCount');
  late final _CFSetGetCount1 =
      _CFSetGetCount1Ptr.asFunction<int Function(CFSetRef)>();

  int CFSetGetCountOfValue1(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetCountOfValue1(
      theSet,
      value,
    );
  }

  late final _CFSetGetCountOfValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetCountOfValue');
  late final _CFSetGetCountOfValue1 = _CFSetGetCountOfValue1Ptr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetContainsValue1(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetContainsValue1(
      theSet,
      value,
    );
  }

  late final _CFSetContainsValue1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetContainsValue');
  late final _CFSetContainsValue1 = _CFSetContainsValue1Ptr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFSetGetValue1(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetValue1(
      theSet,
      value,
    );
  }

  late final _CFSetGetValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetValue');
  late final _CFSetGetValue1 = _CFSetGetValue1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetGetValueIfPresent1(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFSetGetValueIfPresent1(
      theSet,
      candidate,
      value,
    );
  }

  late final _CFSetGetValueIfPresent1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValueIfPresent');
  late final _CFSetGetValueIfPresent1 = _CFSetGetValueIfPresent1Ptr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetGetValues1(
    CFSetRef theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues1(
      theSet,
      values,
    );
  }

  late final _CFSetGetValues1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValues');
  late final _CFSetGetValues1 = _CFSetGetValues1Ptr.asFunction<
      void Function(CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetApplyFunction1(
    CFSetRef theSet,
    CFSetApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFSetApplyFunction1(
      theSet,
      applier,
      context,
    );
  }

  late final _CFSetApplyFunction1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSetRef, CFSetApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFSetApplyFunction');
  late final _CFSetApplyFunction1 = _CFSetApplyFunction1Ptr.asFunction<
      void Function(CFSetRef, CFSetApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFSetAddValue1(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetAddValue1(
      theSet,
      value,
    );
  }

  late final _CFSetAddValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetAddValue');
  late final _CFSetAddValue1 = _CFSetAddValue1Ptr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetReplaceValue1(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetReplaceValue1(
      theSet,
      value,
    );
  }

  late final _CFSetReplaceValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetReplaceValue');
  late final _CFSetReplaceValue1 = _CFSetReplaceValue1Ptr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetSetValue1(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetSetValue1(
      theSet,
      value,
    );
  }

  late final _CFSetSetValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetSetValue');
  late final _CFSetSetValue1 = _CFSetSetValue1Ptr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveValue1(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetRemoveValue1(
      theSet,
      value,
    );
  }

  late final _CFSetRemoveValue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetRemoveValue');
  late final _CFSetRemoveValue1 = _CFSetRemoveValue1Ptr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveAllValues1(
    CFMutableSetRef theSet,
  ) {
    return _CFSetRemoveAllValues1(
      theSet,
    );
  }

  late final _CFSetRemoveAllValues1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableSetRef)>>(
          'CFSetRemoveAllValues');
  late final _CFSetRemoveAllValues1 =
      _CFSetRemoveAllValues1Ptr.asFunction<void Function(CFMutableSetRef)>();

  int CFTreeGetTypeID1() {
    return _CFTreeGetTypeID1();
  }

  late final _CFTreeGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTreeGetTypeID');
  late final _CFTreeGetTypeID1 =
      _CFTreeGetTypeID1Ptr.asFunction<int Function()>();

  CFTreeRef CFTreeCreate1(
    CFAllocatorRef allocator,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeCreate1(
      allocator,
      context,
    );
  }

  late final _CFTreeCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFTreeRef Function(
              CFAllocatorRef, ffi.Pointer<CFTreeContext>)>>('CFTreeCreate');
  late final _CFTreeCreate1 = _CFTreeCreate1Ptr.asFunction<
      CFTreeRef Function(CFAllocatorRef, ffi.Pointer<CFTreeContext>)>();

  CFTreeRef CFTreeGetParent1(
    CFTreeRef tree,
  ) {
    return _CFTreeGetParent1(
      tree,
    );
  }

  late final _CFTreeGetParent1Ptr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetParent');
  late final _CFTreeGetParent1 =
      _CFTreeGetParent1Ptr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetNextSibling1(
    CFTreeRef tree,
  ) {
    return _CFTreeGetNextSibling1(
      tree,
    );
  }

  late final _CFTreeGetNextSibling1Ptr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetNextSibling');
  late final _CFTreeGetNextSibling1 =
      _CFTreeGetNextSibling1Ptr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetFirstChild1(
    CFTreeRef tree,
  ) {
    return _CFTreeGetFirstChild1(
      tree,
    );
  }

  late final _CFTreeGetFirstChild1Ptr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetFirstChild');
  late final _CFTreeGetFirstChild1 =
      _CFTreeGetFirstChild1Ptr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeGetContext1(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeGetContext1(
      tree,
      context,
    );
  }

  late final _CFTreeGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeGetContext');
  late final _CFTreeGetContext1 = _CFTreeGetContext1Ptr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  int CFTreeGetChildCount1(
    CFTreeRef tree,
  ) {
    return _CFTreeGetChildCount1(
      tree,
    );
  }

  late final _CFTreeGetChildCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTreeRef)>>(
          'CFTreeGetChildCount');
  late final _CFTreeGetChildCount1 =
      _CFTreeGetChildCount1Ptr.asFunction<int Function(CFTreeRef)>();

  CFTreeRef CFTreeGetChildAtIndex1(
    CFTreeRef tree,
    int idx,
  ) {
    return _CFTreeGetChildAtIndex1(
      tree,
      idx,
    );
  }

  late final _CFTreeGetChildAtIndex1Ptr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef, CFIndex)>>(
          'CFTreeGetChildAtIndex');
  late final _CFTreeGetChildAtIndex1 = _CFTreeGetChildAtIndex1Ptr.asFunction<
      CFTreeRef Function(CFTreeRef, int)>();

  void CFTreeGetChildren1(
    CFTreeRef tree,
    ffi.Pointer<CFTreeRef> children,
  ) {
    return _CFTreeGetChildren1(
      tree,
      children,
    );
  }

  late final _CFTreeGetChildren1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeRef>)>>('CFTreeGetChildren');
  late final _CFTreeGetChildren1 = _CFTreeGetChildren1Ptr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeRef>)>();

  void CFTreeApplyFunctionToChildren1(
    CFTreeRef tree,
    CFTreeApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeApplyFunctionToChildren1(
      tree,
      applier,
      context,
    );
  }

  late final _CFTreeApplyFunctionToChildren1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFTreeApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeApplyFunctionToChildren');
  late final _CFTreeApplyFunctionToChildren1 =
      _CFTreeApplyFunctionToChildren1Ptr.asFunction<
          void Function(
              CFTreeRef, CFTreeApplierFunction, ffi.Pointer<ffi.Void>)>();

  CFTreeRef CFTreeFindRoot1(
    CFTreeRef tree,
  ) {
    return _CFTreeFindRoot1(
      tree,
    );
  }

  late final _CFTreeFindRoot1Ptr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeFindRoot');
  late final _CFTreeFindRoot1 =
      _CFTreeFindRoot1Ptr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeSetContext1(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeSetContext1(
      tree,
      context,
    );
  }

  late final _CFTreeSetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeSetContext');
  late final _CFTreeSetContext1 = _CFTreeSetContext1Ptr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  void CFTreePrependChild1(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreePrependChild1(
      tree,
      newChild,
    );
  }

  late final _CFTreePrependChild1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreePrependChild');
  late final _CFTreePrependChild1 =
      _CFTreePrependChild1Ptr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeAppendChild1(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreeAppendChild1(
      tree,
      newChild,
    );
  }

  late final _CFTreeAppendChild1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeAppendChild');
  late final _CFTreeAppendChild1 =
      _CFTreeAppendChild1Ptr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeInsertSibling1(
    CFTreeRef tree,
    CFTreeRef newSibling,
  ) {
    return _CFTreeInsertSibling1(
      tree,
      newSibling,
    );
  }

  late final _CFTreeInsertSibling1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeInsertSibling');
  late final _CFTreeInsertSibling1 = _CFTreeInsertSibling1Ptr.asFunction<
      void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeRemove1(
    CFTreeRef tree,
  ) {
    return _CFTreeRemove1(
      tree,
    );
  }

  late final _CFTreeRemove1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>('CFTreeRemove');
  late final _CFTreeRemove1 =
      _CFTreeRemove1Ptr.asFunction<void Function(CFTreeRef)>();

  void CFTreeRemoveAllChildren1(
    CFTreeRef tree,
  ) {
    return _CFTreeRemoveAllChildren1(
      tree,
    );
  }

  late final _CFTreeRemoveAllChildren1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>(
          'CFTreeRemoveAllChildren');
  late final _CFTreeRemoveAllChildren1 =
      _CFTreeRemoveAllChildren1Ptr.asFunction<void Function(CFTreeRef)>();

  void CFTreeSortChildren1(
    CFTreeRef tree,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeSortChildren1(
      tree,
      comparator,
      context,
    );
  }

  late final _CFTreeSortChildren1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeSortChildren');
  late final _CFTreeSortChildren1 = _CFTreeSortChildren1Ptr.asFunction<
      void Function(CFTreeRef, CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  int CFURLCreateDataAndPropertiesFromResource1(
    CFAllocatorRef alloc,
    CFURLRef url,
    ffi.Pointer<CFDataRef> resourceData,
    ffi.Pointer<CFDictionaryRef> properties,
    CFArrayRef desiredProperties,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreateDataAndPropertiesFromResource1(
      alloc,
      url,
      resourceData,
      properties,
      desiredProperties,
      errorCode,
    );
  }

  late final _CFURLCreateDataAndPropertiesFromResource1Ptr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFAllocatorRef,
                  CFURLRef,
                  ffi.Pointer<CFDataRef>,
                  ffi.Pointer<CFDictionaryRef>,
                  CFArrayRef,
                  ffi.Pointer<SInt32>)>>(
      'CFURLCreateDataAndPropertiesFromResource');
  late final _CFURLCreateDataAndPropertiesFromResource1 =
      _CFURLCreateDataAndPropertiesFromResource1Ptr.asFunction<
          int Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFDataRef>,
              ffi.Pointer<CFDictionaryRef>, CFArrayRef, ffi.Pointer<SInt32>)>();

  int CFURLWriteDataAndPropertiesToResource1(
    CFURLRef url,
    CFDataRef dataToWrite,
    CFDictionaryRef propertiesToWrite,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLWriteDataAndPropertiesToResource1(
      url,
      dataToWrite,
      propertiesToWrite,
      errorCode,
    );
  }

  late final _CFURLWriteDataAndPropertiesToResource1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDataRef, CFDictionaryRef,
              ffi.Pointer<SInt32>)>>('CFURLWriteDataAndPropertiesToResource');
  late final _CFURLWriteDataAndPropertiesToResource1 =
      _CFURLWriteDataAndPropertiesToResource1Ptr.asFunction<
          int Function(
              CFURLRef, CFDataRef, CFDictionaryRef, ffi.Pointer<SInt32>)>();

  int CFURLDestroyResource1(
    CFURLRef url,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLDestroyResource1(
      url,
      errorCode,
    );
  }

  late final _CFURLDestroyResource1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<SInt32>)>>(
      'CFURLDestroyResource');
  late final _CFURLDestroyResource1 = _CFURLDestroyResource1Ptr.asFunction<
      int Function(CFURLRef, ffi.Pointer<SInt32>)>();

  CFTypeRef CFURLCreatePropertyFromResource1(
    CFAllocatorRef alloc,
    CFURLRef url,
    CFStringRef property,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreatePropertyFromResource1(
      alloc,
      url,
      property,
      errorCode,
    );
  }

  late final _CFURLCreatePropertyFromResource1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              ffi.Pointer<SInt32>)>>('CFURLCreatePropertyFromResource');
  late final _CFURLCreatePropertyFromResource1 =
      _CFURLCreatePropertyFromResource1Ptr.asFunction<
          CFTypeRef Function(
              CFAllocatorRef, CFURLRef, CFStringRef, ffi.Pointer<SInt32>)>();

  int CFUUIDGetTypeID1() {
    return _CFUUIDGetTypeID1();
  }

  late final _CFUUIDGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFUUIDGetTypeID');
  late final _CFUUIDGetTypeID1 =
      _CFUUIDGetTypeID1Ptr.asFunction<int Function()>();

  CFUUIDRef CFUUIDCreate1(
    CFAllocatorRef alloc,
  ) {
    return _CFUUIDCreate1(
      alloc,
    );
  }

  late final _CFUUIDCreate1Ptr =
      _lookup<ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef)>>(
          'CFUUIDCreate');
  late final _CFUUIDCreate1 =
      _CFUUIDCreate1Ptr.asFunction<CFUUIDRef Function(CFAllocatorRef)>();

  CFUUIDRef CFUUIDCreateWithBytes1(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDCreateWithBytes1(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDCreateWithBytes1Ptr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDCreateWithBytes');
  late final _CFUUIDCreateWithBytes1 = _CFUUIDCreateWithBytes1Ptr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int, int,
          int, int, int, int, int, int, int, int)>();

  CFUUIDRef CFUUIDCreateFromString1(
    CFAllocatorRef alloc,
    CFStringRef uuidStr,
  ) {
    return _CFUUIDCreateFromString1(
      alloc,
      uuidStr,
    );
  }

  late final _CFUUIDCreateFromString1Ptr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFUUIDCreateFromString');
  late final _CFUUIDCreateFromString1 = _CFUUIDCreateFromString1Ptr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFUUIDCreateString1(
    CFAllocatorRef alloc,
    CFUUIDRef uuid,
  ) {
    return _CFUUIDCreateString1(
      alloc,
      uuid,
    );
  }

  late final _CFUUIDCreateString1Ptr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFAllocatorRef, CFUUIDRef)>>(
      'CFUUIDCreateString');
  late final _CFUUIDCreateString1 = _CFUUIDCreateString1Ptr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFUUIDRef)>();

  CFUUIDRef CFUUIDGetConstantUUIDWithBytes1(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDGetConstantUUIDWithBytes1(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDGetConstantUUIDWithBytes1Ptr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDGetConstantUUIDWithBytes');
  late final _CFUUIDGetConstantUUIDWithBytes1 =
      _CFUUIDGetConstantUUIDWithBytes1Ptr.asFunction<
          CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, int)>();

  CFUUIDBytes CFUUIDGetUUIDBytes1(
    CFUUIDRef uuid,
  ) {
    return _CFUUIDGetUUIDBytes1(
      uuid,
    );
  }

  late final _CFUUIDGetUUIDBytes1Ptr =
      _lookup<ffi.NativeFunction<CFUUIDBytes Function(CFUUIDRef)>>(
          'CFUUIDGetUUIDBytes');
  late final _CFUUIDGetUUIDBytes1 =
      _CFUUIDGetUUIDBytes1Ptr.asFunction<CFUUIDBytes Function(CFUUIDRef)>();

  CFUUIDRef CFUUIDCreateFromUUIDBytes1(
    CFAllocatorRef alloc,
    CFUUIDBytes bytes,
  ) {
    return _CFUUIDCreateFromUUIDBytes1(
      alloc,
      bytes,
    );
  }

  late final _CFUUIDCreateFromUUIDBytes1Ptr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>>(
      'CFUUIDCreateFromUUIDBytes');
  late final _CFUUIDCreateFromUUIDBytes1 = _CFUUIDCreateFromUUIDBytes1Ptr
      .asFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>();

  CFURLRef CFCopyHomeDirectoryURL1() {
    return _CFCopyHomeDirectoryURL1();
  }

  late final _CFCopyHomeDirectoryURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function()>>(
          'CFCopyHomeDirectoryURL');
  late final _CFCopyHomeDirectoryURL1 =
      _CFCopyHomeDirectoryURL1Ptr.asFunction<CFURLRef Function()>();

  CFBundleRef CFBundleGetMainBundle1() {
    return _CFBundleGetMainBundle1();
  }

  late final _CFBundleGetMainBundle1Ptr =
      _lookup<ffi.NativeFunction<CFBundleRef Function()>>(
          'CFBundleGetMainBundle');
  late final _CFBundleGetMainBundle1 =
      _CFBundleGetMainBundle1Ptr.asFunction<CFBundleRef Function()>();

  CFBundleRef CFBundleGetBundleWithIdentifier1(
    CFStringRef bundleID,
  ) {
    return _CFBundleGetBundleWithIdentifier1(
      bundleID,
    );
  }

  late final _CFBundleGetBundleWithIdentifier1Ptr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFStringRef)>>(
          'CFBundleGetBundleWithIdentifier');
  late final _CFBundleGetBundleWithIdentifier1 =
      _CFBundleGetBundleWithIdentifier1Ptr.asFunction<
          CFBundleRef Function(CFStringRef)>();

  CFArrayRef CFBundleGetAllBundles1() {
    return _CFBundleGetAllBundles1();
  }

  late final _CFBundleGetAllBundles1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFBundleGetAllBundles');
  late final _CFBundleGetAllBundles1 =
      _CFBundleGetAllBundles1Ptr.asFunction<CFArrayRef Function()>();

  int CFBundleGetTypeID1() {
    return _CFBundleGetTypeID1();
  }

  late final _CFBundleGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBundleGetTypeID');
  late final _CFBundleGetTypeID1 =
      _CFBundleGetTypeID1Ptr.asFunction<int Function()>();

  CFBundleRef CFBundleCreate1(
    CFAllocatorRef allocator,
    CFURLRef bundleURL,
  ) {
    return _CFBundleCreate1(
      allocator,
      bundleURL,
    );
  }

  late final _CFBundleCreate1Ptr = _lookup<
          ffi.NativeFunction<CFBundleRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFBundleCreate');
  late final _CFBundleCreate1 = _CFBundleCreate1Ptr.asFunction<
      CFBundleRef Function(CFAllocatorRef, CFURLRef)>();

  CFArrayRef CFBundleCreateBundlesFromDirectory1(
    CFAllocatorRef allocator,
    CFURLRef directoryURL,
    CFStringRef bundleType,
  ) {
    return _CFBundleCreateBundlesFromDirectory1(
      allocator,
      directoryURL,
      bundleType,
    );
  }

  late final _CFBundleCreateBundlesFromDirectory1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFBundleCreateBundlesFromDirectory');
  late final _CFBundleCreateBundlesFromDirectory1 =
      _CFBundleCreateBundlesFromDirectory1Ptr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFBundleCopyBundleURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleURL1(
      bundle,
    );
  }

  late final _CFBundleCopyBundleURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleURL');
  late final _CFBundleCopyBundleURL1 =
      _CFBundleCopyBundleURL1Ptr.asFunction<CFURLRef Function(CFBundleRef)>();

  CFTypeRef CFBundleGetValueForInfoDictionaryKey1(
    CFBundleRef bundle,
    CFStringRef key,
  ) {
    return _CFBundleGetValueForInfoDictionaryKey1(
      bundle,
      key,
    );
  }

  late final _CFBundleGetValueForInfoDictionaryKey1Ptr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleGetValueForInfoDictionaryKey');
  late final _CFBundleGetValueForInfoDictionaryKey1 =
      _CFBundleGetValueForInfoDictionaryKey1Ptr.asFunction<
          CFTypeRef Function(CFBundleRef, CFStringRef)>();

  CFDictionaryRef CFBundleGetInfoDictionary1(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetInfoDictionary1(
      bundle,
    );
  }

  late final _CFBundleGetInfoDictionary1Ptr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetInfoDictionary');
  late final _CFBundleGetInfoDictionary1 = _CFBundleGetInfoDictionary1Ptr
      .asFunction<CFDictionaryRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleGetLocalInfoDictionary1(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetLocalInfoDictionary1(
      bundle,
    );
  }

  late final _CFBundleGetLocalInfoDictionary1Ptr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetLocalInfoDictionary');
  late final _CFBundleGetLocalInfoDictionary1 =
      _CFBundleGetLocalInfoDictionary1Ptr.asFunction<
          CFDictionaryRef Function(CFBundleRef)>();

  void CFBundleGetPackageInfo1(
    CFBundleRef bundle,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfo1(
      bundle,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfo1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBundleRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfo');
  late final _CFBundleGetPackageInfo1 = _CFBundleGetPackageInfo1Ptr.asFunction<
      void Function(CFBundleRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFStringRef CFBundleGetIdentifier1(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetIdentifier1(
      bundle,
    );
  }

  late final _CFBundleGetIdentifier1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetIdentifier');
  late final _CFBundleGetIdentifier1 = _CFBundleGetIdentifier1Ptr.asFunction<
      CFStringRef Function(CFBundleRef)>();

  int CFBundleGetVersionNumber1(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetVersionNumber1(
      bundle,
    );
  }

  late final _CFBundleGetVersionNumber1Ptr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFBundleRef)>>(
          'CFBundleGetVersionNumber');
  late final _CFBundleGetVersionNumber1 =
      _CFBundleGetVersionNumber1Ptr.asFunction<int Function(CFBundleRef)>();

  CFStringRef CFBundleGetDevelopmentRegion1(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetDevelopmentRegion1(
      bundle,
    );
  }

  late final _CFBundleGetDevelopmentRegion1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetDevelopmentRegion');
  late final _CFBundleGetDevelopmentRegion1 = _CFBundleGetDevelopmentRegion1Ptr
      .asFunction<CFStringRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySupportFilesDirectoryURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySupportFilesDirectoryURL1(
      bundle,
    );
  }

  late final _CFBundleCopySupportFilesDirectoryURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySupportFilesDirectoryURL');
  late final _CFBundleCopySupportFilesDirectoryURL1 =
      _CFBundleCopySupportFilesDirectoryURL1Ptr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyResourcesDirectoryURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyResourcesDirectoryURL1(
      bundle,
    );
  }

  late final _CFBundleCopyResourcesDirectoryURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyResourcesDirectoryURL');
  late final _CFBundleCopyResourcesDirectoryURL1 =
      _CFBundleCopyResourcesDirectoryURL1Ptr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyPrivateFrameworksURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyPrivateFrameworksURL1(
      bundle,
    );
  }

  late final _CFBundleCopyPrivateFrameworksURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyPrivateFrameworksURL');
  late final _CFBundleCopyPrivateFrameworksURL1 =
      _CFBundleCopyPrivateFrameworksURL1Ptr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedFrameworksURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedFrameworksURL1(
      bundle,
    );
  }

  late final _CFBundleCopySharedFrameworksURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedFrameworksURL');
  late final _CFBundleCopySharedFrameworksURL1 =
      _CFBundleCopySharedFrameworksURL1Ptr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedSupportURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedSupportURL1(
      bundle,
    );
  }

  late final _CFBundleCopySharedSupportURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedSupportURL');
  late final _CFBundleCopySharedSupportURL1 = _CFBundleCopySharedSupportURL1Ptr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyBuiltInPlugInsURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBuiltInPlugInsURL1(
      bundle,
    );
  }

  late final _CFBundleCopyBuiltInPlugInsURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBuiltInPlugInsURL');
  late final _CFBundleCopyBuiltInPlugInsURL1 =
      _CFBundleCopyBuiltInPlugInsURL1Ptr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory1(
    CFURLRef bundleURL,
  ) {
    return _CFBundleCopyInfoDictionaryInDirectory1(
      bundleURL,
    );
  }

  late final _CFBundleCopyInfoDictionaryInDirectory1Ptr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryInDirectory');
  late final _CFBundleCopyInfoDictionaryInDirectory1 =
      _CFBundleCopyInfoDictionaryInDirectory1Ptr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  int CFBundleGetPackageInfoInDirectory1(
    CFURLRef url,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfoInDirectory1(
      url,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoInDirectory1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfoInDirectory');
  late final _CFBundleGetPackageInfoInDirectory1 =
      _CFBundleGetPackageInfoInDirectory1Ptr.asFunction<
          int Function(CFURLRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFURLRef CFBundleCopyResourceURL1(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURL1(
      bundle,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURL1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURL');
  late final _CFBundleCopyResourceURL1 =
      _CFBundleCopyResourceURL1Ptr.asFunction<
          CFURLRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfType1(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfType1(
      bundle,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfType1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfType');
  late final _CFBundleCopyResourceURLsOfType1 =
      _CFBundleCopyResourceURLsOfType1Ptr.asFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef)>();

  CFStringRef CFBundleCopyLocalizedString1(
    CFBundleRef bundle,
    CFStringRef key,
    CFStringRef value,
    CFStringRef tableName,
  ) {
    return _CFBundleCopyLocalizedString1(
      bundle,
      key,
      value,
      tableName,
    );
  }

  late final _CFBundleCopyLocalizedString1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyLocalizedString');
  late final _CFBundleCopyLocalizedString1 =
      _CFBundleCopyLocalizedString1Ptr.asFunction<
          CFStringRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFURLRef CFBundleCopyResourceURLInDirectory1(
    CFURLRef bundleURL,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLInDirectory1(
      bundleURL,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLInDirectory1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLInDirectory');
  late final _CFBundleCopyResourceURLInDirectory1 =
      _CFBundleCopyResourceURLInDirectory1Ptr.asFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory1(
    CFURLRef bundleURL,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeInDirectory1(
      bundleURL,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeInDirectory1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFURLRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeInDirectory');
  late final _CFBundleCopyResourceURLsOfTypeInDirectory1 =
      _CFBundleCopyResourceURLsOfTypeInDirectory1Ptr.asFunction<
          CFArrayRef Function(CFURLRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyBundleLocalizations1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleLocalizations1(
      bundle,
    );
  }

  late final _CFBundleCopyBundleLocalizations1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleLocalizations');
  late final _CFBundleCopyBundleLocalizations1 =
      _CFBundleCopyBundleLocalizations1Ptr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyPreferredLocalizationsFromArray1(
    CFArrayRef locArray,
  ) {
    return _CFBundleCopyPreferredLocalizationsFromArray1(
      locArray,
    );
  }

  late final _CFBundleCopyPreferredLocalizationsFromArray1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef)>>(
          'CFBundleCopyPreferredLocalizationsFromArray');
  late final _CFBundleCopyPreferredLocalizationsFromArray1 =
      _CFBundleCopyPreferredLocalizationsFromArray1Ptr.asFunction<
          CFArrayRef Function(CFArrayRef)>();

  CFArrayRef CFBundleCopyLocalizationsForPreferences1(
    CFArrayRef locArray,
    CFArrayRef prefArray,
  ) {
    return _CFBundleCopyLocalizationsForPreferences1(
      locArray,
      prefArray,
    );
  }

  late final _CFBundleCopyLocalizationsForPreferences1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef, CFArrayRef)>>(
          'CFBundleCopyLocalizationsForPreferences');
  late final _CFBundleCopyLocalizationsForPreferences1 =
      _CFBundleCopyLocalizationsForPreferences1Ptr.asFunction<
          CFArrayRef Function(CFArrayRef, CFArrayRef)>();

  CFURLRef CFBundleCopyResourceURLForLocalization1(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLForLocalization1(
      bundle,
      resourceName,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLForLocalization1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLForLocalization');
  late final _CFBundleCopyResourceURLForLocalization1 =
      _CFBundleCopyResourceURLForLocalization1Ptr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization1(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeForLocalization1(
      bundle,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeForLocalization1Ptr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeForLocalization');
  late final _CFBundleCopyResourceURLsOfTypeForLocalization1 =
      _CFBundleCopyResourceURLsOfTypeForLocalization1Ptr.asFunction<
          CFArrayRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryForURL1(
    CFURLRef url,
  ) {
    return _CFBundleCopyInfoDictionaryForURL1(
      url,
    );
  }

  late final _CFBundleCopyInfoDictionaryForURL1Ptr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryForURL');
  late final _CFBundleCopyInfoDictionaryForURL1 =
      _CFBundleCopyInfoDictionaryForURL1Ptr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyLocalizationsForURL1(
    CFURLRef url,
  ) {
    return _CFBundleCopyLocalizationsForURL1(
      url,
    );
  }

  late final _CFBundleCopyLocalizationsForURL1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyLocalizationsForURL');
  late final _CFBundleCopyLocalizationsForURL1 =
      _CFBundleCopyLocalizationsForURL1Ptr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyExecutableArchitecturesForURL1(
    CFURLRef url,
  ) {
    return _CFBundleCopyExecutableArchitecturesForURL1(
      url,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesForURL1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyExecutableArchitecturesForURL');
  late final _CFBundleCopyExecutableArchitecturesForURL1 =
      _CFBundleCopyExecutableArchitecturesForURL1Ptr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFURLRef CFBundleCopyExecutableURL1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableURL1(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableURL');
  late final _CFBundleCopyExecutableURL1 = _CFBundleCopyExecutableURL1Ptr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyExecutableArchitectures1(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableArchitectures1(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableArchitectures1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableArchitectures');
  late final _CFBundleCopyExecutableArchitectures1 =
      _CFBundleCopyExecutableArchitectures1Ptr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  int CFBundlePreflightExecutable1(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundlePreflightExecutable1(
      bundle,
      error,
    );
  }

  late final _CFBundlePreflightExecutable1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBundleRef,
              ffi.Pointer<CFErrorRef>)>>('CFBundlePreflightExecutable');
  late final _CFBundlePreflightExecutable1 = _CFBundlePreflightExecutable1Ptr
      .asFunction<int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutableAndReturnError1(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundleLoadExecutableAndReturnError1(
      bundle,
      error,
    );
  }

  late final _CFBundleLoadExecutableAndReturnError1Ptr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>>(
      'CFBundleLoadExecutableAndReturnError');
  late final _CFBundleLoadExecutableAndReturnError1 =
      _CFBundleLoadExecutableAndReturnError1Ptr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutable1(
    CFBundleRef bundle,
  ) {
    return _CFBundleLoadExecutable1(
      bundle,
    );
  }

  late final _CFBundleLoadExecutable1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleLoadExecutable');
  late final _CFBundleLoadExecutable1 =
      _CFBundleLoadExecutable1Ptr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoaded1(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoaded1(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoaded1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoaded');
  late final _CFBundleIsExecutableLoaded1 =
      _CFBundleIsExecutableLoaded1Ptr.asFunction<int Function(CFBundleRef)>();

  void CFBundleUnloadExecutable1(
    CFBundleRef bundle,
  ) {
    return _CFBundleUnloadExecutable1(
      bundle,
    );
  }

  late final _CFBundleUnloadExecutable1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBundleRef)>>(
          'CFBundleUnloadExecutable');
  late final _CFBundleUnloadExecutable1 =
      _CFBundleUnloadExecutable1Ptr.asFunction<void Function(CFBundleRef)>();

  ffi.Pointer<ffi.Void> CFBundleGetFunctionPointerForName1(
    CFBundleRef bundle,
    CFStringRef functionName,
  ) {
    return _CFBundleGetFunctionPointerForName1(
      bundle,
      functionName,
    );
  }

  late final _CFBundleGetFunctionPointerForName1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetFunctionPointerForName');
  late final _CFBundleGetFunctionPointerForName1 =
      _CFBundleGetFunctionPointerForName1Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetFunctionPointersForNames1(
    CFBundleRef bundle,
    CFArrayRef functionNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFBundleGetFunctionPointersForNames1(
      bundle,
      functionNames,
      ftbl,
    );
  }

  late final _CFBundleGetFunctionPointersForNames1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetFunctionPointersForNames');
  late final _CFBundleGetFunctionPointersForNames1 =
      _CFBundleGetFunctionPointersForNames1Ptr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> CFBundleGetDataPointerForName1(
    CFBundleRef bundle,
    CFStringRef symbolName,
  ) {
    return _CFBundleGetDataPointerForName1(
      bundle,
      symbolName,
    );
  }

  late final _CFBundleGetDataPointerForName1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetDataPointerForName');
  late final _CFBundleGetDataPointerForName1 =
      _CFBundleGetDataPointerForName1Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetDataPointersForNames1(
    CFBundleRef bundle,
    CFArrayRef symbolNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> stbl,
  ) {
    return _CFBundleGetDataPointersForNames1(
      bundle,
      symbolNames,
      stbl,
    );
  }

  late final _CFBundleGetDataPointersForNames1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetDataPointersForNames');
  late final _CFBundleGetDataPointersForNames1 =
      _CFBundleGetDataPointersForNames1Ptr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFURLRef CFBundleCopyAuxiliaryExecutableURL1(
    CFBundleRef bundle,
    CFStringRef executableName,
  ) {
    return _CFBundleCopyAuxiliaryExecutableURL1(
      bundle,
      executableName,
    );
  }

  late final _CFBundleCopyAuxiliaryExecutableURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleCopyAuxiliaryExecutableURL');
  late final _CFBundleCopyAuxiliaryExecutableURL1 =
      _CFBundleCopyAuxiliaryExecutableURL1Ptr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef)>();

  int CFBundleIsExecutableLoadable1(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoadable1(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadable1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoadable');
  late final _CFBundleIsExecutableLoadable1 =
      _CFBundleIsExecutableLoadable1Ptr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoadableForURL1(
    CFURLRef url,
  ) {
    return _CFBundleIsExecutableLoadableForURL1(
      url,
    );
  }

  late final _CFBundleIsExecutableLoadableForURL1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFBundleIsExecutableLoadableForURL');
  late final _CFBundleIsExecutableLoadableForURL1 =
      _CFBundleIsExecutableLoadableForURL1Ptr.asFunction<
          int Function(CFURLRef)>();

  int CFBundleIsArchitectureLoadable1(
    int arch,
  ) {
    return _CFBundleIsArchitectureLoadable1(
      arch,
    );
  }

  late final _CFBundleIsArchitectureLoadable1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(cpu_type_t)>>(
          'CFBundleIsArchitectureLoadable');
  late final _CFBundleIsArchitectureLoadable1 =
      _CFBundleIsArchitectureLoadable1Ptr.asFunction<int Function(int)>();

  CFPlugInRef CFBundleGetPlugIn1(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetPlugIn1(
      bundle,
    );
  }

  late final _CFBundleGetPlugIn1Ptr =
      _lookup<ffi.NativeFunction<CFPlugInRef Function(CFBundleRef)>>(
          'CFBundleGetPlugIn');
  late final _CFBundleGetPlugIn1 =
      _CFBundleGetPlugIn1Ptr.asFunction<CFPlugInRef Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceMap1(
    CFBundleRef bundle,
  ) {
    return _CFBundleOpenBundleResourceMap1(
      bundle,
    );
  }

  late final _CFBundleOpenBundleResourceMap1Ptr =
      _lookup<ffi.NativeFunction<CFBundleRefNum Function(CFBundleRef)>>(
          'CFBundleOpenBundleResourceMap');
  late final _CFBundleOpenBundleResourceMap1 =
      _CFBundleOpenBundleResourceMap1Ptr.asFunction<
          int Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceFiles1(
    CFBundleRef bundle,
    ffi.Pointer<CFBundleRefNum> refNum,
    ffi.Pointer<CFBundleRefNum> localizedRefNum,
  ) {
    return _CFBundleOpenBundleResourceFiles1(
      bundle,
      refNum,
      localizedRefNum,
    );
  }

  late final _CFBundleOpenBundleResourceFiles1Ptr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>>('CFBundleOpenBundleResourceFiles');
  late final _CFBundleOpenBundleResourceFiles1 =
      _CFBundleOpenBundleResourceFiles1Ptr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>();

  void CFBundleCloseBundleResourceMap1(
    CFBundleRef bundle,
    int refNum,
  ) {
    return _CFBundleCloseBundleResourceMap1(
      bundle,
      refNum,
    );
  }

  late final _CFBundleCloseBundleResourceMap1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFBundleRef, CFBundleRefNum)>>(
      'CFBundleCloseBundleResourceMap');
  late final _CFBundleCloseBundleResourceMap1 =
      _CFBundleCloseBundleResourceMap1Ptr.asFunction<
          void Function(CFBundleRef, int)>();

  int CFMessagePortGetTypeID1() {
    return _CFMessagePortGetTypeID1();
  }

  late final _CFMessagePortGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFMessagePortGetTypeID');
  late final _CFMessagePortGetTypeID1 =
      _CFMessagePortGetTypeID1Ptr.asFunction<int Function()>();

  CFMessagePortRef CFMessagePortCreateLocal1(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFMessagePortCallBack callout,
    ffi.Pointer<CFMessagePortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMessagePortCreateLocal1(
      allocator,
      name,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMessagePortCreateLocal1Ptr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>>('CFMessagePortCreateLocal');
  late final _CFMessagePortCreateLocal1 =
      _CFMessagePortCreateLocal1Ptr.asFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>();

  CFMessagePortRef CFMessagePortCreateRemote1(
    CFAllocatorRef allocator,
    CFStringRef name,
  ) {
    return _CFMessagePortCreateRemote1(
      allocator,
      name,
    );
  }

  late final _CFMessagePortCreateRemote1Ptr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef, CFStringRef)>>('CFMessagePortCreateRemote');
  late final _CFMessagePortCreateRemote1 = _CFMessagePortCreateRemote1Ptr
      .asFunction<CFMessagePortRef Function(CFAllocatorRef, CFStringRef)>();

  int CFMessagePortIsRemote1(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsRemote1(
      ms,
    );
  }

  late final _CFMessagePortIsRemote1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsRemote');
  late final _CFMessagePortIsRemote1 =
      _CFMessagePortIsRemote1Ptr.asFunction<int Function(CFMessagePortRef)>();

  CFStringRef CFMessagePortGetName1(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetName1(
      ms,
    );
  }

  late final _CFMessagePortGetName1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFMessagePortRef)>>(
          'CFMessagePortGetName');
  late final _CFMessagePortGetName1 = _CFMessagePortGetName1Ptr.asFunction<
      CFStringRef Function(CFMessagePortRef)>();

  int CFMessagePortSetName1(
    CFMessagePortRef ms,
    CFStringRef newName,
  ) {
    return _CFMessagePortSetName1(
      ms,
      newName,
    );
  }

  late final _CFMessagePortSetName1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFMessagePortRef, CFStringRef)>>(
      'CFMessagePortSetName');
  late final _CFMessagePortSetName1 = _CFMessagePortSetName1Ptr.asFunction<
      int Function(CFMessagePortRef, CFStringRef)>();

  void CFMessagePortGetContext1(
    CFMessagePortRef ms,
    ffi.Pointer<CFMessagePortContext> context,
  ) {
    return _CFMessagePortGetContext1(
      ms,
      context,
    );
  }

  late final _CFMessagePortGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              ffi.Pointer<CFMessagePortContext>)>>('CFMessagePortGetContext');
  late final _CFMessagePortGetContext1 =
      _CFMessagePortGetContext1Ptr.asFunction<
          void Function(CFMessagePortRef, ffi.Pointer<CFMessagePortContext>)>();

  void CFMessagePortInvalidate1(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortInvalidate1(
      ms,
    );
  }

  late final _CFMessagePortInvalidate1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMessagePortRef)>>(
          'CFMessagePortInvalidate');
  late final _CFMessagePortInvalidate1 = _CFMessagePortInvalidate1Ptr
      .asFunction<void Function(CFMessagePortRef)>();

  int CFMessagePortIsValid1(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsValid1(
      ms,
    );
  }

  late final _CFMessagePortIsValid1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsValid');
  late final _CFMessagePortIsValid1 =
      _CFMessagePortIsValid1Ptr.asFunction<int Function(CFMessagePortRef)>();

  CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack1(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetInvalidationCallBack1(
      ms,
    );
  }

  late final _CFMessagePortGetInvalidationCallBack1Ptr = _lookup<
      ffi.NativeFunction<
          CFMessagePortInvalidationCallBack Function(
              CFMessagePortRef)>>('CFMessagePortGetInvalidationCallBack');
  late final _CFMessagePortGetInvalidationCallBack1 =
      _CFMessagePortGetInvalidationCallBack1Ptr.asFunction<
          CFMessagePortInvalidationCallBack Function(CFMessagePortRef)>();

  void CFMessagePortSetInvalidationCallBack1(
    CFMessagePortRef ms,
    CFMessagePortInvalidationCallBack callout,
  ) {
    return _CFMessagePortSetInvalidationCallBack1(
      ms,
      callout,
    );
  }

  late final _CFMessagePortSetInvalidationCallBack1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMessagePortRef, CFMessagePortInvalidationCallBack)>>(
      'CFMessagePortSetInvalidationCallBack');
  late final _CFMessagePortSetInvalidationCallBack1 =
      _CFMessagePortSetInvalidationCallBack1Ptr.asFunction<
          void Function(CFMessagePortRef, CFMessagePortInvalidationCallBack)>();

  int CFMessagePortSendRequest1(
    CFMessagePortRef remote,
    int msgid,
    CFDataRef data,
    double sendTimeout,
    double rcvTimeout,
    CFStringRef replyMode,
    ffi.Pointer<CFDataRef> returnData,
  ) {
    return _CFMessagePortSendRequest1(
      remote,
      msgid,
      data,
      sendTimeout,
      rcvTimeout,
      replyMode,
      returnData,
    );
  }

  late final _CFMessagePortSendRequest1Ptr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFMessagePortRef,
              SInt32,
              CFDataRef,
              CFTimeInterval,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFDataRef>)>>('CFMessagePortSendRequest');
  late final _CFMessagePortSendRequest1 =
      _CFMessagePortSendRequest1Ptr.asFunction<
          int Function(CFMessagePortRef, int, CFDataRef, double, double,
              CFStringRef, ffi.Pointer<CFDataRef>)>();

  CFRunLoopSourceRef CFMessagePortCreateRunLoopSource1(
    CFAllocatorRef allocator,
    CFMessagePortRef local,
    int order,
  ) {
    return _CFMessagePortCreateRunLoopSource1(
      allocator,
      local,
      order,
    );
  }

  late final _CFMessagePortCreateRunLoopSource1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef,
              CFIndex)>>('CFMessagePortCreateRunLoopSource');
  late final _CFMessagePortCreateRunLoopSource1 =
      _CFMessagePortCreateRunLoopSource1Ptr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef, int)>();

  void CFMessagePortSetDispatchQueue1(
    CFMessagePortRef ms,
    dispatch_queue_t queue,
  ) {
    return _CFMessagePortSetDispatchQueue1(
      ms,
      queue,
    );
  }

  late final _CFMessagePortSetDispatchQueue1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              dispatch_queue_t)>>('CFMessagePortSetDispatchQueue');
  late final _CFMessagePortSetDispatchQueue1 =
      _CFMessagePortSetDispatchQueue1Ptr.asFunction<
          void Function(CFMessagePortRef, dispatch_queue_t)>();

  int CFPlugInGetTypeID1() {
    return _CFPlugInGetTypeID1();
  }

  late final _CFPlugInGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFPlugInGetTypeID');
  late final _CFPlugInGetTypeID1 =
      _CFPlugInGetTypeID1Ptr.asFunction<int Function()>();

  CFPlugInRef CFPlugInCreate1(
    CFAllocatorRef allocator,
    CFURLRef plugInURL,
  ) {
    return _CFPlugInCreate1(
      allocator,
      plugInURL,
    );
  }

  late final _CFPlugInCreate1Ptr = _lookup<
          ffi.NativeFunction<CFPlugInRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFPlugInCreate');
  late final _CFPlugInCreate1 = _CFPlugInCreate1Ptr.asFunction<
      CFPlugInRef Function(CFAllocatorRef, CFURLRef)>();

  CFBundleRef CFPlugInGetBundle1(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInGetBundle1(
      plugIn,
    );
  }

  late final _CFPlugInGetBundle1Ptr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFPlugInRef)>>(
          'CFPlugInGetBundle');
  late final _CFPlugInGetBundle1 =
      _CFPlugInGetBundle1Ptr.asFunction<CFBundleRef Function(CFPlugInRef)>();

  void CFPlugInSetLoadOnDemand1(
    CFPlugInRef plugIn,
    int flag,
  ) {
    return _CFPlugInSetLoadOnDemand1(
      plugIn,
      flag,
    );
  }

  late final _CFPlugInSetLoadOnDemand1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFPlugInRef, Boolean)>>(
          'CFPlugInSetLoadOnDemand');
  late final _CFPlugInSetLoadOnDemand1 = _CFPlugInSetLoadOnDemand1Ptr
      .asFunction<void Function(CFPlugInRef, int)>();

  int CFPlugInIsLoadOnDemand1(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInIsLoadOnDemand1(
      plugIn,
    );
  }

  late final _CFPlugInIsLoadOnDemand1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPlugInRef)>>(
          'CFPlugInIsLoadOnDemand');
  late final _CFPlugInIsLoadOnDemand1 =
      _CFPlugInIsLoadOnDemand1Ptr.asFunction<int Function(CFPlugInRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInType1(
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInFindFactoriesForPlugInType1(
      typeUUID,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInType1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef)>>(
          'CFPlugInFindFactoriesForPlugInType');
  late final _CFPlugInFindFactoriesForPlugInType1 =
      _CFPlugInFindFactoriesForPlugInType1Ptr.asFunction<
          CFArrayRef Function(CFUUIDRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn1(
    CFUUIDRef typeUUID,
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInFindFactoriesForPlugInTypeInPlugIn1(
      typeUUID,
      plugIn,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef, CFPlugInRef)>>(
          'CFPlugInFindFactoriesForPlugInTypeInPlugIn');
  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn1 =
      _CFPlugInFindFactoriesForPlugInTypeInPlugIn1Ptr.asFunction<
          CFArrayRef Function(CFUUIDRef, CFPlugInRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceCreate1(
    CFAllocatorRef allocator,
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInInstanceCreate1(
      allocator,
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInInstanceCreate1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFUUIDRef, CFUUIDRef)>>('CFPlugInInstanceCreate');
  late final _CFPlugInInstanceCreate1 = _CFPlugInInstanceCreate1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef, CFUUIDRef)>();

  int CFPlugInRegisterFactoryFunction1(
    CFUUIDRef factoryUUID,
    CFPlugInFactoryFunction func,
  ) {
    return _CFPlugInRegisterFactoryFunction1(
      factoryUUID,
      func,
    );
  }

  late final _CFPlugInRegisterFactoryFunction1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef,
              CFPlugInFactoryFunction)>>('CFPlugInRegisterFactoryFunction');
  late final _CFPlugInRegisterFactoryFunction1 =
      _CFPlugInRegisterFactoryFunction1Ptr.asFunction<
          int Function(CFUUIDRef, CFPlugInFactoryFunction)>();

  int CFPlugInRegisterFactoryFunctionByName1(
    CFUUIDRef factoryUUID,
    CFPlugInRef plugIn,
    CFStringRef functionName,
  ) {
    return _CFPlugInRegisterFactoryFunctionByName1(
      factoryUUID,
      plugIn,
      functionName,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionByName1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef, CFPlugInRef,
              CFStringRef)>>('CFPlugInRegisterFactoryFunctionByName');
  late final _CFPlugInRegisterFactoryFunctionByName1 =
      _CFPlugInRegisterFactoryFunctionByName1Ptr.asFunction<
          int Function(CFUUIDRef, CFPlugInRef, CFStringRef)>();

  int CFPlugInUnregisterFactory1(
    CFUUIDRef factoryUUID,
  ) {
    return _CFPlugInUnregisterFactory1(
      factoryUUID,
    );
  }

  late final _CFPlugInUnregisterFactory1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef)>>(
          'CFPlugInUnregisterFactory');
  late final _CFPlugInUnregisterFactory1 =
      _CFPlugInUnregisterFactory1Ptr.asFunction<int Function(CFUUIDRef)>();

  int CFPlugInRegisterPlugInType1(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInRegisterPlugInType1(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInRegisterPlugInType1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInRegisterPlugInType');
  late final _CFPlugInRegisterPlugInType1 = _CFPlugInRegisterPlugInType1Ptr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  int CFPlugInUnregisterPlugInType1(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInUnregisterPlugInType1(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInUnregisterPlugInType1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInUnregisterPlugInType');
  late final _CFPlugInUnregisterPlugInType1 = _CFPlugInUnregisterPlugInType1Ptr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  void CFPlugInAddInstanceForFactory1(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInAddInstanceForFactory1(
      factoryID,
    );
  }

  late final _CFPlugInAddInstanceForFactory1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInAddInstanceForFactory');
  late final _CFPlugInAddInstanceForFactory1 =
      _CFPlugInAddInstanceForFactory1Ptr.asFunction<void Function(CFUUIDRef)>();

  void CFPlugInRemoveInstanceForFactory1(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInRemoveInstanceForFactory1(
      factoryID,
    );
  }

  late final _CFPlugInRemoveInstanceForFactory1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInRemoveInstanceForFactory');
  late final _CFPlugInRemoveInstanceForFactory1 =
      _CFPlugInRemoveInstanceForFactory1Ptr.asFunction<
          void Function(CFUUIDRef)>();

  int CFPlugInInstanceGetInterfaceFunctionTable1(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFPlugInInstanceGetInterfaceFunctionTable1(
      instance,
      interfaceName,
      ftbl,
    );
  }

  late final _CFPlugInInstanceGetInterfaceFunctionTable1Ptr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFPlugInInstanceRef, CFStringRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFPlugInInstanceGetInterfaceFunctionTable');
  late final _CFPlugInInstanceGetInterfaceFunctionTable1 =
      _CFPlugInInstanceGetInterfaceFunctionTable1Ptr.asFunction<
          int Function(CFPlugInInstanceRef, CFStringRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFStringRef CFPlugInInstanceGetFactoryName1(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetFactoryName1(
      instance,
    );
  }

  late final _CFPlugInInstanceGetFactoryName1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFPlugInInstanceRef)>>(
          'CFPlugInInstanceGetFactoryName');
  late final _CFPlugInInstanceGetFactoryName1 =
      _CFPlugInInstanceGetFactoryName1Ptr.asFunction<
          CFStringRef Function(CFPlugInInstanceRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceGetInstanceData1(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetInstanceData1(
      instance,
    );
  }

  late final _CFPlugInInstanceGetInstanceData1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFPlugInInstanceRef)>>('CFPlugInInstanceGetInstanceData');
  late final _CFPlugInInstanceGetInstanceData1 =
      _CFPlugInInstanceGetInstanceData1Ptr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>();

  int CFPlugInInstanceGetTypeID1() {
    return _CFPlugInInstanceGetTypeID1();
  }

  late final _CFPlugInInstanceGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFPlugInInstanceGetTypeID');
  late final _CFPlugInInstanceGetTypeID1 =
      _CFPlugInInstanceGetTypeID1Ptr.asFunction<int Function()>();

  CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize1(
    CFAllocatorRef allocator,
    int instanceDataSize,
    CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction,
    CFStringRef factoryName,
    CFPlugInInstanceGetInterfaceFunction getInterfaceFunction,
  ) {
    return _CFPlugInInstanceCreateWithInstanceDataSize1(
      allocator,
      instanceDataSize,
      deallocateInstanceFunction,
      factoryName,
      getInterfaceFunction,
    );
  }

  late final _CFPlugInInstanceCreateWithInstanceDataSize1Ptr = _lookup<
          ffi.NativeFunction<
              CFPlugInInstanceRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  CFPlugInInstanceDeallocateInstanceDataFunction,
                  CFStringRef,
                  CFPlugInInstanceGetInterfaceFunction)>>(
      'CFPlugInInstanceCreateWithInstanceDataSize');
  late final _CFPlugInInstanceCreateWithInstanceDataSize1 =
      _CFPlugInInstanceCreateWithInstanceDataSize1Ptr.asFunction<
          CFPlugInInstanceRef Function(
              CFAllocatorRef,
              int,
              CFPlugInInstanceDeallocateInstanceDataFunction,
              CFStringRef,
              CFPlugInInstanceGetInterfaceFunction)>();

  int CFMachPortGetTypeID1() {
    return _CFMachPortGetTypeID1();
  }

  late final _CFMachPortGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFMachPortGetTypeID');
  late final _CFMachPortGetTypeID1 =
      _CFMachPortGetTypeID1Ptr.asFunction<int Function()>();

  CFMachPortRef CFMachPortCreate1(
    CFAllocatorRef allocator,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreate1(
      allocator,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreate');
  late final _CFMachPortCreate1 = _CFMachPortCreate1Ptr.asFunction<
      CFMachPortRef Function(CFAllocatorRef, CFMachPortCallBack,
          ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  CFMachPortRef CFMachPortCreateWithPort1(
    CFAllocatorRef allocator,
    int portNum,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreateWithPort1(
      allocator,
      portNum,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreateWithPort1Ptr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              mach_port_t,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreateWithPort');
  late final _CFMachPortCreateWithPort1 =
      _CFMachPortCreateWithPort1Ptr.asFunction<
          CFMachPortRef Function(CFAllocatorRef, int, CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  int CFMachPortGetPort1(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetPort1(
      port,
    );
  }

  late final _CFMachPortGetPort1Ptr =
      _lookup<ffi.NativeFunction<mach_port_t Function(CFMachPortRef)>>(
          'CFMachPortGetPort');
  late final _CFMachPortGetPort1 =
      _CFMachPortGetPort1Ptr.asFunction<int Function(CFMachPortRef)>();

  void CFMachPortGetContext1(
    CFMachPortRef port,
    ffi.Pointer<CFMachPortContext> context,
  ) {
    return _CFMachPortGetContext1(
      port,
      context,
    );
  }

  late final _CFMachPortGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMachPortRef,
              ffi.Pointer<CFMachPortContext>)>>('CFMachPortGetContext');
  late final _CFMachPortGetContext1 = _CFMachPortGetContext1Ptr.asFunction<
      void Function(CFMachPortRef, ffi.Pointer<CFMachPortContext>)>();

  void CFMachPortInvalidate1(
    CFMachPortRef port,
  ) {
    return _CFMachPortInvalidate1(
      port,
    );
  }

  late final _CFMachPortInvalidate1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMachPortRef)>>(
          'CFMachPortInvalidate');
  late final _CFMachPortInvalidate1 =
      _CFMachPortInvalidate1Ptr.asFunction<void Function(CFMachPortRef)>();

  int CFMachPortIsValid1(
    CFMachPortRef port,
  ) {
    return _CFMachPortIsValid1(
      port,
    );
  }

  late final _CFMachPortIsValid1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMachPortRef)>>(
          'CFMachPortIsValid');
  late final _CFMachPortIsValid1 =
      _CFMachPortIsValid1Ptr.asFunction<int Function(CFMachPortRef)>();

  CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack1(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetInvalidationCallBack1(
      port,
    );
  }

  late final _CFMachPortGetInvalidationCallBack1Ptr = _lookup<
      ffi.NativeFunction<
          CFMachPortInvalidationCallBack Function(
              CFMachPortRef)>>('CFMachPortGetInvalidationCallBack');
  late final _CFMachPortGetInvalidationCallBack1 =
      _CFMachPortGetInvalidationCallBack1Ptr.asFunction<
          CFMachPortInvalidationCallBack Function(CFMachPortRef)>();

  void CFMachPortSetInvalidationCallBack1(
    CFMachPortRef port,
    CFMachPortInvalidationCallBack callout,
  ) {
    return _CFMachPortSetInvalidationCallBack1(
      port,
      callout,
    );
  }

  late final _CFMachPortSetInvalidationCallBack1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMachPortRef, CFMachPortInvalidationCallBack)>>(
      'CFMachPortSetInvalidationCallBack');
  late final _CFMachPortSetInvalidationCallBack1 =
      _CFMachPortSetInvalidationCallBack1Ptr.asFunction<
          void Function(CFMachPortRef, CFMachPortInvalidationCallBack)>();

  CFRunLoopSourceRef CFMachPortCreateRunLoopSource1(
    CFAllocatorRef allocator,
    CFMachPortRef port,
    int order,
  ) {
    return _CFMachPortCreateRunLoopSource1(
      allocator,
      port,
      order,
    );
  }

  late final _CFMachPortCreateRunLoopSource1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef,
              CFIndex)>>('CFMachPortCreateRunLoopSource');
  late final _CFMachPortCreateRunLoopSource1 =
      _CFMachPortCreateRunLoopSource1Ptr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef, int)>();

  int CFAttributedStringGetTypeID1() {
    return _CFAttributedStringGetTypeID1();
  }

  late final _CFAttributedStringGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFAttributedStringGetTypeID');
  late final _CFAttributedStringGetTypeID1 =
      _CFAttributedStringGetTypeID1Ptr.asFunction<int Function()>();

  CFAttributedStringRef CFAttributedStringCreate1(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFDictionaryRef attributes,
  ) {
    return _CFAttributedStringCreate1(
      alloc,
      str,
      attributes,
    );
  }

  late final _CFAttributedStringCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFAttributedStringCreate');
  late final _CFAttributedStringCreate1 =
      _CFAttributedStringCreate1Ptr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFAttributedStringRef CFAttributedStringCreateWithSubstring1(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
    CFRange range,
  ) {
    return _CFAttributedStringCreateWithSubstring1(
      alloc,
      aStr,
      range,
    );
  }

  late final _CFAttributedStringCreateWithSubstring1Ptr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFAttributedStringRef,
              CFRange)>>('CFAttributedStringCreateWithSubstring');
  late final _CFAttributedStringCreateWithSubstring1 =
      _CFAttributedStringCreateWithSubstring1Ptr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef, CFRange)>();

  CFAttributedStringRef CFAttributedStringCreateCopy1(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateCopy1(
      alloc,
      aStr,
    );
  }

  late final _CFAttributedStringCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef,
              CFAttributedStringRef)>>('CFAttributedStringCreateCopy');
  late final _CFAttributedStringCreateCopy1 =
      _CFAttributedStringCreateCopy1Ptr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef)>();

  CFStringRef CFAttributedStringGetString1(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetString1(
      aStr,
    );
  }

  late final _CFAttributedStringGetString1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetString');
  late final _CFAttributedStringGetString1 = _CFAttributedStringGetString1Ptr
      .asFunction<CFStringRef Function(CFAttributedStringRef)>();

  int CFAttributedStringGetLength1(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetLength1(
      aStr,
    );
  }

  late final _CFAttributedStringGetLength1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetLength');
  late final _CFAttributedStringGetLength1 = _CFAttributedStringGetLength1Ptr
      .asFunction<int Function(CFAttributedStringRef)>();

  CFDictionaryRef CFAttributedStringGetAttributes1(
    CFAttributedStringRef aStr,
    int loc,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttributes1(
      aStr,
      loc,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributes1Ptr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttributes');
  late final _CFAttributedStringGetAttributes1 =
      _CFAttributedStringGetAttributes1Ptr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttribute1(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttribute1(
      aStr,
      loc,
      attrName,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttribute1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAttributedStringRef, CFIndex, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttribute');
  late final _CFAttributedStringGetAttribute1 =
      _CFAttributedStringGetAttribute1Ptr.asFunction<
          CFTypeRef Function(
              CFAttributedStringRef, int, CFStringRef, ffi.Pointer<CFRange>)>();

  CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange1(
    CFAttributedStringRef aStr,
    int loc,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributesAndLongestEffectiveRange1(
      aStr,
      loc,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange1Ptr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
                      CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributesAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange1 =
      _CFAttributedStringGetAttributesAndLongestEffectiveRange1Ptr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, CFRange, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange1(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributeAndLongestEffectiveRange1(
      aStr,
      loc,
      attrName,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange1Ptr =
      _lookup<
              ffi.NativeFunction<
                  CFTypeRef Function(CFAttributedStringRef, CFIndex,
                      CFStringRef, CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributeAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange1 =
      _CFAttributedStringGetAttributeAndLongestEffectiveRange1Ptr.asFunction<
          CFTypeRef Function(CFAttributedStringRef, int, CFStringRef, CFRange,
              ffi.Pointer<CFRange>)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy1(
    CFAllocatorRef alloc,
    int maxLength,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateMutableCopy1(
      alloc,
      maxLength,
      aStr,
    );
  }

  late final _CFAttributedStringCreateMutableCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, CFIndex,
              CFAttributedStringRef)>>('CFAttributedStringCreateMutableCopy');
  late final _CFAttributedStringCreateMutableCopy1 =
      _CFAttributedStringCreateMutableCopy1Ptr.asFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, int, CFAttributedStringRef)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutable1(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFAttributedStringCreateMutable1(
      alloc,
      maxLength,
    );
  }

  late final _CFAttributedStringCreateMutable1Ptr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFAttributedStringCreateMutable');
  late final _CFAttributedStringCreateMutable1 =
      _CFAttributedStringCreateMutable1Ptr.asFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, int)>();

  void CFAttributedStringReplaceString1(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFAttributedStringReplaceString1(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringReplaceString');
  late final _CFAttributedStringReplaceString1 =
      _CFAttributedStringReplaceString1Ptr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  CFMutableStringRef CFAttributedStringGetMutableString1(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetMutableString1(
      aStr,
    );
  }

  late final _CFAttributedStringGetMutableString1Ptr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringGetMutableString');
  late final _CFAttributedStringGetMutableString1 =
      _CFAttributedStringGetMutableString1Ptr.asFunction<
          CFMutableStringRef Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringSetAttributes1(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFDictionaryRef replacement,
    int clearOtherAttributes,
  ) {
    return _CFAttributedStringSetAttributes1(
      aStr,
      range,
      replacement,
      clearOtherAttributes,
    );
  }

  late final _CFAttributedStringSetAttributes1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFDictionaryRef, Boolean)>>('CFAttributedStringSetAttributes');
  late final _CFAttributedStringSetAttributes1 =
      _CFAttributedStringSetAttributes1Ptr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFDictionaryRef, int)>();

  void CFAttributedStringSetAttribute1(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
    CFTypeRef value,
  ) {
    return _CFAttributedStringSetAttribute1(
      aStr,
      range,
      attrName,
      value,
    );
  }

  late final _CFAttributedStringSetAttribute1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange, CFStringRef,
              CFTypeRef)>>('CFAttributedStringSetAttribute');
  late final _CFAttributedStringSetAttribute1 =
      _CFAttributedStringSetAttribute1Ptr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFStringRef, CFTypeRef)>();

  void CFAttributedStringRemoveAttribute1(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
  ) {
    return _CFAttributedStringRemoveAttribute1(
      aStr,
      range,
      attrName,
    );
  }

  late final _CFAttributedStringRemoveAttribute1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringRemoveAttribute');
  late final _CFAttributedStringRemoveAttribute1 =
      _CFAttributedStringRemoveAttribute1Ptr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  void CFAttributedStringReplaceAttributedString1(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFAttributedStringRef replacement,
  ) {
    return _CFAttributedStringReplaceAttributedString1(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceAttributedString1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFMutableAttributedStringRef, CFRange,
                  CFAttributedStringRef)>>(
      'CFAttributedStringReplaceAttributedString');
  late final _CFAttributedStringReplaceAttributedString1 =
      _CFAttributedStringReplaceAttributedString1Ptr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFAttributedStringRef)>();

  void CFAttributedStringBeginEditing1(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringBeginEditing1(
      aStr,
    );
  }

  late final _CFAttributedStringBeginEditing1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringBeginEditing');
  late final _CFAttributedStringBeginEditing1 =
      _CFAttributedStringBeginEditing1Ptr.asFunction<
          void Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringEndEditing1(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringEndEditing1(
      aStr,
    );
  }

  late final _CFAttributedStringEndEditing1Ptr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringEndEditing');
  late final _CFAttributedStringEndEditing1 = _CFAttributedStringEndEditing1Ptr
      .asFunction<void Function(CFMutableAttributedStringRef)>();

  int CFURLEnumeratorGetTypeID1() {
    return _CFURLEnumeratorGetTypeID1();
  }

  late final _CFURLEnumeratorGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFURLEnumeratorGetTypeID');
  late final _CFURLEnumeratorGetTypeID1 =
      _CFURLEnumeratorGetTypeID1Ptr.asFunction<int Function()>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL1(
    CFAllocatorRef alloc,
    CFURLRef directoryURL,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForDirectoryURL1(
      alloc,
      directoryURL,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForDirectoryURL1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFURLRef, ffi.Int32,
              CFArrayRef)>>('CFURLEnumeratorCreateForDirectoryURL');
  late final _CFURLEnumeratorCreateForDirectoryURL1 =
      _CFURLEnumeratorCreateForDirectoryURL1Ptr.asFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef, CFURLRef, int, CFArrayRef)>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes1(
    CFAllocatorRef alloc,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForMountedVolumes1(
      alloc,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForMountedVolumes1Ptr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, ffi.Int32,
              CFArrayRef)>>('CFURLEnumeratorCreateForMountedVolumes');
  late final _CFURLEnumeratorCreateForMountedVolumes1 =
      _CFURLEnumeratorCreateForMountedVolumes1Ptr.asFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFURLEnumeratorGetNextURL1(
    CFURLEnumeratorRef enumerator,
    ffi.Pointer<CFURLRef> url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLEnumeratorGetNextURL1(
      enumerator,
      url,
      error,
    );
  }

  late final _CFURLEnumeratorGetNextURL1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>>('CFURLEnumeratorGetNextURL');
  late final _CFURLEnumeratorGetNextURL1 =
      _CFURLEnumeratorGetNextURL1Ptr.asFunction<
          int Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>();

  void CFURLEnumeratorSkipDescendents1(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorSkipDescendents1(
      enumerator,
    );
  }

  late final _CFURLEnumeratorSkipDescendents1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorSkipDescendents');
  late final _CFURLEnumeratorSkipDescendents1 =
      _CFURLEnumeratorSkipDescendents1Ptr.asFunction<
          void Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetDescendentLevel1(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetDescendentLevel1(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetDescendentLevel1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetDescendentLevel');
  late final _CFURLEnumeratorGetDescendentLevel1 =
      _CFURLEnumeratorGetDescendentLevel1Ptr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetSourceDidChange1(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetSourceDidChange1(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetSourceDidChange1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetSourceDidChange');
  late final _CFURLEnumeratorGetSourceDidChange1 =
      _CFURLEnumeratorGetSourceDidChange1Ptr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFFileSecurityGetTypeID1() {
    return _CFFileSecurityGetTypeID1();
  }

  late final _CFFileSecurityGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileSecurityGetTypeID');
  late final _CFFileSecurityGetTypeID1 =
      _CFFileSecurityGetTypeID1Ptr.asFunction<int Function()>();

  CFFileSecurityRef CFFileSecurityCreate1(
    CFAllocatorRef allocator,
  ) {
    return _CFFileSecurityCreate1(
      allocator,
    );
  }

  late final _CFFileSecurityCreate1Ptr =
      _lookup<ffi.NativeFunction<CFFileSecurityRef Function(CFAllocatorRef)>>(
          'CFFileSecurityCreate');
  late final _CFFileSecurityCreate1 = _CFFileSecurityCreate1Ptr.asFunction<
      CFFileSecurityRef Function(CFAllocatorRef)>();

  CFFileSecurityRef CFFileSecurityCreateCopy1(
    CFAllocatorRef allocator,
    CFFileSecurityRef fileSec,
  ) {
    return _CFFileSecurityCreateCopy1(
      allocator,
      fileSec,
    );
  }

  late final _CFFileSecurityCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFFileSecurityRef Function(
              CFAllocatorRef, CFFileSecurityRef)>>('CFFileSecurityCreateCopy');
  late final _CFFileSecurityCreateCopy1 =
      _CFFileSecurityCreateCopy1Ptr.asFunction<
          CFFileSecurityRef Function(CFAllocatorRef, CFFileSecurityRef)>();

  int CFFileSecurityCopyOwnerUUID1(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> ownerUUID,
  ) {
    return _CFFileSecurityCopyOwnerUUID1(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecurityCopyOwnerUUID1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyOwnerUUID');
  late final _CFFileSecurityCopyOwnerUUID1 = _CFFileSecurityCopyOwnerUUID1Ptr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetOwnerUUID1(
    CFFileSecurityRef fileSec,
    CFUUIDRef ownerUUID,
  ) {
    return _CFFileSecuritySetOwnerUUID1(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecuritySetOwnerUUID1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetOwnerUUID');
  late final _CFFileSecuritySetOwnerUUID1 = _CFFileSecuritySetOwnerUUID1Ptr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyGroupUUID1(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> groupUUID,
  ) {
    return _CFFileSecurityCopyGroupUUID1(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecurityCopyGroupUUID1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyGroupUUID');
  late final _CFFileSecurityCopyGroupUUID1 = _CFFileSecurityCopyGroupUUID1Ptr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetGroupUUID1(
    CFFileSecurityRef fileSec,
    CFUUIDRef groupUUID,
  ) {
    return _CFFileSecuritySetGroupUUID1(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecuritySetGroupUUID1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetGroupUUID');
  late final _CFFileSecuritySetGroupUUID1 = _CFFileSecuritySetGroupUUID1Ptr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyAccessControlList1(
    CFFileSecurityRef fileSec,
    ffi.Pointer<acl_t> accessControlList,
  ) {
    return _CFFileSecurityCopyAccessControlList1(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecurityCopyAccessControlList1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<acl_t>)>>('CFFileSecurityCopyAccessControlList');
  late final _CFFileSecurityCopyAccessControlList1 =
      _CFFileSecurityCopyAccessControlList1Ptr.asFunction<
          int Function(CFFileSecurityRef, ffi.Pointer<acl_t>)>();

  int CFFileSecuritySetAccessControlList1(
    CFFileSecurityRef fileSec,
    acl_t accessControlList,
  ) {
    return _CFFileSecuritySetAccessControlList1(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecuritySetAccessControlList1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, acl_t)>>(
          'CFFileSecuritySetAccessControlList');
  late final _CFFileSecuritySetAccessControlList1 =
      _CFFileSecuritySetAccessControlList1Ptr.asFunction<
          int Function(CFFileSecurityRef, acl_t)>();

  int CFFileSecurityGetOwner1(
    CFFileSecurityRef fileSec,
    ffi.Pointer<uid_t1> owner,
  ) {
    return _CFFileSecurityGetOwner1(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecurityGetOwner1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<uid_t1>)>>('CFFileSecurityGetOwner');
  late final _CFFileSecurityGetOwner1 = _CFFileSecurityGetOwner1Ptr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<uid_t1>)>();

  int CFFileSecuritySetOwner1(
    CFFileSecurityRef fileSec,
    int owner,
  ) {
    return _CFFileSecuritySetOwner1(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecuritySetOwner1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, uid_t1)>>(
          'CFFileSecuritySetOwner');
  late final _CFFileSecuritySetOwner1 = _CFFileSecuritySetOwner1Ptr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetGroup1(
    CFFileSecurityRef fileSec,
    ffi.Pointer<gid_t> group,
  ) {
    return _CFFileSecurityGetGroup1(
      fileSec,
      group,
    );
  }

  late final _CFFileSecurityGetGroup1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<gid_t>)>>('CFFileSecurityGetGroup');
  late final _CFFileSecurityGetGroup1 = _CFFileSecurityGetGroup1Ptr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<gid_t>)>();

  int CFFileSecuritySetGroup1(
    CFFileSecurityRef fileSec,
    int group,
  ) {
    return _CFFileSecuritySetGroup1(
      fileSec,
      group,
    );
  }

  late final _CFFileSecuritySetGroup1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, gid_t)>>(
          'CFFileSecuritySetGroup');
  late final _CFFileSecuritySetGroup1 = _CFFileSecuritySetGroup1Ptr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetMode1(
    CFFileSecurityRef fileSec,
    ffi.Pointer<mode_t1> mode,
  ) {
    return _CFFileSecurityGetMode1(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecurityGetMode1Ptr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<mode_t1>)>>('CFFileSecurityGetMode');
  late final _CFFileSecurityGetMode1 = _CFFileSecurityGetMode1Ptr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<mode_t1>)>();

  int CFFileSecuritySetMode1(
    CFFileSecurityRef fileSec,
    int mode,
  ) {
    return _CFFileSecuritySetMode1(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecuritySetMode1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, mode_t1)>>(
          'CFFileSecuritySetMode');
  late final _CFFileSecuritySetMode1 = _CFFileSecuritySetMode1Ptr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityClearProperties1(
    CFFileSecurityRef fileSec,
    int clearPropertyMask,
  ) {
    return _CFFileSecurityClearProperties1(
      fileSec,
      clearPropertyMask,
    );
  }

  late final _CFFileSecurityClearProperties1Ptr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, ffi.Int32)>>(
      'CFFileSecurityClearProperties');
  late final _CFFileSecurityClearProperties1 =
      _CFFileSecurityClearProperties1Ptr.asFunction<
          int Function(CFFileSecurityRef, int)>();

  CFStringRef CFStringTokenizerCopyBestStringLanguage1(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage1(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguage1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage1 =
      _CFStringTokenizerCopyBestStringLanguage1Ptr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID1() {
    return _CFStringTokenizerGetTypeID1();
  }

  late final _CFStringTokenizerGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID1 =
      _CFStringTokenizerGetTypeID1Ptr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate1(
    CFAllocatorRef alloc,
    CFStringRef string,
    CFRange range,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFStringTokenizerCreate1(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(CFAllocatorRef, CFStringRef, CFRange,
              CFOptionFlags, CFLocaleRef)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate1 =
      _CFStringTokenizerCreate1Ptr.asFunction<
          CFStringTokenizerRef Function(
              CFAllocatorRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  void CFStringTokenizerSetString1(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString1(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetString1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString1 = _CFStringTokenizerSetString1Ptr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  int CFStringTokenizerGoToTokenAtIndex1(
    CFStringTokenizerRef tokenizer,
    int index,
  ) {
    return _CFStringTokenizerGoToTokenAtIndex1(
      tokenizer,
      index,
    );
  }

  late final _CFStringTokenizerGoToTokenAtIndex1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(CFStringTokenizerRef,
              CFIndex)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex1 =
      _CFStringTokenizerGoToTokenAtIndex1Ptr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerAdvanceToNextToken1(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerAdvanceToNextToken1(
      tokenizer,
    );
  }

  late final _CFStringTokenizerAdvanceToNextToken1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken1 =
      _CFStringTokenizerAdvanceToNextToken1Ptr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange1(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange1(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRange1Ptr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange1 =
      _CFStringTokenizerGetCurrentTokenRange1Ptr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute1(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute1(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttribute1Ptr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              CFOptionFlags)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute1 =
      _CFStringTokenizerCopyCurrentTokenAttribute1Ptr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens1(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    CFMutableArrayRef derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens1(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokens1Ptr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, CFIndex,
              CFMutableArrayRef)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens1 =
      _CFStringTokenizerGetCurrentSubTokens1Ptr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              CFMutableArrayRef)>();

  int CFFileDescriptorGetTypeID1() {
    return _CFFileDescriptorGetTypeID1();
  }

  late final _CFFileDescriptorGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileDescriptorGetTypeID');
  late final _CFFileDescriptorGetTypeID1 =
      _CFFileDescriptorGetTypeID1Ptr.asFunction<int Function()>();

  CFFileDescriptorRef CFFileDescriptorCreate1(
    CFAllocatorRef allocator,
    int fd,
    int closeOnInvalidate,
    CFFileDescriptorCallBack callout,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorCreate1(
      allocator,
      fd,
      closeOnInvalidate,
      callout,
      context,
    );
  }

  late final _CFFileDescriptorCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorRef Function(
              CFAllocatorRef,
              CFFileDescriptorNativeDescriptor,
              Boolean,
              CFFileDescriptorCallBack,
              ffi.Pointer<CFFileDescriptorContext>)>>('CFFileDescriptorCreate');
  late final _CFFileDescriptorCreate1 = _CFFileDescriptorCreate1Ptr.asFunction<
      CFFileDescriptorRef Function(CFAllocatorRef, int, int,
          CFFileDescriptorCallBack, ffi.Pointer<CFFileDescriptorContext>)>();

  int CFFileDescriptorGetNativeDescriptor1(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorGetNativeDescriptor1(
      f,
    );
  }

  late final _CFFileDescriptorGetNativeDescriptor1Ptr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorNativeDescriptor Function(
              CFFileDescriptorRef)>>('CFFileDescriptorGetNativeDescriptor');
  late final _CFFileDescriptorGetNativeDescriptor1 =
      _CFFileDescriptorGetNativeDescriptor1Ptr.asFunction<
          int Function(CFFileDescriptorRef)>();

  void CFFileDescriptorGetContext1(
    CFFileDescriptorRef f,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorGetContext1(
      f,
      context,
    );
  }

  late final _CFFileDescriptorGetContext1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>>(
      'CFFileDescriptorGetContext');
  late final _CFFileDescriptorGetContext1 =
      _CFFileDescriptorGetContext1Ptr.asFunction<
          void Function(
              CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>();

  void CFFileDescriptorEnableCallBacks1(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorEnableCallBacks1(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorEnableCallBacks1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorEnableCallBacks');
  late final _CFFileDescriptorEnableCallBacks1 =
      _CFFileDescriptorEnableCallBacks1Ptr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorDisableCallBacks1(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorDisableCallBacks1(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorDisableCallBacks1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorDisableCallBacks');
  late final _CFFileDescriptorDisableCallBacks1 =
      _CFFileDescriptorDisableCallBacks1Ptr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorInvalidate1(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorInvalidate1(
      f,
    );
  }

  late final _CFFileDescriptorInvalidate1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorInvalidate');
  late final _CFFileDescriptorInvalidate1 = _CFFileDescriptorInvalidate1Ptr
      .asFunction<void Function(CFFileDescriptorRef)>();

  int CFFileDescriptorIsValid1(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorIsValid1(
      f,
    );
  }

  late final _CFFileDescriptorIsValid1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorIsValid');
  late final _CFFileDescriptorIsValid1 = _CFFileDescriptorIsValid1Ptr
      .asFunction<int Function(CFFileDescriptorRef)>();

  CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource1(
    CFAllocatorRef allocator,
    CFFileDescriptorRef f,
    int order,
  ) {
    return _CFFileDescriptorCreateRunLoopSource1(
      allocator,
      f,
      order,
    );
  }

  late final _CFFileDescriptorCreateRunLoopSource1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFFileDescriptorRef,
              CFIndex)>>('CFFileDescriptorCreateRunLoopSource');
  late final _CFFileDescriptorCreateRunLoopSource1 =
      _CFFileDescriptorCreateRunLoopSource1Ptr.asFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef, CFFileDescriptorRef, int)>();

  int CFUserNotificationGetTypeID1() {
    return _CFUserNotificationGetTypeID1();
  }

  late final _CFUserNotificationGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFUserNotificationGetTypeID');
  late final _CFUserNotificationGetTypeID1 =
      _CFUserNotificationGetTypeID1Ptr.asFunction<int Function()>();

  CFUserNotificationRef CFUserNotificationCreate1(
    CFAllocatorRef allocator,
    double timeout,
    int flags,
    ffi.Pointer<SInt32> error,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationCreate1(
      allocator,
      timeout,
      flags,
      error,
      dictionary,
    );
  }

  late final _CFUserNotificationCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFUserNotificationRef Function(
              CFAllocatorRef,
              CFTimeInterval,
              CFOptionFlags,
              ffi.Pointer<SInt32>,
              CFDictionaryRef)>>('CFUserNotificationCreate');
  late final _CFUserNotificationCreate1 =
      _CFUserNotificationCreate1Ptr.asFunction<
          CFUserNotificationRef Function(CFAllocatorRef, double, int,
              ffi.Pointer<SInt32>, CFDictionaryRef)>();

  int CFUserNotificationReceiveResponse1(
    CFUserNotificationRef userNotification,
    double timeout,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationReceiveResponse1(
      userNotification,
      timeout,
      responseFlags,
    );
  }

  late final _CFUserNotificationReceiveResponse1Ptr = _lookup<
          ffi.NativeFunction<
              SInt32 Function(CFUserNotificationRef, CFTimeInterval,
                  ffi.Pointer<CFOptionFlags>)>>(
      'CFUserNotificationReceiveResponse');
  late final _CFUserNotificationReceiveResponse1 =
      _CFUserNotificationReceiveResponse1Ptr.asFunction<
          int Function(
              CFUserNotificationRef, double, ffi.Pointer<CFOptionFlags>)>();

  CFStringRef CFUserNotificationGetResponseValue1(
    CFUserNotificationRef userNotification,
    CFStringRef key,
    int idx,
  ) {
    return _CFUserNotificationGetResponseValue1(
      userNotification,
      key,
      idx,
    );
  }

  late final _CFUserNotificationGetResponseValue1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef,
              CFIndex)>>('CFUserNotificationGetResponseValue');
  late final _CFUserNotificationGetResponseValue1 =
      _CFUserNotificationGetResponseValue1Ptr.asFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef, int)>();

  CFDictionaryRef CFUserNotificationGetResponseDictionary1(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationGetResponseDictionary1(
      userNotification,
    );
  }

  late final _CFUserNotificationGetResponseDictionary1Ptr = _lookup<
          ffi.NativeFunction<CFDictionaryRef Function(CFUserNotificationRef)>>(
      'CFUserNotificationGetResponseDictionary');
  late final _CFUserNotificationGetResponseDictionary1 =
      _CFUserNotificationGetResponseDictionary1Ptr.asFunction<
          CFDictionaryRef Function(CFUserNotificationRef)>();

  int CFUserNotificationUpdate1(
    CFUserNotificationRef userNotification,
    double timeout,
    int flags,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationUpdate1(
      userNotification,
      timeout,
      flags,
      dictionary,
    );
  }

  late final _CFUserNotificationUpdate1Ptr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFUserNotificationRef, CFTimeInterval, CFOptionFlags,
              CFDictionaryRef)>>('CFUserNotificationUpdate');
  late final _CFUserNotificationUpdate1 =
      _CFUserNotificationUpdate1Ptr.asFunction<
          int Function(CFUserNotificationRef, double, int, CFDictionaryRef)>();

  int CFUserNotificationCancel1(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationCancel1(
      userNotification,
    );
  }

  late final _CFUserNotificationCancel1Ptr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFUserNotificationRef)>>(
          'CFUserNotificationCancel');
  late final _CFUserNotificationCancel1 = _CFUserNotificationCancel1Ptr
      .asFunction<int Function(CFUserNotificationRef)>();

  CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource1(
    CFAllocatorRef allocator,
    CFUserNotificationRef userNotification,
    CFUserNotificationCallBack callout,
    int order,
  ) {
    return _CFUserNotificationCreateRunLoopSource1(
      allocator,
      userNotification,
      callout,
      order,
    );
  }

  late final _CFUserNotificationCreateRunLoopSource1Ptr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef,
              CFUserNotificationRef,
              CFUserNotificationCallBack,
              CFIndex)>>('CFUserNotificationCreateRunLoopSource');
  late final _CFUserNotificationCreateRunLoopSource1 =
      _CFUserNotificationCreateRunLoopSource1Ptr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFUserNotificationRef,
              CFUserNotificationCallBack, int)>();

  int CFUserNotificationDisplayNotice1(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
  ) {
    return _CFUserNotificationDisplayNotice1(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
    );
  }

  late final _CFUserNotificationDisplayNotice1Ptr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef)>>('CFUserNotificationDisplayNotice');
  late final _CFUserNotificationDisplayNotice1 =
      _CFUserNotificationDisplayNotice1Ptr.asFunction<
          int Function(double, int, CFURLRef, CFURLRef, CFURLRef, CFStringRef,
              CFStringRef, CFStringRef)>();

  int CFUserNotificationDisplayAlert1(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
    CFStringRef alternateButtonTitle,
    CFStringRef otherButtonTitle,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationDisplayAlert1(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
      alternateButtonTitle,
      otherButtonTitle,
      responseFlags,
    );
  }

  late final _CFUserNotificationDisplayAlert1Ptr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>>('CFUserNotificationDisplayAlert');
  late final _CFUserNotificationDisplayAlert1 =
      _CFUserNotificationDisplayAlert1Ptr.asFunction<
          int Function(
              double,
              int,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>();

  int CFXMLNodeGetTypeID1() {
    return _CFXMLNodeGetTypeID1();
  }

  late final _CFXMLNodeGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLNodeGetTypeID');
  late final _CFXMLNodeGetTypeID1 =
      _CFXMLNodeGetTypeID1Ptr.asFunction<int Function()>();

  CFXMLNodeRef CFXMLNodeCreate1(
    CFAllocatorRef alloc,
    int xmlType,
    CFStringRef dataString,
    ffi.Pointer<ffi.Void> additionalInfoPtr,
    int version,
  ) {
    return _CFXMLNodeCreate1(
      alloc,
      xmlType,
      dataString,
      additionalInfoPtr,
      version,
    );
  }

  late final _CFXMLNodeCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(CFAllocatorRef, ffi.Int32, CFStringRef,
              ffi.Pointer<ffi.Void>, CFIndex)>>('CFXMLNodeCreate');
  late final _CFXMLNodeCreate1 = _CFXMLNodeCreate1Ptr.asFunction<
      CFXMLNodeRef Function(
          CFAllocatorRef, int, CFStringRef, ffi.Pointer<ffi.Void>, int)>();

  CFXMLNodeRef CFXMLNodeCreateCopy1(
    CFAllocatorRef alloc,
    CFXMLNodeRef origNode,
  ) {
    return _CFXMLNodeCreateCopy1(
      alloc,
      origNode,
    );
  }

  late final _CFXMLNodeCreateCopy1Ptr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLNodeCreateCopy');
  late final _CFXMLNodeCreateCopy1 = _CFXMLNodeCreateCopy1Ptr.asFunction<
      CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  int CFXMLNodeGetTypeCode1(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetTypeCode1(
      node,
    );
  }

  late final _CFXMLNodeGetTypeCode1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetTypeCode');
  late final _CFXMLNodeGetTypeCode1 =
      _CFXMLNodeGetTypeCode1Ptr.asFunction<int Function(CFXMLNodeRef)>();

  CFStringRef CFXMLNodeGetString1(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetString1(
      node,
    );
  }

  late final _CFXMLNodeGetString1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetString');
  late final _CFXMLNodeGetString1 =
      _CFXMLNodeGetString1Ptr.asFunction<CFStringRef Function(CFXMLNodeRef)>();

  ffi.Pointer<ffi.Void> CFXMLNodeGetInfoPtr1(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetInfoPtr1(
      node,
    );
  }

  late final _CFXMLNodeGetInfoPtr1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetInfoPtr');
  late final _CFXMLNodeGetInfoPtr1 = _CFXMLNodeGetInfoPtr1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>();

  int CFXMLNodeGetVersion1(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetVersion1(
      node,
    );
  }

  late final _CFXMLNodeGetVersion1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetVersion');
  late final _CFXMLNodeGetVersion1 =
      _CFXMLNodeGetVersion1Ptr.asFunction<int Function(CFXMLNodeRef)>();

  CFXMLTreeRef CFXMLTreeCreateWithNode1(
    CFAllocatorRef allocator,
    CFXMLNodeRef node,
  ) {
    return _CFXMLTreeCreateWithNode1(
      allocator,
      node,
    );
  }

  late final _CFXMLTreeCreateWithNode1Ptr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLTreeCreateWithNode');
  late final _CFXMLTreeCreateWithNode1 = _CFXMLTreeCreateWithNode1Ptr
      .asFunction<CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeRef CFXMLTreeGetNode1(
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeGetNode1(
      xmlTree,
    );
  }

  late final _CFXMLTreeGetNode1Ptr =
      _lookup<ffi.NativeFunction<CFXMLNodeRef Function(CFXMLTreeRef)>>(
          'CFXMLTreeGetNode');
  late final _CFXMLTreeGetNode1 =
      _CFXMLTreeGetNode1Ptr.asFunction<CFXMLNodeRef Function(CFXMLTreeRef)>();

  int CFXMLParserGetTypeID1() {
    return _CFXMLParserGetTypeID1();
  }

  late final _CFXMLParserGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLParserGetTypeID');
  late final _CFXMLParserGetTypeID1 =
      _CFXMLParserGetTypeID1Ptr.asFunction<int Function()>();

  CFXMLParserRef CFXMLParserCreate1(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreate1(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreate1Ptr = _lookup<
      ffi.NativeFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLRef,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserCreate');
  late final _CFXMLParserCreate1 = _CFXMLParserCreate1Ptr.asFunction<
      CFXMLParserRef Function(
          CFAllocatorRef,
          CFDataRef,
          CFURLRef,
          int,
          int,
          ffi.Pointer<CFXMLParserCallBacks>,
          ffi.Pointer<CFXMLParserContext>)>();

  CFXMLParserRef CFXMLParserCreateWithDataFromURL1(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreateWithDataFromURL1(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreateWithDataFromURL1Ptr = _lookup<
          ffi.NativeFunction<
              CFXMLParserRef Function(
                  CFAllocatorRef,
                  CFURLRef,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<CFXMLParserCallBacks>,
                  ffi.Pointer<CFXMLParserContext>)>>(
      'CFXMLParserCreateWithDataFromURL');
  late final _CFXMLParserCreateWithDataFromURL1 =
      _CFXMLParserCreateWithDataFromURL1Ptr.asFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFURLRef,
              int,
              int,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetContext1(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserGetContext1(
      parser,
      context,
    );
  }

  late final _CFXMLParserGetContext1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserGetContext');
  late final _CFXMLParserGetContext1 = _CFXMLParserGetContext1Ptr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetCallBacks1(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
  ) {
    return _CFXMLParserGetCallBacks1(
      parser,
      callBacks,
    );
  }

  late final _CFXMLParserGetCallBacks1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserCallBacks>)>>('CFXMLParserGetCallBacks');
  late final _CFXMLParserGetCallBacks1 =
      _CFXMLParserGetCallBacks1Ptr.asFunction<
          void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserCallBacks>)>();

  CFURLRef CFXMLParserGetSourceURL1(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetSourceURL1(
      parser,
    );
  }

  late final _CFXMLParserGetSourceURL1Ptr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFXMLParserRef)>>(
          'CFXMLParserGetSourceURL');
  late final _CFXMLParserGetSourceURL1 = _CFXMLParserGetSourceURL1Ptr
      .asFunction<CFURLRef Function(CFXMLParserRef)>();

  int CFXMLParserGetLocation1(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLocation1(
      parser,
    );
  }

  late final _CFXMLParserGetLocation1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLocation');
  late final _CFXMLParserGetLocation1 =
      _CFXMLParserGetLocation1Ptr.asFunction<int Function(CFXMLParserRef)>();

  int CFXMLParserGetLineNumber1(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLineNumber1(
      parser,
    );
  }

  late final _CFXMLParserGetLineNumber1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLineNumber');
  late final _CFXMLParserGetLineNumber1 =
      _CFXMLParserGetLineNumber1Ptr.asFunction<int Function(CFXMLParserRef)>();

  ffi.Pointer<ffi.Void> CFXMLParserGetDocument1(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetDocument1(
      parser,
    );
  }

  late final _CFXMLParserGetDocument1Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>>(
      'CFXMLParserGetDocument');
  late final _CFXMLParserGetDocument1 = _CFXMLParserGetDocument1Ptr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>();

  int CFXMLParserGetStatusCode1(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetStatusCode1(
      parser,
    );
  }

  late final _CFXMLParserGetStatusCode1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(CFXMLParserRef)>>(
          'CFXMLParserGetStatusCode');
  late final _CFXMLParserGetStatusCode1 =
      _CFXMLParserGetStatusCode1Ptr.asFunction<int Function(CFXMLParserRef)>();

  CFStringRef CFXMLParserCopyErrorDescription1(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserCopyErrorDescription1(
      parser,
    );
  }

  late final _CFXMLParserCopyErrorDescription1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLParserRef)>>(
          'CFXMLParserCopyErrorDescription');
  late final _CFXMLParserCopyErrorDescription1 =
      _CFXMLParserCopyErrorDescription1Ptr.asFunction<
          CFStringRef Function(CFXMLParserRef)>();

  void CFXMLParserAbort1(
    CFXMLParserRef parser,
    int errorCode,
    CFStringRef errorDescription,
  ) {
    return _CFXMLParserAbort1(
      parser,
      errorCode,
      errorDescription,
    );
  }

  late final _CFXMLParserAbort1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFXMLParserRef, ffi.Int32, CFStringRef)>>('CFXMLParserAbort');
  late final _CFXMLParserAbort1 = _CFXMLParserAbort1Ptr.asFunction<
      void Function(CFXMLParserRef, int, CFStringRef)>();

  int CFXMLParserParse1(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserParse1(
      parser,
    );
  }

  late final _CFXMLParserParse1Ptr =
      _lookup<ffi.NativeFunction<Boolean Function(CFXMLParserRef)>>(
          'CFXMLParserParse');
  late final _CFXMLParserParse1 =
      _CFXMLParserParse1Ptr.asFunction<int Function(CFXMLParserRef)>();

  CFXMLTreeRef CFXMLTreeCreateFromData1(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateFromData1(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateFromData1Ptr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
              CFOptionFlags, CFIndex)>>('CFXMLTreeCreateFromData');
  late final _CFXMLTreeCreateFromData1 =
      _CFXMLTreeCreateFromData1Ptr.asFunction<
          CFXMLTreeRef Function(
              CFAllocatorRef, CFDataRef, CFURLRef, int, int)>();

  CFXMLTreeRef CFXMLTreeCreateFromDataWithError1(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFDictionaryRef> errorDict,
  ) {
    return _CFXMLTreeCreateFromDataWithError1(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      errorDict,
    );
  }

  late final _CFXMLTreeCreateFromDataWithError1Ptr = _lookup<
          ffi.NativeFunction<
              CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
                  CFOptionFlags, CFIndex, ffi.Pointer<CFDictionaryRef>)>>(
      'CFXMLTreeCreateFromDataWithError');
  late final _CFXMLTreeCreateFromDataWithError1 =
      _CFXMLTreeCreateFromDataWithError1Ptr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int,
              ffi.Pointer<CFDictionaryRef>)>();

  CFXMLTreeRef CFXMLTreeCreateWithDataFromURL1(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateWithDataFromURL1(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateWithDataFromURL1Ptr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFIndex)>>('CFXMLTreeCreateWithDataFromURL');
  late final _CFXMLTreeCreateWithDataFromURL1 =
      _CFXMLTreeCreateWithDataFromURL1Ptr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFDataRef CFXMLTreeCreateXMLData1(
    CFAllocatorRef allocator,
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeCreateXMLData1(
      allocator,
      xmlTree,
    );
  }

  late final _CFXMLTreeCreateXMLData1Ptr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>>(
      'CFXMLTreeCreateXMLData');
  late final _CFXMLTreeCreateXMLData1 = _CFXMLTreeCreateXMLData1Ptr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>();

  CFStringRef CFXMLCreateStringByEscapingEntities1(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByEscapingEntities1(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByEscapingEntities1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByEscapingEntities');
  late final _CFXMLCreateStringByEscapingEntities1 =
      _CFXMLCreateStringByEscapingEntities1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFStringRef CFXMLCreateStringByUnescapingEntities1(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByUnescapingEntities1(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByUnescapingEntities1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByUnescapingEntities');
  late final _CFXMLCreateStringByUnescapingEntities1 =
      _CFXMLCreateStringByUnescapingEntities1Ptr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  int SecTrustGetTypeID1() {
    return _SecTrustGetTypeID1();
  }

  late final _SecTrustGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecTrustGetTypeID');
  late final _SecTrustGetTypeID1 =
      _SecTrustGetTypeID1Ptr.asFunction<int Function()>();

  int SecTrustCreateWithCertificates1(
    CFTypeRef certificates,
    CFTypeRef policies,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SecTrustCreateWithCertificates1(
      certificates,
      policies,
      trust,
    );
  }

  late final _SecTrustCreateWithCertificates1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFTypeRef, CFTypeRef,
              ffi.Pointer<SecTrustRef>)>>('SecTrustCreateWithCertificates');
  late final _SecTrustCreateWithCertificates1 =
      _SecTrustCreateWithCertificates1Ptr.asFunction<
          int Function(CFTypeRef, CFTypeRef, ffi.Pointer<SecTrustRef>)>();

  int SecTrustSetPolicies1(
    SecTrustRef trust,
    CFTypeRef policies,
  ) {
    return _SecTrustSetPolicies1(
      trust,
      policies,
    );
  }

  late final _SecTrustSetPolicies1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetPolicies');
  late final _SecTrustSetPolicies1 = _SecTrustSetPolicies1Ptr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustCopyPolicies1(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> policies,
  ) {
    return _SecTrustCopyPolicies1(
      trust,
      policies,
    );
  }

  late final _SecTrustCopyPolicies1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<CFArrayRef>)>>('SecTrustCopyPolicies');
  late final _SecTrustCopyPolicies1 = _SecTrustCopyPolicies1Ptr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetNetworkFetchAllowed1(
    SecTrustRef trust,
    int allowFetch,
  ) {
    return _SecTrustSetNetworkFetchAllowed1(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustSetNetworkFetchAllowed1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetNetworkFetchAllowed');
  late final _SecTrustSetNetworkFetchAllowed1 =
      _SecTrustSetNetworkFetchAllowed1Ptr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustGetNetworkFetchAllowed1(
    SecTrustRef trust,
    ffi.Pointer<Boolean> allowFetch,
  ) {
    return _SecTrustGetNetworkFetchAllowed1(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustGetNetworkFetchAllowed1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<Boolean>)>>('SecTrustGetNetworkFetchAllowed');
  late final _SecTrustGetNetworkFetchAllowed1 =
      _SecTrustGetNetworkFetchAllowed1Ptr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<Boolean>)>();

  int SecTrustSetAnchorCertificates1(
    SecTrustRef trust,
    CFArrayRef anchorCertificates,
  ) {
    return _SecTrustSetAnchorCertificates1(
      trust,
      anchorCertificates,
    );
  }

  late final _SecTrustSetAnchorCertificates1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetAnchorCertificates');
  late final _SecTrustSetAnchorCertificates1 =
      _SecTrustSetAnchorCertificates1Ptr.asFunction<
          int Function(SecTrustRef, CFArrayRef)>();

  int SecTrustSetAnchorCertificatesOnly1(
    SecTrustRef trust,
    int anchorCertificatesOnly,
  ) {
    return _SecTrustSetAnchorCertificatesOnly1(
      trust,
      anchorCertificatesOnly,
    );
  }

  late final _SecTrustSetAnchorCertificatesOnly1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetAnchorCertificatesOnly');
  late final _SecTrustSetAnchorCertificatesOnly1 =
      _SecTrustSetAnchorCertificatesOnly1Ptr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustCopyCustomAnchorCertificates1(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyCustomAnchorCertificates1(
      trust,
      anchors,
    );
  }

  late final _SecTrustCopyCustomAnchorCertificates1Ptr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>>(
      'SecTrustCopyCustomAnchorCertificates');
  late final _SecTrustCopyCustomAnchorCertificates1 =
      _SecTrustCopyCustomAnchorCertificates1Ptr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetVerifyDate1(
    SecTrustRef trust,
    CFDateRef verifyDate,
  ) {
    return _SecTrustSetVerifyDate1(
      trust,
      verifyDate,
    );
  }

  late final _SecTrustSetVerifyDate1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFDateRef)>>(
          'SecTrustSetVerifyDate');
  late final _SecTrustSetVerifyDate1 = _SecTrustSetVerifyDate1Ptr.asFunction<
      int Function(SecTrustRef, CFDateRef)>();

  double SecTrustGetVerifyTime1(
    SecTrustRef trust,
  ) {
    return _SecTrustGetVerifyTime1(
      trust,
    );
  }

  late final _SecTrustGetVerifyTime1Ptr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(SecTrustRef)>>(
          'SecTrustGetVerifyTime');
  late final _SecTrustGetVerifyTime1 =
      _SecTrustGetVerifyTime1Ptr.asFunction<double Function(SecTrustRef)>();

  int SecTrustEvaluate1(
    SecTrustRef trust,
    ffi.Pointer<ffi.Int32> result,
  ) {
    return _SecTrustEvaluate1(
      trust,
      result,
    );
  }

  late final _SecTrustEvaluate1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Int32>)>>('SecTrustEvaluate');
  late final _SecTrustEvaluate1 = _SecTrustEvaluate1Ptr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>)>();

  int SecTrustEvaluateAsync1(
    SecTrustRef trust,
    dispatch_queue_t queue,
    SecTrustCallback result,
  ) {
    return _SecTrustEvaluateAsync1(
      trust,
      queue,
      result,
    );
  }

  late final _SecTrustEvaluateAsync1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustCallback)>>('SecTrustEvaluateAsync');
  late final _SecTrustEvaluateAsync1 = _SecTrustEvaluateAsync1Ptr.asFunction<
      int Function(SecTrustRef, dispatch_queue_t, SecTrustCallback)>();

  bool SecTrustEvaluateWithError1(
    SecTrustRef trust,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecTrustEvaluateWithError1(
          trust,
          error,
        ) !=
        0;
  }

  late final _SecTrustEvaluateWithError1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(SecTrustRef,
              ffi.Pointer<CFErrorRef>)>>('SecTrustEvaluateWithError');
  late final _SecTrustEvaluateWithError1 = _SecTrustEvaluateWithError1Ptr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<CFErrorRef>)>();

  int SecTrustEvaluateAsyncWithError1(
    SecTrustRef trust,
    dispatch_queue_t queue,
    SecTrustWithErrorCallback result,
  ) {
    return _SecTrustEvaluateAsyncWithError1(
      trust,
      queue,
      result,
    );
  }

  late final _SecTrustEvaluateAsyncWithError1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, dispatch_queue_t,
              SecTrustWithErrorCallback)>>('SecTrustEvaluateAsyncWithError');
  late final _SecTrustEvaluateAsyncWithError1 =
      _SecTrustEvaluateAsyncWithError1Ptr.asFunction<
          int Function(
              SecTrustRef, dispatch_queue_t, SecTrustWithErrorCallback)>();

  int SecTrustGetTrustResult1(
    SecTrustRef trust,
    ffi.Pointer<ffi.Int32> result,
  ) {
    return _SecTrustGetTrustResult1(
      trust,
      result,
    );
  }

  late final _SecTrustGetTrustResult1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<ffi.Int32>)>>('SecTrustGetTrustResult');
  late final _SecTrustGetTrustResult1 = _SecTrustGetTrustResult1Ptr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>)>();

  SecKeyRef SecTrustCopyPublicKey1(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyPublicKey1(
      trust,
    );
  }

  late final _SecTrustCopyPublicKey1Ptr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyPublicKey');
  late final _SecTrustCopyPublicKey1 =
      _SecTrustCopyPublicKey1Ptr.asFunction<SecKeyRef Function(SecTrustRef)>();

  SecKeyRef SecTrustCopyKey1(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyKey1(
      trust,
    );
  }

  late final _SecTrustCopyKey1Ptr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyKey');
  late final _SecTrustCopyKey1 =
      _SecTrustCopyKey1Ptr.asFunction<SecKeyRef Function(SecTrustRef)>();

  int SecTrustGetCertificateCount1(
    SecTrustRef trust,
  ) {
    return _SecTrustGetCertificateCount1(
      trust,
    );
  }

  late final _SecTrustGetCertificateCount1Ptr =
      _lookup<ffi.NativeFunction<CFIndex Function(SecTrustRef)>>(
          'SecTrustGetCertificateCount');
  late final _SecTrustGetCertificateCount1 =
      _SecTrustGetCertificateCount1Ptr.asFunction<int Function(SecTrustRef)>();

  SecCertificateRef SecTrustGetCertificateAtIndex1(
    SecTrustRef trust,
    int ix,
  ) {
    return _SecTrustGetCertificateAtIndex1(
      trust,
      ix,
    );
  }

  late final _SecTrustGetCertificateAtIndex1Ptr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(SecTrustRef, CFIndex)>>(
      'SecTrustGetCertificateAtIndex');
  late final _SecTrustGetCertificateAtIndex1 =
      _SecTrustGetCertificateAtIndex1Ptr.asFunction<
          SecCertificateRef Function(SecTrustRef, int)>();

  CFDataRef SecTrustCopyExceptions1(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyExceptions1(
      trust,
    );
  }

  late final _SecTrustCopyExceptions1Ptr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecTrustRef)>>(
          'SecTrustCopyExceptions');
  late final _SecTrustCopyExceptions1 =
      _SecTrustCopyExceptions1Ptr.asFunction<CFDataRef Function(SecTrustRef)>();

  bool SecTrustSetExceptions1(
    SecTrustRef trust,
    CFDataRef exceptions,
  ) {
    return _SecTrustSetExceptions1(
          trust,
          exceptions,
        ) !=
        0;
  }

  late final _SecTrustSetExceptions1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(SecTrustRef, CFDataRef)>>(
          'SecTrustSetExceptions');
  late final _SecTrustSetExceptions1 = _SecTrustSetExceptions1Ptr.asFunction<
      int Function(SecTrustRef, CFDataRef)>();

  CFArrayRef SecTrustCopyProperties1(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyProperties1(
      trust,
    );
  }

  late final _SecTrustCopyProperties1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyProperties');
  late final _SecTrustCopyProperties1 = _SecTrustCopyProperties1Ptr.asFunction<
      CFArrayRef Function(SecTrustRef)>();

  CFDictionaryRef SecTrustCopyResult1(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyResult1(
      trust,
    );
  }

  late final _SecTrustCopyResult1Ptr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(SecTrustRef)>>(
          'SecTrustCopyResult');
  late final _SecTrustCopyResult1 = _SecTrustCopyResult1Ptr.asFunction<
      CFDictionaryRef Function(SecTrustRef)>();

  int SecTrustSetOCSPResponse1(
    SecTrustRef trust,
    CFTypeRef responseData,
  ) {
    return _SecTrustSetOCSPResponse1(
      trust,
      responseData,
    );
  }

  late final _SecTrustSetOCSPResponse1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetOCSPResponse');
  late final _SecTrustSetOCSPResponse1 = _SecTrustSetOCSPResponse1Ptr
      .asFunction<int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustSetSignedCertificateTimestamps1(
    SecTrustRef trust,
    CFArrayRef sctArray,
  ) {
    return _SecTrustSetSignedCertificateTimestamps1(
      trust,
      sctArray,
    );
  }

  late final _SecTrustSetSignedCertificateTimestamps1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetSignedCertificateTimestamps');
  late final _SecTrustSetSignedCertificateTimestamps1 =
      _SecTrustSetSignedCertificateTimestamps1Ptr.asFunction<
          int Function(SecTrustRef, CFArrayRef)>();

  CFArrayRef SecTrustCopyCertificateChain1(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyCertificateChain1(
      trust,
    );
  }

  late final _SecTrustCopyCertificateChain1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyCertificateChain');
  late final _SecTrustCopyCertificateChain1 = _SecTrustCopyCertificateChain1Ptr
      .asFunction<CFArrayRef Function(SecTrustRef)>();

  void cssmPerror1(
    ffi.Pointer<pkg_ffi.Char> how,
    int error,
  ) {
    return _cssmPerror1(
      how,
      error,
    );
  }

  late final _cssmPerror1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Char>, CSSM_RETURN)>>('cssmPerror');
  late final _cssmPerror1 = _cssmPerror1Ptr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  bool cssmOidToAlg1(
    ffi.Pointer<SecAsn1Oid> oid,
    ffi.Pointer<CSSM_ALGORITHMS> alg,
  ) {
    return _cssmOidToAlg1(
          oid,
          alg,
        ) !=
        0;
  }

  late final _cssmOidToAlg1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<SecAsn1Oid>,
              ffi.Pointer<CSSM_ALGORITHMS>)>>('cssmOidToAlg');
  late final _cssmOidToAlg1 = _cssmOidToAlg1Ptr.asFunction<
      int Function(ffi.Pointer<SecAsn1Oid>, ffi.Pointer<CSSM_ALGORITHMS>)>();

  ffi.Pointer<SecAsn1Oid> cssmAlgToOid1(
    int algId,
  ) {
    return _cssmAlgToOid1(
      algId,
    );
  }

  late final _cssmAlgToOid1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SecAsn1Oid> Function(CSSM_ALGORITHMS)>>('cssmAlgToOid');
  late final _cssmAlgToOid1 =
      _cssmAlgToOid1Ptr.asFunction<ffi.Pointer<SecAsn1Oid> Function(int)>();

  int SecTrustSetOptions1(
    SecTrustRef trustRef,
    int options,
  ) {
    return _SecTrustSetOptions1(
      trustRef,
      options,
    );
  }

  late final _SecTrustSetOptions1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, ffi.Int32)>>(
          'SecTrustSetOptions');
  late final _SecTrustSetOptions1 =
      _SecTrustSetOptions1Ptr.asFunction<int Function(SecTrustRef, int)>();

  int SecTrustSetParameters1(
    SecTrustRef trustRef,
    int action,
    CFDataRef actionData,
  ) {
    return _SecTrustSetParameters1(
      trustRef,
      action,
      actionData,
    );
  }

  late final _SecTrustSetParameters1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, CSSM_TP_ACTION,
              CFDataRef)>>('SecTrustSetParameters');
  late final _SecTrustSetParameters1 = _SecTrustSetParameters1Ptr.asFunction<
      int Function(SecTrustRef, int, CFDataRef)>();

  int SecTrustSetKeychains1(
    SecTrustRef trust,
    CFTypeRef keychainOrArray,
  ) {
    return _SecTrustSetKeychains1(
      trust,
      keychainOrArray,
    );
  }

  late final _SecTrustSetKeychains1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetKeychains');
  late final _SecTrustSetKeychains1 = _SecTrustSetKeychains1Ptr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustGetResult1(
    SecTrustRef trustRef,
    ffi.Pointer<ffi.Int32> result,
    ffi.Pointer<CFArrayRef> certChain,
    ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>> statusChain,
  ) {
    return _SecTrustGetResult1(
      trustRef,
      result,
      certChain,
      statusChain,
    );
  }

  late final _SecTrustGetResult1Ptr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustRef,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<CFArrayRef>,
                  ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>>(
      'SecTrustGetResult');
  late final _SecTrustGetResult1 = _SecTrustGetResult1Ptr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<CFArrayRef>,
          ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>();

  int SecTrustGetCssmResult1(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR> result,
  ) {
    return _SecTrustGetCssmResult1(
      trust,
      result,
    );
  }

  late final _SecTrustGetCssmResult1Ptr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef,
                  ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>>(
      'SecTrustGetCssmResult');
  late final _SecTrustGetCssmResult1 = _SecTrustGetCssmResult1Ptr.asFunction<
      int Function(
          SecTrustRef, ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>();

  int SecTrustGetCssmResultCode1(
    SecTrustRef trust,
    ffi.Pointer<OSStatus> resultCode,
  ) {
    return _SecTrustGetCssmResultCode1(
      trust,
      resultCode,
    );
  }

  late final _SecTrustGetCssmResultCode1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<OSStatus>)>>('SecTrustGetCssmResultCode');
  late final _SecTrustGetCssmResultCode1 = _SecTrustGetCssmResultCode1Ptr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<OSStatus>)>();

  int SecTrustGetTPHandle1(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_HANDLE> handle,
  ) {
    return _SecTrustGetTPHandle1(
      trust,
      handle,
    );
  }

  late final _SecTrustGetTPHandle1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<CSSM_TP_HANDLE>)>>('SecTrustGetTPHandle');
  late final _SecTrustGetTPHandle1 = _SecTrustGetTPHandle1Ptr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CSSM_TP_HANDLE>)>();

  int SecTrustCopyAnchorCertificates1(
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyAnchorCertificates1(
      anchors,
    );
  }

  late final _SecTrustCopyAnchorCertificates1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(ffi.Pointer<CFArrayRef>)>>(
          'SecTrustCopyAnchorCertificates');
  late final _SecTrustCopyAnchorCertificates1 =
      _SecTrustCopyAnchorCertificates1Ptr.asFunction<
          int Function(ffi.Pointer<CFArrayRef>)>();

  int SecCertificateGetTypeID1() {
    return _SecCertificateGetTypeID1();
  }

  late final _SecCertificateGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'SecCertificateGetTypeID');
  late final _SecCertificateGetTypeID1 =
      _SecCertificateGetTypeID1Ptr.asFunction<int Function()>();

  SecCertificateRef SecCertificateCreateWithData1(
    CFAllocatorRef allocator,
    CFDataRef data,
  ) {
    return _SecCertificateCreateWithData1(
      allocator,
      data,
    );
  }

  late final _SecCertificateCreateWithData1Ptr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFAllocatorRef, CFDataRef)>>('SecCertificateCreateWithData');
  late final _SecCertificateCreateWithData1 = _SecCertificateCreateWithData1Ptr
      .asFunction<SecCertificateRef Function(CFAllocatorRef, CFDataRef)>();

  CFDataRef SecCertificateCopyData1(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyData1(
      certificate,
    );
  }

  late final _SecCertificateCopyData1Ptr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyData');
  late final _SecCertificateCopyData1 = _SecCertificateCopyData1Ptr.asFunction<
      CFDataRef Function(SecCertificateRef)>();

  CFStringRef SecCertificateCopySubjectSummary1(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopySubjectSummary1(
      certificate,
    );
  }

  late final _SecCertificateCopySubjectSummary1Ptr =
      _lookup<ffi.NativeFunction<CFStringRef Function(SecCertificateRef)>>(
          'SecCertificateCopySubjectSummary');
  late final _SecCertificateCopySubjectSummary1 =
      _SecCertificateCopySubjectSummary1Ptr.asFunction<
          CFStringRef Function(SecCertificateRef)>();

  int SecCertificateCopyCommonName1(
    SecCertificateRef certificate,
    ffi.Pointer<CFStringRef> commonName,
  ) {
    return _SecCertificateCopyCommonName1(
      certificate,
      commonName,
    );
  }

  late final _SecCertificateCopyCommonName1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFStringRef>)>>('SecCertificateCopyCommonName');
  late final _SecCertificateCopyCommonName1 = _SecCertificateCopyCommonName1Ptr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<CFStringRef>)>();

  int SecCertificateCopyEmailAddresses1(
    SecCertificateRef certificate,
    ffi.Pointer<CFArrayRef> emailAddresses,
  ) {
    return _SecCertificateCopyEmailAddresses1(
      certificate,
      emailAddresses,
    );
  }

  late final _SecCertificateCopyEmailAddresses1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFArrayRef>)>>('SecCertificateCopyEmailAddresses');
  late final _SecCertificateCopyEmailAddresses1 =
      _SecCertificateCopyEmailAddresses1Ptr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CFArrayRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerSequence1(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedIssuerSequence1(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerSequence1Ptr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedIssuerSequence');
  late final _SecCertificateCopyNormalizedIssuerSequence1 =
      _SecCertificateCopyNormalizedIssuerSequence1Ptr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  CFDataRef SecCertificateCopyNormalizedSubjectSequence1(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedSubjectSequence1(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectSequence1Ptr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedSubjectSequence');
  late final _SecCertificateCopyNormalizedSubjectSequence1 =
      _SecCertificateCopyNormalizedSubjectSequence1Ptr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  SecKeyRef SecCertificateCopyKey1(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyKey1(
      certificate,
    );
  }

  late final _SecCertificateCopyKey1Ptr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecCertificateRef)>>(
          'SecCertificateCopyKey');
  late final _SecCertificateCopyKey1 = _SecCertificateCopyKey1Ptr.asFunction<
      SecKeyRef Function(SecCertificateRef)>();

  int SecCertificateCopyPublicKey1(
    SecCertificateRef certificate,
    ffi.Pointer<SecKeyRef> key,
  ) {
    return _SecCertificateCopyPublicKey1(
      certificate,
      key,
    );
  }

  late final _SecCertificateCopyPublicKey1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<SecKeyRef>)>>('SecCertificateCopyPublicKey');
  late final _SecCertificateCopyPublicKey1 = _SecCertificateCopyPublicKey1Ptr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<SecKeyRef>)>();

  CFDataRef SecCertificateCopySerialNumberData1(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumberData1(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberData1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumberData');
  late final _SecCertificateCopySerialNumberData1 =
      _SecCertificateCopySerialNumberData1Ptr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopySerialNumber1(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumber1(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumber1Ptr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumber');
  late final _SecCertificateCopySerialNumber1 =
      _SecCertificateCopySerialNumber1Ptr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecCertificateCreateFromData1(
    ffi.Pointer<SecAsn1Item> data,
    int type,
    int encoding,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCreateFromData1(
      data,
      type,
      encoding,
      certificate,
    );
  }

  late final _SecCertificateCreateFromData1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<SecAsn1Item>,
              CSSM_CERT_TYPE,
              CSSM_CERT_ENCODING,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCreateFromData');
  late final _SecCertificateCreateFromData1 =
      _SecCertificateCreateFromData1Ptr.asFunction<
          int Function(ffi.Pointer<SecAsn1Item>, int, int,
              ffi.Pointer<SecCertificateRef>)>();

  int SecCertificateAddToKeychain1(
    SecCertificateRef certificate,
    SecKeychainRef keychain,
  ) {
    return _SecCertificateAddToKeychain1(
      certificate,
      keychain,
    );
  }

  late final _SecCertificateAddToKeychain1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              SecKeychainRef)>>('SecCertificateAddToKeychain');
  late final _SecCertificateAddToKeychain1 = _SecCertificateAddToKeychain1Ptr
      .asFunction<int Function(SecCertificateRef, SecKeychainRef)>();

  int SecCertificateGetData1(
    SecCertificateRef certificate,
    CSSM_DATA_PTR data,
  ) {
    return _SecCertificateGetData1(
      certificate,
      data,
    );
  }

  late final _SecCertificateGetData1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCertificateRef, CSSM_DATA_PTR)>>('SecCertificateGetData');
  late final _SecCertificateGetData1 = _SecCertificateGetData1Ptr.asFunction<
      int Function(SecCertificateRef, CSSM_DATA_PTR)>();

  int SecCertificateGetType1(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CERT_TYPE> certificateType,
  ) {
    return _SecCertificateGetType1(
      certificate,
      certificateType,
    );
  }

  late final _SecCertificateGetType1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CERT_TYPE>)>>('SecCertificateGetType');
  late final _SecCertificateGetType1 = _SecCertificateGetType1Ptr.asFunction<
      int Function(SecCertificateRef, ffi.Pointer<CSSM_CERT_TYPE>)>();

  int SecCertificateGetSubject1(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> subject,
  ) {
    return _SecCertificateGetSubject1(
      certificate,
      subject,
    );
  }

  late final _SecCertificateGetSubject1Ptr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetSubject');
  late final _SecCertificateGetSubject1 =
      _SecCertificateGetSubject1Ptr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetIssuer1(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> issuer,
  ) {
    return _SecCertificateGetIssuer1(
      certificate,
      issuer,
    );
  }

  late final _SecCertificateGetIssuer1Ptr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetIssuer');
  late final _SecCertificateGetIssuer1 =
      _SecCertificateGetIssuer1Ptr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetCLHandle1(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CL_HANDLE> clHandle,
  ) {
    return _SecCertificateGetCLHandle1(
      certificate,
      clHandle,
    );
  }

  late final _SecCertificateGetCLHandle1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CL_HANDLE>)>>('SecCertificateGetCLHandle');
  late final _SecCertificateGetCLHandle1 =
      _SecCertificateGetCLHandle1Ptr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CSSM_CL_HANDLE>)>();

  int SecCertificateGetAlgorithmID1(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<SecAsn1AlgId>> algid,
  ) {
    return _SecCertificateGetAlgorithmID1(
      certificate,
      algid,
    );
  }

  late final _SecCertificateGetAlgorithmID1Ptr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>>(
      'SecCertificateGetAlgorithmID');
  late final _SecCertificateGetAlgorithmID1 =
      _SecCertificateGetAlgorithmID1Ptr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>();

  int SecCertificateCopyPreference1(
    CFStringRef name,
    int keyUsage,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCopyPreference1(
      name,
      keyUsage,
      certificate,
    );
  }

  late final _SecCertificateCopyPreference1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, uint32,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCopyPreference');
  late final _SecCertificateCopyPreference1 =
      _SecCertificateCopyPreference1Ptr.asFunction<
          int Function(CFStringRef, int, ffi.Pointer<SecCertificateRef>)>();

  SecCertificateRef SecCertificateCopyPreferred1(
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateCopyPreferred1(
      name,
      keyUsage,
    );
  }

  late final _SecCertificateCopyPreferred1Ptr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFStringRef, CFArrayRef)>>('SecCertificateCopyPreferred');
  late final _SecCertificateCopyPreferred1 = _SecCertificateCopyPreferred1Ptr
      .asFunction<SecCertificateRef Function(CFStringRef, CFArrayRef)>();

  int SecCertificateSetPreference1(
    SecCertificateRef certificate,
    CFStringRef name,
    int keyUsage,
    CFDateRef date,
  ) {
    return _SecCertificateSetPreference1(
      certificate,
      name,
      keyUsage,
      date,
    );
  }

  late final _SecCertificateSetPreference1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef, uint32,
              CFDateRef)>>('SecCertificateSetPreference');
  late final _SecCertificateSetPreference1 =
      _SecCertificateSetPreference1Ptr.asFunction<
          int Function(SecCertificateRef, CFStringRef, int, CFDateRef)>();

  int SecCertificateSetPreferred1(
    SecCertificateRef certificate,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateSetPreferred1(
      certificate,
      name,
      keyUsage,
    );
  }

  late final _SecCertificateSetPreferred1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef,
              CFArrayRef)>>('SecCertificateSetPreferred');
  late final _SecCertificateSetPreferred1 = _SecCertificateSetPreferred1Ptr
      .asFunction<int Function(SecCertificateRef, CFStringRef, CFArrayRef)>();

  CFDictionaryRef SecCertificateCopyValues1(
    SecCertificateRef certificate,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyValues1(
      certificate,
      keys,
      error,
    );
  }

  late final _SecCertificateCopyValues1Ptr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(SecCertificateRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyValues');
  late final _SecCertificateCopyValues1 =
      _SecCertificateCopyValues1Ptr.asFunction<
          CFDictionaryRef Function(
              SecCertificateRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyLongDescription1(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyLongDescription1(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyLongDescription1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyLongDescription');
  late final _SecCertificateCopyLongDescription1 =
      _SecCertificateCopyLongDescription1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyShortDescription1(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyShortDescription1(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyShortDescription1Ptr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyShortDescription');
  late final _SecCertificateCopyShortDescription1 =
      _SecCertificateCopyShortDescription1Ptr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerContent1(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedIssuerContent1(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerContent1Ptr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedIssuerContent');
  late final _SecCertificateCopyNormalizedIssuerContent1 =
      _SecCertificateCopyNormalizedIssuerContent1Ptr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedSubjectContent1(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedSubjectContent1(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectContent1Ptr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedSubjectContent');
  late final _SecCertificateCopyNormalizedSubjectContent1 =
      _SecCertificateCopyNormalizedSubjectContent1Ptr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecIdentityGetTypeID1() {
    return _SecIdentityGetTypeID1();
  }

  late final _SecIdentityGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecIdentityGetTypeID');
  late final _SecIdentityGetTypeID1 =
      _SecIdentityGetTypeID1Ptr.asFunction<int Function()>();

  int SecIdentityCreateWithCertificate1(
    CFTypeRef keychainOrArray,
    SecCertificateRef certificateRef,
    ffi.Pointer<SecIdentityRef> identityRef,
  ) {
    return _SecIdentityCreateWithCertificate1(
      keychainOrArray,
      certificateRef,
      identityRef,
    );
  }

  late final _SecIdentityCreateWithCertificate1Ptr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>>(
      'SecIdentityCreateWithCertificate');
  late final _SecIdentityCreateWithCertificate1 =
      _SecIdentityCreateWithCertificate1Ptr.asFunction<
          int Function(
              CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>();

  int SecIdentityCopyCertificate1(
    SecIdentityRef identityRef,
    ffi.Pointer<SecCertificateRef> certificateRef,
  ) {
    return _SecIdentityCopyCertificate1(
      identityRef,
      certificateRef,
    );
  }

  late final _SecIdentityCopyCertificate1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecCertificateRef>)>>('SecIdentityCopyCertificate');
  late final _SecIdentityCopyCertificate1 =
      _SecIdentityCopyCertificate1Ptr.asFunction<
          int Function(SecIdentityRef, ffi.Pointer<SecCertificateRef>)>();

  int SecIdentityCopyPrivateKey1(
    SecIdentityRef identityRef,
    ffi.Pointer<SecKeyRef> privateKeyRef,
  ) {
    return _SecIdentityCopyPrivateKey1(
      identityRef,
      privateKeyRef,
    );
  }

  late final _SecIdentityCopyPrivateKey1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecKeyRef>)>>('SecIdentityCopyPrivateKey');
  late final _SecIdentityCopyPrivateKey1 = _SecIdentityCopyPrivateKey1Ptr
      .asFunction<int Function(SecIdentityRef, ffi.Pointer<SecKeyRef>)>();

  int SecIdentityCopyPreference1(
    CFStringRef name,
    int keyUsage,
    CFArrayRef validIssuers,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentityCopyPreference1(
      name,
      keyUsage,
      validIssuers,
      identity,
    );
  }

  late final _SecIdentityCopyPreference1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, CSSM_KEYUSE, CFArrayRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentityCopyPreference');
  late final _SecIdentityCopyPreference1 =
      _SecIdentityCopyPreference1Ptr.asFunction<
          int Function(
              CFStringRef, int, CFArrayRef, ffi.Pointer<SecIdentityRef>)>();

  SecIdentityRef SecIdentityCopyPreferred1(
    CFStringRef name,
    CFArrayRef keyUsage,
    CFArrayRef validIssuers,
  ) {
    return _SecIdentityCopyPreferred1(
      name,
      keyUsage,
      validIssuers,
    );
  }

  late final _SecIdentityCopyPreferred1Ptr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef,
              CFArrayRef)>>('SecIdentityCopyPreferred');
  late final _SecIdentityCopyPreferred1 =
      _SecIdentityCopyPreferred1Ptr.asFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef, CFArrayRef)>();

  int SecIdentitySetPreference1(
    SecIdentityRef identity,
    CFStringRef name,
    int keyUsage,
  ) {
    return _SecIdentitySetPreference1(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreference1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CSSM_KEYUSE)>>('SecIdentitySetPreference');
  late final _SecIdentitySetPreference1 = _SecIdentitySetPreference1Ptr
      .asFunction<int Function(SecIdentityRef, CFStringRef, int)>();

  int SecIdentitySetPreferred1(
    SecIdentityRef identity,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecIdentitySetPreferred1(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferred1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CFArrayRef)>>('SecIdentitySetPreferred');
  late final _SecIdentitySetPreferred1 = _SecIdentitySetPreferred1Ptr
      .asFunction<int Function(SecIdentityRef, CFStringRef, CFArrayRef)>();

  int SecIdentityCopySystemIdentity1(
    CFStringRef domain,
    ffi.Pointer<SecIdentityRef> idRef,
    ffi.Pointer<CFStringRef> actualDomain,
  ) {
    return _SecIdentityCopySystemIdentity1(
      domain,
      idRef,
      actualDomain,
    );
  }

  late final _SecIdentityCopySystemIdentity1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>>('SecIdentityCopySystemIdentity');
  late final _SecIdentityCopySystemIdentity1 =
      _SecIdentityCopySystemIdentity1Ptr.asFunction<
          int Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>();

  int SecIdentitySetSystemIdentity1(
    CFStringRef domain,
    SecIdentityRef idRef,
  ) {
    return _SecIdentitySetSystemIdentity1(
      domain,
      idRef,
    );
  }

  late final _SecIdentitySetSystemIdentity1Ptr = _lookup<
          ffi.NativeFunction<OSStatus Function(CFStringRef, SecIdentityRef)>>(
      'SecIdentitySetSystemIdentity');
  late final _SecIdentitySetSystemIdentity1 = _SecIdentitySetSystemIdentity1Ptr
      .asFunction<int Function(CFStringRef, SecIdentityRef)>();

  sec_trust_t sec_trust_create1(
    SecTrustRef trust,
  ) {
    return _sec_trust_create1(
      trust,
    );
  }

  late final _sec_trust_create1Ptr =
      _lookup<ffi.NativeFunction<sec_trust_t Function(SecTrustRef)>>(
          'sec_trust_create');
  late final _sec_trust_create1 =
      _sec_trust_create1Ptr.asFunction<sec_trust_t Function(SecTrustRef)>();

  SecTrustRef sec_trust_copy_ref1(
    sec_trust_t trust,
  ) {
    return _sec_trust_copy_ref1(
      trust,
    );
  }

  late final _sec_trust_copy_ref1Ptr =
      _lookup<ffi.NativeFunction<SecTrustRef Function(sec_trust_t)>>(
          'sec_trust_copy_ref');
  late final _sec_trust_copy_ref1 =
      _sec_trust_copy_ref1Ptr.asFunction<SecTrustRef Function(sec_trust_t)>();

  sec_identity_t sec_identity_create1(
    SecIdentityRef identity,
  ) {
    return _sec_identity_create1(
      identity,
    );
  }

  late final _sec_identity_create1Ptr =
      _lookup<ffi.NativeFunction<sec_identity_t Function(SecIdentityRef)>>(
          'sec_identity_create');
  late final _sec_identity_create1 = _sec_identity_create1Ptr
      .asFunction<sec_identity_t Function(SecIdentityRef)>();

  sec_identity_t sec_identity_create_with_certificates1(
    SecIdentityRef identity,
    CFArrayRef certificates,
  ) {
    return _sec_identity_create_with_certificates1(
      identity,
      certificates,
    );
  }

  late final _sec_identity_create_with_certificates1Ptr = _lookup<
      ffi.NativeFunction<
          sec_identity_t Function(SecIdentityRef,
              CFArrayRef)>>('sec_identity_create_with_certificates');
  late final _sec_identity_create_with_certificates1 =
      _sec_identity_create_with_certificates1Ptr
          .asFunction<sec_identity_t Function(SecIdentityRef, CFArrayRef)>();

  bool sec_identity_access_certificates1(
    sec_identity_t identity,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_identity_access_certificates1(
          identity,
          handler,
        ) !=
        0;
  }

  late final _sec_identity_access_certificates1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(sec_identity_t,
              ffi.Pointer<_ObjCBlock>)>>('sec_identity_access_certificates');
  late final _sec_identity_access_certificates1 =
      _sec_identity_access_certificates1Ptr
          .asFunction<int Function(sec_identity_t, ffi.Pointer<_ObjCBlock>)>();

  SecIdentityRef sec_identity_copy_ref1(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_ref1(
      identity,
    );
  }

  late final _sec_identity_copy_ref1Ptr =
      _lookup<ffi.NativeFunction<SecIdentityRef Function(sec_identity_t)>>(
          'sec_identity_copy_ref');
  late final _sec_identity_copy_ref1 = _sec_identity_copy_ref1Ptr
      .asFunction<SecIdentityRef Function(sec_identity_t)>();

  CFArrayRef sec_identity_copy_certificates_ref1(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_certificates_ref1(
      identity,
    );
  }

  late final _sec_identity_copy_certificates_ref1Ptr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(sec_identity_t)>>(
          'sec_identity_copy_certificates_ref');
  late final _sec_identity_copy_certificates_ref1 =
      _sec_identity_copy_certificates_ref1Ptr
          .asFunction<CFArrayRef Function(sec_identity_t)>();

  sec_certificate_t sec_certificate_create1(
    SecCertificateRef certificate,
  ) {
    return _sec_certificate_create1(
      certificate,
    );
  }

  late final _sec_certificate_create1Ptr = _lookup<
          ffi.NativeFunction<sec_certificate_t Function(SecCertificateRef)>>(
      'sec_certificate_create');
  late final _sec_certificate_create1 = _sec_certificate_create1Ptr
      .asFunction<sec_certificate_t Function(SecCertificateRef)>();

  SecCertificateRef sec_certificate_copy_ref1(
    sec_certificate_t certificate,
  ) {
    return _sec_certificate_copy_ref1(
      certificate,
    );
  }

  late final _sec_certificate_copy_ref1Ptr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(sec_certificate_t)>>(
      'sec_certificate_copy_ref');
  late final _sec_certificate_copy_ref1 = _sec_certificate_copy_ref1Ptr
      .asFunction<SecCertificateRef Function(sec_certificate_t)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_negotiated_protocol1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol1(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocol1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_protocol');
  late final _sec_protocol_metadata_get_negotiated_protocol1 =
      _sec_protocol_metadata_get_negotiated_protocol1Ptr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_copy_peer_public_key1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_copy_peer_public_key1(
      metadata,
    );
  }

  late final _sec_protocol_metadata_copy_peer_public_key1Ptr = _lookup<
          ffi.NativeFunction<
              dispatch_data_t Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_copy_peer_public_key');
  late final _sec_protocol_metadata_copy_peer_public_key1 =
      _sec_protocol_metadata_copy_peer_public_key1Ptr
          .asFunction<dispatch_data_t Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_protocol_version1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_protocol_version1(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_protocol_version1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_tls_protocol_version1 =
      _sec_protocol_metadata_get_negotiated_tls_protocol_version1Ptr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_protocol_version1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol_version1(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocol_version1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_protocol_version1 =
      _sec_protocol_metadata_get_negotiated_protocol_version1Ptr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_ciphersuite1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_ciphersuite1(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuite1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuite1 =
      _sec_protocol_metadata_get_negotiated_tls_ciphersuite1Ptr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_ciphersuite1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_ciphersuite1(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_ciphersuite1Ptr = _lookup<
          ffi.NativeFunction<SSLCipherSuite Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_ciphersuite1 =
      _sec_protocol_metadata_get_negotiated_ciphersuite1Ptr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_get_early_data_accepted1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_early_data_accepted1(
          metadata,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_get_early_data_accepted1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_early_data_accepted');
  late final _sec_protocol_metadata_get_early_data_accepted1 =
      _sec_protocol_metadata_get_early_data_accepted1Ptr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_access_peer_certificate_chain1(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_peer_certificate_chain1(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_peer_certificate_chain1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_peer_certificate_chain');
  late final _sec_protocol_metadata_access_peer_certificate_chain1 =
      _sec_protocol_metadata_access_peer_certificate_chain1Ptr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_ocsp_response1(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_ocsp_response1(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_ocsp_response1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_ocsp_response');
  late final _sec_protocol_metadata_access_ocsp_response1 =
      _sec_protocol_metadata_access_ocsp_response1Ptr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_supported_signature_algorithms1(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_supported_signature_algorithms1(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_supported_signature_algorithms1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
          'sec_protocol_metadata_access_supported_signature_algorithms');
  late final _sec_protocol_metadata_access_supported_signature_algorithms1 =
      _sec_protocol_metadata_access_supported_signature_algorithms1Ptr
          .asFunction<
              int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_distinguished_names1(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_distinguished_names1(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_distinguished_names1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_distinguished_names');
  late final _sec_protocol_metadata_access_distinguished_names1 =
      _sec_protocol_metadata_access_distinguished_names1Ptr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  bool sec_protocol_metadata_access_pre_shared_keys1(
    sec_protocol_metadata_t metadata,
    ffi.Pointer<_ObjCBlock> handler,
  ) {
    return _sec_protocol_metadata_access_pre_shared_keys1(
          metadata,
          handler,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_access_pre_shared_keys1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>>(
      'sec_protocol_metadata_access_pre_shared_keys');
  late final _sec_protocol_metadata_access_pre_shared_keys1 =
      _sec_protocol_metadata_access_pre_shared_keys1Ptr.asFunction<
          int Function(sec_protocol_metadata_t, ffi.Pointer<_ObjCBlock>)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_server_name1(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_server_name1(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_server_name1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_server_name');
  late final _sec_protocol_metadata_get_server_name1 =
      _sec_protocol_metadata_get_server_name1Ptr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_peers_are_equal1(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_peers_are_equal1(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_peers_are_equal1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_peers_are_equal');
  late final _sec_protocol_metadata_peers_are_equal1 =
      _sec_protocol_metadata_peers_are_equal1Ptr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_challenge_parameters_are_equal1(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_challenge_parameters_are_equal1(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_challenge_parameters_are_equal1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_challenge_parameters_are_equal');
  late final _sec_protocol_metadata_challenge_parameters_are_equal1 =
      _sec_protocol_metadata_challenge_parameters_are_equal1Ptr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_create_secret1(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret1(
      metadata,
      label_len,
      label,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secret1Ptr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('sec_protocol_metadata_create_secret');
  late final _sec_protocol_metadata_create_secret1 =
      _sec_protocol_metadata_create_secret1Ptr.asFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t, int, ffi.Pointer<pkg_ffi.Char>, int)>();

  dispatch_data_t sec_protocol_metadata_create_secret_with_context1(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int context_len,
    ffi.Pointer<ffi.Uint8> context,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret_with_context1(
      metadata,
      label_len,
      label,
      context_len,
      context,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secret_with_context1Ptr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              pkg_ffi
                  .Size)>>('sec_protocol_metadata_create_secret_with_context');
  late final _sec_protocol_metadata_create_secret_with_context1 =
      _sec_protocol_metadata_create_secret_with_context1Ptr.asFunction<
          dispatch_data_t Function(sec_protocol_metadata_t, int,
              ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<ffi.Uint8>, int)>();

  bool sec_protocol_options_are_equal1(
    sec_protocol_options_t optionsA,
    sec_protocol_options_t optionsB,
  ) {
    return _sec_protocol_options_are_equal1(
          optionsA,
          optionsB,
        ) !=
        0;
  }

  late final _sec_protocol_options_are_equal1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(sec_protocol_options_t,
              sec_protocol_options_t)>>('sec_protocol_options_are_equal');
  late final _sec_protocol_options_are_equal1 =
      _sec_protocol_options_are_equal1Ptr.asFunction<
          int Function(sec_protocol_options_t, sec_protocol_options_t)>();

  void sec_protocol_options_set_local_identity1(
    sec_protocol_options_t options,
    sec_identity_t identity,
  ) {
    return _sec_protocol_options_set_local_identity1(
      options,
      identity,
    );
  }

  late final _sec_protocol_options_set_local_identity1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              sec_identity_t)>>('sec_protocol_options_set_local_identity');
  late final _sec_protocol_options_set_local_identity1 =
      _sec_protocol_options_set_local_identity1Ptr
          .asFunction<void Function(sec_protocol_options_t, sec_identity_t)>();

  void sec_protocol_options_append_tls_ciphersuite1(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite1(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuite1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_append_tls_ciphersuite');
  late final _sec_protocol_options_append_tls_ciphersuite1 =
      _sec_protocol_options_append_tls_ciphersuite1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite1(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite1(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuite1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              SSLCipherSuite)>>('sec_protocol_options_add_tls_ciphersuite');
  late final _sec_protocol_options_add_tls_ciphersuite1 =
      _sec_protocol_options_add_tls_ciphersuite1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_append_tls_ciphersuite_group1(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite_group1(
      options,
      group,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuite_group1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_append_tls_ciphersuite_group');
  late final _sec_protocol_options_append_tls_ciphersuite_group1 =
      _sec_protocol_options_append_tls_ciphersuite_group1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite_group1(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite_group1(
      options,
      group,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuite_group1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_add_tls_ciphersuite_group');
  late final _sec_protocol_options_add_tls_ciphersuite_group1 =
      _sec_protocol_options_add_tls_ciphersuite_group1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_min_version1(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_min_version1(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_min_version1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_tls_min_version');
  late final _sec_protocol_options_set_tls_min_version1 =
      _sec_protocol_options_set_tls_min_version1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_min_tls_protocol_version1(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_min_tls_protocol_version1(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_min_tls_protocol_version1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_min_tls_protocol_version');
  late final _sec_protocol_options_set_min_tls_protocol_version1 =
      _sec_protocol_options_set_min_tls_protocol_version1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_min_tls_protocol_version1() {
    return _sec_protocol_options_get_default_min_tls_protocol_version1();
  }

  late final _sec_protocol_options_get_default_min_tls_protocol_version1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_min_tls_protocol_version');
  late final _sec_protocol_options_get_default_min_tls_protocol_version1 =
      _sec_protocol_options_get_default_min_tls_protocol_version1Ptr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_min_dtls_protocol_version1() {
    return _sec_protocol_options_get_default_min_dtls_protocol_version1();
  }

  late final _sec_protocol_options_get_default_min_dtls_protocol_version1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_min_dtls_protocol_version');
  late final _sec_protocol_options_get_default_min_dtls_protocol_version1 =
      _sec_protocol_options_get_default_min_dtls_protocol_version1Ptr
          .asFunction<int Function()>();

  void sec_protocol_options_set_tls_max_version1(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_max_version1(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_max_version1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_tls_max_version');
  late final _sec_protocol_options_set_tls_max_version1 =
      _sec_protocol_options_set_tls_max_version1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_max_tls_protocol_version1(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_max_tls_protocol_version1(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_max_tls_protocol_version1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Int32)>>('sec_protocol_options_set_max_tls_protocol_version');
  late final _sec_protocol_options_set_max_tls_protocol_version1 =
      _sec_protocol_options_set_max_tls_protocol_version1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_max_tls_protocol_version1() {
    return _sec_protocol_options_get_default_max_tls_protocol_version1();
  }

  late final _sec_protocol_options_get_default_max_tls_protocol_version1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_max_tls_protocol_version');
  late final _sec_protocol_options_get_default_max_tls_protocol_version1 =
      _sec_protocol_options_get_default_max_tls_protocol_version1Ptr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_max_dtls_protocol_version1() {
    return _sec_protocol_options_get_default_max_dtls_protocol_version1();
  }

  late final _sec_protocol_options_get_default_max_dtls_protocol_version1Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'sec_protocol_options_get_default_max_dtls_protocol_version');
  late final _sec_protocol_options_get_default_max_dtls_protocol_version1 =
      _sec_protocol_options_get_default_max_dtls_protocol_version1Ptr
          .asFunction<int Function()>();

  bool sec_protocol_options_get_enable_encrypted_client_hello1(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_enable_encrypted_client_hello1(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_enable_encrypted_client_hello1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_enable_encrypted_client_hello');
  late final _sec_protocol_options_get_enable_encrypted_client_hello1 =
      _sec_protocol_options_get_enable_encrypted_client_hello1Ptr
          .asFunction<int Function(sec_protocol_options_t)>();

  bool sec_protocol_options_get_quic_use_legacy_codepoint1(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_quic_use_legacy_codepoint1(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_quic_use_legacy_codepoint1Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_quic_use_legacy_codepoint');
  late final _sec_protocol_options_get_quic_use_legacy_codepoint1 =
      _sec_protocol_options_get_quic_use_legacy_codepoint1Ptr
          .asFunction<int Function(sec_protocol_options_t)>();

  void sec_protocol_options_add_tls_application_protocol1(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> application_protocol,
  ) {
    return _sec_protocol_options_add_tls_application_protocol1(
      options,
      application_protocol,
    );
  }

  late final _sec_protocol_options_add_tls_application_protocol1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_add_tls_application_protocol');
  late final _sec_protocol_options_add_tls_application_protocol1 =
      _sec_protocol_options_add_tls_application_protocol1Ptr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_server_name1(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> server_name,
  ) {
    return _sec_protocol_options_set_tls_server_name1(
      options,
      server_name,
    );
  }

  late final _sec_protocol_options_set_tls_server_name1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_set_tls_server_name');
  late final _sec_protocol_options_set_tls_server_name1 =
      _sec_protocol_options_set_tls_server_name1Ptr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_diffie_hellman_parameters1(
    sec_protocol_options_t options,
    dispatch_data_t params,
  ) {
    return _sec_protocol_options_set_tls_diffie_hellman_parameters1(
      options,
      params,
    );
  }

  late final _sec_protocol_options_set_tls_diffie_hellman_parameters1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_diffie_hellman_parameters');
  late final _sec_protocol_options_set_tls_diffie_hellman_parameters1 =
      _sec_protocol_options_set_tls_diffie_hellman_parameters1Ptr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_add_pre_shared_key1(
    sec_protocol_options_t options,
    dispatch_data_t psk,
    dispatch_data_t psk_identity,
  ) {
    return _sec_protocol_options_add_pre_shared_key1(
      options,
      psk,
      psk_identity,
    );
  }

  late final _sec_protocol_options_add_pre_shared_key1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, dispatch_data_t,
              dispatch_data_t)>>('sec_protocol_options_add_pre_shared_key');
  late final _sec_protocol_options_add_pre_shared_key1 =
      _sec_protocol_options_add_pre_shared_key1Ptr.asFunction<
          void Function(
              sec_protocol_options_t, dispatch_data_t, dispatch_data_t)>();

  void sec_protocol_options_set_tls_pre_shared_key_identity_hint1(
    sec_protocol_options_t options,
    dispatch_data_t psk_identity_hint,
  ) {
    return _sec_protocol_options_set_tls_pre_shared_key_identity_hint1(
      options,
      psk_identity_hint,
    );
  }

  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hint1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_pre_shared_key_identity_hint');
  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hint1 =
      _sec_protocol_options_set_tls_pre_shared_key_identity_hint1Ptr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_set_pre_shared_key_selection_block1(
    sec_protocol_options_t options,
    sec_protocol_pre_shared_key_selection_t psk_selection_block,
    dispatch_queue_t psk_selection_queue,
  ) {
    return _sec_protocol_options_set_pre_shared_key_selection_block1(
      options,
      psk_selection_block,
      psk_selection_queue,
    );
  }

  late final _sec_protocol_options_set_pre_shared_key_selection_block1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(
                      sec_protocol_options_t,
                      sec_protocol_pre_shared_key_selection_t,
                      dispatch_queue_t)>>(
          'sec_protocol_options_set_pre_shared_key_selection_block');
  late final _sec_protocol_options_set_pre_shared_key_selection_block1 =
      _sec_protocol_options_set_pre_shared_key_selection_block1Ptr.asFunction<
          void Function(sec_protocol_options_t,
              sec_protocol_pre_shared_key_selection_t, dispatch_queue_t)>();

  void sec_protocol_options_set_tls_tickets_enabled1(
    sec_protocol_options_t options,
    bool tickets_enabled,
  ) {
    return _sec_protocol_options_set_tls_tickets_enabled1(
      options,
      tickets_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_tickets_enabled1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_tickets_enabled');
  late final _sec_protocol_options_set_tls_tickets_enabled1 =
      _sec_protocol_options_set_tls_tickets_enabled1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_is_fallback_attempt1(
    sec_protocol_options_t options,
    bool is_fallback_attempt,
  ) {
    return _sec_protocol_options_set_tls_is_fallback_attempt1(
      options,
      is_fallback_attempt ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_is_fallback_attempt1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_is_fallback_attempt');
  late final _sec_protocol_options_set_tls_is_fallback_attempt1 =
      _sec_protocol_options_set_tls_is_fallback_attempt1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_resumption_enabled1(
    sec_protocol_options_t options,
    bool resumption_enabled,
  ) {
    return _sec_protocol_options_set_tls_resumption_enabled1(
      options,
      resumption_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_resumption_enabled1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_resumption_enabled');
  late final _sec_protocol_options_set_tls_resumption_enabled1 =
      _sec_protocol_options_set_tls_resumption_enabled1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_false_start_enabled1(
    sec_protocol_options_t options,
    bool false_start_enabled,
  ) {
    return _sec_protocol_options_set_tls_false_start_enabled1(
      options,
      false_start_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_false_start_enabled1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_false_start_enabled');
  late final _sec_protocol_options_set_tls_false_start_enabled1 =
      _sec_protocol_options_set_tls_false_start_enabled1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_ocsp_enabled1(
    sec_protocol_options_t options,
    bool ocsp_enabled,
  ) {
    return _sec_protocol_options_set_tls_ocsp_enabled1(
      options,
      ocsp_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_ocsp_enabled1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_ocsp_enabled');
  late final _sec_protocol_options_set_tls_ocsp_enabled1 =
      _sec_protocol_options_set_tls_ocsp_enabled1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_sct_enabled1(
    sec_protocol_options_t options,
    bool sct_enabled,
  ) {
    return _sec_protocol_options_set_tls_sct_enabled1(
      options,
      sct_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_sct_enabled1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_sct_enabled');
  late final _sec_protocol_options_set_tls_sct_enabled1 =
      _sec_protocol_options_set_tls_sct_enabled1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_renegotiation_enabled1(
    sec_protocol_options_t options,
    bool renegotiation_enabled,
  ) {
    return _sec_protocol_options_set_tls_renegotiation_enabled1(
      options,
      renegotiation_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_renegotiation_enabled1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_tls_renegotiation_enabled');
  late final _sec_protocol_options_set_tls_renegotiation_enabled1 =
      _sec_protocol_options_set_tls_renegotiation_enabled1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_required1(
    sec_protocol_options_t options,
    bool peer_authentication_required,
  ) {
    return _sec_protocol_options_set_peer_authentication_required1(
      options,
      peer_authentication_required ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_required1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_required');
  late final _sec_protocol_options_set_peer_authentication_required1 =
      _sec_protocol_options_set_peer_authentication_required1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_optional1(
    sec_protocol_options_t options,
    bool peer_authentication_optional,
  ) {
    return _sec_protocol_options_set_peer_authentication_optional1(
      options,
      peer_authentication_optional ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_optional1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_optional');
  late final _sec_protocol_options_set_peer_authentication_optional1 =
      _sec_protocol_options_set_peer_authentication_optional1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_enable_encrypted_client_hello1(
    sec_protocol_options_t options,
    bool enable_encrypted_client_hello,
  ) {
    return _sec_protocol_options_set_enable_encrypted_client_hello1(
      options,
      enable_encrypted_client_hello ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_enable_encrypted_client_hello1Ptr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_enable_encrypted_client_hello');
  late final _sec_protocol_options_set_enable_encrypted_client_hello1 =
      _sec_protocol_options_set_enable_encrypted_client_hello1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_quic_use_legacy_codepoint1(
    sec_protocol_options_t options,
    bool quic_use_legacy_codepoint,
  ) {
    return _sec_protocol_options_set_quic_use_legacy_codepoint1(
      options,
      quic_use_legacy_codepoint ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_quic_use_legacy_codepoint1Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_quic_use_legacy_codepoint');
  late final _sec_protocol_options_set_quic_use_legacy_codepoint1 =
      _sec_protocol_options_set_quic_use_legacy_codepoint1Ptr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_key_update_block1(
    sec_protocol_options_t options,
    sec_protocol_key_update_t key_update_block,
    dispatch_queue_t key_update_queue,
  ) {
    return _sec_protocol_options_set_key_update_block1(
      options,
      key_update_block,
      key_update_queue,
    );
  }

  late final _sec_protocol_options_set_key_update_block1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>>('sec_protocol_options_set_key_update_block');
  late final _sec_protocol_options_set_key_update_block1 =
      _sec_protocol_options_set_key_update_block1Ptr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_key_update_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_challenge_block1(
    sec_protocol_options_t options,
    sec_protocol_challenge_t challenge_block,
    dispatch_queue_t challenge_queue,
  ) {
    return _sec_protocol_options_set_challenge_block1(
      options,
      challenge_block,
      challenge_queue,
    );
  }

  late final _sec_protocol_options_set_challenge_block1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>>('sec_protocol_options_set_challenge_block');
  late final _sec_protocol_options_set_challenge_block1 =
      _sec_protocol_options_set_challenge_block1Ptr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_challenge_t,
              dispatch_queue_t)>();

  void sec_protocol_options_set_verify_block1(
    sec_protocol_options_t options,
    sec_protocol_verify_t verify_block,
    dispatch_queue_t verify_block_queue,
  ) {
    return _sec_protocol_options_set_verify_block1(
      options,
      verify_block,
      verify_block_queue,
    );
  }

  late final _sec_protocol_options_set_verify_block1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>>('sec_protocol_options_set_verify_block');
  late final _sec_protocol_options_set_verify_block1 =
      _sec_protocol_options_set_verify_block1Ptr.asFunction<
          void Function(sec_protocol_options_t, sec_protocol_verify_t,
              dispatch_queue_t)>();

  int SSLContextGetTypeID1() {
    return _SSLContextGetTypeID1();
  }

  late final _SSLContextGetTypeID1Ptr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SSLContextGetTypeID');
  late final _SSLContextGetTypeID1 =
      _SSLContextGetTypeID1Ptr.asFunction<int Function()>();

  SSLContextRef SSLCreateContext1(
    CFAllocatorRef alloc,
    int protocolSide,
    int connectionType,
  ) {
    return _SSLCreateContext1(
      alloc,
      protocolSide,
      connectionType,
    );
  }

  late final _SSLCreateContext1Ptr = _lookup<
      ffi.NativeFunction<
          SSLContextRef Function(
              CFAllocatorRef, ffi.Int32, ffi.Int32)>>('SSLCreateContext');
  late final _SSLCreateContext1 = _SSLCreateContext1Ptr.asFunction<
      SSLContextRef Function(CFAllocatorRef, int, int)>();

  int SSLNewContext1(
    int isServer,
    ffi.Pointer<SSLContextRef> contextPtr,
  ) {
    return _SSLNewContext1(
      isServer,
      contextPtr,
    );
  }

  late final _SSLNewContext1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              Boolean, ffi.Pointer<SSLContextRef>)>>('SSLNewContext');
  late final _SSLNewContext1 = _SSLNewContext1Ptr.asFunction<
      int Function(int, ffi.Pointer<SSLContextRef>)>();

  int SSLDisposeContext1(
    SSLContextRef context,
  ) {
    return _SSLDisposeContext1(
      context,
    );
  }

  late final _SSLDisposeContext1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLDisposeContext');
  late final _SSLDisposeContext1 =
      _SSLDisposeContext1Ptr.asFunction<int Function(SSLContextRef)>();

  int SSLGetSessionState1(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> state,
  ) {
    return _SSLGetSessionState1(
      context,
      state,
    );
  }

  late final _SSLGetSessionState1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Int32>)>>('SSLGetSessionState');
  late final _SSLGetSessionState1 = _SSLGetSessionState1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetSessionOption1(
    SSLContextRef context,
    int option,
    int value,
  ) {
    return _SSLSetSessionOption1(
      context,
      option,
      value,
    );
  }

  late final _SSLSetSessionOption1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Int32, Boolean)>>('SSLSetSessionOption');
  late final _SSLSetSessionOption1 = _SSLSetSessionOption1Ptr.asFunction<
      int Function(SSLContextRef, int, int)>();

  int SSLGetSessionOption1(
    SSLContextRef context,
    int option,
    ffi.Pointer<Boolean> value,
  ) {
    return _SSLGetSessionOption1(
      context,
      option,
      value,
    );
  }

  late final _SSLGetSessionOption1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              ffi.Pointer<Boolean>)>>('SSLGetSessionOption');
  late final _SSLGetSessionOption1 = _SSLGetSessionOption1Ptr.asFunction<
      int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetIOFuncs1(
    SSLContextRef context,
    SSLReadFunc readFunc,
    SSLWriteFunc writeFunc,
  ) {
    return _SSLSetIOFuncs1(
      context,
      readFunc,
      writeFunc,
    );
  }

  late final _SSLSetIOFuncs1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLReadFunc, SSLWriteFunc)>>('SSLSetIOFuncs');
  late final _SSLSetIOFuncs1 = _SSLSetIOFuncs1Ptr.asFunction<
      int Function(SSLContextRef, SSLReadFunc, SSLWriteFunc)>();

  int SSLSetSessionConfig1(
    SSLContextRef context,
    CFStringRef config,
  ) {
    return _SSLSetSessionConfig1(
      context,
      config,
    );
  }

  late final _SSLSetSessionConfig1Ptr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, CFStringRef)>>(
      'SSLSetSessionConfig');
  late final _SSLSetSessionConfig1 = _SSLSetSessionConfig1Ptr.asFunction<
      int Function(SSLContextRef, CFStringRef)>();

  int SSLSetProtocolVersionMin1(
    SSLContextRef context,
    int minVersion,
  ) {
    return _SSLSetProtocolVersionMin1(
      context,
      minVersion,
    );
  }

  late final _SSLSetProtocolVersionMin1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersionMin');
  late final _SSLSetProtocolVersionMin1 = _SSLSetProtocolVersionMin1Ptr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMin1(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> minVersion,
  ) {
    return _SSLGetProtocolVersionMin1(
      context,
      minVersion,
    );
  }

  late final _SSLGetProtocolVersionMin1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersionMin');
  late final _SSLGetProtocolVersionMin1 = _SSLGetProtocolVersionMin1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetProtocolVersionMax1(
    SSLContextRef context,
    int maxVersion,
  ) {
    return _SSLSetProtocolVersionMax1(
      context,
      maxVersion,
    );
  }

  late final _SSLSetProtocolVersionMax1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersionMax');
  late final _SSLSetProtocolVersionMax1 = _SSLSetProtocolVersionMax1Ptr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMax1(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> maxVersion,
  ) {
    return _SSLGetProtocolVersionMax1(
      context,
      maxVersion,
    );
  }

  late final _SSLGetProtocolVersionMax1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersionMax');
  late final _SSLGetProtocolVersionMax1 = _SSLGetProtocolVersionMax1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetProtocolVersionEnabled1(
    SSLContextRef context,
    int protocol,
    int enable,
  ) {
    return _SSLSetProtocolVersionEnabled1(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLSetProtocolVersionEnabled1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              Boolean)>>('SSLSetProtocolVersionEnabled');
  late final _SSLSetProtocolVersionEnabled1 = _SSLSetProtocolVersionEnabled1Ptr
      .asFunction<int Function(SSLContextRef, int, int)>();

  int SSLGetProtocolVersionEnabled1(
    SSLContextRef context,
    int protocol,
    ffi.Pointer<Boolean> enable,
  ) {
    return _SSLGetProtocolVersionEnabled1(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLGetProtocolVersionEnabled1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Int32,
              ffi.Pointer<Boolean>)>>('SSLGetProtocolVersionEnabled');
  late final _SSLGetProtocolVersionEnabled1 = _SSLGetProtocolVersionEnabled1Ptr
      .asFunction<int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetProtocolVersion1(
    SSLContextRef context,
    int version,
  ) {
    return _SSLSetProtocolVersion1(
      context,
      version,
    );
  }

  late final _SSLSetProtocolVersion1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetProtocolVersion');
  late final _SSLSetProtocolVersion1 =
      _SSLSetProtocolVersion1Ptr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersion1(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> protocol,
  ) {
    return _SSLGetProtocolVersion1(
      context,
      protocol,
    );
  }

  late final _SSLGetProtocolVersion1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<ffi.Int32>)>>('SSLGetProtocolVersion');
  late final _SSLGetProtocolVersion1 = _SSLGetProtocolVersion1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetCertificate1(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetCertificate1(
      context,
      certRefs,
    );
  }

  late final _SSLSetCertificate1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetCertificate');
  late final _SSLSetCertificate1 = _SSLSetCertificate1Ptr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetConnection1(
    SSLContextRef context,
    SSLConnectionRef connection,
  ) {
    return _SSLSetConnection1(
      context,
      connection,
    );
  }

  late final _SSLSetConnection1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLConnectionRef)>>('SSLSetConnection');
  late final _SSLSetConnection1 = _SSLSetConnection1Ptr.asFunction<
      int Function(SSLContextRef, SSLConnectionRef)>();

  int SSLGetConnection1(
    SSLContextRef context,
    ffi.Pointer<SSLConnectionRef> connection,
  ) {
    return _SSLGetConnection1(
      context,
      connection,
    );
  }

  late final _SSLGetConnection1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLConnectionRef>)>>('SSLGetConnection');
  late final _SSLGetConnection1 = _SSLGetConnection1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLConnectionRef>)>();

  int SSLSetPeerDomainName1(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    int peerNameLen,
  ) {
    return _SSLSetPeerDomainName1(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLSetPeerDomainName1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('SSLSetPeerDomainName');
  late final _SSLSetPeerDomainName1 = _SSLSetPeerDomainName1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int SSLGetPeerDomainNameLength1(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainNameLength1(
      context,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNameLength1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainNameLength');
  late final _SSLGetPeerDomainNameLength1 = _SSLGetPeerDomainNameLength1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetPeerDomainName1(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainName1(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainName1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainName');
  late final _SSLGetPeerDomainName1 = _SSLGetPeerDomainName1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerNameLength1(
    SSLContextRef ctx,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerNameLength1(
      ctx,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNameLength1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerNameLength');
  late final _SSLCopyRequestedPeerNameLength1 =
      _SSLCopyRequestedPeerNameLength1Ptr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerName1(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerName1(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerName1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerName');
  late final _SSLCopyRequestedPeerName1 =
      _SSLCopyRequestedPeerName1Ptr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetDatagramHelloCookie1(
    SSLContextRef dtlsContext,
    ffi.Pointer<ffi.Void> cookie,
    int cookieLen,
  ) {
    return _SSLSetDatagramHelloCookie1(
      dtlsContext,
      cookie,
      cookieLen,
    );
  }

  late final _SSLSetDatagramHelloCookie1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDatagramHelloCookie');
  late final _SSLSetDatagramHelloCookie1 = _SSLSetDatagramHelloCookie1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetMaxDatagramRecordSize1(
    SSLContextRef dtlsContext,
    int maxSize,
  ) {
    return _SSLSetMaxDatagramRecordSize1(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLSetMaxDatagramRecordSize1Ptr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, pkg_ffi.Size)>>(
      'SSLSetMaxDatagramRecordSize');
  late final _SSLSetMaxDatagramRecordSize1 = _SSLSetMaxDatagramRecordSize1Ptr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetMaxDatagramRecordSize1(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> maxSize,
  ) {
    return _SSLGetMaxDatagramRecordSize1(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLGetMaxDatagramRecordSize1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetMaxDatagramRecordSize');
  late final _SSLGetMaxDatagramRecordSize1 = _SSLGetMaxDatagramRecordSize1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedProtocolVersion1(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> protocol,
  ) {
    return _SSLGetNegotiatedProtocolVersion1(
      context,
      protocol,
    );
  }

  late final _SSLGetNegotiatedProtocolVersion1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetNegotiatedProtocolVersion');
  late final _SSLGetNegotiatedProtocolVersion1 =
      _SSLGetNegotiatedProtocolVersion1Ptr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLGetNumberSupportedCiphers1(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberSupportedCiphers1(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberSupportedCiphers1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberSupportedCiphers');
  late final _SSLGetNumberSupportedCiphers1 = _SSLGetNumberSupportedCiphers1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetSupportedCiphers1(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetSupportedCiphers1(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetSupportedCiphers1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetSupportedCiphers');
  late final _SSLGetSupportedCiphers1 = _SSLGetSupportedCiphers1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNumberEnabledCiphers1(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberEnabledCiphers1(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberEnabledCiphers1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberEnabledCiphers');
  late final _SSLGetNumberEnabledCiphers1 = _SSLGetNumberEnabledCiphers1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetEnabledCiphers1(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    int numCiphers,
  ) {
    return _SSLSetEnabledCiphers1(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLSetEnabledCiphers1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              pkg_ffi.Size)>>('SSLSetEnabledCiphers');
  late final _SSLSetEnabledCiphers1 = _SSLSetEnabledCiphers1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>, int)>();

  int SSLGetEnabledCiphers1(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetEnabledCiphers1(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetEnabledCiphers1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetEnabledCiphers');
  late final _SSLGetEnabledCiphers1 = _SSLGetEnabledCiphers1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetSessionTicketsEnabled1(
    SSLContextRef context,
    int enabled,
  ) {
    return _SSLSetSessionTicketsEnabled1(
      context,
      enabled,
    );
  }

  late final _SSLSetSessionTicketsEnabled1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetSessionTicketsEnabled');
  late final _SSLSetSessionTicketsEnabled1 = _SSLSetSessionTicketsEnabled1Ptr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLSetEnableCertVerify1(
    SSLContextRef context,
    int enableVerify,
  ) {
    return _SSLSetEnableCertVerify1(
      context,
      enableVerify,
    );
  }

  late final _SSLSetEnableCertVerify1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetEnableCertVerify');
  late final _SSLSetEnableCertVerify1 = _SSLSetEnableCertVerify1Ptr.asFunction<
      int Function(SSLContextRef, int)>();

  int SSLGetEnableCertVerify1(
    SSLContextRef context,
    ffi.Pointer<Boolean> enableVerify,
  ) {
    return _SSLGetEnableCertVerify1(
      context,
      enableVerify,
    );
  }

  late final _SSLGetEnableCertVerify1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetEnableCertVerify');
  late final _SSLGetEnableCertVerify1 = _SSLGetEnableCertVerify1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredCerts1(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredCerts1(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredCerts1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredCerts');
  late final _SSLSetAllowsExpiredCerts1 = _SSLSetAllowsExpiredCerts1Ptr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredCerts1(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredCerts1(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredCerts1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredCerts');
  late final _SSLGetAllowsExpiredCerts1 = _SSLGetAllowsExpiredCerts1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredRoots1(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredRoots1(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredRoots1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredRoots');
  late final _SSLSetAllowsExpiredRoots1 = _SSLSetAllowsExpiredRoots1Ptr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredRoots1(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredRoots1(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredRoots1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredRoots');
  late final _SSLGetAllowsExpiredRoots1 = _SSLGetAllowsExpiredRoots1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsAnyRoot1(
    SSLContextRef context,
    int anyRoot,
  ) {
    return _SSLSetAllowsAnyRoot1(
      context,
      anyRoot,
    );
  }

  late final _SSLSetAllowsAnyRoot1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsAnyRoot');
  late final _SSLSetAllowsAnyRoot1 =
      _SSLSetAllowsAnyRoot1Ptr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsAnyRoot1(
    SSLContextRef context,
    ffi.Pointer<Boolean> anyRoot,
  ) {
    return _SSLGetAllowsAnyRoot1(
      context,
      anyRoot,
    );
  }

  late final _SSLGetAllowsAnyRoot1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetAllowsAnyRoot');
  late final _SSLGetAllowsAnyRoot1 = _SSLGetAllowsAnyRoot1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetTrustedRoots1(
    SSLContextRef context,
    CFArrayRef trustedRoots,
    int replaceExisting,
  ) {
    return _SSLSetTrustedRoots1(
      context,
      trustedRoots,
      replaceExisting,
    );
  }

  late final _SSLSetTrustedRoots1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, CFArrayRef, Boolean)>>('SSLSetTrustedRoots');
  late final _SSLSetTrustedRoots1 = _SSLSetTrustedRoots1Ptr.asFunction<
      int Function(SSLContextRef, CFArrayRef, int)>();

  int SSLCopyTrustedRoots1(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> trustedRoots,
  ) {
    return _SSLCopyTrustedRoots1(
      context,
      trustedRoots,
    );
  }

  late final _SSLCopyTrustedRoots1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyTrustedRoots');
  late final _SSLCopyTrustedRoots1 = _SSLCopyTrustedRoots1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerCertificates1(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certs,
  ) {
    return _SSLCopyPeerCertificates1(
      context,
      certs,
    );
  }

  late final _SSLCopyPeerCertificates1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyPeerCertificates');
  late final _SSLCopyPeerCertificates1 = _SSLCopyPeerCertificates1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerTrust1(
    SSLContextRef context,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SSLCopyPeerTrust1(
      context,
      trust,
    );
  }

  late final _SSLCopyPeerTrust1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<SecTrustRef>)>>('SSLCopyPeerTrust');
  late final _SSLCopyPeerTrust1 = _SSLCopyPeerTrust1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SecTrustRef>)>();

  int SSLSetPeerID1(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> peerID,
    int peerIDLen,
  ) {
    return _SSLSetPeerID1(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLSetPeerID1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetPeerID');
  late final _SSLSetPeerID1 = _SSLSetPeerID1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetPeerID1(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peerID,
    ffi.Pointer<pkg_ffi.Size> peerIDLen,
  ) {
    return _SSLGetPeerID1(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLGetPeerID1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerID');
  late final _SSLGetPeerID1 = _SSLGetPeerID1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedCipher1(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> cipherSuite,
  ) {
    return _SSLGetNegotiatedCipher1(
      context,
      cipherSuite,
    );
  }

  late final _SSLGetNegotiatedCipher1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLCipherSuite>)>>('SSLGetNegotiatedCipher');
  late final _SSLGetNegotiatedCipher1 = _SSLGetNegotiatedCipher1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>)>();

  int SSLSetALPNProtocols1(
    SSLContextRef context,
    CFArrayRef protocols,
  ) {
    return _SSLSetALPNProtocols1(
      context,
      protocols,
    );
  }

  late final _SSLSetALPNProtocols1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetALPNProtocols');
  late final _SSLSetALPNProtocols1 = _SSLSetALPNProtocols1Ptr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLCopyALPNProtocols1(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> protocols,
  ) {
    return _SSLCopyALPNProtocols1(
      context,
      protocols,
    );
  }

  late final _SSLCopyALPNProtocols1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyALPNProtocols');
  late final _SSLCopyALPNProtocols1 = _SSLCopyALPNProtocols1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLSetOCSPResponse1(
    SSLContextRef context,
    CFDataRef response,
  ) {
    return _SSLSetOCSPResponse1(
      context,
      response,
    );
  }

  late final _SSLSetOCSPResponse1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFDataRef)>>(
          'SSLSetOCSPResponse');
  late final _SSLSetOCSPResponse1 = _SSLSetOCSPResponse1Ptr.asFunction<
      int Function(SSLContextRef, CFDataRef)>();

  int SSLSetEncryptionCertificate1(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetEncryptionCertificate1(
      context,
      certRefs,
    );
  }

  late final _SSLSetEncryptionCertificate1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetEncryptionCertificate');
  late final _SSLSetEncryptionCertificate1 = _SSLSetEncryptionCertificate1Ptr
      .asFunction<int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetClientSideAuthenticate1(
    SSLContextRef context,
    int auth,
  ) {
    return _SSLSetClientSideAuthenticate1(
      context,
      auth,
    );
  }

  late final _SSLSetClientSideAuthenticate1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, ffi.Int32)>>(
          'SSLSetClientSideAuthenticate');
  late final _SSLSetClientSideAuthenticate1 = _SSLSetClientSideAuthenticate1Ptr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLAddDistinguishedName1(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> derDN,
    int derDNLen,
  ) {
    return _SSLAddDistinguishedName1(
      context,
      derDN,
      derDNLen,
    );
  }

  late final _SSLAddDistinguishedName1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLAddDistinguishedName');
  late final _SSLAddDistinguishedName1 = _SSLAddDistinguishedName1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetCertificateAuthorities1(
    SSLContextRef context,
    CFTypeRef certificateOrArray,
    int replaceExisting,
  ) {
    return _SSLSetCertificateAuthorities1(
      context,
      certificateOrArray,
      replaceExisting,
    );
  }

  late final _SSLSetCertificateAuthorities1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, CFTypeRef,
              Boolean)>>('SSLSetCertificateAuthorities');
  late final _SSLSetCertificateAuthorities1 = _SSLSetCertificateAuthorities1Ptr
      .asFunction<int Function(SSLContextRef, CFTypeRef, int)>();

  int SSLCopyCertificateAuthorities1(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certificates,
  ) {
    return _SSLCopyCertificateAuthorities1(
      context,
      certificates,
    );
  }

  late final _SSLCopyCertificateAuthorities1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyCertificateAuthorities');
  late final _SSLCopyCertificateAuthorities1 =
      _SSLCopyCertificateAuthorities1Ptr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyDistinguishedNames1(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> names,
  ) {
    return _SSLCopyDistinguishedNames1(
      context,
      names,
    );
  }

  late final _SSLCopyDistinguishedNames1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyDistinguishedNames');
  late final _SSLCopyDistinguishedNames1 = _SSLCopyDistinguishedNames1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLGetClientCertificateState1(
    SSLContextRef context,
    ffi.Pointer<ffi.Int32> clientState,
  ) {
    return _SSLGetClientCertificateState1(
      context,
      clientState,
    );
  }

  late final _SSLGetClientCertificateState1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<ffi.Int32>)>>('SSLGetClientCertificateState');
  late final _SSLGetClientCertificateState1 = _SSLGetClientCertificateState1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Int32>)>();

  int SSLSetDiffieHellmanParams1(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> dhParams,
    int dhParamsLen,
  ) {
    return _SSLSetDiffieHellmanParams1(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLSetDiffieHellmanParams1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDiffieHellmanParams');
  late final _SSLSetDiffieHellmanParams1 = _SSLSetDiffieHellmanParams1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetDiffieHellmanParams1(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dhParams,
    ffi.Pointer<pkg_ffi.Size> dhParamsLen,
  ) {
    return _SSLGetDiffieHellmanParams1(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLGetDiffieHellmanParams1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDiffieHellmanParams');
  late final _SSLGetDiffieHellmanParams1 =
      _SSLGetDiffieHellmanParams1Ptr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetRsaBlinding1(
    SSLContextRef context,
    int blinding,
  ) {
    return _SSLSetRsaBlinding1(
      context,
      blinding,
    );
  }

  late final _SSLSetRsaBlinding1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetRsaBlinding');
  late final _SSLSetRsaBlinding1 =
      _SSLSetRsaBlinding1Ptr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetRsaBlinding1(
    SSLContextRef context,
    ffi.Pointer<Boolean> blinding,
  ) {
    return _SSLGetRsaBlinding1(
      context,
      blinding,
    );
  }

  late final _SSLGetRsaBlinding1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetRsaBlinding');
  late final _SSLGetRsaBlinding1 = _SSLGetRsaBlinding1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLHandshake1(
    SSLContextRef context,
  ) {
    return _SSLHandshake1(
      context,
    );
  }

  late final _SSLHandshake1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLHandshake');
  late final _SSLHandshake1 =
      _SSLHandshake1Ptr.asFunction<int Function(SSLContextRef)>();

  int SSLReHandshake1(
    SSLContextRef context,
  ) {
    return _SSLReHandshake1(
      context,
    );
  }

  late final _SSLReHandshake1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLReHandshake');
  late final _SSLReHandshake1 =
      _SSLReHandshake1Ptr.asFunction<int Function(SSLContextRef)>();

  int SSLWrite1(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLWrite1(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLWrite1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLWrite');
  late final _SSLWrite1 = _SSLWrite1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLRead1(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLRead1(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLRead1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLRead');
  late final _SSLRead1 = _SSLRead1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetBufferedReadSize1(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> bufferSize,
  ) {
    return _SSLGetBufferedReadSize1(
      context,
      bufferSize,
    );
  }

  late final _SSLGetBufferedReadSize1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetBufferedReadSize');
  late final _SSLGetBufferedReadSize1 = _SSLGetBufferedReadSize1Ptr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetDatagramWriteSize1(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> bufSize,
  ) {
    return _SSLGetDatagramWriteSize1(
      dtlsContext,
      bufSize,
    );
  }

  late final _SSLGetDatagramWriteSize1Ptr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDatagramWriteSize');
  late final _SSLGetDatagramWriteSize1 = _SSLGetDatagramWriteSize1Ptr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLClose1(
    SSLContextRef context,
  ) {
    return _SSLClose1(
      context,
    );
  }

  late final _SSLClose1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>('SSLClose');
  late final _SSLClose1 =
      _SSLClose1Ptr.asFunction<int Function(SSLContextRef)>();

  int SSLSetError1(
    SSLContextRef context,
    int status,
  ) {
    return _SSLSetError1(
      context,
      status,
    );
  }

  late final _SSLSetError1Ptr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, OSStatus)>>(
          'SSLSetError');
  late final _SSLSetError1 =
      _SSLSetError1Ptr.asFunction<int Function(SSLContextRef, int)>();

  late final ffi.Pointer<ObjCObject> _class_URLSessionHelper1 =
      _getClass1("URLSessionHelper");
  late final ffi.Pointer<ObjCSel> _sel_dataTaskForSession_withRequest_toPort_1 =
      _registerName1("dataTaskForSession:withRequest:toPort:");
  ffi.Pointer<ObjCObject> _objc_msgSend_304(
    ffi.Pointer<ObjCObject> obj,
    ffi.Pointer<ObjCSel> sel,
    ffi.Pointer<ObjCObject> session,
    ffi.Pointer<ObjCObject> request,
    int dart_port,
  ) {
    return __objc_msgSend_304(
      obj,
      sel,
      session,
      request,
      dart_port,
    );
  }

  late final __objc_msgSend_304Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCSel>,
              ffi.Pointer<ObjCObject>,
              ffi.Pointer<ObjCObject>,
              Dart_Port)>>('objc_msgSend');
  late final __objc_msgSend_304 = __objc_msgSend_304Ptr.asFunction<
      ffi.Pointer<ObjCObject> Function(
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCSel>,
          ffi.Pointer<ObjCObject>,
          ffi.Pointer<ObjCObject>,
          int)>();
}

class ObjCObject extends ffi.Opaque {}

class ObjCSel extends ffi.Opaque {}

typedef NSUInteger = pkg_ffi.UnsignedLong;
typedef va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<pkg_ffi.Char>;

abstract class NSComparisonResult {
  static const int NSOrderedAscending = -1;
  static const int NSOrderedSame = 0;
  static const int NSOrderedDescending = 1;
}

abstract class NSEnumerationOptions {
  static const int NSEnumerationConcurrent = 1;
  static const int NSEnumerationReverse = 2;
}

abstract class NSSortOptions {
  static const int NSSortConcurrent = 1;
  static const int NSSortStable = 16;
}

abstract class NSQualityOfService {
  static const int NSQualityOfServiceUserInteractive = 33;
  static const int NSQualityOfServiceUserInitiated = 25;
  static const int NSQualityOfServiceUtility = 17;
  static const int NSQualityOfServiceBackground = 9;
  static const int NSQualityOfServiceDefault = -1;
}

typedef NSInteger = pkg_ffi.Long;

class __CFString extends ffi.Opaque {}

abstract class CFComparisonResult {
  static const int kCFCompareLessThan = -1;
  static const int kCFCompareEqualTo = 0;
  static const int kCFCompareGreaterThan = 1;
}

typedef CFIndex = pkg_ffi.Long;

class CFRange extends ffi.Struct {
  @CFIndex()
  external int location;

  @CFIndex()
  external int length;
}

class __CFNull extends ffi.Opaque {}

typedef CFTypeID = pkg_ffi.UnsignedLong;
typedef CFNullRef = ffi.Pointer<__CFNull>;

class __CFAllocator extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

class CFAllocatorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFAllocatorRetainCallBack retain;

  external CFAllocatorReleaseCallBack release;

  external CFAllocatorCopyDescriptionCallBack copyDescription;

  external CFAllocatorAllocateCallBack allocate;

  external CFAllocatorReallocateCallBack reallocate;

  external CFAllocatorDeallocateCallBack deallocate;

  external CFAllocatorPreferredSizeCallBack preferredSize;
}

typedef CFAllocatorRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFStringRef = ffi.Pointer<__CFString>;
typedef CFAllocatorAllocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFOptionFlags = pkg_ffi.UnsignedLong;
typedef CFAllocatorReallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
            CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorDeallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorPreferredSizeCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFIndex Function(CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef Boolean = pkg_ffi.UnsignedChar;
typedef CFHashCode = pkg_ffi.UnsignedLong;
typedef NSZone = _NSZone;

class _NSZone extends ffi.Opaque {}

class _ObjCWrapper {
  final ffi.Pointer<ObjCObject> _id;
  final NativeLibrary _lib;

  _ObjCWrapper._(this._id, this._lib);

  @override
  bool operator ==(Object other) {
    return other is _ObjCWrapper && _id == other._id;
  }

  @override
  int get hashCode => _id.hashCode;
}

class NSObject extends _ObjCWrapper {
  NSObject._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSObject castFrom<T extends _ObjCWrapper>(T other) {
    return NSObject._(other._id, other._lib);
  }

  static NSObject castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSObject._(other, lib);
  }

  static void load(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSObject1, _lib._sel_load1);
  }

  static void initialize(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSObject1, _lib._sel_initialize1);
  }

  NSObject init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib);
  }

  static NSObject new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_new1);
    return NSObject._(_ret, _lib);
  }

  static NSObject allocWithZone(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSObject1, _lib._sel_allocWithZone_1, zone);
    return NSObject._(_ret, _lib);
  }

  static NSObject alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_alloc1);
    return NSObject._(_ret, _lib);
  }

  void dealloc() {
    _lib._objc_msgSend_0(_id, _lib._sel_dealloc1);
  }

  void finalize() {
    _lib._objc_msgSend_0(_id, _lib._sel_finalize1);
  }

  NSObject copy() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_copy1);
    return NSObject._(_ret, _lib);
  }

  NSObject mutableCopy() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_mutableCopy1);
    return NSObject._(_ret, _lib);
  }

  static NSObject copyWithZone(NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSObject1, _lib._sel_copyWithZone_1, zone);
    return NSObject._(_ret, _lib);
  }

  static NSObject mutableCopyWithZone(
      NativeLibrary _lib, ffi.Pointer<_NSZone> zone) {
    final _ret = _lib._objc_msgSend_2(
        _lib._class_NSObject1, _lib._sel_mutableCopyWithZone_1, zone);
    return NSObject._(_ret, _lib);
  }

  static bool instancesRespondToSelector(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_3(_lib._class_NSObject1,
        _lib._sel_instancesRespondToSelector_1, aSelector);
  }

  static bool conformsToProtocol(NativeLibrary _lib, NSObject? protocol) {
    return _lib._objc_msgSend_4(_lib._class_NSObject1,
        _lib._sel_conformsToProtocol_1, protocol?._id ?? ffi.nullptr);
  }

  IMP methodForSelector(ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_5(_id, _lib._sel_methodForSelector_1, aSelector);
  }

  static IMP instanceMethodForSelector(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    return _lib._objc_msgSend_5(_lib._class_NSObject1,
        _lib._sel_instanceMethodForSelector_1, aSelector);
  }

  void doesNotRecognizeSelector(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_6(_id, _lib._sel_doesNotRecognizeSelector_1, aSelector);
  }

  NSObject forwardingTargetForSelector(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_7(
        _id, _lib._sel_forwardingTargetForSelector_1, aSelector);
    return NSObject._(_ret, _lib);
  }

  void forwardInvocation(NSObject? anInvocation) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_forwardInvocation_1, anInvocation?._id ?? ffi.nullptr);
  }

  NSMethodSignature methodSignatureForSelector(ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_9(
        _id, _lib._sel_methodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib);
  }

  static NSMethodSignature instanceMethodSignatureForSelector(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> aSelector) {
    final _ret = _lib._objc_msgSend_9(_lib._class_NSObject1,
        _lib._sel_instanceMethodSignatureForSelector_1, aSelector);
    return NSMethodSignature._(_ret, _lib);
  }

  bool allowsWeakReference() {
    return _lib._objc_msgSend_10(_id, _lib._sel_allowsWeakReference1);
  }

  bool retainWeakReference() {
    return _lib._objc_msgSend_10(_id, _lib._sel_retainWeakReference1);
  }

  static bool isSubclassOfClass(NativeLibrary _lib, NSObject aClass) {
    return _lib._objc_msgSend_4(
        _lib._class_NSObject1, _lib._sel_isSubclassOfClass_1, aClass._id);
  }

  static bool resolveClassMethod(NativeLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_resolveClassMethod_1, sel);
  }

  static bool resolveInstanceMethod(
      NativeLibrary _lib, ffi.Pointer<ObjCSel> sel) {
    return _lib._objc_msgSend_3(
        _lib._class_NSObject1, _lib._sel_resolveInstanceMethod_1, sel);
  }

  static int hash(NativeLibrary _lib) {
    return _lib._objc_msgSend_11(_lib._class_NSObject1, _lib._sel_hash1);
  }

  static NSObject superclass(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_superclass1);
    return NSObject._(_ret, _lib);
  }

  static NSObject class1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSObject1, _lib._sel_class1);
    return NSObject._(_ret, _lib);
  }

  static NSString description(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_54(_lib._class_NSObject1, _lib._sel_description1);
    return NSString._(_ret, _lib);
  }

  static NSString debugDescription(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_54(
        _lib._class_NSObject1, _lib._sel_debugDescription1);
    return NSString._(_ret, _lib);
  }

  static int version(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version1(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion1(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder1(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder1(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass1(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy1 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version2(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion2(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder2(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder2(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass2(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy2 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version3(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion3(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder3 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder3(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder3(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass3(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy3 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version4(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion4(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder4 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder4(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder4(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass4(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy4 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version5(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion5(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder5 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder5(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder5(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass5(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy5 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  void URL_resourceDataDidBecomeAvailable(
      NSObject? sender, NSObject? newBytes) {
    _lib._objc_msgSend_101(_id, _lib._sel_URL_resourceDataDidBecomeAvailable_1,
        sender?._id ?? ffi.nullptr, newBytes?._id ?? ffi.nullptr);
  }

  void URLResourceDidFinishLoading(NSObject? sender) {
    _lib._objc_msgSend_8(_id, _lib._sel_URLResourceDidFinishLoading_1,
        sender?._id ?? ffi.nullptr);
  }

  void URLResourceDidCancelLoading(NSObject? sender) {
    _lib._objc_msgSend_8(_id, _lib._sel_URLResourceDidCancelLoading_1,
        sender?._id ?? ffi.nullptr);
  }

  void URL_resourceDidFailLoadingWithReason(
      NSObject? sender, NSObject? reason) {
    _lib._objc_msgSend_101(
        _id,
        _lib._sel_URL_resourceDidFailLoadingWithReason_1,
        sender?._id ?? ffi.nullptr,
        reason?._id ?? ffi.nullptr);
  }

  static int version6(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion6(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder6 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder6(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder6(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass6(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy6 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version7(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion7(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder7 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder7(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder7(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass7(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy7 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version8(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion8(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder8 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder8(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder8(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass8(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy8 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version9(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion9(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder9 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder9(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder9(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass9(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy9 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version10(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion10(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder10 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder10(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder10(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass10(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy10 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  void
      attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo(
          NSObject? error,
          int recoveryOptionIndex,
          NSObject delegate,
          ffi.Pointer<ObjCSel> didRecoverSelector,
          ffi.Pointer<ffi.Void> contextInfo) {
    _lib._objc_msgSend_102(
        _id,
        _lib._sel_attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo_1,
        error?._id ?? ffi.nullptr,
        recoveryOptionIndex,
        delegate._id,
        didRecoverSelector,
        contextInfo);
  }

  bool attemptRecoveryFromError_optionIndex(
      NSObject? error, int recoveryOptionIndex) {
    return _lib._objc_msgSend_103(
        _id,
        _lib._sel_attemptRecoveryFromError_optionIndex_1,
        error?._id ?? ffi.nullptr,
        recoveryOptionIndex);
  }

  static int version11(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion11(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder11 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder11(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder11(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass11(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy11 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }

  static int version12(NativeLibrary _lib) {
    return _lib._objc_msgSend_30(_lib._class_NSObject1, _lib._sel_version1);
  }

  static void setVersion12(NativeLibrary _lib, int aVersion) {
    _lib._objc_msgSend_100(
        _lib._class_NSObject1, _lib._sel_setVersion_1, aVersion);
  }

  NSObject get classForCoder12 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_classForCoder1);
    return NSObject._(_ret, _lib);
  }

  NSObject replacementObjectForCoder12(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_replacementObjectForCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject awakeAfterUsingCoder12(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_awakeAfterUsingCoder_1, coder?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static void poseAsClass12(NativeLibrary _lib, NSObject aClass) {
    _lib._objc_msgSend_8(
        _lib._class_NSObject1, _lib._sel_poseAsClass_1, aClass._id);
  }

  NSObject get autoContentAccessingProxy12 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_autoContentAccessingProxy1);
    return NSObject._(_ret, _lib);
  }
}

typedef instancetype = ffi.Pointer<ObjCObject>;
typedef IMP = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

class NSMethodSignature extends _ObjCWrapper {
  NSMethodSignature._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMethodSignature castFrom<T extends _ObjCWrapper>(T other) {
    return NSMethodSignature._(other._id, other._lib);
  }

  static NSMethodSignature castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMethodSignature._(other, lib);
  }
}

class NSString extends _ObjCWrapper {
  NSString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSString castFrom<T extends _ObjCWrapper>(T other) {
    return NSString._(other._id, other._lib);
  }

  static NSString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSString._(other, lib);
  }

  factory NSString(NativeLibrary _lib, String str) {
    final cstr = str.toNativeUtf8();
    final nsstr = stringWithCString_encoding(_lib, cstr.cast(), 4 /* UTF8 */);
    pkg_ffi.calloc.free(cstr);
    return nsstr;
  }

  @override
  String toString() => (UTF8String).cast<pkg_ffi.Utf8>().toDartString();

  NSString substringFromIndex(int from) {
    final _ret =
        _lib._objc_msgSend_12(_id, _lib._sel_substringFromIndex_1, from);
    return NSString._(_ret, _lib);
  }

  NSString substringToIndex(int to) {
    final _ret = _lib._objc_msgSend_12(_id, _lib._sel_substringToIndex_1, to);
    return NSString._(_ret, _lib);
  }

  NSString substringWithRange(NSRange range) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_substringWithRange_1, range);
    return NSString._(_ret, _lib);
  }

  void getCharacters_range(ffi.Pointer<unichar> buffer, NSRange range) {
    _lib._objc_msgSend_14(_id, _lib._sel_getCharacters_range_1, buffer, range);
  }

  int compare(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_compare_1, string?._id ?? ffi.nullptr);
  }

  int compare_options(NSObject? string, int mask) {
    return _lib._objc_msgSend_16(
        _id, _lib._sel_compare_options_1, string?._id ?? ffi.nullptr, mask);
  }

  int compare_options_range(
      NSObject? string, int mask, NSRange rangeOfReceiverToCompare) {
    return _lib._objc_msgSend_17(_id, _lib._sel_compare_options_range_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare);
  }

  int compare_options_range_locale(NSObject? string, int mask,
      NSRange rangeOfReceiverToCompare, NSObject locale) {
    return _lib._objc_msgSend_18(_id, _lib._sel_compare_options_range_locale_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare, locale._id);
  }

  int caseInsensitiveCompare(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_caseInsensitiveCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCompare(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_localizedCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCaseInsensitiveCompare(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id,
        _lib._sel_localizedCaseInsensitiveCompare_1,
        string?._id ?? ffi.nullptr);
  }

  int localizedStandardCompare(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_localizedStandardCompare_1, string?._id ?? ffi.nullptr);
  }

  bool isEqualToString(NSObject? aString) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToString_1, aString?._id ?? ffi.nullptr);
  }

  bool hasPrefix(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_hasPrefix_1, str?._id ?? ffi.nullptr);
  }

  bool hasSuffix(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_hasSuffix_1, str?._id ?? ffi.nullptr);
  }

  NSString commonPrefixWithString_options(NSObject? str, int mask) {
    final _ret = _lib._objc_msgSend_19(
        _id,
        _lib._sel_commonPrefixWithString_options_1,
        str?._id ?? ffi.nullptr,
        mask);
    return NSString._(_ret, _lib);
  }

  bool containsString(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_containsString_1, str?._id ?? ffi.nullptr);
  }

  bool localizedCaseInsensitiveContainsString(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id,
        _lib._sel_localizedCaseInsensitiveContainsString_1,
        str?._id ?? ffi.nullptr);
  }

  bool localizedStandardContainsString(NSObject? str) {
    return _lib._objc_msgSend_4(_id,
        _lib._sel_localizedStandardContainsString_1, str?._id ?? ffi.nullptr);
  }

  NSRange localizedStandardRangeOfString(NSObject? str) {
    return _lib._objc_msgSend_20(_id,
        _lib._sel_localizedStandardRangeOfString_1, str?._id ?? ffi.nullptr);
  }

  NSRange rangeOfString(NSObject? searchString) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_rangeOfString_1, searchString?._id ?? ffi.nullptr);
  }

  NSRange rangeOfString_options(NSObject? searchString, int mask) {
    return _lib._objc_msgSend_21(_id, _lib._sel_rangeOfString_options_1,
        searchString?._id ?? ffi.nullptr, mask);
  }

  NSRange rangeOfString_options_range(
      NSObject? searchString, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_22(_id, _lib._sel_rangeOfString_options_range_1,
        searchString?._id ?? ffi.nullptr, mask, rangeOfReceiverToSearch);
  }

  NSRange rangeOfString_options_range_locale(NSObject? searchString, int mask,
      NSRange rangeOfReceiverToSearch, NSObject? locale) {
    return _lib._objc_msgSend_23(
        _id,
        _lib._sel_rangeOfString_options_range_locale_1,
        searchString?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch,
        locale?._id ?? ffi.nullptr);
  }

  NSRange rangeOfCharacterFromSet(NSObject? searchSet) {
    return _lib._objc_msgSend_20(_id, _lib._sel_rangeOfCharacterFromSet_1,
        searchSet?._id ?? ffi.nullptr);
  }

  NSRange rangeOfCharacterFromSet_options(NSObject? searchSet, int mask) {
    return _lib._objc_msgSend_21(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_1,
        searchSet?._id ?? ffi.nullptr,
        mask);
  }

  NSRange rangeOfCharacterFromSet_options_range(
      NSObject? searchSet, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_22(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_range_1,
        searchSet?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch);
  }

  NSRange rangeOfComposedCharacterSequenceAtIndex(int index) {
    return _lib._objc_msgSend_24(
        _id, _lib._sel_rangeOfComposedCharacterSequenceAtIndex_1, index);
  }

  NSRange rangeOfComposedCharacterSequencesForRange(NSRange range) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_rangeOfComposedCharacterSequencesForRange_1, range);
  }

  NSString stringByAppendingString(NSObject? aString) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_stringByAppendingString_1, aString?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByAppendingFormat(NSObject? format) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_stringByAppendingFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  double get doubleValue {
    return _lib._objc_msgSend_27(_id, _lib._sel_doubleValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_28(_id, _lib._sel_floatValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_29(_id, _lib._sel_intValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_30(_id, _lib._sel_integerValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_31(_id, _lib._sel_longLongValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_boolValue1);
  }

  NSObject? get uppercaseString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_uppercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get lowercaseString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_lowercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get capitalizedString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_capitalizedString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedUppercaseString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedUppercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedLowercaseString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedLowercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedCapitalizedString {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_localizedCapitalizedString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString uppercaseStringWithLocale(NSObject? locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_uppercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString lowercaseStringWithLocale(NSObject? locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_lowercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString capitalizedStringWithLocale(NSObject? locale) {
    final _ret = _lib._objc_msgSend_26(_id,
        _lib._sel_capitalizedStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  void getLineStart_end_contentsEnd_forRange(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> lineEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    _lib._objc_msgSend_32(
        _id,
        _lib._sel_getLineStart_end_contentsEnd_forRange_1,
        startPtr,
        lineEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange lineRangeForRange(NSRange range) {
    return _lib._objc_msgSend_25(_id, _lib._sel_lineRangeForRange_1, range);
  }

  void getParagraphStart_end_contentsEnd_forRange(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> parEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    _lib._objc_msgSend_32(
        _id,
        _lib._sel_getParagraphStart_end_contentsEnd_forRange_1,
        startPtr,
        parEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange paragraphRangeForRange(NSRange range) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_paragraphRangeForRange_1, range);
  }

  void enumerateSubstringsInRange_options_usingBlock(
      NSRange range, int opts, ObjCBlock block) {
    _lib._objc_msgSend_33(
        _id,
        _lib._sel_enumerateSubstringsInRange_options_usingBlock_1,
        range,
        opts,
        block._impl);
  }

  void enumerateLinesUsingBlock(ObjCBlock1 block) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_enumerateLinesUsingBlock_1, block._impl);
  }

  ffi.Pointer<pkg_ffi.Char> get UTF8String {
    return _lib._objc_msgSend_35(_id, _lib._sel_UTF8String1);
  }

  int get fastestEncoding {
    return _lib._objc_msgSend_11(_id, _lib._sel_fastestEncoding1);
  }

  int get smallestEncoding {
    return _lib._objc_msgSend_11(_id, _lib._sel_smallestEncoding1);
  }

  NSData dataUsingEncoding_allowLossyConversion(int encoding, bool lossy) {
    final _ret = _lib._objc_msgSend_55(_id,
        _lib._sel_dataUsingEncoding_allowLossyConversion_1, encoding, lossy);
    return NSData._(_ret, _lib);
  }

  NSData dataUsingEncoding(int encoding) {
    final _ret =
        _lib._objc_msgSend_56(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return NSData._(_ret, _lib);
  }

  bool canBeConvertedToEncoding(int encoding) {
    return _lib._objc_msgSend_57(
        _id, _lib._sel_canBeConvertedToEncoding_1, encoding);
  }

  void cStringUsingEncoding(int encoding) {
    _lib._objc_msgSend_58(_id, _lib._sel_cStringUsingEncoding_1, encoding);
  }

  bool getCString_maxLength_encoding(
      ffi.Pointer<pkg_ffi.Char> buffer, int maxBufferCount, int encoding) {
    return _lib._objc_msgSend_59(_id, _lib._sel_getCString_maxLength_encoding_1,
        buffer, maxBufferCount, encoding);
  }

  bool getBytes_maxLength_usedLength_encoding_options_range_remainingRange(
      ffi.Pointer<ffi.Void> buffer,
      int maxBufferCount,
      ffi.Pointer<NSUInteger> usedBufferCount,
      int encoding,
      int options,
      NSRange range,
      NSRangePointer leftover) {
    return _lib._objc_msgSend_60(
        _id,
        _lib._sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1,
        buffer,
        maxBufferCount,
        usedBufferCount,
        encoding,
        options,
        range,
        leftover);
  }

  int maximumLengthOfBytesUsingEncoding(int enc) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_maximumLengthOfBytesUsingEncoding_1, enc);
  }

  int lengthOfBytesUsingEncoding(int enc) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_lengthOfBytesUsingEncoding_1, enc);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings(
      NativeLibrary _lib) {
    return _lib._objc_msgSend_62(
        _lib._class_NSString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding(
      NativeLibrary _lib, int encoding) {
    final _ret = _lib._objc_msgSend_12(_lib._class_NSString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib);
  }

  static int getDefaultCStringEncoding(NativeLibrary _lib) {
    return _lib._objc_msgSend_11(
        _lib._class_NSString1, _lib._sel_defaultCStringEncoding1);
  }

  NSObject? get decomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_decomposedStringWithCanonicalMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get precomposedStringWithCanonicalMapping {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_precomposedStringWithCanonicalMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get decomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_decomposedStringWithCompatibilityMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get precomposedStringWithCompatibilityMapping {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_precomposedStringWithCompatibilityMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString stringByTrimmingCharactersInSet(NSObject? set) {
    final _ret = _lib._objc_msgSend_26(_id,
        _lib._sel_stringByTrimmingCharactersInSet_1, set?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByPaddingToLength_withString_startingAtIndex(
      int newLength, NSObject? padString, int padIndex) {
    final _ret = _lib._objc_msgSend_63(
        _id,
        _lib._sel_stringByPaddingToLength_withString_startingAtIndex_1,
        newLength,
        padString?._id ?? ffi.nullptr,
        padIndex);
    return NSString._(_ret, _lib);
  }

  NSString stringByFoldingWithOptions_locale(int options, NSObject? locale) {
    final _ret = _lib._objc_msgSend_64(
        _id,
        _lib._sel_stringByFoldingWithOptions_locale_1,
        options,
        locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByReplacingOccurrencesOfString_withString_options_range(
      NSObject? target,
      NSObject? replacement,
      int options,
      NSRange searchRange) {
    final _ret = _lib._objc_msgSend_65(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
    return NSString._(_ret, _lib);
  }

  NSString stringByReplacingOccurrencesOfString_withString(
      NSObject? target, NSObject? replacement) {
    final _ret = _lib._objc_msgSend_66(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByReplacingCharactersInRange_withString(
      NSRange range, NSObject? replacement) {
    final _ret = _lib._objc_msgSend_67(
        _id,
        _lib._sel_stringByReplacingCharactersInRange_withString_1,
        range,
        replacement?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByApplyingTransform_reverse(
      NSStringTransform transform, bool reverse) {
    final _ret = _lib._objc_msgSend_68(
        _id, _lib._sel_stringByApplyingTransform_reverse_1, transform, reverse);
    return NSString._(_ret, _lib);
  }

  bool writeToURL_atomically_encoding_error(
      NSObject? url,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_69(
        _id,
        _lib._sel_writeToURL_atomically_encoding_error_1,
        url?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  bool writeToFile_atomically_encoding_error(
      NSObject? path,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_69(
        _id,
        _lib._sel_writeToFile_atomically_encoding_error_1,
        path?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  int get hash {
    return _lib._objc_msgSend_11(_id, _lib._sel_hash1);
  }

  NSString initWithCharactersNoCopy_length_freeWhenDone(
      ffi.Pointer<unichar> characters, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_70(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSString._(_ret, _lib);
  }

  NSString initWithCharactersNoCopy_length_deallocator(
      ffi.Pointer<unichar> chars, int len, ObjCBlock4 deallocator) {
    final _ret = _lib._objc_msgSend_71(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator._impl);
    return NSString._(_ret, _lib);
  }

  NSString initWithCharacters_length(
      ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_72(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib);
  }

  NSString initWithUTF8String(ffi.Pointer<pkg_ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_73(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib);
  }

  NSString initWithString(NSObject? aString) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithString_1, aString?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat(NSObject? format) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat_arguments(NSObject? format, va_list argList) {
    final _ret = _lib._objc_msgSend_74(
        _id,
        _lib._sel_initWithFormat_arguments_1,
        format?._id ?? ffi.nullptr,
        argList);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat_locale(NSObject? format, NSObject locale) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithFormat_locale_1,
        format?._id ?? ffi.nullptr, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat_locale_arguments(
      NSObject? format, NSObject locale, va_list argList) {
    final _ret = _lib._objc_msgSend_76(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format?._id ?? ffi.nullptr,
        locale._id,
        argList);
    return NSString._(_ret, _lib);
  }

  NSString initWithData_encoding(NSObject? data, int encoding) {
    final _ret = _lib._objc_msgSend_77(_id, _lib._sel_initWithData_encoding_1,
        data?._id ?? ffi.nullptr, encoding);
    return NSString._(_ret, _lib);
  }

  NSString initWithBytes_length_encoding(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding) {
    final _ret = _lib._objc_msgSend_78(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return NSString._(_ret, _lib);
  }

  NSString initWithBytesNoCopy_length_encoding_freeWhenDone(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_79(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return NSString._(_ret, _lib);
  }

  NSString initWithBytesNoCopy_length_encoding_deallocator(
      ffi.Pointer<ffi.Void> bytes,
      int len,
      int encoding,
      ObjCBlock3 deallocator) {
    final _ret = _lib._objc_msgSend_80(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator._impl);
    return NSString._(_ret, _lib);
  }

  static NSString string(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSString1, _lib._sel_string1);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithString(NativeLibrary _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithCharacters_length(
      NativeLibrary _lib, ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_72(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithUTF8String(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_73(_lib._class_NSString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithFormat(NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  static NSString localizedStringWithFormat(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString initWithCString_encoding(
      ffi.Pointer<pkg_ffi.Char> nullTerminatedCString, int encoding) {
    final _ret = _lib._objc_msgSend_81(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfURL_encoding_error(
      NSObject? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _id,
        _lib._sel_initWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfFile_encoding_error(
      NSObject? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfURL_encoding_error(NativeLibrary _lib,
      NSObject? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfFile_encoding_error(NativeLibrary _lib,
      NSObject? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfURL_usedEncoding_error(
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfFile_usedEncoding_error(
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfURL_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfFile_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion(
          NativeLibrary _lib,
          NSObject? data,
          NSObject? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Uint8> usedLossyConversion) {
    return _lib._objc_msgSend_84(
        _lib._class_NSString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  NSObject propertyList() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_propertyList1);
    return NSObject._(_ret, _lib);
  }

  NSDictionary propertyListFromStringsFileFormat() {
    final _ret = _lib._objc_msgSend_94(
        _id, _lib._sel_propertyListFromStringsFileFormat1);
    return NSDictionary._(_ret, _lib);
  }

  void cString() {
    _lib._objc_msgSend_0(_id, _lib._sel_cString1);
  }

  void lossyCString() {
    _lib._objc_msgSend_0(_id, _lib._sel_lossyCString1);
  }

  int cStringLength() {
    return _lib._objc_msgSend_11(_id, _lib._sel_cStringLength1);
  }

  void getCString(ffi.Pointer<pkg_ffi.Char> bytes) {
    _lib._objc_msgSend_95(_id, _lib._sel_getCString_1, bytes);
  }

  void getCString_maxLength(ffi.Pointer<pkg_ffi.Char> bytes, int maxLength) {
    _lib._objc_msgSend_96(
        _id, _lib._sel_getCString_maxLength_1, bytes, maxLength);
  }

  void getCString_maxLength_range_remainingRange(
      ffi.Pointer<pkg_ffi.Char> bytes,
      int maxLength,
      NSRange aRange,
      NSRangePointer leftoverRange) {
    _lib._objc_msgSend_97(
        _id,
        _lib._sel_getCString_maxLength_range_remainingRange_1,
        bytes,
        maxLength,
        aRange,
        leftoverRange);
  }

  bool writeToFile_atomically(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  NSObject initWithContentsOfFile(NSObject? path) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithContentsOfURL(NSObject? url) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithContentsOfFile(NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithContentsOfURL(NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithCStringNoCopy_length_freeWhenDone(
      ffi.Pointer<pkg_ffi.Char> bytes, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_98(
        _id,
        _lib._sel_initWithCStringNoCopy_length_freeWhenDone_1,
        bytes,
        length,
        freeBuffer);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithCString_length(ffi.Pointer<pkg_ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_81(
        _id, _lib._sel_initWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithCString(ffi.Pointer<pkg_ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_73(_id, _lib._sel_initWithCString_1, bytes);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString_length(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_73(
        _lib._class_NSString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib);
  }

  void getCharacters(ffi.Pointer<unichar> buffer) {
    _lib._objc_msgSend_99(_id, _lib._sel_getCharacters_1, buffer);
  }

  NSString stringByAddingPercentEncodingWithAllowedCharacters(
      NSObject? allowedCharacters) {
    final _ret = _lib._objc_msgSend_26(
        _id,
        _lib._sel_stringByAddingPercentEncodingWithAllowedCharacters_1,
        allowedCharacters?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSObject? get stringByRemovingPercentEncoding {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_stringByRemovingPercentEncoding1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString stringByAddingPercentEscapesUsingEncoding(int enc) {
    final _ret = _lib._objc_msgSend_12(
        _id, _lib._sel_stringByAddingPercentEscapesUsingEncoding_1, enc);
    return NSString._(_ret, _lib);
  }

  NSString stringByReplacingPercentEscapesUsingEncoding(int enc) {
    final _ret = _lib._objc_msgSend_12(
        _id, _lib._sel_stringByReplacingPercentEscapesUsingEncoding_1, enc);
    return NSString._(_ret, _lib);
  }

  NSString substringFromIndex1(int from) {
    final _ret =
        _lib._objc_msgSend_12(_id, _lib._sel_substringFromIndex_1, from);
    return NSString._(_ret, _lib);
  }

  NSString substringToIndex1(int to) {
    final _ret = _lib._objc_msgSend_12(_id, _lib._sel_substringToIndex_1, to);
    return NSString._(_ret, _lib);
  }

  NSString substringWithRange1(NSRange range) {
    final _ret =
        _lib._objc_msgSend_13(_id, _lib._sel_substringWithRange_1, range);
    return NSString._(_ret, _lib);
  }

  void getCharacters_range1(ffi.Pointer<unichar> buffer, NSRange range) {
    _lib._objc_msgSend_14(_id, _lib._sel_getCharacters_range_1, buffer, range);
  }

  int compare1(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_compare_1, string?._id ?? ffi.nullptr);
  }

  int compare_options1(NSObject? string, int mask) {
    return _lib._objc_msgSend_16(
        _id, _lib._sel_compare_options_1, string?._id ?? ffi.nullptr, mask);
  }

  int compare_options_range1(
      NSObject? string, int mask, NSRange rangeOfReceiverToCompare) {
    return _lib._objc_msgSend_17(_id, _lib._sel_compare_options_range_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare);
  }

  int compare_options_range_locale1(NSObject? string, int mask,
      NSRange rangeOfReceiverToCompare, NSObject locale) {
    return _lib._objc_msgSend_18(_id, _lib._sel_compare_options_range_locale_1,
        string?._id ?? ffi.nullptr, mask, rangeOfReceiverToCompare, locale._id);
  }

  int caseInsensitiveCompare1(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_caseInsensitiveCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCompare1(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_localizedCompare_1, string?._id ?? ffi.nullptr);
  }

  int localizedCaseInsensitiveCompare1(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id,
        _lib._sel_localizedCaseInsensitiveCompare_1,
        string?._id ?? ffi.nullptr);
  }

  int localizedStandardCompare1(NSObject? string) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_localizedStandardCompare_1, string?._id ?? ffi.nullptr);
  }

  bool isEqualToString1(NSObject? aString) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToString_1, aString?._id ?? ffi.nullptr);
  }

  bool hasPrefix1(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_hasPrefix_1, str?._id ?? ffi.nullptr);
  }

  bool hasSuffix1(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_hasSuffix_1, str?._id ?? ffi.nullptr);
  }

  NSString commonPrefixWithString_options1(NSObject? str, int mask) {
    final _ret = _lib._objc_msgSend_19(
        _id,
        _lib._sel_commonPrefixWithString_options_1,
        str?._id ?? ffi.nullptr,
        mask);
    return NSString._(_ret, _lib);
  }

  bool containsString1(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_containsString_1, str?._id ?? ffi.nullptr);
  }

  bool localizedCaseInsensitiveContainsString1(NSObject? str) {
    return _lib._objc_msgSend_4(
        _id,
        _lib._sel_localizedCaseInsensitiveContainsString_1,
        str?._id ?? ffi.nullptr);
  }

  bool localizedStandardContainsString1(NSObject? str) {
    return _lib._objc_msgSend_4(_id,
        _lib._sel_localizedStandardContainsString_1, str?._id ?? ffi.nullptr);
  }

  NSRange localizedStandardRangeOfString1(NSObject? str) {
    return _lib._objc_msgSend_20(_id,
        _lib._sel_localizedStandardRangeOfString_1, str?._id ?? ffi.nullptr);
  }

  NSRange rangeOfString1(NSObject? searchString) {
    return _lib._objc_msgSend_20(
        _id, _lib._sel_rangeOfString_1, searchString?._id ?? ffi.nullptr);
  }

  NSRange rangeOfString_options1(NSObject? searchString, int mask) {
    return _lib._objc_msgSend_21(_id, _lib._sel_rangeOfString_options_1,
        searchString?._id ?? ffi.nullptr, mask);
  }

  NSRange rangeOfString_options_range1(
      NSObject? searchString, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_22(_id, _lib._sel_rangeOfString_options_range_1,
        searchString?._id ?? ffi.nullptr, mask, rangeOfReceiverToSearch);
  }

  NSRange rangeOfString_options_range_locale1(NSObject? searchString, int mask,
      NSRange rangeOfReceiverToSearch, NSObject? locale) {
    return _lib._objc_msgSend_23(
        _id,
        _lib._sel_rangeOfString_options_range_locale_1,
        searchString?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch,
        locale?._id ?? ffi.nullptr);
  }

  NSRange rangeOfCharacterFromSet1(NSObject? searchSet) {
    return _lib._objc_msgSend_20(_id, _lib._sel_rangeOfCharacterFromSet_1,
        searchSet?._id ?? ffi.nullptr);
  }

  NSRange rangeOfCharacterFromSet_options1(NSObject? searchSet, int mask) {
    return _lib._objc_msgSend_21(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_1,
        searchSet?._id ?? ffi.nullptr,
        mask);
  }

  NSRange rangeOfCharacterFromSet_options_range1(
      NSObject? searchSet, int mask, NSRange rangeOfReceiverToSearch) {
    return _lib._objc_msgSend_22(
        _id,
        _lib._sel_rangeOfCharacterFromSet_options_range_1,
        searchSet?._id ?? ffi.nullptr,
        mask,
        rangeOfReceiverToSearch);
  }

  NSRange rangeOfComposedCharacterSequenceAtIndex1(int index) {
    return _lib._objc_msgSend_24(
        _id, _lib._sel_rangeOfComposedCharacterSequenceAtIndex_1, index);
  }

  NSRange rangeOfComposedCharacterSequencesForRange1(NSRange range) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_rangeOfComposedCharacterSequencesForRange_1, range);
  }

  NSString stringByAppendingString1(NSObject? aString) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_stringByAppendingString_1, aString?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByAppendingFormat1(NSObject? format) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_stringByAppendingFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  double get doubleValue1 {
    return _lib._objc_msgSend_27(_id, _lib._sel_doubleValue1);
  }

  double get floatValue1 {
    return _lib._objc_msgSend_28(_id, _lib._sel_floatValue1);
  }

  int get intValue1 {
    return _lib._objc_msgSend_29(_id, _lib._sel_intValue1);
  }

  int get integerValue1 {
    return _lib._objc_msgSend_30(_id, _lib._sel_integerValue1);
  }

  int get longLongValue1 {
    return _lib._objc_msgSend_31(_id, _lib._sel_longLongValue1);
  }

  bool get boolValue1 {
    return _lib._objc_msgSend_10(_id, _lib._sel_boolValue1);
  }

  NSObject? get uppercaseString1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_uppercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get lowercaseString1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_lowercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get capitalizedString1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_capitalizedString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedUppercaseString1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedUppercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedLowercaseString1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedLowercaseString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedCapitalizedString1 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_localizedCapitalizedString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString uppercaseStringWithLocale1(NSObject? locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_uppercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString lowercaseStringWithLocale1(NSObject? locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_lowercaseStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString capitalizedStringWithLocale1(NSObject? locale) {
    final _ret = _lib._objc_msgSend_26(_id,
        _lib._sel_capitalizedStringWithLocale_1, locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  void getLineStart_end_contentsEnd_forRange1(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> lineEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    _lib._objc_msgSend_32(
        _id,
        _lib._sel_getLineStart_end_contentsEnd_forRange_1,
        startPtr,
        lineEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange lineRangeForRange1(NSRange range) {
    return _lib._objc_msgSend_25(_id, _lib._sel_lineRangeForRange_1, range);
  }

  void getParagraphStart_end_contentsEnd_forRange1(
      ffi.Pointer<NSUInteger> startPtr,
      ffi.Pointer<NSUInteger> parEndPtr,
      ffi.Pointer<NSUInteger> contentsEndPtr,
      NSRange range) {
    _lib._objc_msgSend_32(
        _id,
        _lib._sel_getParagraphStart_end_contentsEnd_forRange_1,
        startPtr,
        parEndPtr,
        contentsEndPtr,
        range);
  }

  NSRange paragraphRangeForRange1(NSRange range) {
    return _lib._objc_msgSend_25(
        _id, _lib._sel_paragraphRangeForRange_1, range);
  }

  void enumerateSubstringsInRange_options_usingBlock1(
      NSRange range, int opts, ObjCBlock block) {
    _lib._objc_msgSend_33(
        _id,
        _lib._sel_enumerateSubstringsInRange_options_usingBlock_1,
        range,
        opts,
        block._impl);
  }

  void enumerateLinesUsingBlock1(ObjCBlock1 block) {
    _lib._objc_msgSend_34(
        _id, _lib._sel_enumerateLinesUsingBlock_1, block._impl);
  }

  ffi.Pointer<pkg_ffi.Char> get UTF8String1 {
    return _lib._objc_msgSend_35(_id, _lib._sel_UTF8String1);
  }

  int get fastestEncoding1 {
    return _lib._objc_msgSend_11(_id, _lib._sel_fastestEncoding1);
  }

  int get smallestEncoding1 {
    return _lib._objc_msgSend_11(_id, _lib._sel_smallestEncoding1);
  }

  NSData dataUsingEncoding_allowLossyConversion1(int encoding, bool lossy) {
    final _ret = _lib._objc_msgSend_55(_id,
        _lib._sel_dataUsingEncoding_allowLossyConversion_1, encoding, lossy);
    return NSData._(_ret, _lib);
  }

  NSData dataUsingEncoding1(int encoding) {
    final _ret =
        _lib._objc_msgSend_56(_id, _lib._sel_dataUsingEncoding_1, encoding);
    return NSData._(_ret, _lib);
  }

  bool canBeConvertedToEncoding1(int encoding) {
    return _lib._objc_msgSend_57(
        _id, _lib._sel_canBeConvertedToEncoding_1, encoding);
  }

  void cStringUsingEncoding1(int encoding) {
    _lib._objc_msgSend_58(_id, _lib._sel_cStringUsingEncoding_1, encoding);
  }

  bool getCString_maxLength_encoding1(
      ffi.Pointer<pkg_ffi.Char> buffer, int maxBufferCount, int encoding) {
    return _lib._objc_msgSend_59(_id, _lib._sel_getCString_maxLength_encoding_1,
        buffer, maxBufferCount, encoding);
  }

  bool getBytes_maxLength_usedLength_encoding_options_range_remainingRange1(
      ffi.Pointer<ffi.Void> buffer,
      int maxBufferCount,
      ffi.Pointer<NSUInteger> usedBufferCount,
      int encoding,
      int options,
      NSRange range,
      NSRangePointer leftover) {
    return _lib._objc_msgSend_60(
        _id,
        _lib._sel_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_1,
        buffer,
        maxBufferCount,
        usedBufferCount,
        encoding,
        options,
        range,
        leftover);
  }

  int maximumLengthOfBytesUsingEncoding1(int enc) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_maximumLengthOfBytesUsingEncoding_1, enc);
  }

  int lengthOfBytesUsingEncoding1(int enc) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_lengthOfBytesUsingEncoding_1, enc);
  }

  static ffi.Pointer<NSStringEncoding> getAvailableStringEncodings1(
      NativeLibrary _lib) {
    return _lib._objc_msgSend_62(
        _lib._class_NSString1, _lib._sel_availableStringEncodings1);
  }

  static NSString localizedNameOfStringEncoding1(
      NativeLibrary _lib, int encoding) {
    final _ret = _lib._objc_msgSend_12(_lib._class_NSString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib);
  }

  static int getDefaultCStringEncoding1(NativeLibrary _lib) {
    return _lib._objc_msgSend_11(
        _lib._class_NSString1, _lib._sel_defaultCStringEncoding1);
  }

  NSObject? get decomposedStringWithCanonicalMapping1 {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_decomposedStringWithCanonicalMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get precomposedStringWithCanonicalMapping1 {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_precomposedStringWithCanonicalMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get decomposedStringWithCompatibilityMapping1 {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_decomposedStringWithCompatibilityMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get precomposedStringWithCompatibilityMapping1 {
    final _ret = _lib._objc_msgSend_1(
        _id, _lib._sel_precomposedStringWithCompatibilityMapping1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString stringByTrimmingCharactersInSet1(NSObject? set) {
    final _ret = _lib._objc_msgSend_26(_id,
        _lib._sel_stringByTrimmingCharactersInSet_1, set?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByPaddingToLength_withString_startingAtIndex1(
      int newLength, NSObject? padString, int padIndex) {
    final _ret = _lib._objc_msgSend_63(
        _id,
        _lib._sel_stringByPaddingToLength_withString_startingAtIndex_1,
        newLength,
        padString?._id ?? ffi.nullptr,
        padIndex);
    return NSString._(_ret, _lib);
  }

  NSString stringByFoldingWithOptions_locale1(int options, NSObject? locale) {
    final _ret = _lib._objc_msgSend_64(
        _id,
        _lib._sel_stringByFoldingWithOptions_locale_1,
        options,
        locale?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByReplacingOccurrencesOfString_withString_options_range1(
      NSObject? target,
      NSObject? replacement,
      int options,
      NSRange searchRange) {
    final _ret = _lib._objc_msgSend_65(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
    return NSString._(_ret, _lib);
  }

  NSString stringByReplacingOccurrencesOfString_withString1(
      NSObject? target, NSObject? replacement) {
    final _ret = _lib._objc_msgSend_66(
        _id,
        _lib._sel_stringByReplacingOccurrencesOfString_withString_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByReplacingCharactersInRange_withString1(
      NSRange range, NSObject? replacement) {
    final _ret = _lib._objc_msgSend_67(
        _id,
        _lib._sel_stringByReplacingCharactersInRange_withString_1,
        range,
        replacement?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString stringByApplyingTransform_reverse1(
      NSStringTransform transform, bool reverse) {
    final _ret = _lib._objc_msgSend_68(
        _id, _lib._sel_stringByApplyingTransform_reverse_1, transform, reverse);
    return NSString._(_ret, _lib);
  }

  bool writeToURL_atomically_encoding_error1(
      NSObject? url,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_69(
        _id,
        _lib._sel_writeToURL_atomically_encoding_error_1,
        url?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  bool writeToFile_atomically_encoding_error1(
      NSObject? path,
      bool useAuxiliaryFile,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_69(
        _id,
        _lib._sel_writeToFile_atomically_encoding_error_1,
        path?._id ?? ffi.nullptr,
        useAuxiliaryFile,
        enc,
        error);
  }

  NSObject? get description1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  int get hash1 {
    return _lib._objc_msgSend_11(_id, _lib._sel_hash1);
  }

  NSString initWithCharactersNoCopy_length_freeWhenDone1(
      ffi.Pointer<unichar> characters, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_70(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_freeWhenDone_1,
        characters,
        length,
        freeBuffer);
    return NSString._(_ret, _lib);
  }

  NSString initWithCharactersNoCopy_length_deallocator1(
      ffi.Pointer<unichar> chars, int len, ObjCBlock4 deallocator) {
    final _ret = _lib._objc_msgSend_71(
        _id,
        _lib._sel_initWithCharactersNoCopy_length_deallocator_1,
        chars,
        len,
        deallocator._impl);
    return NSString._(_ret, _lib);
  }

  NSString initWithCharacters_length1(
      ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_72(
        _id, _lib._sel_initWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib);
  }

  NSString initWithUTF8String1(
      ffi.Pointer<pkg_ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_73(
        _id, _lib._sel_initWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib);
  }

  NSString initWithString1(NSObject? aString) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithString_1, aString?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat1(NSObject? format) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat_arguments1(NSObject? format, va_list argList) {
    final _ret = _lib._objc_msgSend_74(
        _id,
        _lib._sel_initWithFormat_arguments_1,
        format?._id ?? ffi.nullptr,
        argList);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat_locale1(NSObject? format, NSObject locale) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithFormat_locale_1,
        format?._id ?? ffi.nullptr, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString initWithFormat_locale_arguments1(
      NSObject? format, NSObject locale, va_list argList) {
    final _ret = _lib._objc_msgSend_76(
        _id,
        _lib._sel_initWithFormat_locale_arguments_1,
        format?._id ?? ffi.nullptr,
        locale._id,
        argList);
    return NSString._(_ret, _lib);
  }

  NSString initWithData_encoding1(NSObject? data, int encoding) {
    final _ret = _lib._objc_msgSend_77(_id, _lib._sel_initWithData_encoding_1,
        data?._id ?? ffi.nullptr, encoding);
    return NSString._(_ret, _lib);
  }

  NSString initWithBytes_length_encoding1(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding) {
    final _ret = _lib._objc_msgSend_78(
        _id, _lib._sel_initWithBytes_length_encoding_1, bytes, len, encoding);
    return NSString._(_ret, _lib);
  }

  NSString initWithBytesNoCopy_length_encoding_freeWhenDone1(
      ffi.Pointer<ffi.Void> bytes, int len, int encoding, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_79(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_freeWhenDone_1,
        bytes,
        len,
        encoding,
        freeBuffer);
    return NSString._(_ret, _lib);
  }

  NSString initWithBytesNoCopy_length_encoding_deallocator1(
      ffi.Pointer<ffi.Void> bytes,
      int len,
      int encoding,
      ObjCBlock3 deallocator) {
    final _ret = _lib._objc_msgSend_80(
        _id,
        _lib._sel_initWithBytesNoCopy_length_encoding_deallocator_1,
        bytes,
        len,
        encoding,
        deallocator._impl);
    return NSString._(_ret, _lib);
  }

  static NSString string1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSString1, _lib._sel_string1);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithString1(NativeLibrary _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithCharacters_length1(
      NativeLibrary _lib, ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_72(_lib._class_NSString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithUTF8String1(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_73(_lib._class_NSString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithFormat1(NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  static NSString localizedStringWithFormat1(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSString initWithCString_encoding1(
      ffi.Pointer<pkg_ffi.Char> nullTerminatedCString, int encoding) {
    final _ret = _lib._objc_msgSend_81(_id,
        _lib._sel_initWithCString_encoding_1, nullTerminatedCString, encoding);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithCString_encoding1(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfURL_encoding_error1(
      NSObject? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _id,
        _lib._sel_initWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfFile_encoding_error1(
      NSObject? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _id,
        _lib._sel_initWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfURL_encoding_error1(NativeLibrary _lib,
      NSObject? url, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfFile_encoding_error1(NativeLibrary _lib,
      NSObject? path, int enc, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfURL_usedEncoding_error1(
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _id,
        _lib._sel_initWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  NSString initWithContentsOfFile_usedEncoding_error1(
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _id,
        _lib._sel_initWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfURL_usedEncoding_error1(
      NativeLibrary _lib,
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static NSString stringWithContentsOfFile_usedEncoding_error1(
      NativeLibrary _lib,
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSString._(_ret, _lib);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion1(
          NativeLibrary _lib,
          NSObject? data,
          NSObject? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Uint8> usedLossyConversion) {
    return _lib._objc_msgSend_84(
        _lib._class_NSString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  NSObject propertyList1() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_propertyList1);
    return NSObject._(_ret, _lib);
  }

  NSDictionary propertyListFromStringsFileFormat1() {
    final _ret = _lib._objc_msgSend_94(
        _id, _lib._sel_propertyListFromStringsFileFormat1);
    return NSDictionary._(_ret, _lib);
  }

  void cString1() {
    _lib._objc_msgSend_0(_id, _lib._sel_cString1);
  }

  void lossyCString1() {
    _lib._objc_msgSend_0(_id, _lib._sel_lossyCString1);
  }

  int cStringLength1() {
    return _lib._objc_msgSend_11(_id, _lib._sel_cStringLength1);
  }

  void getCString1(ffi.Pointer<pkg_ffi.Char> bytes) {
    _lib._objc_msgSend_95(_id, _lib._sel_getCString_1, bytes);
  }

  void getCString_maxLength1(ffi.Pointer<pkg_ffi.Char> bytes, int maxLength) {
    _lib._objc_msgSend_96(
        _id, _lib._sel_getCString_maxLength_1, bytes, maxLength);
  }

  void getCString_maxLength_range_remainingRange1(
      ffi.Pointer<pkg_ffi.Char> bytes,
      int maxLength,
      NSRange aRange,
      NSRangePointer leftoverRange) {
    _lib._objc_msgSend_97(
        _id,
        _lib._sel_getCString_maxLength_range_remainingRange_1,
        bytes,
        maxLength,
        aRange,
        leftoverRange);
  }

  bool writeToFile_atomically1(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically1(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  NSObject initWithContentsOfFile1(NSObject? path) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithContentsOfURL1(NSObject? url) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithContentsOfFile1(
      NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithContentsOfURL1(NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithCStringNoCopy_length_freeWhenDone1(
      ffi.Pointer<pkg_ffi.Char> bytes, int length, bool freeBuffer) {
    final _ret = _lib._objc_msgSend_98(
        _id,
        _lib._sel_initWithCStringNoCopy_length_freeWhenDone_1,
        bytes,
        length,
        freeBuffer);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithCString_length1(
      ffi.Pointer<pkg_ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_81(
        _id, _lib._sel_initWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithCString1(ffi.Pointer<pkg_ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_73(_id, _lib._sel_initWithCString_1, bytes);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString_length1(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString1(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_73(
        _lib._class_NSString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib);
  }

  void getCharacters1(ffi.Pointer<unichar> buffer) {
    _lib._objc_msgSend_99(_id, _lib._sel_getCharacters_1, buffer);
  }
}

extension StringToNSString on String {
  NSString toNSString(NativeLibrary lib) => NSString(lib, this);
}

typedef NSRange = _NSRange;

class _NSRange extends ffi.Struct {
  @NSUInteger()
  external int location;

  @NSUInteger()
  external int length;
}

typedef unichar = pkg_ffi.UnsignedShort;

abstract class NSStringCompareOptions {
  static const int NSCaseInsensitiveSearch = 1;
  static const int NSLiteralSearch = 2;
  static const int NSBackwardsSearch = 4;
  static const int NSAnchoredSearch = 8;
  static const int NSNumericSearch = 64;
  static const int NSDiacriticInsensitiveSearch = 128;
  static const int NSWidthInsensitiveSearch = 256;
  static const int NSForcedOrderingSearch = 512;
  static const int NSRegularExpressionSearch = 1024;
}

abstract class NSStringEnumerationOptions {
  static const int NSStringEnumerationByLines = 0;
  static const int NSStringEnumerationByParagraphs = 1;
  static const int NSStringEnumerationByComposedCharacterSequences = 2;
  static const int NSStringEnumerationByWords = 3;
  static const int NSStringEnumerationBySentences = 4;
  static const int NSStringEnumerationByCaretPositions = 5;
  static const int NSStringEnumerationByDeletionClusters = 6;
  static const int NSStringEnumerationReverse = 256;
  static const int NSStringEnumerationSubstringNotRequired = 512;
  static const int NSStringEnumerationLocalized = 1024;
}

void _ObjCBlock_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    NSRange arg1,
    NSRange arg2,
    ffi.Pointer<ffi.Uint8> arg3) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                  NSRange arg2, ffi.Pointer<ffi.Uint8> arg3)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              NSRange arg1,
              NSRange arg2,
              ffi.Pointer<ffi.Uint8> arg3)>()(arg0, arg1, arg2, arg3);
}

class ObjCBlock {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock._(this._impl, this._lib);

  ObjCBlock.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSRange arg1,
                      NSRange arg2, ffi.Pointer<ffi.Uint8> arg3)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSRange arg1,
                            NSRange arg2,
                            ffi.Pointer<ffi.Uint8> arg3)>(
                    _ObjCBlock_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class _ObjCBlockDesc extends ffi.Struct {
  @pkg_ffi.UnsignedLong()
  external int reserved;

  @pkg_ffi.UnsignedLong()
  external int size;

  external ffi.Pointer<ffi.Void> copy_helper;

  external ffi.Pointer<ffi.Void> dispose_helper;

  external ffi.Pointer<pkg_ffi.Char> signature;
}

class _ObjCBlock extends ffi.Struct {
  external ffi.Pointer<ffi.Void> isa;

  @pkg_ffi.Int()
  external int flags;

  @pkg_ffi.Int()
  external int reserved;

  external ffi.Pointer<ffi.Void> invoke;

  external ffi.Pointer<_ObjCBlockDesc> descriptor;

  external ffi.Pointer<ffi.Void> target;
}

void _ObjCBlock1_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Uint8> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ffi.Uint8> arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ffi.Uint8> arg1)>()(arg0, arg1);
}

class ObjCBlock1 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock1._(this._impl, this._lib);

  ObjCBlock1.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ffi.Uint8> arg1)>>
          ptr)
      : _impl =
            _lib._newBlock1(
                ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                ffi.Pointer<ffi.Uint8> arg1)>(
                        _ObjCBlock1_fnPtrTrampoline)
                    .cast(),
                ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSStringEncoding = NSUInteger;

/// Immutable Data
class NSData extends NSObject {
  NSData._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSData castFrom<T extends _ObjCWrapper>(T other) {
    return NSData._(other._id, other._lib);
  }

  static NSData castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSData._(other, lib);
  }

  int get length {
    return _lib._objc_msgSend_11(_id, _lib._sel_length1);
  }

  ffi.Pointer<ffi.Void> get bytes {
    return _lib._objc_msgSend_36(_id, _lib._sel_bytes1);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  void getBytes_length(ffi.Pointer<ffi.Void> buffer, int length) {
    _lib._objc_msgSend_37(_id, _lib._sel_getBytes_length_1, buffer, length);
  }

  void getBytes_range(ffi.Pointer<ffi.Void> buffer, NSRange range) {
    _lib._objc_msgSend_38(_id, _lib._sel_getBytes_range_1, buffer, range);
  }

  bool isEqualToData(NSObject? other) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToData_1, other?._id ?? ffi.nullptr);
  }

  NSData subdataWithRange(NSRange range) {
    final _ret =
        _lib._objc_msgSend_39(_id, _lib._sel_subdataWithRange_1, range);
    return NSData._(_ret, _lib);
  }

  bool writeToFile_atomically(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  bool writeToFile_options_error(NSObject? path, int writeOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    return _lib._objc_msgSend_41(_id, _lib._sel_writeToFile_options_error_1,
        path?._id ?? ffi.nullptr, writeOptionsMask, errorPtr);
  }

  bool writeToURL_options_error(NSObject? url, int writeOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    return _lib._objc_msgSend_41(_id, _lib._sel_writeToURL_options_error_1,
        url?._id ?? ffi.nullptr, writeOptionsMask, errorPtr);
  }

  NSRange rangeOfData_options_range(
      NSObject? dataToFind, int mask, NSRange searchRange) {
    return _lib._objc_msgSend_42(_id, _lib._sel_rangeOfData_options_range_1,
        dataToFind?._id ?? ffi.nullptr, mask, searchRange);
  }

  void enumerateByteRangesUsingBlock(ObjCBlock2 block) {
    _lib._objc_msgSend_43(
        _id, _lib._sel_enumerateByteRangesUsingBlock_1, block._impl);
  }

  static NSData data(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSData1, _lib._sel_data1);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithBytes_length(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(
        _lib._class_NSData1, _lib._sel_dataWithBytes_length_1, bytes, length);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithBytesNoCopy_length(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(_lib._class_NSData1,
        _lib._sel_dataWithBytesNoCopy_length_1, bytes, length);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithBytesNoCopy_length_freeWhenDone(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _lib._objc_msgSend_45(_lib._class_NSData1,
        _lib._sel_dataWithBytesNoCopy_length_freeWhenDone_1, bytes, length, b);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithContentsOfFile_options_error(
      NativeLibrary _lib,
      NSObject? path,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSData1,
        _lib._sel_dataWithContentsOfFile_options_error_1,
        path?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithContentsOfURL_options_error(
      NativeLibrary _lib,
      NSObject? url,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSData1,
        _lib._sel_dataWithContentsOfURL_options_error_1,
        url?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithContentsOfFile(NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSData1,
        _lib._sel_dataWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithContentsOfURL(NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSData1,
        _lib._sel_dataWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib);
  }

  NSData initWithBytes_length(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(
        _id, _lib._sel_initWithBytes_length_1, bytes, length);
    return NSData._(_ret, _lib);
  }

  NSData initWithBytesNoCopy_length(ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(
        _id, _lib._sel_initWithBytesNoCopy_length_1, bytes, length);
    return NSData._(_ret, _lib);
  }

  NSData initWithBytesNoCopy_length_freeWhenDone(
      ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _lib._objc_msgSend_45(_id,
        _lib._sel_initWithBytesNoCopy_length_freeWhenDone_1, bytes, length, b);
    return NSData._(_ret, _lib);
  }

  NSData initWithBytesNoCopy_length_deallocator(
      ffi.Pointer<ffi.Void> bytes, int length, ObjCBlock3 deallocator) {
    final _ret = _lib._objc_msgSend_48(
        _id,
        _lib._sel_initWithBytesNoCopy_length_deallocator_1,
        bytes,
        length,
        deallocator._impl);
    return NSData._(_ret, _lib);
  }

  NSData initWithContentsOfFile_options_error(NSObject? path,
      int readOptionsMask, ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _id,
        _lib._sel_initWithContentsOfFile_options_error_1,
        path?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib);
  }

  NSData initWithContentsOfURL_options_error(NSObject? url, int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _id,
        _lib._sel_initWithContentsOfURL_options_error_1,
        url?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSData._(_ret, _lib);
  }

  NSData initWithContentsOfFile(NSObject? path) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib);
  }

  NSData initWithContentsOfURL(NSObject? url) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib);
  }

  NSData initWithData(NSObject? data) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithData_1, data?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib);
  }

  static NSData dataWithData(NativeLibrary _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSData1,
        _lib._sel_dataWithData_1, data?._id ?? ffi.nullptr);
    return NSData._(_ret, _lib);
  }

  NSData initWithBase64EncodedString_options(
      NSObject? base64String, int options) {
    final _ret = _lib._objc_msgSend_49(
        _id,
        _lib._sel_initWithBase64EncodedString_options_1,
        base64String?._id ?? ffi.nullptr,
        options);
    return NSData._(_ret, _lib);
  }

  NSString base64EncodedStringWithOptions(int options) {
    final _ret = _lib._objc_msgSend_50(
        _id, _lib._sel_base64EncodedStringWithOptions_1, options);
    return NSString._(_ret, _lib);
  }

  NSData initWithBase64EncodedData_options(NSObject? base64Data, int options) {
    final _ret = _lib._objc_msgSend_49(
        _id,
        _lib._sel_initWithBase64EncodedData_options_1,
        base64Data?._id ?? ffi.nullptr,
        options);
    return NSData._(_ret, _lib);
  }

  NSData base64EncodedDataWithOptions(int options) {
    final _ret = _lib._objc_msgSend_51(
        _id, _lib._sel_base64EncodedDataWithOptions_1, options);
    return NSData._(_ret, _lib);
  }

  NSData decompressedDataUsingAlgorithm_error(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_52(_id,
        _lib._sel_decompressedDataUsingAlgorithm_error_1, algorithm, error);
    return NSData._(_ret, _lib);
  }

  NSData compressedDataUsingAlgorithm_error(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_52(
        _id, _lib._sel_compressedDataUsingAlgorithm_error_1, algorithm, error);
    return NSData._(_ret, _lib);
  }

  void getBytes(ffi.Pointer<ffi.Void> buffer) {
    _lib._objc_msgSend_53(_id, _lib._sel_getBytes_1, buffer);
  }

  static NSObject dataWithContentsOfMappedFile(
      NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSData1,
        _lib._sel_dataWithContentsOfMappedFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithContentsOfMappedFile(NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_id,
        _lib._sel_initWithContentsOfMappedFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject initWithBase64Encoding(NSObject? base64String) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_initWithBase64Encoding_1,
        base64String?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSString base64Encoding() {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_base64Encoding1);
    return NSString._(_ret, _lib);
  }

  static NSData new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSData1, _lib._sel_new1);
    return NSData._(_ret, _lib);
  }

  static NSData alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSData1, _lib._sel_alloc1);
    return NSData._(_ret, _lib);
  }
}

abstract class NSDataWritingOptions {
  static const int NSDataWritingAtomic = 1;
  static const int NSDataWritingWithoutOverwriting = 2;
  static const int NSDataWritingFileProtectionNone = 268435456;
  static const int NSDataWritingFileProtectionComplete = 536870912;
  static const int NSDataWritingFileProtectionCompleteUnlessOpen = 805306368;
  static const int
      NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication =
      1073741824;
  static const int NSDataWritingFileProtectionMask = 4026531840;
  static const int NSAtomicWrite = 1;
}

/// Data Search Options
abstract class NSDataSearchOptions {
  static const int NSDataSearchBackwards = 1;
  static const int NSDataSearchAnchored = 2;
}

void _ObjCBlock2_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ffi.Void> arg0, NSRange arg1, ffi.Pointer<ffi.Uint8> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> arg0, NSRange arg1,
                  ffi.Pointer<ffi.Uint8> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ffi.Void> arg0, NSRange arg1,
              ffi.Pointer<ffi.Uint8> arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock2 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock2._(this._impl, this._lib);

  ObjCBlock2.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> arg0, NSRange arg1,
                      ffi.Pointer<ffi.Uint8> arg2)>>
          ptr)
      : _impl =
            _lib
                ._newBlock1(
                    ffi.Pointer.fromFunction<
                                ffi.Void Function(
                                    ffi.Pointer<_ObjCBlock> block,
                                    ffi.Pointer<ffi.Void> arg0,
                                    NSRange arg1,
                                    ffi.Pointer<ffi.Uint8> arg2)>(
                            _ObjCBlock2_fnPtrTrampoline)
                        .cast(),
                    ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

/// Read/Write Options
abstract class NSDataReadingOptions {
  static const int NSDataReadingMappedIfSafe = 1;
  static const int NSDataReadingUncached = 2;
  static const int NSDataReadingMappedAlways = 8;
  static const int NSDataReadingMapped = 1;
  static const int NSMappedRead = 1;
  static const int NSUncachedRead = 2;
}

void _ObjCBlock3_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ffi.Void> arg0, int arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<ffi.Void> arg0, int arg1)>()(arg0, arg1);
}

class ObjCBlock3 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock3._(this._impl, this._lib);

  ObjCBlock3.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ffi.Void> arg0, NSUInteger arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<ffi.Void> arg0,
                        NSUInteger arg1)>(_ObjCBlock3_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSDataBase64DecodingOptions {
  static const int NSDataBase64DecodingIgnoreUnknownCharacters = 1;
}

/// Base 64 Options
abstract class NSDataBase64EncodingOptions {
  static const int NSDataBase64Encoding64CharacterLineLength = 1;
  static const int NSDataBase64Encoding76CharacterLineLength = 2;
  static const int NSDataBase64EncodingEndLineWithCarriageReturn = 16;
  static const int NSDataBase64EncodingEndLineWithLineFeed = 32;
}

abstract class NSDataCompressionAlgorithm {
  static const int NSDataCompressionAlgorithmLZFSE = 0;
  static const int NSDataCompressionAlgorithmLZ4 = 1;
  static const int NSDataCompressionAlgorithmLZMA = 2;
  static const int NSDataCompressionAlgorithmZlib = 3;
}

abstract class NSStringEncodingConversionOptions {
  static const int NSStringEncodingConversionAllowLossy = 1;
  static const int NSStringEncodingConversionExternalRepresentation = 2;
}

typedef NSRangePointer = ffi.Pointer<NSRange>;
typedef NSStringTransform = ffi.Pointer<ObjCObject>;
void _ObjCBlock4_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<unichar> arg0, int arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<unichar> arg0, NSUInteger arg1)>>()
      .asFunction<
          void Function(ffi.Pointer<unichar> arg0, int arg1)>()(arg0, arg1);
}

class ObjCBlock4 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock4._(this._impl, this._lib);

  ObjCBlock4.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<unichar> arg0, NSUInteger arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<unichar> arg0,
                        NSUInteger arg1)>(_ObjCBlock4_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

/// Immutable Dictionary
class NSDictionary extends NSObject {
  NSDictionary._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSDictionary._(other._id, other._lib);
  }

  static NSDictionary castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSDictionary._(other, lib);
  }

  int get count {
    return _lib._objc_msgSend_11(_id, _lib._sel_count1);
  }

  NSObject objectForKey(NSObject aKey) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_objectForKey_1, aKey._id);
    return NSObject._(_ret, _lib);
  }

  @override
  NSDictionary init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjects_forKeys_count(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(
        _id, _lib._sel_initWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSObject? get allKeys {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allKeys1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allValues {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allValues1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get descriptionInStringsFileFormat {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  bool isEqualToDictionary(NSObject? otherDictionary) {
    return _lib._objc_msgSend_4(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  bool writeToURL_error(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void getObjects_andKeys_count(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    _lib._objc_msgSend_88(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript(NSObject key) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib);
  }

  void enumerateKeysAndObjectsUsingBlock(ObjCBlock5 block) {
    _lib._objc_msgSend_89(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._impl);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock(
      int opts, ObjCBlock5 block) {
    _lib._objc_msgSend_90(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._impl);
  }

  /// This method is unsafe because it could potentially cause buffer overruns. You should use -getObjects:andKeys:count:
  void getObjects_andKeys(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    _lib._objc_msgSend_91(_id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  bool writeToFile_atomically(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObject_forKey(
      NativeLibrary _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count(
      NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjectsAndKeys(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithDictionary(
      NativeLibrary _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys(
      NativeLibrary _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjectsAndKeys(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary(NSObject? otherDictionary) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary_copyItems(
      NSObject? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjects_forKeys(NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr, keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSObject sharedKeySetForKeys(NativeLibrary _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  int countByEnumeratingWithState_objects_count(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_93(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  NSObject? get allKeys1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allKeys1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allValues1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allValues1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get description1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get descriptionInStringsFileFormat1 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale1(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent1(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  bool isEqualToDictionary1(NSObject? otherDictionary) {
    return _lib._objc_msgSend_4(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  bool writeToURL_error1(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void getObjects_andKeys_count1(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    _lib._objc_msgSend_88(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript1(NSObject key) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib);
  }

  void enumerateKeysAndObjectsUsingBlock1(ObjCBlock5 block) {
    _lib._objc_msgSend_89(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._impl);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock1(
      int opts, ObjCBlock5 block) {
    _lib._objc_msgSend_90(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._impl);
  }

  void getObjects_andKeys1(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    _lib._objc_msgSend_91(_id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  bool writeToFile_atomically1(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically1(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObject_forKey1(
      NativeLibrary _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count1(
      NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjectsAndKeys1(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithDictionary1(
      NativeLibrary _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys1(
      NativeLibrary _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjectsAndKeys1(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary1(NSObject? otherDictionary) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary_copyItems1(
      NSObject? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjects_forKeys1(NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr, keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSObject sharedKeySetForKeys1(NativeLibrary _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  int countByEnumeratingWithState_objects_count1(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_93(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  NSObject? get allKeys2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allKeys1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allValues2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allValues1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get description2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get descriptionInStringsFileFormat2 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale2(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent2(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  bool isEqualToDictionary2(NSObject? otherDictionary) {
    return _lib._objc_msgSend_4(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  bool writeToURL_error2(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void getObjects_andKeys_count2(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    _lib._objc_msgSend_88(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript2(NSObject key) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib);
  }

  void enumerateKeysAndObjectsUsingBlock2(ObjCBlock5 block) {
    _lib._objc_msgSend_89(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._impl);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock2(
      int opts, ObjCBlock5 block) {
    _lib._objc_msgSend_90(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._impl);
  }

  void getObjects_andKeys2(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    _lib._objc_msgSend_91(_id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  bool writeToFile_atomically2(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically2(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary2(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObject_forKey2(
      NativeLibrary _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count2(
      NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjectsAndKeys2(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithDictionary2(
      NativeLibrary _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys2(
      NativeLibrary _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjectsAndKeys2(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary2(NSObject? otherDictionary) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary_copyItems2(
      NSObject? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjects_forKeys2(NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr, keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSObject sharedKeySetForKeys2(NativeLibrary _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  int countByEnumeratingWithState_objects_count2(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_93(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  NSObject? get allKeys3 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allKeys1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allValues3 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allValues1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get description3 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get descriptionInStringsFileFormat3 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale3(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent3(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  bool isEqualToDictionary3(NSObject? otherDictionary) {
    return _lib._objc_msgSend_4(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  bool writeToURL_error3(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void getObjects_andKeys_count3(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    _lib._objc_msgSend_88(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript3(NSObject key) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib);
  }

  void enumerateKeysAndObjectsUsingBlock3(ObjCBlock5 block) {
    _lib._objc_msgSend_89(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._impl);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock3(
      int opts, ObjCBlock5 block) {
    _lib._objc_msgSend_90(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._impl);
  }

  void getObjects_andKeys3(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    _lib._objc_msgSend_91(_id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  bool writeToFile_atomically3(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically3(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary3(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObject_forKey3(
      NativeLibrary _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count3(
      NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjectsAndKeys3(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithDictionary3(
      NativeLibrary _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys3(
      NativeLibrary _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjectsAndKeys3(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary3(NSObject? otherDictionary) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary_copyItems3(
      NSObject? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjects_forKeys3(NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr, keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSObject sharedKeySetForKeys3(NativeLibrary _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  int countByEnumeratingWithState_objects_count3(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_93(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  NSObject? get allKeys4 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allKeys1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allValues4 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allValues1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get description4 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get descriptionInStringsFileFormat4 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale4(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent4(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  bool isEqualToDictionary4(NSObject? otherDictionary) {
    return _lib._objc_msgSend_4(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  bool writeToURL_error4(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void getObjects_andKeys_count4(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    _lib._objc_msgSend_88(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript4(NSObject key) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib);
  }

  void enumerateKeysAndObjectsUsingBlock4(ObjCBlock5 block) {
    _lib._objc_msgSend_89(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._impl);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock4(
      int opts, ObjCBlock5 block) {
    _lib._objc_msgSend_90(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._impl);
  }

  /// This method is unsafe because it could potentially cause buffer overruns. You should use -getObjects:andKeys:count:
  void getObjects_andKeys4(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    _lib._objc_msgSend_91(_id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  bool writeToFile_atomically4(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically4(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary4(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObject_forKey4(
      NativeLibrary _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count4(
      NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjectsAndKeys4(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithDictionary4(
      NativeLibrary _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys4(
      NativeLibrary _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjectsAndKeys4(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary4(NSObject? otherDictionary) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary_copyItems4(
      NSObject? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjects_forKeys4(NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr, keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSObject sharedKeySetForKeys4(NativeLibrary _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  int countByEnumeratingWithState_objects_count4(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_93(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  NSObject? get allKeys5 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allKeys1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allValues5 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allValues1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get description5 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get descriptionInStringsFileFormat5 {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_descriptionInStringsFileFormat1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale5(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent5(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  bool isEqualToDictionary5(NSObject? otherDictionary) {
    return _lib._objc_msgSend_4(_id, _lib._sel_isEqualToDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  bool writeToURL_error5(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void getObjects_andKeys_count5(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys, int count) {
    _lib._objc_msgSend_88(
        _id, _lib._sel_getObjects_andKeys_count_1, objects, keys, count);
  }

  NSObject objectForKeyedSubscript5(NSObject key) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_objectForKeyedSubscript_1, key._id);
    return NSObject._(_ret, _lib);
  }

  void enumerateKeysAndObjectsUsingBlock5(ObjCBlock5 block) {
    _lib._objc_msgSend_89(
        _id, _lib._sel_enumerateKeysAndObjectsUsingBlock_1, block._impl);
  }

  void enumerateKeysAndObjectsWithOptions_usingBlock5(
      int opts, ObjCBlock5 block) {
    _lib._objc_msgSend_90(
        _id,
        _lib._sel_enumerateKeysAndObjectsWithOptions_usingBlock_1,
        opts,
        block._impl);
  }

  void getObjects_andKeys5(ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys) {
    _lib._objc_msgSend_91(_id, _lib._sel_getObjects_andKeys_1, objects, keys);
  }

  bool writeToFile_atomically5(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically5(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSDictionary dictionary5(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_dictionary1);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObject_forKey5(
      NativeLibrary _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys_count5(
      NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjectsAndKeys5(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithDictionary5(
      NativeLibrary _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary dictionaryWithObjects_forKeys5(
      NativeLibrary _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjectsAndKeys5(NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithObjectsAndKeys_1, firstObject._id);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary5(NSObject? otherDictionary) {
    final _ret = _lib._objc_msgSend_47(_id, _lib._sel_initWithDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithDictionary_copyItems5(
      NSObject? otherDictionary, bool flag) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initWithDictionary_copyItems_1,
        otherDictionary?._id ?? ffi.nullptr,
        flag);
    return NSDictionary._(_ret, _lib);
  }

  NSDictionary initWithObjects_forKeys5(NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr, keys?._id ?? ffi.nullptr);
    return NSDictionary._(_ret, _lib);
  }

  static NSObject sharedKeySetForKeys5(NativeLibrary _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  int countByEnumeratingWithState_objects_count5(
      ffi.Pointer<NSFastEnumerationState> state,
      ffi.Pointer<ffi.Pointer<ObjCObject>> buffer,
      int len) {
    return _lib._objc_msgSend_93(
        _id,
        _lib._sel_countByEnumeratingWithState_objects_count_1,
        state,
        buffer,
        len);
  }

  static NSDictionary new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_new1);
    return NSDictionary._(_ret, _lib);
  }

  static NSDictionary alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDictionary1, _lib._sel_alloc1);
    return NSDictionary._(_ret, _lib);
  }
}

void _ObjCBlock5_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ffi.Uint8> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1, ffi.Pointer<ffi.Uint8> arg2)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ffi.Uint8> arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock5 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock5._(this._impl, this._lib);

  ObjCBlock5.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ffi.Uint8> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ffi.Uint8> arg2)>(
                    _ObjCBlock5_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSFastEnumerationState extends ffi.Struct {
  @pkg_ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<ffi.Pointer<ObjCObject>> itemsPtr;

  external ffi.Pointer<pkg_ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<pkg_ffi.UnsignedLong> extra;
}

class NSEnumerator extends NSObject {
  NSEnumerator._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSEnumerator castFrom<T extends _ObjCWrapper>(T other) {
    return NSEnumerator._(other._id, other._lib);
  }

  static NSEnumerator castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSEnumerator._(other, lib);
  }

  NSObject nextObject() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_nextObject1);
    return NSObject._(_ret, _lib);
  }

  NSObject? get allObjects {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allObjects1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allObjects2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allObjects3 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allObjects4 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allObjects5 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allObjects6 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allObjects7 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allObjects1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSEnumerator new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSEnumerator1, _lib._sel_new1);
    return NSEnumerator._(_ret, _lib);
  }

  static NSEnumerator alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSEnumerator1, _lib._sel_alloc1);
    return NSEnumerator._(_ret, _lib);
  }
}

class NSValue extends NSObject {
  NSValue._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSValue castFrom<T extends _ObjCWrapper>(T other) {
    return NSValue._(other._id, other._lib);
  }

  static NSValue castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSValue._(other, lib);
  }

  void getValue_size(ffi.Pointer<ffi.Void> value, int size) {
    _lib._objc_msgSend_37(_id, _lib._sel_getValue_size_1, value, size);
  }

  ffi.Pointer<pkg_ffi.Char> get objCType {
    return _lib._objc_msgSend_35(_id, _lib._sel_objCType1);
  }

  NSValue initWithBytes_objCType(
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_104(
        _id, _lib._sel_initWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  NSValue initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithBytes_objCType(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue value_withObjCType(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithNonretainedObject(
      NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib);
  }

  NSObject get nonretainedObjectValue {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_nonretainedObjectValue1);
    return NSObject._(_ret, _lib);
  }

  static NSValue valueWithPointer(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_107(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib);
  }

  ffi.Pointer<ffi.Void> get pointerValue {
    return _lib._objc_msgSend_36(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue(NSObject? value) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToValue_1, value?._id ?? ffi.nullptr);
  }

  void getValue(ffi.Pointer<ffi.Void> value) {
    _lib._objc_msgSend_53(_id, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_108(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib);
  }

  NSRange get rangeValue {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeValue1);
  }

  static NSValue valueWithBytes_objCType1(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue value_withObjCType1(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithNonretainedObject1(
      NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib);
  }

  NSObject get nonretainedObjectValue1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_nonretainedObjectValue1);
    return NSObject._(_ret, _lib);
  }

  static NSValue valueWithPointer1(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_107(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib);
  }

  ffi.Pointer<ffi.Void> get pointerValue1 {
    return _lib._objc_msgSend_36(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue1(NSObject? value) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToValue_1, value?._id ?? ffi.nullptr);
  }

  void getValue1(ffi.Pointer<ffi.Void> value) {
    _lib._objc_msgSend_53(_id, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange1(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_108(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib);
  }

  NSRange get rangeValue1 {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeValue1);
  }

  static NSValue valueWithBytes_objCType2(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue value_withObjCType2(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithNonretainedObject2(
      NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib);
  }

  NSObject get nonretainedObjectValue2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_nonretainedObjectValue1);
    return NSObject._(_ret, _lib);
  }

  static NSValue valueWithPointer2(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_107(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib);
  }

  ffi.Pointer<ffi.Void> get pointerValue2 {
    return _lib._objc_msgSend_36(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue2(NSObject? value) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToValue_1, value?._id ?? ffi.nullptr);
  }

  void getValue2(ffi.Pointer<ffi.Void> value) {
    _lib._objc_msgSend_53(_id, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange2(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_108(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib);
  }

  NSRange get rangeValue2 {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeValue1);
  }

  static NSValue valueWithBytes_objCType3(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue value_withObjCType3(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSValue1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithNonretainedObject3(
      NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSValue1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib);
  }

  NSObject get nonretainedObjectValue3 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_nonretainedObjectValue1);
    return NSObject._(_ret, _lib);
  }

  static NSValue valueWithPointer3(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_107(
        _lib._class_NSValue1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib);
  }

  ffi.Pointer<ffi.Void> get pointerValue3 {
    return _lib._objc_msgSend_36(_id, _lib._sel_pointerValue1);
  }

  bool isEqualToValue3(NSObject? value) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToValue_1, value?._id ?? ffi.nullptr);
  }

  void getValue3(ffi.Pointer<ffi.Void> value) {
    _lib._objc_msgSend_53(_id, _lib._sel_getValue_1, value);
  }

  static NSValue valueWithRange3(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_108(
        _lib._class_NSValue1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib);
  }

  NSRange get rangeValue3 {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeValue1);
  }

  static NSValue new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSValue1, _lib._sel_new1);
    return NSValue._(_ret, _lib);
  }

  static NSValue alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSValue1, _lib._sel_alloc1);
    return NSValue._(_ret, _lib);
  }
}

class NSNumber extends NSValue {
  NSNumber._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSNumber castFrom<T extends _ObjCWrapper>(T other) {
    return NSNumber._(other._id, other._lib);
  }

  static NSNumber castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSNumber._(other, lib);
  }

  @override
  NSNumber initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithChar(int value) {
    final _ret = _lib._objc_msgSend_110(_id, _lib._sel_initWithChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithUnsignedChar(int value) {
    final _ret =
        _lib._objc_msgSend_111(_id, _lib._sel_initWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithShort(int value) {
    final _ret = _lib._objc_msgSend_112(_id, _lib._sel_initWithShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithUnsignedShort(int value) {
    final _ret =
        _lib._objc_msgSend_113(_id, _lib._sel_initWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithInt(int value) {
    final _ret = _lib._objc_msgSend_114(_id, _lib._sel_initWithInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithUnsignedInt(int value) {
    final _ret =
        _lib._objc_msgSend_115(_id, _lib._sel_initWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithLong(int value) {
    final _ret = _lib._objc_msgSend_116(_id, _lib._sel_initWithLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithUnsignedLong(int value) {
    final _ret =
        _lib._objc_msgSend_117(_id, _lib._sel_initWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithLongLong(int value) {
    final _ret =
        _lib._objc_msgSend_118(_id, _lib._sel_initWithLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithUnsignedLongLong(int value) {
    final _ret = _lib._objc_msgSend_119(
        _id, _lib._sel_initWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithFloat(double value) {
    final _ret = _lib._objc_msgSend_120(_id, _lib._sel_initWithFloat_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithDouble(double value) {
    final _ret = _lib._objc_msgSend_121(_id, _lib._sel_initWithDouble_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithBool(bool value) {
    final _ret = _lib._objc_msgSend_122(_id, _lib._sel_initWithBool_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithInteger(int value) {
    final _ret =
        _lib._objc_msgSend_116(_id, _lib._sel_initWithInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  NSNumber initWithUnsignedInteger(int value) {
    final _ret =
        _lib._objc_msgSend_117(_id, _lib._sel_initWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  int get charValue {
    return _lib._objc_msgSend_123(_id, _lib._sel_charValue1);
  }

  int get unsignedCharValue {
    return _lib._objc_msgSend_124(_id, _lib._sel_unsignedCharValue1);
  }

  int get shortValue {
    return _lib._objc_msgSend_125(_id, _lib._sel_shortValue1);
  }

  int get unsignedShortValue {
    return _lib._objc_msgSend_126(_id, _lib._sel_unsignedShortValue1);
  }

  int get intValue {
    return _lib._objc_msgSend_29(_id, _lib._sel_intValue1);
  }

  int get unsignedIntValue {
    return _lib._objc_msgSend_127(_id, _lib._sel_unsignedIntValue1);
  }

  int get longValue {
    return _lib._objc_msgSend_30(_id, _lib._sel_longValue1);
  }

  int get unsignedLongValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_unsignedLongValue1);
  }

  int get longLongValue {
    return _lib._objc_msgSend_31(_id, _lib._sel_longLongValue1);
  }

  int get unsignedLongLongValue {
    return _lib._objc_msgSend_128(_id, _lib._sel_unsignedLongLongValue1);
  }

  double get floatValue {
    return _lib._objc_msgSend_28(_id, _lib._sel_floatValue1);
  }

  double get doubleValue {
    return _lib._objc_msgSend_27(_id, _lib._sel_doubleValue1);
  }

  bool get boolValue {
    return _lib._objc_msgSend_10(_id, _lib._sel_boolValue1);
  }

  int get integerValue {
    return _lib._objc_msgSend_30(_id, _lib._sel_integerValue1);
  }

  int get unsignedIntegerValue {
    return _lib._objc_msgSend_11(_id, _lib._sel_unsignedIntegerValue1);
  }

  NSObject? get stringValue {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_stringValue1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  int compare(NSObject? otherNumber) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_compare_1, otherNumber?._id ?? ffi.nullptr);
  }

  bool isEqualToNumber(NSObject? number) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToNumber_1, number?._id ?? ffi.nullptr);
  }

  NSString descriptionWithLocale(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  static NSNumber numberWithChar(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_110(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedChar(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithShort(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_112(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedShort(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_113(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInt(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_114(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInt(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLong(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLong(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLongLong(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_118(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLongLong(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_119(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithFloat(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_120(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithDouble(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_121(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithBool(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_122(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInteger(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInteger(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithChar1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_110(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedChar1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithShort1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_112(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedShort1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_113(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInt1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_114(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInt1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLong1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLong1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLongLong1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_118(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLongLong1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_119(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithFloat1(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_120(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithDouble1(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_121(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithBool1(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_122(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInteger1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInteger1(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithChar2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_110(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedChar2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithShort2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_112(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedShort2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_113(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInt2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_114(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInt2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLong2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLong2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLongLong2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_118(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLongLong2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_119(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithFloat2(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_120(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithDouble2(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_121(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithBool2(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_122(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInteger2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInteger2(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithChar3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_110(
        _lib._class_NSNumber1, _lib._sel_numberWithChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedChar3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_111(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedChar_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithShort3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_112(
        _lib._class_NSNumber1, _lib._sel_numberWithShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedShort3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_113(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedShort_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInt3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_114(
        _lib._class_NSNumber1, _lib._sel_numberWithInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInt3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_115(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInt_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLong3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLong3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithLongLong3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_118(
        _lib._class_NSNumber1, _lib._sel_numberWithLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedLongLong3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_119(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedLongLong_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithFloat3(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_120(
        _lib._class_NSNumber1, _lib._sel_numberWithFloat_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithDouble3(NativeLibrary _lib, double value) {
    final _ret = _lib._objc_msgSend_121(
        _lib._class_NSNumber1, _lib._sel_numberWithDouble_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithBool3(NativeLibrary _lib, bool value) {
    final _ret = _lib._objc_msgSend_122(
        _lib._class_NSNumber1, _lib._sel_numberWithBool_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithInteger3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_116(
        _lib._class_NSNumber1, _lib._sel_numberWithInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber numberWithUnsignedInteger3(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_117(
        _lib._class_NSNumber1, _lib._sel_numberWithUnsignedInteger_1, value);
    return NSNumber._(_ret, _lib);
  }

  static NSValue valueWithBytes_objCType(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(_lib._class_NSNumber1,
        _lib._sel_valueWithBytes_objCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue value_withObjCType(NativeLibrary _lib,
      ffi.Pointer<ffi.Void> value, ffi.Pointer<pkg_ffi.Char> type) {
    final _ret = _lib._objc_msgSend_105(
        _lib._class_NSNumber1, _lib._sel_value_withObjCType_1, value, type);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithNonretainedObject(
      NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_106(_lib._class_NSNumber1,
        _lib._sel_valueWithNonretainedObject_1, anObject._id);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithPointer(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> pointer) {
    final _ret = _lib._objc_msgSend_107(
        _lib._class_NSNumber1, _lib._sel_valueWithPointer_1, pointer);
    return NSValue._(_ret, _lib);
  }

  static NSValue valueWithRange(NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_108(
        _lib._class_NSNumber1, _lib._sel_valueWithRange_1, range);
    return NSValue._(_ret, _lib);
  }

  static NSNumber new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSNumber1, _lib._sel_new1);
    return NSNumber._(_ret, _lib);
  }

  static NSNumber alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSNumber1, _lib._sel_alloc1);
    return NSNumber._(_ret, _lib);
  }
}

abstract class NSCollectionChangeType {
  static const int NSCollectionChangeInsert = 0;
  static const int NSCollectionChangeRemove = 1;
}

class NSOrderedCollectionChange extends NSObject {
  NSOrderedCollectionChange._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSOrderedCollectionChange castFrom<T extends _ObjCWrapper>(T other) {
    return NSOrderedCollectionChange._(other._id, other._lib);
  }

  static NSOrderedCollectionChange castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSOrderedCollectionChange._(other, lib);
  }

  NSObject get object {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_object1);
    return NSObject._(_ret, _lib);
  }

  int get changeType {
    return _lib._objc_msgSend_129(_id, _lib._sel_changeType1);
  }

  int get index {
    return _lib._objc_msgSend_11(_id, _lib._sel_index1);
  }

  int get associatedIndex {
    return _lib._objc_msgSend_11(_id, _lib._sel_associatedIndex1);
  }

  @override
  NSObject init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSObject._(_ret, _lib);
  }

  NSOrderedCollectionChange initWithObject_type_index(
      NSObject anObject, int type, int index) {
    final _ret = _lib._objc_msgSend_130(
        _id, _lib._sel_initWithObject_type_index_1, anObject._id, type, index);
    return NSOrderedCollectionChange._(_ret, _lib);
  }

  NSOrderedCollectionChange initWithObject_type_index_associatedIndex(
      NSObject anObject, int type, int index, int associatedIndex) {
    final _ret = _lib._objc_msgSend_131(
        _id,
        _lib._sel_initWithObject_type_index_associatedIndex_1,
        anObject._id,
        type,
        index,
        associatedIndex);
    return NSOrderedCollectionChange._(_ret, _lib);
  }

  static NSOrderedCollectionChange new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSOrderedCollectionChange1, _lib._sel_new1);
    return NSOrderedCollectionChange._(_ret, _lib);
  }

  static NSOrderedCollectionChange alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSOrderedCollectionChange1, _lib._sel_alloc1);
    return NSOrderedCollectionChange._(_ret, _lib);
  }
}

class NSIndexSet extends NSObject {
  NSIndexSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSIndexSet._(other._id, other._lib);
  }

  static NSIndexSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSIndexSet._(other, lib);
  }

  static NSIndexSet indexSet(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSIndexSet1, _lib._sel_indexSet1);
    return NSIndexSet._(_ret, _lib);
  }

  static NSIndexSet indexSetWithIndex(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndex_1, value);
    return NSIndexSet._(_ret, _lib);
  }

  static NSIndexSet indexSetWithIndexesInRange(
      NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_133(
        _lib._class_NSIndexSet1, _lib._sel_indexSetWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet initWithIndexesInRange(NSRange range) {
    final _ret =
        _lib._objc_msgSend_133(_id, _lib._sel_initWithIndexesInRange_1, range);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet initWithIndexSet(NSObject? indexSet) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithIndexSet_1, indexSet?._id ?? ffi.nullptr);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet initWithIndex(int value) {
    final _ret = _lib._objc_msgSend_132(_id, _lib._sel_initWithIndex_1, value);
    return NSIndexSet._(_ret, _lib);
  }

  bool isEqualToIndexSet(NSObject? indexSet) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToIndexSet_1, indexSet?._id ?? ffi.nullptr);
  }

  int get count {
    return _lib._objc_msgSend_11(_id, _lib._sel_count1);
  }

  int get firstIndex {
    return _lib._objc_msgSend_11(_id, _lib._sel_firstIndex1);
  }

  int get lastIndex {
    return _lib._objc_msgSend_11(_id, _lib._sel_lastIndex1);
  }

  int indexGreaterThanIndex(int value) {
    return _lib._objc_msgSend_61(_id, _lib._sel_indexGreaterThanIndex_1, value);
  }

  int indexLessThanIndex(int value) {
    return _lib._objc_msgSend_61(_id, _lib._sel_indexLessThanIndex_1, value);
  }

  int indexGreaterThanOrEqualToIndex(int value) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_indexGreaterThanOrEqualToIndex_1, value);
  }

  int indexLessThanOrEqualToIndex(int value) {
    return _lib._objc_msgSend_61(
        _id, _lib._sel_indexLessThanOrEqualToIndex_1, value);
  }

  int getIndexes_maxCount_inIndexRange(ffi.Pointer<NSUInteger> indexBuffer,
      int bufferSize, NSRangePointer range) {
    return _lib._objc_msgSend_134(
        _id,
        _lib._sel_getIndexes_maxCount_inIndexRange_1,
        indexBuffer,
        bufferSize,
        range);
  }

  int countOfIndexesInRange(NSRange range) {
    return _lib._objc_msgSend_135(
        _id, _lib._sel_countOfIndexesInRange_1, range);
  }

  bool containsIndex(int value) {
    return _lib._objc_msgSend_57(_id, _lib._sel_containsIndex_1, value);
  }

  bool containsIndexesInRange(NSRange range) {
    return _lib._objc_msgSend_136(
        _id, _lib._sel_containsIndexesInRange_1, range);
  }

  bool containsIndexes(NSObject? indexSet) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_containsIndexes_1, indexSet?._id ?? ffi.nullptr);
  }

  bool intersectsIndexesInRange(NSRange range) {
    return _lib._objc_msgSend_136(
        _id, _lib._sel_intersectsIndexesInRange_1, range);
  }

  void enumerateIndexesUsingBlock(ObjCBlock6 block) {
    _lib._objc_msgSend_137(
        _id, _lib._sel_enumerateIndexesUsingBlock_1, block._impl);
  }

  void enumerateIndexesWithOptions_usingBlock(int opts, ObjCBlock6 block) {
    _lib._objc_msgSend_138(_id,
        _lib._sel_enumerateIndexesWithOptions_usingBlock_1, opts, block._impl);
  }

  void enumerateIndexesInRange_options_usingBlock(
      NSRange range, int opts, ObjCBlock6 block) {
    _lib._objc_msgSend_139(
        _id,
        _lib._sel_enumerateIndexesInRange_options_usingBlock_1,
        range,
        opts,
        block._impl);
  }

  int indexPassingTest(ObjCBlock7 predicate) {
    return _lib._objc_msgSend_140(
        _id, _lib._sel_indexPassingTest_1, predicate._impl);
  }

  int indexWithOptions_passingTest(int opts, ObjCBlock7 predicate) {
    return _lib._objc_msgSend_141(
        _id, _lib._sel_indexWithOptions_passingTest_1, opts, predicate._impl);
  }

  int indexInRange_options_passingTest(
      NSRange range, int opts, ObjCBlock7 predicate) {
    return _lib._objc_msgSend_142(
        _id,
        _lib._sel_indexInRange_options_passingTest_1,
        range,
        opts,
        predicate._impl);
  }

  NSIndexSet indexesPassingTest(ObjCBlock7 predicate) {
    final _ret = _lib._objc_msgSend_143(
        _id, _lib._sel_indexesPassingTest_1, predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesWithOptions_passingTest(int opts, ObjCBlock7 predicate) {
    final _ret = _lib._objc_msgSend_144(
        _id, _lib._sel_indexesWithOptions_passingTest_1, opts, predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesInRange_options_passingTest(
      NSRange range, int opts, ObjCBlock7 predicate) {
    final _ret = _lib._objc_msgSend_145(
        _id,
        _lib._sel_indexesInRange_options_passingTest_1,
        range,
        opts,
        predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  void enumerateRangesUsingBlock(ObjCBlock8 block) {
    _lib._objc_msgSend_146(
        _id, _lib._sel_enumerateRangesUsingBlock_1, block._impl);
  }

  void enumerateRangesWithOptions_usingBlock(int opts, ObjCBlock8 block) {
    _lib._objc_msgSend_147(_id,
        _lib._sel_enumerateRangesWithOptions_usingBlock_1, opts, block._impl);
  }

  void enumerateRangesInRange_options_usingBlock(
      NSRange range, int opts, ObjCBlock8 block) {
    _lib._objc_msgSend_148(
        _id,
        _lib._sel_enumerateRangesInRange_options_usingBlock_1,
        range,
        opts,
        block._impl);
  }

  static NSIndexSet new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSIndexSet1, _lib._sel_new1);
    return NSIndexSet._(_ret, _lib);
  }

  static NSIndexSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSIndexSet1, _lib._sel_alloc1);
    return NSIndexSet._(_ret, _lib);
  }
}

void _ObjCBlock6_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Uint8> arg1) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSUInteger arg0, ffi.Pointer<ffi.Uint8> arg1)>>()
          .asFunction<void Function(int arg0, ffi.Pointer<ffi.Uint8> arg1)>()(
      arg0, arg1);
}

class ObjCBlock6 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock6._(this._impl, this._lib);

  ObjCBlock6.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSUInteger arg0, ffi.Pointer<ffi.Uint8> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            NSUInteger arg0, ffi.Pointer<ffi.Uint8> arg1)>(
                    _ObjCBlock6_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

int _ObjCBlock7_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, int arg0, ffi.Pointer<ffi.Uint8> arg1) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      NSUInteger arg0, ffi.Pointer<ffi.Uint8> arg1)>>()
          .asFunction<int Function(int arg0, ffi.Pointer<ffi.Uint8> arg1)>()(
      arg0, arg1);
}

class ObjCBlock7 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock7._(this._impl, this._lib);

  ObjCBlock7.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(
                      NSUInteger arg0, ffi.Pointer<ffi.Uint8> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Uint8 Function(ffi.Pointer<_ObjCBlock> block,
                            NSUInteger arg0, ffi.Pointer<ffi.Uint8> arg1)>(
                    _ObjCBlock7_fnPtrTrampoline, 0)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

void _ObjCBlock8_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, NSRange arg0, ffi.Pointer<ffi.Uint8> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(NSRange arg0, ffi.Pointer<ffi.Uint8> arg1)>>()
      .asFunction<
          void Function(
              NSRange arg0, ffi.Pointer<ffi.Uint8> arg1)>()(arg0, arg1);
}

class ObjCBlock8 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock8._(this._impl, this._lib);

  ObjCBlock8.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(NSRange arg0, ffi.Pointer<ffi.Uint8> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            NSRange arg0, ffi.Pointer<ffi.Uint8> arg1)>(
                    _ObjCBlock8_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSMutableIndexSet extends NSIndexSet {
  NSMutableIndexSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMutableIndexSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableIndexSet._(other._id, other._lib);
  }

  static NSMutableIndexSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMutableIndexSet._(other, lib);
  }

  void addIndexes(NSObject? indexSet) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_addIndexes_1, indexSet?._id ?? ffi.nullptr);
  }

  void removeIndexes(NSObject? indexSet) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeIndexes_1, indexSet?._id ?? ffi.nullptr);
  }

  void removeAllIndexes() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllIndexes1);
  }

  void addIndex(int value) {
    _lib._objc_msgSend_58(_id, _lib._sel_addIndex_1, value);
  }

  void removeIndex(int value) {
    _lib._objc_msgSend_58(_id, _lib._sel_removeIndex_1, value);
  }

  void addIndexesInRange(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_addIndexesInRange_1, range);
  }

  void removeIndexesInRange(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_removeIndexesInRange_1, range);
  }

  void shiftIndexesStartingAtIndex_by(int index, int delta) {
    _lib._objc_msgSend_150(
        _id, _lib._sel_shiftIndexesStartingAtIndex_by_1, index, delta);
  }

  static NSMutableIndexSet indexSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSMutableIndexSet1, _lib._sel_indexSet1);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static NSMutableIndexSet indexSetWithIndex(NativeLibrary _lib, int value) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSMutableIndexSet1, _lib._sel_indexSetWithIndex_1, value);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static NSMutableIndexSet indexSetWithIndexesInRange(
      NativeLibrary _lib, NSRange range) {
    final _ret = _lib._objc_msgSend_133(_lib._class_NSMutableIndexSet1,
        _lib._sel_indexSetWithIndexesInRange_1, range);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static NSMutableIndexSet new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableIndexSet1, _lib._sel_new1);
    return NSMutableIndexSet._(_ret, _lib);
  }

  static NSMutableIndexSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableIndexSet1, _lib._sel_alloc1);
    return NSMutableIndexSet._(_ret, _lib);
  }
}

abstract class NSOrderedCollectionDifferenceCalculationOptions {
  static const int NSOrderedCollectionDifferenceCalculationOmitInsertedObjects =
      1;
  static const int NSOrderedCollectionDifferenceCalculationOmitRemovedObjects =
      2;
  static const int NSOrderedCollectionDifferenceCalculationInferMoves = 4;
}

class NSOrderedCollectionDifference extends NSObject {
  NSOrderedCollectionDifference._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSOrderedCollectionDifference castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSOrderedCollectionDifference._(other._id, other._lib);
  }

  static NSOrderedCollectionDifference castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSOrderedCollectionDifference._(other, lib);
  }

  NSOrderedCollectionDifference initWithChanges(NSObject? changes) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithChanges_1, changes?._id ?? ffi.nullptr);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges(
          NSObject? inserts,
          NSObject? insertedObjects,
          NSObject? removes,
          NSObject? removedObjects,
          NSObject? changes) {
    final _ret = _lib._objc_msgSend_151(
        _id,
        _lib._sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_additionalChanges_1,
        inserts?._id ?? ffi.nullptr,
        insertedObjects?._id ?? ffi.nullptr,
        removes?._id ?? ffi.nullptr,
        removedObjects?._id ?? ffi.nullptr,
        changes?._id ?? ffi.nullptr);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  NSOrderedCollectionDifference
      initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects(
          NSObject? inserts,
          NSObject? insertedObjects,
          NSObject? removes,
          NSObject? removedObjects) {
    final _ret = _lib._objc_msgSend_152(
        _id,
        _lib._sel_initWithInsertIndexes_insertedObjects_removeIndexes_removedObjects_1,
        inserts?._id ?? ffi.nullptr,
        insertedObjects?._id ?? ffi.nullptr,
        removes?._id ?? ffi.nullptr,
        removedObjects?._id ?? ffi.nullptr);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  NSObject? get insertions {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_insertions1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get removals {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_removals1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool get hasChanges {
    return _lib._objc_msgSend_10(_id, _lib._sel_hasChanges1);
  }

  NSOrderedCollectionDifference inverseDifference() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_inverseDifference1);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  static NSOrderedCollectionDifference new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSOrderedCollectionDifference1, _lib._sel_new1);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }

  static NSOrderedCollectionDifference alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSOrderedCollectionDifference1, _lib._sel_alloc1);
    return NSOrderedCollectionDifference._(_ret, _lib);
  }
}

/// Immutable Array
class NSArray extends NSObject {
  NSArray._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSArray._(other._id, other._lib);
  }

  static NSArray castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSArray._(other, lib);
  }

  int get count {
    return _lib._objc_msgSend_11(_id, _lib._sel_count1);
  }

  NSObject objectAtIndex(int index) {
    final _ret = _lib._objc_msgSend_132(_id, _lib._sel_objectAtIndex_1, index);
    return NSObject._(_ret, _lib);
  }

  @override
  NSArray init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithObjects_count(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_153(
        _id, _lib._sel_initWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib);
  }

  NSString componentsJoinedByString(NSObject? separator) {
    final _ret = _lib._objc_msgSend_26(_id,
        _lib._sel_componentsJoinedByString_1, separator?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  bool containsObject(NSObject anObject) {
    return _lib._objc_msgSend_4(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  NSObject firstObjectCommonWithArray(NSObject? otherArray) {
    final _ret = _lib._objc_msgSend_47(_id,
        _lib._sel_firstObjectCommonWithArray_1, otherArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  void getObjects_range(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, NSRange range) {
    _lib._objc_msgSend_154(_id, _lib._sel_getObjects_range_1, objects, range);
  }

  int indexOfObject(NSObject anObject) {
    return _lib._objc_msgSend_155(_id, _lib._sel_indexOfObject_1, anObject._id);
  }

  int indexOfObject_inRange(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_156(
        _id, _lib._sel_indexOfObject_inRange_1, anObject._id, range);
  }

  int indexOfObjectIdenticalTo(NSObject anObject) {
    return _lib._objc_msgSend_155(
        _id, _lib._sel_indexOfObjectIdenticalTo_1, anObject._id);
  }

  int indexOfObjectIdenticalTo_inRange(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_156(
        _id, _lib._sel_indexOfObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  bool isEqualToArray(NSObject? otherArray) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToArray_1, otherArray?._id ?? ffi.nullptr);
  }

  NSObject get firstObject {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib);
  }

  NSObject get lastObject {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib);
  }

  NSObject? get sortedArrayHint {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_sortedArrayHint1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool writeToURL_error(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void makeObjectsPerformSelector(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_6(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    _lib._objc_msgSend_157(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSObject objectAtIndexedSubscript(int idx) {
    final _ret =
        _lib._objc_msgSend_132(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib);
  }

  void enumerateObjectsUsingBlock(ObjCBlock9 block) {
    _lib._objc_msgSend_158(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._impl);
  }

  void enumerateObjectsWithOptions_usingBlock(int opts, ObjCBlock9 block) {
    _lib._objc_msgSend_159(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._impl);
  }

  void enumerateObjectsAtIndexes_options_usingBlock(
      NSObject? s, int opts, ObjCBlock9 block) {
    _lib._objc_msgSend_160(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s?._id ?? ffi.nullptr,
        opts,
        block._impl);
  }

  int indexOfObjectPassingTest(ObjCBlock10 predicate) {
    return _lib._objc_msgSend_161(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._impl);
  }

  int indexOfObjectWithOptions_passingTest(int opts, ObjCBlock10 predicate) {
    return _lib._objc_msgSend_162(
        _id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1,
        opts,
        predicate._impl);
  }

  int indexOfObjectAtIndexes_options_passingTest(
      NSObject? s, int opts, ObjCBlock10 predicate) {
    return _lib._objc_msgSend_163(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
  }

  NSIndexSet indexesOfObjectsPassingTest(ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_164(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest(
      int opts, ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_165(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest(
      NSObject? s, int opts, ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_166(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  int indexOfObject_inSortedRange_options_usingComparator(
      NSObject obj, NSRange r, int opts, NSComparator cmp) {
    return _lib._objc_msgSend_167(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        obj._id,
        r,
        opts,
        cmp);
  }

  static NSArray array(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObject(NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObjects_count(NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_153(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObjects(NativeLibrary _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithArray(NativeLibrary _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithObjects(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_47(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithArray(NSObject? array) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithArray_copyItems(NSObject? array, bool flag) {
    final _ret = _lib._objc_msgSend_92(_id, _lib._sel_initWithArray_copyItems_1,
        array?._id ?? ffi.nullptr, flag);
    return NSArray._(_ret, _lib);
  }

  void getObjects(ffi.Pointer<ffi.Pointer<ObjCObject>> objects) {
    _lib._objc_msgSend_168(_id, _lib._sel_getObjects_1, objects);
  }

  bool writeToFile_atomically(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  NSString componentsJoinedByString1(NSObject? separator) {
    final _ret = _lib._objc_msgSend_26(_id,
        _lib._sel_componentsJoinedByString_1, separator?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  bool containsObject1(NSObject anObject) {
    return _lib._objc_msgSend_4(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSObject? get description1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale1(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent1(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  NSObject firstObjectCommonWithArray1(NSObject? otherArray) {
    final _ret = _lib._objc_msgSend_47(_id,
        _lib._sel_firstObjectCommonWithArray_1, otherArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  void getObjects_range1(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, NSRange range) {
    _lib._objc_msgSend_154(_id, _lib._sel_getObjects_range_1, objects, range);
  }

  int indexOfObject1(NSObject anObject) {
    return _lib._objc_msgSend_155(_id, _lib._sel_indexOfObject_1, anObject._id);
  }

  int indexOfObject_inRange1(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_156(
        _id, _lib._sel_indexOfObject_inRange_1, anObject._id, range);
  }

  int indexOfObjectIdenticalTo1(NSObject anObject) {
    return _lib._objc_msgSend_155(
        _id, _lib._sel_indexOfObjectIdenticalTo_1, anObject._id);
  }

  int indexOfObjectIdenticalTo_inRange1(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_156(
        _id, _lib._sel_indexOfObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  bool isEqualToArray1(NSObject? otherArray) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToArray_1, otherArray?._id ?? ffi.nullptr);
  }

  NSObject get firstObject1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib);
  }

  NSObject get lastObject1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib);
  }

  NSObject? get sortedArrayHint1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_sortedArrayHint1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool writeToURL_error1(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void makeObjectsPerformSelector1(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_6(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject1(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    _lib._objc_msgSend_157(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSObject objectAtIndexedSubscript1(int idx) {
    final _ret =
        _lib._objc_msgSend_132(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib);
  }

  void enumerateObjectsUsingBlock1(ObjCBlock9 block) {
    _lib._objc_msgSend_158(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._impl);
  }

  void enumerateObjectsWithOptions_usingBlock1(int opts, ObjCBlock9 block) {
    _lib._objc_msgSend_159(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._impl);
  }

  void enumerateObjectsAtIndexes_options_usingBlock1(
      NSObject? s, int opts, ObjCBlock9 block) {
    _lib._objc_msgSend_160(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s?._id ?? ffi.nullptr,
        opts,
        block._impl);
  }

  int indexOfObjectPassingTest1(ObjCBlock10 predicate) {
    return _lib._objc_msgSend_161(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._impl);
  }

  int indexOfObjectWithOptions_passingTest1(int opts, ObjCBlock10 predicate) {
    return _lib._objc_msgSend_162(
        _id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1,
        opts,
        predicate._impl);
  }

  int indexOfObjectAtIndexes_options_passingTest1(
      NSObject? s, int opts, ObjCBlock10 predicate) {
    return _lib._objc_msgSend_163(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
  }

  NSIndexSet indexesOfObjectsPassingTest1(ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_164(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest1(
      int opts, ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_165(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest1(
      NSObject? s, int opts, ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_166(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  int indexOfObject_inSortedRange_options_usingComparator1(
      NSObject obj, NSRange r, int opts, NSComparator cmp) {
    return _lib._objc_msgSend_167(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        obj._id,
        r,
        opts,
        cmp);
  }

  static NSArray array1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObject1(NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObjects_count1(NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_153(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObjects1(NativeLibrary _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithArray1(NativeLibrary _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithObjects1(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_47(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithArray1(NSObject? array) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithArray_copyItems1(NSObject? array, bool flag) {
    final _ret = _lib._objc_msgSend_92(_id, _lib._sel_initWithArray_copyItems_1,
        array?._id ?? ffi.nullptr, flag);
    return NSArray._(_ret, _lib);
  }

  void getObjects1(ffi.Pointer<ffi.Pointer<ObjCObject>> objects) {
    _lib._objc_msgSend_168(_id, _lib._sel_getObjects_1, objects);
  }

  bool writeToFile_atomically1(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically1(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  NSString componentsJoinedByString2(NSObject? separator) {
    final _ret = _lib._objc_msgSend_26(_id,
        _lib._sel_componentsJoinedByString_1, separator?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  bool containsObject2(NSObject anObject) {
    return _lib._objc_msgSend_4(_id, _lib._sel_containsObject_1, anObject._id);
  }

  NSObject? get description2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale2(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  NSString descriptionWithLocale_indent2(NSObject locale, int level) {
    final _ret = _lib._objc_msgSend_86(
        _id, _lib._sel_descriptionWithLocale_indent_1, locale._id, level);
    return NSString._(_ret, _lib);
  }

  NSObject firstObjectCommonWithArray2(NSObject? otherArray) {
    final _ret = _lib._objc_msgSend_47(_id,
        _lib._sel_firstObjectCommonWithArray_1, otherArray?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  void getObjects_range2(
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, NSRange range) {
    _lib._objc_msgSend_154(_id, _lib._sel_getObjects_range_1, objects, range);
  }

  int indexOfObject2(NSObject anObject) {
    return _lib._objc_msgSend_155(_id, _lib._sel_indexOfObject_1, anObject._id);
  }

  int indexOfObject_inRange2(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_156(
        _id, _lib._sel_indexOfObject_inRange_1, anObject._id, range);
  }

  int indexOfObjectIdenticalTo2(NSObject anObject) {
    return _lib._objc_msgSend_155(
        _id, _lib._sel_indexOfObjectIdenticalTo_1, anObject._id);
  }

  int indexOfObjectIdenticalTo_inRange2(NSObject anObject, NSRange range) {
    return _lib._objc_msgSend_156(
        _id, _lib._sel_indexOfObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  bool isEqualToArray2(NSObject? otherArray) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToArray_1, otherArray?._id ?? ffi.nullptr);
  }

  NSObject get firstObject2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_firstObject1);
    return NSObject._(_ret, _lib);
  }

  NSObject get lastObject2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_lastObject1);
    return NSObject._(_ret, _lib);
  }

  NSObject? get sortedArrayHint2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_sortedArrayHint1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool writeToURL_error2(
      NSObject? url, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(
        _id, _lib._sel_writeToURL_error_1, url?._id ?? ffi.nullptr, error);
  }

  void makeObjectsPerformSelector2(ffi.Pointer<ObjCSel> aSelector) {
    _lib._objc_msgSend_6(
        _id, _lib._sel_makeObjectsPerformSelector_1, aSelector);
  }

  void makeObjectsPerformSelector_withObject2(
      ffi.Pointer<ObjCSel> aSelector, NSObject argument) {
    _lib._objc_msgSend_157(
        _id,
        _lib._sel_makeObjectsPerformSelector_withObject_1,
        aSelector,
        argument._id);
  }

  NSObject objectAtIndexedSubscript2(int idx) {
    final _ret =
        _lib._objc_msgSend_132(_id, _lib._sel_objectAtIndexedSubscript_1, idx);
    return NSObject._(_ret, _lib);
  }

  void enumerateObjectsUsingBlock2(ObjCBlock9 block) {
    _lib._objc_msgSend_158(
        _id, _lib._sel_enumerateObjectsUsingBlock_1, block._impl);
  }

  void enumerateObjectsWithOptions_usingBlock2(int opts, ObjCBlock9 block) {
    _lib._objc_msgSend_159(_id,
        _lib._sel_enumerateObjectsWithOptions_usingBlock_1, opts, block._impl);
  }

  void enumerateObjectsAtIndexes_options_usingBlock2(
      NSObject? s, int opts, ObjCBlock9 block) {
    _lib._objc_msgSend_160(
        _id,
        _lib._sel_enumerateObjectsAtIndexes_options_usingBlock_1,
        s?._id ?? ffi.nullptr,
        opts,
        block._impl);
  }

  int indexOfObjectPassingTest2(ObjCBlock10 predicate) {
    return _lib._objc_msgSend_161(
        _id, _lib._sel_indexOfObjectPassingTest_1, predicate._impl);
  }

  int indexOfObjectWithOptions_passingTest2(int opts, ObjCBlock10 predicate) {
    return _lib._objc_msgSend_162(
        _id,
        _lib._sel_indexOfObjectWithOptions_passingTest_1,
        opts,
        predicate._impl);
  }

  int indexOfObjectAtIndexes_options_passingTest2(
      NSObject? s, int opts, ObjCBlock10 predicate) {
    return _lib._objc_msgSend_163(
        _id,
        _lib._sel_indexOfObjectAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
  }

  NSIndexSet indexesOfObjectsPassingTest2(ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_164(
        _id, _lib._sel_indexesOfObjectsPassingTest_1, predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesOfObjectsWithOptions_passingTest2(
      int opts, ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_165(
        _id,
        _lib._sel_indexesOfObjectsWithOptions_passingTest_1,
        opts,
        predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  NSIndexSet indexesOfObjectsAtIndexes_options_passingTest2(
      NSObject? s, int opts, ObjCBlock10 predicate) {
    final _ret = _lib._objc_msgSend_166(
        _id,
        _lib._sel_indexesOfObjectsAtIndexes_options_passingTest_1,
        s?._id ?? ffi.nullptr,
        opts,
        predicate._impl);
    return NSIndexSet._(_ret, _lib);
  }

  int indexOfObject_inSortedRange_options_usingComparator2(
      NSObject obj, NSRange r, int opts, NSComparator cmp) {
    return _lib._objc_msgSend_167(
        _id,
        _lib._sel_indexOfObject_inSortedRange_options_usingComparator_1,
        obj._id,
        r,
        opts,
        cmp);
  }

  static NSArray array2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSArray1, _lib._sel_array1);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObject2(NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObjects_count2(NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_153(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithObjects2(NativeLibrary _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSArray1, _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib);
  }

  static NSArray arrayWithArray2(NativeLibrary _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithObjects2(NSObject firstObj) {
    final _ret =
        _lib._objc_msgSend_47(_id, _lib._sel_initWithObjects_1, firstObj._id);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithArray2(NSObject? array) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithArray_1, array?._id ?? ffi.nullptr);
    return NSArray._(_ret, _lib);
  }

  NSArray initWithArray_copyItems2(NSObject? array, bool flag) {
    final _ret = _lib._objc_msgSend_92(_id, _lib._sel_initWithArray_copyItems_1,
        array?._id ?? ffi.nullptr, flag);
    return NSArray._(_ret, _lib);
  }

  void getObjects2(ffi.Pointer<ffi.Pointer<ObjCObject>> objects) {
    _lib._objc_msgSend_168(_id, _lib._sel_getObjects_1, objects);
  }

  bool writeToFile_atomically2(NSObject? path, bool useAuxiliaryFile) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToFile_atomically_1,
        path?._id ?? ffi.nullptr, useAuxiliaryFile);
  }

  bool writeToURL_atomically2(NSObject? url, bool atomically) {
    return _lib._objc_msgSend_40(_id, _lib._sel_writeToURL_atomically_1,
        url?._id ?? ffi.nullptr, atomically);
  }

  static NSArray new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSArray1, _lib._sel_new1);
    return NSArray._(_ret, _lib);
  }

  static NSArray alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSArray1, _lib._sel_alloc1);
    return NSArray._(_ret, _lib);
  }
}

void _ObjCBlock9_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Uint8> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, NSUInteger arg1,
                  ffi.Pointer<ffi.Uint8> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Uint8> arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock9 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock9._(this._impl, this._lib);

  ObjCBlock9.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      NSUInteger arg1, ffi.Pointer<ffi.Uint8> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            NSUInteger arg1,
                            ffi.Pointer<ffi.Uint8> arg2)>(
                    _ObjCBlock9_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

int _ObjCBlock10_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ffi.Uint8> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Uint8 Function(ffi.Pointer<ObjCObject> arg0, NSUInteger arg1,
                  ffi.Pointer<ffi.Uint8> arg2)>>()
      .asFunction<
          int Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ffi.Uint8> arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock10 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock10._(this._impl, this._lib);

  ObjCBlock10.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Uint8 Function(ffi.Pointer<ObjCObject> arg0,
                      NSUInteger arg1, ffi.Pointer<ffi.Uint8> arg2)>>
          ptr)
      : _impl =
            _lib._newBlock1(
                ffi.Pointer.fromFunction<
                            ffi.Uint8 Function(
                                ffi.Pointer<_ObjCBlock> block,
                                ffi.Pointer<ObjCObject> arg0,
                                NSUInteger arg1,
                                ffi.Pointer<ffi.Uint8> arg2)>(
                        _ObjCBlock10_fnPtrTrampoline, 0)
                    .cast(),
                ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

abstract class NSBinarySearchingOptions {
  static const int NSBinarySearchingFirstEqual = 256;
  static const int NSBinarySearchingLastEqual = 512;
  static const int NSBinarySearchingInsertionIndex = 1024;
}

typedef NSComparator = ffi.Pointer<_ObjCBlock>;
int _ObjCBlock11_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, ffi.Pointer<ObjCObject> arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1)>>()
      .asFunction<
          int Function(ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1)>()(arg0, arg1);
}

class ObjCBlock11 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock11._(this._impl, this._lib);

  ObjCBlock11.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Int32 Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1)>(
                    _ObjCBlock11_fnPtrTrampoline, 0)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

/// Mutable Array
class NSMutableArray extends NSArray {
  NSMutableArray._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMutableArray castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableArray._(other._id, other._lib);
  }

  static NSMutableArray castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMutableArray._(other, lib);
  }

  void addObject(NSObject anObject) {
    _lib._objc_msgSend_8(_id, _lib._sel_addObject_1, anObject._id);
  }

  void insertObject_atIndex(NSObject anObject, int index) {
    _lib._objc_msgSend_169(
        _id, _lib._sel_insertObject_atIndex_1, anObject._id, index);
  }

  void removeLastObject() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeLastObject1);
  }

  void removeObjectAtIndex(int index) {
    _lib._objc_msgSend_58(_id, _lib._sel_removeObjectAtIndex_1, index);
  }

  void replaceObjectAtIndex_withObject(int index, NSObject anObject) {
    _lib._objc_msgSend_170(
        _id, _lib._sel_replaceObjectAtIndex_withObject_1, index, anObject._id);
  }

  @override
  NSMutableArray init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSMutableArray._(_ret, _lib);
  }

  NSMutableArray initWithCapacity(int numItems) {
    final _ret =
        _lib._objc_msgSend_132(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib);
  }

  @override
  NSMutableArray initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib);
  }

  void addObjectsFromArray(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_addObjectsFromArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void exchangeObjectAtIndex_withObjectAtIndex(int idx1, int idx2) {
    _lib._objc_msgSend_171(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void removeAllObjects() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange(NSObject anObject, NSRange range) {
    _lib._objc_msgSend_172(
        _id, _lib._sel_removeObject_inRange_1, anObject._id, range);
  }

  void removeObject(NSObject anObject) {
    _lib._objc_msgSend_8(_id, _lib._sel_removeObject_1, anObject._id);
  }

  void removeObjectIdenticalTo_inRange(NSObject anObject, NSRange range) {
    _lib._objc_msgSend_172(
        _id, _lib._sel_removeObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  void removeObjectIdenticalTo(NSObject anObject) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectIdenticalTo_1, anObject._id);
  }

  void removeObjectsFromIndices_numIndices(
      ffi.Pointer<NSUInteger> indices, int cnt) {
    _lib._objc_msgSend_173(
        _id, _lib._sel_removeObjectsFromIndices_numIndices_1, indices, cnt);
  }

  void removeObjectsInArray(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsInArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void removeObjectsInRange(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range(
      NSRange range, NSObject? otherArray, NSRange otherRange) {
    _lib._objc_msgSend_174(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
        range,
        otherArray?._id ?? ffi.nullptr,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray(
      NSRange range, NSObject? otherArray) {
    _lib._objc_msgSend_175(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
        range,
        otherArray?._id ?? ffi.nullptr);
  }

  void setArray(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void sortUsingFunction_context(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    _lib._objc_msgSend_176(
        _id, _lib._sel_sortUsingFunction_context_1, compare, context);
  }

  void sortUsingSelector(ffi.Pointer<ObjCSel> comparator) {
    _lib._objc_msgSend_6(_id, _lib._sel_sortUsingSelector_1, comparator);
  }

  void insertObjects_atIndexes(NSObject? objects, NSObject? indexes) {
    _lib._objc_msgSend_101(_id, _lib._sel_insertObjects_atIndexes_1,
        objects?._id ?? ffi.nullptr, indexes?._id ?? ffi.nullptr);
  }

  void removeObjectsAtIndexes(NSObject? indexes) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
  }

  void replaceObjectsAtIndexes_withObjects(
      NSObject? indexes, NSObject? objects) {
    _lib._objc_msgSend_101(_id, _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes?._id ?? ffi.nullptr, objects?._id ?? ffi.nullptr);
  }

  void setObject_atIndexedSubscript(NSObject obj, int idx) {
    _lib._objc_msgSend_169(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void sortUsingComparator(NSComparator cmptr) {
    _lib._objc_msgSend_177(_id, _lib._sel_sortUsingComparator_1, cmptr);
  }

  void sortWithOptions_usingComparator(int opts, NSComparator cmptr) {
    _lib._objc_msgSend_178(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr);
  }

  static NSMutableArray arrayWithCapacity(NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib);
  }

  void applyDifference(NSObject? difference) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_applyDifference_1, difference?._id ?? ffi.nullptr);
  }

  void addObjectsFromArray1(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_addObjectsFromArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void exchangeObjectAtIndex_withObjectAtIndex1(int idx1, int idx2) {
    _lib._objc_msgSend_171(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void removeAllObjects1() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange1(NSObject anObject, NSRange range) {
    _lib._objc_msgSend_172(
        _id, _lib._sel_removeObject_inRange_1, anObject._id, range);
  }

  void removeObject1(NSObject anObject) {
    _lib._objc_msgSend_8(_id, _lib._sel_removeObject_1, anObject._id);
  }

  void removeObjectIdenticalTo_inRange1(NSObject anObject, NSRange range) {
    _lib._objc_msgSend_172(
        _id, _lib._sel_removeObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  void removeObjectIdenticalTo1(NSObject anObject) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectIdenticalTo_1, anObject._id);
  }

  void removeObjectsFromIndices_numIndices1(
      ffi.Pointer<NSUInteger> indices, int cnt) {
    _lib._objc_msgSend_173(
        _id, _lib._sel_removeObjectsFromIndices_numIndices_1, indices, cnt);
  }

  void removeObjectsInArray1(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsInArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void removeObjectsInRange1(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range1(
      NSRange range, NSObject? otherArray, NSRange otherRange) {
    _lib._objc_msgSend_174(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
        range,
        otherArray?._id ?? ffi.nullptr,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray1(
      NSRange range, NSObject? otherArray) {
    _lib._objc_msgSend_175(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
        range,
        otherArray?._id ?? ffi.nullptr);
  }

  void setArray1(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void sortUsingFunction_context1(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    _lib._objc_msgSend_176(
        _id, _lib._sel_sortUsingFunction_context_1, compare, context);
  }

  void sortUsingSelector1(ffi.Pointer<ObjCSel> comparator) {
    _lib._objc_msgSend_6(_id, _lib._sel_sortUsingSelector_1, comparator);
  }

  void insertObjects_atIndexes1(NSObject? objects, NSObject? indexes) {
    _lib._objc_msgSend_101(_id, _lib._sel_insertObjects_atIndexes_1,
        objects?._id ?? ffi.nullptr, indexes?._id ?? ffi.nullptr);
  }

  void removeObjectsAtIndexes1(NSObject? indexes) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
  }

  void replaceObjectsAtIndexes_withObjects1(
      NSObject? indexes, NSObject? objects) {
    _lib._objc_msgSend_101(_id, _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes?._id ?? ffi.nullptr, objects?._id ?? ffi.nullptr);
  }

  void setObject_atIndexedSubscript1(NSObject obj, int idx) {
    _lib._objc_msgSend_169(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void sortUsingComparator1(NSComparator cmptr) {
    _lib._objc_msgSend_177(_id, _lib._sel_sortUsingComparator_1, cmptr);
  }

  void sortWithOptions_usingComparator1(int opts, NSComparator cmptr) {
    _lib._objc_msgSend_178(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr);
  }

  static NSMutableArray arrayWithCapacity1(NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib);
  }

  void applyDifference1(NSObject? difference) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_applyDifference_1, difference?._id ?? ffi.nullptr);
  }

  void addObjectsFromArray2(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_addObjectsFromArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void exchangeObjectAtIndex_withObjectAtIndex2(int idx1, int idx2) {
    _lib._objc_msgSend_171(
        _id, _lib._sel_exchangeObjectAtIndex_withObjectAtIndex_1, idx1, idx2);
  }

  void removeAllObjects2() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObject_inRange2(NSObject anObject, NSRange range) {
    _lib._objc_msgSend_172(
        _id, _lib._sel_removeObject_inRange_1, anObject._id, range);
  }

  void removeObject2(NSObject anObject) {
    _lib._objc_msgSend_8(_id, _lib._sel_removeObject_1, anObject._id);
  }

  void removeObjectIdenticalTo_inRange2(NSObject anObject, NSRange range) {
    _lib._objc_msgSend_172(
        _id, _lib._sel_removeObjectIdenticalTo_inRange_1, anObject._id, range);
  }

  void removeObjectIdenticalTo2(NSObject anObject) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectIdenticalTo_1, anObject._id);
  }

  void removeObjectsFromIndices_numIndices2(
      ffi.Pointer<NSUInteger> indices, int cnt) {
    _lib._objc_msgSend_173(
        _id, _lib._sel_removeObjectsFromIndices_numIndices_1, indices, cnt);
  }

  void removeObjectsInArray2(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsInArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void removeObjectsInRange2(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_removeObjectsInRange_1, range);
  }

  void replaceObjectsInRange_withObjectsFromArray_range2(
      NSRange range, NSObject? otherArray, NSRange otherRange) {
    _lib._objc_msgSend_174(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_range_1,
        range,
        otherArray?._id ?? ffi.nullptr,
        otherRange);
  }

  void replaceObjectsInRange_withObjectsFromArray2(
      NSRange range, NSObject? otherArray) {
    _lib._objc_msgSend_175(
        _id,
        _lib._sel_replaceObjectsInRange_withObjectsFromArray_1,
        range,
        otherArray?._id ?? ffi.nullptr);
  }

  void setArray2(NSObject? otherArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setArray_1, otherArray?._id ?? ffi.nullptr);
  }

  void sortUsingFunction_context2(
      ffi.Pointer<
              ffi.NativeFunction<
                  NSInteger Function(ffi.Pointer<ObjCObject>,
                      ffi.Pointer<ObjCObject>, ffi.Pointer<ffi.Void>)>>
          compare,
      ffi.Pointer<ffi.Void> context) {
    _lib._objc_msgSend_176(
        _id, _lib._sel_sortUsingFunction_context_1, compare, context);
  }

  void sortUsingSelector2(ffi.Pointer<ObjCSel> comparator) {
    _lib._objc_msgSend_6(_id, _lib._sel_sortUsingSelector_1, comparator);
  }

  void insertObjects_atIndexes2(NSObject? objects, NSObject? indexes) {
    _lib._objc_msgSend_101(_id, _lib._sel_insertObjects_atIndexes_1,
        objects?._id ?? ffi.nullptr, indexes?._id ?? ffi.nullptr);
  }

  void removeObjectsAtIndexes2(NSObject? indexes) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsAtIndexes_1, indexes?._id ?? ffi.nullptr);
  }

  void replaceObjectsAtIndexes_withObjects2(
      NSObject? indexes, NSObject? objects) {
    _lib._objc_msgSend_101(_id, _lib._sel_replaceObjectsAtIndexes_withObjects_1,
        indexes?._id ?? ffi.nullptr, objects?._id ?? ffi.nullptr);
  }

  void setObject_atIndexedSubscript2(NSObject obj, int idx) {
    _lib._objc_msgSend_169(
        _id, _lib._sel_setObject_atIndexedSubscript_1, obj._id, idx);
  }

  void sortUsingComparator2(NSComparator cmptr) {
    _lib._objc_msgSend_177(_id, _lib._sel_sortUsingComparator_1, cmptr);
  }

  void sortWithOptions_usingComparator2(int opts, NSComparator cmptr) {
    _lib._objc_msgSend_178(
        _id, _lib._sel_sortWithOptions_usingComparator_1, opts, cmptr);
  }

  static NSMutableArray arrayWithCapacity2(NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithCapacity_1, numItems);
    return NSMutableArray._(_ret, _lib);
  }

  void applyDifference2(NSObject? difference) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_applyDifference_1, difference?._id ?? ffi.nullptr);
  }

  static NSMutableArray array(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableArray1, _lib._sel_array1);
    return NSMutableArray._(_ret, _lib);
  }

  static NSMutableArray arrayWithObject(NativeLibrary _lib, NSObject anObject) {
    final _ret = _lib._objc_msgSend_47(
        _lib._class_NSMutableArray1, _lib._sel_arrayWithObject_1, anObject._id);
    return NSMutableArray._(_ret, _lib);
  }

  static NSMutableArray arrayWithObjects_count(NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects, int cnt) {
    final _ret = _lib._objc_msgSend_153(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_count_1, objects, cnt);
    return NSMutableArray._(_ret, _lib);
  }

  static NSMutableArray arrayWithObjects(
      NativeLibrary _lib, NSObject firstObj) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithObjects_1, firstObj._id);
    return NSMutableArray._(_ret, _lib);
  }

  static NSMutableArray arrayWithArray(NativeLibrary _lib, NSObject? array) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableArray1,
        _lib._sel_arrayWithArray_1, array?._id ?? ffi.nullptr);
    return NSMutableArray._(_ret, _lib);
  }

  static NSMutableArray new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableArray1, _lib._sel_new1);
    return NSMutableArray._(_ret, _lib);
  }

  static NSMutableArray alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableArray1, _lib._sel_alloc1);
    return NSMutableArray._(_ret, _lib);
  }
}

/// Mutable Data
class NSMutableData extends NSData {
  NSMutableData._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMutableData castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableData._(other._id, other._lib);
  }

  static NSMutableData castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMutableData._(other, lib);
  }

  ffi.Pointer<ffi.Void> get mutableBytes {
    return _lib._objc_msgSend_36(_id, _lib._sel_mutableBytes1);
  }

  @override
  int get length {
    return _lib._objc_msgSend_11(_id, _lib._sel_length1);
  }

  set length(int value) {
    _lib._objc_msgSend_58(_id, _lib._sel_setLength_1, value);
  }

  void appendBytes_length(ffi.Pointer<ffi.Void> bytes, int length) {
    _lib._objc_msgSend_37(_id, _lib._sel_appendBytes_length_1, bytes, length);
  }

  void appendData(NSObject? other) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_appendData_1, other?._id ?? ffi.nullptr);
  }

  void increaseLengthBy(int extraLength) {
    _lib._objc_msgSend_58(_id, _lib._sel_increaseLengthBy_1, extraLength);
  }

  void replaceBytesInRange_withBytes(
      NSRange range, ffi.Pointer<ffi.Void> bytes) {
    _lib._objc_msgSend_179(
        _id, _lib._sel_replaceBytesInRange_withBytes_1, range, bytes);
  }

  void resetBytesInRange(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_resetBytesInRange_1, range);
  }

  void setData(NSObject? data) {
    _lib._objc_msgSend_8(_id, _lib._sel_setData_1, data?._id ?? ffi.nullptr);
  }

  void replaceBytesInRange_withBytes_length(NSRange range,
      ffi.Pointer<ffi.Void> replacementBytes, int replacementLength) {
    _lib._objc_msgSend_180(
        _id,
        _lib._sel_replaceBytesInRange_withBytes_length_1,
        range,
        replacementBytes,
        replacementLength);
  }

  static NSMutableData dataWithCapacity(NativeLibrary _lib, int aNumItems) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSMutableData1, _lib._sel_dataWithCapacity_1, aNumItems);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithLength(NativeLibrary _lib, int length) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSMutableData1, _lib._sel_dataWithLength_1, length);
    return NSMutableData._(_ret, _lib);
  }

  NSMutableData initWithCapacity(int capacity) {
    final _ret =
        _lib._objc_msgSend_132(_id, _lib._sel_initWithCapacity_1, capacity);
    return NSMutableData._(_ret, _lib);
  }

  NSMutableData initWithLength(int length) {
    final _ret =
        _lib._objc_msgSend_132(_id, _lib._sel_initWithLength_1, length);
    return NSMutableData._(_ret, _lib);
  }

  bool decompressUsingAlgorithm_error(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_181(
        _id, _lib._sel_decompressUsingAlgorithm_error_1, algorithm, error);
  }

  bool compressUsingAlgorithm_error(
      int algorithm, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_181(
        _id, _lib._sel_compressUsingAlgorithm_error_1, algorithm, error);
  }

  static NSMutableData data(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableData1, _lib._sel_data1);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithBytes_length(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(_lib._class_NSMutableData1,
        _lib._sel_dataWithBytes_length_1, bytes, length);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithBytesNoCopy_length(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(_lib._class_NSMutableData1,
        _lib._sel_dataWithBytesNoCopy_length_1, bytes, length);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithBytesNoCopy_length_freeWhenDone(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _lib._objc_msgSend_45(_lib._class_NSMutableData1,
        _lib._sel_dataWithBytesNoCopy_length_freeWhenDone_1, bytes, length, b);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithContentsOfFile_options_error(
      NativeLibrary _lib,
      NSObject? path,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfFile_options_error_1,
        path?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithContentsOfURL_options_error(
      NativeLibrary _lib,
      NSObject? url,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfURL_options_error_1,
        url?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithContentsOfFile(
      NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithContentsOfURL(
      NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData dataWithData(NativeLibrary _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableData1,
        _lib._sel_dataWithData_1, data?._id ?? ffi.nullptr);
    return NSMutableData._(_ret, _lib);
  }

  static NSObject dataWithContentsOfMappedFile(
      NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableData1,
        _lib._sel_dataWithContentsOfMappedFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSMutableData new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableData1, _lib._sel_new1);
    return NSMutableData._(_ret, _lib);
  }

  static NSMutableData alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableData1, _lib._sel_alloc1);
    return NSMutableData._(_ret, _lib);
  }
}

/// Purgeable Data
class NSPurgeableData extends NSMutableData {
  NSPurgeableData._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSPurgeableData castFrom<T extends _ObjCWrapper>(T other) {
    return NSPurgeableData._(other._id, other._lib);
  }

  static NSPurgeableData castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSPurgeableData._(other, lib);
  }

  static NSPurgeableData dataWithCapacity(NativeLibrary _lib, int aNumItems) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSPurgeableData1, _lib._sel_dataWithCapacity_1, aNumItems);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithLength(NativeLibrary _lib, int length) {
    final _ret = _lib._objc_msgSend_132(
        _lib._class_NSPurgeableData1, _lib._sel_dataWithLength_1, length);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData data(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSPurgeableData1, _lib._sel_data1);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithBytes_length(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(_lib._class_NSPurgeableData1,
        _lib._sel_dataWithBytes_length_1, bytes, length);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithBytesNoCopy_length(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length) {
    final _ret = _lib._objc_msgSend_44(_lib._class_NSPurgeableData1,
        _lib._sel_dataWithBytesNoCopy_length_1, bytes, length);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithBytesNoCopy_length_freeWhenDone(
      NativeLibrary _lib, ffi.Pointer<ffi.Void> bytes, int length, bool b) {
    final _ret = _lib._objc_msgSend_45(_lib._class_NSPurgeableData1,
        _lib._sel_dataWithBytesNoCopy_length_freeWhenDone_1, bytes, length, b);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithContentsOfFile_options_error(
      NativeLibrary _lib,
      NSObject? path,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSPurgeableData1,
        _lib._sel_dataWithContentsOfFile_options_error_1,
        path?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithContentsOfURL_options_error(
      NativeLibrary _lib,
      NSObject? url,
      int readOptionsMask,
      ffi.Pointer<ffi.Pointer<ObjCObject>> errorPtr) {
    final _ret = _lib._objc_msgSend_46(
        _lib._class_NSPurgeableData1,
        _lib._sel_dataWithContentsOfURL_options_error_1,
        url?._id ?? ffi.nullptr,
        readOptionsMask,
        errorPtr);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithContentsOfFile(
      NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSPurgeableData1,
        _lib._sel_dataWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithContentsOfURL(
      NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSPurgeableData1,
        _lib._sel_dataWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData dataWithData(NativeLibrary _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSPurgeableData1,
        _lib._sel_dataWithData_1, data?._id ?? ffi.nullptr);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSObject dataWithContentsOfMappedFile(
      NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSPurgeableData1,
        _lib._sel_dataWithContentsOfMappedFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSPurgeableData new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSPurgeableData1, _lib._sel_new1);
    return NSPurgeableData._(_ret, _lib);
  }

  static NSPurgeableData alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSPurgeableData1, _lib._sel_alloc1);
    return NSPurgeableData._(_ret, _lib);
  }
}

/// Mutable Dictionary
class NSMutableDictionary extends NSDictionary {
  NSMutableDictionary._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMutableDictionary castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableDictionary._(other._id, other._lib);
  }

  static NSMutableDictionary castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMutableDictionary._(other, lib);
  }

  void removeObjectForKey(NSObject aKey) {
    _lib._objc_msgSend_8(_id, _lib._sel_removeObjectForKey_1, aKey._id);
  }

  void setObject_forKey(NSObject anObject, NSObject aKey) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setObject_forKey_1, anObject._id, aKey._id);
  }

  @override
  NSMutableDictionary init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSMutableDictionary._(_ret, _lib);
  }

  NSMutableDictionary initWithCapacity(int numItems) {
    final _ret =
        _lib._objc_msgSend_132(_id, _lib._sel_initWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  @override
  NSMutableDictionary initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib);
  }

  void addEntriesFromDictionary(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys(NSObject? keyArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript(NSObject obj, NSObject key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity(
      NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  void addEntriesFromDictionary1(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects1() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys1(NSObject? keyArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary1(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript1(NSObject obj, NSObject key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity1(
      NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  void addEntriesFromDictionary2(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects2() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys2(NSObject? keyArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary2(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript2(NSObject obj, NSObject key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity2(
      NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  void addEntriesFromDictionary3(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects3() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys3(NSObject? keyArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary3(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript3(NSObject obj, NSObject key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity3(
      NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  void addEntriesFromDictionary4(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects4() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys4(NSObject? keyArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary4(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript4(NSObject obj, NSObject key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity4(
      NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  void addEntriesFromDictionary5(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(_id, _lib._sel_addEntriesFromDictionary_1,
        otherDictionary?._id ?? ffi.nullptr);
  }

  void removeAllObjects5() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllObjects1);
  }

  void removeObjectsForKeys5(NSObject? keyArray) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeObjectsForKeys_1, keyArray?._id ?? ffi.nullptr);
  }

  void setDictionary5(NSObject? otherDictionary) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setDictionary_1, otherDictionary?._id ?? ffi.nullptr);
  }

  void setObject_forKeyedSubscript5(NSObject obj, NSObject key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setObject_forKeyedSubscript_1, obj._id, key._id);
  }

  static NSMutableDictionary dictionaryWithCapacity5(
      NativeLibrary _lib, int numItems) {
    final _ret = _lib._objc_msgSend_132(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithCapacity_1, numItems);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSMutableDictionary dictionary(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSMutableDictionary1, _lib._sel_dictionary1);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSMutableDictionary dictionaryWithObject_forKey(
      NativeLibrary _lib, NSObject object, NSObject key) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObject_forKey_1, object._id, key._id);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys_count(
      NativeLibrary _lib,
      ffi.Pointer<ffi.Pointer<ObjCObject>> objects,
      ffi.Pointer<ffi.Pointer<ObjCObject>> keys,
      int cnt) {
    final _ret = _lib._objc_msgSend_85(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_count_1, objects, keys, cnt);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSMutableDictionary dictionaryWithObjectsAndKeys(
      NativeLibrary _lib, NSObject firstObject) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjectsAndKeys_1, firstObject._id);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSMutableDictionary dictionaryWithDictionary(
      NativeLibrary _lib, NSObject? dict) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithDictionary_1, dict?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSMutableDictionary dictionaryWithObjects_forKeys(
      NativeLibrary _lib, NSObject? objects, NSObject? keys) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSMutableDictionary1,
        _lib._sel_dictionaryWithObjects_forKeys_1,
        objects?._id ?? ffi.nullptr,
        keys?._id ?? ffi.nullptr);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSObject sharedKeySetForKeys(NativeLibrary _lib, NSObject? keys) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableDictionary1,
        _lib._sel_sharedKeySetForKeys_1, keys?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSMutableDictionary new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableDictionary1, _lib._sel_new1);
    return NSMutableDictionary._(_ret, _lib);
  }

  static NSMutableDictionary alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSMutableDictionary1, _lib._sel_alloc1);
    return NSMutableDictionary._(_ret, _lib);
  }
}

class NSNotification extends NSObject {
  NSNotification._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSNotification castFrom<T extends _ObjCWrapper>(T other) {
    return NSNotification._(other._id, other._lib);
  }

  static NSNotification castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSNotification._(other, lib);
  }

  NSNotificationName get name {
    return _lib._objc_msgSend_1(_id, _lib._sel_name1);
  }

  NSObject get object {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_object1);
    return NSObject._(_ret, _lib);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_userInfo1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSNotification initWithName_object_userInfo(
      NSNotificationName name, NSObject object, NSObject? userInfo) {
    final _ret = _lib._objc_msgSend_182(
        _id,
        _lib._sel_initWithName_object_userInfo_1,
        name,
        object._id,
        userInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib);
  }

  NSNotification initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object(
      NativeLibrary _lib, NSNotificationName aName, NSObject anObject) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_1, aName, anObject._id);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object_userInfo(NativeLibrary _lib,
      NSNotificationName aName, NSObject anObject, NSObject? aUserInfo) {
    final _ret = _lib._objc_msgSend_182(
        _lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_userInfo_1,
        aName,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib);
  }

  @override
  NSNotification init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object1(
      NativeLibrary _lib, NSNotificationName aName, NSObject anObject) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_1, aName, anObject._id);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object_userInfo1(
      NativeLibrary _lib,
      NSNotificationName aName,
      NSObject anObject,
      NSObject? aUserInfo) {
    final _ret = _lib._objc_msgSend_182(
        _lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_userInfo_1,
        aName,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib);
  }

  @override
  NSNotification init1() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object2(
      NativeLibrary _lib, NSNotificationName aName, NSObject anObject) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_1, aName, anObject._id);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object_userInfo2(
      NativeLibrary _lib,
      NSNotificationName aName,
      NSObject anObject,
      NSObject? aUserInfo) {
    final _ret = _lib._objc_msgSend_182(
        _lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_userInfo_1,
        aName,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib);
  }

  @override
  NSNotification init2() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object3(
      NativeLibrary _lib, NSNotificationName aName, NSObject anObject) {
    final _ret = _lib._objc_msgSend_75(_lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_1, aName, anObject._id);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification notificationWithName_object_userInfo3(
      NativeLibrary _lib,
      NSNotificationName aName,
      NSObject anObject,
      NSObject? aUserInfo) {
    final _ret = _lib._objc_msgSend_182(
        _lib._class_NSNotification1,
        _lib._sel_notificationWithName_object_userInfo_1,
        aName,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
    return NSNotification._(_ret, _lib);
  }

  @override
  NSNotification init3() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSNotification1, _lib._sel_new1);
    return NSNotification._(_ret, _lib);
  }

  static NSNotification alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSNotification1, _lib._sel_alloc1);
    return NSNotification._(_ret, _lib);
  }
}

typedef NSNotificationName = ffi.Pointer<ObjCObject>;

class NSNotificationCenter extends NSObject {
  NSNotificationCenter._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSNotificationCenter castFrom<T extends _ObjCWrapper>(T other) {
    return NSNotificationCenter._(other._id, other._lib);
  }

  static NSNotificationCenter castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSNotificationCenter._(other, lib);
  }

  static NSObject? getDefaultCenter(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSNotificationCenter1, _lib._sel_defaultCenter1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  void addObserver_selector_name_object(
      NSObject observer,
      ffi.Pointer<ObjCSel> aSelector,
      NSNotificationName aName,
      NSObject anObject) {
    _lib._objc_msgSend_183(_id, _lib._sel_addObserver_selector_name_object_1,
        observer._id, aSelector, aName, anObject._id);
  }

  void postNotification(NSObject? notification) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_postNotification_1, notification?._id ?? ffi.nullptr);
  }

  void postNotificationName_object(
      NSNotificationName aName, NSObject anObject) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_postNotificationName_object_1, aName, anObject._id);
  }

  void postNotificationName_object_userInfo(
      NSNotificationName aName, NSObject anObject, NSObject? aUserInfo) {
    _lib._objc_msgSend_184(
        _id,
        _lib._sel_postNotificationName_object_userInfo_1,
        aName,
        anObject._id,
        aUserInfo?._id ?? ffi.nullptr);
  }

  void removeObserver(NSObject observer) {
    _lib._objc_msgSend_8(_id, _lib._sel_removeObserver_1, observer._id);
  }

  void removeObserver_name_object(
      NSObject observer, NSNotificationName aName, NSObject anObject) {
    _lib._objc_msgSend_184(_id, _lib._sel_removeObserver_name_object_1,
        observer._id, aName, anObject._id);
  }

  NSObject addObserverForName_object_queue_usingBlock(NSNotificationName name,
      NSObject obj, NSObject? queue, ObjCBlock12 block) {
    final _ret = _lib._objc_msgSend_185(
        _id,
        _lib._sel_addObserverForName_object_queue_usingBlock_1,
        name,
        obj._id,
        queue?._id ?? ffi.nullptr,
        block._impl);
    return NSObject._(_ret, _lib);
  }

  static NSNotificationCenter new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSNotificationCenter1, _lib._sel_new1);
    return NSNotificationCenter._(_ret, _lib);
  }

  static NSNotificationCenter alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSNotificationCenter1, _lib._sel_alloc1);
    return NSNotificationCenter._(_ret, _lib);
  }
}

void _ObjCBlock12_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>()
      .asFunction<void Function(ffi.Pointer<ObjCObject> arg0)>()(arg0);
}

class ObjCBlock12 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock12._(this._impl, this._lib);

  ObjCBlock12.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0)>(
                    _ObjCBlock12_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSDate extends NSObject {
  NSDate._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSDate castFrom<T extends _ObjCWrapper>(T other) {
    return NSDate._(other._id, other._lib);
  }

  static NSDate castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSDate._(other, lib);
  }

  double get timeIntervalSinceReferenceDate {
    return _lib._objc_msgSend_27(
        _id, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  @override
  NSDate init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithTimeIntervalSinceReferenceDate(double ti) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  double timeIntervalSinceDate(NSObject? anotherDate) {
    return _lib._objc_msgSend_187(_id, _lib._sel_timeIntervalSinceDate_1,
        anotherDate?._id ?? ffi.nullptr);
  }

  double get timeIntervalSinceNow {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeIntervalSinceNow1);
  }

  double get timeIntervalSince1970 {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeIntervalSince19701);
  }

  NSObject addTimeInterval(double seconds) {
    final _ret =
        _lib._objc_msgSend_186(_id, _lib._sel_addTimeInterval_1, seconds);
    return NSObject._(_ret, _lib);
  }

  NSDate dateByAddingTimeInterval(double ti) {
    final _ret =
        _lib._objc_msgSend_186(_id, _lib._sel_dateByAddingTimeInterval_1, ti);
    return NSDate._(_ret, _lib);
  }

  NSDate earlierDate(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_188(
        _id, _lib._sel_earlierDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  NSDate laterDate(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_188(
        _id, _lib._sel_laterDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  int compare(NSObject? other) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_compare_1, other?._id ?? ffi.nullptr);
  }

  bool isEqualToDate(NSObject? otherDate) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToDate_1, otherDate?._id ?? ffi.nullptr);
  }

  NSObject? get description {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  static double getTimeIntervalSinceReferenceDate1(NativeLibrary _lib) {
    return _lib._objc_msgSend_27(
        _lib._class_NSDate1, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  static NSDate date(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_date1);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSinceNow(NativeLibrary _lib, double secs) {
    final _ret = _lib._objc_msgSend_186(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate(
      NativeLibrary _lib, double ti) {
    final _ret = _lib._objc_msgSend_186(_lib._class_NSDate1,
        _lib._sel_dateWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSince1970(NativeLibrary _lib, double secs) {
    final _ret = _lib._objc_msgSend_186(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeInterval_sinceDate(
      NativeLibrary _lib, double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_189(
        _lib._class_NSDate1,
        _lib._sel_dateWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  static NSObject? getDistantFuture(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_distantFuture1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getDistantPast(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_distantPast1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getNow(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_now1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSDate initWithTimeIntervalSinceNow(double secs) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithTimeIntervalSince1970(double secs) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithTimeInterval_sinceDate(double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_189(
        _id,
        _lib._sel_initWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  double timeIntervalSinceDate1(NSObject? anotherDate) {
    return _lib._objc_msgSend_187(_id, _lib._sel_timeIntervalSinceDate_1,
        anotherDate?._id ?? ffi.nullptr);
  }

  double get timeIntervalSinceNow1 {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeIntervalSinceNow1);
  }

  double get timeIntervalSince19701 {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeIntervalSince19701);
  }

  NSObject addTimeInterval1(double seconds) {
    final _ret =
        _lib._objc_msgSend_186(_id, _lib._sel_addTimeInterval_1, seconds);
    return NSObject._(_ret, _lib);
  }

  NSDate dateByAddingTimeInterval1(double ti) {
    final _ret =
        _lib._objc_msgSend_186(_id, _lib._sel_dateByAddingTimeInterval_1, ti);
    return NSDate._(_ret, _lib);
  }

  NSDate earlierDate1(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_188(
        _id, _lib._sel_earlierDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  NSDate laterDate1(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_188(
        _id, _lib._sel_laterDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  int compare1(NSObject? other) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_compare_1, other?._id ?? ffi.nullptr);
  }

  bool isEqualToDate1(NSObject? otherDate) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToDate_1, otherDate?._id ?? ffi.nullptr);
  }

  NSObject? get description1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale1(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  static double getTimeIntervalSinceReferenceDate2(NativeLibrary _lib) {
    return _lib._objc_msgSend_27(
        _lib._class_NSDate1, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  static NSDate date1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_date1);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSinceNow1(NativeLibrary _lib, double secs) {
    final _ret = _lib._objc_msgSend_186(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate1(
      NativeLibrary _lib, double ti) {
    final _ret = _lib._objc_msgSend_186(_lib._class_NSDate1,
        _lib._sel_dateWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSince19701(
      NativeLibrary _lib, double secs) {
    final _ret = _lib._objc_msgSend_186(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeInterval_sinceDate1(
      NativeLibrary _lib, double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_189(
        _lib._class_NSDate1,
        _lib._sel_dateWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  static NSObject? getDistantFuture1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_distantFuture1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getDistantPast1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_distantPast1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getNow1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_now1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSDate initWithTimeIntervalSinceNow1(double secs) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithTimeIntervalSince19701(double secs) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithTimeInterval_sinceDate1(double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_189(
        _id,
        _lib._sel_initWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  double timeIntervalSinceDate2(NSObject? anotherDate) {
    return _lib._objc_msgSend_187(_id, _lib._sel_timeIntervalSinceDate_1,
        anotherDate?._id ?? ffi.nullptr);
  }

  double get timeIntervalSinceNow2 {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeIntervalSinceNow1);
  }

  double get timeIntervalSince19702 {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeIntervalSince19701);
  }

  NSObject addTimeInterval2(double seconds) {
    final _ret =
        _lib._objc_msgSend_186(_id, _lib._sel_addTimeInterval_1, seconds);
    return NSObject._(_ret, _lib);
  }

  NSDate dateByAddingTimeInterval2(double ti) {
    final _ret =
        _lib._objc_msgSend_186(_id, _lib._sel_dateByAddingTimeInterval_1, ti);
    return NSDate._(_ret, _lib);
  }

  NSDate earlierDate2(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_188(
        _id, _lib._sel_earlierDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  NSDate laterDate2(NSObject? anotherDate) {
    final _ret = _lib._objc_msgSend_188(
        _id, _lib._sel_laterDate_1, anotherDate?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  int compare2(NSObject? other) {
    return _lib._objc_msgSend_15(
        _id, _lib._sel_compare_1, other?._id ?? ffi.nullptr);
  }

  bool isEqualToDate2(NSObject? otherDate) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isEqualToDate_1, otherDate?._id ?? ffi.nullptr);
  }

  NSObject? get description2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_description1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString descriptionWithLocale2(NSObject locale) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_descriptionWithLocale_1, locale._id);
    return NSString._(_ret, _lib);
  }

  static double getTimeIntervalSinceReferenceDate3(NativeLibrary _lib) {
    return _lib._objc_msgSend_27(
        _lib._class_NSDate1, _lib._sel_timeIntervalSinceReferenceDate1);
  }

  static NSDate date2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_date1);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSinceNow2(NativeLibrary _lib, double secs) {
    final _ret = _lib._objc_msgSend_186(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSinceReferenceDate2(
      NativeLibrary _lib, double ti) {
    final _ret = _lib._objc_msgSend_186(_lib._class_NSDate1,
        _lib._sel_dateWithTimeIntervalSinceReferenceDate_1, ti);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeIntervalSince19702(
      NativeLibrary _lib, double secs) {
    final _ret = _lib._objc_msgSend_186(
        _lib._class_NSDate1, _lib._sel_dateWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib);
  }

  static NSDate dateWithTimeInterval_sinceDate2(
      NativeLibrary _lib, double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_189(
        _lib._class_NSDate1,
        _lib._sel_dateWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  static NSObject? getDistantFuture2(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_distantFuture1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getDistantPast2(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_distantPast1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getNow2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_now1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSDate initWithTimeIntervalSinceNow2(double secs) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithTimeIntervalSinceNow_1, secs);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithTimeIntervalSince19702(double secs) {
    final _ret = _lib._objc_msgSend_186(
        _id, _lib._sel_initWithTimeIntervalSince1970_1, secs);
    return NSDate._(_ret, _lib);
  }

  NSDate initWithTimeInterval_sinceDate2(double secsToBeAdded, NSObject? date) {
    final _ret = _lib._objc_msgSend_189(
        _id,
        _lib._sel_initWithTimeInterval_sinceDate_1,
        secsToBeAdded,
        date?._id ?? ffi.nullptr);
    return NSDate._(_ret, _lib);
  }

  static NSDate new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_new1);
    return NSDate._(_ret, _lib);
  }

  static NSDate alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSDate1, _lib._sel_alloc1);
    return NSDate._(_ret, _lib);
  }
}

typedef NSTimeInterval = ffi.Double;

/// !
/// @enum NSURLRequestCachePolicy
///
/// @discussion The NSURLRequestCachePolicy enum defines constants that
/// can be used to specify the type of interactions that take place with
/// the caching system when the URL loading system processes a request.
/// Specifically, these constants cover interactions that have to do
/// with whether already-existing cache data is returned to satisfy a
/// URL load request.
///
/// @constant NSURLRequestUseProtocolCachePolicy Specifies that the
/// caching logic defined in the protocol implementation, if any, is
/// used for a particular URL load request. This is the default policy
/// for URL load requests.
///
/// @constant NSURLRequestReloadIgnoringLocalCacheData Specifies that the
/// data for the URL load should be loaded from the origin source. No
/// existing local cache data, regardless of its freshness or validity,
/// should be used to satisfy a URL load request.
///
/// @constant NSURLRequestReloadIgnoringLocalAndRemoteCacheData Specifies that
/// not only should the local cache data be ignored, but that proxies and
/// other intermediates should be instructed to disregard their caches
/// so far as the protocol allows.
///
/// @constant NSURLRequestReloadIgnoringCacheData Older name for
/// NSURLRequestReloadIgnoringLocalCacheData.
///
/// @constant NSURLRequestReturnCacheDataElseLoad Specifies that the
/// existing cache data should be used to satisfy a URL load request,
/// regardless of its age or expiration date. However, if there is no
/// existing data in the cache corresponding to a URL load request,
/// the URL is loaded from the origin source.
///
/// @constant NSURLRequestReturnCacheDataDontLoad Specifies that the
/// existing cache data should be used to satisfy a URL load request,
/// regardless of its age or expiration date. However, if there is no
/// existing data in the cache corresponding to a URL load request, no
/// attempt is made to load the URL from the origin source, and the
/// load is considered to have failed. This constant specifies a
/// behavior that is similar to an "offline" mode.
///
/// @constant NSURLRequestReloadRevalidatingCacheData Specifies that
/// the existing cache data may be used provided the origin source
/// confirms its validity, otherwise the URL is loaded from the
/// origin source.
abstract class NSURLRequestCachePolicy {
  static const int NSURLRequestUseProtocolCachePolicy = 0;
  static const int NSURLRequestReloadIgnoringLocalCacheData = 1;
  static const int NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;
  static const int NSURLRequestReloadIgnoringCacheData = 1;
  static const int NSURLRequestReturnCacheDataElseLoad = 2;
  static const int NSURLRequestReturnCacheDataDontLoad = 3;
  static const int NSURLRequestReloadRevalidatingCacheData = 5;
}

/// !
/// @enum NSURLRequestNetworkServiceType
///
/// @discussion The NSURLRequestNetworkServiceType enum defines constants that
/// can be used to specify the service type to associate with this request.  The
/// service type is used to provide the networking layers a hint of the purpose
/// of the request.
///
/// @constant NSURLNetworkServiceTypeDefault Is the default value for an NSURLRequest
/// when created.  This value should be left unchanged for the vast majority of requests.
///
/// @constant NSURLNetworkServiceTypeVoIP Specifies that the request is for voice over IP
/// control traffic.
///
/// @constant NSURLNetworkServiceTypeVideo Specifies that the request is for video
/// traffic.
///
/// @constant NSURLNetworkServiceTypeBackground Specifies that the request is for background
/// traffic (such as a file download).
///
/// @constant NSURLNetworkServiceTypeVoice Specifies that the request is for voice data.
///
/// @constant NSURLNetworkServiceTypeResponsiveData Specifies that the request is for responsive (time sensitive) data.
///
/// @constant NSURLNetworkServiceTypeAVStreaming Specifies that the request is streaming audio/video data.
///
/// @constant NSURLNetworkServiceTypeResponsiveAV Specifies that the request is for responsive (time sensitive) audio/video data.
///
/// @constant NSURLNetworkServiceTypeCallSignaling Specifies that the request is for call signaling.
abstract class NSURLRequestNetworkServiceType {
  static const int NSURLNetworkServiceTypeDefault = 0;
  static const int NSURLNetworkServiceTypeVoIP = 1;
  static const int NSURLNetworkServiceTypeVideo = 2;
  static const int NSURLNetworkServiceTypeBackground = 3;
  static const int NSURLNetworkServiceTypeVoice = 4;
  static const int NSURLNetworkServiceTypeResponsiveData = 6;
  static const int NSURLNetworkServiceTypeAVStreaming = 8;
  static const int NSURLNetworkServiceTypeResponsiveAV = 9;
  static const int NSURLNetworkServiceTypeCallSignaling = 11;
}

/// !
/// @class NSURLRequest
///
/// @abstract An NSURLRequest object represents a URL load request in a
/// manner independent of protocol and URL scheme.
///
/// @discussion NSURLRequest encapsulates two basic data elements about
/// a URL load request:
/// <ul>
/// <li>The URL to load.
/// <li>The policy to use when consulting the URL content cache made
/// available by the implementation.
/// </ul>
/// In addition, NSURLRequest is designed to be extended to support
/// protocol-specific data by adding categories to access a property
/// object provided in an interface targeted at protocol implementors.
/// <ul>
/// <li>Protocol implementors should direct their attention to the
/// NSURLRequestExtensibility category on NSURLRequest for more
/// information on how to provide extensions on NSURLRequest to
/// support protocol-specific request information.
/// <li>Clients of this API who wish to create NSURLRequest objects to
/// load URL content should consult the protocol-specific NSURLRequest
/// categories that are available. The NSHTTPURLRequest category on
/// NSURLRequest is an example.
/// </ul>
/// <p>
/// Objects of this class are used to create NSURLConnection instances,
/// which can are used to perform the load of a URL, or as input to the
/// NSURLConnection class method which performs synchronous loads.
class NSURLRequest extends NSObject {
  NSURLRequest._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLRequest castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLRequest._(other._id, other._lib);
  }

  static NSURLRequest castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLRequest._(other, lib);
  }

  /// !
  /// @method requestWithURL:
  /// @abstract Allocates and initializes an NSURLRequest with the given
  /// URL.
  /// @discussion Default values are used for cache policy
  /// (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
  /// seconds).
  /// @param URL The URL for the request.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSURLRequest requestWithURL(NativeLibrary _lib, NSObject? URL) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSURLRequest1,
        _lib._sel_requestWithURL_1, URL?._id ?? ffi.nullptr);
    return NSURLRequest._(_ret, _lib);
  }

  /// !
  /// @property supportsSecureCoding
  /// @abstract Indicates that NSURLRequest implements the NSSecureCoding protocol.
  /// @result A BOOL value set to YES.
  static bool getSupportsSecureCoding(NativeLibrary _lib) {
    return _lib._objc_msgSend_10(
        _lib._class_NSURLRequest1, _lib._sel_supportsSecureCoding1);
  }

  /// !
  /// @method requestWithURL:cachePolicy:timeoutInterval:
  /// @abstract Allocates and initializes a NSURLRequest with the given
  /// URL and cache policy.
  /// @param URL The URL for the request.
  /// @param cachePolicy The cache policy for the request.
  /// @param timeoutInterval The timeout interval for the request. See the
  /// commentary for the <tt>timeoutInterval</tt> for more information on
  /// timeout intervals.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSURLRequest requestWithURL_cachePolicy_timeoutInterval(
      NativeLibrary _lib,
      NSObject? URL,
      int cachePolicy,
      double timeoutInterval) {
    final _ret = _lib._objc_msgSend_190(
        _lib._class_NSURLRequest1,
        _lib._sel_requestWithURL_cachePolicy_timeoutInterval_1,
        URL?._id ?? ffi.nullptr,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest._(_ret, _lib);
  }

  /// !
  /// @method initWithURL:
  /// @abstract Initializes an NSURLRequest with the given URL.
  /// @discussion Default values are used for cache policy
  /// (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
  /// seconds).
  /// @param URL The URL for the request.
  /// @result An initialized NSURLRequest.
  NSURLRequest initWithURL(NSObject? URL) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithURL_1, URL?._id ?? ffi.nullptr);
    return NSURLRequest._(_ret, _lib);
  }

  /// !
  /// @method initWithURL:
  /// @abstract Initializes an NSURLRequest with the given URL and
  /// cache policy.
  /// @discussion This is the designated initializer for the
  /// NSURLRequest class.
  /// @param URL The URL for the request.
  /// @param cachePolicy The cache policy for the request.
  /// @param timeoutInterval The timeout interval for the request. See the
  /// commentary for the <tt>timeoutInterval</tt> for more information on
  /// timeout intervals.
  /// @result An initialized NSURLRequest.
  NSURLRequest initWithURL_cachePolicy_timeoutInterval(
      NSObject? URL, int cachePolicy, double timeoutInterval) {
    final _ret = _lib._objc_msgSend_190(
        _id,
        _lib._sel_initWithURL_cachePolicy_timeoutInterval_1,
        URL?._id ?? ffi.nullptr,
        cachePolicy,
        timeoutInterval);
    return NSURLRequest._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the URL of the receiver.
  /// @result The URL of the receiver.
  NSObject? get URL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_URL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the cache policy of the receiver.
  /// @result The cache policy of the receiver.
  int get cachePolicy {
    return _lib._objc_msgSend_191(_id, _lib._sel_cachePolicy1);
  }

  /// !
  /// @abstract Returns the timeout interval of the receiver.
  /// @discussion The timeout interval specifies the limit on the idle
  /// interval alloted to a request in the process of loading. The "idle
  /// interval" is defined as the period of time that has passed since the
  /// last instance of load activity occurred for a request that is in the
  /// process of loading. Hence, when an instance of load activity occurs
  /// (e.g. bytes are received from the network for a request), the idle
  /// interval for a request is reset to 0. If the idle interval ever
  /// becomes greater than or equal to the timeout interval, the request
  /// is considered to have timed out. This timeout interval is measured
  /// in seconds.
  /// @result The timeout interval of the receiver.
  double get timeoutInterval {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeoutInterval1);
  }

  /// !
  /// @abstract The main document URL associated with this load.
  /// @discussion This URL is used for the cookie "same domain as main
  /// document" policy. There may also be other future uses.
  /// See setMainDocumentURL:
  /// NOTE: In the current implementation, this value is unused by the
  /// framework. A fully functional version of this method will be available
  /// in the future.
  /// @result The main document URL.
  NSObject? get mainDocumentURL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_mainDocumentURL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the NSURLRequestNetworkServiceType associated with this request.
  /// @discussion  This will return NSURLNetworkServiceTypeDefault for requests that have
  /// not explicitly set a networkServiceType (using the setNetworkServiceType method).
  /// @result The NSURLRequestNetworkServiceType associated with this request.
  int get networkServiceType {
    return _lib._objc_msgSend_192(_id, _lib._sel_networkServiceType1);
  }

  /// !
  /// @abstract returns whether a connection created with this request is allowed to use
  /// the built in cellular radios (if present).
  /// @result YES if the receiver is allowed to use the built in cellular radios to
  /// satify the request, NO otherwise.
  bool get allowsCellularAccess {
    return _lib._objc_msgSend_10(_id, _lib._sel_allowsCellularAccess1);
  }

  /// !
  /// @abstract returns whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as expensive.
  /// @result YES if the receiver is allowed to use an interface marked as expensive to
  /// satify the request, NO otherwise.
  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_10(_id, _lib._sel_allowsExpensiveNetworkAccess1);
  }

  /// !
  /// @abstract returns whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as constrained.
  /// @result YES if the receiver is allowed to use an interface marked as constrained to
  /// satify the request, NO otherwise.
  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_10(
        _id, _lib._sel_allowsConstrainedNetworkAccess1);
  }

  /// !
  /// @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
  /// racing without HTTP/3 service discovery.
  /// @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
  /// The default may be YES in a future OS update.
  bool get assumesHTTP3Capable {
    return _lib._objc_msgSend_10(_id, _lib._sel_assumesHTTP3Capable1);
  }

  /// !
  /// @abstract Returns the HTTP request method of the receiver.
  /// @result the HTTP request method of the receiver.
  NSObject? get HTTPMethod {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Returns a dictionary containing all the HTTP header fields
  /// of the receiver.
  /// @result a dictionary containing all the HTTP header fields of the
  /// receiver.
  NSObject? get allHTTPHeaderFields {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @method valueForHTTPHeaderField:
  /// @abstract Returns the value which corresponds to the given header
  /// field. Note that, in keeping with the HTTP RFC, HTTP header field
  /// names are case-insensitive.
  /// @param field the header field name to use for the lookup
  /// (case-insensitive).
  /// @result the value associated with the given header field, or nil if
  /// there is no value associated with the given header field.
  NSString valueForHTTPHeaderField(NSObject? field) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_valueForHTTPHeaderField_1, field?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the request body data of the receiver.
  /// @discussion This data is sent as the message body of the request, as
  /// in done in an HTTP POST request.
  /// @result The request body data of the receiver.
  NSObject? get HTTPBody {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the request body stream of the receiver
  /// if any has been set
  /// @discussion The stream is returned for examination only; it is
  /// not safe for the caller to manipulate the stream in any way.  Also
  /// note that the HTTPBodyStream and HTTPBody are mutually exclusive - only
  /// one can be set on a given request.  Also note that the body stream is
  /// preserved across copies, but is LOST when the request is coded via the
  /// NSCoding protocol
  /// @result The request body stream of the receiver.
  NSObject? get HTTPBodyStream {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Determine whether default cookie handling will happen for
  /// this request.
  /// @discussion NOTE: This value is not used prior to 10.3
  /// @result YES if cookies will be sent with and set for this request;
  /// otherwise NO.
  bool get HTTPShouldHandleCookies {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  /// !
  /// @abstract Reports whether the receiver is not expected to wait for the
  /// previous response before transmitting.
  /// @result YES if the receiver should transmit before the previous response
  /// is received.  NO if the receiver should wait for the previous response
  /// before transmitting.
  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  NSObject? get HTTPMethod1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allHTTPHeaderFields1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString valueForHTTPHeaderField1(NSObject? field) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_valueForHTTPHeaderField_1, field?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSObject? get HTTPBody1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get HTTPBodyStream1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool get HTTPShouldHandleCookies1 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  bool get HTTPShouldUsePipelining1 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  NSObject? get HTTPMethod2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get allHTTPHeaderFields2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSString valueForHTTPHeaderField2(NSObject? field) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_valueForHTTPHeaderField_1, field?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  NSObject? get HTTPBody2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get HTTPBodyStream2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool get HTTPShouldHandleCookies2 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  bool get HTTPShouldUsePipelining2 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  static NSURLRequest new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLRequest1, _lib._sel_new1);
    return NSURLRequest._(_ret, _lib);
  }

  static NSURLRequest alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLRequest1, _lib._sel_alloc1);
    return NSURLRequest._(_ret, _lib);
  }
}

/// !
/// @class NSMutableURLRequest
///
/// @abstract An NSMutableURLRequest object represents a mutable URL load
/// request in a manner independent of protocol and URL scheme.
///
/// @discussion This specialization of NSURLRequest is provided to aid
/// developers who may find it more convenient to mutate a single request
/// object for a series of URL loads instead of creating an immutable
/// NSURLRequest for each load. This programming model is supported by
/// the following contract stipulation between NSMutableURLRequest and
/// NSURLConnection: NSURLConnection makes a deep copy of each
/// NSMutableURLRequest object passed to one of its initializers.
/// <p>NSMutableURLRequest is designed to be extended to support
/// protocol-specific data by adding categories to access a property
/// object provided in an interface targeted at protocol implementors.
/// <ul>
/// <li>Protocol implementors should direct their attention to the
/// NSMutableURLRequestExtensibility category on
/// NSMutableURLRequest for more information on how to provide
/// extensions on NSMutableURLRequest to support protocol-specific
/// request information.
/// <li>Clients of this API who wish to create NSMutableURLRequest
/// objects to load URL content should consult the protocol-specific
/// NSMutableURLRequest categories that are available. The
/// NSMutableHTTPURLRequest category on NSMutableURLRequest is an
/// example.
/// </ul>
class NSMutableURLRequest extends NSURLRequest {
  NSMutableURLRequest._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMutableURLRequest castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableURLRequest._(other._id, other._lib);
  }

  static NSMutableURLRequest castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMutableURLRequest._(other, lib);
  }

  /// !
  /// @abstract The URL of the receiver.
  @override
  NSObject? get URL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_URL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract The URL of the receiver.
  set URL(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setURL_1, value?._id ?? ffi.nullptr);
  }

  /// !
  /// @abstract The cache policy of the receiver.
  @override
  int get cachePolicy {
    return _lib._objc_msgSend_191(_id, _lib._sel_cachePolicy1);
  }

  /// !
  /// @abstract The cache policy of the receiver.
  set cachePolicy(int value) {
    _lib._objc_msgSend_193(_id, _lib._sel_setCachePolicy_1, value);
  }

  /// !
  /// @abstract Sets the timeout interval of the receiver.
  /// @discussion The timeout interval specifies the limit on the idle
  /// interval allotted to a request in the process of loading. The "idle
  /// interval" is defined as the period of time that has passed since the
  /// last instance of load activity occurred for a request that is in the
  /// process of loading. Hence, when an instance of load activity occurs
  /// (e.g. bytes are received from the network for a request), the idle
  /// interval for a request is reset to 0. If the idle interval ever
  /// becomes greater than or equal to the timeout interval, the request
  /// is considered to have timed out. This timeout interval is measured
  /// in seconds.
  @override
  double get timeoutInterval {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeoutInterval1);
  }

  /// !
  /// @abstract Sets the timeout interval of the receiver.
  /// @discussion The timeout interval specifies the limit on the idle
  /// interval allotted to a request in the process of loading. The "idle
  /// interval" is defined as the period of time that has passed since the
  /// last instance of load activity occurred for a request that is in the
  /// process of loading. Hence, when an instance of load activity occurs
  /// (e.g. bytes are received from the network for a request), the idle
  /// interval for a request is reset to 0. If the idle interval ever
  /// becomes greater than or equal to the timeout interval, the request
  /// is considered to have timed out. This timeout interval is measured
  /// in seconds.
  set timeoutInterval(double value) {
    _lib._objc_msgSend_194(_id, _lib._sel_setTimeoutInterval_1, value);
  }

  /// !
  /// @abstract Sets the main document URL
  /// @discussion The caller should pass the URL for an appropriate main
  /// document, if known. For example, when loading a web page, the URL
  /// of the main html document for the top-level frame should be
  /// passed.  This main document will be used to implement the cookie
  /// "only from same domain as main document" policy, and possibly
  /// other things in the future.
  /// NOTE: In the current implementation, the passed-in value is unused by the
  /// framework. A fully functional version of this method will be available
  /// in the future.
  @override
  NSObject? get mainDocumentURL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_mainDocumentURL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Sets the main document URL
  /// @discussion The caller should pass the URL for an appropriate main
  /// document, if known. For example, when loading a web page, the URL
  /// of the main html document for the top-level frame should be
  /// passed.  This main document will be used to implement the cookie
  /// "only from same domain as main document" policy, and possibly
  /// other things in the future.
  /// NOTE: In the current implementation, the passed-in value is unused by the
  /// framework. A fully functional version of this method will be available
  /// in the future.
  set mainDocumentURL(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setMainDocumentURL_1, value?._id ?? ffi.nullptr);
  }

  /// !
  /// @abstract Sets the NSURLRequestNetworkServiceType to associate with this request
  /// @discussion This method is used to provide the network layers with a hint as to the purpose
  /// of the request.  Most clients should not need to use this method.
  @override
  int get networkServiceType {
    return _lib._objc_msgSend_192(_id, _lib._sel_networkServiceType1);
  }

  /// !
  /// @abstract Sets the NSURLRequestNetworkServiceType to associate with this request
  /// @discussion This method is used to provide the network layers with a hint as to the purpose
  /// of the request.  Most clients should not need to use this method.
  set networkServiceType(int value) {
    _lib._objc_msgSend_195(_id, _lib._sel_setNetworkServiceType_1, value);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// the built in cellular radios (if present).
  /// @discussion NO if the receiver should not be allowed to use the built in
  /// cellular radios to satisfy the request, YES otherwise.  The default is YES.
  @override
  bool get allowsCellularAccess {
    return _lib._objc_msgSend_10(_id, _lib._sel_allowsCellularAccess1);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// the built in cellular radios (if present).
  /// @discussion NO if the receiver should not be allowed to use the built in
  /// cellular radios to satisfy the request, YES otherwise.  The default is YES.
  set allowsCellularAccess(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setAllowsCellularAccess_1, value);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as expensive.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as expensive to
  /// satify the request, YES otherwise.
  @override
  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_10(_id, _lib._sel_allowsExpensiveNetworkAccess1);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as expensive.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as expensive to
  /// satify the request, YES otherwise.
  set allowsExpensiveNetworkAccess(bool value) {
    _lib._objc_msgSend_196(
        _id, _lib._sel_setAllowsExpensiveNetworkAccess_1, value);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as constrained.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as constrained to
  /// satify the request, YES otherwise.
  @override
  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_10(
        _id, _lib._sel_allowsConstrainedNetworkAccess1);
  }

  /// !
  /// @abstract sets whether a connection created with this request is allowed to use
  /// network interfaces which have been marked as constrained.
  /// @discussion NO if the receiver should not be allowed to use an interface marked as constrained to
  /// satify the request, YES otherwise.
  set allowsConstrainedNetworkAccess(bool value) {
    _lib._objc_msgSend_196(
        _id, _lib._sel_setAllowsConstrainedNetworkAccess_1, value);
  }

  /// !
  /// @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
  /// racing without HTTP/3 service discovery.
  /// @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
  /// The default may be YES in a future OS update.
  @override
  bool get assumesHTTP3Capable {
    return _lib._objc_msgSend_10(_id, _lib._sel_assumesHTTP3Capable1);
  }

  /// !
  /// @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
  /// racing without HTTP/3 service discovery.
  /// @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
  /// The default may be YES in a future OS update.
  set assumesHTTP3Capable(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setAssumesHTTP3Capable_1, value);
  }

  /// !
  /// @abstract Sets the HTTP request method of the receiver.
  @override
  NSObject? get HTTPMethod {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Sets the HTTP request method of the receiver.
  set HTTPMethod(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPMethod_1, value?._id ?? ffi.nullptr);
  }

  /// !
  /// @abstract Sets the HTTP header fields of the receiver to the given
  /// dictionary.
  /// @discussion This method replaces all header fields that may have
  /// existed before this method call.
  /// <p>Since HTTP header fields must be string values, each object and
  /// key in the dictionary passed to this method must answer YES when
  /// sent an <tt>-isKindOfClass:[NSString class]</tt> message. If either
  /// the key or value for a key-value pair answers NO when sent this
  /// message, the key-value pair is skipped.
  @override
  NSObject? get allHTTPHeaderFields {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Sets the HTTP header fields of the receiver to the given
  /// dictionary.
  /// @discussion This method replaces all header fields that may have
  /// existed before this method call.
  /// <p>Since HTTP header fields must be string values, each object and
  /// key in the dictionary passed to this method must answer YES when
  /// sent an <tt>-isKindOfClass:[NSString class]</tt> message. If either
  /// the key or value for a key-value pair answers NO when sent this
  /// message, the key-value pair is skipped.
  set allHTTPHeaderFields(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setAllHTTPHeaderFields_1, value?._id ?? ffi.nullptr);
  }

  /// !
  /// @method setValue:forHTTPHeaderField:
  /// @abstract Sets the value of the given HTTP header field.
  /// @discussion If a value was previously set for the given header
  /// field, that value is replaced with the given value. Note that, in
  /// keeping with the HTTP RFC, HTTP header field names are
  /// case-insensitive.
  /// @param value the header field value.
  /// @param field the header field name (case-insensitive).
  void setValue_forHTTPHeaderField(NSObject? value, NSObject? field) {
    _lib._objc_msgSend_101(_id, _lib._sel_setValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  /// !
  /// @method addValue:forHTTPHeaderField:
  /// @abstract Adds an HTTP header field in the current header
  /// dictionary.
  /// @discussion This method provides a way to add values to header
  /// fields incrementally. If a value was previously set for the given
  /// header field, the given value is appended to the previously-existing
  /// value. The appropriate field delimiter, a comma in the case of HTTP,
  /// is added by the implementation, and should not be added to the given
  /// value by the caller. Note that, in keeping with the HTTP RFC, HTTP
  /// header field names are case-insensitive.
  /// @param value the header field value.
  /// @param field the header field name (case-insensitive).
  void addValue_forHTTPHeaderField(NSObject? value, NSObject? field) {
    _lib._objc_msgSend_101(_id, _lib._sel_addValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  /// !
  /// @abstract Sets the request body data of the receiver.
  /// @discussion This data is sent as the message body of the request, as
  /// in done in an HTTP POST request.
  @override
  NSObject? get HTTPBody {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Sets the request body data of the receiver.
  /// @discussion This data is sent as the message body of the request, as
  /// in done in an HTTP POST request.
  set HTTPBody(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPBody_1, value?._id ?? ffi.nullptr);
  }

  /// !
  /// @abstract Sets the request body to be the contents of the given stream.
  /// @discussion The provided stream should be unopened; the request will take
  /// over the stream's delegate.  The entire stream's contents will be
  /// transmitted as the HTTP body of the request.  Note that the body stream
  /// and the body data (set by setHTTPBody:, above) are mutually exclusive
  /// - setting one will clear the other.
  @override
  NSObject? get HTTPBodyStream {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Sets the request body to be the contents of the given stream.
  /// @discussion The provided stream should be unopened; the request will take
  /// over the stream's delegate.  The entire stream's contents will be
  /// transmitted as the HTTP body of the request.  Note that the body stream
  /// and the body data (set by setHTTPBody:, above) are mutually exclusive
  /// - setting one will clear the other.
  set HTTPBodyStream(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPBodyStream_1, value?._id ?? ffi.nullptr);
  }

  /// !
  /// @abstract Decide whether default cookie handling will happen for
  /// this request (YES if cookies should be sent with and set for this request;
  /// otherwise NO).
  /// @discussion The default is YES - in other words, cookies are sent from and
  /// stored to the cookie manager by default.
  /// NOTE: In releases prior to 10.3, this value is ignored
  @override
  bool get HTTPShouldHandleCookies {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  /// !
  /// @abstract Decide whether default cookie handling will happen for
  /// this request (YES if cookies should be sent with and set for this request;
  /// otherwise NO).
  /// @discussion The default is YES - in other words, cookies are sent from and
  /// stored to the cookie manager by default.
  /// NOTE: In releases prior to 10.3, this value is ignored
  set HTTPShouldHandleCookies(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldHandleCookies_1, value);
  }

  /// !
  /// @abstract Sets whether the request should not wait for the previous response
  /// before transmitting (YES if the receiver should transmit before the previous response is
  /// received.  NO to wait for the previous response before transmitting)
  /// @discussion Calling this method with a YES value does not guarantee HTTP
  /// pipelining behavior.  This method may have no effect if an HTTP proxy is
  /// configured, or if the HTTP request uses an unsafe request method (e.g., POST
  /// requests will not pipeline).  Pipelining behavior also may not begin until
  /// the second request on a given TCP connection.  There may be other situations
  /// where pipelining does not occur even though YES was set.
  /// HTTP 1.1 allows the client to send multiple requests to the server without
  /// waiting for a response.  Though HTTP 1.1 requires support for pipelining,
  /// some servers report themselves as being HTTP 1.1 but do not support
  /// pipelining (disconnecting, sending resources misordered, omitting part of
  /// a resource, etc.).
  @override
  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  /// !
  /// @abstract Sets whether the request should not wait for the previous response
  /// before transmitting (YES if the receiver should transmit before the previous response is
  /// received.  NO to wait for the previous response before transmitting)
  /// @discussion Calling this method with a YES value does not guarantee HTTP
  /// pipelining behavior.  This method may have no effect if an HTTP proxy is
  /// configured, or if the HTTP request uses an unsafe request method (e.g., POST
  /// requests will not pipeline).  Pipelining behavior also may not begin until
  /// the second request on a given TCP connection.  There may be other situations
  /// where pipelining does not occur even though YES was set.
  /// HTTP 1.1 allows the client to send multiple requests to the server without
  /// waiting for a response.  Though HTTP 1.1 requires support for pipelining,
  /// some servers report themselves as being HTTP 1.1 but do not support
  /// pipelining (disconnecting, sending resources misordered, omitting part of
  /// a resource, etc.).
  set HTTPShouldUsePipelining(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldUsePipelining_1, value);
  }

  @override
  NSObject? get HTTPMethod1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPMethod1(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPMethod_1, value?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get allHTTPHeaderFields1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set allHTTPHeaderFields1(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setAllHTTPHeaderFields_1, value?._id ?? ffi.nullptr);
  }

  void setValue_forHTTPHeaderField1(NSObject? value, NSObject? field) {
    _lib._objc_msgSend_101(_id, _lib._sel_setValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  void addValue_forHTTPHeaderField1(NSObject? value, NSObject? field) {
    _lib._objc_msgSend_101(_id, _lib._sel_addValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get HTTPBody1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPBody1(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPBody_1, value?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get HTTPBodyStream1 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPBodyStream1(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPBodyStream_1, value?._id ?? ffi.nullptr);
  }

  @override
  bool get HTTPShouldHandleCookies1 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  set HTTPShouldHandleCookies1(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldHandleCookies_1, value);
  }

  @override
  bool get HTTPShouldUsePipelining1 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  set HTTPShouldUsePipelining1(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldUsePipelining_1, value);
  }

  @override
  NSObject? get HTTPMethod2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPMethod1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPMethod2(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPMethod_1, value?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get allHTTPHeaderFields2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allHTTPHeaderFields1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set allHTTPHeaderFields2(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setAllHTTPHeaderFields_1, value?._id ?? ffi.nullptr);
  }

  void setValue_forHTTPHeaderField2(NSObject? value, NSObject? field) {
    _lib._objc_msgSend_101(_id, _lib._sel_setValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  void addValue_forHTTPHeaderField2(NSObject? value, NSObject? field) {
    _lib._objc_msgSend_101(_id, _lib._sel_addValue_forHTTPHeaderField_1,
        value?._id ?? ffi.nullptr, field?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get HTTPBody2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBody1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPBody2(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPBody_1, value?._id ?? ffi.nullptr);
  }

  @override
  NSObject? get HTTPBodyStream2 {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPBodyStream1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPBodyStream2(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPBodyStream_1, value?._id ?? ffi.nullptr);
  }

  @override
  bool get HTTPShouldHandleCookies2 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldHandleCookies1);
  }

  set HTTPShouldHandleCookies2(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldHandleCookies_1, value);
  }

  @override
  bool get HTTPShouldUsePipelining2 {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  set HTTPShouldUsePipelining2(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldUsePipelining_1, value);
  }

  /// !
  /// @method requestWithURL:
  /// @abstract Allocates and initializes an NSURLRequest with the given
  /// URL.
  /// @discussion Default values are used for cache policy
  /// (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
  /// seconds).
  /// @param URL The URL for the request.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSMutableURLRequest requestWithURL(NativeLibrary _lib, NSObject? URL) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableURLRequest1,
        _lib._sel_requestWithURL_1, URL?._id ?? ffi.nullptr);
    return NSMutableURLRequest._(_ret, _lib);
  }

  /// !
  /// @method requestWithURL:cachePolicy:timeoutInterval:
  /// @abstract Allocates and initializes a NSURLRequest with the given
  /// URL and cache policy.
  /// @param URL The URL for the request.
  /// @param cachePolicy The cache policy for the request.
  /// @param timeoutInterval The timeout interval for the request. See the
  /// commentary for the <tt>timeoutInterval</tt> for more information on
  /// timeout intervals.
  /// @result A newly-created and autoreleased NSURLRequest instance.
  static NSMutableURLRequest requestWithURL_cachePolicy_timeoutInterval(
      NativeLibrary _lib,
      NSObject? URL,
      int cachePolicy,
      double timeoutInterval) {
    final _ret = _lib._objc_msgSend_190(
        _lib._class_NSMutableURLRequest1,
        _lib._sel_requestWithURL_cachePolicy_timeoutInterval_1,
        URL?._id ?? ffi.nullptr,
        cachePolicy,
        timeoutInterval);
    return NSMutableURLRequest._(_ret, _lib);
  }

  static void supportsSecureCoding(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableURLRequest1, _lib._sel_supportsSecureCoding1);
  }

  static NSMutableURLRequest new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableURLRequest1, _lib._sel_new1);
    return NSMutableURLRequest._(_ret, _lib);
  }

  static NSMutableURLRequest alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSMutableURLRequest1, _lib._sel_alloc1);
    return NSMutableURLRequest._(_ret, _lib);
  }
}

abstract class NSURLRequestAttribution {
  static const int NSURLRequestAttributionDeveloper = 0;
  static const int NSURLRequestAttributionUser = 1;
}

abstract class NSHTTPCookieAcceptPolicy {
  static const int NSHTTPCookieAcceptPolicyAlways = 0;
  static const int NSHTTPCookieAcceptPolicyNever = 1;
  static const int NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;
}

class NSHTTPCookieStorage extends NSObject {
  NSHTTPCookieStorage._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSHTTPCookieStorage castFrom<T extends _ObjCWrapper>(T other) {
    return NSHTTPCookieStorage._(other._id, other._lib);
  }

  static NSHTTPCookieStorage castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSHTTPCookieStorage._(other, lib);
  }

  static NSObject? getSharedHTTPCookieStorage(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSHTTPCookieStorage1, _lib._sel_sharedHTTPCookieStorage1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSHTTPCookieStorage sharedCookieStorageForGroupContainerIdentifier(
      NativeLibrary _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_197(
        _lib._class_NSHTTPCookieStorage1,
        _lib._sel_sharedCookieStorageForGroupContainerIdentifier_1,
        identifier?._id ?? ffi.nullptr);
    return NSHTTPCookieStorage._(_ret, _lib);
  }

  NSObject? get cookies {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_cookies1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  void setCookie(NSObject? cookie) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setCookie_1, cookie?._id ?? ffi.nullptr);
  }

  void deleteCookie(NSObject? cookie) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_deleteCookie_1, cookie?._id ?? ffi.nullptr);
  }

  void removeCookiesSinceDate(NSObject? date) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeCookiesSinceDate_1, date?._id ?? ffi.nullptr);
  }

  void setCookies_forURL_mainDocumentURL(
      NSObject? cookies, NSObject? URL, NSObject? mainDocumentURL) {
    _lib._objc_msgSend_184(
        _id,
        _lib._sel_setCookies_forURL_mainDocumentURL_1,
        cookies?._id ?? ffi.nullptr,
        URL?._id ?? ffi.nullptr,
        mainDocumentURL?._id ?? ffi.nullptr);
  }

  int get cookieAcceptPolicy {
    return _lib._objc_msgSend_198(_id, _lib._sel_cookieAcceptPolicy1);
  }

  set cookieAcceptPolicy(int value) {
    _lib._objc_msgSend_199(_id, _lib._sel_setCookieAcceptPolicy_1, value);
  }

  void storeCookies_forTask(NSObject? cookies, NSObject? task) {
    _lib._objc_msgSend_101(_id, _lib._sel_storeCookies_forTask_1,
        cookies?._id ?? ffi.nullptr, task?._id ?? ffi.nullptr);
  }

  void getCookiesForTask_completionHandler(
      NSObject? task, ObjCBlock12 completionHandler) {
    _lib._objc_msgSend_200(_id, _lib._sel_getCookiesForTask_completionHandler_1,
        task?._id ?? ffi.nullptr, completionHandler._impl);
  }

  void storeCookies_forTask1(NSObject? cookies, NSObject? task) {
    _lib._objc_msgSend_101(_id, _lib._sel_storeCookies_forTask_1,
        cookies?._id ?? ffi.nullptr, task?._id ?? ffi.nullptr);
  }

  void getCookiesForTask_completionHandler1(
      NSObject? task, ObjCBlock12 completionHandler) {
    _lib._objc_msgSend_200(_id, _lib._sel_getCookiesForTask_completionHandler_1,
        task?._id ?? ffi.nullptr, completionHandler._impl);
  }

  void storeCookies_forTask2(NSObject? cookies, NSObject? task) {
    _lib._objc_msgSend_101(_id, _lib._sel_storeCookies_forTask_1,
        cookies?._id ?? ffi.nullptr, task?._id ?? ffi.nullptr);
  }

  void getCookiesForTask_completionHandler2(
      NSObject? task, ObjCBlock12 completionHandler) {
    _lib._objc_msgSend_200(_id, _lib._sel_getCookiesForTask_completionHandler_1,
        task?._id ?? ffi.nullptr, completionHandler._impl);
  }

  static NSHTTPCookieStorage new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSHTTPCookieStorage1, _lib._sel_new1);
    return NSHTTPCookieStorage._(_ret, _lib);
  }

  static NSHTTPCookieStorage alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSHTTPCookieStorage1, _lib._sel_alloc1);
    return NSHTTPCookieStorage._(_ret, _lib);
  }
}

class NSProgress extends NSObject {
  NSProgress._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSProgress castFrom<T extends _ObjCWrapper>(T other) {
    return NSProgress._(other._id, other._lib);
  }

  static NSProgress castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSProgress._(other, lib);
  }

  static NSProgress currentProgress(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_201(
        _lib._class_NSProgress1, _lib._sel_currentProgress1);
    return NSProgress._(_ret, _lib);
  }

  static NSProgress progressWithTotalUnitCount(
      NativeLibrary _lib, int unitCount) {
    final _ret = _lib._objc_msgSend_202(_lib._class_NSProgress1,
        _lib._sel_progressWithTotalUnitCount_1, unitCount);
    return NSProgress._(_ret, _lib);
  }

  static NSProgress discreteProgressWithTotalUnitCount(
      NativeLibrary _lib, int unitCount) {
    final _ret = _lib._objc_msgSend_202(_lib._class_NSProgress1,
        _lib._sel_discreteProgressWithTotalUnitCount_1, unitCount);
    return NSProgress._(_ret, _lib);
  }

  static NSProgress progressWithTotalUnitCount_parent_pendingUnitCount(
      NativeLibrary _lib,
      int unitCount,
      NSObject? parent,
      int portionOfParentTotalUnitCount) {
    final _ret = _lib._objc_msgSend_203(
        _lib._class_NSProgress1,
        _lib._sel_progressWithTotalUnitCount_parent_pendingUnitCount_1,
        unitCount,
        parent?._id ?? ffi.nullptr,
        portionOfParentTotalUnitCount);
    return NSProgress._(_ret, _lib);
  }

  NSProgress initWithParent_userInfo(
      NSObject? parentProgressOrNil, NSObject? userInfoOrNil) {
    final _ret = _lib._objc_msgSend_75(
        _id,
        _lib._sel_initWithParent_userInfo_1,
        parentProgressOrNil?._id ?? ffi.nullptr,
        userInfoOrNil?._id ?? ffi.nullptr);
    return NSProgress._(_ret, _lib);
  }

  void becomeCurrentWithPendingUnitCount(int unitCount) {
    _lib._objc_msgSend_204(
        _id, _lib._sel_becomeCurrentWithPendingUnitCount_1, unitCount);
  }

  void performAsCurrentWithPendingUnitCount_usingBlock(
      int unitCount, ObjCBlock13 work) {
    _lib._objc_msgSend_205(
        _id,
        _lib._sel_performAsCurrentWithPendingUnitCount_usingBlock_1,
        unitCount,
        work._impl);
  }

  void resignCurrent() {
    _lib._objc_msgSend_0(_id, _lib._sel_resignCurrent1);
  }

  void addChild_withPendingUnitCount(NSObject? child, int inUnitCount) {
    _lib._objc_msgSend_206(_id, _lib._sel_addChild_withPendingUnitCount_1,
        child?._id ?? ffi.nullptr, inUnitCount);
  }

  int get totalUnitCount {
    return _lib._objc_msgSend_207(_id, _lib._sel_totalUnitCount1);
  }

  set totalUnitCount(int value) {
    _lib._objc_msgSend_204(_id, _lib._sel_setTotalUnitCount_1, value);
  }

  int get completedUnitCount {
    return _lib._objc_msgSend_207(_id, _lib._sel_completedUnitCount1);
  }

  set completedUnitCount(int value) {
    _lib._objc_msgSend_204(_id, _lib._sel_setCompletedUnitCount_1, value);
  }

  NSObject? get localizedDescription {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedDescription1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set localizedDescription(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setLocalizedDescription_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get localizedAdditionalDescription {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_localizedAdditionalDescription1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set localizedAdditionalDescription(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setLocalizedAdditionalDescription_1,
        value?._id ?? ffi.nullptr);
  }

  bool get cancellable {
    return _lib._objc_msgSend_10(_id, _lib._sel_isCancellable1);
  }

  set cancellable(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setCancellable_1, value);
  }

  bool get pausable {
    return _lib._objc_msgSend_10(_id, _lib._sel_isPausable1);
  }

  set pausable(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setPausable_1, value);
  }

  bool get cancelled {
    return _lib._objc_msgSend_10(_id, _lib._sel_isCancelled1);
  }

  bool get paused {
    return _lib._objc_msgSend_10(_id, _lib._sel_isPaused1);
  }

  ObjCBlock13 get cancellationHandler {
    final _ret = _lib._objc_msgSend_208(_id, _lib._sel_cancellationHandler1);
    return ObjCBlock13._(_ret, _lib);
  }

  set cancellationHandler(ObjCBlock13 value) {
    _lib._objc_msgSend_209(
        _id, _lib._sel_setCancellationHandler_1, value._impl);
  }

  ObjCBlock13 get pausingHandler {
    final _ret = _lib._objc_msgSend_208(_id, _lib._sel_pausingHandler1);
    return ObjCBlock13._(_ret, _lib);
  }

  set pausingHandler(ObjCBlock13 value) {
    _lib._objc_msgSend_209(_id, _lib._sel_setPausingHandler_1, value._impl);
  }

  ObjCBlock13 get resumingHandler {
    final _ret = _lib._objc_msgSend_208(_id, _lib._sel_resumingHandler1);
    return ObjCBlock13._(_ret, _lib);
  }

  set resumingHandler(ObjCBlock13 value) {
    _lib._objc_msgSend_209(_id, _lib._sel_setResumingHandler_1, value._impl);
  }

  void setUserInfoObject_forKey(
      NSObject objectOrNil, NSProgressUserInfoKey key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setUserInfoObject_forKey_1, objectOrNil._id, key);
  }

  bool get indeterminate {
    return _lib._objc_msgSend_10(_id, _lib._sel_isIndeterminate1);
  }

  double get fractionCompleted {
    return _lib._objc_msgSend_27(_id, _lib._sel_fractionCompleted1);
  }

  bool get finished {
    return _lib._objc_msgSend_10(_id, _lib._sel_isFinished1);
  }

  void cancel() {
    _lib._objc_msgSend_0(_id, _lib._sel_cancel1);
  }

  void pause() {
    _lib._objc_msgSend_0(_id, _lib._sel_pause1);
  }

  void resume() {
    _lib._objc_msgSend_0(_id, _lib._sel_resume1);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_userInfo1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSProgressKind get kind {
    return _lib._objc_msgSend_1(_id, _lib._sel_kind1);
  }

  set kind(NSProgressKind value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setKind_1, value);
  }

  NSObject? get estimatedTimeRemaining {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_estimatedTimeRemaining1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set estimatedTimeRemaining(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setEstimatedTimeRemaining_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get throughput {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_throughput1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set throughput(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setThroughput_1, value?._id ?? ffi.nullptr);
  }

  NSProgressFileOperationKind get fileOperationKind {
    return _lib._objc_msgSend_1(_id, _lib._sel_fileOperationKind1);
  }

  set fileOperationKind(NSProgressFileOperationKind value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setFileOperationKind_1, value);
  }

  NSObject? get fileURL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_fileURL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set fileURL(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setFileURL_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get fileTotalCount {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_fileTotalCount1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set fileTotalCount(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setFileTotalCount_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get fileCompletedCount {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_fileCompletedCount1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set fileCompletedCount(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setFileCompletedCount_1, value?._id ?? ffi.nullptr);
  }

  void publish() {
    _lib._objc_msgSend_0(_id, _lib._sel_publish1);
  }

  void unpublish() {
    _lib._objc_msgSend_0(_id, _lib._sel_unpublish1);
  }

  static NSObject addSubscriberForFileURL_withPublishingHandler(
      NativeLibrary _lib,
      NSObject? url,
      NSProgressPublishingHandler publishingHandler) {
    final _ret = _lib._objc_msgSend_210(
        _lib._class_NSProgress1,
        _lib._sel_addSubscriberForFileURL_withPublishingHandler_1,
        url?._id ?? ffi.nullptr,
        publishingHandler);
    return NSObject._(_ret, _lib);
  }

  static void removeSubscriber(NativeLibrary _lib, NSObject subscriber) {
    _lib._objc_msgSend_8(
        _lib._class_NSProgress1, _lib._sel_removeSubscriber_1, subscriber._id);
  }

  bool get old {
    return _lib._objc_msgSend_10(_id, _lib._sel_isOld1);
  }

  static NSProgress new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSProgress1, _lib._sel_new1);
    return NSProgress._(_ret, _lib);
  }

  static NSProgress alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSProgress1, _lib._sel_alloc1);
    return NSProgress._(_ret, _lib);
  }
}

void _ObjCBlock13_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function()>>()
      .asFunction<void Function()>()();
}

class ObjCBlock13 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock13._(this._impl, this._lib);

  ObjCBlock13.fromFunctionPointer(
      this._lib, ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(ffi.Pointer<_ObjCBlock> block)>(
                    _ObjCBlock13_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSProgressUserInfoKey = ffi.Pointer<ObjCObject>;
typedef NSProgressKind = ffi.Pointer<ObjCObject>;
typedef NSProgressFileOperationKind = ffi.Pointer<ObjCObject>;
typedef NSProgressPublishingHandler = ffi.Pointer<_ObjCBlock>;
NSProgressUnpublishingHandler _ObjCBlock14_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<ObjCObject> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              NSProgressUnpublishingHandler Function(
                  ffi.Pointer<ObjCObject> arg0)>>()
      .asFunction<
          NSProgressUnpublishingHandler Function(
              ffi.Pointer<ObjCObject> arg0)>()(arg0);
}

class ObjCBlock14 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock14._(this._impl, this._lib);

  ObjCBlock14.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  NSProgressUnpublishingHandler Function(
                      ffi.Pointer<ObjCObject> arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        NSProgressUnpublishingHandler Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0)>(
                    _ObjCBlock14_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSProgressUnpublishingHandler = ffi.Pointer<_ObjCBlock>;

class CFArrayCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFArrayRetainCallBack retain;

  external CFArrayReleaseCallBack release;

  external CFArrayCopyDescriptionCallBack copyDescription;

  external CFArrayEqualCallBack equal;
}

typedef CFArrayRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFArrayEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFArray extends ffi.Opaque {}

typedef CFArrayRef = ffi.Pointer<__CFArray>;
typedef CFMutableArrayRef = ffi.Pointer<__CFArray>;
typedef CFArrayApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFComparatorFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;

class __SecCertificate extends ffi.Opaque {}

class __SecIdentity extends ffi.Opaque {}

class __SecKey extends ffi.Opaque {}

class __SecPolicy extends ffi.Opaque {}

class __SecAccessControl extends ffi.Opaque {}

class __SecKeychain extends ffi.Opaque {}

class __SecKeychainItem extends ffi.Opaque {}

class __SecKeychainSearch extends ffi.Opaque {}

class SecKeychainAttribute extends ffi.Struct {
  @SecKeychainAttrType()
  external int tag;

  @UInt32()
  external int length;

  external ffi.Pointer<ffi.Void> data;
}

typedef SecKeychainAttrType = OSType;
typedef OSType = FourCharCode;
typedef FourCharCode = UInt32;
typedef UInt32 = pkg_ffi.UnsignedInt;

class SecKeychainAttributeList extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<SecKeychainAttribute> attr;
}

class __SecTrustedApplication extends ffi.Opaque {}

class __SecAccess extends ffi.Opaque {}

class __SecACL extends ffi.Opaque {}

class __SecPassword extends ffi.Opaque {}

class SecKeychainAttributeInfo extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<UInt32> tag;

  external ffi.Pointer<UInt32> format;
}

typedef OSStatus = SInt32;
typedef SInt32 = pkg_ffi.Int;

class CFBagCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFBagRetainCallBack retain;

  external CFBagReleaseCallBack release;

  external CFBagCopyDescriptionCallBack copyDescription;

  external CFBagEqualCallBack equal;

  external CFBagHashCallBack hash;
}

typedef CFBagRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFBagEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFBagHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFBag extends ffi.Opaque {}

typedef CFBagRef = ffi.Pointer<__CFBag>;
typedef CFMutableBagRef = ffi.Pointer<__CFBag>;
typedef CFBagApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class CFBinaryHeapCompareContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class CFBinaryHeapCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>> compare;
}

class __CFBinaryHeap extends ffi.Opaque {}

typedef CFBinaryHeapRef = ffi.Pointer<__CFBinaryHeap>;
typedef CFBinaryHeapApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFBitVector extends ffi.Opaque {}

typedef CFBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef UInt8 = pkg_ffi.UnsignedChar;
typedef CFMutableBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFBit = UInt32;

abstract class __CFByteOrder {
  static const int CFByteOrderUnknown = 0;
  static const int CFByteOrderLittleEndian = 1;
  static const int CFByteOrderBigEndian = 2;
}

class CFSwappedFloat32 extends ffi.Struct {
  @ffi.Uint32()
  external int v;
}

class CFSwappedFloat64 extends ffi.Struct {
  @ffi.Uint64()
  external int v;
}

class CFDictionaryKeyCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

typedef CFDictionaryRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class CFDictionaryValueCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

class __CFDictionary extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFMutableDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFDictionaryApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;

class __CFNotificationCenter extends ffi.Opaque {}

abstract class CFNotificationSuspensionBehavior {
  static const int CFNotificationSuspensionBehaviorDrop = 1;
  static const int CFNotificationSuspensionBehaviorCoalesce = 2;
  static const int CFNotificationSuspensionBehaviorHold = 3;
  static const int CFNotificationSuspensionBehaviorDeliverImmediately = 4;
}

typedef CFNotificationCenterRef = ffi.Pointer<__CFNotificationCenter>;
typedef CFNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
            CFNotificationName, ffi.Pointer<ffi.Void>, CFDictionaryRef)>>;
typedef CFNotificationName = CFStringRef;

class __CFLocale extends ffi.Opaque {}

typedef CFLocaleRef = ffi.Pointer<__CFLocale>;
typedef CFLocaleIdentifier = CFStringRef;
typedef LangCode = SInt16;
typedef SInt16 = pkg_ffi.Short;
typedef RegionCode = SInt16;

abstract class CFLocaleLanguageDirection {
  static const int kCFLocaleLanguageDirectionUnknown = 0;
  static const int kCFLocaleLanguageDirectionLeftToRight = 1;
  static const int kCFLocaleLanguageDirectionRightToLeft = 2;
  static const int kCFLocaleLanguageDirectionTopToBottom = 3;
  static const int kCFLocaleLanguageDirectionBottomToTop = 4;
}

typedef CFLocaleKey = CFStringRef;
typedef CFCalendarIdentifier = CFStringRef;
typedef CFAbsoluteTime = CFTimeInterval;
typedef CFTimeInterval = ffi.Double;

class __CFDate extends ffi.Opaque {}

typedef CFDateRef = ffi.Pointer<__CFDate>;

class __CFTimeZone extends ffi.Opaque {}

class CFGregorianDate extends ffi.Struct {
  @SInt32()
  external int year;

  @SInt8()
  external int month;

  @SInt8()
  external int day;

  @SInt8()
  external int hour;

  @SInt8()
  external int minute;

  @ffi.Double()
  external double second;
}

typedef SInt8 = pkg_ffi.SignedChar;

class CFGregorianUnits extends ffi.Struct {
  @SInt32()
  external int years;

  @SInt32()
  external int months;

  @SInt32()
  external int days;

  @SInt32()
  external int hours;

  @SInt32()
  external int minutes;

  @ffi.Double()
  external double seconds;
}

abstract class CFGregorianUnitFlags {
  static const int kCFGregorianUnitsYears = 1;
  static const int kCFGregorianUnitsMonths = 2;
  static const int kCFGregorianUnitsDays = 4;
  static const int kCFGregorianUnitsHours = 8;
  static const int kCFGregorianUnitsMinutes = 16;
  static const int kCFGregorianUnitsSeconds = 32;
  static const int kCFGregorianAllUnits = 16777215;
}

typedef CFTimeZoneRef = ffi.Pointer<__CFTimeZone>;

class __CFData extends ffi.Opaque {}

typedef CFDataRef = ffi.Pointer<__CFData>;
typedef CFMutableDataRef = ffi.Pointer<__CFData>;

abstract class CFDataSearchFlags {
  static const int kCFDataSearchBackwards = 1;
  static const int kCFDataSearchAnchored = 2;
}

class __CFCharacterSet extends ffi.Opaque {}

abstract class CFCharacterSetPredefinedSet {
  static const int kCFCharacterSetControl = 1;
  static const int kCFCharacterSetWhitespace = 2;
  static const int kCFCharacterSetWhitespaceAndNewline = 3;
  static const int kCFCharacterSetDecimalDigit = 4;
  static const int kCFCharacterSetLetter = 5;
  static const int kCFCharacterSetLowercaseLetter = 6;
  static const int kCFCharacterSetUppercaseLetter = 7;
  static const int kCFCharacterSetNonBase = 8;
  static const int kCFCharacterSetDecomposable = 9;
  static const int kCFCharacterSetAlphaNumeric = 10;
  static const int kCFCharacterSetPunctuation = 11;
  static const int kCFCharacterSetCapitalizedLetter = 13;
  static const int kCFCharacterSetSymbol = 14;
  static const int kCFCharacterSetNewline = 15;
  static const int kCFCharacterSetIllegal = 12;
}

typedef CFCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef CFMutableCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef UniChar = UInt16;
typedef UInt16 = pkg_ffi.UnsignedShort;
typedef UTF32Char = UInt32;

abstract class CFStringBuiltInEncodings {
  static const int kCFStringEncodingMacRoman = 0;
  static const int kCFStringEncodingWindowsLatin1 = 1280;
  static const int kCFStringEncodingISOLatin1 = 513;
  static const int kCFStringEncodingNextStepLatin = 2817;
  static const int kCFStringEncodingASCII = 1536;
  static const int kCFStringEncodingUnicode = 256;
  static const int kCFStringEncodingUTF8 = 134217984;
  static const int kCFStringEncodingNonLossyASCII = 3071;
  static const int kCFStringEncodingUTF16 = 256;
  static const int kCFStringEncodingUTF16BE = 268435712;
  static const int kCFStringEncodingUTF16LE = 335544576;
  static const int kCFStringEncodingUTF32 = 201326848;
  static const int kCFStringEncodingUTF32BE = 402653440;
  static const int kCFStringEncodingUTF32LE = 469762304;
}

typedef ConstStr255Param = ffi.Pointer<pkg_ffi.UnsignedChar>;
typedef CFStringEncoding = UInt32;
typedef CFMutableStringRef = ffi.Pointer<__CFString>;
typedef StringPtr = ffi.Pointer<pkg_ffi.UnsignedChar>;
typedef ConstStringPtr = ffi.Pointer<pkg_ffi.UnsignedChar>;

abstract class CFStringCompareFlags {
  static const int kCFCompareCaseInsensitive = 1;
  static const int kCFCompareBackwards = 4;
  static const int kCFCompareAnchored = 8;
  static const int kCFCompareNonliteral = 16;
  static const int kCFCompareLocalized = 32;
  static const int kCFCompareNumerically = 64;
  static const int kCFCompareDiacriticInsensitive = 128;
  static const int kCFCompareWidthInsensitive = 256;
  static const int kCFCompareForcedOrdering = 512;
}

abstract class CFStringNormalizationForm {
  static const int kCFStringNormalizationFormD = 0;
  static const int kCFStringNormalizationFormKD = 1;
  static const int kCFStringNormalizationFormC = 2;
  static const int kCFStringNormalizationFormKC = 3;
}

class CFStringInlineBuffer extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<UniChar> buffer;

  external CFStringRef theString;

  external ffi.Pointer<UniChar> directUniCharBuffer;

  external ffi.Pointer<pkg_ffi.Char> directCStringBuffer;

  external CFRange rangeToBuffer;

  @CFIndex()
  external int bufferedRangeStart;

  @CFIndex()
  external int bufferedRangeEnd;
}

abstract class CFTimeZoneNameStyle {
  static const int kCFTimeZoneNameStyleStandard = 0;
  static const int kCFTimeZoneNameStyleShortStandard = 1;
  static const int kCFTimeZoneNameStyleDaylightSaving = 2;
  static const int kCFTimeZoneNameStyleShortDaylightSaving = 3;
  static const int kCFTimeZoneNameStyleGeneric = 4;
  static const int kCFTimeZoneNameStyleShortGeneric = 5;
}

class __CFCalendar extends ffi.Opaque {}

typedef CFCalendarRef = ffi.Pointer<__CFCalendar>;

abstract class CFCalendarUnit {
  static const int kCFCalendarUnitEra = 2;
  static const int kCFCalendarUnitYear = 4;
  static const int kCFCalendarUnitMonth = 8;
  static const int kCFCalendarUnitDay = 16;
  static const int kCFCalendarUnitHour = 32;
  static const int kCFCalendarUnitMinute = 64;
  static const int kCFCalendarUnitSecond = 128;
  static const int kCFCalendarUnitWeek = 256;
  static const int kCFCalendarUnitWeekday = 512;
  static const int kCFCalendarUnitWeekdayOrdinal = 1024;
  static const int kCFCalendarUnitQuarter = 2048;
  static const int kCFCalendarUnitWeekOfMonth = 4096;
  static const int kCFCalendarUnitWeekOfYear = 8192;
  static const int kCFCalendarUnitYearForWeekOfYear = 16384;
}

class __CFDateFormatter extends ffi.Opaque {}

abstract class CFDateFormatterStyle {
  static const int kCFDateFormatterNoStyle = 0;
  static const int kCFDateFormatterShortStyle = 1;
  static const int kCFDateFormatterMediumStyle = 2;
  static const int kCFDateFormatterLongStyle = 3;
  static const int kCFDateFormatterFullStyle = 4;
}

abstract class CFISO8601DateFormatOptions {
  static const int kCFISO8601DateFormatWithYear = 1;
  static const int kCFISO8601DateFormatWithMonth = 2;
  static const int kCFISO8601DateFormatWithWeekOfYear = 4;
  static const int kCFISO8601DateFormatWithDay = 16;
  static const int kCFISO8601DateFormatWithTime = 32;
  static const int kCFISO8601DateFormatWithTimeZone = 64;
  static const int kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128;
  static const int kCFISO8601DateFormatWithDashSeparatorInDate = 256;
  static const int kCFISO8601DateFormatWithColonSeparatorInTime = 512;
  static const int kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024;
  static const int kCFISO8601DateFormatWithFractionalSeconds = 2048;
  static const int kCFISO8601DateFormatWithFullDate = 275;
  static const int kCFISO8601DateFormatWithFullTime = 1632;
  static const int kCFISO8601DateFormatWithInternetDateTime = 1907;
}

typedef CFDateFormatterRef = ffi.Pointer<__CFDateFormatter>;
typedef CFDateFormatterKey = CFStringRef;

class __CFError extends ffi.Opaque {}

typedef CFErrorDomain = CFStringRef;
typedef CFErrorRef = ffi.Pointer<__CFError>;

class __CFBoolean extends ffi.Opaque {}

typedef CFBooleanRef = ffi.Pointer<__CFBoolean>;

abstract class CFNumberType {
  static const int kCFNumberSInt8Type = 1;
  static const int kCFNumberSInt16Type = 2;
  static const int kCFNumberSInt32Type = 3;
  static const int kCFNumberSInt64Type = 4;
  static const int kCFNumberFloat32Type = 5;
  static const int kCFNumberFloat64Type = 6;
  static const int kCFNumberCharType = 7;
  static const int kCFNumberShortType = 8;
  static const int kCFNumberIntType = 9;
  static const int kCFNumberLongType = 10;
  static const int kCFNumberLongLongType = 11;
  static const int kCFNumberFloatType = 12;
  static const int kCFNumberDoubleType = 13;
  static const int kCFNumberCFIndexType = 14;
  static const int kCFNumberNSIntegerType = 15;
  static const int kCFNumberCGFloatType = 16;
  static const int kCFNumberMaxType = 16;
}

class __CFNumber extends ffi.Opaque {}

typedef CFNumberRef = ffi.Pointer<__CFNumber>;

class __CFNumberFormatter extends ffi.Opaque {}

abstract class CFNumberFormatterStyle {
  static const int kCFNumberFormatterNoStyle = 0;
  static const int kCFNumberFormatterDecimalStyle = 1;
  static const int kCFNumberFormatterCurrencyStyle = 2;
  static const int kCFNumberFormatterPercentStyle = 3;
  static const int kCFNumberFormatterScientificStyle = 4;
  static const int kCFNumberFormatterSpellOutStyle = 5;
  static const int kCFNumberFormatterOrdinalStyle = 6;
  static const int kCFNumberFormatterCurrencyISOCodeStyle = 8;
  static const int kCFNumberFormatterCurrencyPluralStyle = 9;
  static const int kCFNumberFormatterCurrencyAccountingStyle = 10;
}

typedef CFNumberFormatterRef = ffi.Pointer<__CFNumberFormatter>;

abstract class CFNumberFormatterOptionFlags {
  static const int kCFNumberFormatterParseIntegersOnly = 1;
}

typedef CFNumberFormatterKey = CFStringRef;

abstract class CFNumberFormatterRoundingMode {
  static const int kCFNumberFormatterRoundCeiling = 0;
  static const int kCFNumberFormatterRoundFloor = 1;
  static const int kCFNumberFormatterRoundDown = 2;
  static const int kCFNumberFormatterRoundUp = 3;
  static const int kCFNumberFormatterRoundHalfEven = 4;
  static const int kCFNumberFormatterRoundHalfDown = 5;
  static const int kCFNumberFormatterRoundHalfUp = 6;
}

abstract class CFNumberFormatterPadPosition {
  static const int kCFNumberFormatterPadBeforePrefix = 0;
  static const int kCFNumberFormatterPadAfterPrefix = 1;
  static const int kCFNumberFormatterPadBeforeSuffix = 2;
  static const int kCFNumberFormatterPadAfterSuffix = 3;
}

typedef CFPropertyListRef = CFTypeRef;

abstract class CFURLPathStyle {
  static const int kCFURLPOSIXPathStyle = 0;
  static const int kCFURLHFSPathStyle = 1;
  static const int kCFURLWindowsPathStyle = 2;
}

class __CFURL extends ffi.Opaque {}

typedef CFURLRef = ffi.Pointer<__CFURL>;

abstract class CFURLComponentType {
  static const int kCFURLComponentScheme = 1;
  static const int kCFURLComponentNetLocation = 2;
  static const int kCFURLComponentPath = 3;
  static const int kCFURLComponentResourceSpecifier = 4;
  static const int kCFURLComponentUser = 5;
  static const int kCFURLComponentPassword = 6;
  static const int kCFURLComponentUserInfo = 7;
  static const int kCFURLComponentHost = 8;
  static const int kCFURLComponentPort = 9;
  static const int kCFURLComponentParameterString = 10;
  static const int kCFURLComponentQuery = 11;
  static const int kCFURLComponentFragment = 12;
}

class FSRef extends ffi.Opaque {}

abstract class CFURLBookmarkCreationOptions {
  static const int kCFURLBookmarkCreationMinimalBookmarkMask = 512;
  static const int kCFURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int kCFURLBookmarkCreationWithSecurityScope = 2048;
  static const int kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess =
      4096;
  static const int kCFURLBookmarkCreationWithoutImplicitSecurityScope =
      536870912;
  static const int kCFURLBookmarkCreationPreferFileIDResolutionMask = 256;
}

abstract class CFURLBookmarkResolutionOptions {
  static const int kCFURLBookmarkResolutionWithoutUIMask = 256;
  static const int kCFURLBookmarkResolutionWithoutMountingMask = 512;
  static const int kCFURLBookmarkResolutionWithSecurityScope = 1024;
  static const int kCFURLBookmarkResolutionWithoutImplicitStartAccessing =
      32768;
  static const int kCFBookmarkResolutionWithoutUIMask = 256;
  static const int kCFBookmarkResolutionWithoutMountingMask = 512;
}

typedef CFURLBookmarkFileCreationOptions = CFOptionFlags;

class __CFRunLoop extends ffi.Opaque {}

class __CFRunLoopSource extends ffi.Opaque {}

class __CFRunLoopObserver extends ffi.Opaque {}

class __CFRunLoopTimer extends ffi.Opaque {}

abstract class CFRunLoopRunResult {
  static const int kCFRunLoopRunFinished = 1;
  static const int kCFRunLoopRunStopped = 2;
  static const int kCFRunLoopRunTimedOut = 3;
  static const int kCFRunLoopRunHandledSource = 4;
}

abstract class CFRunLoopActivity {
  static const int kCFRunLoopEntry = 1;
  static const int kCFRunLoopBeforeTimers = 2;
  static const int kCFRunLoopBeforeSources = 4;
  static const int kCFRunLoopBeforeWaiting = 32;
  static const int kCFRunLoopAfterWaiting = 64;
  static const int kCFRunLoopExit = 128;
  static const int kCFRunLoopAllActivities = 268435455;
}

typedef CFRunLoopMode = CFStringRef;
typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;
typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;
typedef CFRunLoopObserverRef = ffi.Pointer<__CFRunLoopObserver>;
typedef CFRunLoopTimerRef = ffi.Pointer<__CFRunLoopTimer>;

class CFRunLoopSourceContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> schedule;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> cancel;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      perform;
}

class CFRunLoopSourceContext1 extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<mach_port_t Function(ffi.Pointer<ffi.Void>)>> getPort;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> perform;
}

typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;
typedef __darwin_natural_t = pkg_ffi.UnsignedInt;

class CFRunLoopObserverContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopObserverCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFRunLoopObserverRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
void _ObjCBlock15_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, CFRunLoopObserverRef arg0, int arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef arg0, ffi.Int32 arg1)>>()
      .asFunction<
          void Function(CFRunLoopObserverRef arg0, int arg1)>()(arg0, arg1);
}

class ObjCBlock15 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock15._(this._impl, this._lib);

  ObjCBlock15.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(CFRunLoopObserverRef arg0, ffi.Int32 arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        CFRunLoopObserverRef arg0,
                        ffi.Int32 arg1)>(_ObjCBlock15_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class CFRunLoopTimerContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopTimerCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFRunLoopTimerRef, ffi.Pointer<ffi.Void>)>>;
void _ObjCBlock16_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, CFRunLoopTimerRef arg0) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef arg0)>>()
      .asFunction<void Function(CFRunLoopTimerRef arg0)>()(arg0);
}

class ObjCBlock16 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock16._(this._impl, this._lib);

  ObjCBlock16.fromFunctionPointer(
      this._lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                        CFRunLoopTimerRef arg0)>(_ObjCBlock16_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class __CFSocket extends ffi.Opaque {}

abstract class CFSocketError {
  static const int kCFSocketSuccess = 0;
  static const int kCFSocketError = -1;
  static const int kCFSocketTimeout = -2;
}

class CFSocketSignature extends ffi.Struct {
  @SInt32()
  external int protocolFamily;

  @SInt32()
  external int socketType;

  @SInt32()
  external int protocol;

  external CFDataRef address;
}

abstract class CFSocketCallBackType {
  static const int kCFSocketNoCallBack = 0;
  static const int kCFSocketReadCallBack = 1;
  static const int kCFSocketAcceptCallBack = 2;
  static const int kCFSocketDataCallBack = 3;
  static const int kCFSocketConnectCallBack = 4;
  static const int kCFSocketWriteCallBack = 8;
}

class CFSocketContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFSocketRef = ffi.Pointer<__CFSocket>;
typedef CFSocketCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFSocketRef, ffi.Int32, CFDataRef,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSocketNativeHandle = pkg_ffi.Int;

class CFStreamError extends ffi.Struct {
  @CFIndex()
  external int domain;

  @SInt32()
  external int error;
}

abstract class CFStreamStatus {
  static const int kCFStreamStatusNotOpen = 0;
  static const int kCFStreamStatusOpening = 1;
  static const int kCFStreamStatusOpen = 2;
  static const int kCFStreamStatusReading = 3;
  static const int kCFStreamStatusWriting = 4;
  static const int kCFStreamStatusAtEnd = 5;
  static const int kCFStreamStatusClosed = 6;
  static const int kCFStreamStatusError = 7;
}

abstract class CFStreamEventType {
  static const int kCFStreamEventNone = 0;
  static const int kCFStreamEventOpenCompleted = 1;
  static const int kCFStreamEventHasBytesAvailable = 2;
  static const int kCFStreamEventCanAcceptBytes = 4;
  static const int kCFStreamEventErrorOccurred = 8;
  static const int kCFStreamEventEndEncountered = 16;
}

class CFStreamClientContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class __CFReadStream extends ffi.Opaque {}

class __CFWriteStream extends ffi.Opaque {}

typedef CFStreamPropertyKey = CFStringRef;
typedef CFReadStreamRef = ffi.Pointer<__CFReadStream>;
typedef CFWriteStreamRef = ffi.Pointer<__CFWriteStream>;
typedef CFReadStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFReadStreamRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef CFWriteStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFWriteStreamRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;
typedef dispatch_queue_t = ffi.Pointer<ObjCObject>;

abstract class CFStreamErrorDomain {
  static const int kCFStreamErrorDomainCustom = -1;
  static const int kCFStreamErrorDomainPOSIX = 1;
  static const int kCFStreamErrorDomainMacOSStatus = 2;
}

abstract class CFPropertyListMutabilityOptions {
  static const int kCFPropertyListImmutable = 0;
  static const int kCFPropertyListMutableContainers = 1;
  static const int kCFPropertyListMutableContainersAndLeaves = 2;
}

abstract class CFPropertyListFormat {
  static const int kCFPropertyListOpenStepFormat = 1;
  static const int kCFPropertyListXMLFormat_v1_0 = 100;
  static const int kCFPropertyListBinaryFormat_v1_0 = 200;
}

class CFSetCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFSetRetainCallBack retain;

  external CFSetReleaseCallBack release;

  external CFSetCopyDescriptionCallBack copyDescription;

  external CFSetEqualCallBack equal;

  external CFSetHashCallBack hash;
}

typedef CFSetRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFSetEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSetHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFSet extends ffi.Opaque {}

typedef CFSetRef = ffi.Pointer<__CFSet>;
typedef CFMutableSetRef = ffi.Pointer<__CFSet>;
typedef CFSetApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

abstract class CFStringEncodings {
  static const int kCFStringEncodingMacJapanese = 1;
  static const int kCFStringEncodingMacChineseTrad = 2;
  static const int kCFStringEncodingMacKorean = 3;
  static const int kCFStringEncodingMacArabic = 4;
  static const int kCFStringEncodingMacHebrew = 5;
  static const int kCFStringEncodingMacGreek = 6;
  static const int kCFStringEncodingMacCyrillic = 7;
  static const int kCFStringEncodingMacDevanagari = 9;
  static const int kCFStringEncodingMacGurmukhi = 10;
  static const int kCFStringEncodingMacGujarati = 11;
  static const int kCFStringEncodingMacOriya = 12;
  static const int kCFStringEncodingMacBengali = 13;
  static const int kCFStringEncodingMacTamil = 14;
  static const int kCFStringEncodingMacTelugu = 15;
  static const int kCFStringEncodingMacKannada = 16;
  static const int kCFStringEncodingMacMalayalam = 17;
  static const int kCFStringEncodingMacSinhalese = 18;
  static const int kCFStringEncodingMacBurmese = 19;
  static const int kCFStringEncodingMacKhmer = 20;
  static const int kCFStringEncodingMacThai = 21;
  static const int kCFStringEncodingMacLaotian = 22;
  static const int kCFStringEncodingMacGeorgian = 23;
  static const int kCFStringEncodingMacArmenian = 24;
  static const int kCFStringEncodingMacChineseSimp = 25;
  static const int kCFStringEncodingMacTibetan = 26;
  static const int kCFStringEncodingMacMongolian = 27;
  static const int kCFStringEncodingMacEthiopic = 28;
  static const int kCFStringEncodingMacCentralEurRoman = 29;
  static const int kCFStringEncodingMacVietnamese = 30;
  static const int kCFStringEncodingMacExtArabic = 31;
  static const int kCFStringEncodingMacSymbol = 33;
  static const int kCFStringEncodingMacDingbats = 34;
  static const int kCFStringEncodingMacTurkish = 35;
  static const int kCFStringEncodingMacCroatian = 36;
  static const int kCFStringEncodingMacIcelandic = 37;
  static const int kCFStringEncodingMacRomanian = 38;
  static const int kCFStringEncodingMacCeltic = 39;
  static const int kCFStringEncodingMacGaelic = 40;
  static const int kCFStringEncodingMacFarsi = 140;
  static const int kCFStringEncodingMacUkrainian = 152;
  static const int kCFStringEncodingMacInuit = 236;
  static const int kCFStringEncodingMacVT100 = 252;
  static const int kCFStringEncodingMacHFS = 255;
  static const int kCFStringEncodingISOLatin2 = 514;
  static const int kCFStringEncodingISOLatin3 = 515;
  static const int kCFStringEncodingISOLatin4 = 516;
  static const int kCFStringEncodingISOLatinCyrillic = 517;
  static const int kCFStringEncodingISOLatinArabic = 518;
  static const int kCFStringEncodingISOLatinGreek = 519;
  static const int kCFStringEncodingISOLatinHebrew = 520;
  static const int kCFStringEncodingISOLatin5 = 521;
  static const int kCFStringEncodingISOLatin6 = 522;
  static const int kCFStringEncodingISOLatinThai = 523;
  static const int kCFStringEncodingISOLatin7 = 525;
  static const int kCFStringEncodingISOLatin8 = 526;
  static const int kCFStringEncodingISOLatin9 = 527;
  static const int kCFStringEncodingISOLatin10 = 528;
  static const int kCFStringEncodingDOSLatinUS = 1024;
  static const int kCFStringEncodingDOSGreek = 1029;
  static const int kCFStringEncodingDOSBalticRim = 1030;
  static const int kCFStringEncodingDOSLatin1 = 1040;
  static const int kCFStringEncodingDOSGreek1 = 1041;
  static const int kCFStringEncodingDOSLatin2 = 1042;
  static const int kCFStringEncodingDOSCyrillic = 1043;
  static const int kCFStringEncodingDOSTurkish = 1044;
  static const int kCFStringEncodingDOSPortuguese = 1045;
  static const int kCFStringEncodingDOSIcelandic = 1046;
  static const int kCFStringEncodingDOSHebrew = 1047;
  static const int kCFStringEncodingDOSCanadianFrench = 1048;
  static const int kCFStringEncodingDOSArabic = 1049;
  static const int kCFStringEncodingDOSNordic = 1050;
  static const int kCFStringEncodingDOSRussian = 1051;
  static const int kCFStringEncodingDOSGreek2 = 1052;
  static const int kCFStringEncodingDOSThai = 1053;
  static const int kCFStringEncodingDOSJapanese = 1056;
  static const int kCFStringEncodingDOSChineseSimplif = 1057;
  static const int kCFStringEncodingDOSKorean = 1058;
  static const int kCFStringEncodingDOSChineseTrad = 1059;
  static const int kCFStringEncodingWindowsLatin2 = 1281;
  static const int kCFStringEncodingWindowsCyrillic = 1282;
  static const int kCFStringEncodingWindowsGreek = 1283;
  static const int kCFStringEncodingWindowsLatin5 = 1284;
  static const int kCFStringEncodingWindowsHebrew = 1285;
  static const int kCFStringEncodingWindowsArabic = 1286;
  static const int kCFStringEncodingWindowsBalticRim = 1287;
  static const int kCFStringEncodingWindowsVietnamese = 1288;
  static const int kCFStringEncodingWindowsKoreanJohab = 1296;
  static const int kCFStringEncodingANSEL = 1537;
  static const int kCFStringEncodingJIS_X0201_76 = 1568;
  static const int kCFStringEncodingJIS_X0208_83 = 1569;
  static const int kCFStringEncodingJIS_X0208_90 = 1570;
  static const int kCFStringEncodingJIS_X0212_90 = 1571;
  static const int kCFStringEncodingJIS_C6226_78 = 1572;
  static const int kCFStringEncodingShiftJIS_X0213 = 1576;
  static const int kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577;
  static const int kCFStringEncodingGB_2312_80 = 1584;
  static const int kCFStringEncodingGBK_95 = 1585;
  static const int kCFStringEncodingGB_18030_2000 = 1586;
  static const int kCFStringEncodingKSC_5601_87 = 1600;
  static const int kCFStringEncodingKSC_5601_92_Johab = 1601;
  static const int kCFStringEncodingCNS_11643_92_P1 = 1617;
  static const int kCFStringEncodingCNS_11643_92_P2 = 1618;
  static const int kCFStringEncodingCNS_11643_92_P3 = 1619;
  static const int kCFStringEncodingISO_2022_JP = 2080;
  static const int kCFStringEncodingISO_2022_JP_2 = 2081;
  static const int kCFStringEncodingISO_2022_JP_1 = 2082;
  static const int kCFStringEncodingISO_2022_JP_3 = 2083;
  static const int kCFStringEncodingISO_2022_CN = 2096;
  static const int kCFStringEncodingISO_2022_CN_EXT = 2097;
  static const int kCFStringEncodingISO_2022_KR = 2112;
  static const int kCFStringEncodingEUC_JP = 2336;
  static const int kCFStringEncodingEUC_CN = 2352;
  static const int kCFStringEncodingEUC_TW = 2353;
  static const int kCFStringEncodingEUC_KR = 2368;
  static const int kCFStringEncodingShiftJIS = 2561;
  static const int kCFStringEncodingKOI8_R = 2562;
  static const int kCFStringEncodingBig5 = 2563;
  static const int kCFStringEncodingMacRomanLatin1 = 2564;
  static const int kCFStringEncodingHZ_GB_2312 = 2565;
  static const int kCFStringEncodingBig5_HKSCS_1999 = 2566;
  static const int kCFStringEncodingVISCII = 2567;
  static const int kCFStringEncodingKOI8_U = 2568;
  static const int kCFStringEncodingBig5_E = 2569;
  static const int kCFStringEncodingNextStepJapanese = 2818;
  static const int kCFStringEncodingEBCDIC_US = 3073;
  static const int kCFStringEncodingEBCDIC_CP037 = 3074;
  static const int kCFStringEncodingUTF7 = 67109120;
  static const int kCFStringEncodingUTF7_IMAP = 2576;
  static const int kCFStringEncodingShiftJIS_X0213_00 = 1576;
}

class CFTreeContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFTreeRetainCallBack retain;

  external CFTreeReleaseCallBack release;

  external CFTreeCopyDescriptionCallBack copyDescription;
}

typedef CFTreeRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

class __CFTree extends ffi.Opaque {}

typedef CFTreeRef = ffi.Pointer<__CFTree>;
typedef CFTreeApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

abstract class CFURLError {
  static const int kCFURLUnknownError = -10;
  static const int kCFURLUnknownSchemeError = -11;
  static const int kCFURLResourceNotFoundError = -12;
  static const int kCFURLResourceAccessViolationError = -13;
  static const int kCFURLRemoteHostUnavailableError = -14;
  static const int kCFURLImproperArgumentsError = -15;
  static const int kCFURLUnknownPropertyKeyError = -16;
  static const int kCFURLPropertyKeyUnavailableError = -17;
  static const int kCFURLTimeoutError = -18;
}

class __CFUUID extends ffi.Opaque {}

class CFUUIDBytes extends ffi.Struct {
  @UInt8()
  external int byte0;

  @UInt8()
  external int byte1;

  @UInt8()
  external int byte2;

  @UInt8()
  external int byte3;

  @UInt8()
  external int byte4;

  @UInt8()
  external int byte5;

  @UInt8()
  external int byte6;

  @UInt8()
  external int byte7;

  @UInt8()
  external int byte8;

  @UInt8()
  external int byte9;

  @UInt8()
  external int byte10;

  @UInt8()
  external int byte11;

  @UInt8()
  external int byte12;

  @UInt8()
  external int byte13;

  @UInt8()
  external int byte14;

  @UInt8()
  external int byte15;
}

typedef CFUUIDRef = ffi.Pointer<__CFUUID>;

class __CFBundle extends ffi.Opaque {}

typedef CFBundleRef = ffi.Pointer<__CFBundle>;
typedef cpu_type_t = integer_t;
typedef integer_t = pkg_ffi.Int;
typedef CFPlugInRef = ffi.Pointer<__CFBundle>;
typedef CFBundleRefNum = pkg_ffi.Int;

class __CFMessagePort extends ffi.Opaque {}

class CFMessagePortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMessagePortRef = ffi.Pointer<__CFMessagePort>;
typedef CFMessagePortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(
            CFMessagePortRef, SInt32, CFDataRef, ffi.Pointer<ffi.Void>)>>;
typedef CFMessagePortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMessagePortRef, ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInFactoryFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef)>>;

class __CFPlugInInstance extends ffi.Opaque {}

typedef CFPlugInInstanceRef = ffi.Pointer<__CFPlugInInstance>;
typedef CFPlugInInstanceDeallocateInstanceDataFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInInstanceGetInterfaceFunction = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(CFPlugInInstanceRef, CFStringRef,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;

class __CFMachPort extends ffi.Opaque {}

class CFMachPortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMachPortRef = ffi.Pointer<__CFMachPort>;
typedef CFMachPortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>, CFIndex,
            ffi.Pointer<ffi.Void>)>>;
typedef CFMachPortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>)>>;

class __CFAttributedString extends ffi.Opaque {}

typedef CFAttributedStringRef = ffi.Pointer<__CFAttributedString>;
typedef CFMutableAttributedStringRef = ffi.Pointer<__CFAttributedString>;

class __CFURLEnumerator extends ffi.Opaque {}

abstract class CFURLEnumeratorOptions {
  static const int kCFURLEnumeratorDefaultBehavior = 0;
  static const int kCFURLEnumeratorDescendRecursively = 1;
  static const int kCFURLEnumeratorSkipInvisibles = 2;
  static const int kCFURLEnumeratorGenerateFileReferenceURLs = 4;
  static const int kCFURLEnumeratorSkipPackageContents = 8;
  static const int kCFURLEnumeratorIncludeDirectoriesPreOrder = 16;
  static const int kCFURLEnumeratorIncludeDirectoriesPostOrder = 32;
  static const int kCFURLEnumeratorGenerateRelativePathURLs = 64;
}

typedef CFURLEnumeratorRef = ffi.Pointer<__CFURLEnumerator>;

abstract class CFURLEnumeratorResult {
  static const int kCFURLEnumeratorSuccess = 1;
  static const int kCFURLEnumeratorEnd = 2;
  static const int kCFURLEnumeratorError = 3;
  static const int kCFURLEnumeratorDirectoryPostOrderSuccess = 4;
}

class __CFFileSecurity extends ffi.Opaque {}

typedef CFFileSecurityRef = ffi.Pointer<__CFFileSecurity>;
typedef acl_t = ffi.Pointer<_acl>;

class _acl extends ffi.Opaque {}

typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;
typedef __uint32_t = pkg_ffi.UnsignedInt;
typedef gid_t = __darwin_gid_t;
typedef __darwin_gid_t = __uint32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = pkg_ffi.UnsignedShort;

abstract class CFFileSecurityClearOptions {
  static const int kCFFileSecurityClearOwner = 1;
  static const int kCFFileSecurityClearGroup = 2;
  static const int kCFFileSecurityClearMode = 4;
  static const int kCFFileSecurityClearOwnerUUID = 8;
  static const int kCFFileSecurityClearGroupUUID = 16;
  static const int kCFFileSecurityClearAccessControlList = 32;
}

class __CFStringTokenizer extends ffi.Opaque {}

abstract class CFStringTokenizerTokenType {
  static const int kCFStringTokenizerTokenNone = 0;
  static const int kCFStringTokenizerTokenNormal = 1;
  static const int kCFStringTokenizerTokenHasSubTokensMask = 2;
  static const int kCFStringTokenizerTokenHasDerivedSubTokensMask = 4;
  static const int kCFStringTokenizerTokenHasHasNumbersMask = 8;
  static const int kCFStringTokenizerTokenHasNonLettersMask = 16;
  static const int kCFStringTokenizerTokenIsCJWordMask = 32;
}

typedef CFStringTokenizerRef = ffi.Pointer<__CFStringTokenizer>;

class __CFFileDescriptor extends ffi.Opaque {}

class CFFileDescriptorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFFileDescriptorRef = ffi.Pointer<__CFFileDescriptor>;
typedef CFFileDescriptorNativeDescriptor = pkg_ffi.Int;
typedef CFFileDescriptorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFFileDescriptorRef, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;

class __CFUserNotification extends ffi.Opaque {}

typedef CFUserNotificationRef = ffi.Pointer<__CFUserNotification>;
typedef CFUserNotificationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFUserNotificationRef, CFOptionFlags)>>;

class __CFXMLNode extends ffi.Opaque {}

abstract class CFXMLNodeTypeCode {
  static const int kCFXMLNodeTypeDocument = 1;
  static const int kCFXMLNodeTypeElement = 2;
  static const int kCFXMLNodeTypeAttribute = 3;
  static const int kCFXMLNodeTypeProcessingInstruction = 4;
  static const int kCFXMLNodeTypeComment = 5;
  static const int kCFXMLNodeTypeText = 6;
  static const int kCFXMLNodeTypeCDATASection = 7;
  static const int kCFXMLNodeTypeDocumentFragment = 8;
  static const int kCFXMLNodeTypeEntity = 9;
  static const int kCFXMLNodeTypeEntityReference = 10;
  static const int kCFXMLNodeTypeDocumentType = 11;
  static const int kCFXMLNodeTypeWhitespace = 12;
  static const int kCFXMLNodeTypeNotation = 13;
  static const int kCFXMLNodeTypeElementTypeDeclaration = 14;
  static const int kCFXMLNodeTypeAttributeListDeclaration = 15;
}

class CFXMLElementInfo extends ffi.Struct {
  external CFDictionaryRef attributes;

  external CFArrayRef attributeOrder;

  @Boolean()
  external int isEmpty;

  @ffi.Array.multi([3])
  external ffi.Array<pkg_ffi.Char> _reserved;
}

class CFXMLProcessingInstructionInfo extends ffi.Struct {
  external CFStringRef dataString;
}

class CFXMLDocumentInfo extends ffi.Struct {
  external CFURLRef sourceURL;

  @CFStringEncoding()
  external int encoding;
}

class CFXMLExternalID extends ffi.Struct {
  external CFURLRef systemID;

  external CFStringRef publicID;
}

class CFXMLDocumentTypeInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLNotationInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLElementTypeDeclarationInfo extends ffi.Struct {
  external CFStringRef contentDescription;
}

class CFXMLAttributeDeclarationInfo extends ffi.Struct {
  external CFStringRef attributeName;

  external CFStringRef typeString;

  external CFStringRef defaultString;
}

class CFXMLAttributeListDeclarationInfo extends ffi.Struct {
  @CFIndex()
  external int numberOfAttributes;

  external ffi.Pointer<CFXMLAttributeDeclarationInfo> attributes;
}

abstract class CFXMLEntityTypeCode {
  static const int kCFXMLEntityTypeParameter = 0;
  static const int kCFXMLEntityTypeParsedInternal = 1;
  static const int kCFXMLEntityTypeParsedExternal = 2;
  static const int kCFXMLEntityTypeUnparsed = 3;
  static const int kCFXMLEntityTypeCharacter = 4;
}

class CFXMLEntityInfo extends ffi.Struct {
  @ffi.Int32()
  external int entityType;

  external CFStringRef replacementText;

  external CFXMLExternalID entityID;

  external CFStringRef notationName;
}

class CFXMLEntityReferenceInfo extends ffi.Struct {
  @ffi.Int32()
  external int entityType;
}

typedef CFXMLNodeRef = ffi.Pointer<__CFXMLNode>;
typedef CFXMLTreeRef = CFTreeRef;

class __CFXMLParser extends ffi.Opaque {}

abstract class CFXMLParserOptions {
  static const int kCFXMLParserValidateDocument = 1;
  static const int kCFXMLParserSkipMetaData = 2;
  static const int kCFXMLParserReplacePhysicalEntities = 4;
  static const int kCFXMLParserSkipWhitespace = 8;
  static const int kCFXMLParserResolveExternalEntities = 16;
  static const int kCFXMLParserAddImpliedAttributes = 32;
  static const int kCFXMLParserAllOptions = 16777215;
  static const int kCFXMLParserNoOptions = 0;
}

abstract class CFXMLParserStatusCode {
  static const int kCFXMLStatusParseNotBegun = -2;
  static const int kCFXMLStatusParseInProgress = -1;
  static const int kCFXMLStatusParseSuccessful = 0;
  static const int kCFXMLErrorUnexpectedEOF = 1;
  static const int kCFXMLErrorUnknownEncoding = 2;
  static const int kCFXMLErrorEncodingConversionFailure = 3;
  static const int kCFXMLErrorMalformedProcessingInstruction = 4;
  static const int kCFXMLErrorMalformedDTD = 5;
  static const int kCFXMLErrorMalformedName = 6;
  static const int kCFXMLErrorMalformedCDSect = 7;
  static const int kCFXMLErrorMalformedCloseTag = 8;
  static const int kCFXMLErrorMalformedStartTag = 9;
  static const int kCFXMLErrorMalformedDocument = 10;
  static const int kCFXMLErrorElementlessDocument = 11;
  static const int kCFXMLErrorMalformedComment = 12;
  static const int kCFXMLErrorMalformedCharacterReference = 13;
  static const int kCFXMLErrorMalformedParsedCharacterData = 14;
  static const int kCFXMLErrorNoData = 15;
}

class CFXMLParserCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFXMLParserCreateXMLStructureCallBack createXMLStructure;

  external CFXMLParserAddChildCallBack addChild;

  external CFXMLParserEndXMLStructureCallBack endXMLStructure;

  external CFXMLParserResolveExternalEntityCallBack resolveExternalEntity;

  external CFXMLParserHandleErrorCallBack handleError;
}

typedef CFXMLParserCreateXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFXMLParserRef, CFXMLNodeRef, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserRef = ffi.Pointer<__CFXMLParser>;
typedef CFXMLParserAddChildCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFXMLParserRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserEndXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFXMLParserRef, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserResolveExternalEntityCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(CFXMLParserRef, ffi.Pointer<CFXMLExternalID>,
            ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserHandleErrorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(CFXMLParserRef, ffi.Int32, ffi.Pointer<ffi.Void>)>>;

class CFXMLParserContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFXMLParserRetainCallBack retain;

  external CFXMLParserReleaseCallBack release;

  external CFXMLParserCopyDescriptionCallBack copyDescription;
}

typedef CFXMLParserRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

abstract class SecTrustResultType {
  static const int kSecTrustResultInvalid = 0;
  static const int kSecTrustResultProceed = 1;
  static const int kSecTrustResultConfirm = 2;
  static const int kSecTrustResultDeny = 3;
  static const int kSecTrustResultUnspecified = 4;
  static const int kSecTrustResultRecoverableTrustFailure = 5;
  static const int kSecTrustResultFatalTrustFailure = 6;
  static const int kSecTrustResultOtherError = 7;
}

class __SecTrust extends ffi.Opaque {}

typedef SecTrustRef = ffi.Pointer<__SecTrust>;
typedef SecTrustCallback = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock17_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, SecTrustRef arg0, int arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(SecTrustRef arg0, ffi.Int32 arg1)>>()
      .asFunction<void Function(SecTrustRef arg0, int arg1)>()(arg0, arg1);
}

class ObjCBlock17 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock17._(this._impl, this._lib);

  ObjCBlock17.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(SecTrustRef arg0, ffi.Int32 arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        SecTrustRef arg0,
                        ffi.Int32 arg1)>(_ObjCBlock17_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef SecTrustWithErrorCallback = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock18_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    SecTrustRef arg0, int arg1, CFErrorRef arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  SecTrustRef arg0, ffi.Uint8 arg1, CFErrorRef arg2)>>()
      .asFunction<
          void Function(
              SecTrustRef arg0, int arg1, CFErrorRef arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock18 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock18._(this._impl, this._lib);

  ObjCBlock18.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      SecTrustRef arg0, ffi.Uint8 arg1, CFErrorRef arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        SecTrustRef arg0,
                        ffi.Uint8 arg1,
                        CFErrorRef arg2)>(_ObjCBlock18_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef SecKeyRef = ffi.Pointer<__SecKey>;
typedef SecCertificateRef = ffi.Pointer<__SecCertificate>;

class cssm_data extends ffi.Struct {
  @pkg_ffi.Size()
  external int Length;

  external ffi.Pointer<ffi.Uint8> Data;
}

class SecAsn1AlgId extends ffi.Struct {
  external SecAsn1Oid algorithm;

  external SecAsn1Item parameters;
}

typedef SecAsn1Oid = cssm_data;
typedef SecAsn1Item = cssm_data;

class SecAsn1PubKeyInfo extends ffi.Struct {
  external SecAsn1AlgId algorithm;

  external SecAsn1Item subjectPublicKey;
}

class SecAsn1Template_struct extends ffi.Struct {
  @ffi.Uint32()
  external int kind;

  @ffi.Uint32()
  external int offset;

  external ffi.Pointer<ffi.Void> sub;

  @ffi.Uint32()
  external int size;
}

class cssm_guid extends ffi.Struct {
  @uint32()
  external int Data1;

  @uint16()
  external int Data2;

  @uint16()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<uint8> Data4;
}

typedef uint32 = ffi.Uint32;
typedef uint16 = ffi.Uint16;
typedef uint8 = ffi.Uint8;

class cssm_version extends ffi.Struct {
  @uint32()
  external int Major;

  @uint32()
  external int Minor;
}

class cssm_subservice_uid extends ffi.Struct {
  external CSSM_GUID Guid;

  external CSSM_VERSION Version;

  @uint32()
  external int SubserviceId;

  @CSSM_SERVICE_TYPE()
  external int SubserviceType;
}

typedef CSSM_GUID = cssm_guid;
typedef CSSM_VERSION = cssm_version;
typedef CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;
typedef CSSM_SERVICE_MASK = uint32;

class cssm_net_address extends ffi.Struct {
  @CSSM_NET_ADDRESS_TYPE()
  external int AddressType;

  external SecAsn1Item Address;
}

typedef CSSM_NET_ADDRESS_TYPE = uint32;

class cssm_crypto_data extends ffi.Struct {
  external SecAsn1Item Param;

  external CSSM_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(CSSM_DATA_PTR, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_RETURN = sint32;
typedef sint32 = ffi.Int32;
typedef CSSM_DATA_PTR = ffi.Pointer<SecAsn1Item>;

class cssm_list_element extends ffi.Struct {
  external ffi.Pointer<cssm_list_element> NextElement;

  @CSSM_WORDID_TYPE()
  external int WordID;

  @CSSM_LIST_ELEMENT_TYPE()
  external int ElementType;

  external UnnamedUnion1 Element;
}

typedef CSSM_WORDID_TYPE = sint32;
typedef CSSM_LIST_ELEMENT_TYPE = uint32;

class UnnamedUnion1 extends ffi.Union {
  external CSSM_LIST Sublist;

  external SecAsn1Item Word;
}

typedef CSSM_LIST = cssm_list;

class cssm_list extends ffi.Struct {
  @CSSM_LIST_TYPE()
  external int ListType;

  external CSSM_LIST_ELEMENT_PTR Head;

  external CSSM_LIST_ELEMENT_PTR Tail;
}

typedef CSSM_LIST_TYPE = uint32;
typedef CSSM_LIST_ELEMENT_PTR = ffi.Pointer<cssm_list_element>;

class CSSM_TUPLE extends ffi.Struct {
  external CSSM_LIST Issuer;

  external CSSM_LIST Subject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_LIST AuthorizationTag;

  external CSSM_LIST ValidityPeriod;
}

typedef CSSM_BOOL = sint32;

class cssm_tuplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfTuples;

  external CSSM_TUPLE_PTR Tuples;
}

typedef CSSM_TUPLE_PTR = ffi.Pointer<CSSM_TUPLE>;

class cssm_sample extends ffi.Struct {
  external CSSM_LIST TypedSample;

  external ffi.Pointer<CSSM_SUBSERVICE_UID> Verifier;
}

typedef CSSM_SUBSERVICE_UID = cssm_subservice_uid;

class cssm_samplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfSamples;

  external ffi.Pointer<CSSM_SAMPLE> Samples;
}

typedef CSSM_SAMPLE = cssm_sample;

class cssm_memory_funcs extends ffi.Struct {
  external CSSM_MALLOC malloc_func;

  external CSSM_FREE free_func;

  external CSSM_REALLOC realloc_func;

  external CSSM_CALLOC calloc_func;

  external ffi.Pointer<ffi.Void> AllocRef;
}

typedef CSSM_MALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_SIZE = pkg_ffi.Size;
typedef CSSM_FREE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_REALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_CALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            uint32, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;

class cssm_encoded_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  external SecAsn1Item CertBlob;
}

typedef CSSM_CERT_TYPE = uint32;
typedef CSSM_CERT_ENCODING = uint32;

class cssm_parsed_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_PARSE_FORMAT()
  external int ParsedCertFormat;

  external ffi.Pointer<ffi.Void> ParsedCert;
}

typedef CSSM_CERT_PARSE_FORMAT = uint32;

class cssm_cert_pair extends ffi.Struct {
  external CSSM_ENCODED_CERT EncodedCert;

  external CSSM_PARSED_CERT ParsedCert;
}

typedef CSSM_ENCODED_CERT = cssm_encoded_cert;
typedef CSSM_PARSED_CERT = cssm_parsed_cert;

class cssm_certgroup extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  @uint32()
  external int NumCerts;

  external UnnamedUnion2 GroupList;

  @CSSM_CERTGROUP_TYPE()
  external int CertGroupType;

  external ffi.Pointer<ffi.Void> Reserved;
}

class UnnamedUnion2 extends ffi.Union {
  external CSSM_DATA_PTR CertList;

  external CSSM_ENCODED_CERT_PTR EncodedCertList;

  external CSSM_PARSED_CERT_PTR ParsedCertList;

  external CSSM_CERT_PAIR_PTR PairCertList;
}

typedef CSSM_ENCODED_CERT_PTR = ffi.Pointer<cssm_encoded_cert>;
typedef CSSM_PARSED_CERT_PTR = ffi.Pointer<cssm_parsed_cert>;
typedef CSSM_CERT_PAIR_PTR = ffi.Pointer<cssm_cert_pair>;
typedef CSSM_CERTGROUP_TYPE = uint32;

class cssm_base_certs extends ffi.Struct {
  @CSSM_TP_HANDLE()
  external int TPHandle;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_CERTGROUP Certs;
}

typedef CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_MODULE_HANDLE = CSSM_HANDLE;
typedef CSSM_HANDLE = CSSM_INTPTR;
typedef CSSM_INTPTR = ffi.IntPtr;
typedef CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_CERTGROUP = cssm_certgroup;

class cssm_access_credentials extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> EntryTag;

  external CSSM_BASE_CERTS BaseCerts;

  external CSSM_SAMPLEGROUP Samples;

  external CSSM_CHALLENGE_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_BASE_CERTS = cssm_base_certs;
typedef CSSM_SAMPLEGROUP = cssm_samplegroup;
typedef CSSM_CHALLENGE_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(ffi.Pointer<CSSM_LIST>, CSSM_SAMPLEGROUP_PTR,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CSSM_MEMORY_FUNCS>)>>;
typedef CSSM_SAMPLEGROUP_PTR = ffi.Pointer<cssm_samplegroup>;
typedef CSSM_MEMORY_FUNCS = cssm_memory_funcs;

class cssm_authorizationgroup extends ffi.Struct {
  @uint32()
  external int NumberOfAuthTags;

  external ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG> AuthTags;
}

typedef CSSM_ACL_AUTHORIZATION_TAG = sint32;

class cssm_acl_validity_period extends ffi.Struct {
  external SecAsn1Item StartDate;

  external SecAsn1Item EndDate;
}

class cssm_acl_entry_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_AUTHORIZATIONGROUP Authorization;

  external CSSM_ACL_VALIDITY_PERIOD TimeRange;

  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> EntryTag;
}

typedef CSSM_AUTHORIZATIONGROUP = cssm_authorizationgroup;
typedef CSSM_ACL_VALIDITY_PERIOD = cssm_acl_validity_period;

class cssm_acl_owner_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;
}

class cssm_acl_entry_input extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE Prototype;

  external CSSM_ACL_SUBJECT_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerContext;
}

typedef CSSM_ACL_ENTRY_PROTOTYPE = cssm_acl_entry_prototype;
typedef CSSM_ACL_SUBJECT_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(ffi.Pointer<CSSM_LIST>, CSSM_LIST_PTR,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CSSM_MEMORY_FUNCS>)>>;
typedef CSSM_LIST_PTR = ffi.Pointer<cssm_list>;

class cssm_resource_control_context extends ffi.Struct {
  external CSSM_ACCESS_CREDENTIALS_PTR AccessCred;

  external CSSM_ACL_ENTRY_INPUT InitialAclEntry;
}

typedef CSSM_ACCESS_CREDENTIALS_PTR = ffi.Pointer<cssm_access_credentials>;
typedef CSSM_ACL_ENTRY_INPUT = cssm_acl_entry_input;

class cssm_acl_entry_info extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE EntryPublicInfo;

  @CSSM_ACL_HANDLE()
  external int EntryHandle;
}

typedef CSSM_ACL_HANDLE = CSSM_HANDLE;

class cssm_acl_edit extends ffi.Struct {
  @CSSM_ACL_EDIT_MODE()
  external int EditMode;

  @CSSM_ACL_HANDLE()
  external int OldEntryHandle;

  external ffi.Pointer<CSSM_ACL_ENTRY_INPUT> NewEntry;
}

typedef CSSM_ACL_EDIT_MODE = uint32;

class cssm_func_name_addr extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> Name;

  external CSSM_PROC_ADDR Address;
}

typedef CSSM_PROC_ADDR = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

class cssm_date extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<uint8> Year;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Month;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Day;
}

class cssm_range extends ffi.Struct {
  @uint32()
  external int Min;

  @uint32()
  external int Max;
}

class cssm_query_size_data extends ffi.Struct {
  @uint32()
  external int SizeInputBlock;

  @uint32()
  external int SizeOutputBlock;
}

class cssm_key_size extends ffi.Struct {
  @uint32()
  external int LogicalKeySizeInBits;

  @uint32()
  external int EffectiveKeySizeInBits;
}

class cssm_keyheader extends ffi.Struct {
  @CSSM_HEADERVERSION()
  external int HeaderVersion;

  external CSSM_GUID CspId;

  @CSSM_KEYBLOB_TYPE()
  external int BlobType;

  @CSSM_KEYBLOB_FORMAT()
  external int Format;

  @CSSM_ALGORITHMS()
  external int AlgorithmId;

  @CSSM_KEYCLASS()
  external int KeyClass;

  @uint32()
  external int LogicalKeySizeInBits;

  @CSSM_KEYATTR_FLAGS()
  external int KeyAttr;

  @CSSM_KEYUSE()
  external int KeyUsage;

  external CSSM_DATE StartDate;

  external CSSM_DATE EndDate;

  @CSSM_ALGORITHMS()
  external int WrapAlgorithmId;

  @CSSM_ENCRYPT_MODE()
  external int WrapMode;

  @uint32()
  external int Reserved;
}

typedef CSSM_HEADERVERSION = uint32;
typedef CSSM_KEYBLOB_TYPE = uint32;
typedef CSSM_KEYBLOB_FORMAT = uint32;
typedef CSSM_ALGORITHMS = uint32;
typedef CSSM_KEYCLASS = uint32;
typedef CSSM_KEYATTR_FLAGS = uint32;
typedef CSSM_KEYUSE = uint32;
typedef CSSM_DATE = cssm_date;
typedef CSSM_ENCRYPT_MODE = uint32;

class cssm_key extends ffi.Struct {
  external CSSM_KEYHEADER KeyHeader;

  external SecAsn1Item KeyData;
}

typedef CSSM_KEYHEADER = cssm_keyheader;

class cssm_dl_db_handle extends ffi.Struct {
  @CSSM_DL_HANDLE()
  external int DLHandle;

  @CSSM_DB_HANDLE()
  external int DBHandle;
}

typedef CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;

class cssm_context_attribute extends ffi.Struct {
  @CSSM_ATTRIBUTE_TYPE()
  external int AttributeType;

  @uint32()
  external int AttributeLength;

  external cssm_context_attribute_value Attribute;
}

typedef CSSM_ATTRIBUTE_TYPE = uint32;

class cssm_context_attribute_value extends ffi.Union {
  external ffi.Pointer<pkg_ffi.Char> String;

  @uint32()
  external int Uint32;

  external CSSM_ACCESS_CREDENTIALS_PTR AccessCredentials;

  external CSSM_KEY_PTR Key;

  external CSSM_DATA_PTR Data;

  @CSSM_PADDING()
  external int Padding;

  external CSSM_DATE_PTR Date;

  external CSSM_RANGE_PTR Range;

  external CSSM_CRYPTO_DATA_PTR CryptoData;

  external CSSM_VERSION_PTR Version;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;

  external ffi.Pointer<cssm_kr_profile> KRProfile;
}

typedef CSSM_KEY_PTR = ffi.Pointer<cssm_key>;
typedef CSSM_PADDING = uint32;
typedef CSSM_DATE_PTR = ffi.Pointer<cssm_date>;
typedef CSSM_RANGE_PTR = ffi.Pointer<cssm_range>;
typedef CSSM_CRYPTO_DATA_PTR = ffi.Pointer<cssm_crypto_data>;
typedef CSSM_VERSION_PTR = ffi.Pointer<cssm_version>;
typedef CSSM_DL_DB_HANDLE_PTR = ffi.Pointer<cssm_dl_db_handle>;

class cssm_kr_profile extends ffi.Opaque {}

class cssm_context extends ffi.Struct {
  @CSSM_CONTEXT_TYPE()
  external int ContextType;

  @CSSM_ALGORITHMS()
  external int AlgorithmType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_CONTEXT_ATTRIBUTE_PTR ContextAttributes;

  @CSSM_CSP_HANDLE()
  external int CSPHandle;

  @CSSM_BOOL()
  external int Privileged;

  @uint32()
  external int EncryptionProhibited;

  @uint32()
  external int WorkFactor;

  @uint32()
  external int Reserved;
}

typedef CSSM_CONTEXT_TYPE = uint32;
typedef CSSM_CONTEXT_ATTRIBUTE_PTR = ffi.Pointer<cssm_context_attribute>;
typedef CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;

class cssm_pkcs1_oaep_params extends ffi.Struct {
  @uint32()
  external int HashAlgorithm;

  external SecAsn1Item HashParams;

  @CSSM_PKCS_OAEP_MGF()
  external int MGF;

  external SecAsn1Item MGFParams;

  @CSSM_PKCS_OAEP_PSOURCE()
  external int PSource;

  external SecAsn1Item PSourceParams;
}

typedef CSSM_PKCS_OAEP_MGF = uint32;
typedef CSSM_PKCS_OAEP_PSOURCE = uint32;

class cssm_csp_operational_statistics extends ffi.Struct {
  @CSSM_BOOL()
  external int UserAuthenticated;

  @CSSM_CSP_FLAGS()
  external int DeviceFlags;

  @uint32()
  external int TokenMaxSessionCount;

  @uint32()
  external int TokenOpenedSessionCount;

  @uint32()
  external int TokenMaxRWSessionCount;

  @uint32()
  external int TokenOpenedRWSessionCount;

  @uint32()
  external int TokenTotalPublicMem;

  @uint32()
  external int TokenFreePublicMem;

  @uint32()
  external int TokenTotalPrivateMem;

  @uint32()
  external int TokenFreePrivateMem;
}

typedef CSSM_CSP_FLAGS = uint32;

class cssm_pkcs5_pbkdf1_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  external SecAsn1Item InitVector;
}

class cssm_pkcs5_pbkdf2_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  @CSSM_PKCS5_PBKDF2_PRF()
  external int PseudoRandomFunction;
}

typedef CSSM_PKCS5_PBKDF2_PRF = uint32;

class cssm_kea_derive_params extends ffi.Struct {
  external SecAsn1Item Rb;

  external SecAsn1Item Yb;
}

class cssm_tp_authority_id extends ffi.Struct {
  external ffi.Pointer<SecAsn1Item> AuthorityCert;

  external CSSM_NET_ADDRESS_PTR AuthorityLocation;
}

typedef CSSM_NET_ADDRESS_PTR = ffi.Pointer<cssm_net_address>;

class cssm_field extends ffi.Struct {
  external SecAsn1Oid FieldOid;

  external SecAsn1Item FieldValue;
}

class cssm_tp_policyinfo extends ffi.Struct {
  @uint32()
  external int NumberOfPolicyIds;

  external CSSM_FIELD_PTR PolicyIds;

  external ffi.Pointer<ffi.Void> PolicyControl;
}

typedef CSSM_FIELD_PTR = ffi.Pointer<cssm_field>;

class cssm_dl_db_list extends ffi.Struct {
  @uint32()
  external int NumHandles;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;
}

class cssm_tp_callerauth_context extends ffi.Struct {
  external CSSM_TP_POLICYINFO Policy;

  external CSSM_TIMESTRING VerifyTime;

  @CSSM_TP_STOP_ON()
  external int VerificationAbortOn;

  external CSSM_TP_VERIFICATION_RESULTS_CALLBACK CallbackWithVerifiedCert;

  @uint32()
  external int NumberOfAnchorCerts;

  external CSSM_DATA_PTR AnchorCerts;

  external CSSM_DL_DB_LIST_PTR DBList;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_POLICYINFO = cssm_tp_policyinfo;
typedef CSSM_TIMESTRING = ffi.Pointer<pkg_ffi.Char>;
typedef CSSM_TP_STOP_ON = uint32;
typedef CSSM_TP_VERIFICATION_RESULTS_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(
            CSSM_MODULE_HANDLE, ffi.Pointer<ffi.Void>, CSSM_DATA_PTR)>>;
typedef CSSM_DL_DB_LIST_PTR = ffi.Pointer<cssm_dl_db_list>;

class cssm_encoded_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  external SecAsn1Item CrlBlob;
}

typedef CSSM_CRL_TYPE = uint32;
typedef CSSM_CRL_ENCODING = uint32;

class cssm_parsed_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_PARSE_FORMAT()
  external int ParsedCrlFormat;

  external ffi.Pointer<ffi.Void> ParsedCrl;
}

typedef CSSM_CRL_PARSE_FORMAT = uint32;

class cssm_crl_pair extends ffi.Struct {
  external CSSM_ENCODED_CRL EncodedCrl;

  external CSSM_PARSED_CRL ParsedCrl;
}

typedef CSSM_ENCODED_CRL = cssm_encoded_crl;
typedef CSSM_PARSED_CRL = cssm_parsed_crl;

class cssm_crlgroup extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  @uint32()
  external int NumberOfCrls;

  external UnnamedUnion3 GroupCrlList;

  @CSSM_CRLGROUP_TYPE()
  external int CrlGroupType;
}

class UnnamedUnion3 extends ffi.Union {
  external CSSM_DATA_PTR CrlList;

  external CSSM_ENCODED_CRL_PTR EncodedCrlList;

  external CSSM_PARSED_CRL_PTR ParsedCrlList;

  external CSSM_CRL_PAIR_PTR PairCrlList;
}

typedef CSSM_ENCODED_CRL_PTR = ffi.Pointer<cssm_encoded_crl>;
typedef CSSM_PARSED_CRL_PTR = ffi.Pointer<cssm_parsed_crl>;
typedef CSSM_CRL_PAIR_PTR = ffi.Pointer<cssm_crl_pair>;
typedef CSSM_CRLGROUP_TYPE = uint32;

class cssm_fieldgroup extends ffi.Struct {
  @pkg_ffi.Int()
  external int NumberOfFields;

  external CSSM_FIELD_PTR Fields;
}

class cssm_evidence extends ffi.Struct {
  @CSSM_EVIDENCE_FORM()
  external int EvidenceForm;

  external ffi.Pointer<ffi.Void> Evidence;
}

typedef CSSM_EVIDENCE_FORM = uint32;

class cssm_tp_verify_context extends ffi.Struct {
  @CSSM_TP_ACTION()
  external int Action;

  external SecAsn1Item ActionData;

  external CSSM_CRLGROUP Crls;

  external CSSM_TP_CALLERAUTH_CONTEXT_PTR Cred;
}

typedef CSSM_TP_ACTION = uint32;
typedef CSSM_CRLGROUP = cssm_crlgroup;
typedef CSSM_TP_CALLERAUTH_CONTEXT_PTR
    = ffi.Pointer<cssm_tp_callerauth_context>;

class cssm_tp_verify_context_result extends ffi.Struct {
  @uint32()
  external int NumberOfEvidences;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_EVIDENCE_PTR = ffi.Pointer<cssm_evidence>;

class cssm_tp_request_set extends ffi.Struct {
  @uint32()
  external int NumberOfRequests;

  external ffi.Pointer<ffi.Void> Requests;
}

class cssm_tp_result_set extends ffi.Struct {
  @uint32()
  external int NumberOfResults;

  external ffi.Pointer<ffi.Void> Results;
}

class cssm_tp_confirm_response extends ffi.Struct {
  @uint32()
  external int NumberOfResponses;

  external CSSM_TP_CONFIRM_STATUS_PTR Responses;
}

typedef CSSM_TP_CONFIRM_STATUS_PTR = ffi.Pointer<uint32>;

class cssm_tp_certissue_input extends ffi.Struct {
  external CSSM_SUBSERVICE_UID CSPSubserviceUid;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfTemplateFields;

  external CSSM_FIELD_PTR SubjectCertFields;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

typedef CSSM_TP_SERVICES = uint32;

class cssm_tp_certissue_output extends ffi.Struct {
  @CSSM_TP_CERTISSUE_STATUS()
  external int IssueStatus;

  external CSSM_CERTGROUP_PTR CertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTISSUE_STATUS = uint32;
typedef CSSM_CERTGROUP_PTR = ffi.Pointer<cssm_certgroup>;

class cssm_tp_certchange_input extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_ACTION()
  external int Action;

  @CSSM_TP_CERTCHANGE_REASON()
  external int Reason;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_FIELD_PTR ChangeInfo;

  external CSSM_TIMESTRING StartTime;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_CERTCHANGE_ACTION = uint32;
typedef CSSM_TP_CERTCHANGE_REASON = uint32;

class cssm_tp_certchange_output extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_STATUS()
  external int ActionStatus;

  external CSSM_FIELD RevokeInfo;
}

typedef CSSM_TP_CERTCHANGE_STATUS = uint32;
typedef CSSM_FIELD = cssm_field;

class cssm_tp_certverify_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_TP_VERIFY_CONTEXT_PTR VerifyContext;
}

typedef CSSM_TP_VERIFY_CONTEXT_PTR = ffi.Pointer<cssm_tp_verify_context>;

class cssm_tp_certverify_output extends ffi.Struct {
  @CSSM_TP_CERTVERIFY_STATUS()
  external int VerifyStatus;

  @uint32()
  external int NumberOfEvidence;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_TP_CERTVERIFY_STATUS = uint32;

class cssm_tp_certnotarize_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfFields;

  external CSSM_FIELD_PTR MoreFields;

  external CSSM_FIELD_PTR SignScope;

  @uint32()
  external int ScopeSize;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

class cssm_tp_certnotarize_output extends ffi.Struct {
  @CSSM_TP_CERTNOTARIZE_STATUS()
  external int NotarizeStatus;

  external CSSM_CERTGROUP_PTR NotarizedCertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTNOTARIZE_STATUS = uint32;

class cssm_tp_certreclaim_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfSelectionFields;

  external CSSM_FIELD_PTR SelectionFields;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

class cssm_tp_certreclaim_output extends ffi.Struct {
  @CSSM_TP_CERTRECLAIM_STATUS()
  external int ReclaimStatus;

  external CSSM_CERTGROUP_PTR ReclaimedCertGroup;

  @CSSM_LONG_HANDLE()
  external int KeyCacheHandle;
}

typedef CSSM_TP_CERTRECLAIM_STATUS = uint32;
typedef CSSM_LONG_HANDLE = uint64;
typedef uint64 = ffi.Uint64;

class cssm_tp_crlissue_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int CrlIdentifier;

  external CSSM_TIMESTRING CrlThisTime;

  external CSSM_FIELD_PTR PolicyIdentifier;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

class cssm_tp_crlissue_output extends ffi.Struct {
  @CSSM_TP_CRLISSUE_STATUS()
  external int IssueStatus;

  external CSSM_ENCODED_CRL_PTR Crl;

  external CSSM_TIMESTRING CrlNextTime;
}

typedef CSSM_TP_CRLISSUE_STATUS = uint32;

class cssm_cert_bundle_header extends ffi.Struct {
  @CSSM_CERT_BUNDLE_TYPE()
  external int BundleType;

  @CSSM_CERT_BUNDLE_ENCODING()
  external int BundleEncoding;
}

typedef CSSM_CERT_BUNDLE_TYPE = uint32;
typedef CSSM_CERT_BUNDLE_ENCODING = uint32;

class cssm_cert_bundle extends ffi.Struct {
  external CSSM_CERT_BUNDLE_HEADER BundleHeader;

  external SecAsn1Item Bundle;
}

typedef CSSM_CERT_BUNDLE_HEADER = cssm_cert_bundle_header;

class cssm_db_attribute_info extends ffi.Struct {
  @CSSM_DB_ATTRIBUTE_NAME_FORMAT()
  external int AttributeNameFormat;

  external cssm_db_attribute_label Label;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int AttributeFormat;
}

typedef CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;

class cssm_db_attribute_label extends ffi.Union {
  external ffi.Pointer<pkg_ffi.Char> AttributeName;

  external SecAsn1Oid AttributeOID;

  @uint32()
  external int AttributeID;
}

typedef CSSM_DB_ATTRIBUTE_FORMAT = uint32;

class cssm_db_attribute_data extends ffi.Struct {
  external CSSM_DB_ATTRIBUTE_INFO Info;

  @uint32()
  external int NumberOfValues;

  external CSSM_DATA_PTR Value;
}

typedef CSSM_DB_ATTRIBUTE_INFO = cssm_db_attribute_info;

class cssm_db_record_attribute_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_INFO_PTR AttributeInfo;
}

typedef CSSM_DB_RECORDTYPE = uint32;
typedef CSSM_DB_ATTRIBUTE_INFO_PTR = ffi.Pointer<cssm_db_attribute_info>;

class cssm_db_record_attribute_data extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int SemanticInformation;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_DATA_PTR AttributeData;
}

typedef CSSM_DB_ATTRIBUTE_DATA_PTR = ffi.Pointer<cssm_db_attribute_data>;

class cssm_db_parsing_module_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  external CSSM_SUBSERVICE_UID ModuleSubserviceUid;
}

class cssm_db_index_info extends ffi.Struct {
  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;

  external CSSM_DB_ATTRIBUTE_INFO Info;
}

typedef CSSM_DB_INDEX_TYPE = uint32;
typedef CSSM_DB_INDEXED_DATA_LOCATION = uint32;

class cssm_db_unique_record extends ffi.Struct {
  external CSSM_DB_INDEX_INFO RecordLocator;

  external SecAsn1Item RecordIdentifier;
}

typedef CSSM_DB_INDEX_INFO = cssm_db_index_info;

class cssm_db_record_index_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfIndexes;

  external CSSM_DB_INDEX_INFO_PTR IndexInfo;
}

typedef CSSM_DB_INDEX_INFO_PTR = ffi.Pointer<cssm_db_index_info>;

class cssm_dbinfo extends ffi.Struct {
  @uint32()
  external int NumberOfRecordTypes;

  external CSSM_DB_PARSING_MODULE_INFO_PTR DefaultParsingModules;

  external CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR RecordAttributeNames;

  external CSSM_DB_RECORD_INDEX_INFO_PTR RecordIndexes;

  @CSSM_BOOL()
  external int IsLocal;

  external ffi.Pointer<pkg_ffi.Char> AccessPath;

  external ffi.Pointer<ffi.Void> Reserved;
}

typedef CSSM_DB_PARSING_MODULE_INFO_PTR
    = ffi.Pointer<cssm_db_parsing_module_info>;
typedef CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR
    = ffi.Pointer<cssm_db_record_attribute_info>;
typedef CSSM_DB_RECORD_INDEX_INFO_PTR = ffi.Pointer<cssm_db_record_index_info>;

class cssm_selection_predicate extends ffi.Struct {
  @CSSM_DB_OPERATOR()
  external int DbOperator;

  external CSSM_DB_ATTRIBUTE_DATA Attribute;
}

typedef CSSM_DB_OPERATOR = uint32;
typedef CSSM_DB_ATTRIBUTE_DATA = cssm_db_attribute_data;

class cssm_query_limits extends ffi.Struct {
  @uint32()
  external int TimeLimit;

  @uint32()
  external int SizeLimit;
}

class cssm_query extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  @CSSM_DB_CONJUNCTIVE()
  external int Conjunctive;

  @uint32()
  external int NumSelectionPredicates;

  external CSSM_SELECTION_PREDICATE_PTR SelectionPredicate;

  external CSSM_QUERY_LIMITS QueryLimits;

  @CSSM_QUERY_FLAGS()
  external int QueryFlags;
}

typedef CSSM_DB_CONJUNCTIVE = uint32;
typedef CSSM_SELECTION_PREDICATE_PTR = ffi.Pointer<cssm_selection_predicate>;
typedef CSSM_QUERY_LIMITS = cssm_query_limits;
typedef CSSM_QUERY_FLAGS = uint32;

class cssm_dl_pkcs11_attributes extends ffi.Struct {
  @uint32()
  external int DeviceAccessFlags;
}

class cssm_name_list extends ffi.Struct {
  @uint32()
  external int NumStrings;

  external ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> String;
}

class cssm_db_schema_attribute_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  external ffi.Pointer<pkg_ffi.Char> AttributeName;

  external SecAsn1Oid AttributeNameID;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int DataType;
}

class cssm_db_schema_index_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  @uint32()
  external int IndexId;

  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;
}

class cssm_x509_type_value_pair extends ffi.Struct {
  external SecAsn1Oid type;

  @CSSM_BER_TAG()
  external int valueType;

  external SecAsn1Item value;
}

typedef CSSM_BER_TAG = uint8;

class cssm_x509_rdn extends ffi.Struct {
  @uint32()
  external int numberOfPairs;

  external CSSM_X509_TYPE_VALUE_PAIR_PTR AttributeTypeAndValue;
}

typedef CSSM_X509_TYPE_VALUE_PAIR_PTR = ffi.Pointer<cssm_x509_type_value_pair>;

class cssm_x509_name extends ffi.Struct {
  @uint32()
  external int numberOfRDNs;

  external CSSM_X509_RDN_PTR RelativeDistinguishedName;
}

typedef CSSM_X509_RDN_PTR = ffi.Pointer<cssm_x509_rdn>;

class cssm_x509_time extends ffi.Struct {
  @CSSM_BER_TAG()
  external int timeType;

  external SecAsn1Item time;
}

class x509_validity extends ffi.Struct {
  external CSSM_X509_TIME notBefore;

  external CSSM_X509_TIME notAfter;
}

typedef CSSM_X509_TIME = cssm_x509_time;

class cssm_x509ext_basicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_X509_OPTION()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

typedef CSSM_X509_OPTION = CSSM_BOOL;

abstract class extension_data_format {
  static const int CSSM_X509_DATAFORMAT_ENCODED = 0;
  static const int CSSM_X509_DATAFORMAT_PARSED = 1;
  static const int CSSM_X509_DATAFORMAT_PAIR = 2;
}

class cssm_x509_extensionTagAndValue extends ffi.Struct {
  @CSSM_BER_TAG()
  external int type;

  external SecAsn1Item value;
}

class cssm_x509ext_pair extends ffi.Struct {
  external CSSM_X509EXT_TAGandVALUE tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;
}

typedef CSSM_X509EXT_TAGandVALUE = cssm_x509_extensionTagAndValue;

class cssm_x509_extension extends ffi.Struct {
  external SecAsn1Oid extnId;

  @CSSM_BOOL()
  external int critical;

  @ffi.Int32()
  external int format;

  external cssm_x509ext_value value;

  external SecAsn1Item BERvalue;
}

class cssm_x509ext_value extends ffi.Union {
  external ffi.Pointer<CSSM_X509EXT_TAGandVALUE> tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;

  external ffi.Pointer<CSSM_X509EXT_PAIR> valuePair;
}

typedef CSSM_X509EXT_PAIR = cssm_x509ext_pair;

class cssm_x509_extensions extends ffi.Struct {
  @uint32()
  external int numberOfExtensions;

  external CSSM_X509_EXTENSION_PTR extensions;
}

typedef CSSM_X509_EXTENSION_PTR = ffi.Pointer<cssm_x509_extension>;

class cssm_x509_tbs_certificate extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1Item serialNumber;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_VALIDITY validity;

  external CSSM_X509_NAME subject;

  external SecAsn1PubKeyInfo subjectPublicKeyInfo;

  external SecAsn1Item issuerUniqueIdentifier;

  external SecAsn1Item subjectUniqueIdentifier;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_NAME = cssm_x509_name;
typedef CSSM_X509_VALIDITY = x509_validity;
typedef CSSM_X509_EXTENSIONS = cssm_x509_extensions;

class cssm_x509_signature extends ffi.Struct {
  external SecAsn1AlgId algorithmIdentifier;

  external SecAsn1Item encrypted;
}

class cssm_x509_signed_certificate extends ffi.Struct {
  external CSSM_X509_TBS_CERTIFICATE certificate;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTIFICATE = cssm_x509_tbs_certificate;
typedef CSSM_X509_SIGNATURE = cssm_x509_signature;

class cssm_x509ext_policyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item value;
}

class cssm_x509ext_policyQualifiers extends ffi.Struct {
  @uint32()
  external int numberOfPolicyQualifiers;

  external ffi.Pointer<CSSM_X509EXT_POLICYQUALIFIERINFO> policyQualifier;
}

typedef CSSM_X509EXT_POLICYQUALIFIERINFO = cssm_x509ext_policyQualifierInfo;

class cssm_x509ext_policyInfo extends ffi.Struct {
  external SecAsn1Oid policyIdentifier;

  external CSSM_X509EXT_POLICYQUALIFIERS policyQualifiers;
}

typedef CSSM_X509EXT_POLICYQUALIFIERS = cssm_x509ext_policyQualifiers;

class cssm_x509_revoked_cert_entry extends ffi.Struct {
  external SecAsn1Item certificateSerialNumber;

  external CSSM_X509_TIME revocationDate;

  external CSSM_X509_EXTENSIONS extensions;
}

class cssm_x509_revoked_cert_list extends ffi.Struct {
  @uint32()
  external int numberOfRevokedCertEntries;

  external CSSM_X509_REVOKED_CERT_ENTRY_PTR revokedCertEntry;
}

typedef CSSM_X509_REVOKED_CERT_ENTRY_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_entry>;

class cssm_x509_tbs_certlist extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_TIME thisUpdate;

  external CSSM_X509_TIME nextUpdate;

  external CSSM_X509_REVOKED_CERT_LIST_PTR revokedCertificates;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_REVOKED_CERT_LIST_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_list>;

class cssm_x509_signed_crl extends ffi.Struct {
  external CSSM_X509_TBS_CERTLIST tbsCertList;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTLIST = cssm_x509_tbs_certlist;

abstract class __CE_GeneralNameType {
  static const int GNT_OtherName = 0;
  static const int GNT_RFC822Name = 1;
  static const int GNT_DNSName = 2;
  static const int GNT_X400Address = 3;
  static const int GNT_DirectoryName = 4;
  static const int GNT_EdiPartyName = 5;
  static const int GNT_URI = 6;
  static const int GNT_IPAddress = 7;
  static const int GNT_RegisteredID = 8;
}

class __CE_OtherName extends ffi.Struct {
  external SecAsn1Oid typeId;

  external SecAsn1Item value;
}

class __CE_GeneralName extends ffi.Struct {
  @ffi.Int32()
  external int nameType;

  @CSSM_BOOL()
  external int berEncoded;

  external SecAsn1Item name;
}

class __CE_GeneralNames extends ffi.Struct {
  @uint32()
  external int numNames;

  external ffi.Pointer<CE_GeneralName> generalName;
}

typedef CE_GeneralName = __CE_GeneralName;

class __CE_AuthorityKeyID extends ffi.Struct {
  @CSSM_BOOL()
  external int keyIdentifierPresent;

  external SecAsn1Item keyIdentifier;

  @CSSM_BOOL()
  external int generalNamesPresent;

  external ffi.Pointer<CE_GeneralNames> generalNames;

  @CSSM_BOOL()
  external int serialNumberPresent;

  external SecAsn1Item serialNumber;
}

typedef CE_GeneralNames = __CE_GeneralNames;

class __CE_ExtendedKeyUsage extends ffi.Struct {
  @uint32()
  external int numPurposes;

  external CSSM_OID_PTR purposes;
}

typedef CSSM_OID_PTR = ffi.Pointer<SecAsn1Oid>;

class __CE_BasicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_BOOL()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

class __CE_PolicyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item qualifier;
}

class __CE_PolicyInformation extends ffi.Struct {
  external SecAsn1Oid certPolicyId;

  @uint32()
  external int numPolicyQualifiers;

  external ffi.Pointer<CE_PolicyQualifierInfo> policyQualifiers;
}

typedef CE_PolicyQualifierInfo = __CE_PolicyQualifierInfo;

class __CE_CertPolicies extends ffi.Struct {
  @uint32()
  external int numPolicies;

  external ffi.Pointer<CE_PolicyInformation> policies;
}

typedef CE_PolicyInformation = __CE_PolicyInformation;

abstract class __CE_CrlDistributionPointNameType {
  static const int CE_CDNT_FullName = 0;
  static const int CE_CDNT_NameRelativeToCrlIssuer = 1;
}

class __CE_DistributionPointName extends ffi.Struct {
  @ffi.Int32()
  external int nameType;

  external UnnamedUnion4 dpn;
}

class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<CE_GeneralNames> fullName;

  external CSSM_X509_RDN_PTR rdn;
}

class __CE_CRLDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int reasonsPresent;

  @CE_CrlDistReasonFlags()
  external int reasons;

  external ffi.Pointer<CE_GeneralNames> crlIssuer;
}

typedef CE_DistributionPointName = __CE_DistributionPointName;
typedef CE_CrlDistReasonFlags = uint8;

class __CE_CRLDistPointsSyntax extends ffi.Struct {
  @uint32()
  external int numDistPoints;

  external ffi.Pointer<CE_CRLDistributionPoint> distPoints;
}

typedef CE_CRLDistributionPoint = __CE_CRLDistributionPoint;

class __CE_AccessDescription extends ffi.Struct {
  external SecAsn1Oid accessMethod;

  external CE_GeneralName accessLocation;
}

class __CE_AuthorityInfoAccess extends ffi.Struct {
  @uint32()
  external int numAccessDescriptions;

  external ffi.Pointer<CE_AccessDescription> accessDescriptions;
}

typedef CE_AccessDescription = __CE_AccessDescription;

class __CE_SemanticsInformation extends ffi.Struct {
  external ffi.Pointer<SecAsn1Oid> semanticsIdentifier;

  external ffi.Pointer<CE_NameRegistrationAuthorities>
      nameRegistrationAuthorities;
}

typedef CE_NameRegistrationAuthorities = CE_GeneralNames;

class __CE_QC_Statement extends ffi.Struct {
  external SecAsn1Oid statementId;

  external ffi.Pointer<CE_SemanticsInformation> semanticsInfo;

  external ffi.Pointer<SecAsn1Item> otherInfo;
}

typedef CE_SemanticsInformation = __CE_SemanticsInformation;

class __CE_QC_Statements extends ffi.Struct {
  @uint32()
  external int numQCStatements;

  external ffi.Pointer<CE_QC_Statement> qcStatements;
}

typedef CE_QC_Statement = __CE_QC_Statement;

class __CE_IssuingDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int onlyUserCertsPresent;

  @CSSM_BOOL()
  external int onlyUserCerts;

  @CSSM_BOOL()
  external int onlyCACertsPresent;

  @CSSM_BOOL()
  external int onlyCACerts;

  @CSSM_BOOL()
  external int onlySomeReasonsPresent;

  @CE_CrlDistReasonFlags()
  external int onlySomeReasons;

  @CSSM_BOOL()
  external int indirectCrlPresent;

  @CSSM_BOOL()
  external int indirectCrl;
}

class __CE_GeneralSubtree extends ffi.Struct {
  external ffi.Pointer<CE_GeneralNames> base;

  @uint32()
  external int minimum;

  @CSSM_BOOL()
  external int maximumPresent;

  @uint32()
  external int maximum;
}

class __CE_GeneralSubtrees extends ffi.Struct {
  @uint32()
  external int numSubtrees;

  external ffi.Pointer<CE_GeneralSubtree> subtrees;
}

typedef CE_GeneralSubtree = __CE_GeneralSubtree;

class __CE_NameConstraints extends ffi.Struct {
  external ffi.Pointer<CE_GeneralSubtrees> permitted;

  external ffi.Pointer<CE_GeneralSubtrees> excluded;
}

typedef CE_GeneralSubtrees = __CE_GeneralSubtrees;

class __CE_PolicyMapping extends ffi.Struct {
  external SecAsn1Oid issuerDomainPolicy;

  external SecAsn1Oid subjectDomainPolicy;
}

class __CE_PolicyMappings extends ffi.Struct {
  @uint32()
  external int numPolicyMappings;

  external ffi.Pointer<CE_PolicyMapping> policyMappings;
}

typedef CE_PolicyMapping = __CE_PolicyMapping;

class __CE_PolicyConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int requireExplicitPolicyPresent;

  @uint32()
  external int requireExplicitPolicy;

  @CSSM_BOOL()
  external int inhibitPolicyMappingPresent;

  @uint32()
  external int inhibitPolicyMapping;
}

abstract class __CE_DataType {
  static const int DT_AuthorityKeyID = 0;
  static const int DT_SubjectKeyID = 1;
  static const int DT_KeyUsage = 2;
  static const int DT_SubjectAltName = 3;
  static const int DT_IssuerAltName = 4;
  static const int DT_ExtendedKeyUsage = 5;
  static const int DT_BasicConstraints = 6;
  static const int DT_CertPolicies = 7;
  static const int DT_NetscapeCertType = 8;
  static const int DT_CrlNumber = 9;
  static const int DT_DeltaCrl = 10;
  static const int DT_CrlReason = 11;
  static const int DT_CrlDistributionPoints = 12;
  static const int DT_IssuingDistributionPoint = 13;
  static const int DT_AuthorityInfoAccess = 14;
  static const int DT_Other = 15;
  static const int DT_QC_Statements = 16;
  static const int DT_NameConstraints = 17;
  static const int DT_PolicyMappings = 18;
  static const int DT_PolicyConstraints = 19;
  static const int DT_InhibitAnyPolicy = 20;
}

class CE_Data extends ffi.Union {
  external CE_AuthorityKeyID authorityKeyID;

  external CE_SubjectKeyID subjectKeyID;

  @CE_KeyUsage()
  external int keyUsage;

  external CE_GeneralNames subjectAltName;

  external CE_GeneralNames issuerAltName;

  external CE_ExtendedKeyUsage extendedKeyUsage;

  external CE_BasicConstraints basicConstraints;

  external CE_CertPolicies certPolicies;

  @CE_NetscapeCertType()
  external int netscapeCertType;

  @CE_CrlNumber()
  external int crlNumber;

  @CE_DeltaCrl()
  external int deltaCrl;

  @CE_CrlReason()
  external int crlReason;

  external CE_CRLDistPointsSyntax crlDistPoints;

  external CE_IssuingDistributionPoint issuingDistPoint;

  external CE_AuthorityInfoAccess authorityInfoAccess;

  external CE_QC_Statements qualifiedCertStatements;

  external CE_NameConstraints nameConstraints;

  external CE_PolicyMappings policyMappings;

  external CE_PolicyConstraints policyConstraints;

  @CE_InhibitAnyPolicy()
  external int inhibitAnyPolicy;

  external SecAsn1Item rawData;
}

typedef CE_AuthorityKeyID = __CE_AuthorityKeyID;
typedef CE_SubjectKeyID = SecAsn1Item;
typedef CE_KeyUsage = uint16;
typedef CE_ExtendedKeyUsage = __CE_ExtendedKeyUsage;
typedef CE_BasicConstraints = __CE_BasicConstraints;
typedef CE_CertPolicies = __CE_CertPolicies;
typedef CE_NetscapeCertType = uint16;
typedef CE_CrlNumber = uint32;
typedef CE_DeltaCrl = uint32;
typedef CE_CrlReason = uint32;
typedef CE_CRLDistPointsSyntax = __CE_CRLDistPointsSyntax;
typedef CE_IssuingDistributionPoint = __CE_IssuingDistributionPoint;
typedef CE_AuthorityInfoAccess = __CE_AuthorityInfoAccess;
typedef CE_QC_Statements = __CE_QC_Statements;
typedef CE_NameConstraints = __CE_NameConstraints;
typedef CE_PolicyMappings = __CE_PolicyMappings;
typedef CE_PolicyConstraints = __CE_PolicyConstraints;
typedef CE_InhibitAnyPolicy = uint32;

class __CE_DataAndType extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external CE_Data extension1;

  @CSSM_BOOL()
  external int critical;
}

class cssm_acl_process_subject_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int mask;

  @uint32()
  external int uid;

  @uint32()
  external int gid;
}

class cssm_acl_keychain_prompt_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int flags;
}

abstract class cssm_appledl_open_parameters_mask {
  static const int kCSSM_APPLEDL_MASK_MODE = 1;
}

class cssm_appledl_open_parameters extends ffi.Struct {
  @uint32()
  external int length;

  @uint32()
  external int version;

  @CSSM_BOOL()
  external int autoCommit;

  @uint32()
  external int mask;

  @mode_t()
  external int mode;
}

class cssm_applecspdl_db_settings_parameters extends ffi.Struct {
  @uint32()
  external int idleTimeout;

  @uint8()
  external int lockOnSleep;
}

class cssm_applecspdl_db_is_locked_parameters extends ffi.Struct {
  @uint8()
  external int isLocked;
}

class cssm_applecspdl_db_change_password_parameters extends ffi.Struct {
  external ffi.Pointer<CSSM_ACCESS_CREDENTIALS> accessCredentials;
}

typedef CSSM_ACCESS_CREDENTIALS = cssm_access_credentials;

class CSSM_APPLE_TP_NAME_OID extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Char> string;

  external ffi.Pointer<SecAsn1Oid> oid;
}

class CSSM_APPLE_TP_CERT_REQUEST extends ffi.Struct {
  @CSSM_CSP_HANDLE()
  external int cspHand;

  @CSSM_CL_HANDLE()
  external int clHand;

  @uint32()
  external int serialNumber;

  @uint32()
  external int numSubjectNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> subjectNames;

  @uint32()
  external int numIssuerNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> issuerNames;

  external CSSM_X509_NAME_PTR issuerNameX509;

  external ffi.Pointer<CSSM_KEY> certPublicKey;

  external ffi.Pointer<CSSM_KEY> issuerPrivateKey;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @uint32()
  external int notBefore;

  @uint32()
  external int notAfter;

  @uint32()
  external int numExtensions;

  external ffi.Pointer<CE_DataAndType> extensions;

  external ffi.Pointer<pkg_ffi.Char> challengeString;
}

typedef CSSM_X509_NAME_PTR = ffi.Pointer<cssm_x509_name>;
typedef CSSM_KEY = cssm_key;
typedef CE_DataAndType = __CE_DataAndType;

class CSSM_APPLE_TP_SSL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @uint32()
  external int ServerNameLen;

  external ffi.Pointer<pkg_ffi.Char> ServerName;

  @uint32()
  external int Flags;
}

class CSSM_APPLE_TP_CRL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_CRL_OPT_FLAGS()
  external int CrlFlags;

  external CSSM_DL_DB_HANDLE_PTR crlStore;
}

typedef CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;

class CSSM_APPLE_TP_SMIME_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CE_KeyUsage()
  external int IntendedUsage;

  @uint32()
  external int SenderEmailLen;

  external ffi.Pointer<pkg_ffi.Char> SenderEmail;
}

class CSSM_APPLE_TP_ACTION_DATA extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_ACTION_FLAGS()
  external int ActionFlags;
}

typedef CSSM_APPLE_TP_ACTION_FLAGS = uint32;

class CSSM_TP_APPLE_EVIDENCE_INFO extends ffi.Struct {
  @CSSM_TP_APPLE_CERT_STATUS()
  external int StatusBits;

  @uint32()
  external int NumStatusCodes;

  external ffi.Pointer<CSSM_RETURN> StatusCodes;

  @uint32()
  external int Index;

  external CSSM_DL_DB_HANDLE DlDbHandle;

  external CSSM_DB_UNIQUE_RECORD_PTR UniqueRecord;
}

typedef CSSM_TP_APPLE_CERT_STATUS = uint32;
typedef CSSM_DL_DB_HANDLE = cssm_dl_db_handle;
typedef CSSM_DB_UNIQUE_RECORD_PTR = ffi.Pointer<cssm_db_unique_record>;

class CSSM_TP_APPLE_EVIDENCE_HEADER extends ffi.Struct {
  @uint32()
  external int Version;
}

class CSSM_APPLE_CL_CSR_REQUEST extends ffi.Struct {
  external CSSM_X509_NAME_PTR subjectNameX509;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @CSSM_CSP_HANDLE()
  external int cspHand;

  external ffi.Pointer<CSSM_KEY> subjectPublicKey;

  external ffi.Pointer<CSSM_KEY> subjectPrivateKey;

  external ffi.Pointer<pkg_ffi.Char> challengeString;
}

abstract class SecTrustOptionFlags {
  static const int kSecTrustOptionAllowExpired = 1;
  static const int kSecTrustOptionLeafIsCA = 2;
  static const int kSecTrustOptionFetchIssuerFromNet = 4;
  static const int kSecTrustOptionAllowExpiredRoot = 8;
  static const int kSecTrustOptionRequireRevPerCert = 16;
  static const int kSecTrustOptionUseTrustSettings = 32;
  static const int kSecTrustOptionImplicitAnchors = 64;
}

typedef CSSM_TP_VERIFY_CONTEXT_RESULT_PTR
    = ffi.Pointer<cssm_tp_verify_context_result>;
typedef SecKeychainRef = ffi.Pointer<__SecKeychain>;

abstract class SecKeyUsage {
  static const int kSecKeyUsageUnspecified = 0;
  static const int kSecKeyUsageDigitalSignature = 1;
  static const int kSecKeyUsageNonRepudiation = 2;
  static const int kSecKeyUsageContentCommitment = 2;
  static const int kSecKeyUsageKeyEncipherment = 4;
  static const int kSecKeyUsageDataEncipherment = 8;
  static const int kSecKeyUsageKeyAgreement = 16;
  static const int kSecKeyUsageKeyCertSign = 32;
  static const int kSecKeyUsageCRLSign = 64;
  static const int kSecKeyUsageEncipherOnly = 128;
  static const int kSecKeyUsageDecipherOnly = 256;
  static const int kSecKeyUsageCritical = -2147483648;
  static const int kSecKeyUsageAll = 2147483647;
}

typedef SecIdentityRef = ffi.Pointer<__SecIdentity>;

abstract class SSLCiphersuiteGroup {
  static const int kSSLCiphersuiteGroupDefault = 0;
  static const int kSSLCiphersuiteGroupCompatibility = 1;
  static const int kSSLCiphersuiteGroupLegacy = 2;
  static const int kSSLCiphersuiteGroupATS = 3;
  static const int kSSLCiphersuiteGroupATSCompatibility = 4;
}

abstract class tls_protocol_version_t {
  static const int tls_protocol_version_TLSv10 = 769;
  static const int tls_protocol_version_TLSv11 = 770;
  static const int tls_protocol_version_TLSv12 = 771;
  static const int tls_protocol_version_TLSv13 = 772;
  static const int tls_protocol_version_DTLSv10 = -257;
  static const int tls_protocol_version_DTLSv12 = -259;
}

abstract class tls_ciphersuite_t {
  static const int tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA = 10;
  static const int tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA = 47;
  static const int tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA = 53;
  static const int tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256 = 156;
  static const int tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384 = 157;
  static const int tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256 = 60;
  static const int tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256 = 61;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = -16376;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = -16375;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = -16374;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = -16366;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA = -16365;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA = -16364;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = -16349;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = -16348;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = -16345;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = -16344;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = -16341;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = -16340;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = -16337;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = -16336;
  static const int tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 =
      -13144;
  static const int tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 =
      -13143;
  static const int tls_ciphersuite_AES_128_GCM_SHA256 = 4865;
  static const int tls_ciphersuite_AES_256_GCM_SHA384 = 4866;
  static const int tls_ciphersuite_CHACHA20_POLY1305_SHA256 = 4867;
}

abstract class tls_ciphersuite_group_t {
  static const int tls_ciphersuite_group_default = 0;
  static const int tls_ciphersuite_group_compatibility = 1;
  static const int tls_ciphersuite_group_legacy = 2;
  static const int tls_ciphersuite_group_ats = 3;
  static const int tls_ciphersuite_group_ats_compatibility = 4;
}

abstract class SSLProtocol {
  static const int kSSLProtocolUnknown = 0;
  static const int kTLSProtocol1 = 4;
  static const int kTLSProtocol11 = 7;
  static const int kTLSProtocol12 = 8;
  static const int kDTLSProtocol1 = 9;
  static const int kTLSProtocol13 = 10;
  static const int kDTLSProtocol12 = 11;
  static const int kTLSProtocolMaxSupported = 999;
  static const int kSSLProtocol2 = 1;
  static const int kSSLProtocol3 = 2;
  static const int kSSLProtocol3Only = 3;
  static const int kTLSProtocol1Only = 5;
  static const int kSSLProtocolAll = 6;
}

typedef sec_trust_t = ffi.Pointer<ObjCObject>;
typedef sec_identity_t = ffi.Pointer<ObjCObject>;
typedef sec_certificate_t = ffi.Pointer<ObjCObject>;
typedef sec_protocol_metadata_t = ffi.Pointer<ObjCObject>;
typedef dispatch_data_t = ffi.Pointer<ObjCObject>;
typedef SSLCipherSuite = ffi.Uint16;
void _ObjCBlock19_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block, int arg0) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function(ffi.Uint16 arg0)>>()
      .asFunction<void Function(int arg0)>()(arg0);
}

class ObjCBlock19 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock19._(this._impl, this._lib);

  ObjCBlock19.fromFunctionPointer(this._lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Uint16 arg0)>> ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                        ffi.Uint16 arg0)>(_ObjCBlock19_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

void _ObjCBlock20_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, dispatch_data_t arg0, dispatch_data_t arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(dispatch_data_t arg0, dispatch_data_t arg1)>>()
      .asFunction<
          void Function(
              dispatch_data_t arg0, dispatch_data_t arg1)>()(arg0, arg1);
}

class ObjCBlock20 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock20._(this._impl, this._lib);

  ObjCBlock20.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      dispatch_data_t arg0, dispatch_data_t arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        dispatch_data_t arg0,
                        dispatch_data_t arg1)>(_ObjCBlock20_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef sec_protocol_options_t = ffi.Pointer<ObjCObject>;
typedef sec_protocol_pre_shared_key_selection_t = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock21_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    sec_protocol_metadata_t arg0,
    dispatch_data_t arg1,
    sec_protocol_pre_shared_key_selection_complete_t arg2) {
  return block.ref.target
          .cast<
              ffi.NativeFunction<
                  ffi.Void Function(
                      sec_protocol_metadata_t arg0,
                      dispatch_data_t arg1,
                      sec_protocol_pre_shared_key_selection_complete_t arg2)>>()
          .asFunction<
              void Function(sec_protocol_metadata_t arg0, dispatch_data_t arg1,
                  sec_protocol_pre_shared_key_selection_complete_t arg2)>()(
      arg0, arg1, arg2);
}

class ObjCBlock21 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock21._(this._impl, this._lib);

  ObjCBlock21.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      sec_protocol_metadata_t arg0,
                      dispatch_data_t arg1,
                      sec_protocol_pre_shared_key_selection_complete_t arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(
                        ffi.Pointer<_ObjCBlock> block,
                        sec_protocol_metadata_t arg0,
                        dispatch_data_t arg1,
                        sec_protocol_pre_shared_key_selection_complete_t
                            arg2)>(_ObjCBlock21_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef sec_protocol_pre_shared_key_selection_complete_t
    = ffi.Pointer<_ObjCBlock>;
typedef sec_protocol_key_update_t = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock22_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    sec_protocol_metadata_t arg0, sec_protocol_key_update_complete_t arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_metadata_t arg0,
                  sec_protocol_key_update_complete_t arg1)>>()
      .asFunction<
          void Function(sec_protocol_metadata_t arg0,
              sec_protocol_key_update_complete_t arg1)>()(arg0, arg1);
}

class ObjCBlock22 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock22._(this._impl, this._lib);

  ObjCBlock22.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_metadata_t arg0,
                      sec_protocol_key_update_complete_t arg1)>>
          ptr)
      : _impl =
            _lib
                ._newBlock1(
                    ffi.Pointer.fromFunction<
                                ffi.Void Function(
                                    ffi.Pointer<_ObjCBlock> block,
                                    sec_protocol_metadata_t arg0,
                                    sec_protocol_key_update_complete_t arg1)>(
                            _ObjCBlock22_fnPtrTrampoline)
                        .cast(),
                    ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef sec_protocol_key_update_complete_t = ffi.Pointer<_ObjCBlock>;
typedef sec_protocol_challenge_t = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock23_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    sec_protocol_metadata_t arg0, sec_protocol_challenge_complete_t arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_metadata_t arg0,
                  sec_protocol_challenge_complete_t arg1)>>()
      .asFunction<
          void Function(sec_protocol_metadata_t arg0,
              sec_protocol_challenge_complete_t arg1)>()(arg0, arg1);
}

class ObjCBlock23 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock23._(this._impl, this._lib);

  ObjCBlock23.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_metadata_t arg0,
                      sec_protocol_challenge_complete_t arg1)>>
          ptr)
      : _impl =
            _lib._newBlock1(
                ffi.Pointer.fromFunction<
                            ffi.Void Function(
                                ffi.Pointer<_ObjCBlock> block,
                                sec_protocol_metadata_t arg0,
                                sec_protocol_challenge_complete_t arg1)>(
                        _ObjCBlock23_fnPtrTrampoline)
                    .cast(),
                ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef sec_protocol_challenge_complete_t = ffi.Pointer<_ObjCBlock>;
typedef sec_protocol_verify_t = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock24_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    sec_protocol_metadata_t arg0,
    sec_trust_t arg1,
    sec_protocol_verify_complete_t arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_metadata_t arg0, sec_trust_t arg1,
                  sec_protocol_verify_complete_t arg2)>>()
      .asFunction<
          void Function(sec_protocol_metadata_t arg0, sec_trust_t arg1,
              sec_protocol_verify_complete_t arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock24 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock24._(this._impl, this._lib);

  ObjCBlock24.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_metadata_t arg0,
                      sec_trust_t arg1, sec_protocol_verify_complete_t arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            sec_protocol_metadata_t arg0,
                            sec_trust_t arg1,
                            sec_protocol_verify_complete_t arg2)>(
                    _ObjCBlock24_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef sec_protocol_verify_complete_t = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock25_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block, int arg0) {
  return block.ref.target
      .cast<ffi.NativeFunction<ffi.Void Function(ffi.Uint8 arg0)>>()
      .asFunction<void Function(int arg0)>()(arg0);
}

class ObjCBlock25 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock25._(this._impl, this._lib);

  ObjCBlock25.fromFunctionPointer(this._lib,
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Uint8 arg0)>> ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Void Function(ffi.Pointer<_ObjCBlock> block,
                        ffi.Uint8 arg0)>(_ObjCBlock25_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class SSLContext extends ffi.Opaque {}

abstract class SSLSessionOption {
  static const int kSSLSessionOptionBreakOnServerAuth = 0;
  static const int kSSLSessionOptionBreakOnCertRequested = 1;
  static const int kSSLSessionOptionBreakOnClientAuth = 2;
  static const int kSSLSessionOptionFalseStart = 3;
  static const int kSSLSessionOptionSendOneByteRecord = 4;
  static const int kSSLSessionOptionAllowServerIdentityChange = 5;
  static const int kSSLSessionOptionFallback = 6;
  static const int kSSLSessionOptionBreakOnClientHello = 7;
  static const int kSSLSessionOptionAllowRenegotiation = 8;
  static const int kSSLSessionOptionEnableSessionTickets = 9;
}

abstract class SSLSessionState {
  static const int kSSLIdle = 0;
  static const int kSSLHandshake = 1;
  static const int kSSLConnected = 2;
  static const int kSSLClosed = 3;
  static const int kSSLAborted = 4;
}

abstract class SSLClientCertificateState {
  static const int kSSLClientCertNone = 0;
  static const int kSSLClientCertRequested = 1;
  static const int kSSLClientCertSent = 2;
  static const int kSSLClientCertRejected = 3;
}

abstract class SSLProtocolSide {
  static const int kSSLServerSide = 0;
  static const int kSSLClientSide = 1;
}

abstract class SSLConnectionType {
  static const int kSSLStreamType = 0;
  static const int kSSLDatagramType = 1;
}

typedef SSLContextRef = ffi.Pointer<SSLContext>;
typedef SSLReadFunc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(SSLConnectionRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<pkg_ffi.Size>)>>;
typedef SSLConnectionRef = ffi.Pointer<ffi.Void>;
typedef SSLWriteFunc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(SSLConnectionRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<pkg_ffi.Size>)>>;

abstract class SSLAuthenticate {
  static const int kNeverAuthenticate = 0;
  static const int kAlwaysAuthenticate = 1;
  static const int kTryAuthenticate = 2;
}

class NSURLSession extends NSObject {
  NSURLSession._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSession castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSession._(other._id, other._lib);
  }

  static NSURLSession castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSession._(other, lib);
  }

  static NSObject? getSharedSession(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSession1, _lib._sel_sharedSession1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSURLSession sessionWithConfiguration(
      NativeLibrary _lib, NSObject? configuration) {
    final _ret = _lib._objc_msgSend_211(
        _lib._class_NSURLSession1,
        _lib._sel_sessionWithConfiguration_1,
        configuration?._id ?? ffi.nullptr);
    return NSURLSession._(_ret, _lib);
  }

  static NSURLSession sessionWithConfiguration_delegate_delegateQueue(
      NativeLibrary _lib,
      NSObject? configuration,
      NSObject? delegate,
      NSObject? queue) {
    final _ret = _lib._objc_msgSend_212(
        _lib._class_NSURLSession1,
        _lib._sel_sessionWithConfiguration_delegate_delegateQueue_1,
        configuration?._id ?? ffi.nullptr,
        delegate?._id ?? ffi.nullptr,
        queue?._id ?? ffi.nullptr);
    return NSURLSession._(_ret, _lib);
  }

  NSObject? get delegateQueue {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_delegateQueue1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get delegate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_delegate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get configuration {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_configuration1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get sessionDescription {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_sessionDescription1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set sessionDescription(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setSessionDescription_1, value?._id ?? ffi.nullptr);
  }

  void finishTasksAndInvalidate() {
    _lib._objc_msgSend_0(_id, _lib._sel_finishTasksAndInvalidate1);
  }

  void invalidateAndCancel() {
    _lib._objc_msgSend_0(_id, _lib._sel_invalidateAndCancel1);
  }

  void resetWithCompletionHandler(ObjCBlock13 completionHandler) {
    _lib._objc_msgSend_209(
        _id, _lib._sel_resetWithCompletionHandler_1, completionHandler._impl);
  }

  void flushWithCompletionHandler(ObjCBlock13 completionHandler) {
    _lib._objc_msgSend_209(
        _id, _lib._sel_flushWithCompletionHandler_1, completionHandler._impl);
  }

  void getTasksWithCompletionHandler(ObjCBlock26 completionHandler) {
    _lib._objc_msgSend_213(_id, _lib._sel_getTasksWithCompletionHandler_1,
        completionHandler._impl);
  }

  void getAllTasksWithCompletionHandler(ObjCBlock12 completionHandler) {
    _lib._objc_msgSend_214(_id, _lib._sel_getAllTasksWithCompletionHandler_1,
        completionHandler._impl);
  }

  NSURLSessionDataTask dataTaskWithRequest(NSObject? request) {
    final _ret = _lib._objc_msgSend_217(
        _id, _lib._sel_dataTaskWithRequest_1, request?._id ?? ffi.nullptr);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  NSURLSessionDataTask dataTaskWithURL(NSObject? url) {
    final _ret = _lib._objc_msgSend_217(
        _id, _lib._sel_dataTaskWithURL_1, url?._id ?? ffi.nullptr);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromFile(
      NSObject? request, NSObject? fileURL) {
    final _ret = _lib._objc_msgSend_218(
        _id,
        _lib._sel_uploadTaskWithRequest_fromFile_1,
        request?._id ?? ffi.nullptr,
        fileURL?._id ?? ffi.nullptr);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromData(
      NSObject? request, NSObject? bodyData) {
    final _ret = _lib._objc_msgSend_218(
        _id,
        _lib._sel_uploadTaskWithRequest_fromData_1,
        request?._id ?? ffi.nullptr,
        bodyData?._id ?? ffi.nullptr);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  NSURLSessionUploadTask uploadTaskWithStreamedRequest(NSObject? request) {
    final _ret = _lib._objc_msgSend_219(_id,
        _lib._sel_uploadTaskWithStreamedRequest_1, request?._id ?? ffi.nullptr);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithRequest(NSObject? request) {
    final _ret = _lib._objc_msgSend_220(
        _id, _lib._sel_downloadTaskWithRequest_1, request?._id ?? ffi.nullptr);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithURL(NSObject? url) {
    final _ret = _lib._objc_msgSend_220(
        _id, _lib._sel_downloadTaskWithURL_1, url?._id ?? ffi.nullptr);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithResumeData(NSObject? resumeData) {
    final _ret = _lib._objc_msgSend_220(_id,
        _lib._sel_downloadTaskWithResumeData_1, resumeData?._id ?? ffi.nullptr);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionStreamTask streamTaskWithHostName_port(
      NSObject? hostname, int port) {
    final _ret = _lib._objc_msgSend_223(
        _id,
        _lib._sel_streamTaskWithHostName_port_1,
        hostname?._id ?? ffi.nullptr,
        port);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  NSURLSessionStreamTask streamTaskWithNetService(NSObject? service) {
    final _ret = _lib._objc_msgSend_224(
        _id, _lib._sel_streamTaskWithNetService_1, service?._id ?? ffi.nullptr);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  NSURLSessionWebSocketTask webSocketTaskWithURL(NSObject? url) {
    final _ret = _lib._objc_msgSend_228(
        _id, _lib._sel_webSocketTaskWithURL_1, url?._id ?? ffi.nullptr);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  NSURLSessionWebSocketTask webSocketTaskWithURL_protocols(
      NSObject? url, NSObject? protocols) {
    final _ret = _lib._objc_msgSend_229(
        _id,
        _lib._sel_webSocketTaskWithURL_protocols_1,
        url?._id ?? ffi.nullptr,
        protocols?._id ?? ffi.nullptr);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  NSURLSessionWebSocketTask webSocketTaskWithRequest(NSObject? request) {
    final _ret = _lib._objc_msgSend_228(
        _id, _lib._sel_webSocketTaskWithRequest_1, request?._id ?? ffi.nullptr);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  @override
  NSURLSession init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSession._(_ret, _lib);
  }

  static NSURLSession new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSession1, _lib._sel_new1);
    return NSURLSession._(_ret, _lib);
  }

  NSURLSessionDataTask dataTaskWithRequest_completionHandler(
      NSObject? request, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_230(
        _id,
        _lib._sel_dataTaskWithRequest_completionHandler_1,
        request?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  NSURLSessionDataTask dataTaskWithURL_completionHandler(
      NSObject? url, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_230(
        _id,
        _lib._sel_dataTaskWithURL_completionHandler_1,
        url?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_completionHandler(
      NSObject? request, NSObject? fileURL, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_231(
        _id,
        _lib._sel_uploadTaskWithRequest_fromFile_completionHandler_1,
        request?._id ?? ffi.nullptr,
        fileURL?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromData_completionHandler(
      NSObject? request, NSObject? bodyData, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_231(
        _id,
        _lib._sel_uploadTaskWithRequest_fromData_completionHandler_1,
        request?._id ?? ffi.nullptr,
        bodyData?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithRequest_completionHandler(
      NSObject? request, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_232(
        _id,
        _lib._sel_downloadTaskWithRequest_completionHandler_1,
        request?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithURL_completionHandler(
      NSObject? url, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_232(
        _id,
        _lib._sel_downloadTaskWithURL_completionHandler_1,
        url?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithResumeData_completionHandler(
      NSObject? resumeData, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_232(
        _id,
        _lib._sel_downloadTaskWithResumeData_completionHandler_1,
        resumeData?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionDataTask dataTaskWithRequest_completionHandler1(
      NSObject? request, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_230(
        _id,
        _lib._sel_dataTaskWithRequest_completionHandler_1,
        request?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  NSURLSessionDataTask dataTaskWithURL_completionHandler1(
      NSObject? url, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_230(
        _id,
        _lib._sel_dataTaskWithURL_completionHandler_1,
        url?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromFile_completionHandler1(
      NSObject? request, NSObject? fileURL, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_231(
        _id,
        _lib._sel_uploadTaskWithRequest_fromFile_completionHandler_1,
        request?._id ?? ffi.nullptr,
        fileURL?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  NSURLSessionUploadTask uploadTaskWithRequest_fromData_completionHandler1(
      NSObject? request, NSObject? bodyData, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_231(
        _id,
        _lib._sel_uploadTaskWithRequest_fromData_completionHandler_1,
        request?._id ?? ffi.nullptr,
        bodyData?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithRequest_completionHandler1(
      NSObject? request, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_232(
        _id,
        _lib._sel_downloadTaskWithRequest_completionHandler_1,
        request?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithURL_completionHandler1(
      NSObject? url, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_232(
        _id,
        _lib._sel_downloadTaskWithURL_completionHandler_1,
        url?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  NSURLSessionDownloadTask downloadTaskWithResumeData_completionHandler1(
      NSObject? resumeData, ObjCBlock26 completionHandler) {
    final _ret = _lib._objc_msgSend_232(
        _id,
        _lib._sel_downloadTaskWithResumeData_completionHandler_1,
        resumeData?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static NSURLSession new2(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSession1, _lib._sel_new1);
    return NSURLSession._(_ret, _lib);
  }

  static NSURLSession alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSession1, _lib._sel_alloc1);
    return NSURLSession._(_ret, _lib);
  }
}

void _ObjCBlock26_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<ObjCObject> arg0,
                  ffi.Pointer<ObjCObject> arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(
              ffi.Pointer<ObjCObject> arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock26 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock26._(this._impl, this._lib);

  ObjCBlock26.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      ffi.Pointer<ObjCObject> arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock26_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSURLSessionDataTask extends NSURLSessionTask {
  NSURLSessionDataTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionDataTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionDataTask._(other._id, other._lib);
  }

  static NSURLSessionDataTask castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionDataTask._(other, lib);
  }

  @override
  NSURLSessionDataTask init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static NSURLSessionDataTask new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSessionDataTask1, _lib._sel_new1);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static NSURLSessionDataTask new2(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSessionDataTask1, _lib._sel_new1);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static NSURLSessionDataTask alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionDataTask1, _lib._sel_alloc1);
    return NSURLSessionDataTask._(_ret, _lib);
  }
}

class NSURLSessionTask extends NSObject {
  NSURLSessionTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionTask._(other._id, other._lib);
  }

  static NSURLSessionTask castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionTask._(other, lib);
  }

  int get taskIdentifier {
    return _lib._objc_msgSend_11(_id, _lib._sel_taskIdentifier1);
  }

  NSObject? get originalRequest {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_originalRequest1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get currentRequest {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_currentRequest1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get response {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_response1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get progress {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_progress1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get earliestBeginDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_earliestBeginDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set earliestBeginDate(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setEarliestBeginDate_1, value?._id ?? ffi.nullptr);
  }

  int get countOfBytesClientExpectsToSend {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfBytesClientExpectsToSend1);
  }

  set countOfBytesClientExpectsToSend(int value) {
    _lib._objc_msgSend_204(
        _id, _lib._sel_setCountOfBytesClientExpectsToSend_1, value);
  }

  int get countOfBytesClientExpectsToReceive {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfBytesClientExpectsToReceive1);
  }

  set countOfBytesClientExpectsToReceive(int value) {
    _lib._objc_msgSend_204(
        _id, _lib._sel_setCountOfBytesClientExpectsToReceive_1, value);
  }

  int get countOfBytesReceived {
    return _lib._objc_msgSend_207(_id, _lib._sel_countOfBytesReceived1);
  }

  int get countOfBytesSent {
    return _lib._objc_msgSend_207(_id, _lib._sel_countOfBytesSent1);
  }

  int get countOfBytesExpectedToSend {
    return _lib._objc_msgSend_207(_id, _lib._sel_countOfBytesExpectedToSend1);
  }

  int get countOfBytesExpectedToReceive {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfBytesExpectedToReceive1);
  }

  NSObject? get taskDescription {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_taskDescription1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set taskDescription(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setTaskDescription_1, value?._id ?? ffi.nullptr);
  }

  void cancel() {
    _lib._objc_msgSend_0(_id, _lib._sel_cancel1);
  }

  int get state {
    return _lib._objc_msgSend_215(_id, _lib._sel_state1);
  }

  NSObject? get error {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_error1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  void suspend() {
    _lib._objc_msgSend_0(_id, _lib._sel_suspend1);
  }

  void resume() {
    _lib._objc_msgSend_0(_id, _lib._sel_resume1);
  }

  double get priority {
    return _lib._objc_msgSend_28(_id, _lib._sel_priority1);
  }

  set priority(double value) {
    _lib._objc_msgSend_216(_id, _lib._sel_setPriority_1, value);
  }

  bool get prefersIncrementalDelivery {
    return _lib._objc_msgSend_10(_id, _lib._sel_prefersIncrementalDelivery1);
  }

  set prefersIncrementalDelivery(bool value) {
    _lib._objc_msgSend_196(
        _id, _lib._sel_setPrefersIncrementalDelivery_1, value);
  }

  @override
  NSURLSessionTask init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionTask._(_ret, _lib);
  }

  static NSURLSessionTask new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSessionTask1, _lib._sel_new1);
    return NSURLSessionTask._(_ret, _lib);
  }

  static NSURLSessionTask new2(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSessionTask1, _lib._sel_new1);
    return NSURLSessionTask._(_ret, _lib);
  }

  static NSURLSessionTask alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLSessionTask1, _lib._sel_alloc1);
    return NSURLSessionTask._(_ret, _lib);
  }
}

abstract class NSURLSessionTaskState {
  static const int NSURLSessionTaskStateRunning = 0;
  static const int NSURLSessionTaskStateSuspended = 1;
  static const int NSURLSessionTaskStateCanceling = 2;
  static const int NSURLSessionTaskStateCompleted = 3;
}

class NSURLSessionUploadTask extends NSURLSessionDataTask {
  NSURLSessionUploadTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionUploadTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionUploadTask._(other._id, other._lib);
  }

  static NSURLSessionUploadTask castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionUploadTask._(other, lib);
  }

  @override
  NSURLSessionUploadTask init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static NSURLSessionUploadTask new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionUploadTask1, _lib._sel_new1);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static NSURLSessionUploadTask new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionUploadTask1, _lib._sel_new1);
    return NSURLSessionUploadTask._(_ret, _lib);
  }

  static NSURLSessionUploadTask alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionUploadTask1, _lib._sel_alloc1);
    return NSURLSessionUploadTask._(_ret, _lib);
  }
}

class NSURLSessionDownloadTask extends NSURLSessionTask {
  NSURLSessionDownloadTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionDownloadTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionDownloadTask._(other._id, other._lib);
  }

  static NSURLSessionDownloadTask castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionDownloadTask._(other, lib);
  }

  void cancelByProducingResumeData(ObjCBlock12 completionHandler) {
    _lib._objc_msgSend_214(
        _id, _lib._sel_cancelByProducingResumeData_1, completionHandler._impl);
  }

  @override
  NSURLSessionDownloadTask init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static NSURLSessionDownloadTask new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionDownloadTask1, _lib._sel_new1);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static NSURLSessionDownloadTask new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionDownloadTask1, _lib._sel_new1);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }

  static NSURLSessionDownloadTask alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionDownloadTask1, _lib._sel_alloc1);
    return NSURLSessionDownloadTask._(_ret, _lib);
  }
}

class NSURLSessionStreamTask extends NSURLSessionTask {
  NSURLSessionStreamTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionStreamTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionStreamTask._(other._id, other._lib);
  }

  static NSURLSessionStreamTask castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionStreamTask._(other, lib);
  }

  void readDataOfMinLength_maxLength_timeout_completionHandler(int minBytes,
      int maxBytes, double timeout, ObjCBlock27 completionHandler) {
    _lib._objc_msgSend_221(
        _id,
        _lib._sel_readDataOfMinLength_maxLength_timeout_completionHandler_1,
        minBytes,
        maxBytes,
        timeout,
        completionHandler._impl);
  }

  void writeData_timeout_completionHandler(
      NSObject? data, double timeout, ObjCBlock12 completionHandler) {
    _lib._objc_msgSend_222(_id, _lib._sel_writeData_timeout_completionHandler_1,
        data?._id ?? ffi.nullptr, timeout, completionHandler._impl);
  }

  void captureStreams() {
    _lib._objc_msgSend_0(_id, _lib._sel_captureStreams1);
  }

  void closeWrite() {
    _lib._objc_msgSend_0(_id, _lib._sel_closeWrite1);
  }

  void closeRead() {
    _lib._objc_msgSend_0(_id, _lib._sel_closeRead1);
  }

  void startSecureConnection() {
    _lib._objc_msgSend_0(_id, _lib._sel_startSecureConnection1);
  }

  void stopSecureConnection() {
    _lib._objc_msgSend_0(_id, _lib._sel_stopSecureConnection1);
  }

  @override
  NSURLSessionStreamTask init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static NSURLSessionStreamTask new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionStreamTask1, _lib._sel_new1);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static NSURLSessionStreamTask new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionStreamTask1, _lib._sel_new1);
    return NSURLSessionStreamTask._(_ret, _lib);
  }

  static NSURLSessionStreamTask alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionStreamTask1, _lib._sel_alloc1);
    return NSURLSessionStreamTask._(_ret, _lib);
  }
}

void _ObjCBlock27_fnPtrTrampoline(ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0, int arg1, ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ObjCObject> arg0, ffi.Uint8 arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(ffi.Pointer<ObjCObject> arg0, int arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock27 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock27._(this._impl, this._lib);

  ObjCBlock27.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ObjCObject> arg0,
                      ffi.Uint8 arg1, ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<ObjCObject> arg0,
                            ffi.Uint8 arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock27_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class NSURLSessionWebSocketTask extends NSURLSessionTask {
  NSURLSessionWebSocketTask._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionWebSocketTask castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionWebSocketTask._(other._id, other._lib);
  }

  static NSURLSessionWebSocketTask castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionWebSocketTask._(other, lib);
  }

  void sendMessage_completionHandler(
      NSObject? message, ObjCBlock12 completionHandler) {
    _lib._objc_msgSend_200(_id, _lib._sel_sendMessage_completionHandler_1,
        message?._id ?? ffi.nullptr, completionHandler._impl);
  }

  void receiveMessageWithCompletionHandler(ObjCBlock20 completionHandler) {
    _lib._objc_msgSend_225(_id, _lib._sel_receiveMessageWithCompletionHandler_1,
        completionHandler._impl);
  }

  void sendPingWithPongReceiveHandler(ObjCBlock12 pongReceiveHandler) {
    _lib._objc_msgSend_214(_id, _lib._sel_sendPingWithPongReceiveHandler_1,
        pongReceiveHandler._impl);
  }

  void cancelWithCloseCode_reason(int closeCode, NSObject? reason) {
    _lib._objc_msgSend_226(_id, _lib._sel_cancelWithCloseCode_reason_1,
        closeCode, reason?._id ?? ffi.nullptr);
  }

  int get maximumMessageSize {
    return _lib._objc_msgSend_30(_id, _lib._sel_maximumMessageSize1);
  }

  set maximumMessageSize(int value) {
    _lib._objc_msgSend_100(_id, _lib._sel_setMaximumMessageSize_1, value);
  }

  int get closeCode {
    return _lib._objc_msgSend_227(_id, _lib._sel_closeCode1);
  }

  NSObject? get closeReason {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_closeReason1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  @override
  NSURLSessionWebSocketTask init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static NSURLSessionWebSocketTask new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionWebSocketTask1, _lib._sel_new1);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static NSURLSessionWebSocketTask new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionWebSocketTask1, _lib._sel_new1);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }

  static NSURLSessionWebSocketTask alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionWebSocketTask1, _lib._sel_alloc1);
    return NSURLSessionWebSocketTask._(_ret, _lib);
  }
}

abstract class NSURLSessionWebSocketCloseCode {
  static const int NSURLSessionWebSocketCloseCodeInvalid = 0;
  static const int NSURLSessionWebSocketCloseCodeNormalClosure = 1000;
  static const int NSURLSessionWebSocketCloseCodeGoingAway = 1001;
  static const int NSURLSessionWebSocketCloseCodeProtocolError = 1002;
  static const int NSURLSessionWebSocketCloseCodeUnsupportedData = 1003;
  static const int NSURLSessionWebSocketCloseCodeNoStatusReceived = 1005;
  static const int NSURLSessionWebSocketCloseCodeAbnormalClosure = 1006;
  static const int NSURLSessionWebSocketCloseCodeInvalidFramePayloadData = 1007;
  static const int NSURLSessionWebSocketCloseCodePolicyViolation = 1008;
  static const int NSURLSessionWebSocketCloseCodeMessageTooBig = 1009;
  static const int NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing =
      1010;
  static const int NSURLSessionWebSocketCloseCodeInternalServerError = 1011;
  static const int NSURLSessionWebSocketCloseCodeTLSHandshakeFailure = 1015;
}

abstract class NSURLSessionWebSocketMessageType {
  static const int NSURLSessionWebSocketMessageTypeData = 0;
  static const int NSURLSessionWebSocketMessageTypeString = 1;
}

class NSURLSessionWebSocketMessage extends NSObject {
  NSURLSessionWebSocketMessage._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionWebSocketMessage castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSURLSessionWebSocketMessage._(other._id, other._lib);
  }

  static NSURLSessionWebSocketMessage castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionWebSocketMessage._(other, lib);
  }

  NSURLSessionWebSocketMessage initWithData(NSObject? data) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithData_1, data?._id ?? ffi.nullptr);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  NSURLSessionWebSocketMessage initWithString(NSObject? string) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithString_1, string?._id ?? ffi.nullptr);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  int get type {
    return _lib._objc_msgSend_233(_id, _lib._sel_type1);
  }

  NSObject? get data {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_data1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get string {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_string1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  @override
  NSURLSessionWebSocketMessage init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static NSURLSessionWebSocketMessage new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionWebSocketMessage1, _lib._sel_new1);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static NSURLSessionWebSocketMessage new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionWebSocketMessage1, _lib._sel_new1);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }

  static NSURLSessionWebSocketMessage alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionWebSocketMessage1, _lib._sel_alloc1);
    return NSURLSessionWebSocketMessage._(_ret, _lib);
  }
}

/// !
/// @enum NSURLSessionMultipathServiceType
///
/// @discussion The NSURLSessionMultipathServiceType enum defines constants that
/// can be used to specify the multipath service type to associate an NSURLSession.  The
/// multipath service type determines whether multipath TCP should be attempted and the conditions
/// for creating and switching between subflows.  Using these service types requires the appropriate entitlement.  Any connection attempt will fail if the process does not have the required entitlement.
/// A primary interface is a generally less expensive interface in terms of both cost and power (such as WiFi or ethernet).  A secondary interface is more expensive (such as 3G or LTE).
///
/// @constant NSURLSessionMultipathServiceTypeNone Specifies that multipath tcp should not be used.  Connections will use a single flow.
/// This is the default value.  No entitlement is required to set this value.
///
/// @constant NSURLSessionMultipathServiceTypeHandover Specifies that a secondary subflow should only be used
/// when the primary subflow is not performing adequately.   Requires the com.apple.developer.networking.multipath entilement.
///
/// @constant NSURLSessionMultipathServiceTypeInteractive Specifies that a secodary subflow should be used if the
/// primary subflow is not performing adequately (packet loss, high round trip times, bandwidth issues).  The secondary
/// subflow will be created more aggressively than with NSURLSessionMultipathServiceTypeHandover.  Requires the com.apple.developer.networking.multipath entitlement.
///
/// @constant NSURLSessionMultipathServiceTypeAggregate Specifies that multiple subflows across multiple interfaces should be
/// used for better bandwidth.  This mode is only available for experimentation on devices configured for development use.
/// It can be enabled in the Developer section of the Settings app.
abstract class NSURLSessionMultipathServiceType {
  static const int NSURLSessionMultipathServiceTypeNone = 0;
  static const int NSURLSessionMultipathServiceTypeHandover = 1;
  static const int NSURLSessionMultipathServiceTypeInteractive = 2;
  static const int NSURLSessionMultipathServiceTypeAggregate = 3;
}

class NSURLSessionConfiguration extends NSObject {
  NSURLSessionConfiguration._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionConfiguration castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionConfiguration._(other._id, other._lib);
  }

  static NSURLSessionConfiguration castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionConfiguration._(other, lib);
  }

  static NSObject? getDefaultSessionConfiguration(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_defaultSessionConfiguration1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getEphemeralSessionConfiguration(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSURLSessionConfiguration1,
        _lib._sel_ephemeralSessionConfiguration1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier(
      NativeLibrary _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_234(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_backgroundSessionConfigurationWithIdentifier_1,
        identifier?._id ?? ffi.nullptr);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  NSObject? get identifier {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_identifier1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  int get requestCachePolicy {
    return _lib._objc_msgSend_191(_id, _lib._sel_requestCachePolicy1);
  }

  set requestCachePolicy(int value) {
    _lib._objc_msgSend_193(_id, _lib._sel_setRequestCachePolicy_1, value);
  }

  double get timeoutIntervalForRequest {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeoutIntervalForRequest1);
  }

  set timeoutIntervalForRequest(double value) {
    _lib._objc_msgSend_194(
        _id, _lib._sel_setTimeoutIntervalForRequest_1, value);
  }

  double get timeoutIntervalForResource {
    return _lib._objc_msgSend_27(_id, _lib._sel_timeoutIntervalForResource1);
  }

  set timeoutIntervalForResource(double value) {
    _lib._objc_msgSend_194(
        _id, _lib._sel_setTimeoutIntervalForResource_1, value);
  }

  int get networkServiceType {
    return _lib._objc_msgSend_192(_id, _lib._sel_networkServiceType1);
  }

  set networkServiceType(int value) {
    _lib._objc_msgSend_195(_id, _lib._sel_setNetworkServiceType_1, value);
  }

  bool get allowsCellularAccess {
    return _lib._objc_msgSend_10(_id, _lib._sel_allowsCellularAccess1);
  }

  set allowsCellularAccess(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setAllowsCellularAccess_1, value);
  }

  bool get allowsExpensiveNetworkAccess {
    return _lib._objc_msgSend_10(_id, _lib._sel_allowsExpensiveNetworkAccess1);
  }

  set allowsExpensiveNetworkAccess(bool value) {
    _lib._objc_msgSend_196(
        _id, _lib._sel_setAllowsExpensiveNetworkAccess_1, value);
  }

  bool get allowsConstrainedNetworkAccess {
    return _lib._objc_msgSend_10(
        _id, _lib._sel_allowsConstrainedNetworkAccess1);
  }

  set allowsConstrainedNetworkAccess(bool value) {
    _lib._objc_msgSend_196(
        _id, _lib._sel_setAllowsConstrainedNetworkAccess_1, value);
  }

  bool get waitsForConnectivity {
    return _lib._objc_msgSend_10(_id, _lib._sel_waitsForConnectivity1);
  }

  set waitsForConnectivity(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setWaitsForConnectivity_1, value);
  }

  bool get discretionary {
    return _lib._objc_msgSend_10(_id, _lib._sel_isDiscretionary1);
  }

  set discretionary(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setDiscretionary_1, value);
  }

  NSObject? get sharedContainerIdentifier {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_sharedContainerIdentifier1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set sharedContainerIdentifier(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setSharedContainerIdentifier_1,
        value?._id ?? ffi.nullptr);
  }

  bool get sessionSendsLaunchEvents {
    return _lib._objc_msgSend_10(_id, _lib._sel_sessionSendsLaunchEvents1);
  }

  set sessionSendsLaunchEvents(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setSessionSendsLaunchEvents_1, value);
  }

  NSObject? get connectionProxyDictionary {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_connectionProxyDictionary1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set connectionProxyDictionary(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setConnectionProxyDictionary_1,
        value?._id ?? ffi.nullptr);
  }

  int get TLSMinimumSupportedProtocol {
    return _lib._objc_msgSend_235(_id, _lib._sel_TLSMinimumSupportedProtocol1);
  }

  set TLSMinimumSupportedProtocol(int value) {
    _lib._objc_msgSend_236(
        _id, _lib._sel_setTLSMinimumSupportedProtocol_1, value);
  }

  int get TLSMaximumSupportedProtocol {
    return _lib._objc_msgSend_235(_id, _lib._sel_TLSMaximumSupportedProtocol1);
  }

  set TLSMaximumSupportedProtocol(int value) {
    _lib._objc_msgSend_236(
        _id, _lib._sel_setTLSMaximumSupportedProtocol_1, value);
  }

  int get TLSMinimumSupportedProtocolVersion {
    return _lib._objc_msgSend_237(
        _id, _lib._sel_TLSMinimumSupportedProtocolVersion1);
  }

  set TLSMinimumSupportedProtocolVersion(int value) {
    _lib._objc_msgSend_238(
        _id, _lib._sel_setTLSMinimumSupportedProtocolVersion_1, value);
  }

  int get TLSMaximumSupportedProtocolVersion {
    return _lib._objc_msgSend_237(
        _id, _lib._sel_TLSMaximumSupportedProtocolVersion1);
  }

  set TLSMaximumSupportedProtocolVersion(int value) {
    _lib._objc_msgSend_238(
        _id, _lib._sel_setTLSMaximumSupportedProtocolVersion_1, value);
  }

  bool get HTTPShouldUsePipelining {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldUsePipelining1);
  }

  set HTTPShouldUsePipelining(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldUsePipelining_1, value);
  }

  bool get HTTPShouldSetCookies {
    return _lib._objc_msgSend_10(_id, _lib._sel_HTTPShouldSetCookies1);
  }

  set HTTPShouldSetCookies(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setHTTPShouldSetCookies_1, value);
  }

  int get HTTPCookieAcceptPolicy {
    return _lib._objc_msgSend_198(_id, _lib._sel_HTTPCookieAcceptPolicy1);
  }

  set HTTPCookieAcceptPolicy(int value) {
    _lib._objc_msgSend_199(_id, _lib._sel_setHTTPCookieAcceptPolicy_1, value);
  }

  NSObject? get HTTPAdditionalHeaders {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPAdditionalHeaders1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPAdditionalHeaders(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPAdditionalHeaders_1, value?._id ?? ffi.nullptr);
  }

  int get HTTPMaximumConnectionsPerHost {
    return _lib._objc_msgSend_30(_id, _lib._sel_HTTPMaximumConnectionsPerHost1);
  }

  set HTTPMaximumConnectionsPerHost(int value) {
    _lib._objc_msgSend_100(
        _id, _lib._sel_setHTTPMaximumConnectionsPerHost_1, value);
  }

  NSObject? get HTTPCookieStorage {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_HTTPCookieStorage1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set HTTPCookieStorage(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setHTTPCookieStorage_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get URLCredentialStorage {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_URLCredentialStorage1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set URLCredentialStorage(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setURLCredentialStorage_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get URLCache {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_URLCache1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set URLCache(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setURLCache_1, value?._id ?? ffi.nullptr);
  }

  bool get shouldUseExtendedBackgroundIdleMode {
    return _lib._objc_msgSend_10(
        _id, _lib._sel_shouldUseExtendedBackgroundIdleMode1);
  }

  set shouldUseExtendedBackgroundIdleMode(bool value) {
    _lib._objc_msgSend_196(
        _id, _lib._sel_setShouldUseExtendedBackgroundIdleMode_1, value);
  }

  NSObject? get protocolClasses {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_protocolClasses1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set protocolClasses(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setProtocolClasses_1, value?._id ?? ffi.nullptr);
  }

  int get multipathServiceType {
    return _lib._objc_msgSend_239(_id, _lib._sel_multipathServiceType1);
  }

  set multipathServiceType(int value) {
    _lib._objc_msgSend_240(_id, _lib._sel_setMultipathServiceType_1, value);
  }

  @override
  NSURLSessionConfiguration init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static NSURLSessionConfiguration new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionConfiguration1, _lib._sel_new1);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static NSURLSessionConfiguration backgroundSessionConfiguration(
      NativeLibrary _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_234(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_backgroundSessionConfiguration_1,
        identifier?._id ?? ffi.nullptr);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static NSURLSessionConfiguration backgroundSessionConfiguration1(
      NativeLibrary _lib, NSObject? identifier) {
    final _ret = _lib._objc_msgSend_234(
        _lib._class_NSURLSessionConfiguration1,
        _lib._sel_backgroundSessionConfiguration_1,
        identifier?._id ?? ffi.nullptr);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static NSURLSessionConfiguration new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionConfiguration1, _lib._sel_new1);
    return NSURLSessionConfiguration._(_ret, _lib);
  }

  static NSURLSessionConfiguration alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionConfiguration1, _lib._sel_alloc1);
    return NSURLSessionConfiguration._(_ret, _lib);
  }
}

abstract class NSURLSessionDelayedRequestDisposition {
  static const int NSURLSessionDelayedRequestContinueLoading = 0;
  static const int NSURLSessionDelayedRequestUseNewRequest = 1;
  static const int NSURLSessionDelayedRequestCancel = 2;
}

abstract class NSURLSessionAuthChallengeDisposition {
  static const int NSURLSessionAuthChallengeUseCredential = 0;
  static const int NSURLSessionAuthChallengePerformDefaultHandling = 1;
  static const int NSURLSessionAuthChallengeCancelAuthenticationChallenge = 2;
  static const int NSURLSessionAuthChallengeRejectProtectionSpace = 3;
}

abstract class NSURLSessionResponseDisposition {
  static const int NSURLSessionResponseCancel = 0;
  static const int NSURLSessionResponseAllow = 1;
  static const int NSURLSessionResponseBecomeDownload = 2;
  static const int NSURLSessionResponseBecomeStream = 3;
}

abstract class NSURLSessionTaskMetricsResourceFetchType {
  static const int NSURLSessionTaskMetricsResourceFetchTypeUnknown = 0;
  static const int NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad = 1;
  static const int NSURLSessionTaskMetricsResourceFetchTypeServerPush = 2;
  static const int NSURLSessionTaskMetricsResourceFetchTypeLocalCache = 3;
}

abstract class NSURLSessionTaskMetricsDomainResolutionProtocol {
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolUnknown = 0;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolUDP = 1;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolTCP = 2;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolTLS = 3;
  static const int NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS = 4;
}

class NSURLSessionTaskTransactionMetrics extends NSObject {
  NSURLSessionTaskTransactionMetrics._(
      ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionTaskTransactionMetrics castFrom<T extends _ObjCWrapper>(
      T other) {
    return NSURLSessionTaskTransactionMetrics._(other._id, other._lib);
  }

  static NSURLSessionTaskTransactionMetrics castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionTaskTransactionMetrics._(other, lib);
  }

  NSObject? get request {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_request1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get response {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_response1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get fetchStartDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_fetchStartDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get domainLookupStartDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_domainLookupStartDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get domainLookupEndDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_domainLookupEndDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get connectStartDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_connectStartDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get secureConnectionStartDate {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_secureConnectionStartDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get secureConnectionEndDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_secureConnectionEndDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get connectEndDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_connectEndDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get requestStartDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_requestStartDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get requestEndDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_requestEndDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get responseStartDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_responseStartDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get responseEndDate {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_responseEndDate1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get networkProtocolName {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_networkProtocolName1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool get proxyConnection {
    return _lib._objc_msgSend_10(_id, _lib._sel_isProxyConnection1);
  }

  bool get reusedConnection {
    return _lib._objc_msgSend_10(_id, _lib._sel_isReusedConnection1);
  }

  int get resourceFetchType {
    return _lib._objc_msgSend_241(_id, _lib._sel_resourceFetchType1);
  }

  int get countOfRequestHeaderBytesSent {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfRequestHeaderBytesSent1);
  }

  int get countOfRequestBodyBytesSent {
    return _lib._objc_msgSend_207(_id, _lib._sel_countOfRequestBodyBytesSent1);
  }

  int get countOfRequestBodyBytesBeforeEncoding {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfRequestBodyBytesBeforeEncoding1);
  }

  int get countOfResponseHeaderBytesReceived {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfResponseHeaderBytesReceived1);
  }

  int get countOfResponseBodyBytesReceived {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfResponseBodyBytesReceived1);
  }

  int get countOfResponseBodyBytesAfterDecoding {
    return _lib._objc_msgSend_207(
        _id, _lib._sel_countOfResponseBodyBytesAfterDecoding1);
  }

  NSObject? get localAddress {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localAddress1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localPort {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localPort1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get remoteAddress {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_remoteAddress1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get remotePort {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_remotePort1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get negotiatedTLSProtocolVersion {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_negotiatedTLSProtocolVersion1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get negotiatedTLSCipherSuite {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_negotiatedTLSCipherSuite1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool get cellular {
    return _lib._objc_msgSend_10(_id, _lib._sel_isCellular1);
  }

  bool get expensive {
    return _lib._objc_msgSend_10(_id, _lib._sel_isExpensive1);
  }

  bool get constrained {
    return _lib._objc_msgSend_10(_id, _lib._sel_isConstrained1);
  }

  bool get multipath {
    return _lib._objc_msgSend_10(_id, _lib._sel_isMultipath1);
  }

  int get domainResolutionProtocol {
    return _lib._objc_msgSend_242(_id, _lib._sel_domainResolutionProtocol1);
  }

  @override
  NSURLSessionTaskTransactionMetrics init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }

  static NSURLSessionTaskTransactionMetrics new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionTaskTransactionMetrics1, _lib._sel_new1);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }

  static NSURLSessionTaskTransactionMetrics new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionTaskTransactionMetrics1, _lib._sel_new1);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }

  static NSURLSessionTaskTransactionMetrics alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionTaskTransactionMetrics1, _lib._sel_alloc1);
    return NSURLSessionTaskTransactionMetrics._(_ret, _lib);
  }
}

class NSURLSessionTaskMetrics extends NSObject {
  NSURLSessionTaskMetrics._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLSessionTaskMetrics castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLSessionTaskMetrics._(other._id, other._lib);
  }

  static NSURLSessionTaskMetrics castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLSessionTaskMetrics._(other, lib);
  }

  NSObject? get transactionMetrics {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_transactionMetrics1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get taskInterval {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_taskInterval1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  int get redirectCount {
    return _lib._objc_msgSend_11(_id, _lib._sel_redirectCount1);
  }

  @override
  NSURLSessionTaskMetrics init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }

  static NSURLSessionTaskMetrics new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionTaskMetrics1, _lib._sel_new1);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }

  static NSURLSessionTaskMetrics new2(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionTaskMetrics1, _lib._sel_new1);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }

  static NSURLSessionTaskMetrics alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSURLSessionTaskMetrics1, _lib._sel_alloc1);
    return NSURLSessionTaskMetrics._(_ret, _lib);
  }
}

abstract class NSItemProviderRepresentationVisibility {
  static const int NSItemProviderRepresentationVisibilityAll = 0;
  static const int NSItemProviderRepresentationVisibilityTeam = 1;
  static const int NSItemProviderRepresentationVisibilityGroup = 2;
  static const int NSItemProviderRepresentationVisibilityOwnProcess = 3;
}

abstract class NSItemProviderFileOptions {
  static const int NSItemProviderFileOptionOpenInPlace = 1;
}

class NSItemProvider extends NSObject {
  NSItemProvider._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSItemProvider castFrom<T extends _ObjCWrapper>(T other) {
    return NSItemProvider._(other._id, other._lib);
  }

  static NSItemProvider castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSItemProvider._(other, lib);
  }

  @override
  NSItemProvider init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSItemProvider._(_ret, _lib);
  }

  void registerDataRepresentationForTypeIdentifier_visibility_loadHandler(
      NSObject? typeIdentifier, int visibility, ObjCBlock28 loadHandler) {
    _lib._objc_msgSend_243(
        _id,
        _lib._sel_registerDataRepresentationForTypeIdentifier_visibility_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        visibility,
        loadHandler._impl);
  }

  void
      registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler(
          NSObject? typeIdentifier,
          int fileOptions,
          int visibility,
          ObjCBlock29 loadHandler) {
    _lib._objc_msgSend_244(
        _id,
        _lib._sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        fileOptions,
        visibility,
        loadHandler._impl);
  }

  NSObject? get registeredTypeIdentifiers {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_registeredTypeIdentifiers1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool hasItemConformingToTypeIdentifier(NSObject? typeIdentifier) {
    return _lib._objc_msgSend_4(
        _id,
        _lib._sel_hasItemConformingToTypeIdentifier_1,
        typeIdentifier?._id ?? ffi.nullptr);
  }

  bool hasRepresentationConformingToTypeIdentifier_fileOptions(
      NSObject? typeIdentifier, int fileOptions) {
    return _lib._objc_msgSend_245(
        _id,
        _lib._sel_hasRepresentationConformingToTypeIdentifier_fileOptions_1,
        typeIdentifier?._id ?? ffi.nullptr,
        fileOptions);
  }

  NSProgress loadDataRepresentationForTypeIdentifier_completionHandler(
      NSObject? typeIdentifier, ObjCBlock20 completionHandler) {
    final _ret = _lib._objc_msgSend_246(
        _id,
        _lib._sel_loadDataRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSProgress._(_ret, _lib);
  }

  NSProgress loadFileRepresentationForTypeIdentifier_completionHandler(
      NSObject? typeIdentifier, ObjCBlock20 completionHandler) {
    final _ret = _lib._objc_msgSend_246(
        _id,
        _lib._sel_loadFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSProgress._(_ret, _lib);
  }

  NSProgress loadInPlaceFileRepresentationForTypeIdentifier_completionHandler(
      NSObject? typeIdentifier, ObjCBlock27 completionHandler) {
    final _ret = _lib._objc_msgSend_247(
        _id,
        _lib._sel_loadInPlaceFileRepresentationForTypeIdentifier_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSProgress._(_ret, _lib);
  }

  NSObject? get suggestedName {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_suggestedName1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set suggestedName(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setSuggestedName_1, value?._id ?? ffi.nullptr);
  }

  NSItemProvider initWithObject(NSObject? object) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithObject_1, object?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib);
  }

  void registerObject_visibility(NSObject? object, int visibility) {
    _lib._objc_msgSend_248(_id, _lib._sel_registerObject_visibility_1,
        object?._id ?? ffi.nullptr, visibility);
  }

  void registerObjectOfClass_visibility_loadHandler(
      NSObject? aClass, int visibility, ObjCBlock28 loadHandler) {
    _lib._objc_msgSend_243(
        _id,
        _lib._sel_registerObjectOfClass_visibility_loadHandler_1,
        aClass?._id ?? ffi.nullptr,
        visibility,
        loadHandler._impl);
  }

  bool canLoadObjectOfClass(NSObject? aClass) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_canLoadObjectOfClass_1, aClass?._id ?? ffi.nullptr);
  }

  NSProgress loadObjectOfClass_completionHandler(
      NSObject? aClass, ObjCBlock20 completionHandler) {
    final _ret = _lib._objc_msgSend_246(
        _id,
        _lib._sel_loadObjectOfClass_completionHandler_1,
        aClass?._id ?? ffi.nullptr,
        completionHandler._impl);
    return NSProgress._(_ret, _lib);
  }

  NSItemProvider initWithItem_typeIdentifier(
      NSObject? item, NSObject? typeIdentifier) {
    final _ret = _lib._objc_msgSend_75(
        _id,
        _lib._sel_initWithItem_typeIdentifier_1,
        item?._id ?? ffi.nullptr,
        typeIdentifier?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib);
  }

  NSItemProvider initWithContentsOfURL(NSObject? fileURL) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithContentsOfURL_1, fileURL?._id ?? ffi.nullptr);
    return NSItemProvider._(_ret, _lib);
  }

  void registerItemForTypeIdentifier_loadHandler(
      NSObject? typeIdentifier, NSItemProviderLoadHandler loadHandler) {
    _lib._objc_msgSend_249(
        _id,
        _lib._sel_registerItemForTypeIdentifier_loadHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        loadHandler);
  }

  void loadItemForTypeIdentifier_options_completionHandler(
      NSObject? typeIdentifier,
      NSObject? options,
      NSItemProviderCompletionHandler completionHandler) {
    _lib._objc_msgSend_250(
        _id,
        _lib._sel_loadItemForTypeIdentifier_options_completionHandler_1,
        typeIdentifier?._id ?? ffi.nullptr,
        options?._id ?? ffi.nullptr,
        completionHandler);
  }

  NSItemProviderLoadHandler get previewImageHandler {
    return _lib._objc_msgSend_251(_id, _lib._sel_previewImageHandler1);
  }

  set previewImageHandler(NSItemProviderLoadHandler value) {
    _lib._objc_msgSend_252(_id, _lib._sel_setPreviewImageHandler_1, value);
  }

  void loadPreviewImageWithOptions_completionHandler(
      NSObject? options, NSItemProviderCompletionHandler completionHandler) {
    _lib._objc_msgSend_253(
        _id,
        _lib._sel_loadPreviewImageWithOptions_completionHandler_1,
        options?._id ?? ffi.nullptr,
        completionHandler);
  }

  NSItemProviderLoadHandler get previewImageHandler1 {
    return _lib._objc_msgSend_251(_id, _lib._sel_previewImageHandler1);
  }

  set previewImageHandler1(NSItemProviderLoadHandler value) {
    _lib._objc_msgSend_252(_id, _lib._sel_setPreviewImageHandler_1, value);
  }

  void loadPreviewImageWithOptions_completionHandler1(
      NSObject? options, NSItemProviderCompletionHandler completionHandler) {
    _lib._objc_msgSend_253(
        _id,
        _lib._sel_loadPreviewImageWithOptions_completionHandler_1,
        options?._id ?? ffi.nullptr,
        completionHandler);
  }

  static NSItemProvider new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSItemProvider1, _lib._sel_new1);
    return NSItemProvider._(_ret, _lib);
  }

  static NSItemProvider alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSItemProvider1, _lib._sel_alloc1);
    return NSItemProvider._(_ret, _lib);
  }
}

ffi.Pointer<ObjCObject> _ObjCBlock28_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<_ObjCBlock> arg0)>()(arg0);
}

class ObjCBlock28 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock28._(this._impl, this._lib);

  ObjCBlock28.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Pointer<ObjCObject> Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<_ObjCBlock> arg0)>(
                    _ObjCBlock28_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

ffi.Pointer<ObjCObject> _ObjCBlock29_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block, ffi.Pointer<_ObjCBlock> arg0) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(ffi.Pointer<_ObjCBlock> arg0)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(
              ffi.Pointer<_ObjCBlock> arg0)>()(arg0);
}

class ObjCBlock29 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock29._(this._impl, this._lib);

  ObjCBlock29.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<_ObjCBlock> arg0)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Pointer<ObjCObject> Function(
                            ffi.Pointer<_ObjCBlock> block,
                            ffi.Pointer<_ObjCBlock> arg0)>(
                    _ObjCBlock29_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSItemProviderLoadHandler = ffi.Pointer<_ObjCBlock>;
void _ObjCBlock30_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    NSItemProviderCompletionHandler arg0,
    ffi.Pointer<ObjCObject> arg1,
    ffi.Pointer<ObjCObject> arg2) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Void Function(
                  NSItemProviderCompletionHandler arg0,
                  ffi.Pointer<ObjCObject> arg1,
                  ffi.Pointer<ObjCObject> arg2)>>()
      .asFunction<
          void Function(
              NSItemProviderCompletionHandler arg0,
              ffi.Pointer<ObjCObject> arg1,
              ffi.Pointer<ObjCObject> arg2)>()(arg0, arg1, arg2);
}

class ObjCBlock30 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock30._(this._impl, this._lib);

  ObjCBlock30.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(
                      NSItemProviderCompletionHandler arg0,
                      ffi.Pointer<ObjCObject> arg1,
                      ffi.Pointer<ObjCObject> arg2)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                        ffi.Void Function(
                            ffi.Pointer<_ObjCBlock> block,
                            NSItemProviderCompletionHandler arg0,
                            ffi.Pointer<ObjCObject> arg1,
                            ffi.Pointer<ObjCObject> arg2)>(
                    _ObjCBlock30_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

typedef NSItemProviderCompletionHandler = ffi.Pointer<_ObjCBlock>;

abstract class NSItemProviderErrorCode {
  static const int NSItemProviderUnknownError = -1;
  static const int NSItemProviderItemUnavailableError = -1000;
  static const int NSItemProviderUnexpectedValueClassError = -1100;
  static const int NSItemProviderUnavailableCoercionError = -1200;
}

typedef NSStringEncodingDetectionOptionsKey = ffi.Pointer<ObjCObject>;

class NSMutableString extends NSString {
  NSMutableString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMutableString castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableString._(other._id, other._lib);
  }

  static NSMutableString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMutableString._(other, lib);
  }

  void replaceCharactersInRange_withString(NSRange range, NSObject? aString) {
    _lib._objc_msgSend_175(_id, _lib._sel_replaceCharactersInRange_withString_1,
        range, aString?._id ?? ffi.nullptr);
  }

  void insertString_atIndex(NSObject? aString, int loc) {
    _lib._objc_msgSend_169(_id, _lib._sel_insertString_atIndex_1,
        aString?._id ?? ffi.nullptr, loc);
  }

  void deleteCharactersInRange(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_deleteCharactersInRange_1, range);
  }

  void appendString(NSObject? aString) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_appendString_1, aString?._id ?? ffi.nullptr);
  }

  void appendFormat(NSObject? format) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_appendFormat_1, format?._id ?? ffi.nullptr);
  }

  void setString(NSObject? aString) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setString_1, aString?._id ?? ffi.nullptr);
  }

  int replaceOccurrencesOfString_withString_options_range(NSObject? target,
      NSObject? replacement, int options, NSRange searchRange) {
    return _lib._objc_msgSend_254(
        _id,
        _lib._sel_replaceOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
  }

  bool applyTransform_reverse_range_updatedRange(NSStringTransform transform,
      bool reverse, NSRange range, NSRangePointer resultingRange) {
    return _lib._objc_msgSend_255(
        _id,
        _lib._sel_applyTransform_reverse_range_updatedRange_1,
        transform,
        reverse,
        range,
        resultingRange);
  }

  NSMutableString initWithCapacity(int capacity) {
    final _ret =
        _lib._objc_msgSend_256(_id, _lib._sel_initWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithCapacity(NativeLibrary _lib, int capacity) {
    final _ret = _lib._objc_msgSend_256(
        _lib._class_NSMutableString1, _lib._sel_stringWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib);
  }

  void insertString_atIndex1(NSObject? aString, int loc) {
    _lib._objc_msgSend_169(_id, _lib._sel_insertString_atIndex_1,
        aString?._id ?? ffi.nullptr, loc);
  }

  void deleteCharactersInRange1(NSRange range) {
    _lib._objc_msgSend_149(_id, _lib._sel_deleteCharactersInRange_1, range);
  }

  void appendString1(NSObject? aString) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_appendString_1, aString?._id ?? ffi.nullptr);
  }

  void appendFormat1(NSObject? format) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_appendFormat_1, format?._id ?? ffi.nullptr);
  }

  void setString1(NSObject? aString) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setString_1, aString?._id ?? ffi.nullptr);
  }

  int replaceOccurrencesOfString_withString_options_range1(NSObject? target,
      NSObject? replacement, int options, NSRange searchRange) {
    return _lib._objc_msgSend_254(
        _id,
        _lib._sel_replaceOccurrencesOfString_withString_options_range_1,
        target?._id ?? ffi.nullptr,
        replacement?._id ?? ffi.nullptr,
        options,
        searchRange);
  }

  bool applyTransform_reverse_range_updatedRange1(NSStringTransform transform,
      bool reverse, NSRange range, NSRangePointer resultingRange) {
    return _lib._objc_msgSend_255(
        _id,
        _lib._sel_applyTransform_reverse_range_updatedRange_1,
        transform,
        reverse,
        range,
        resultingRange);
  }

  NSMutableString initWithCapacity1(int capacity) {
    final _ret =
        _lib._objc_msgSend_256(_id, _lib._sel_initWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithCapacity1(NativeLibrary _lib, int capacity) {
    final _ret = _lib._objc_msgSend_256(
        _lib._class_NSMutableString1, _lib._sel_stringWithCapacity_1, capacity);
    return NSMutableString._(_ret, _lib);
  }

  static NSString localizedNameOfStringEncoding(
      NativeLibrary _lib, int encoding) {
    final _ret = _lib._objc_msgSend_12(_lib._class_NSMutableString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib);
  }

  static NSMutableString string(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSMutableString1, _lib._sel_string1);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithString(
      NativeLibrary _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithCharacters_length(
      NativeLibrary _lib, ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_72(_lib._class_NSMutableString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithUTF8String(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_73(_lib._class_NSMutableString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithFormat(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString localizedStringWithFormat(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithContentsOfURL_encoding_error(
      NativeLibrary _lib,
      NSObject? url,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithContentsOfFile_encoding_error(
      NativeLibrary _lib,
      NSObject? path,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithContentsOfURL_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib);
  }

  static NSMutableString stringWithContentsOfFile_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSMutableString._(_ret, _lib);
  }

  static void availableStringEncodings(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableString1, _lib._sel_availableStringEncodings1);
  }

  static void defaultCStringEncoding(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableString1, _lib._sel_defaultCStringEncoding1);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion(
          NativeLibrary _lib,
          NSObject? data,
          NSObject? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Uint8> usedLossyConversion) {
    return _lib._objc_msgSend_84(
        _lib._class_NSMutableString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject stringWithContentsOfFile(NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithContentsOfURL(NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSMutableString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString_length(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSMutableString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_73(
        _lib._class_NSMutableString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib);
  }
}

typedef NSExceptionName = ffi.Pointer<ObjCObject>;

class NSSimpleCString extends NSString {
  NSSimpleCString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSSimpleCString castFrom<T extends _ObjCWrapper>(T other) {
    return NSSimpleCString._(other._id, other._lib);
  }

  static NSSimpleCString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSSimpleCString._(other, lib);
  }

  static NSString localizedNameOfStringEncoding(
      NativeLibrary _lib, int encoding) {
    final _ret = _lib._objc_msgSend_12(_lib._class_NSSimpleCString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib);
  }

  static NSSimpleCString string(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSSimpleCString1, _lib._sel_string1);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithString(
      NativeLibrary _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithCharacters_length(
      NativeLibrary _lib, ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_72(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithUTF8String(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_73(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithFormat(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString localizedStringWithFormat(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSSimpleCString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithContentsOfURL_encoding_error(
      NativeLibrary _lib,
      NSObject? url,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithContentsOfFile_encoding_error(
      NativeLibrary _lib,
      NSObject? path,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithContentsOfURL_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSSimpleCString._(_ret, _lib);
  }

  static NSSimpleCString stringWithContentsOfFile_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSSimpleCString._(_ret, _lib);
  }

  static void availableStringEncodings(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSSimpleCString1, _lib._sel_availableStringEncodings1);
  }

  static void defaultCStringEncoding(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSSimpleCString1, _lib._sel_defaultCStringEncoding1);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion(
          NativeLibrary _lib,
          NSObject? data,
          NSObject? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Uint8> usedLossyConversion) {
    return _lib._objc_msgSend_84(
        _lib._class_NSSimpleCString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject stringWithContentsOfFile(NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithContentsOfURL(NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString_length(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSSimpleCString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_73(
        _lib._class_NSSimpleCString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib);
  }
}

class NSConstantString extends NSSimpleCString {
  NSConstantString._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSConstantString castFrom<T extends _ObjCWrapper>(T other) {
    return NSConstantString._(other._id, other._lib);
  }

  static NSConstantString castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSConstantString._(other, lib);
  }

  static NSString localizedNameOfStringEncoding(
      NativeLibrary _lib, int encoding) {
    final _ret = _lib._objc_msgSend_12(_lib._class_NSConstantString1,
        _lib._sel_localizedNameOfStringEncoding_1, encoding);
    return NSString._(_ret, _lib);
  }

  static NSConstantString string(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSConstantString1, _lib._sel_string1);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithString(
      NativeLibrary _lib, NSObject? string) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSConstantString1,
        _lib._sel_stringWithString_1, string?._id ?? ffi.nullptr);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithCharacters_length(
      NativeLibrary _lib, ffi.Pointer<unichar> characters, int length) {
    final _ret = _lib._objc_msgSend_72(_lib._class_NSConstantString1,
        _lib._sel_stringWithCharacters_length_1, characters, length);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithUTF8String(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> nullTerminatedCString) {
    final _ret = _lib._objc_msgSend_73(_lib._class_NSConstantString1,
        _lib._sel_stringWithUTF8String_1, nullTerminatedCString);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithFormat(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSConstantString1,
        _lib._sel_stringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString localizedStringWithFormat(
      NativeLibrary _lib, NSObject? format) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSConstantString1,
        _lib._sel_localizedStringWithFormat_1, format?._id ?? ffi.nullptr);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithCString_encoding(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> cString, int enc) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSConstantString1,
        _lib._sel_stringWithCString_encoding_1, cString, enc);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithContentsOfURL_encoding_error(
      NativeLibrary _lib,
      NSObject? url,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfURL_encoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithContentsOfFile_encoding_error(
      NativeLibrary _lib,
      NSObject? path,
      int enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_82(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfFile_encoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithContentsOfURL_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? url,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfURL_usedEncoding_error_1,
        url?._id ?? ffi.nullptr,
        enc,
        error);
    return NSConstantString._(_ret, _lib);
  }

  static NSConstantString stringWithContentsOfFile_usedEncoding_error(
      NativeLibrary _lib,
      NSObject? path,
      ffi.Pointer<NSStringEncoding> enc,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_83(
        _lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfFile_usedEncoding_error_1,
        path?._id ?? ffi.nullptr,
        enc,
        error);
    return NSConstantString._(_ret, _lib);
  }

  static void availableStringEncodings(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSConstantString1, _lib._sel_availableStringEncodings1);
  }

  static void defaultCStringEncoding(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSConstantString1, _lib._sel_defaultCStringEncoding1);
  }

  static int
      stringEncodingForData_encodingOptions_convertedString_usedLossyConversion(
          NativeLibrary _lib,
          NSObject? data,
          NSObject? opts,
          ffi.Pointer<ffi.Pointer<ObjCObject>> string,
          ffi.Pointer<ffi.Uint8> usedLossyConversion) {
    return _lib._objc_msgSend_84(
        _lib._class_NSConstantString1,
        _lib._sel_stringEncodingForData_encodingOptions_convertedString_usedLossyConversion_1,
        data?._id ?? ffi.nullptr,
        opts?._id ?? ffi.nullptr,
        string,
        usedLossyConversion);
  }

  static NSObject stringWithContentsOfFile(NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfFile_1, path?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithContentsOfURL(NativeLibrary _lib, NSObject? url) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSConstantString1,
        _lib._sel_stringWithContentsOfURL_1, url?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString_length(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes, int length) {
    final _ret = _lib._objc_msgSend_81(_lib._class_NSConstantString1,
        _lib._sel_stringWithCString_length_1, bytes, length);
    return NSObject._(_ret, _lib);
  }

  static NSObject stringWithCString(
      NativeLibrary _lib, ffi.Pointer<pkg_ffi.Char> bytes) {
    final _ret = _lib._objc_msgSend_73(
        _lib._class_NSConstantString1, _lib._sel_stringWithCString_1, bytes);
    return NSObject._(_ret, _lib);
  }
}

class NSCharacterSet extends NSObject {
  NSCharacterSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSCharacterSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSCharacterSet._(other._id, other._lib);
  }

  static NSCharacterSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSCharacterSet._(other, lib);
  }

  static NSObject? getControlCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_controlCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getWhitespaceCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_whitespaceCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getWhitespaceAndNewlineCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSCharacterSet1,
        _lib._sel_whitespaceAndNewlineCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getDecimalDigitCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_decimalDigitCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getLetterCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_letterCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getLowercaseLetterCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_lowercaseLetterCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getUppercaseLetterCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_uppercaseLetterCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getNonBaseCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_nonBaseCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getAlphanumericCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_alphanumericCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getDecomposableCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_decomposableCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getIllegalCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_illegalCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getPunctuationCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_punctuationCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getCapitalizedLetterCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_capitalizedLetterCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getSymbolCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_symbolCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getNewlineCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_newlineCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithRange(
      NativeLibrary _lib, NSRange aRange) {
    final _ret = _lib._objc_msgSend_257(
        _lib._class_NSCharacterSet1, _lib._sel_characterSetWithRange_1, aRange);
    return NSCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithCharactersInString(
      NativeLibrary _lib, NSObject? aString) {
    final _ret = _lib._objc_msgSend_258(
        _lib._class_NSCharacterSet1,
        _lib._sel_characterSetWithCharactersInString_1,
        aString?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithBitmapRepresentation(
      NativeLibrary _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_258(
        _lib._class_NSCharacterSet1,
        _lib._sel_characterSetWithBitmapRepresentation_1,
        data?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithContentsOfFile(
      NativeLibrary _lib, NSObject? fName) {
    final _ret = _lib._objc_msgSend_258(_lib._class_NSCharacterSet1,
        _lib._sel_characterSetWithContentsOfFile_1, fName?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib);
  }

  NSCharacterSet initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib);
  }

  bool characterIsMember(int aCharacter) {
    return _lib._objc_msgSend_259(
        _id, _lib._sel_characterIsMember_1, aCharacter);
  }

  NSObject? get bitmapRepresentation {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_bitmapRepresentation1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get invertedSet {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_invertedSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool longCharacterIsMember(int theLongChar) {
    return _lib._objc_msgSend_260(
        _id, _lib._sel_longCharacterIsMember_1, theLongChar);
  }

  bool isSupersetOfSet(NSObject? theOtherSet) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_isSupersetOfSet_1, theOtherSet?._id ?? ffi.nullptr);
  }

  bool hasMemberInPlane(int thePlane) {
    return _lib._objc_msgSend_261(_id, _lib._sel_hasMemberInPlane_1, thePlane);
  }

  static NSObject? getURLUserAllowedCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_URLUserAllowedCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getURLPasswordAllowedCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_URLPasswordAllowedCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getURLHostAllowedCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_URLHostAllowedCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getURLPathAllowedCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_URLPathAllowedCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getURLQueryAllowedCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_URLQueryAllowedCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getURLFragmentAllowedCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSCharacterSet1, _lib._sel_URLFragmentAllowedCharacterSet1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSCharacterSet new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSCharacterSet1, _lib._sel_new1);
    return NSCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSCharacterSet1, _lib._sel_alloc1);
    return NSCharacterSet._(_ret, _lib);
  }
}

class NSMutableCharacterSet extends NSCharacterSet {
  NSMutableCharacterSet._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSMutableCharacterSet castFrom<T extends _ObjCWrapper>(T other) {
    return NSMutableCharacterSet._(other._id, other._lib);
  }

  static NSMutableCharacterSet castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSMutableCharacterSet._(other, lib);
  }

  void addCharactersInRange(NSRange aRange) {
    _lib._objc_msgSend_149(_id, _lib._sel_addCharactersInRange_1, aRange);
  }

  void removeCharactersInRange(NSRange aRange) {
    _lib._objc_msgSend_149(_id, _lib._sel_removeCharactersInRange_1, aRange);
  }

  void addCharactersInString(NSObject? aString) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_addCharactersInString_1, aString?._id ?? ffi.nullptr);
  }

  void removeCharactersInString(NSObject? aString) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeCharactersInString_1, aString?._id ?? ffi.nullptr);
  }

  void formUnionWithCharacterSet(NSObject? otherSet) {
    _lib._objc_msgSend_8(_id, _lib._sel_formUnionWithCharacterSet_1,
        otherSet?._id ?? ffi.nullptr);
  }

  void formIntersectionWithCharacterSet(NSObject? otherSet) {
    _lib._objc_msgSend_8(_id, _lib._sel_formIntersectionWithCharacterSet_1,
        otherSet?._id ?? ffi.nullptr);
  }

  void invert() {
    _lib._objc_msgSend_0(_id, _lib._sel_invert1);
  }

  static NSMutableCharacterSet controlCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_controlCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet whitespaceCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_whitespaceCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet whitespaceAndNewlineCharacterSet(
      NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(_lib._class_NSMutableCharacterSet1,
        _lib._sel_whitespaceAndNewlineCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet decimalDigitCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(_lib._class_NSMutableCharacterSet1,
        _lib._sel_decimalDigitCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet letterCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_letterCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet lowercaseLetterCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(_lib._class_NSMutableCharacterSet1,
        _lib._sel_lowercaseLetterCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet uppercaseLetterCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(_lib._class_NSMutableCharacterSet1,
        _lib._sel_uppercaseLetterCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet nonBaseCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_nonBaseCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet alphanumericCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(_lib._class_NSMutableCharacterSet1,
        _lib._sel_alphanumericCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet decomposableCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(_lib._class_NSMutableCharacterSet1,
        _lib._sel_decomposableCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet illegalCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_illegalCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet punctuationCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_punctuationCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet capitalizedLetterCharacterSet(
      NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(_lib._class_NSMutableCharacterSet1,
        _lib._sel_capitalizedLetterCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet symbolCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_symbolCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet newlineCharacterSet(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_262(
        _lib._class_NSMutableCharacterSet1, _lib._sel_newlineCharacterSet1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet characterSetWithRange(
      NativeLibrary _lib, NSRange aRange) {
    final _ret = _lib._objc_msgSend_263(_lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithRange_1, aRange);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet characterSetWithCharactersInString(
      NativeLibrary _lib, NSObject? aString) {
    final _ret = _lib._objc_msgSend_264(
        _lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithCharactersInString_1,
        aString?._id ?? ffi.nullptr);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet characterSetWithBitmapRepresentation(
      NativeLibrary _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_264(
        _lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithBitmapRepresentation_1,
        data?._id ?? ffi.nullptr);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet characterSetWithContentsOfFile(
      NativeLibrary _lib, NSObject? fName) {
    final _ret = _lib._objc_msgSend_264(_lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithContentsOfFile_1, fName?._id ?? ffi.nullptr);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithRange1(
      NativeLibrary _lib, NSRange aRange) {
    final _ret = _lib._objc_msgSend_257(_lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithRange_1, aRange);
    return NSCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithCharactersInString1(
      NativeLibrary _lib, NSObject? aString) {
    final _ret = _lib._objc_msgSend_258(
        _lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithCharactersInString_1,
        aString?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithBitmapRepresentation1(
      NativeLibrary _lib, NSObject? data) {
    final _ret = _lib._objc_msgSend_258(
        _lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithBitmapRepresentation_1,
        data?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib);
  }

  static NSCharacterSet characterSetWithContentsOfFile1(
      NativeLibrary _lib, NSObject? fName) {
    final _ret = _lib._objc_msgSend_258(_lib._class_NSMutableCharacterSet1,
        _lib._sel_characterSetWithContentsOfFile_1, fName?._id ?? ffi.nullptr);
    return NSCharacterSet._(_ret, _lib);
  }

  static void controlCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_controlCharacterSet1);
  }

  static void whitespaceCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_whitespaceCharacterSet1);
  }

  static void whitespaceAndNewlineCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_whitespaceAndNewlineCharacterSet1);
  }

  static void decimalDigitCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_decimalDigitCharacterSet1);
  }

  static void letterCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_letterCharacterSet1);
  }

  static void lowercaseLetterCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_lowercaseLetterCharacterSet1);
  }

  static void uppercaseLetterCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_uppercaseLetterCharacterSet1);
  }

  static void nonBaseCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_nonBaseCharacterSet1);
  }

  static void alphanumericCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_alphanumericCharacterSet1);
  }

  static void decomposableCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_decomposableCharacterSet1);
  }

  static void illegalCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_illegalCharacterSet1);
  }

  static void punctuationCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_punctuationCharacterSet1);
  }

  static void capitalizedLetterCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_capitalizedLetterCharacterSet1);
  }

  static void symbolCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_symbolCharacterSet1);
  }

  static void newlineCharacterSet1(NativeLibrary _lib) {
    _lib._objc_msgSend_0(
        _lib._class_NSMutableCharacterSet1, _lib._sel_newlineCharacterSet1);
  }

  static void URLUserAllowedCharacterSet(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_URLUserAllowedCharacterSet1);
  }

  static void URLPasswordAllowedCharacterSet(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_URLPasswordAllowedCharacterSet1);
  }

  static void URLHostAllowedCharacterSet(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_URLHostAllowedCharacterSet1);
  }

  static void URLPathAllowedCharacterSet(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_URLPathAllowedCharacterSet1);
  }

  static void URLQueryAllowedCharacterSet(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_URLQueryAllowedCharacterSet1);
  }

  static void URLFragmentAllowedCharacterSet(NativeLibrary _lib) {
    _lib._objc_msgSend_0(_lib._class_NSMutableCharacterSet1,
        _lib._sel_URLFragmentAllowedCharacterSet1);
  }

  static NSMutableCharacterSet new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSMutableCharacterSet1, _lib._sel_new1);
    return NSMutableCharacterSet._(_ret, _lib);
  }

  static NSMutableCharacterSet alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSMutableCharacterSet1, _lib._sel_alloc1);
    return NSMutableCharacterSet._(_ret, _lib);
  }
}

abstract class NSURLHandleStatus {
  static const int NSURLHandleNotLoaded = 0;
  static const int NSURLHandleLoadSucceeded = 1;
  static const int NSURLHandleLoadInProgress = 2;
  static const int NSURLHandleLoadFailed = 3;
}

class NSURLHandle extends NSObject {
  NSURLHandle._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLHandle castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLHandle._(other._id, other._lib);
  }

  static NSURLHandle castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLHandle._(other, lib);
  }

  static void registerURLHandleClass(
      NativeLibrary _lib, NSObject anURLHandleSubclass) {
    _lib._objc_msgSend_8(_lib._class_NSURLHandle1,
        _lib._sel_registerURLHandleClass_1, anURLHandleSubclass._id);
  }

  static NSObject URLHandleClassForURL(NativeLibrary _lib, NSObject? anURL) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSURLHandle1,
        _lib._sel_URLHandleClassForURL_1, anURL?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  int status() {
    return _lib._objc_msgSend_265(_id, _lib._sel_status1);
  }

  NSString failureReason() {
    final _ret = _lib._objc_msgSend_54(_id, _lib._sel_failureReason1);
    return NSString._(_ret, _lib);
  }

  void addClient(NSObject? client) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_addClient_1, client?._id ?? ffi.nullptr);
  }

  void removeClient(NSObject? client) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeClient_1, client?._id ?? ffi.nullptr);
  }

  void loadInBackground() {
    _lib._objc_msgSend_0(_id, _lib._sel_loadInBackground1);
  }

  void cancelLoadInBackground() {
    _lib._objc_msgSend_0(_id, _lib._sel_cancelLoadInBackground1);
  }

  NSData resourceData() {
    final _ret = _lib._objc_msgSend_266(_id, _lib._sel_resourceData1);
    return NSData._(_ret, _lib);
  }

  NSData availableResourceData() {
    final _ret = _lib._objc_msgSend_266(_id, _lib._sel_availableResourceData1);
    return NSData._(_ret, _lib);
  }

  void expectedResourceDataSize() {
    _lib._objc_msgSend_0(_id, _lib._sel_expectedResourceDataSize1);
  }

  void flushCachedData() {
    _lib._objc_msgSend_0(_id, _lib._sel_flushCachedData1);
  }

  void backgroundLoadDidFailWithReason(NSObject? reason) {
    _lib._objc_msgSend_8(_id, _lib._sel_backgroundLoadDidFailWithReason_1,
        reason?._id ?? ffi.nullptr);
  }

  void didLoadBytes_loadComplete(NSObject? newBytes, bool yorn) {
    _lib._objc_msgSend_267(_id, _lib._sel_didLoadBytes_loadComplete_1,
        newBytes?._id ?? ffi.nullptr, yorn);
  }

  static bool canInitWithURL(NativeLibrary _lib, NSObject? anURL) {
    return _lib._objc_msgSend_4(_lib._class_NSURLHandle1,
        _lib._sel_canInitWithURL_1, anURL?._id ?? ffi.nullptr);
  }

  static NSURLHandle cachedHandleForURL(NativeLibrary _lib, NSObject? anURL) {
    final _ret = _lib._objc_msgSend_268(_lib._class_NSURLHandle1,
        _lib._sel_cachedHandleForURL_1, anURL?._id ?? ffi.nullptr);
    return NSURLHandle._(_ret, _lib);
  }

  void initWithURL_cached(NSObject? anURL, bool willCache) {
    _lib._objc_msgSend_267(_id, _lib._sel_initWithURL_cached_1,
        anURL?._id ?? ffi.nullptr, willCache);
  }

  NSObject propertyForKey(NSObject? propertyKey) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_propertyForKey_1, propertyKey?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  NSObject propertyForKeyIfAvailable(NSObject? propertyKey) {
    final _ret = _lib._objc_msgSend_47(_id,
        _lib._sel_propertyForKeyIfAvailable_1, propertyKey?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  bool writeProperty_forKey(NSObject propertyValue, NSObject? propertyKey) {
    return _lib._objc_msgSend_269(_id, _lib._sel_writeProperty_forKey_1,
        propertyValue._id, propertyKey?._id ?? ffi.nullptr);
  }

  bool writeData(NSObject? data) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_writeData_1, data?._id ?? ffi.nullptr);
  }

  NSData loadInForeground() {
    final _ret = _lib._objc_msgSend_266(_id, _lib._sel_loadInForeground1);
    return NSData._(_ret, _lib);
  }

  void beginLoadInBackground() {
    _lib._objc_msgSend_0(_id, _lib._sel_beginLoadInBackground1);
  }

  void endLoadInBackground() {
    _lib._objc_msgSend_0(_id, _lib._sel_endLoadInBackground1);
  }

  static NSURLHandle new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSURLHandle1, _lib._sel_new1);
    return NSURLHandle._(_ret, _lib);
  }

  static NSURLHandle alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLHandle1, _lib._sel_alloc1);
    return NSURLHandle._(_ret, _lib);
  }
}

class NSURL extends NSObject {
  NSURL._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSURL castFrom<T extends _ObjCWrapper>(T other) {
    return NSURL._(other._id, other._lib);
  }

  static NSURL castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURL._(other, lib);
  }

  NSURL initWithScheme_host_path(
      NSObject? scheme, NSObject? host, NSObject? path) {
    final _ret = _lib._objc_msgSend_182(
        _id,
        _lib._sel_initWithScheme_host_path_1,
        scheme?._id ?? ffi.nullptr,
        host?._id ?? ffi.nullptr,
        path?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initFileURLWithPath_isDirectory_relativeToURL(
      NSObject? path, bool isDir, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_270(
        _id,
        _lib._sel_initFileURLWithPath_isDirectory_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initFileURLWithPath_relativeToURL(NSObject? path, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_75(
        _id,
        _lib._sel_initFileURLWithPath_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initFileURLWithPath_isDirectory(NSObject? path, bool isDir) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initFileURLWithPath_isDirectory_1,
        path?._id ?? ffi.nullptr,
        isDir);
    return NSURL._(_ret, _lib);
  }

  NSURL initFileURLWithPath(NSObject? path) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initFileURLWithPath_1, path?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL fileURLWithPath_isDirectory_relativeToURL(
      NativeLibrary _lib, NSObject? path, bool isDir, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_271(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_isDirectory_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL fileURLWithPath_relativeToURL(
      NativeLibrary _lib, NSObject? path, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_272(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_relativeToURL_1,
        path?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL fileURLWithPath_isDirectory(
      NativeLibrary _lib, NSObject? path, bool isDir) {
    final _ret = _lib._objc_msgSend_273(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithPath_isDirectory_1,
        path?._id ?? ffi.nullptr,
        isDir);
    return NSURL._(_ret, _lib);
  }

  static NSURL fileURLWithPath(NativeLibrary _lib, NSObject? path) {
    final _ret = _lib._objc_msgSend_274(_lib._class_NSURL1,
        _lib._sel_fileURLWithPath_1, path?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL(
      ffi.Pointer<pkg_ffi.Char> path, bool isDir, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_275(
        _id,
        _lib._sel_initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
        path,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL fileURLWithFileSystemRepresentation_isDirectory_relativeToURL(
      NativeLibrary _lib,
      ffi.Pointer<pkg_ffi.Char> path,
      bool isDir,
      NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_276(
        _lib._class_NSURL1,
        _lib._sel_fileURLWithFileSystemRepresentation_isDirectory_relativeToURL_1,
        path,
        isDir,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initWithString(NSObject? URLString) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithString_1, URLString?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initWithString_relativeToURL(NSObject? URLString, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_75(
        _id,
        _lib._sel_initWithString_relativeToURL_1,
        URLString?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL URLWithString(NativeLibrary _lib, NSObject? URLString) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSURL1,
        _lib._sel_URLWithString_1, URLString?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL URLWithString_relativeToURL(
      NativeLibrary _lib, NSObject? URLString, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSURL1,
        _lib._sel_URLWithString_relativeToURL_1,
        URLString?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initWithDataRepresentation_relativeToURL(
      NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_75(
        _id,
        _lib._sel_initWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL URLWithDataRepresentation_relativeToURL(
      NativeLibrary _lib, NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_272(
        _lib._class_NSURL1,
        _lib._sel_URLWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL initAbsoluteURLWithDataRepresentation_relativeToURL(
      NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_75(
        _id,
        _lib._sel_initAbsoluteURLWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  static NSURL absoluteURLWithDataRepresentation_relativeToURL(
      NativeLibrary _lib, NSObject? data, NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_272(
        _lib._class_NSURL1,
        _lib._sel_absoluteURLWithDataRepresentation_relativeToURL_1,
        data?._id ?? ffi.nullptr,
        baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSObject? get dataRepresentation {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_dataRepresentation1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get absoluteString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_absoluteString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get relativeString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_relativeString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get baseURL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_baseURL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get absoluteURL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_absoluteURL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get scheme {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_scheme1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get resourceSpecifier {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_resourceSpecifier1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get host {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_host1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get port {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_port1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get user {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_user1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get password {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_password1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get path {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_path1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get fragment {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_fragment1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get parameterString {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_parameterString1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get query {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_query1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get relativePath {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_relativePath1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool get hasDirectoryPath {
    return _lib._objc_msgSend_10(_id, _lib._sel_hasDirectoryPath1);
  }

  bool getFileSystemRepresentation_maxLength(
      ffi.Pointer<pkg_ffi.Char> buffer, int maxBufferLength) {
    return _lib._objc_msgSend_277(
        _id,
        _lib._sel_getFileSystemRepresentation_maxLength_1,
        buffer,
        maxBufferLength);
  }

  ffi.Pointer<pkg_ffi.Char> get fileSystemRepresentation {
    return _lib._objc_msgSend_35(_id, _lib._sel_fileSystemRepresentation1);
  }

  bool get fileURL {
    return _lib._objc_msgSend_10(_id, _lib._sel_isFileURL1);
  }

  NSObject? get standardizedURL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_standardizedURL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool checkResourceIsReachableAndReturnError(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_checkResourceIsReachableAndReturnError_1, error);
  }

  bool isFileReferenceURL() {
    return _lib._objc_msgSend_10(_id, _lib._sel_isFileReferenceURL1);
  }

  NSURL fileReferenceURL() {
    final _ret = _lib._objc_msgSend_279(_id, _lib._sel_fileReferenceURL1);
    return NSURL._(_ret, _lib);
  }

  NSObject? get filePathURL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_filePathURL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  bool getResourceValue_forKey_error(ffi.Pointer<ffi.Pointer<ObjCObject>> value,
      NSURLResourceKey key, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_280(
        _id, _lib._sel_getResourceValue_forKey_error_1, value, key, error);
  }

  bool setResourceValue_forKey_error(NSObject value, NSURLResourceKey key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_281(
        _id, _lib._sel_setResourceValue_forKey_error_1, value._id, key, error);
  }

  bool setResourceValues_error(
      NSObject? keyedValues, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_87(_id, _lib._sel_setResourceValues_error_1,
        keyedValues?._id ?? ffi.nullptr, error);
  }

  void removeCachedResourceValueForKey(NSURLResourceKey key) {
    _lib._objc_msgSend_8(_id, _lib._sel_removeCachedResourceValueForKey_1, key);
  }

  void removeAllCachedResourceValues() {
    _lib._objc_msgSend_0(_id, _lib._sel_removeAllCachedResourceValues1);
  }

  void setTemporaryResourceValue_forKey(NSObject value, NSURLResourceKey key) {
    _lib._objc_msgSend_101(
        _id, _lib._sel_setTemporaryResourceValue_forKey_1, value._id, key);
  }

  NSData
      bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error(
          int options,
          NSObject? keys,
          NSObject? relativeURL,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_282(
        _id,
        _lib._sel_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_1,
        options,
        keys?._id ?? ffi.nullptr,
        relativeURL?._id ?? ffi.nullptr,
        error);
    return NSData._(_ret, _lib);
  }

  NSURL
      initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(
          NSObject? bookmarkData,
          int options,
          NSObject? relativeURL,
          ffi.Pointer<ffi.Uint8> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_283(
        _id,
        _lib._sel_initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
        bookmarkData?._id ?? ffi.nullptr,
        options,
        relativeURL?._id ?? ffi.nullptr,
        isStale,
        error);
    return NSURL._(_ret, _lib);
  }

  static NSURL
      URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(
          NativeLibrary _lib,
          NSObject? bookmarkData,
          int options,
          NSObject? relativeURL,
          ffi.Pointer<ffi.Uint8> isStale,
          ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_283(
        _lib._class_NSURL1,
        _lib._sel_URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_1,
        bookmarkData?._id ?? ffi.nullptr,
        options,
        relativeURL?._id ?? ffi.nullptr,
        isStale,
        error);
    return NSURL._(_ret, _lib);
  }

  static bool writeBookmarkData_toURL_options_error(
      NativeLibrary _lib,
      NSObject? bookmarkData,
      NSObject? bookmarkFileURL,
      int options,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_284(
        _lib._class_NSURL1,
        _lib._sel_writeBookmarkData_toURL_options_error_1,
        bookmarkData?._id ?? ffi.nullptr,
        bookmarkFileURL?._id ?? ffi.nullptr,
        options,
        error);
  }

  static NSData bookmarkDataWithContentsOfURL_error(NativeLibrary _lib,
      NSObject? bookmarkFileURL, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_285(
        _lib._class_NSURL1,
        _lib._sel_bookmarkDataWithContentsOfURL_error_1,
        bookmarkFileURL?._id ?? ffi.nullptr,
        error);
    return NSData._(_ret, _lib);
  }

  static NSURL URLByResolvingAliasFileAtURL_options_error(NativeLibrary _lib,
      NSObject? url, int options, ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    final _ret = _lib._objc_msgSend_286(
        _lib._class_NSURL1,
        _lib._sel_URLByResolvingAliasFileAtURL_options_error_1,
        url?._id ?? ffi.nullptr,
        options,
        error);
    return NSURL._(_ret, _lib);
  }

  bool startAccessingSecurityScopedResource() {
    return _lib._objc_msgSend_10(
        _id, _lib._sel_startAccessingSecurityScopedResource1);
  }

  void stopAccessingSecurityScopedResource() {
    _lib._objc_msgSend_0(_id, _lib._sel_stopAccessingSecurityScopedResource1);
  }

  bool getPromisedItemResourceValue_forKey_error(
      ffi.Pointer<ffi.Pointer<ObjCObject>> value,
      NSURLResourceKey key,
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_280(
        _id,
        _lib._sel_getPromisedItemResourceValue_forKey_error_1,
        value,
        key,
        error);
  }

  bool checkPromisedItemIsReachableAndReturnError(
      ffi.Pointer<ffi.Pointer<ObjCObject>> error) {
    return _lib._objc_msgSend_278(
        _id, _lib._sel_checkPromisedItemIsReachableAndReturnError_1, error);
  }

  static NSURL fileURLWithPathComponents(
      NativeLibrary _lib, NSObject? components) {
    final _ret = _lib._objc_msgSend_274(_lib._class_NSURL1,
        _lib._sel_fileURLWithPathComponents_1, components?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSObject? get pathComponents {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_pathComponents1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get lastPathComponent {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_lastPathComponent1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get pathExtension {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_pathExtension1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSURL URLByAppendingPathComponent(NSObject? pathComponent) {
    final _ret = _lib._objc_msgSend_274(
        _id,
        _lib._sel_URLByAppendingPathComponent_1,
        pathComponent?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSURL URLByAppendingPathComponent_isDirectory(
      NSObject? pathComponent, bool isDirectory) {
    final _ret = _lib._objc_msgSend_273(
        _id,
        _lib._sel_URLByAppendingPathComponent_isDirectory_1,
        pathComponent?._id ?? ffi.nullptr,
        isDirectory);
    return NSURL._(_ret, _lib);
  }

  NSObject? get URLByDeletingLastPathComponent {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_URLByDeletingLastPathComponent1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSURL URLByAppendingPathExtension(NSObject? pathExtension) {
    final _ret = _lib._objc_msgSend_274(
        _id,
        _lib._sel_URLByAppendingPathExtension_1,
        pathExtension?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSObject? get URLByDeletingPathExtension {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_URLByDeletingPathExtension1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get URLByStandardizingPath {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_URLByStandardizingPath1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get URLByResolvingSymlinksInPath {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_URLByResolvingSymlinksInPath1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSData resourceDataUsingCache(bool shouldUseCache) {
    final _ret = _lib._objc_msgSend_287(
        _id, _lib._sel_resourceDataUsingCache_1, shouldUseCache);
    return NSData._(_ret, _lib);
  }

  void loadResourceDataNotifyingClient_usingCache(
      NSObject client, bool shouldUseCache) {
    _lib._objc_msgSend_267(
        _id,
        _lib._sel_loadResourceDataNotifyingClient_usingCache_1,
        client._id,
        shouldUseCache);
  }

  NSObject propertyForKey(NSObject? propertyKey) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_propertyForKey_1, propertyKey?._id ?? ffi.nullptr);
    return NSObject._(_ret, _lib);
  }

  bool setResourceData(NSObject? data) {
    return _lib._objc_msgSend_4(
        _id, _lib._sel_setResourceData_1, data?._id ?? ffi.nullptr);
  }

  bool setProperty_forKey(NSObject property, NSObject? propertyKey) {
    return _lib._objc_msgSend_269(_id, _lib._sel_setProperty_forKey_1,
        property._id, propertyKey?._id ?? ffi.nullptr);
  }

  NSURLHandle URLHandleUsingCache(bool shouldUseCache) {
    final _ret = _lib._objc_msgSend_288(
        _id, _lib._sel_URLHandleUsingCache_1, shouldUseCache);
    return NSURLHandle._(_ret, _lib);
  }

  static NSURL new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSURL1, _lib._sel_new1);
    return NSURL._(_ret, _lib);
  }

  static NSURL alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSURL1, _lib._sel_alloc1);
    return NSURL._(_ret, _lib);
  }
}

typedef NSURLResourceKey = ffi.Pointer<ObjCObject>;

abstract class NSURLBookmarkCreationOptions {
  static const int NSURLBookmarkCreationPreferFileIDResolution = 256;
  static const int NSURLBookmarkCreationMinimalBookmark = 512;
  static const int NSURLBookmarkCreationSuitableForBookmarkFile = 1024;
  static const int NSURLBookmarkCreationWithSecurityScope = 2048;
  static const int NSURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;
}

abstract class NSURLBookmarkResolutionOptions {
  static const int NSURLBookmarkResolutionWithoutUI = 256;
  static const int NSURLBookmarkResolutionWithoutMounting = 512;
  static const int NSURLBookmarkResolutionWithSecurityScope = 1024;
}

typedef NSURLBookmarkFileCreationOptions = NSUInteger;
typedef NSURLFileResourceType = ffi.Pointer<ObjCObject>;
typedef NSURLThumbnailDictionaryItem = ffi.Pointer<ObjCObject>;
typedef NSURLFileProtectionType = ffi.Pointer<ObjCObject>;
typedef NSURLUbiquitousItemDownloadingStatus = ffi.Pointer<ObjCObject>;
typedef NSURLUbiquitousSharedItemRole = ffi.Pointer<ObjCObject>;
typedef NSURLUbiquitousSharedItemPermissions = ffi.Pointer<ObjCObject>;

class NSURLQueryItem extends NSObject {
  NSURLQueryItem._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLQueryItem castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLQueryItem._(other._id, other._lib);
  }

  static NSURLQueryItem castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLQueryItem._(other, lib);
  }

  NSURLQueryItem initWithName_value(NSObject? name, NSObject? value) {
    final _ret = _lib._objc_msgSend_75(_id, _lib._sel_initWithName_value_1,
        name?._id ?? ffi.nullptr, value?._id ?? ffi.nullptr);
    return NSURLQueryItem._(_ret, _lib);
  }

  static NSURLQueryItem queryItemWithName_value(
      NativeLibrary _lib, NSObject? name, NSObject? value) {
    final _ret = _lib._objc_msgSend_75(
        _lib._class_NSURLQueryItem1,
        _lib._sel_queryItemWithName_value_1,
        name?._id ?? ffi.nullptr,
        value?._id ?? ffi.nullptr);
    return NSURLQueryItem._(_ret, _lib);
  }

  NSObject? get name {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_name1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get value {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_value1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSURLQueryItem new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLQueryItem1, _lib._sel_new1);
    return NSURLQueryItem._(_ret, _lib);
  }

  static NSURLQueryItem alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLQueryItem1, _lib._sel_alloc1);
    return NSURLQueryItem._(_ret, _lib);
  }
}

class NSURLComponents extends NSObject {
  NSURLComponents._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLComponents castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLComponents._(other._id, other._lib);
  }

  static NSURLComponents castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLComponents._(other, lib);
  }

  @override
  NSURLComponents init() {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_init1);
    return NSURLComponents._(_ret, _lib);
  }

  NSURLComponents initWithURL_resolvingAgainstBaseURL(
      NSObject? url, bool resolve) {
    final _ret = _lib._objc_msgSend_92(
        _id,
        _lib._sel_initWithURL_resolvingAgainstBaseURL_1,
        url?._id ?? ffi.nullptr,
        resolve);
    return NSURLComponents._(_ret, _lib);
  }

  static NSURLComponents componentsWithURL_resolvingAgainstBaseURL(
      NativeLibrary _lib, NSObject? url, bool resolve) {
    final _ret = _lib._objc_msgSend_92(
        _lib._class_NSURLComponents1,
        _lib._sel_componentsWithURL_resolvingAgainstBaseURL_1,
        url?._id ?? ffi.nullptr,
        resolve);
    return NSURLComponents._(_ret, _lib);
  }

  NSURLComponents initWithString(NSObject? URLString) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithString_1, URLString?._id ?? ffi.nullptr);
    return NSURLComponents._(_ret, _lib);
  }

  static NSURLComponents componentsWithString(
      NativeLibrary _lib, NSObject? URLString) {
    final _ret = _lib._objc_msgSend_47(_lib._class_NSURLComponents1,
        _lib._sel_componentsWithString_1, URLString?._id ?? ffi.nullptr);
    return NSURLComponents._(_ret, _lib);
  }

  NSObject? get URL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_URL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSURL URLRelativeToURL(NSObject? baseURL) {
    final _ret = _lib._objc_msgSend_274(
        _id, _lib._sel_URLRelativeToURL_1, baseURL?._id ?? ffi.nullptr);
    return NSURL._(_ret, _lib);
  }

  NSObject? get string {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_string1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get scheme {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_scheme1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set scheme(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setScheme_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get user {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_user1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set user(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setUser_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get password {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_password1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set password(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setPassword_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get host {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_host1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set host(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setHost_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get port {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_port1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set port(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setPort_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get path {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_path1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set path(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setPath_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get query {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_query1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set query(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setQuery_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get fragment {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_fragment1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set fragment(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setFragment_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get percentEncodedUser {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_percentEncodedUser1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set percentEncodedUser(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setPercentEncodedUser_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get percentEncodedPassword {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_percentEncodedPassword1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set percentEncodedPassword(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setPercentEncodedPassword_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get percentEncodedHost {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_percentEncodedHost1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set percentEncodedHost(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setPercentEncodedHost_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get percentEncodedPath {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_percentEncodedPath1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set percentEncodedPath(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setPercentEncodedPath_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get percentEncodedQuery {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_percentEncodedQuery1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set percentEncodedQuery(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setPercentEncodedQuery_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get percentEncodedFragment {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_percentEncodedFragment1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set percentEncodedFragment(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setPercentEncodedFragment_1, value?._id ?? ffi.nullptr);
  }

  NSRange get rangeOfScheme {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfScheme1);
  }

  NSRange get rangeOfUser {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfUser1);
  }

  NSRange get rangeOfPassword {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfPassword1);
  }

  NSRange get rangeOfHost {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfHost1);
  }

  NSRange get rangeOfPort {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfPort1);
  }

  NSRange get rangeOfPath {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfPath1);
  }

  NSRange get rangeOfQuery {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfQuery1);
  }

  NSRange get rangeOfFragment {
    return _lib._objc_msgSend_109(_id, _lib._sel_rangeOfFragment1);
  }

  NSObject? get queryItems {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_queryItems1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set queryItems(NSObject? value) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_setQueryItems_1, value?._id ?? ffi.nullptr);
  }

  NSObject? get percentEncodedQueryItems {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_percentEncodedQueryItems1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set percentEncodedQueryItems(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setPercentEncodedQueryItems_1,
        value?._id ?? ffi.nullptr);
  }

  static NSURLComponents new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLComponents1, _lib._sel_new1);
    return NSURLComponents._(_ret, _lib);
  }

  static NSURLComponents alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLComponents1, _lib._sel_alloc1);
    return NSURLComponents._(_ret, _lib);
  }
}

class NSFileSecurity extends NSObject {
  NSFileSecurity._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSFileSecurity castFrom<T extends _ObjCWrapper>(T other) {
    return NSFileSecurity._(other._id, other._lib);
  }

  static NSFileSecurity castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSFileSecurity._(other, lib);
  }

  NSFileSecurity initWithCoder(NSObject? coder) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithCoder_1, coder?._id ?? ffi.nullptr);
    return NSFileSecurity._(_ret, _lib);
  }

  static NSFileSecurity new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSFileSecurity1, _lib._sel_new1);
    return NSFileSecurity._(_ret, _lib);
  }

  static NSFileSecurity alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSFileSecurity1, _lib._sel_alloc1);
    return NSFileSecurity._(_ret, _lib);
  }
}

/// !
/// @class NSURLResponse
///
/// @abstract An NSURLResponse object represents a URL load response in a
/// manner independent of protocol and URL scheme.
///
/// @discussion NSURLResponse encapsulates the metadata associated
/// with a URL load. Note that NSURLResponse objects do not contain
/// the actual bytes representing the content of a URL. See
/// NSURLConnection and NSURLConnectionDelegate for more information
/// about receiving the content data for a URL load.
class NSURLResponse extends NSObject {
  NSURLResponse._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSURLResponse castFrom<T extends _ObjCWrapper>(T other) {
    return NSURLResponse._(other._id, other._lib);
  }

  static NSURLResponse castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSURLResponse._(other, lib);
  }

  /// !
  /// @method initWithURL:MIMEType:expectedContentLength:textEncodingName:
  /// @abstract Initialize an NSURLResponse with the provided values.
  /// @param URL the URL
  /// @param MIMEType the MIME content type of the response
  /// @param length the expected content length of the associated data
  /// @param name the name of the text encoding for the associated data, if applicable, else nil
  /// @result The initialized NSURLResponse.
  /// @discussion This is the designated initializer for NSURLResponse.
  NSURLResponse initWithURL_MIMEType_expectedContentLength_textEncodingName(
      NSObject? URL, NSObject? MIMEType, int length, NSObject? name) {
    final _ret = _lib._objc_msgSend_289(
        _id,
        _lib._sel_initWithURL_MIMEType_expectedContentLength_textEncodingName_1,
        URL?._id ?? ffi.nullptr,
        MIMEType?._id ?? ffi.nullptr,
        length,
        name?._id ?? ffi.nullptr);
    return NSURLResponse._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the URL of the receiver.
  /// @result The URL of the receiver.
  NSObject? get URL {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_URL1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the MIME type of the receiver.
  /// @discussion The MIME type is based on the information provided
  /// from an origin source. However, that value may be changed or
  /// corrected by a protocol implementation if it can be determined
  /// that the origin server or source reported the information
  /// incorrectly or imprecisely. An attempt to guess the MIME type may
  /// be made if the origin source did not report any such information.
  /// @result The MIME type of the receiver.
  NSObject? get MIMEType {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_MIMEType1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the expected content length of the receiver.
  /// @discussion Some protocol implementations report a content length
  /// as part of delivering load metadata, but not all protocols
  /// guarantee the amount of data that will be delivered in actuality.
  /// Hence, this method returns an expected amount. Clients should use
  /// this value as an advisory, and should be prepared to deal with
  /// either more or less data.
  /// @result The expected content length of the receiver, or -1 if
  /// there is no expectation that can be arrived at regarding expected
  /// content length.
  int get expectedContentLength {
    return _lib._objc_msgSend_31(_id, _lib._sel_expectedContentLength1);
  }

  /// !
  /// @abstract Returns the name of the text encoding of the receiver.
  /// @discussion This name will be the actual string reported by the
  /// origin source during the course of performing a protocol-specific
  /// URL load. Clients can inspect this string and convert it to an
  /// NSStringEncoding or CFStringEncoding using the methods and
  /// functions made available in the appropriate framework.
  /// @result The name of the text encoding of the receiver, or nil if no
  /// text encoding was specified.
  NSObject? get textEncodingName {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_textEncodingName1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @abstract Returns a suggested filename if the resource were saved to disk.
  /// @discussion The method first checks if the server has specified a filename using the
  /// content disposition header. If no valid filename is specified using that mechanism,
  /// this method checks the last path component of the URL. If no valid filename can be
  /// obtained using the last path component, this method uses the URL's host as the filename.
  /// If the URL's host can't be converted to a valid filename, the filename "unknown" is used.
  /// In mose cases, this method appends the proper file extension based on the MIME type.
  /// This method always returns a valid filename.
  /// @result A suggested filename to use if saving the resource to disk.
  NSObject? get suggestedFilename {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_suggestedFilename1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSURLResponse new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLResponse1, _lib._sel_new1);
    return NSURLResponse._(_ret, _lib);
  }

  static NSURLResponse alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSURLResponse1, _lib._sel_alloc1);
    return NSURLResponse._(_ret, _lib);
  }
}

/// !
/// @class NSHTTPURLResponse
///
/// @abstract An NSHTTPURLResponse object represents a response to an
/// HTTP URL load. It is a specialization of NSURLResponse which
/// provides conveniences for accessing information specific to HTTP
/// protocol responses.
class NSHTTPURLResponse extends NSURLResponse {
  NSHTTPURLResponse._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSHTTPURLResponse castFrom<T extends _ObjCWrapper>(T other) {
    return NSHTTPURLResponse._(other._id, other._lib);
  }

  static NSHTTPURLResponse castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSHTTPURLResponse._(other, lib);
  }

  /// !
  /// @method	initWithURL:statusCode:HTTPVersion:headerFields:
  /// @abstract initializer for NSHTTPURLResponse objects.
  /// @param 	url the URL from which the response was generated.
  /// @param	statusCode an HTTP status code.
  /// @param	HTTPVersion The version of the HTTP response as represented by the server.  This is typically represented as "HTTP/1.1".
  /// @param 	headerFields A dictionary representing the header keys and values of the server response.
  /// @result 	the instance of the object, or NULL if an error occurred during initialization.
  /// @discussion This API was introduced in Mac OS X 10.7.2 and iOS 5.0 and is not available prior to those releases.
  NSHTTPURLResponse initWithURL_statusCode_HTTPVersion_headerFields(
      NSObject? url,
      int statusCode,
      NSObject? HTTPVersion,
      NSObject? headerFields) {
    final _ret = _lib._objc_msgSend_290(
        _id,
        _lib._sel_initWithURL_statusCode_HTTPVersion_headerFields_1,
        url?._id ?? ffi.nullptr,
        statusCode,
        HTTPVersion?._id ?? ffi.nullptr,
        headerFields?._id ?? ffi.nullptr);
    return NSHTTPURLResponse._(_ret, _lib);
  }

  /// !
  /// @abstract Returns the HTTP status code of the receiver.
  /// @result The HTTP status code of the receiver.
  int get statusCode {
    return _lib._objc_msgSend_30(_id, _lib._sel_statusCode1);
  }

  /// !
  /// @abstract Returns a dictionary containing all the HTTP header fields
  /// of the receiver.
  /// @discussion By examining this header dictionary, clients can see
  /// the "raw" header information which was reported to the protocol
  /// implementation by the HTTP server. This may be of use to
  /// sophisticated or special-purpose HTTP clients.
  /// @result A dictionary containing all the HTTP header fields of the
  /// receiver.
  NSObject? get allHeaderFields {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_allHeaderFields1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  /// !
  /// @method valueForHTTPHeaderField:
  /// @abstract Returns the value which corresponds to the given header
  /// field. Note that, in keeping with the HTTP RFC, HTTP header field
  /// names are case-insensitive.
  /// @param field the header field name to use for the lookup
  /// (case-insensitive).
  /// @result the value associated with the given header field, or nil if
  /// there is no value associated with the given header field.
  NSString valueForHTTPHeaderField(NSObject? field) {
    final _ret = _lib._objc_msgSend_26(
        _id, _lib._sel_valueForHTTPHeaderField_1, field?._id ?? ffi.nullptr);
    return NSString._(_ret, _lib);
  }

  /// !
  /// @method localizedStringForStatusCode:
  /// @abstract Convenience method which returns a localized string
  /// corresponding to the status code for this response.
  /// @param statusCode the status code to use to produce a localized string.
  /// @result A localized string corresponding to the given status code.
  static NSString localizedStringForStatusCode(
      NativeLibrary _lib, int statusCode) {
    final _ret = _lib._objc_msgSend_291(_lib._class_NSHTTPURLResponse1,
        _lib._sel_localizedStringForStatusCode_1, statusCode);
    return NSString._(_ret, _lib);
  }

  static NSHTTPURLResponse new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSHTTPURLResponse1, _lib._sel_new1);
    return NSHTTPURLResponse._(_ret, _lib);
  }

  static NSHTTPURLResponse alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSHTTPURLResponse1, _lib._sel_alloc1);
    return NSHTTPURLResponse._(_ret, _lib);
  }
}

class NSException extends NSObject {
  NSException._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSException castFrom<T extends _ObjCWrapper>(T other) {
    return NSException._(other._id, other._lib);
  }

  static NSException castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSException._(other, lib);
  }

  static NSException exceptionWithName_reason_userInfo(NativeLibrary _lib,
      NSExceptionName name, NSObject? reason, NSObject? userInfo) {
    final _ret = _lib._objc_msgSend_292(
        _lib._class_NSException1,
        _lib._sel_exceptionWithName_reason_userInfo_1,
        name,
        reason?._id ?? ffi.nullptr,
        userInfo?._id ?? ffi.nullptr);
    return NSException._(_ret, _lib);
  }

  NSException initWithName_reason_userInfo(
      NSExceptionName aName, NSObject? aReason, NSObject? aUserInfo) {
    final _ret = _lib._objc_msgSend_182(
        _id,
        _lib._sel_initWithName_reason_userInfo_1,
        aName,
        aReason?._id ?? ffi.nullptr,
        aUserInfo?._id ?? ffi.nullptr);
    return NSException._(_ret, _lib);
  }

  NSExceptionName get name {
    return _lib._objc_msgSend_1(_id, _lib._sel_name1);
  }

  NSObject? get reason {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_reason1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_userInfo1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get callStackReturnAddresses {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_callStackReturnAddresses1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get callStackSymbols {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_callStackSymbols1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  void raise() {
    _lib._objc_msgSend_0(_id, _lib._sel_raise1);
  }

  static void raise_format(
      NativeLibrary _lib, NSExceptionName name, NSObject? format) {
    _lib._objc_msgSend_101(_lib._class_NSException1, _lib._sel_raise_format_1,
        name, format?._id ?? ffi.nullptr);
  }

  static void raise_format_arguments(NativeLibrary _lib, NSExceptionName name,
      NSObject? format, va_list argList) {
    _lib._objc_msgSend_293(
        _lib._class_NSException1,
        _lib._sel_raise_format_arguments_1,
        name,
        format?._id ?? ffi.nullptr,
        argList);
  }

  static NSException new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSException1, _lib._sel_new1);
    return NSException._(_ret, _lib);
  }

  static NSException alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSException1, _lib._sel_alloc1);
    return NSException._(_ret, _lib);
  }
}

typedef NSUncaughtExceptionHandler
    = ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ObjCObject>)>;

class NSAssertionHandler extends NSObject {
  NSAssertionHandler._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSAssertionHandler castFrom<T extends _ObjCWrapper>(T other) {
    return NSAssertionHandler._(other._id, other._lib);
  }

  static NSAssertionHandler castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSAssertionHandler._(other, lib);
  }

  static NSObject? getCurrentHandler(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSAssertionHandler1, _lib._sel_currentHandler1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  void handleFailureInMethod_object_file_lineNumber_description(
      ffi.Pointer<ObjCSel> selector,
      NSObject object,
      NSObject? fileName,
      int line,
      NSObject? format) {
    _lib._objc_msgSend_294(
        _id,
        _lib._sel_handleFailureInMethod_object_file_lineNumber_description_1,
        selector,
        object._id,
        fileName?._id ?? ffi.nullptr,
        line,
        format?._id ?? ffi.nullptr);
  }

  void handleFailureInFunction_file_lineNumber_description(
      NSObject? functionName, NSObject? fileName, int line, NSObject? format) {
    _lib._objc_msgSend_295(
        _id,
        _lib._sel_handleFailureInFunction_file_lineNumber_description_1,
        functionName?._id ?? ffi.nullptr,
        fileName?._id ?? ffi.nullptr,
        line,
        format?._id ?? ffi.nullptr);
  }

  static NSAssertionHandler new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSAssertionHandler1, _lib._sel_new1);
    return NSAssertionHandler._(_ret, _lib);
  }

  static NSAssertionHandler alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSAssertionHandler1, _lib._sel_alloc1);
    return NSAssertionHandler._(_ret, _lib);
  }
}

class NSOperation extends NSObject {
  NSOperation._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSOperation castFrom<T extends _ObjCWrapper>(T other) {
    return NSOperation._(other._id, other._lib);
  }

  static NSOperation castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSOperation._(other, lib);
  }

  void start() {
    _lib._objc_msgSend_0(_id, _lib._sel_start1);
  }

  void main() {
    _lib._objc_msgSend_0(_id, _lib._sel_main1);
  }

  bool get cancelled {
    return _lib._objc_msgSend_10(_id, _lib._sel_isCancelled1);
  }

  void cancel() {
    _lib._objc_msgSend_0(_id, _lib._sel_cancel1);
  }

  bool get executing {
    return _lib._objc_msgSend_10(_id, _lib._sel_isExecuting1);
  }

  bool get finished {
    return _lib._objc_msgSend_10(_id, _lib._sel_isFinished1);
  }

  bool get concurrent {
    return _lib._objc_msgSend_10(_id, _lib._sel_isConcurrent1);
  }

  bool get asynchronous {
    return _lib._objc_msgSend_10(_id, _lib._sel_isAsynchronous1);
  }

  bool get ready {
    return _lib._objc_msgSend_10(_id, _lib._sel_isReady1);
  }

  void addDependency(NSObject? op) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_addDependency_1, op?._id ?? ffi.nullptr);
  }

  void removeDependency(NSObject? op) {
    _lib._objc_msgSend_8(
        _id, _lib._sel_removeDependency_1, op?._id ?? ffi.nullptr);
  }

  NSObject? get dependencies {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_dependencies1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  int get queuePriority {
    return _lib._objc_msgSend_296(_id, _lib._sel_queuePriority1);
  }

  set queuePriority(int value) {
    _lib._objc_msgSend_297(_id, _lib._sel_setQueuePriority_1, value);
  }

  ObjCBlock13 get completionBlock {
    final _ret = _lib._objc_msgSend_208(_id, _lib._sel_completionBlock1);
    return ObjCBlock13._(_ret, _lib);
  }

  set completionBlock(ObjCBlock13 value) {
    _lib._objc_msgSend_209(_id, _lib._sel_setCompletionBlock_1, value._impl);
  }

  void waitUntilFinished() {
    _lib._objc_msgSend_0(_id, _lib._sel_waitUntilFinished1);
  }

  double get threadPriority {
    return _lib._objc_msgSend_27(_id, _lib._sel_threadPriority1);
  }

  set threadPriority(double value) {
    _lib._objc_msgSend_194(_id, _lib._sel_setThreadPriority_1, value);
  }

  int get qualityOfService {
    return _lib._objc_msgSend_298(_id, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    _lib._objc_msgSend_299(_id, _lib._sel_setQualityOfService_1, value);
  }

  NSObject? get name {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_name1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set name(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setName_1, value?._id ?? ffi.nullptr);
  }

  static NSOperation new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSOperation1, _lib._sel_new1);
    return NSOperation._(_ret, _lib);
  }

  static NSOperation alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSOperation1, _lib._sel_alloc1);
    return NSOperation._(_ret, _lib);
  }
}

abstract class NSOperationQueuePriority {
  static const int NSOperationQueuePriorityVeryLow = -8;
  static const int NSOperationQueuePriorityLow = -4;
  static const int NSOperationQueuePriorityNormal = 0;
  static const int NSOperationQueuePriorityHigh = 4;
  static const int NSOperationQueuePriorityVeryHigh = 8;
}

class NSBlockOperation extends NSOperation {
  NSBlockOperation._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSBlockOperation castFrom<T extends _ObjCWrapper>(T other) {
    return NSBlockOperation._(other._id, other._lib);
  }

  static NSBlockOperation castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSBlockOperation._(other, lib);
  }

  static NSBlockOperation blockOperationWithBlock(
      NativeLibrary _lib, ObjCBlock13 block) {
    final _ret = _lib._objc_msgSend_300(_lib._class_NSBlockOperation1,
        _lib._sel_blockOperationWithBlock_1, block._impl);
    return NSBlockOperation._(_ret, _lib);
  }

  void addExecutionBlock(ObjCBlock13 block) {
    _lib._objc_msgSend_209(_id, _lib._sel_addExecutionBlock_1, block._impl);
  }

  NSObject? get executionBlocks {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_executionBlocks1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSBlockOperation new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSBlockOperation1, _lib._sel_new1);
    return NSBlockOperation._(_ret, _lib);
  }

  static NSBlockOperation alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSBlockOperation1, _lib._sel_alloc1);
    return NSBlockOperation._(_ret, _lib);
  }
}

class NSInvocationOperation extends NSOperation {
  NSInvocationOperation._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSInvocationOperation castFrom<T extends _ObjCWrapper>(T other) {
    return NSInvocationOperation._(other._id, other._lib);
  }

  static NSInvocationOperation castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSInvocationOperation._(other, lib);
  }

  NSInvocationOperation initWithTarget_selector_object(
      NSObject target, ffi.Pointer<ObjCSel> sel, NSObject arg) {
    final _ret = _lib._objc_msgSend_301(_id,
        _lib._sel_initWithTarget_selector_object_1, target._id, sel, arg._id);
    return NSInvocationOperation._(_ret, _lib);
  }

  NSInvocationOperation initWithInvocation(NSObject? inv) {
    final _ret = _lib._objc_msgSend_47(
        _id, _lib._sel_initWithInvocation_1, inv?._id ?? ffi.nullptr);
    return NSInvocationOperation._(_ret, _lib);
  }

  NSObject? get invocation {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_invocation1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject get result {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_result1);
    return NSObject._(_ret, _lib);
  }

  static NSInvocationOperation new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSInvocationOperation1, _lib._sel_new1);
    return NSInvocationOperation._(_ret, _lib);
  }

  static NSInvocationOperation alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSInvocationOperation1, _lib._sel_alloc1);
    return NSInvocationOperation._(_ret, _lib);
  }
}

class NSOperationQueue extends NSObject {
  NSOperationQueue._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static NSOperationQueue castFrom<T extends _ObjCWrapper>(T other) {
    return NSOperationQueue._(other._id, other._lib);
  }

  static NSOperationQueue castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSOperationQueue._(other, lib);
  }

  /// @property progress
  /// @discussion     The `progress` property represents a total progress of the operations executed in the queue. By default NSOperationQueue
  /// does not report progress until the `totalUnitCount` of the progress is set. When the `totalUnitCount` property of the progress is set the
  /// queue then opts into participating in progress reporting. When enabled, each operation will contribute 1 unit of completion to the
  /// overall progress of the queue for operations that are finished by the end of main (operations that override start and do not invoke super
  /// will not contribute to progress). Special attention to race conditions should be made when updating the `totalUnitCount` of the progress
  /// as well as care should be taken to avoid 'backwards progress'. For example; when a NSOperationQueue's progress is 5/10, representing 50%
  /// completed, and there are 90 more operations about to be added and the `totalUnitCount` that would then make the progress report as 5/100
  /// which represents 5%. In this example it would mean that any progress bar would jump from displaying 50% back to 5%, which might not be
  /// desirable. In the cases where the `totalUnitCount` needs to be adjusted it is suggested to do this for thread-safety in a barrier by
  /// using the `addBarrierBlock:` API. This ensures that no un-expected execution state occurs adjusting into a potentially backwards moving
  /// progress scenario.
  ///
  /// @example
  /// NSOperationQueue *queue = [[NSOperationQueue alloc] init];
  /// queue.progress.totalUnitCount = 10;
  NSObject? get progress {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_progress1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  void addOperation(NSObject? op) {
    _lib._objc_msgSend_8(_id, _lib._sel_addOperation_1, op?._id ?? ffi.nullptr);
  }

  void addOperations_waitUntilFinished(NSObject? ops, bool wait) {
    _lib._objc_msgSend_267(_id, _lib._sel_addOperations_waitUntilFinished_1,
        ops?._id ?? ffi.nullptr, wait);
  }

  void addOperationWithBlock(ObjCBlock13 block) {
    _lib._objc_msgSend_209(_id, _lib._sel_addOperationWithBlock_1, block._impl);
  }

  /// @method addBarrierBlock:
  /// @param barrier      A block to execute
  /// @discussion         The `addBarrierBlock:` method executes the block when the NSOperationQueue has finished all enqueued operations and
  /// prevents any subsequent operations to be executed until the barrier has been completed. This acts similarly to the
  /// `dispatch_barrier_async` function.
  void addBarrierBlock(ObjCBlock13 barrier) {
    _lib._objc_msgSend_209(_id, _lib._sel_addBarrierBlock_1, barrier._impl);
  }

  int get maxConcurrentOperationCount {
    return _lib._objc_msgSend_30(_id, _lib._sel_maxConcurrentOperationCount1);
  }

  set maxConcurrentOperationCount(int value) {
    _lib._objc_msgSend_100(
        _id, _lib._sel_setMaxConcurrentOperationCount_1, value);
  }

  bool get suspended {
    return _lib._objc_msgSend_10(_id, _lib._sel_isSuspended1);
  }

  set suspended(bool value) {
    _lib._objc_msgSend_196(_id, _lib._sel_setSuspended_1, value);
  }

  NSObject? get name {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_name1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  set name(NSObject? value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setName_1, value?._id ?? ffi.nullptr);
  }

  int get qualityOfService {
    return _lib._objc_msgSend_298(_id, _lib._sel_qualityOfService1);
  }

  set qualityOfService(int value) {
    _lib._objc_msgSend_299(_id, _lib._sel_setQualityOfService_1, value);
  }

  dispatch_queue_t1 get underlyingQueue {
    return _lib._objc_msgSend_1(_id, _lib._sel_underlyingQueue1);
  }

  set underlyingQueue(dispatch_queue_t1 value) {
    _lib._objc_msgSend_8(_id, _lib._sel_setUnderlyingQueue_1, value);
  }

  void cancelAllOperations() {
    _lib._objc_msgSend_0(_id, _lib._sel_cancelAllOperations1);
  }

  void waitUntilAllOperationsAreFinished() {
    _lib._objc_msgSend_0(_id, _lib._sel_waitUntilAllOperationsAreFinished1);
  }

  static NSObject? getCurrentQueue(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSOperationQueue1, _lib._sel_currentQueue1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static NSObject? getMainQueue(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(
        _lib._class_NSOperationQueue1, _lib._sel_mainQueue1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get operations {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_operations1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  int get operationCount {
    return _lib._objc_msgSend_11(_id, _lib._sel_operationCount1);
  }

  static NSOperationQueue new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSOperationQueue1, _lib._sel_new1);
    return NSOperationQueue._(_ret, _lib);
  }

  static NSOperationQueue alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_NSOperationQueue1, _lib._sel_alloc1);
    return NSOperationQueue._(_ret, _lib);
  }
}

typedef dispatch_queue_t1 = ffi.Pointer<ObjCObject>;
typedef NSErrorDomain = ffi.Pointer<ObjCObject>;
typedef NSErrorUserInfoKey = ffi.Pointer<ObjCObject>;

class NSError extends NSObject {
  NSError._(ffi.Pointer<ObjCObject> id, NativeLibrary lib) : super._(id, lib);

  static NSError castFrom<T extends _ObjCWrapper>(T other) {
    return NSError._(other._id, other._lib);
  }

  static NSError castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return NSError._(other, lib);
  }

  NSError initWithDomain_code_userInfo(
      NSErrorDomain domain, int code, NSObject? dict) {
    final _ret = _lib._objc_msgSend_302(
        _id,
        _lib._sel_initWithDomain_code_userInfo_1,
        domain,
        code,
        dict?._id ?? ffi.nullptr);
    return NSError._(_ret, _lib);
  }

  static NSError errorWithDomain_code_userInfo(
      NativeLibrary _lib, NSErrorDomain domain, int code, NSObject? dict) {
    final _ret = _lib._objc_msgSend_302(
        _lib._class_NSError1,
        _lib._sel_errorWithDomain_code_userInfo_1,
        domain,
        code,
        dict?._id ?? ffi.nullptr);
    return NSError._(_ret, _lib);
  }

  NSErrorDomain get domain {
    return _lib._objc_msgSend_1(_id, _lib._sel_domain1);
  }

  int get code {
    return _lib._objc_msgSend_30(_id, _lib._sel_code1);
  }

  NSObject? get userInfo {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_userInfo1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedDescription {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedDescription1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedFailureReason {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedFailureReason1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedRecoverySuggestion {
    final _ret =
        _lib._objc_msgSend_1(_id, _lib._sel_localizedRecoverySuggestion1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get localizedRecoveryOptions {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_localizedRecoveryOptions1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject get recoveryAttempter {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_recoveryAttempter1);
    return NSObject._(_ret, _lib);
  }

  NSObject? get helpAnchor {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_helpAnchor1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  NSObject? get underlyingErrors {
    final _ret = _lib._objc_msgSend_1(_id, _lib._sel_underlyingErrors1);
    return _ret.address == 0 ? null : NSObject._(_ret, _lib);
  }

  static void setUserInfoValueProviderForDomain_provider(
      NativeLibrary _lib, NSErrorDomain errorDomain, ObjCBlock31 provider) {
    _lib._objc_msgSend_303(
        _lib._class_NSError1,
        _lib._sel_setUserInfoValueProviderForDomain_provider_1,
        errorDomain,
        provider._impl);
  }

  static NSObject userInfoValueProviderForDomain(
      NativeLibrary _lib,
      NSObject? err,
      NSErrorUserInfoKey userInfoKey,
      NSErrorDomain errorDomain) {
    final _ret = _lib._objc_msgSend_182(
        _lib._class_NSError1,
        _lib._sel_userInfoValueProviderForDomain_1,
        err?._id ?? ffi.nullptr,
        userInfoKey,
        errorDomain);
    return NSObject._(_ret, _lib);
  }

  static NSError new1(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSError1, _lib._sel_new1);
    return NSError._(_ret, _lib);
  }

  static NSError alloc(NativeLibrary _lib) {
    final _ret = _lib._objc_msgSend_1(_lib._class_NSError1, _lib._sel_alloc1);
    return NSError._(_ret, _lib);
  }
}

ffi.Pointer<ObjCObject> _ObjCBlock31_fnPtrTrampoline(
    ffi.Pointer<_ObjCBlock> block,
    ffi.Pointer<ObjCObject> arg0,
    NSErrorUserInfoKey arg1) {
  return block.ref.target
      .cast<
          ffi.NativeFunction<
              ffi.Pointer<ObjCObject> Function(
                  ffi.Pointer<ObjCObject> arg0, NSErrorUserInfoKey arg1)>>()
      .asFunction<
          ffi.Pointer<ObjCObject> Function(ffi.Pointer<ObjCObject> arg0,
              NSErrorUserInfoKey arg1)>()(arg0, arg1);
}

class ObjCBlock31 {
  final ffi.Pointer<_ObjCBlock> _impl;
  final NativeLibrary _lib;
  ObjCBlock31._(this._impl, this._lib);

  ObjCBlock31.fromFunctionPointer(
      this._lib,
      ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ObjCObject> Function(
                      ffi.Pointer<ObjCObject> arg0, NSErrorUserInfoKey arg1)>>
          ptr)
      : _impl = _lib._newBlock1(
            ffi.Pointer.fromFunction<
                    ffi.Pointer<ObjCObject> Function(
                        ffi.Pointer<_ObjCBlock> block,
                        ffi.Pointer<ObjCObject> arg0,
                        NSErrorUserInfoKey arg1)>(_ObjCBlock31_fnPtrTrampoline)
                .cast(),
            ptr.cast());
  ffi.Pointer<_ObjCBlock> get pointer => _impl;
}

class _Dart_Isolate extends ffi.Opaque {}

class _Dart_IsolateGroup extends ffi.Opaque {}

class _Dart_Handle extends ffi.Opaque {}

class _Dart_WeakPersistentHandle extends ffi.Opaque {}

class _Dart_FinalizableHandle extends ffi.Opaque {}

typedef Dart_WeakPersistentHandle = ffi.Pointer<_Dart_WeakPersistentHandle>;
typedef Dart_HandleFinalizer = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef Dart_FinalizableHandle = ffi.Pointer<_Dart_FinalizableHandle>;

class Dart_IsolateFlags extends ffi.Struct {
  @ffi.Int32()
  external int version;

  @ffi.Uint8()
  external int enable_asserts;

  @ffi.Uint8()
  external int use_field_guards;

  @ffi.Uint8()
  external int use_osr;

  @ffi.Uint8()
  external int obfuscate;

  @ffi.Uint8()
  external int load_vmservice_library;

  @ffi.Uint8()
  external int copy_parent_code;

  @ffi.Uint8()
  external int null_safety;

  @ffi.Uint8()
  external int is_system_isolate;
}

/// Forward declaration
class Dart_CodeObserver extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external Dart_OnNewCodeCallback on_new_code;
}

/// Callback provided by the embedder that is used by the VM to notify on code
/// object creation, *before* it is invoked the first time.
/// This is useful for embedders wanting to e.g. keep track of PCs beyond
/// the lifetime of the garbage collected code objects.
/// Note that an address range may be used by more than one code object over the
/// lifecycle of a process. Clients of this function should record timestamps for
/// these compilation events and when collecting PCs to disambiguate reused
/// address ranges.
typedef Dart_OnNewCodeCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<Dart_CodeObserver>,
            ffi.Pointer<pkg_ffi.Char>, uintptr_t, uintptr_t)>>;
typedef uintptr_t = pkg_ffi.UnsignedLong;

/// Describes how to initialize the VM. Used with Dart_Initialize.
///
/// \param version Identifies the version of the struct used by the client.
/// should be initialized to DART_INITIALIZE_PARAMS_CURRENT_VERSION.
/// \param vm_isolate_snapshot A buffer containing a snapshot of the VM isolate
/// or NULL if no snapshot is provided. If provided, the buffer must remain
/// valid until Dart_Cleanup returns.
/// \param instructions_snapshot A buffer containing a snapshot of precompiled
/// instructions, or NULL if no snapshot is provided. If provided, the buffer
/// must remain valid until Dart_Cleanup returns.
/// \param initialize_isolate A function to be called during isolate
/// initialization inside an existing isolate group.
/// See Dart_InitializeIsolateCallback.
/// \param create_group A function to be called during isolate group creation.
/// See Dart_IsolateGroupCreateCallback.
/// \param shutdown A function to be called right before an isolate is shutdown.
/// See Dart_IsolateShutdownCallback.
/// \param cleanup A function to be called after an isolate was shutdown.
/// See Dart_IsolateCleanupCallback.
/// \param cleanup_group A function to be called after an isolate group is shutdown.
/// See Dart_IsolateGroupCleanupCallback.
/// \param get_service_assets A function to be called by the service isolate when
/// it requires the vmservice assets archive.
/// See Dart_GetVMServiceAssetsArchive.
/// \param code_observer An external code observer callback function.
/// The observer can be invoked as early as during the Dart_Initialize() call.
class Dart_InitializeParams extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_data;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_instructions;

  external Dart_IsolateGroupCreateCallback create_group;

  external Dart_InitializeIsolateCallback initialize_isolate;

  external Dart_IsolateShutdownCallback shutdown_isolate;

  external Dart_IsolateCleanupCallback cleanup_isolate;

  external Dart_IsolateGroupCleanupCallback cleanup_group;

  external Dart_ThreadExitCallback thread_exit;

  external Dart_FileOpenCallback file_open;

  external Dart_FileReadCallback file_read;

  external Dart_FileWriteCallback file_write;

  external Dart_FileCloseCallback file_close;

  external Dart_EntropySource entropy_source;

  external Dart_GetVMServiceAssetsArchive get_service_assets;

  @ffi.Uint8()
  external int start_kernel_isolate;

  external ffi.Pointer<Dart_CodeObserver> code_observer;
}

/// An isolate creation and initialization callback function.
///
/// This callback, provided by the embedder, is called when the VM
/// needs to create an isolate. The callback should create an isolate
/// by calling Dart_CreateIsolateGroup and load any scripts required for
/// execution.
///
/// This callback may be called on a different thread than the one
/// running the parent isolate.
///
/// When the function returns NULL, it is the responsibility of this
/// function to ensure that Dart_ShutdownIsolate has been called if
/// required (for example, if the isolate was created successfully by
/// Dart_CreateIsolateGroup() but the root library fails to load
/// successfully, then the function should call Dart_ShutdownIsolate
/// before returning).
///
/// When the function returns NULL, the function should set *error to
/// a malloc-allocated buffer containing a useful error message.  The
/// caller of this function (the VM) will make sure that the buffer is
/// freed.
///
/// \param script_uri The uri of the main source file or snapshot to load.
/// Either the URI of the parent isolate set in Dart_CreateIsolateGroup for
/// Isolate.spawn, or the argument to Isolate.spawnUri canonicalized by the
/// library tag handler of the parent isolate.
/// The callback is responsible for loading the program by a call to
/// Dart_LoadScriptFromKernel.
/// \param main The name of the main entry point this isolate will
/// eventually run.  This is provided for advisory purposes only to
/// improve debugging messages.  The main function is not invoked by
/// this function.
/// \param package_root Ignored.
/// \param package_config Uri of the package configuration file (either in format
/// of .packages or .dart_tool/package_config.json) for this isolate
/// to resolve package imports against. If this parameter is not passed the
/// package resolution of the parent isolate should be used.
/// \param flags Default flags for this isolate being spawned. Either inherited
/// from the spawning isolate or passed as parameters when spawning the
/// isolate from Dart code.
/// \param isolate_data The isolate data which was passed to the
/// parent isolate when it was created by calling Dart_CreateIsolateGroup().
/// \param error A structure into which the embedder can place a
/// C string containing an error message in the case of failures.
///
/// \return The embedder returns NULL if the creation and
/// initialization was not successful and the isolate if successful.
typedef Dart_IsolateGroupCreateCallback = ffi.Pointer<
    ffi.NativeFunction<
        Dart_Isolate Function(
            ffi.Pointer<pkg_ffi.Char>,
            ffi.Pointer<pkg_ffi.Char>,
            ffi.Pointer<pkg_ffi.Char>,
            ffi.Pointer<pkg_ffi.Char>,
            ffi.Pointer<Dart_IsolateFlags>,
            ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>;

/// An isolate is the unit of concurrency in Dart. Each isolate has
/// its own memory and thread of control. No state is shared between
/// isolates. Instead, isolates communicate by message passing.
///
/// Each thread keeps track of its current isolate, which is the
/// isolate which is ready to execute on the current thread. The
/// current isolate may be NULL, in which case no isolate is ready to
/// execute. Most of the Dart apis require there to be a current
/// isolate in order to function without error. The current isolate is
/// set by any call to Dart_CreateIsolateGroup or Dart_EnterIsolate.
typedef Dart_Isolate = ffi.Pointer<_Dart_Isolate>;

/// An isolate initialization callback function.
///
/// This callback, provided by the embedder, is called when the VM has created an
/// isolate within an existing isolate group (i.e. from the same source as an
/// existing isolate).
///
/// The callback should setup native resolvers and might want to set a custom
/// message handler via [Dart_SetMessageNotifyCallback] and mark the isolate as
/// runnable.
///
/// This callback may be called on a different thread than the one
/// running the parent isolate.
///
/// When the function returns `false`, it is the responsibility of this
/// function to ensure that `Dart_ShutdownIsolate` has been called.
///
/// When the function returns `false`, the function should set *error to
/// a malloc-allocated buffer containing a useful error message.  The
/// caller of this function (the VM) will make sure that the buffer is
/// freed.
///
/// \param child_isolate_data The callback data to associate with the new
/// child isolate.
/// \param error A structure into which the embedder can place a
/// C string containing an error message in the case the initialization fails.
///
/// \return The embedder returns true if the initialization was successful and
/// false otherwise (in which case the VM will terminate the isolate).
typedef Dart_InitializeIsolateCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>;

/// An isolate shutdown callback function.
///
/// This callback, provided by the embedder, is called before the vm
/// shuts down an isolate.  The isolate being shutdown will be the current
/// isolate. It is safe to run Dart code.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
/// \param isolate_data The same callback data which was passed to the isolate
/// when it was created.
typedef Dart_IsolateShutdownCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

/// An isolate cleanup callback function.
///
/// This callback, provided by the embedder, is called after the vm
/// shuts down an isolate. There will be no current isolate and it is *not*
/// safe to run Dart code.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
/// \param isolate_data The same callback data which was passed to the isolate
/// when it was created.
typedef Dart_IsolateCleanupCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

/// An isolate group cleanup callback function.
///
/// This callback, provided by the embedder, is called after the vm
/// shuts down an isolate group.
///
/// This function should be used to dispose of native resources that
/// are allocated to an isolate in order to avoid leaks.
///
/// \param isolate_group_data The same callback data which was passed to the
/// isolate group when it was created.
typedef Dart_IsolateGroupCleanupCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

/// A thread death callback function.
/// This callback, provided by the embedder, is called before a thread in the
/// vm thread pool exits.
/// This function could be used to dispose of native resources that
/// are associated and attached to the thread, in order to avoid leaks.
typedef Dart_ThreadExitCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

/// Callbacks provided by the embedder for file operations. If the
/// embedder does not allow file operations these callbacks can be
/// NULL.
///
/// Dart_FileOpenCallback - opens a file for reading or writing.
/// \param name The name of the file to open.
/// \param write A boolean variable which indicates if the file is to
/// opened for writing. If there is an existing file it needs to truncated.
///
/// Dart_FileReadCallback - Read contents of file.
/// \param data Buffer allocated in the callback into which the contents
/// of the file are read into. It is the responsibility of the caller to
/// free this buffer.
/// \param file_length A variable into which the length of the file is returned.
/// In the case of an error this value would be -1.
/// \param stream Handle to the opened file.
///
/// Dart_FileWriteCallback - Write data into file.
/// \param data Buffer which needs to be written into the file.
/// \param length Length of the buffer.
/// \param stream Handle to the opened file.
///
/// Dart_FileCloseCallback - Closes the opened file.
/// \param stream Handle to the opened file.
typedef Dart_FileOpenCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<pkg_ffi.Char>, ffi.Uint8)>>;
typedef Dart_FileReadCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
            ffi.Pointer<ffi.IntPtr>, ffi.Pointer<ffi.Void>)>>;
typedef Dart_FileWriteCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.IntPtr, ffi.Pointer<ffi.Void>)>>;
typedef Dart_FileCloseCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef Dart_EntropySource = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>;

/// Callback provided by the embedder that is used by the vmservice isolate
/// to request the asset archive. The asset archive must be an uncompressed tar
/// archive that is stored in a Uint8List.
///
/// If the embedder has no vmservice isolate assets, the callback can be NULL.
///
/// \return The embedder must return a handle to a Uint8List containing an
/// uncompressed tar archive or null.
typedef Dart_GetVMServiceAssetsArchive
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function()>>;
typedef Dart_IsolateGroup = ffi.Pointer<_Dart_IsolateGroup>;

/// A message notification callback.
///
/// This callback allows the embedder to provide an alternate wakeup
/// mechanism for the delivery of inter-isolate messages.  It is the
/// responsibility of the embedder to call Dart_HandleMessage to
/// process the message.
typedef Dart_MessageNotifyCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_Isolate)>>;

/// A port is used to send or receive inter-isolate messages
typedef Dart_Port = ffi.Int64;

abstract class Dart_CoreType_Id {
  static const int Dart_CoreType_Dynamic = 0;
  static const int Dart_CoreType_Int = 1;
  static const int Dart_CoreType_String = 2;
}

abstract class Dart_TypedData_Type {
  static const int Dart_TypedData_kByteData = 0;
  static const int Dart_TypedData_kInt8 = 1;
  static const int Dart_TypedData_kUint8 = 2;
  static const int Dart_TypedData_kUint8Clamped = 3;
  static const int Dart_TypedData_kInt16 = 4;
  static const int Dart_TypedData_kUint16 = 5;
  static const int Dart_TypedData_kInt32 = 6;
  static const int Dart_TypedData_kUint32 = 7;
  static const int Dart_TypedData_kInt64 = 8;
  static const int Dart_TypedData_kUint64 = 9;
  static const int Dart_TypedData_kFloat32 = 10;
  static const int Dart_TypedData_kFloat64 = 11;
  static const int Dart_TypedData_kInt32x4 = 12;
  static const int Dart_TypedData_kFloat32x4 = 13;
  static const int Dart_TypedData_kFloat64x2 = 14;
  static const int Dart_TypedData_kInvalid = 15;
}

class _Dart_NativeArguments extends ffi.Opaque {}

/// The arguments to a native function.
///
/// This object is passed to a native function to represent its
/// arguments and return value. It allows access to the arguments to a
/// native function by index. It also allows the return value of a
/// native function to be set.
typedef Dart_NativeArguments = ffi.Pointer<_Dart_NativeArguments>;

abstract class Dart_NativeArgument_Type {
  static const int Dart_NativeArgument_kBool = 0;
  static const int Dart_NativeArgument_kInt32 = 1;
  static const int Dart_NativeArgument_kUint32 = 2;
  static const int Dart_NativeArgument_kInt64 = 3;
  static const int Dart_NativeArgument_kUint64 = 4;
  static const int Dart_NativeArgument_kDouble = 5;
  static const int Dart_NativeArgument_kString = 6;
  static const int Dart_NativeArgument_kInstance = 7;
  static const int Dart_NativeArgument_kNativeFields = 8;
}

class _Dart_NativeArgument_Descriptor extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint8()
  external int index;
}

class _Dart_NativeArgument_Value extends ffi.Opaque {}

typedef Dart_NativeArgument_Descriptor = _Dart_NativeArgument_Descriptor;
typedef Dart_NativeArgument_Value = _Dart_NativeArgument_Value;

/// An environment lookup callback function.
///
/// \param name The name of the value to lookup in the environment.
///
/// \return A valid handle to a string if the name exists in the
/// current environment or Dart_Null() if not.
typedef Dart_EnvironmentCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;

/// Native entry resolution callback.
///
/// For libraries and scripts which have native functions, the embedder
/// can provide a native entry resolver. This callback is used to map a
/// name/arity to a Dart_NativeFunction. If no function is found, the
/// callback should return NULL.
///
/// The parameters to the native resolver function are:
/// \param name a Dart string which is the name of the native function.
/// \param num_of_arguments is the number of arguments expected by the
/// native function.
/// \param auto_setup_scope is a boolean flag that can be set by the resolver
/// to indicate if this function needs a Dart API scope (see Dart_EnterScope/
/// Dart_ExitScope) to be setup automatically by the VM before calling into
/// the native function. By default most native functions would require this
/// to be true but some light weight native functions which do not call back
/// into the VM through the Dart API may not require a Dart scope to be
/// setup automatically.
///
/// \return A valid Dart_NativeFunction which resolves to a native entry point
/// for the native function.
///
/// See Dart_SetNativeResolver.
typedef Dart_NativeEntryResolver = ffi.Pointer<
    ffi.NativeFunction<
        Dart_NativeFunction Function(
            ffi.Handle, pkg_ffi.Int, ffi.Pointer<ffi.Uint8>)>>;

/// A native function.
typedef Dart_NativeFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(Dart_NativeArguments)>>;

/// Native entry symbol lookup callback.
///
/// For libraries and scripts which have native functions, the embedder
/// can provide a callback for mapping a native entry to a symbol. This callback
/// maps a native function entry PC to the native function name. If no native
/// entry symbol can be found, the callback should return NULL.
///
/// The parameters to the native reverse resolver function are:
/// \param nf A Dart_NativeFunction.
///
/// \return A const UTF-8 string containing the symbol name or NULL.
///
/// See Dart_SetNativeResolver.
typedef Dart_NativeEntrySymbol = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(Dart_NativeFunction)>>;

/// FFI Native C function pointer resolver callback.
///
/// See Dart_SetFfiNativeResolver.
typedef Dart_FfiNativeResolver = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<pkg_ffi.Char>, uintptr_t)>>;

abstract class Dart_LibraryTag {
  static const int Dart_kCanonicalizeUrl = 0;
  static const int Dart_kImportTag = 1;
  static const int Dart_kKernelTag = 2;
}

/// The library tag handler is a multi-purpose callback provided by the
/// embedder to the Dart VM. The embedder implements the tag handler to
/// provide the ability to load Dart scripts and imports.
///
/// -- TAGS --
///
/// Dart_kCanonicalizeUrl
///
/// This tag indicates that the embedder should canonicalize 'url' with
/// respect to 'library'.  For most embedders, the
/// Dart_DefaultCanonicalizeUrl function is a sufficient implementation
/// of this tag.  The return value should be a string holding the
/// canonicalized url.
///
/// Dart_kImportTag
///
/// This tag is used to load a library from IsolateMirror.loadUri. The embedder
/// should call Dart_LoadLibraryFromKernel to provide the library to the VM. The
/// return value should be an error or library (the result from
/// Dart_LoadLibraryFromKernel).
///
/// Dart_kKernelTag
///
/// This tag is used to load the intermediate file (kernel) generated by
/// the Dart front end. This tag is typically used when a 'hot-reload'
/// of an application is needed and the VM is 'use dart front end' mode.
/// The dart front end typically compiles all the scripts, imports and part
/// files into one intermediate file hence we don't use the source/import or
/// script tags. The return value should be an error or a TypedData containing
/// the kernel bytes.
typedef Dart_LibraryTagHandler = ffi.Pointer<
    ffi.NativeFunction<ffi.Handle Function(ffi.Int32, ffi.Handle, ffi.Handle)>>;

/// Handles deferred loading requests. When this handler is invoked, it should
/// eventually load the deferred loading unit with the given id and call
/// Dart_DeferredLoadComplete or Dart_DeferredLoadCompleteError. It is
/// recommended that the loading occur asynchronously, but it is permitted to
/// call Dart_DeferredLoadComplete or Dart_DeferredLoadCompleteError before the
/// handler returns.
///
/// If an error is returned, it will be propogated through
/// `prefix.loadLibrary()`. This is useful for synchronous
/// implementations, which must propogate any unwind errors from
/// Dart_DeferredLoadComplete or Dart_DeferredLoadComplete. Otherwise the handler
/// should return a non-error such as `Dart_Null()`.
typedef Dart_DeferredLoadHandler
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.IntPtr)>>;

/// Experimental support for Dart to Kernel parser isolate.
///
/// TODO(hausner): Document finalized interface.
abstract class Dart_KernelCompilationStatus {
  static const int Dart_KernelCompilationStatus_Unknown = -1;
  static const int Dart_KernelCompilationStatus_Ok = 0;
  static const int Dart_KernelCompilationStatus_Error = 1;
  static const int Dart_KernelCompilationStatus_Crash = 2;
  static const int Dart_KernelCompilationStatus_MsgFailed = 3;
}

class Dart_KernelCompilationResult extends ffi.Struct {
  @ffi.Int32()
  external int status;

  @ffi.Uint8()
  external int null_safety;

  external ffi.Pointer<pkg_ffi.Char> error;

  external ffi.Pointer<ffi.Uint8> kernel;

  @ffi.IntPtr()
  external int kernel_size;
}

abstract class Dart_KernelCompilationVerbosityLevel {
  static const int Dart_KernelCompilationVerbosityLevel_Error = 0;
  static const int Dart_KernelCompilationVerbosityLevel_Warning = 1;
  static const int Dart_KernelCompilationVerbosityLevel_Info = 2;
  static const int Dart_KernelCompilationVerbosityLevel_All = 3;
}

class Dart_SourceFile extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Char> uri;

  external ffi.Pointer<pkg_ffi.Char> source;
}

typedef Dart_StreamingWriteCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Uint8>, ffi.IntPtr)>>;
typedef Dart_CreateLoadingUnitCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<ffi.Void>,
            ffi.IntPtr,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;
typedef Dart_StreamingCloseCallback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_HandleFinalizer callback; a non-NULL callback must be provided.
abstract class Dart_CObject_Type {
  static const int Dart_CObject_kNull = 0;
  static const int Dart_CObject_kBool = 1;
  static const int Dart_CObject_kInt32 = 2;
  static const int Dart_CObject_kInt64 = 3;
  static const int Dart_CObject_kDouble = 4;
  static const int Dart_CObject_kString = 5;
  static const int Dart_CObject_kArray = 6;
  static const int Dart_CObject_kTypedData = 7;
  static const int Dart_CObject_kExternalTypedData = 8;
  static const int Dart_CObject_kSendPort = 9;
  static const int Dart_CObject_kCapability = 10;
  static const int Dart_CObject_kNativePointer = 11;
  static const int Dart_CObject_kUnsupported = 12;
  static const int Dart_CObject_kNumberOfTypes = 13;
}

class _Dart_CObject extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion5 value;
}

class UnnamedUnion5 extends ffi.Union {
  @ffi.Uint8()
  external int as_bool;

  @ffi.Int32()
  external int as_int32;

  @ffi.Int64()
  external int as_int64;

  @ffi.Double()
  external double as_double;

  external ffi.Pointer<pkg_ffi.Char> as_string;

  external UnnamedStruct3 as_send_port;

  external UnnamedStruct4 as_capability;

  external UnnamedStruct5 as_array;

  external UnnamedStruct6 as_typed_data;

  external UnnamedStruct7 as_external_typed_data;

  external UnnamedStruct8 as_native_pointer;
}

class UnnamedStruct3 extends ffi.Struct {
  @Dart_Port()
  external int id;

  @Dart_Port()
  external int origin_id;
}

class UnnamedStruct4 extends ffi.Struct {
  @ffi.Int64()
  external int id;
}

class UnnamedStruct5 extends ffi.Struct {
  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Pointer<_Dart_CObject>> values;
}

class UnnamedStruct6 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> values;
}

class UnnamedStruct7 extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.IntPtr()
  external int length;

  external ffi.Pointer<ffi.Uint8> data;

  external ffi.Pointer<ffi.Void> peer;

  external Dart_HandleFinalizer callback;
}

class UnnamedStruct8 extends ffi.Struct {
  @ffi.IntPtr()
  external int ptr;

  @ffi.IntPtr()
  external int size;

  external Dart_HandleFinalizer callback;
}

typedef Dart_CObject = _Dart_CObject;

/// A native message handler.
///
/// This handler is associated with a native port by calling
/// Dart_NewNativePort.
///
/// The message received is decoded into the message structure. The
/// lifetime of the message data is controlled by the caller. All the
/// data references from the message are allocated by the caller and
/// will be reclaimed when returning to it.
typedef Dart_NativeMessageHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_Port, ffi.Pointer<Dart_CObject>)>>;
typedef Dart_PostCObject_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Uint8 Function(Dart_Port_DL, ffi.Pointer<Dart_CObject>)>>;
typedef Dart_Port_DL = ffi.Int64;
typedef Dart_PostInteger_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint8 Function(Dart_Port_DL, ffi.Int64)>>;
typedef Dart_NewNativePort_Type = ffi.Pointer<
    ffi.NativeFunction<
        Dart_Port_DL Function(ffi.Pointer<pkg_ffi.Char>,
            Dart_NativeMessageHandler_DL, ffi.Uint8)>>;
typedef Dart_NativeMessageHandler_DL = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_Port_DL, ffi.Pointer<Dart_CObject>)>>;
typedef Dart_CloseNativePort_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(Dart_Port_DL)>>;
typedef Dart_IsError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>;
typedef Dart_IsApiError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>;
typedef Dart_IsUnhandledExceptionError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>;
typedef Dart_IsCompilationError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>;
typedef Dart_IsFatalError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>;
typedef Dart_GetError_Type = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(ffi.Handle)>>;
typedef Dart_ErrorHasException_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(ffi.Handle)>>;
typedef Dart_ErrorGetException_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_ErrorGetStackTrace_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_NewApiError_Type = ffi.Pointer<
    ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<pkg_ffi.Char>)>>;
typedef Dart_NewCompilationError_Type = ffi.Pointer<
    ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<pkg_ffi.Char>)>>;
typedef Dart_NewUnhandledExceptionError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_PropagateError_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>;
typedef Dart_HandleFromPersistent_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_HandleFromWeakPersistent_Type = ffi.Pointer<
    ffi.NativeFunction<ffi.Handle Function(Dart_WeakPersistentHandle)>>;
typedef Dart_NewPersistentHandle_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(ffi.Handle)>>;
typedef Dart_SetPersistentHandle_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle, ffi.Handle)>>;
typedef Dart_DeletePersistentHandle_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Handle)>>;
typedef Dart_NewWeakPersistentHandle_Type = ffi.Pointer<
    ffi.NativeFunction<
        Dart_WeakPersistentHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
            ffi.IntPtr, Dart_HandleFinalizer)>>;
typedef Dart_DeleteWeakPersistentHandle_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(Dart_WeakPersistentHandle)>>;
typedef Dart_UpdateExternalSize_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_WeakPersistentHandle, ffi.IntPtr)>>;
typedef Dart_NewFinalizableHandle_Type = ffi.Pointer<
    ffi.NativeFunction<
        Dart_FinalizableHandle Function(ffi.Handle, ffi.Pointer<ffi.Void>,
            ffi.IntPtr, Dart_HandleFinalizer)>>;
typedef Dart_DeleteFinalizableHandle_Type = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(Dart_FinalizableHandle, ffi.Handle)>>;
typedef Dart_UpdateFinalizableExternalSize_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(Dart_FinalizableHandle, ffi.Handle, ffi.IntPtr)>>;
typedef Dart_Post_Type = ffi
    .Pointer<ffi.NativeFunction<ffi.Uint8 Function(Dart_Port_DL, ffi.Handle)>>;
typedef Dart_NewSendPort_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Handle Function(Dart_Port_DL)>>;
typedef Dart_SendPortGetId_Type = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Handle Function(ffi.Handle, ffi.Pointer<Dart_Port_DL>)>>;
typedef Dart_EnterScope_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef Dart_ExitScope_Type
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef uid_t1 = __darwin_uid_t1;
typedef __darwin_uid_t1 = __uint32_t1;
typedef __uint32_t1 = pkg_ffi.UnsignedInt;
typedef mode_t1 = __darwin_mode_t1;
typedef __darwin_mode_t1 = __uint16_t1;
typedef __uint16_t1 = pkg_ffi.UnsignedShort;

class URLSessionHelper extends NSObject {
  URLSessionHelper._(ffi.Pointer<ObjCObject> id, NativeLibrary lib)
      : super._(id, lib);

  static URLSessionHelper castFrom<T extends _ObjCWrapper>(T other) {
    return URLSessionHelper._(other._id, other._lib);
  }

  static URLSessionHelper castFromPointer(
      NativeLibrary lib, ffi.Pointer<ObjCObject> other) {
    return URLSessionHelper._(other, lib);
  }

  static NSURLSessionDataTask dataTaskForSession_withRequest_toPort(
      NativeLibrary _lib, NSObject? session, NSObject? request, int dart_port) {
    final _ret = _lib._objc_msgSend_304(
        _lib._class_URLSessionHelper1,
        _lib._sel_dataTaskForSession_withRequest_toPort_1,
        session?._id ?? ffi.nullptr,
        request?._id ?? ffi.nullptr,
        dart_port);
    return NSURLSessionDataTask._(_ret, _lib);
  }

  static URLSessionHelper new1(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_URLSessionHelper1, _lib._sel_new1);
    return URLSessionHelper._(_ret, _lib);
  }

  static URLSessionHelper alloc(NativeLibrary _lib) {
    final _ret =
        _lib._objc_msgSend_1(_lib._class_URLSessionHelper1, _lib._sel_alloc1);
    return URLSessionHelper._(_ret, _lib);
  }
}

const int NSScannedOption = 1;

const int NSCollectorDisabledOption = 2;

const int errSecSuccess = 0;

const int errSecUnimplemented = -4;

const int errSecDiskFull = -34;

const int errSecDskFull = -34;

const int errSecIO = -36;

const int errSecOpWr = -49;

const int errSecParam = -50;

const int errSecWrPerm = -61;

const int errSecAllocate = -108;

const int errSecUserCanceled = -128;

const int errSecBadReq = -909;

const int errSecInternalComponent = -2070;

const int errSecCoreFoundationUnknown = -4960;

const int errSecMissingEntitlement = -34018;

const int errSecRestrictedAPI = -34020;

const int errSecNotAvailable = -25291;

const int errSecReadOnly = -25292;

const int errSecAuthFailed = -25293;

const int errSecNoSuchKeychain = -25294;

const int errSecInvalidKeychain = -25295;

const int errSecDuplicateKeychain = -25296;

const int errSecDuplicateCallback = -25297;

const int errSecInvalidCallback = -25298;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecBufferTooSmall = -25301;

const int errSecDataTooLarge = -25302;

const int errSecNoSuchAttr = -25303;

const int errSecInvalidItemRef = -25304;

const int errSecInvalidSearchRef = -25305;

const int errSecNoSuchClass = -25306;

const int errSecNoDefaultKeychain = -25307;

const int errSecInteractionNotAllowed = -25308;

const int errSecReadOnlyAttr = -25309;

const int errSecWrongSecVersion = -25310;

const int errSecKeySizeNotAllowed = -25311;

const int errSecNoStorageModule = -25312;

const int errSecNoCertificateModule = -25313;

const int errSecNoPolicyModule = -25314;

const int errSecInteractionRequired = -25315;

const int errSecDataNotAvailable = -25316;

const int errSecDataNotModifiable = -25317;

const int errSecCreateChainFailed = -25318;

const int errSecInvalidPrefsDomain = -25319;

const int errSecInDarkWake = -25320;

const int errSecACLNotSimple = -25240;

const int errSecPolicyNotFound = -25241;

const int errSecInvalidTrustSetting = -25242;

const int errSecNoAccessForItem = -25243;

const int errSecInvalidOwnerEdit = -25244;

const int errSecTrustNotAvailable = -25245;

const int errSecUnsupportedFormat = -25256;

const int errSecUnknownFormat = -25257;

const int errSecKeyIsSensitive = -25258;

const int errSecMultiplePrivKeys = -25259;

const int errSecPassphraseRequired = -25260;

const int errSecInvalidPasswordRef = -25261;

const int errSecInvalidTrustSettings = -25262;

const int errSecNoTrustSettings = -25263;

const int errSecPkcs12VerifyFailure = -25264;

const int errSecNotSigner = -26267;

const int errSecDecode = -26275;

const int errSecServiceNotAvailable = -67585;

const int errSecInsufficientClientID = -67586;

const int errSecDeviceReset = -67587;

const int errSecDeviceFailed = -67588;

const int errSecAppleAddAppACLSubject = -67589;

const int errSecApplePublicKeyIncomplete = -67590;

const int errSecAppleSignatureMismatch = -67591;

const int errSecAppleInvalidKeyStartDate = -67592;

const int errSecAppleInvalidKeyEndDate = -67593;

const int errSecConversionError = -67594;

const int errSecAppleSSLv2Rollback = -67595;

const int errSecQuotaExceeded = -67596;

const int errSecFileTooBig = -67597;

const int errSecInvalidDatabaseBlob = -67598;

const int errSecInvalidKeyBlob = -67599;

const int errSecIncompatibleDatabaseBlob = -67600;

const int errSecIncompatibleKeyBlob = -67601;

const int errSecHostNameMismatch = -67602;

const int errSecUnknownCriticalExtensionFlag = -67603;

const int errSecNoBasicConstraints = -67604;

const int errSecNoBasicConstraintsCA = -67605;

const int errSecInvalidAuthorityKeyID = -67606;

const int errSecInvalidSubjectKeyID = -67607;

const int errSecInvalidKeyUsageForPolicy = -67608;

const int errSecInvalidExtendedKeyUsage = -67609;

const int errSecInvalidIDLinkage = -67610;

const int errSecPathLengthConstraintExceeded = -67611;

const int errSecInvalidRoot = -67612;

const int errSecCRLExpired = -67613;

const int errSecCRLNotValidYet = -67614;

const int errSecCRLNotFound = -67615;

const int errSecCRLServerDown = -67616;

const int errSecCRLBadURI = -67617;

const int errSecUnknownCertExtension = -67618;

const int errSecUnknownCRLExtension = -67619;

const int errSecCRLNotTrusted = -67620;

const int errSecCRLPolicyFailed = -67621;

const int errSecIDPFailure = -67622;

const int errSecSMIMEEmailAddressesNotFound = -67623;

const int errSecSMIMEBadExtendedKeyUsage = -67624;

const int errSecSMIMEBadKeyUsage = -67625;

const int errSecSMIMEKeyUsageNotCritical = -67626;

const int errSecSMIMENoEmailAddress = -67627;

const int errSecSMIMESubjAltNameNotCritical = -67628;

const int errSecSSLBadExtendedKeyUsage = -67629;

const int errSecOCSPBadResponse = -67630;

const int errSecOCSPBadRequest = -67631;

const int errSecOCSPUnavailable = -67632;

const int errSecOCSPStatusUnrecognized = -67633;

const int errSecEndOfData = -67634;

const int errSecIncompleteCertRevocationCheck = -67635;

const int errSecNetworkFailure = -67636;

const int errSecOCSPNotTrustedToAnchor = -67637;

const int errSecRecordModified = -67638;

const int errSecOCSPSignatureError = -67639;

const int errSecOCSPNoSigner = -67640;

const int errSecOCSPResponderMalformedReq = -67641;

const int errSecOCSPResponderInternalError = -67642;

const int errSecOCSPResponderTryLater = -67643;

const int errSecOCSPResponderSignatureRequired = -67644;

const int errSecOCSPResponderUnauthorized = -67645;

const int errSecOCSPResponseNonceMismatch = -67646;

const int errSecCodeSigningBadCertChainLength = -67647;

const int errSecCodeSigningNoBasicConstraints = -67648;

const int errSecCodeSigningBadPathLengthConstraint = -67649;

const int errSecCodeSigningNoExtendedKeyUsage = -67650;

const int errSecCodeSigningDevelopment = -67651;

const int errSecResourceSignBadCertChainLength = -67652;

const int errSecResourceSignBadExtKeyUsage = -67653;

const int errSecTrustSettingDeny = -67654;

const int errSecInvalidSubjectName = -67655;

const int errSecUnknownQualifiedCertStatement = -67656;

const int errSecMobileMeRequestQueued = -67657;

const int errSecMobileMeRequestRedirected = -67658;

const int errSecMobileMeServerError = -67659;

const int errSecMobileMeServerNotAvailable = -67660;

const int errSecMobileMeServerAlreadyExists = -67661;

const int errSecMobileMeServerServiceErr = -67662;

const int errSecMobileMeRequestAlreadyPending = -67663;

const int errSecMobileMeNoRequestPending = -67664;

const int errSecMobileMeCSRVerifyFailure = -67665;

const int errSecMobileMeFailedConsistencyCheck = -67666;

const int errSecNotInitialized = -67667;

const int errSecInvalidHandleUsage = -67668;

const int errSecPVCReferentNotFound = -67669;

const int errSecFunctionIntegrityFail = -67670;

const int errSecInternalError = -67671;

const int errSecMemoryError = -67672;

const int errSecInvalidData = -67673;

const int errSecMDSError = -67674;

const int errSecInvalidPointer = -67675;

const int errSecSelfCheckFailed = -67676;

const int errSecFunctionFailed = -67677;

const int errSecModuleManifestVerifyFailed = -67678;

const int errSecInvalidGUID = -67679;

const int errSecInvalidHandle = -67680;

const int errSecInvalidDBList = -67681;

const int errSecInvalidPassthroughID = -67682;

const int errSecInvalidNetworkAddress = -67683;

const int errSecCRLAlreadySigned = -67684;

const int errSecInvalidNumberOfFields = -67685;

const int errSecVerificationFailure = -67686;

const int errSecUnknownTag = -67687;

const int errSecInvalidSignature = -67688;

const int errSecInvalidName = -67689;

const int errSecInvalidCertificateRef = -67690;

const int errSecInvalidCertificateGroup = -67691;

const int errSecTagNotFound = -67692;

const int errSecInvalidQuery = -67693;

const int errSecInvalidValue = -67694;

const int errSecCallbackFailed = -67695;

const int errSecACLDeleteFailed = -67696;

const int errSecACLReplaceFailed = -67697;

const int errSecACLAddFailed = -67698;

const int errSecACLChangeFailed = -67699;

const int errSecInvalidAccessCredentials = -67700;

const int errSecInvalidRecord = -67701;

const int errSecInvalidACL = -67702;

const int errSecInvalidSampleValue = -67703;

const int errSecIncompatibleVersion = -67704;

const int errSecPrivilegeNotGranted = -67705;

const int errSecInvalidScope = -67706;

const int errSecPVCAlreadyConfigured = -67707;

const int errSecInvalidPVC = -67708;

const int errSecEMMLoadFailed = -67709;

const int errSecEMMUnloadFailed = -67710;

const int errSecAddinLoadFailed = -67711;

const int errSecInvalidKeyRef = -67712;

const int errSecInvalidKeyHierarchy = -67713;

const int errSecAddinUnloadFailed = -67714;

const int errSecLibraryReferenceNotFound = -67715;

const int errSecInvalidAddinFunctionTable = -67716;

const int errSecInvalidServiceMask = -67717;

const int errSecModuleNotLoaded = -67718;

const int errSecInvalidSubServiceID = -67719;

const int errSecAttributeNotInContext = -67720;

const int errSecModuleManagerInitializeFailed = -67721;

const int errSecModuleManagerNotFound = -67722;

const int errSecEventNotificationCallbackNotFound = -67723;

const int errSecInputLengthError = -67724;

const int errSecOutputLengthError = -67725;

const int errSecPrivilegeNotSupported = -67726;

const int errSecDeviceError = -67727;

const int errSecAttachHandleBusy = -67728;

const int errSecNotLoggedIn = -67729;

const int errSecAlgorithmMismatch = -67730;

const int errSecKeyUsageIncorrect = -67731;

const int errSecKeyBlobTypeIncorrect = -67732;

const int errSecKeyHeaderInconsistent = -67733;

const int errSecUnsupportedKeyFormat = -67734;

const int errSecUnsupportedKeySize = -67735;

const int errSecInvalidKeyUsageMask = -67736;

const int errSecUnsupportedKeyUsageMask = -67737;

const int errSecInvalidKeyAttributeMask = -67738;

const int errSecUnsupportedKeyAttributeMask = -67739;

const int errSecInvalidKeyLabel = -67740;

const int errSecUnsupportedKeyLabel = -67741;

const int errSecInvalidKeyFormat = -67742;

const int errSecUnsupportedVectorOfBuffers = -67743;

const int errSecInvalidInputVector = -67744;

const int errSecInvalidOutputVector = -67745;

const int errSecInvalidContext = -67746;

const int errSecInvalidAlgorithm = -67747;

const int errSecInvalidAttributeKey = -67748;

const int errSecMissingAttributeKey = -67749;

const int errSecInvalidAttributeInitVector = -67750;

const int errSecMissingAttributeInitVector = -67751;

const int errSecInvalidAttributeSalt = -67752;

const int errSecMissingAttributeSalt = -67753;

const int errSecInvalidAttributePadding = -67754;

const int errSecMissingAttributePadding = -67755;

const int errSecInvalidAttributeRandom = -67756;

const int errSecMissingAttributeRandom = -67757;

const int errSecInvalidAttributeSeed = -67758;

const int errSecMissingAttributeSeed = -67759;

const int errSecInvalidAttributePassphrase = -67760;

const int errSecMissingAttributePassphrase = -67761;

const int errSecInvalidAttributeKeyLength = -67762;

const int errSecMissingAttributeKeyLength = -67763;

const int errSecInvalidAttributeBlockSize = -67764;

const int errSecMissingAttributeBlockSize = -67765;

const int errSecInvalidAttributeOutputSize = -67766;

const int errSecMissingAttributeOutputSize = -67767;

const int errSecInvalidAttributeRounds = -67768;

const int errSecMissingAttributeRounds = -67769;

const int errSecInvalidAlgorithmParms = -67770;

const int errSecMissingAlgorithmParms = -67771;

const int errSecInvalidAttributeLabel = -67772;

const int errSecMissingAttributeLabel = -67773;

const int errSecInvalidAttributeKeyType = -67774;

const int errSecMissingAttributeKeyType = -67775;

const int errSecInvalidAttributeMode = -67776;

const int errSecMissingAttributeMode = -67777;

const int errSecInvalidAttributeEffectiveBits = -67778;

const int errSecMissingAttributeEffectiveBits = -67779;

const int errSecInvalidAttributeStartDate = -67780;

const int errSecMissingAttributeStartDate = -67781;

const int errSecInvalidAttributeEndDate = -67782;

const int errSecMissingAttributeEndDate = -67783;

const int errSecInvalidAttributeVersion = -67784;

const int errSecMissingAttributeVersion = -67785;

const int errSecInvalidAttributePrime = -67786;

const int errSecMissingAttributePrime = -67787;

const int errSecInvalidAttributeBase = -67788;

const int errSecMissingAttributeBase = -67789;

const int errSecInvalidAttributeSubprime = -67790;

const int errSecMissingAttributeSubprime = -67791;

const int errSecInvalidAttributeIterationCount = -67792;

const int errSecMissingAttributeIterationCount = -67793;

const int errSecInvalidAttributeDLDBHandle = -67794;

const int errSecMissingAttributeDLDBHandle = -67795;

const int errSecInvalidAttributeAccessCredentials = -67796;

const int errSecMissingAttributeAccessCredentials = -67797;

const int errSecInvalidAttributePublicKeyFormat = -67798;

const int errSecMissingAttributePublicKeyFormat = -67799;

const int errSecInvalidAttributePrivateKeyFormat = -67800;

const int errSecMissingAttributePrivateKeyFormat = -67801;

const int errSecInvalidAttributeSymmetricKeyFormat = -67802;

const int errSecMissingAttributeSymmetricKeyFormat = -67803;

const int errSecInvalidAttributeWrappedKeyFormat = -67804;

const int errSecMissingAttributeWrappedKeyFormat = -67805;

const int errSecStagedOperationInProgress = -67806;

const int errSecStagedOperationNotStarted = -67807;

const int errSecVerifyFailed = -67808;

const int errSecQuerySizeUnknown = -67809;

const int errSecBlockSizeMismatch = -67810;

const int errSecPublicKeyInconsistent = -67811;

const int errSecDeviceVerifyFailed = -67812;

const int errSecInvalidLoginName = -67813;

const int errSecAlreadyLoggedIn = -67814;

const int errSecInvalidDigestAlgorithm = -67815;

const int errSecInvalidCRLGroup = -67816;

const int errSecCertificateCannotOperate = -67817;

const int errSecCertificateExpired = -67818;

const int errSecCertificateNotValidYet = -67819;

const int errSecCertificateRevoked = -67820;

const int errSecCertificateSuspended = -67821;

const int errSecInsufficientCredentials = -67822;

const int errSecInvalidAction = -67823;

const int errSecInvalidAuthority = -67824;

const int errSecVerifyActionFailed = -67825;

const int errSecInvalidCertAuthority = -67826;

const int errSecInvalidCRLAuthority = -67827;

const int errSecInvaldCRLAuthority = -67827;

const int errSecInvalidCRLEncoding = -67828;

const int errSecInvalidCRLType = -67829;

const int errSecInvalidCRL = -67830;

const int errSecInvalidFormType = -67831;

const int errSecInvalidID = -67832;

const int errSecInvalidIdentifier = -67833;

const int errSecInvalidIndex = -67834;

const int errSecInvalidPolicyIdentifiers = -67835;

const int errSecInvalidTimeString = -67836;

const int errSecInvalidReason = -67837;

const int errSecInvalidRequestInputs = -67838;

const int errSecInvalidResponseVector = -67839;

const int errSecInvalidStopOnPolicy = -67840;

const int errSecInvalidTuple = -67841;

const int errSecMultipleValuesUnsupported = -67842;

const int errSecNotTrusted = -67843;

const int errSecNoDefaultAuthority = -67844;

const int errSecRejectedForm = -67845;

const int errSecRequestLost = -67846;

const int errSecRequestRejected = -67847;

const int errSecUnsupportedAddressType = -67848;

const int errSecUnsupportedService = -67849;

const int errSecInvalidTupleGroup = -67850;

const int errSecInvalidBaseACLs = -67851;

const int errSecInvalidTupleCredentials = -67852;

const int errSecInvalidTupleCredendtials = -67852;

const int errSecInvalidEncoding = -67853;

const int errSecInvalidValidityPeriod = -67854;

const int errSecInvalidRequestor = -67855;

const int errSecRequestDescriptor = -67856;

const int errSecInvalidBundleInfo = -67857;

const int errSecInvalidCRLIndex = -67858;

const int errSecNoFieldValues = -67859;

const int errSecUnsupportedFieldFormat = -67860;

const int errSecUnsupportedIndexInfo = -67861;

const int errSecUnsupportedLocality = -67862;

const int errSecUnsupportedNumAttributes = -67863;

const int errSecUnsupportedNumIndexes = -67864;

const int errSecUnsupportedNumRecordTypes = -67865;

const int errSecFieldSpecifiedMultiple = -67866;

const int errSecIncompatibleFieldFormat = -67867;

const int errSecInvalidParsingModule = -67868;

const int errSecDatabaseLocked = -67869;

const int errSecDatastoreIsOpen = -67870;

const int errSecMissingValue = -67871;

const int errSecUnsupportedQueryLimits = -67872;

const int errSecUnsupportedNumSelectionPreds = -67873;

const int errSecUnsupportedOperator = -67874;

const int errSecInvalidDBLocation = -67875;

const int errSecInvalidAccessRequest = -67876;

const int errSecInvalidIndexInfo = -67877;

const int errSecInvalidNewOwner = -67878;

const int errSecInvalidModifyMode = -67879;

const int errSecMissingRequiredExtension = -67880;

const int errSecExtendedKeyUsageNotCritical = -67881;

const int errSecTimestampMissing = -67882;

const int errSecTimestampInvalid = -67883;

const int errSecTimestampNotTrusted = -67884;

const int errSecTimestampServiceNotAvailable = -67885;

const int errSecTimestampBadAlg = -67886;

const int errSecTimestampBadRequest = -67887;

const int errSecTimestampBadDataFormat = -67888;

const int errSecTimestampTimeNotAvailable = -67889;

const int errSecTimestampUnacceptedPolicy = -67890;

const int errSecTimestampUnacceptedExtension = -67891;

const int errSecTimestampAddInfoNotAvailable = -67892;

const int errSecTimestampSystemFailure = -67893;

const int errSecSigningTimeMissing = -67894;

const int errSecTimestampRejection = -67895;

const int errSecTimestampWaiting = -67896;

const int errSecTimestampRevocationWarning = -67897;

const int errSecTimestampRevocationNotification = -67898;

const int errSecCertificatePolicyNotAllowed = -67899;

const int errSecCertificateNameNotAllowed = -67900;

const int errSecCertificateValidityPeriodTooLong = -67901;

const int errSecCertificateIsCA = -67902;

const int errSecCertificateDuplicateExtension = -67903;

const int errSSLProtocol = -9800;

const int errSSLNegotiation = -9801;

const int errSSLFatalAlert = -9802;

const int errSSLWouldBlock = -9803;

const int errSSLSessionNotFound = -9804;

const int errSSLClosedGraceful = -9805;

const int errSSLClosedAbort = -9806;

const int errSSLXCertChainInvalid = -9807;

const int errSSLBadCert = -9808;

const int errSSLCrypto = -9809;

const int errSSLInternal = -9810;

const int errSSLModuleAttach = -9811;

const int errSSLUnknownRootCert = -9812;

const int errSSLNoRootCert = -9813;

const int errSSLCertExpired = -9814;

const int errSSLCertNotYetValid = -9815;

const int errSSLClosedNoNotify = -9816;

const int errSSLBufferOverflow = -9817;

const int errSSLBadCipherSuite = -9818;

const int errSSLPeerUnexpectedMsg = -9819;

const int errSSLPeerBadRecordMac = -9820;

const int errSSLPeerDecryptionFail = -9821;

const int errSSLPeerRecordOverflow = -9822;

const int errSSLPeerDecompressFail = -9823;

const int errSSLPeerHandshakeFail = -9824;

const int errSSLPeerBadCert = -9825;

const int errSSLPeerUnsupportedCert = -9826;

const int errSSLPeerCertRevoked = -9827;

const int errSSLPeerCertExpired = -9828;

const int errSSLPeerCertUnknown = -9829;

const int errSSLIllegalParam = -9830;

const int errSSLPeerUnknownCA = -9831;

const int errSSLPeerAccessDenied = -9832;

const int errSSLPeerDecodeError = -9833;

const int errSSLPeerDecryptError = -9834;

const int errSSLPeerExportRestriction = -9835;

const int errSSLPeerProtocolVersion = -9836;

const int errSSLPeerInsufficientSecurity = -9837;

const int errSSLPeerInternalError = -9838;

const int errSSLPeerUserCancelled = -9839;

const int errSSLPeerNoRenegotiation = -9840;

const int errSSLPeerAuthCompleted = -9841;

const int errSSLClientCertRequested = -9842;

const int errSSLHostNameMismatch = -9843;

const int errSSLConnectionRefused = -9844;

const int errSSLDecryptionFail = -9845;

const int errSSLBadRecordMac = -9846;

const int errSSLRecordOverflow = -9847;

const int errSSLBadConfiguration = -9848;

const int errSSLUnexpectedRecord = -9849;

const int errSSLWeakPeerEphemeralDHKey = -9850;

const int errSSLClientHelloReceived = -9851;

const int errSSLTransportReset = -9852;

const int errSSLNetworkTimeout = -9853;

const int errSSLConfigurationFailed = -9854;

const int errSSLUnsupportedExtension = -9855;

const int errSSLUnexpectedMessage = -9856;

const int errSSLDecompressFail = -9857;

const int errSSLHandshakeFail = -9858;

const int errSSLDecodeError = -9859;

const int errSSLInappropriateFallback = -9860;

const int errSSLMissingExtension = -9861;

const int errSSLBadCertificateStatusResponse = -9862;

const int errSSLCertificateRequired = -9863;

const int errSSLUnknownPSKIdentity = -9864;

const int errSSLUnrecognizedName = -9865;

const int errSSLATSViolation = -9880;

const int errSSLATSMinimumVersionViolation = -9881;

const int errSSLATSCiphersuiteViolation = -9882;

const int errSSLATSMinimumKeySizeViolation = -9883;

const int errSSLATSLeafCertificateHashAlgorithmViolation = -9884;

const int errSSLATSCertificateHashAlgorithmViolation = -9885;

const int errSSLATSCertificateTrustViolation = -9886;

const int errSSLEarlyDataRejected = -9890;

const int kCFNotificationDeliverImmediately = 1;

const int kCFNotificationPostToAllSessions = 2;

const int kCFCalendarComponentsWrap = 1;

const int kCFSocketAutomaticallyReenableReadCallBack = 1;

const int kCFSocketAutomaticallyReenableAcceptCallBack = 2;

const int kCFSocketAutomaticallyReenableDataCallBack = 3;

const int kCFSocketAutomaticallyReenableWriteCallBack = 8;

const int kCFSocketLeaveErrors = 64;

const int kCFSocketCloseOnInvalidate = 128;

const int kCFPropertyListReadCorruptError = 3840;

const int kCFPropertyListReadUnknownVersionError = 3841;

const int kCFPropertyListReadStreamError = 3842;

const int kCFPropertyListWriteStreamError = 3851;

const int kCFBundleExecutableArchitectureI386 = 7;

const int kCFBundleExecutableArchitecturePPC = 18;

const int kCFBundleExecutableArchitectureX86_64 = 16777223;

const int kCFBundleExecutableArchitecturePPC64 = 16777234;

const int kCFBundleExecutableArchitectureARM64 = 16777228;

const int kCFMessagePortSuccess = 0;

const int kCFMessagePortSendTimeout = -1;

const int kCFMessagePortReceiveTimeout = -2;

const int kCFMessagePortIsInvalid = -3;

const int kCFMessagePortTransportError = -4;

const int kCFMessagePortBecameInvalidError = -5;

const int kCFStringTokenizerUnitWord = 0;

const int kCFStringTokenizerUnitSentence = 1;

const int kCFStringTokenizerUnitParagraph = 2;

const int kCFStringTokenizerUnitLineBreak = 3;

const int kCFStringTokenizerUnitWordBoundary = 4;

const int kCFStringTokenizerAttributeLatinTranscription = 65536;

const int kCFStringTokenizerAttributeLanguage = 131072;

const int kCFFileDescriptorReadCallBack = 1;

const int kCFFileDescriptorWriteCallBack = 2;

const int kCFUserNotificationStopAlertLevel = 0;

const int kCFUserNotificationNoteAlertLevel = 1;

const int kCFUserNotificationCautionAlertLevel = 2;

const int kCFUserNotificationPlainAlertLevel = 3;

const int kCFUserNotificationDefaultResponse = 0;

const int kCFUserNotificationAlternateResponse = 1;

const int kCFUserNotificationOtherResponse = 2;

const int kCFUserNotificationCancelResponse = 3;

const int kCFUserNotificationNoDefaultButtonFlag = 32;

const int kCFUserNotificationUseRadioButtonsFlag = 64;

const int kCFXMLNodeCurrentVersion = 1;

const int CSSM_INVALID_HANDLE = 0;

const int CSSM_FALSE = 0;

const int CSSM_TRUE = 1;

const int CSSM_OK = 0;

const int CSSM_MODULE_STRING_SIZE = 64;

const int CSSM_KEY_HIERARCHY_NONE = 0;

const int CSSM_KEY_HIERARCHY_INTEG = 1;

const int CSSM_KEY_HIERARCHY_EXPORT = 2;

const int CSSM_PVC_NONE = 0;

const int CSSM_PVC_APP = 1;

const int CSSM_PVC_SP = 2;

const int CSSM_PRIVILEGE_SCOPE_NONE = 0;

const int CSSM_PRIVILEGE_SCOPE_PROCESS = 1;

const int CSSM_PRIVILEGE_SCOPE_THREAD = 2;

const int CSSM_SERVICE_CSSM = 1;

const int CSSM_SERVICE_CSP = 2;

const int CSSM_SERVICE_DL = 4;

const int CSSM_SERVICE_CL = 8;

const int CSSM_SERVICE_TP = 16;

const int CSSM_SERVICE_AC = 32;

const int CSSM_SERVICE_KR = 64;

const int CSSM_NOTIFY_INSERT = 1;

const int CSSM_NOTIFY_REMOVE = 2;

const int CSSM_NOTIFY_FAULT = 3;

const int CSSM_ATTACH_READ_ONLY = 1;

const int CSSM_USEE_LAST = 255;

const int CSSM_USEE_NONE = 0;

const int CSSM_USEE_DOMESTIC = 1;

const int CSSM_USEE_FINANCIAL = 2;

const int CSSM_USEE_KRLE = 3;

const int CSSM_USEE_KRENT = 4;

const int CSSM_USEE_SSL = 5;

const int CSSM_USEE_AUTHENTICATION = 6;

const int CSSM_USEE_KEYEXCH = 7;

const int CSSM_USEE_MEDICAL = 8;

const int CSSM_USEE_INSURANCE = 9;

const int CSSM_USEE_WEAK = 10;

const int CSSM_ADDR_NONE = 0;

const int CSSM_ADDR_CUSTOM = 1;

const int CSSM_ADDR_URL = 2;

const int CSSM_ADDR_SOCKADDR = 3;

const int CSSM_ADDR_NAME = 4;

const int CSSM_NET_PROTO_NONE = 0;

const int CSSM_NET_PROTO_CUSTOM = 1;

const int CSSM_NET_PROTO_UNSPECIFIED = 2;

const int CSSM_NET_PROTO_LDAP = 3;

const int CSSM_NET_PROTO_LDAPS = 4;

const int CSSM_NET_PROTO_LDAPNS = 5;

const int CSSM_NET_PROTO_X500DAP = 6;

const int CSSM_NET_PROTO_FTP = 7;

const int CSSM_NET_PROTO_FTPS = 8;

const int CSSM_NET_PROTO_OCSP = 9;

const int CSSM_NET_PROTO_CMP = 10;

const int CSSM_NET_PROTO_CMPS = 11;

const int CSSM_WORDID__UNK_ = -1;

const int CSSM_WORDID__NLU_ = 0;

const int CSSM_WORDID__STAR_ = 1;

const int CSSM_WORDID_A = 2;

const int CSSM_WORDID_ACL = 3;

const int CSSM_WORDID_ALPHA = 4;

const int CSSM_WORDID_B = 5;

const int CSSM_WORDID_BER = 6;

const int CSSM_WORDID_BINARY = 7;

const int CSSM_WORDID_BIOMETRIC = 8;

const int CSSM_WORDID_C = 9;

const int CSSM_WORDID_CANCELED = 10;

const int CSSM_WORDID_CERT = 11;

const int CSSM_WORDID_COMMENT = 12;

const int CSSM_WORDID_CRL = 13;

const int CSSM_WORDID_CUSTOM = 14;

const int CSSM_WORDID_D = 15;

const int CSSM_WORDID_DATE = 16;

const int CSSM_WORDID_DB_DELETE = 17;

const int CSSM_WORDID_DB_EXEC_STORED_QUERY = 18;

const int CSSM_WORDID_DB_INSERT = 19;

const int CSSM_WORDID_DB_MODIFY = 20;

const int CSSM_WORDID_DB_READ = 21;

const int CSSM_WORDID_DBS_CREATE = 22;

const int CSSM_WORDID_DBS_DELETE = 23;

const int CSSM_WORDID_DECRYPT = 24;

const int CSSM_WORDID_DELETE = 25;

const int CSSM_WORDID_DELTA_CRL = 26;

const int CSSM_WORDID_DER = 27;

const int CSSM_WORDID_DERIVE = 28;

const int CSSM_WORDID_DISPLAY = 29;

const int CSSM_WORDID_DO = 30;

const int CSSM_WORDID_DSA = 31;

const int CSSM_WORDID_DSA_SHA1 = 32;

const int CSSM_WORDID_E = 33;

const int CSSM_WORDID_ELGAMAL = 34;

const int CSSM_WORDID_ENCRYPT = 35;

const int CSSM_WORDID_ENTRY = 36;

const int CSSM_WORDID_EXPORT_CLEAR = 37;

const int CSSM_WORDID_EXPORT_WRAPPED = 38;

const int CSSM_WORDID_G = 39;

const int CSSM_WORDID_GE = 40;

const int CSSM_WORDID_GENKEY = 41;

const int CSSM_WORDID_HASH = 42;

const int CSSM_WORDID_HASHED_PASSWORD = 43;

const int CSSM_WORDID_HASHED_SUBJECT = 44;

const int CSSM_WORDID_HAVAL = 45;

const int CSSM_WORDID_IBCHASH = 46;

const int CSSM_WORDID_IMPORT_CLEAR = 47;

const int CSSM_WORDID_IMPORT_WRAPPED = 48;

const int CSSM_WORDID_INTEL = 49;

const int CSSM_WORDID_ISSUER = 50;

const int CSSM_WORDID_ISSUER_INFO = 51;

const int CSSM_WORDID_K_OF_N = 52;

const int CSSM_WORDID_KEA = 53;

const int CSSM_WORDID_KEYHOLDER = 54;

const int CSSM_WORDID_L = 55;

const int CSSM_WORDID_LE = 56;

const int CSSM_WORDID_LOGIN = 57;

const int CSSM_WORDID_LOGIN_NAME = 58;

const int CSSM_WORDID_MAC = 59;

const int CSSM_WORDID_MD2 = 60;

const int CSSM_WORDID_MD2WITHRSA = 61;

const int CSSM_WORDID_MD4 = 62;

const int CSSM_WORDID_MD5 = 63;

const int CSSM_WORDID_MD5WITHRSA = 64;

const int CSSM_WORDID_N = 65;

const int CSSM_WORDID_NAME = 66;

const int CSSM_WORDID_NDR = 67;

const int CSSM_WORDID_NHASH = 68;

const int CSSM_WORDID_NOT_AFTER = 69;

const int CSSM_WORDID_NOT_BEFORE = 70;

const int CSSM_WORDID_NULL = 71;

const int CSSM_WORDID_NUMERIC = 72;

const int CSSM_WORDID_OBJECT_HASH = 73;

const int CSSM_WORDID_ONE_TIME = 74;

const int CSSM_WORDID_ONLINE = 75;

const int CSSM_WORDID_OWNER = 76;

const int CSSM_WORDID_P = 77;

const int CSSM_WORDID_PAM_NAME = 78;

const int CSSM_WORDID_PASSWORD = 79;

const int CSSM_WORDID_PGP = 80;

const int CSSM_WORDID_PREFIX = 81;

const int CSSM_WORDID_PRIVATE_KEY = 82;

const int CSSM_WORDID_PROMPTED_BIOMETRIC = 83;

const int CSSM_WORDID_PROMPTED_PASSWORD = 84;

const int CSSM_WORDID_PROPAGATE = 85;

const int CSSM_WORDID_PROTECTED_BIOMETRIC = 86;

const int CSSM_WORDID_PROTECTED_PASSWORD = 87;

const int CSSM_WORDID_PROTECTED_PIN = 88;

const int CSSM_WORDID_PUBLIC_KEY = 89;

const int CSSM_WORDID_PUBLIC_KEY_FROM_CERT = 90;

const int CSSM_WORDID_Q = 91;

const int CSSM_WORDID_RANGE = 92;

const int CSSM_WORDID_REVAL = 93;

const int CSSM_WORDID_RIPEMAC = 94;

const int CSSM_WORDID_RIPEMD = 95;

const int CSSM_WORDID_RIPEMD160 = 96;

const int CSSM_WORDID_RSA = 97;

const int CSSM_WORDID_RSA_ISO9796 = 98;

const int CSSM_WORDID_RSA_PKCS = 99;

const int CSSM_WORDID_RSA_PKCS_MD5 = 100;

const int CSSM_WORDID_RSA_PKCS_SHA1 = 101;

const int CSSM_WORDID_RSA_PKCS1 = 102;

const int CSSM_WORDID_RSA_PKCS1_MD5 = 103;

const int CSSM_WORDID_RSA_PKCS1_SHA1 = 104;

const int CSSM_WORDID_RSA_PKCS1_SIG = 105;

const int CSSM_WORDID_RSA_RAW = 106;

const int CSSM_WORDID_SDSIV1 = 107;

const int CSSM_WORDID_SEQUENCE = 108;

const int CSSM_WORDID_SET = 109;

const int CSSM_WORDID_SEXPR = 110;

const int CSSM_WORDID_SHA1 = 111;

const int CSSM_WORDID_SHA1WITHDSA = 112;

const int CSSM_WORDID_SHA1WITHECDSA = 113;

const int CSSM_WORDID_SHA1WITHRSA = 114;

const int CSSM_WORDID_SIGN = 115;

const int CSSM_WORDID_SIGNATURE = 116;

const int CSSM_WORDID_SIGNED_NONCE = 117;

const int CSSM_WORDID_SIGNED_SECRET = 118;

const int CSSM_WORDID_SPKI = 119;

const int CSSM_WORDID_SUBJECT = 120;

const int CSSM_WORDID_SUBJECT_INFO = 121;

const int CSSM_WORDID_TAG = 122;

const int CSSM_WORDID_THRESHOLD = 123;

const int CSSM_WORDID_TIME = 124;

const int CSSM_WORDID_URI = 125;

const int CSSM_WORDID_VERSION = 126;

const int CSSM_WORDID_X509_ATTRIBUTE = 127;

const int CSSM_WORDID_X509V1 = 128;

const int CSSM_WORDID_X509V2 = 129;

const int CSSM_WORDID_X509V3 = 130;

const int CSSM_WORDID_X9_ATTRIBUTE = 131;

const int CSSM_WORDID_VENDOR_START = 65536;

const int CSSM_WORDID_VENDOR_END = 2147418112;

const int CSSM_LIST_ELEMENT_DATUM = 0;

const int CSSM_LIST_ELEMENT_SUBLIST = 1;

const int CSSM_LIST_ELEMENT_WORDID = 2;

const int CSSM_LIST_TYPE_UNKNOWN = 0;

const int CSSM_LIST_TYPE_CUSTOM = 1;

const int CSSM_LIST_TYPE_SEXPR = 2;

const int CSSM_SAMPLE_TYPE_PASSWORD = 79;

const int CSSM_SAMPLE_TYPE_HASHED_PASSWORD = 43;

const int CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_SAMPLE_TYPE_SIGNED_NONCE = 117;

const int CSSM_SAMPLE_TYPE_SIGNED_SECRET = 118;

const int CSSM_SAMPLE_TYPE_BIOMETRIC = 8;

const int CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_SAMPLE_TYPE_THRESHOLD = 123;

const int CSSM_CERT_UNKNOWN = 0;

const int CSSM_CERT_X_509v1 = 1;

const int CSSM_CERT_X_509v2 = 2;

const int CSSM_CERT_X_509v3 = 3;

const int CSSM_CERT_PGP = 4;

const int CSSM_CERT_SPKI = 5;

const int CSSM_CERT_SDSIv1 = 6;

const int CSSM_CERT_Intel = 8;

const int CSSM_CERT_X_509_ATTRIBUTE = 9;

const int CSSM_CERT_X9_ATTRIBUTE = 10;

const int CSSM_CERT_TUPLE = 11;

const int CSSM_CERT_ACL_ENTRY = 12;

const int CSSM_CERT_MULTIPLE = 32766;

const int CSSM_CERT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_TYPE = 32768;

const int CSSM_CERT_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_ENCODING_CUSTOM = 1;

const int CSSM_CERT_ENCODING_BER = 2;

const int CSSM_CERT_ENCODING_DER = 3;

const int CSSM_CERT_ENCODING_NDR = 4;

const int CSSM_CERT_ENCODING_SEXPR = 5;

const int CSSM_CERT_ENCODING_PGP = 6;

const int CSSM_CERT_ENCODING_MULTIPLE = 32766;

const int CSSM_CERT_ENCODING_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_ENCODING = 32768;

const int CSSM_CERT_PARSE_FORMAT_NONE = 0;

const int CSSM_CERT_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CERT_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CERT_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CERT_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CERT_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CERT_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CERT_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_PARSE_FORMAT = 32768;

const int CSSM_CERTGROUP_DATA = 0;

const int CSSM_CERTGROUP_ENCODED_CERT = 1;

const int CSSM_CERTGROUP_PARSED_CERT = 2;

const int CSSM_CERTGROUP_CERT_PAIR = 3;

const int CSSM_ACL_SUBJECT_TYPE_ANY = 1;

const int CSSM_ACL_SUBJECT_TYPE_THRESHOLD = 123;

const int CSSM_ACL_SUBJECT_TYPE_PASSWORD = 79;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY = 89;

const int CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT = 44;

const int CSSM_ACL_SUBJECT_TYPE_BIOMETRIC = 8;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME = 58;

const int CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME = 78;

const int CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START = 65536;

const int CSSM_ACL_AUTHORIZATION_ANY = 1;

const int CSSM_ACL_AUTHORIZATION_LOGIN = 57;

const int CSSM_ACL_AUTHORIZATION_GENKEY = 41;

const int CSSM_ACL_AUTHORIZATION_DELETE = 25;

const int CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED = 38;

const int CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR = 37;

const int CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED = 48;

const int CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR = 47;

const int CSSM_ACL_AUTHORIZATION_SIGN = 115;

const int CSSM_ACL_AUTHORIZATION_ENCRYPT = 35;

const int CSSM_ACL_AUTHORIZATION_DECRYPT = 24;

const int CSSM_ACL_AUTHORIZATION_MAC = 59;

const int CSSM_ACL_AUTHORIZATION_DERIVE = 28;

const int CSSM_ACL_AUTHORIZATION_DBS_CREATE = 22;

const int CSSM_ACL_AUTHORIZATION_DBS_DELETE = 23;

const int CSSM_ACL_AUTHORIZATION_DB_READ = 21;

const int CSSM_ACL_AUTHORIZATION_DB_INSERT = 19;

const int CSSM_ACL_AUTHORIZATION_DB_MODIFY = 20;

const int CSSM_ACL_AUTHORIZATION_DB_DELETE = 17;

const int CSSM_ACL_EDIT_MODE_ADD = 1;

const int CSSM_ACL_EDIT_MODE_DELETE = 2;

const int CSSM_ACL_EDIT_MODE_REPLACE = 3;

const int CSSM_KEYHEADER_VERSION = 2;

const int CSSM_KEYBLOB_RAW = 0;

const int CSSM_KEYBLOB_REFERENCE = 2;

const int CSSM_KEYBLOB_WRAPPED = 3;

const int CSSM_KEYBLOB_OTHER = -1;

const int CSSM_KEYBLOB_RAW_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS1 = 1;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS3 = 2;

const int CSSM_KEYBLOB_RAW_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_RAW_FORMAT_PGP = 4;

const int CSSM_KEYBLOB_RAW_FORMAT_FIPS186 = 5;

const int CSSM_KEYBLOB_RAW_FORMAT_BSAFE = 6;

const int CSSM_KEYBLOB_RAW_FORMAT_CCA = 9;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS8 = 10;

const int CSSM_KEYBLOB_RAW_FORMAT_SPKI = 11;

const int CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING = 12;

const int CSSM_KEYBLOB_RAW_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8 = 1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7 = 2;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_REF_FORMAT_INTEGER = 0;

const int CSSM_KEYBLOB_REF_FORMAT_STRING = 1;

const int CSSM_KEYBLOB_REF_FORMAT_SPKI = 2;

const int CSSM_KEYBLOB_REF_FORMAT_OTHER = -1;

const int CSSM_KEYCLASS_PUBLIC_KEY = 0;

const int CSSM_KEYCLASS_PRIVATE_KEY = 1;

const int CSSM_KEYCLASS_SESSION_KEY = 2;

const int CSSM_KEYCLASS_SECRET_PART = 3;

const int CSSM_KEYCLASS_OTHER = -1;

const int CSSM_KEYATTR_RETURN_DEFAULT = 0;

const int CSSM_KEYATTR_RETURN_DATA = 268435456;

const int CSSM_KEYATTR_RETURN_REF = 536870912;

const int CSSM_KEYATTR_RETURN_NONE = 1073741824;

const int CSSM_KEYATTR_PERMANENT = 1;

const int CSSM_KEYATTR_PRIVATE = 2;

const int CSSM_KEYATTR_MODIFIABLE = 4;

const int CSSM_KEYATTR_SENSITIVE = 8;

const int CSSM_KEYATTR_EXTRACTABLE = 32;

const int CSSM_KEYATTR_ALWAYS_SENSITIVE = 16;

const int CSSM_KEYATTR_NEVER_EXTRACTABLE = 64;

const int CSSM_KEYUSE_ANY = -2147483648;

const int CSSM_KEYUSE_ENCRYPT = 1;

const int CSSM_KEYUSE_DECRYPT = 2;

const int CSSM_KEYUSE_SIGN = 4;

const int CSSM_KEYUSE_VERIFY = 8;

const int CSSM_KEYUSE_SIGN_RECOVER = 16;

const int CSSM_KEYUSE_VERIFY_RECOVER = 32;

const int CSSM_KEYUSE_WRAP = 64;

const int CSSM_KEYUSE_UNWRAP = 128;

const int CSSM_KEYUSE_DERIVE = 256;

const int CSSM_ALGID_NONE = 0;

const int CSSM_ALGID_CUSTOM = 1;

const int CSSM_ALGID_DH = 2;

const int CSSM_ALGID_PH = 3;

const int CSSM_ALGID_KEA = 4;

const int CSSM_ALGID_MD2 = 5;

const int CSSM_ALGID_MD4 = 6;

const int CSSM_ALGID_MD5 = 7;

const int CSSM_ALGID_SHA1 = 8;

const int CSSM_ALGID_NHASH = 9;

const int CSSM_ALGID_HAVAL = 10;

const int CSSM_ALGID_RIPEMD = 11;

const int CSSM_ALGID_IBCHASH = 12;

const int CSSM_ALGID_RIPEMAC = 13;

const int CSSM_ALGID_DES = 14;

const int CSSM_ALGID_DESX = 15;

const int CSSM_ALGID_RDES = 16;

const int CSSM_ALGID_3DES_3KEY_EDE = 17;

const int CSSM_ALGID_3DES_2KEY_EDE = 18;

const int CSSM_ALGID_3DES_1KEY_EEE = 19;

const int CSSM_ALGID_3DES_3KEY = 17;

const int CSSM_ALGID_3DES_3KEY_EEE = 20;

const int CSSM_ALGID_3DES_2KEY = 18;

const int CSSM_ALGID_3DES_2KEY_EEE = 21;

const int CSSM_ALGID_3DES_1KEY = 20;

const int CSSM_ALGID_IDEA = 22;

const int CSSM_ALGID_RC2 = 23;

const int CSSM_ALGID_RC5 = 24;

const int CSSM_ALGID_RC4 = 25;

const int CSSM_ALGID_SEAL = 26;

const int CSSM_ALGID_CAST = 27;

const int CSSM_ALGID_BLOWFISH = 28;

const int CSSM_ALGID_SKIPJACK = 29;

const int CSSM_ALGID_LUCIFER = 30;

const int CSSM_ALGID_MADRYGA = 31;

const int CSSM_ALGID_FEAL = 32;

const int CSSM_ALGID_REDOC = 33;

const int CSSM_ALGID_REDOC3 = 34;

const int CSSM_ALGID_LOKI = 35;

const int CSSM_ALGID_KHUFU = 36;

const int CSSM_ALGID_KHAFRE = 37;

const int CSSM_ALGID_MMB = 38;

const int CSSM_ALGID_GOST = 39;

const int CSSM_ALGID_SAFER = 40;

const int CSSM_ALGID_CRAB = 41;

const int CSSM_ALGID_RSA = 42;

const int CSSM_ALGID_DSA = 43;

const int CSSM_ALGID_MD5WithRSA = 44;

const int CSSM_ALGID_MD2WithRSA = 45;

const int CSSM_ALGID_ElGamal = 46;

const int CSSM_ALGID_MD2Random = 47;

const int CSSM_ALGID_MD5Random = 48;

const int CSSM_ALGID_SHARandom = 49;

const int CSSM_ALGID_DESRandom = 50;

const int CSSM_ALGID_SHA1WithRSA = 51;

const int CSSM_ALGID_CDMF = 52;

const int CSSM_ALGID_CAST3 = 53;

const int CSSM_ALGID_CAST5 = 54;

const int CSSM_ALGID_GenericSecret = 55;

const int CSSM_ALGID_ConcatBaseAndKey = 56;

const int CSSM_ALGID_ConcatKeyAndBase = 57;

const int CSSM_ALGID_ConcatBaseAndData = 58;

const int CSSM_ALGID_ConcatDataAndBase = 59;

const int CSSM_ALGID_XORBaseAndData = 60;

const int CSSM_ALGID_ExtractFromKey = 61;

const int CSSM_ALGID_SSL3PrePrimaryGen = 62;

const int CSSM_ALGID_SSL3PreMasterGen = 62;

const int CSSM_ALGID_SSL3PrimaryDerive = 63;

const int CSSM_ALGID_SSL3MasterDerive = 63;

const int CSSM_ALGID_SSL3KeyAndMacDerive = 64;

const int CSSM_ALGID_SSL3MD5_MAC = 65;

const int CSSM_ALGID_SSL3SHA1_MAC = 66;

const int CSSM_ALGID_PKCS5_PBKDF1_MD5 = 67;

const int CSSM_ALGID_PKCS5_PBKDF1_MD2 = 68;

const int CSSM_ALGID_PKCS5_PBKDF1_SHA1 = 69;

const int CSSM_ALGID_WrapLynks = 70;

const int CSSM_ALGID_WrapSET_OAEP = 71;

const int CSSM_ALGID_BATON = 72;

const int CSSM_ALGID_ECDSA = 73;

const int CSSM_ALGID_MAYFLY = 74;

const int CSSM_ALGID_JUNIPER = 75;

const int CSSM_ALGID_FASTHASH = 76;

const int CSSM_ALGID_3DES = 77;

const int CSSM_ALGID_SSL3MD5 = 78;

const int CSSM_ALGID_SSL3SHA1 = 79;

const int CSSM_ALGID_FortezzaTimestamp = 80;

const int CSSM_ALGID_SHA1WithDSA = 81;

const int CSSM_ALGID_SHA1WithECDSA = 82;

const int CSSM_ALGID_DSA_BSAFE = 83;

const int CSSM_ALGID_ECDH = 84;

const int CSSM_ALGID_ECMQV = 85;

const int CSSM_ALGID_PKCS12_SHA1_PBE = 86;

const int CSSM_ALGID_ECNRA = 87;

const int CSSM_ALGID_SHA1WithECNRA = 88;

const int CSSM_ALGID_ECES = 89;

const int CSSM_ALGID_ECAES = 90;

const int CSSM_ALGID_SHA1HMAC = 91;

const int CSSM_ALGID_FIPS186Random = 92;

const int CSSM_ALGID_ECC = 93;

const int CSSM_ALGID_MQV = 94;

const int CSSM_ALGID_NRA = 95;

const int CSSM_ALGID_IntelPlatformRandom = 96;

const int CSSM_ALGID_UTC = 97;

const int CSSM_ALGID_HAVAL3 = 98;

const int CSSM_ALGID_HAVAL4 = 99;

const int CSSM_ALGID_HAVAL5 = 100;

const int CSSM_ALGID_TIGER = 101;

const int CSSM_ALGID_MD5HMAC = 102;

const int CSSM_ALGID_PKCS5_PBKDF2 = 103;

const int CSSM_ALGID_RUNNING_COUNTER = 104;

const int CSSM_ALGID_LAST = 2147483647;

const int CSSM_ALGID_VENDOR_DEFINED = -2147483648;

const int CSSM_ALGMODE_NONE = 0;

const int CSSM_ALGMODE_CUSTOM = 1;

const int CSSM_ALGMODE_ECB = 2;

const int CSSM_ALGMODE_ECBPad = 3;

const int CSSM_ALGMODE_CBC = 4;

const int CSSM_ALGMODE_CBC_IV8 = 5;

const int CSSM_ALGMODE_CBCPadIV8 = 6;

const int CSSM_ALGMODE_CFB = 7;

const int CSSM_ALGMODE_CFB_IV8 = 8;

const int CSSM_ALGMODE_CFBPadIV8 = 9;

const int CSSM_ALGMODE_OFB = 10;

const int CSSM_ALGMODE_OFB_IV8 = 11;

const int CSSM_ALGMODE_OFBPadIV8 = 12;

const int CSSM_ALGMODE_COUNTER = 13;

const int CSSM_ALGMODE_BC = 14;

const int CSSM_ALGMODE_PCBC = 15;

const int CSSM_ALGMODE_CBCC = 16;

const int CSSM_ALGMODE_OFBNLF = 17;

const int CSSM_ALGMODE_PBC = 18;

const int CSSM_ALGMODE_PFB = 19;

const int CSSM_ALGMODE_CBCPD = 20;

const int CSSM_ALGMODE_PUBLIC_KEY = 21;

const int CSSM_ALGMODE_PRIVATE_KEY = 22;

const int CSSM_ALGMODE_SHUFFLE = 23;

const int CSSM_ALGMODE_ECB64 = 24;

const int CSSM_ALGMODE_CBC64 = 25;

const int CSSM_ALGMODE_OFB64 = 26;

const int CSSM_ALGMODE_CFB32 = 28;

const int CSSM_ALGMODE_CFB16 = 29;

const int CSSM_ALGMODE_CFB8 = 30;

const int CSSM_ALGMODE_WRAP = 31;

const int CSSM_ALGMODE_PRIVATE_WRAP = 32;

const int CSSM_ALGMODE_RELAYX = 33;

const int CSSM_ALGMODE_ECB128 = 34;

const int CSSM_ALGMODE_ECB96 = 35;

const int CSSM_ALGMODE_CBC128 = 36;

const int CSSM_ALGMODE_OAEP_HASH = 37;

const int CSSM_ALGMODE_PKCS1_EME_V15 = 38;

const int CSSM_ALGMODE_PKCS1_EME_OAEP = 39;

const int CSSM_ALGMODE_PKCS1_EMSA_V15 = 40;

const int CSSM_ALGMODE_ISO_9796 = 41;

const int CSSM_ALGMODE_X9_31 = 42;

const int CSSM_ALGMODE_LAST = 2147483647;

const int CSSM_ALGMODE_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_SOFTWARE = 1;

const int CSSM_CSP_HARDWARE = 2;

const int CSSM_CSP_HYBRID = 3;

const int CSSM_ALGCLASS_NONE = 0;

const int CSSM_ALGCLASS_CUSTOM = 1;

const int CSSM_ALGCLASS_SIGNATURE = 2;

const int CSSM_ALGCLASS_SYMMETRIC = 3;

const int CSSM_ALGCLASS_DIGEST = 4;

const int CSSM_ALGCLASS_RANDOMGEN = 5;

const int CSSM_ALGCLASS_UNIQUEGEN = 6;

const int CSSM_ALGCLASS_MAC = 7;

const int CSSM_ALGCLASS_ASYMMETRIC = 8;

const int CSSM_ALGCLASS_KEYGEN = 9;

const int CSSM_ALGCLASS_DERIVEKEY = 10;

const int CSSM_ATTRIBUTE_DATA_NONE = 0;

const int CSSM_ATTRIBUTE_DATA_UINT32 = 268435456;

const int CSSM_ATTRIBUTE_DATA_CSSM_DATA = 536870912;

const int CSSM_ATTRIBUTE_DATA_CRYPTO_DATA = 805306368;

const int CSSM_ATTRIBUTE_DATA_KEY = 1073741824;

const int CSSM_ATTRIBUTE_DATA_STRING = 1342177280;

const int CSSM_ATTRIBUTE_DATA_DATE = 1610612736;

const int CSSM_ATTRIBUTE_DATA_RANGE = 1879048192;

const int CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS = -2147483648;

const int CSSM_ATTRIBUTE_DATA_VERSION = 16777216;

const int CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE = 33554432;

const int CSSM_ATTRIBUTE_DATA_KR_PROFILE = 50331648;

const int CSSM_ATTRIBUTE_TYPE_MASK = -16777216;

const int CSSM_ATTRIBUTE_NONE = 0;

const int CSSM_ATTRIBUTE_CUSTOM = 536870913;

const int CSSM_ATTRIBUTE_DESCRIPTION = 1342177282;

const int CSSM_ATTRIBUTE_KEY = 1073741827;

const int CSSM_ATTRIBUTE_INIT_VECTOR = 536870916;

const int CSSM_ATTRIBUTE_SALT = 536870917;

const int CSSM_ATTRIBUTE_PADDING = 268435462;

const int CSSM_ATTRIBUTE_RANDOM = 536870919;

const int CSSM_ATTRIBUTE_SEED = 805306376;

const int CSSM_ATTRIBUTE_PASSPHRASE = 805306377;

const int CSSM_ATTRIBUTE_KEY_LENGTH = 268435466;

const int CSSM_ATTRIBUTE_KEY_LENGTH_RANGE = 1879048203;

const int CSSM_ATTRIBUTE_BLOCK_SIZE = 268435468;

const int CSSM_ATTRIBUTE_OUTPUT_SIZE = 268435469;

const int CSSM_ATTRIBUTE_ROUNDS = 268435470;

const int CSSM_ATTRIBUTE_IV_SIZE = 268435471;

const int CSSM_ATTRIBUTE_ALG_PARAMS = 536870928;

const int CSSM_ATTRIBUTE_LABEL = 536870929;

const int CSSM_ATTRIBUTE_KEY_TYPE = 268435474;

const int CSSM_ATTRIBUTE_MODE = 268435475;

const int CSSM_ATTRIBUTE_EFFECTIVE_BITS = 268435476;

const int CSSM_ATTRIBUTE_START_DATE = 1610612757;

const int CSSM_ATTRIBUTE_END_DATE = 1610612758;

const int CSSM_ATTRIBUTE_KEYUSAGE = 268435479;

const int CSSM_ATTRIBUTE_KEYATTR = 268435480;

const int CSSM_ATTRIBUTE_VERSION = 16777241;

const int CSSM_ATTRIBUTE_PRIME = 536870938;

const int CSSM_ATTRIBUTE_BASE = 536870939;

const int CSSM_ATTRIBUTE_SUBPRIME = 536870940;

const int CSSM_ATTRIBUTE_ALG_ID = 268435485;

const int CSSM_ATTRIBUTE_ITERATION_COUNT = 268435486;

const int CSSM_ATTRIBUTE_ROUNDS_RANGE = 1879048223;

const int CSSM_ATTRIBUTE_KRPROFILE_LOCAL = 50331680;

const int CSSM_ATTRIBUTE_KRPROFILE_REMOTE = 50331681;

const int CSSM_ATTRIBUTE_CSP_HANDLE = 268435490;

const int CSSM_ATTRIBUTE_DL_DB_HANDLE = 33554467;

const int CSSM_ATTRIBUTE_ACCESS_CREDENTIALS = -2147483612;

const int CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT = 268435493;

const int CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT = 268435494;

const int CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT = 268435495;

const int CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT = 268435496;

const int CSSM_PADDING_NONE = 0;

const int CSSM_PADDING_CUSTOM = 1;

const int CSSM_PADDING_ZERO = 2;

const int CSSM_PADDING_ONE = 3;

const int CSSM_PADDING_ALTERNATE = 4;

const int CSSM_PADDING_FF = 5;

const int CSSM_PADDING_PKCS5 = 6;

const int CSSM_PADDING_PKCS7 = 7;

const int CSSM_PADDING_CIPHERSTEALING = 8;

const int CSSM_PADDING_RANDOM = 9;

const int CSSM_PADDING_PKCS1 = 10;

const int CSSM_PADDING_SIGRAW = 11;

const int CSSM_PADDING_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_TOK_RNG = 1;

const int CSSM_CSP_TOK_CLOCK_EXISTS = 64;

const int CSSM_CSP_RDR_TOKENPRESENT = 1;

const int CSSM_CSP_RDR_EXISTS = 2;

const int CSSM_CSP_RDR_HW = 4;

const int CSSM_CSP_TOK_WRITE_PROTECTED = 2;

const int CSSM_CSP_TOK_LOGIN_REQUIRED = 4;

const int CSSM_CSP_TOK_USER_PIN_INITIALIZED = 8;

const int CSSM_CSP_TOK_PROT_AUTHENTICATION = 256;

const int CSSM_CSP_TOK_USER_PIN_EXPIRED = 1048576;

const int CSSM_CSP_TOK_SESSION_KEY_PASSWORD = 2097152;

const int CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD = 4194304;

const int CSSM_CSP_STORES_PRIVATE_KEYS = 16777216;

const int CSSM_CSP_STORES_PUBLIC_KEYS = 33554432;

const int CSSM_CSP_STORES_SESSION_KEYS = 67108864;

const int CSSM_CSP_STORES_CERTIFICATES = 134217728;

const int CSSM_CSP_STORES_GENERIC = 268435456;

const int CSSM_PKCS_OAEP_MGF_NONE = 0;

const int CSSM_PKCS_OAEP_MGF1_SHA1 = 1;

const int CSSM_PKCS_OAEP_MGF1_MD5 = 2;

const int CSSM_PKCS_OAEP_PSOURCE_NONE = 0;

const int CSSM_PKCS_OAEP_PSOURCE_Pspecified = 1;

const int CSSM_VALUE_NOT_AVAILABLE = -1;

const int CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1 = 0;

const int CSSM_TP_AUTHORITY_REQUEST_CERTISSUE = 1;

const int CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE = 2;

const int CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND = 3;

const int CSSM_TP_AUTHORITY_REQUEST_CERTRESUME = 4;

const int CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY = 5;

const int CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE = 6;

const int CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER = 7;

const int CSSM_TP_AUTHORITY_REQUEST_CRLISSUE = 256;

const int CSSM_TP_KEY_ARCHIVE = 1;

const int CSSM_TP_CERT_PUBLISH = 2;

const int CSSM_TP_CERT_NOTIFY_RENEW = 4;

const int CSSM_TP_CERT_DIR_UPDATE = 8;

const int CSSM_TP_CRL_DISTRIBUTE = 16;

const int CSSM_TP_ACTION_DEFAULT = 0;

const int CSSM_TP_STOP_ON_POLICY = 0;

const int CSSM_TP_STOP_ON_NONE = 1;

const int CSSM_TP_STOP_ON_FIRST_PASS = 2;

const int CSSM_TP_STOP_ON_FIRST_FAIL = 3;

const int CSSM_CRL_PARSE_FORMAT_NONE = 0;

const int CSSM_CRL_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CRL_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CRL_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CRL_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CRL_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CRL_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CRL_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CRL_PARSE_FORMAT = 32768;

const int CSSM_CRL_TYPE_UNKNOWN = 0;

const int CSSM_CRL_TYPE_X_509v1 = 1;

const int CSSM_CRL_TYPE_X_509v2 = 2;

const int CSSM_CRL_TYPE_SPKI = 3;

const int CSSM_CRL_TYPE_MULTIPLE = 32766;

const int CSSM_CRL_ENCODING_UNKNOWN = 0;

const int CSSM_CRL_ENCODING_CUSTOM = 1;

const int CSSM_CRL_ENCODING_BER = 2;

const int CSSM_CRL_ENCODING_DER = 3;

const int CSSM_CRL_ENCODING_BLOOM = 4;

const int CSSM_CRL_ENCODING_SEXPR = 5;

const int CSSM_CRL_ENCODING_MULTIPLE = 32766;

const int CSSM_CRLGROUP_DATA = 0;

const int CSSM_CRLGROUP_ENCODED_CRL = 1;

const int CSSM_CRLGROUP_PARSED_CRL = 2;

const int CSSM_CRLGROUP_CRL_PAIR = 3;

const int CSSM_EVIDENCE_FORM_UNSPECIFIC = 0;

const int CSSM_EVIDENCE_FORM_CERT = 1;

const int CSSM_EVIDENCE_FORM_CRL = 2;

const int CSSM_EVIDENCE_FORM_CERT_ID = 3;

const int CSSM_EVIDENCE_FORM_CRL_ID = 4;

const int CSSM_EVIDENCE_FORM_VERIFIER_TIME = 5;

const int CSSM_EVIDENCE_FORM_CRL_THISTIME = 6;

const int CSSM_EVIDENCE_FORM_CRL_NEXTTIME = 7;

const int CSSM_EVIDENCE_FORM_POLICYINFO = 8;

const int CSSM_EVIDENCE_FORM_TUPLEGROUP = 9;

const int CSSM_TP_CONFIRM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CONFIRM_ACCEPT = 1;

const int CSSM_TP_CONFIRM_REJECT = 2;

const int CSSM_ESTIMATED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_COMPLETE = -2;

const int CSSM_TP_CERTISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTISSUE_OK = 1;

const int CSSM_TP_CERTISSUE_OKWITHCERTMODS = 2;

const int CSSM_TP_CERTISSUE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTISSUE_REJECTED = 4;

const int CSSM_TP_CERTISSUE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTISSUE_WILL_BE_REVOKED = 6;

const int CSSM_TP_CERTCHANGE_NONE = 0;

const int CSSM_TP_CERTCHANGE_REVOKE = 1;

const int CSSM_TP_CERTCHANGE_HOLD = 2;

const int CSSM_TP_CERTCHANGE_RELEASE = 3;

const int CSSM_TP_CERTCHANGE_REASON_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE = 1;

const int CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE = 2;

const int CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION = 3;

const int CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE = 4;

const int CSSM_TP_CERTCHANGE_REASON_SUPERCEDED = 5;

const int CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE = 6;

const int CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE = 7;

const int CSSM_TP_CERTCHANGE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_OK = 1;

const int CSSM_TP_CERTCHANGE_OKWITHNEWTIME = 2;

const int CSSM_TP_CERTCHANGE_WRONGCA = 3;

const int CSSM_TP_CERTCHANGE_REJECTED = 4;

const int CSSM_TP_CERTCHANGE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTVERIFY_UNKNOWN = 0;

const int CSSM_TP_CERTVERIFY_VALID = 1;

const int CSSM_TP_CERTVERIFY_INVALID = 2;

const int CSSM_TP_CERTVERIFY_REVOKED = 3;

const int CSSM_TP_CERTVERIFY_SUSPENDED = 4;

const int CSSM_TP_CERTVERIFY_EXPIRED = 5;

const int CSSM_TP_CERTVERIFY_NOT_VALID_YET = 6;

const int CSSM_TP_CERTVERIFY_INVALID_AUTHORITY = 7;

const int CSSM_TP_CERTVERIFY_INVALID_SIGNATURE = 8;

const int CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE = 9;

const int CSSM_TP_CERTVERIFY_INVALID_CERTGROUP = 10;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY = 11;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS = 12;

const int CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS = 13;

const int CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT = 14;

const int CSSM_TP_CERTVERIFY_INVALID_NAME_TREE = 15;

const int CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT = 16;

const int CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTNOTARIZE_OK = 1;

const int CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS = 2;

const int CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTNOTARIZE_REJECTED = 4;

const int CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTRECLAIM_OK = 1;

const int CSSM_TP_CERTRECLAIM_NOMATCH = 2;

const int CSSM_TP_CERTRECLAIM_REJECTED = 3;

const int CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED = 4;

const int CSSM_TP_CRLISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CRLISSUE_OK = 1;

const int CSSM_TP_CRLISSUE_NOT_CURRENT = 2;

const int CSSM_TP_CRLISSUE_INVALID_DOMAIN = 3;

const int CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER = 4;

const int CSSM_TP_CRLISSUE_REJECTED = 5;

const int CSSM_TP_CRLISSUE_NOT_AUTHORIZED = 6;

const int CSSM_TP_FORM_TYPE_GENERIC = 0;

const int CSSM_TP_FORM_TYPE_REGISTRATION = 1;

const int CSSM_CL_TEMPLATE_INTERMEDIATE_CERT = 1;

const int CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE = 2;

const int CSSM_CERT_BUNDLE_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA = 2;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA = 3;

const int CSSM_CERT_BUNDLE_PKCS12 = 4;

const int CSSM_CERT_BUNDLE_PFX = 5;

const int CSSM_CERT_BUNDLE_SPKI_SEQUENCE = 6;

const int CSSM_CERT_BUNDLE_PGP_KEYRING = 7;

const int CSSM_CERT_BUNDLE_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE = 32768;

const int CSSM_CERT_BUNDLE_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_ENCODING_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_ENCODING_BER = 2;

const int CSSM_CERT_BUNDLE_ENCODING_DER = 3;

const int CSSM_CERT_BUNDLE_ENCODING_SEXPR = 4;

const int CSSM_CERT_BUNDLE_ENCODING_PGP = 5;

const int CSSM_FIELDVALUE_COMPLEX_DATA_TYPE = -1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_STRING = 0;

const int CSSM_DB_ATTRIBUTE_NAME_AS_OID = 1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_STRING = 0;

const int CSSM_DB_ATTRIBUTE_FORMAT_SINT32 = 1;

const int CSSM_DB_ATTRIBUTE_FORMAT_UINT32 = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM = 3;

const int CSSM_DB_ATTRIBUTE_FORMAT_REAL = 4;

const int CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE = 5;

const int CSSM_DB_ATTRIBUTE_FORMAT_BLOB = 6;

const int CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32 = 7;

const int CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX = 8;

const int CSSM_DB_RECORDTYPE_SCHEMA_START = 0;

const int CSSM_DB_RECORDTYPE_SCHEMA_END = 4;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_START = 10;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_END = 18;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_START = -2147483648;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_END = -1;

const int CSSM_DL_DB_SCHEMA_INFO = 0;

const int CSSM_DL_DB_SCHEMA_INDEXES = 1;

const int CSSM_DL_DB_SCHEMA_ATTRIBUTES = 2;

const int CSSM_DL_DB_SCHEMA_PARSING_MODULE = 3;

const int CSSM_DL_DB_RECORD_ANY = 10;

const int CSSM_DL_DB_RECORD_CERT = 11;

const int CSSM_DL_DB_RECORD_CRL = 12;

const int CSSM_DL_DB_RECORD_POLICY = 13;

const int CSSM_DL_DB_RECORD_GENERIC = 14;

const int CSSM_DL_DB_RECORD_PUBLIC_KEY = 15;

const int CSSM_DL_DB_RECORD_PRIVATE_KEY = 16;

const int CSSM_DL_DB_RECORD_SYMMETRIC_KEY = 17;

const int CSSM_DL_DB_RECORD_ALL_KEYS = 18;

const int CSSM_DB_CERT_USE_TRUSTED = 1;

const int CSSM_DB_CERT_USE_SYSTEM = 2;

const int CSSM_DB_CERT_USE_OWNER = 4;

const int CSSM_DB_CERT_USE_REVOKED = 8;

const int CSSM_DB_CERT_USE_SIGNING = 16;

const int CSSM_DB_CERT_USE_PRIVACY = 32;

const int CSSM_DB_INDEX_UNIQUE = 0;

const int CSSM_DB_INDEX_NONUNIQUE = 1;

const int CSSM_DB_INDEX_ON_UNKNOWN = 0;

const int CSSM_DB_INDEX_ON_ATTRIBUTE = 1;

const int CSSM_DB_INDEX_ON_RECORD = 2;

const int CSSM_DB_ACCESS_READ = 1;

const int CSSM_DB_ACCESS_WRITE = 2;

const int CSSM_DB_ACCESS_PRIVILEGED = 4;

const int CSSM_DB_MODIFY_ATTRIBUTE_NONE = 0;

const int CSSM_DB_MODIFY_ATTRIBUTE_ADD = 1;

const int CSSM_DB_MODIFY_ATTRIBUTE_DELETE = 2;

const int CSSM_DB_MODIFY_ATTRIBUTE_REPLACE = 3;

const int CSSM_DB_EQUAL = 0;

const int CSSM_DB_NOT_EQUAL = 1;

const int CSSM_DB_LESS_THAN = 2;

const int CSSM_DB_GREATER_THAN = 3;

const int CSSM_DB_CONTAINS = 4;

const int CSSM_DB_CONTAINS_INITIAL_SUBSTRING = 5;

const int CSSM_DB_CONTAINS_FINAL_SUBSTRING = 6;

const int CSSM_DB_NONE = 0;

const int CSSM_DB_AND = 1;

const int CSSM_DB_OR = 2;

const int CSSM_QUERY_TIMELIMIT_NONE = 0;

const int CSSM_QUERY_SIZELIMIT_NONE = 0;

const int CSSM_QUERY_RETURN_DATA = 1;

const int CSSM_DL_UNKNOWN = 0;

const int CSSM_DL_CUSTOM = 1;

const int CSSM_DL_LDAP = 2;

const int CSSM_DL_ODBC = 3;

const int CSSM_DL_PKCS11 = 4;

const int CSSM_DL_FFS = 5;

const int CSSM_DL_MEMORY = 6;

const int CSSM_DL_REMOTEDIR = 7;

const int CSSM_DB_DATASTORES_UNKNOWN = -1;

const int CSSM_DB_TRANSACTIONAL_MODE = 0;

const int CSSM_DB_FILESYSTEMSCAN_MODE = 1;

const int CSSM_BASE_ERROR = -2147418112;

const int CSSM_ERRORCODE_MODULE_EXTENT = 2048;

const int CSSM_ERRORCODE_CUSTOM_OFFSET = 1024;

const int CSSM_ERRORCODE_COMMON_EXTENT = 256;

const int CSSM_CSSM_BASE_ERROR = -2147418112;

const int CSSM_CSSM_PRIVATE_ERROR = -2147417088;

const int CSSM_CSP_BASE_ERROR = -2147416064;

const int CSSM_CSP_PRIVATE_ERROR = -2147415040;

const int CSSM_DL_BASE_ERROR = -2147414016;

const int CSSM_DL_PRIVATE_ERROR = -2147412992;

const int CSSM_CL_BASE_ERROR = -2147411968;

const int CSSM_CL_PRIVATE_ERROR = -2147410944;

const int CSSM_TP_BASE_ERROR = -2147409920;

const int CSSM_TP_PRIVATE_ERROR = -2147408896;

const int CSSM_KR_BASE_ERROR = -2147407872;

const int CSSM_KR_PRIVATE_ERROR = -2147406848;

const int CSSM_AC_BASE_ERROR = -2147405824;

const int CSSM_AC_PRIVATE_ERROR = -2147404800;

const int CSSM_MDS_BASE_ERROR = -2147414016;

const int CSSM_MDS_PRIVATE_ERROR = -2147412992;

const int CSSMERR_CSSM_INVALID_ADDIN_HANDLE = -2147417855;

const int CSSMERR_CSSM_NOT_INITIALIZED = -2147417854;

const int CSSMERR_CSSM_INVALID_HANDLE_USAGE = -2147417853;

const int CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND = -2147417852;

const int CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL = -2147417851;

const int CSSM_ERRCODE_INTERNAL_ERROR = 1;

const int CSSM_ERRCODE_MEMORY_ERROR = 2;

const int CSSM_ERRCODE_MDS_ERROR = 3;

const int CSSM_ERRCODE_INVALID_POINTER = 4;

const int CSSM_ERRCODE_INVALID_INPUT_POINTER = 5;

const int CSSM_ERRCODE_INVALID_OUTPUT_POINTER = 6;

const int CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED = 7;

const int CSSM_ERRCODE_SELF_CHECK_FAILED = 8;

const int CSSM_ERRCODE_OS_ACCESS_DENIED = 9;

const int CSSM_ERRCODE_FUNCTION_FAILED = 10;

const int CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED = 11;

const int CSSM_ERRCODE_INVALID_GUID = 12;

const int CSSM_ERRCODE_OPERATION_AUTH_DENIED = 32;

const int CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED = 33;

const int CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED = 34;

const int CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED = 35;

const int CSSM_ERRCODE_OBJECT_ACL_REQUIRED = 36;

const int CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS = 37;

const int CSSM_ERRCODE_INVALID_ACL_BASE_CERTS = 38;

const int CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED = 39;

const int CSSM_ERRCODE_INVALID_SAMPLE_VALUE = 40;

const int CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED = 41;

const int CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE = 42;

const int CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED = 43;

const int CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK = 44;

const int CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED = 45;

const int CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG = 46;

const int CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND = 47;

const int CSSM_ERRCODE_INVALID_ACL_EDIT_MODE = 48;

const int CSSM_ERRCODE_ACL_CHANGE_FAILED = 49;

const int CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY = 50;

const int CSSM_ERRCODE_INVALID_NEW_ACL_OWNER = 51;

const int CSSM_ERRCODE_ACL_DELETE_FAILED = 52;

const int CSSM_ERRCODE_ACL_REPLACE_FAILED = 53;

const int CSSM_ERRCODE_ACL_ADD_FAILED = 54;

const int CSSM_ERRCODE_INVALID_CONTEXT_HANDLE = 64;

const int CSSM_ERRCODE_INCOMPATIBLE_VERSION = 65;

const int CSSM_ERRCODE_INVALID_CERTGROUP_POINTER = 66;

const int CSSM_ERRCODE_INVALID_CERT_POINTER = 67;

const int CSSM_ERRCODE_INVALID_CRL_POINTER = 68;

const int CSSM_ERRCODE_INVALID_FIELD_POINTER = 69;

const int CSSM_ERRCODE_INVALID_DATA = 70;

const int CSSM_ERRCODE_CRL_ALREADY_SIGNED = 71;

const int CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS = 72;

const int CSSM_ERRCODE_VERIFICATION_FAILURE = 73;

const int CSSM_ERRCODE_INVALID_DB_HANDLE = 74;

const int CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED = 75;

const int CSSM_ERRCODE_INVALID_DB_LIST = 76;

const int CSSM_ERRCODE_INVALID_DB_LIST_POINTER = 77;

const int CSSM_ERRCODE_UNKNOWN_FORMAT = 78;

const int CSSM_ERRCODE_UNKNOWN_TAG = 79;

const int CSSM_ERRCODE_INVALID_CSP_HANDLE = 80;

const int CSSM_ERRCODE_INVALID_DL_HANDLE = 81;

const int CSSM_ERRCODE_INVALID_CL_HANDLE = 82;

const int CSSM_ERRCODE_INVALID_TP_HANDLE = 83;

const int CSSM_ERRCODE_INVALID_KR_HANDLE = 84;

const int CSSM_ERRCODE_INVALID_AC_HANDLE = 85;

const int CSSM_ERRCODE_INVALID_PASSTHROUGH_ID = 86;

const int CSSM_ERRCODE_INVALID_NETWORK_ADDR = 87;

const int CSSM_ERRCODE_INVALID_CRYPTO_DATA = 88;

const int CSSMERR_CSSM_INTERNAL_ERROR = -2147418111;

const int CSSMERR_CSSM_MEMORY_ERROR = -2147418110;

const int CSSMERR_CSSM_MDS_ERROR = -2147418109;

const int CSSMERR_CSSM_INVALID_POINTER = -2147418108;

const int CSSMERR_CSSM_INVALID_INPUT_POINTER = -2147418107;

const int CSSMERR_CSSM_INVALID_OUTPUT_POINTER = -2147418106;

const int CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED = -2147418105;

const int CSSMERR_CSSM_SELF_CHECK_FAILED = -2147418104;

const int CSSMERR_CSSM_OS_ACCESS_DENIED = -2147418103;

const int CSSMERR_CSSM_FUNCTION_FAILED = -2147418102;

const int CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED = -2147418101;

const int CSSMERR_CSSM_INVALID_GUID = -2147418100;

const int CSSMERR_CSSM_INVALID_CONTEXT_HANDLE = -2147418048;

const int CSSMERR_CSSM_INCOMPATIBLE_VERSION = -2147418047;

const int CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED = -2147418037;

const int CSSM_CSSM_BASE_CSSM_ERROR = -2147417840;

const int CSSMERR_CSSM_SCOPE_NOT_SUPPORTED = -2147417839;

const int CSSMERR_CSSM_PVC_ALREADY_CONFIGURED = -2147417838;

const int CSSMERR_CSSM_INVALID_PVC = -2147417837;

const int CSSMERR_CSSM_EMM_LOAD_FAILED = -2147417836;

const int CSSMERR_CSSM_EMM_UNLOAD_FAILED = -2147417835;

const int CSSMERR_CSSM_ADDIN_LOAD_FAILED = -2147417834;

const int CSSMERR_CSSM_INVALID_KEY_HIERARCHY = -2147417833;

const int CSSMERR_CSSM_ADDIN_UNLOAD_FAILED = -2147417832;

const int CSSMERR_CSSM_LIB_REF_NOT_FOUND = -2147417831;

const int CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE = -2147417830;

const int CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED = -2147417829;

const int CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED = -2147417828;

const int CSSMERR_CSSM_INVALID_SERVICE_MASK = -2147417827;

const int CSSMERR_CSSM_MODULE_NOT_LOADED = -2147417826;

const int CSSMERR_CSSM_INVALID_SUBSERVICEID = -2147417825;

const int CSSMERR_CSSM_BUFFER_TOO_SMALL = -2147417824;

const int CSSMERR_CSSM_INVALID_ATTRIBUTE = -2147417823;

const int CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT = -2147417822;

const int CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL = -2147417821;

const int CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND = -2147417820;

const int CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND = -2147417819;

const int CSSMERR_CSP_INTERNAL_ERROR = -2147416063;

const int CSSMERR_CSP_MEMORY_ERROR = -2147416062;

const int CSSMERR_CSP_MDS_ERROR = -2147416061;

const int CSSMERR_CSP_INVALID_POINTER = -2147416060;

const int CSSMERR_CSP_INVALID_INPUT_POINTER = -2147416059;

const int CSSMERR_CSP_INVALID_OUTPUT_POINTER = -2147416058;

const int CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED = -2147416057;

const int CSSMERR_CSP_SELF_CHECK_FAILED = -2147416056;

const int CSSMERR_CSP_OS_ACCESS_DENIED = -2147416055;

const int CSSMERR_CSP_FUNCTION_FAILED = -2147416054;

const int CSSMERR_CSP_OPERATION_AUTH_DENIED = -2147416032;

const int CSSMERR_CSP_OBJECT_USE_AUTH_DENIED = -2147416031;

const int CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED = -2147416030;

const int CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED = -2147416029;

const int CSSMERR_CSP_OBJECT_ACL_REQUIRED = -2147416028;

const int CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS = -2147416027;

const int CSSMERR_CSP_INVALID_ACL_BASE_CERTS = -2147416026;

const int CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED = -2147416025;

const int CSSMERR_CSP_INVALID_SAMPLE_VALUE = -2147416024;

const int CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED = -2147416023;

const int CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE = -2147416022;

const int CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147416021;

const int CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK = -2147416020;

const int CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED = -2147416019;

const int CSSMERR_CSP_INVALID_ACL_ENTRY_TAG = -2147416018;

const int CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND = -2147416017;

const int CSSMERR_CSP_INVALID_ACL_EDIT_MODE = -2147416016;

const int CSSMERR_CSP_ACL_CHANGE_FAILED = -2147416015;

const int CSSMERR_CSP_INVALID_NEW_ACL_ENTRY = -2147416014;

const int CSSMERR_CSP_INVALID_NEW_ACL_OWNER = -2147416013;

const int CSSMERR_CSP_ACL_DELETE_FAILED = -2147416012;

const int CSSMERR_CSP_ACL_REPLACE_FAILED = -2147416011;

const int CSSMERR_CSP_ACL_ADD_FAILED = -2147416010;

const int CSSMERR_CSP_INVALID_CONTEXT_HANDLE = -2147416000;

const int CSSMERR_CSP_PRIVILEGE_NOT_GRANTED = -2147415989;

const int CSSMERR_CSP_INVALID_DATA = -2147415994;

const int CSSMERR_CSP_INVALID_PASSTHROUGH_ID = -2147415978;

const int CSSMERR_CSP_INVALID_CRYPTO_DATA = -2147415976;

const int CSSM_CSP_BASE_CSP_ERROR = -2147415808;

const int CSSMERR_CSP_INPUT_LENGTH_ERROR = -2147415807;

const int CSSMERR_CSP_OUTPUT_LENGTH_ERROR = -2147415806;

const int CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED = -2147415805;

const int CSSMERR_CSP_DEVICE_ERROR = -2147415804;

const int CSSMERR_CSP_DEVICE_MEMORY_ERROR = -2147415803;

const int CSSMERR_CSP_ATTACH_HANDLE_BUSY = -2147415802;

const int CSSMERR_CSP_NOT_LOGGED_IN = -2147415801;

const int CSSMERR_CSP_INVALID_KEY = -2147415792;

const int CSSMERR_CSP_INVALID_KEY_REFERENCE = -2147415791;

const int CSSMERR_CSP_INVALID_KEY_CLASS = -2147415790;

const int CSSMERR_CSP_ALGID_MISMATCH = -2147415789;

const int CSSMERR_CSP_KEY_USAGE_INCORRECT = -2147415788;

const int CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT = -2147415787;

const int CSSMERR_CSP_KEY_HEADER_INCONSISTENT = -2147415786;

const int CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT = -2147415785;

const int CSSMERR_CSP_UNSUPPORTED_KEY_SIZE = -2147415784;

const int CSSMERR_CSP_INVALID_KEY_POINTER = -2147415783;

const int CSSMERR_CSP_INVALID_KEYUSAGE_MASK = -2147415782;

const int CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK = -2147415781;

const int CSSMERR_CSP_INVALID_KEYATTR_MASK = -2147415780;

const int CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK = -2147415779;

const int CSSMERR_CSP_INVALID_KEY_LABEL = -2147415778;

const int CSSMERR_CSP_UNSUPPORTED_KEY_LABEL = -2147415777;

const int CSSMERR_CSP_INVALID_KEY_FORMAT = -2147415776;

const int CSSMERR_CSP_INVALID_DATA_COUNT = -2147415768;

const int CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED = -2147415767;

const int CSSMERR_CSP_INVALID_INPUT_VECTOR = -2147415766;

const int CSSMERR_CSP_INVALID_OUTPUT_VECTOR = -2147415765;

const int CSSMERR_CSP_INVALID_CONTEXT = -2147415760;

const int CSSMERR_CSP_INVALID_ALGORITHM = -2147415759;

const int CSSMERR_CSP_INVALID_ATTR_KEY = -2147415754;

const int CSSMERR_CSP_MISSING_ATTR_KEY = -2147415753;

const int CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR = -2147415752;

const int CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR = -2147415751;

const int CSSMERR_CSP_INVALID_ATTR_SALT = -2147415750;

const int CSSMERR_CSP_MISSING_ATTR_SALT = -2147415749;

const int CSSMERR_CSP_INVALID_ATTR_PADDING = -2147415748;

const int CSSMERR_CSP_MISSING_ATTR_PADDING = -2147415747;

const int CSSMERR_CSP_INVALID_ATTR_RANDOM = -2147415746;

const int CSSMERR_CSP_MISSING_ATTR_RANDOM = -2147415745;

const int CSSMERR_CSP_INVALID_ATTR_SEED = -2147415744;

const int CSSMERR_CSP_MISSING_ATTR_SEED = -2147415743;

const int CSSMERR_CSP_INVALID_ATTR_PASSPHRASE = -2147415742;

const int CSSMERR_CSP_MISSING_ATTR_PASSPHRASE = -2147415741;

const int CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH = -2147415740;

const int CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH = -2147415739;

const int CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE = -2147415738;

const int CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE = -2147415737;

const int CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE = -2147415708;

const int CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE = -2147415707;

const int CSSMERR_CSP_INVALID_ATTR_ROUNDS = -2147415706;

const int CSSMERR_CSP_MISSING_ATTR_ROUNDS = -2147415705;

const int CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS = -2147415704;

const int CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS = -2147415703;

const int CSSMERR_CSP_INVALID_ATTR_LABEL = -2147415702;

const int CSSMERR_CSP_MISSING_ATTR_LABEL = -2147415701;

const int CSSMERR_CSP_INVALID_ATTR_KEY_TYPE = -2147415700;

const int CSSMERR_CSP_MISSING_ATTR_KEY_TYPE = -2147415699;

const int CSSMERR_CSP_INVALID_ATTR_MODE = -2147415698;

const int CSSMERR_CSP_MISSING_ATTR_MODE = -2147415697;

const int CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS = -2147415696;

const int CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS = -2147415695;

const int CSSMERR_CSP_INVALID_ATTR_START_DATE = -2147415694;

const int CSSMERR_CSP_MISSING_ATTR_START_DATE = -2147415693;

const int CSSMERR_CSP_INVALID_ATTR_END_DATE = -2147415692;

const int CSSMERR_CSP_MISSING_ATTR_END_DATE = -2147415691;

const int CSSMERR_CSP_INVALID_ATTR_VERSION = -2147415690;

const int CSSMERR_CSP_MISSING_ATTR_VERSION = -2147415689;

const int CSSMERR_CSP_INVALID_ATTR_PRIME = -2147415688;

const int CSSMERR_CSP_MISSING_ATTR_PRIME = -2147415687;

const int CSSMERR_CSP_INVALID_ATTR_BASE = -2147415686;

const int CSSMERR_CSP_MISSING_ATTR_BASE = -2147415685;

const int CSSMERR_CSP_INVALID_ATTR_SUBPRIME = -2147415684;

const int CSSMERR_CSP_MISSING_ATTR_SUBPRIME = -2147415683;

const int CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT = -2147415682;

const int CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT = -2147415681;

const int CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE = -2147415680;

const int CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE = -2147415679;

const int CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS = -2147415678;

const int CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS = -2147415677;

const int CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT = -2147415676;

const int CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT = -2147415675;

const int CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT = -2147415674;

const int CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT = -2147415673;

const int CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT = -2147415672;

const int CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT = -2147415671;

const int CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT = -2147415670;

const int CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT = -2147415669;

const int CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS = -2147415736;

const int CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED = -2147415735;

const int CSSMERR_CSP_VERIFY_FAILED = -2147415734;

const int CSSMERR_CSP_INVALID_SIGNATURE = -2147415733;

const int CSSMERR_CSP_QUERY_SIZE_UNKNOWN = -2147415732;

const int CSSMERR_CSP_BLOCK_SIZE_MISMATCH = -2147415731;

const int CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND = -2147415730;

const int CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT = -2147415729;

const int CSSMERR_CSP_DEVICE_VERIFY_FAILED = -2147415728;

const int CSSMERR_CSP_INVALID_LOGIN_NAME = -2147415727;

const int CSSMERR_CSP_ALREADY_LOGGED_IN = -2147415726;

const int CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS = -2147415725;

const int CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS = -2147415724;

const int CSSMERR_CSP_INVALID_DIGEST_ALGORITHM = -2147415723;

const int CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED = -2147415722;

const int CSSMERR_TP_INTERNAL_ERROR = -2147409919;

const int CSSMERR_TP_MEMORY_ERROR = -2147409918;

const int CSSMERR_TP_MDS_ERROR = -2147409917;

const int CSSMERR_TP_INVALID_POINTER = -2147409916;

const int CSSMERR_TP_INVALID_INPUT_POINTER = -2147409915;

const int CSSMERR_TP_INVALID_OUTPUT_POINTER = -2147409914;

const int CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED = -2147409913;

const int CSSMERR_TP_SELF_CHECK_FAILED = -2147409912;

const int CSSMERR_TP_OS_ACCESS_DENIED = -2147409911;

const int CSSMERR_TP_FUNCTION_FAILED = -2147409910;

const int CSSMERR_TP_INVALID_CONTEXT_HANDLE = -2147409856;

const int CSSMERR_TP_INVALID_DATA = -2147409850;

const int CSSMERR_TP_INVALID_DB_LIST = -2147409844;

const int CSSMERR_TP_INVALID_CERTGROUP_POINTER = -2147409854;

const int CSSMERR_TP_INVALID_CERT_POINTER = -2147409853;

const int CSSMERR_TP_INVALID_CRL_POINTER = -2147409852;

const int CSSMERR_TP_INVALID_FIELD_POINTER = -2147409851;

const int CSSMERR_TP_INVALID_NETWORK_ADDR = -2147409833;

const int CSSMERR_TP_CRL_ALREADY_SIGNED = -2147409849;

const int CSSMERR_TP_INVALID_NUMBER_OF_FIELDS = -2147409848;

const int CSSMERR_TP_VERIFICATION_FAILURE = -2147409847;

const int CSSMERR_TP_INVALID_DB_HANDLE = -2147409846;

const int CSSMERR_TP_UNKNOWN_FORMAT = -2147409842;

const int CSSMERR_TP_UNKNOWN_TAG = -2147409841;

const int CSSMERR_TP_INVALID_PASSTHROUGH_ID = -2147409834;

const int CSSMERR_TP_INVALID_CSP_HANDLE = -2147409840;

const int CSSMERR_TP_INVALID_DL_HANDLE = -2147409839;

const int CSSMERR_TP_INVALID_CL_HANDLE = -2147409838;

const int CSSMERR_TP_INVALID_DB_LIST_POINTER = -2147409843;

const int CSSM_TP_BASE_TP_ERROR = -2147409664;

const int CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER = -2147409663;

const int CSSMERR_TP_INVALID_IDENTIFIER_POINTER = -2147409662;

const int CSSMERR_TP_INVALID_KEYCACHE_HANDLE = -2147409661;

const int CSSMERR_TP_INVALID_CERTGROUP = -2147409660;

const int CSSMERR_TP_INVALID_CRLGROUP = -2147409659;

const int CSSMERR_TP_INVALID_CRLGROUP_POINTER = -2147409658;

const int CSSMERR_TP_AUTHENTICATION_FAILED = -2147409657;

const int CSSMERR_TP_CERTGROUP_INCOMPLETE = -2147409656;

const int CSSMERR_TP_CERTIFICATE_CANT_OPERATE = -2147409655;

const int CSSMERR_TP_CERT_EXPIRED = -2147409654;

const int CSSMERR_TP_CERT_NOT_VALID_YET = -2147409653;

const int CSSMERR_TP_CERT_REVOKED = -2147409652;

const int CSSMERR_TP_CERT_SUSPENDED = -2147409651;

const int CSSMERR_TP_INSUFFICIENT_CREDENTIALS = -2147409650;

const int CSSMERR_TP_INVALID_ACTION = -2147409649;

const int CSSMERR_TP_INVALID_ACTION_DATA = -2147409648;

const int CSSMERR_TP_INVALID_ANCHOR_CERT = -2147409646;

const int CSSMERR_TP_INVALID_AUTHORITY = -2147409645;

const int CSSMERR_TP_VERIFY_ACTION_FAILED = -2147409644;

const int CSSMERR_TP_INVALID_CERTIFICATE = -2147409643;

const int CSSMERR_TP_INVALID_CERT_AUTHORITY = -2147409642;

const int CSSMERR_TP_INVALID_CRL_AUTHORITY = -2147409641;

const int CSSMERR_TP_INVALID_CRL_ENCODING = -2147409640;

const int CSSMERR_TP_INVALID_CRL_TYPE = -2147409639;

const int CSSMERR_TP_INVALID_CRL = -2147409638;

const int CSSMERR_TP_INVALID_FORM_TYPE = -2147409637;

const int CSSMERR_TP_INVALID_ID = -2147409636;

const int CSSMERR_TP_INVALID_IDENTIFIER = -2147409635;

const int CSSMERR_TP_INVALID_INDEX = -2147409634;

const int CSSMERR_TP_INVALID_NAME = -2147409633;

const int CSSMERR_TP_INVALID_POLICY_IDENTIFIERS = -2147409632;

const int CSSMERR_TP_INVALID_TIMESTRING = -2147409631;

const int CSSMERR_TP_INVALID_REASON = -2147409630;

const int CSSMERR_TP_INVALID_REQUEST_INPUTS = -2147409629;

const int CSSMERR_TP_INVALID_RESPONSE_VECTOR = -2147409628;

const int CSSMERR_TP_INVALID_SIGNATURE = -2147409627;

const int CSSMERR_TP_INVALID_STOP_ON_POLICY = -2147409626;

const int CSSMERR_TP_INVALID_CALLBACK = -2147409625;

const int CSSMERR_TP_INVALID_TUPLE = -2147409624;

const int CSSMERR_TP_NOT_SIGNER = -2147409623;

const int CSSMERR_TP_NOT_TRUSTED = -2147409622;

const int CSSMERR_TP_NO_DEFAULT_AUTHORITY = -2147409621;

const int CSSMERR_TP_REJECTED_FORM = -2147409620;

const int CSSMERR_TP_REQUEST_LOST = -2147409619;

const int CSSMERR_TP_REQUEST_REJECTED = -2147409618;

const int CSSMERR_TP_UNSUPPORTED_ADDR_TYPE = -2147409617;

const int CSSMERR_TP_UNSUPPORTED_SERVICE = -2147409616;

const int CSSMERR_TP_INVALID_TUPLEGROUP_POINTER = -2147409615;

const int CSSMERR_TP_INVALID_TUPLEGROUP = -2147409614;

const int CSSMERR_AC_INTERNAL_ERROR = -2147405823;

const int CSSMERR_AC_MEMORY_ERROR = -2147405822;

const int CSSMERR_AC_MDS_ERROR = -2147405821;

const int CSSMERR_AC_INVALID_POINTER = -2147405820;

const int CSSMERR_AC_INVALID_INPUT_POINTER = -2147405819;

const int CSSMERR_AC_INVALID_OUTPUT_POINTER = -2147405818;

const int CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED = -2147405817;

const int CSSMERR_AC_SELF_CHECK_FAILED = -2147405816;

const int CSSMERR_AC_OS_ACCESS_DENIED = -2147405815;

const int CSSMERR_AC_FUNCTION_FAILED = -2147405814;

const int CSSMERR_AC_INVALID_CONTEXT_HANDLE = -2147405760;

const int CSSMERR_AC_INVALID_DATA = -2147405754;

const int CSSMERR_AC_INVALID_DB_LIST = -2147405748;

const int CSSMERR_AC_INVALID_PASSTHROUGH_ID = -2147405738;

const int CSSMERR_AC_INVALID_DL_HANDLE = -2147405743;

const int CSSMERR_AC_INVALID_CL_HANDLE = -2147405742;

const int CSSMERR_AC_INVALID_TP_HANDLE = -2147405741;

const int CSSMERR_AC_INVALID_DB_HANDLE = -2147405750;

const int CSSMERR_AC_INVALID_DB_LIST_POINTER = -2147405747;

const int CSSM_AC_BASE_AC_ERROR = -2147405568;

const int CSSMERR_AC_INVALID_BASE_ACLS = -2147405567;

const int CSSMERR_AC_INVALID_TUPLE_CREDENTIALS = -2147405566;

const int CSSMERR_AC_INVALID_ENCODING = -2147405565;

const int CSSMERR_AC_INVALID_VALIDITY_PERIOD = -2147405564;

const int CSSMERR_AC_INVALID_REQUESTOR = -2147405563;

const int CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR = -2147405562;

const int CSSMERR_CL_INTERNAL_ERROR = -2147411967;

const int CSSMERR_CL_MEMORY_ERROR = -2147411966;

const int CSSMERR_CL_MDS_ERROR = -2147411965;

const int CSSMERR_CL_INVALID_POINTER = -2147411964;

const int CSSMERR_CL_INVALID_INPUT_POINTER = -2147411963;

const int CSSMERR_CL_INVALID_OUTPUT_POINTER = -2147411962;

const int CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED = -2147411961;

const int CSSMERR_CL_SELF_CHECK_FAILED = -2147411960;

const int CSSMERR_CL_OS_ACCESS_DENIED = -2147411959;

const int CSSMERR_CL_FUNCTION_FAILED = -2147411958;

const int CSSMERR_CL_INVALID_CONTEXT_HANDLE = -2147411904;

const int CSSMERR_CL_INVALID_CERTGROUP_POINTER = -2147411902;

const int CSSMERR_CL_INVALID_CERT_POINTER = -2147411901;

const int CSSMERR_CL_INVALID_CRL_POINTER = -2147411900;

const int CSSMERR_CL_INVALID_FIELD_POINTER = -2147411899;

const int CSSMERR_CL_INVALID_DATA = -2147411898;

const int CSSMERR_CL_CRL_ALREADY_SIGNED = -2147411897;

const int CSSMERR_CL_INVALID_NUMBER_OF_FIELDS = -2147411896;

const int CSSMERR_CL_VERIFICATION_FAILURE = -2147411895;

const int CSSMERR_CL_UNKNOWN_FORMAT = -2147411890;

const int CSSMERR_CL_UNKNOWN_TAG = -2147411889;

const int CSSMERR_CL_INVALID_PASSTHROUGH_ID = -2147411882;

const int CSSM_CL_BASE_CL_ERROR = -2147411712;

const int CSSMERR_CL_INVALID_BUNDLE_POINTER = -2147411711;

const int CSSMERR_CL_INVALID_CACHE_HANDLE = -2147411710;

const int CSSMERR_CL_INVALID_RESULTS_HANDLE = -2147411709;

const int CSSMERR_CL_INVALID_BUNDLE_INFO = -2147411708;

const int CSSMERR_CL_INVALID_CRL_INDEX = -2147411707;

const int CSSMERR_CL_INVALID_SCOPE = -2147411706;

const int CSSMERR_CL_NO_FIELD_VALUES = -2147411705;

const int CSSMERR_CL_SCOPE_NOT_SUPPORTED = -2147411704;

const int CSSMERR_DL_INTERNAL_ERROR = -2147414015;

const int CSSMERR_DL_MEMORY_ERROR = -2147414014;

const int CSSMERR_DL_MDS_ERROR = -2147414013;

const int CSSMERR_DL_INVALID_POINTER = -2147414012;

const int CSSMERR_DL_INVALID_INPUT_POINTER = -2147414011;

const int CSSMERR_DL_INVALID_OUTPUT_POINTER = -2147414010;

const int CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED = -2147414009;

const int CSSMERR_DL_SELF_CHECK_FAILED = -2147414008;

const int CSSMERR_DL_OS_ACCESS_DENIED = -2147414007;

const int CSSMERR_DL_FUNCTION_FAILED = -2147414006;

const int CSSMERR_DL_INVALID_CSP_HANDLE = -2147413936;

const int CSSMERR_DL_INVALID_DL_HANDLE = -2147413935;

const int CSSMERR_DL_INVALID_CL_HANDLE = -2147413934;

const int CSSMERR_DL_INVALID_DB_LIST_POINTER = -2147413939;

const int CSSMERR_DL_OPERATION_AUTH_DENIED = -2147413984;

const int CSSMERR_DL_OBJECT_USE_AUTH_DENIED = -2147413983;

const int CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED = -2147413982;

const int CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED = -2147413981;

const int CSSMERR_DL_OBJECT_ACL_REQUIRED = -2147413980;

const int CSSMERR_DL_INVALID_ACCESS_CREDENTIALS = -2147413979;

const int CSSMERR_DL_INVALID_ACL_BASE_CERTS = -2147413978;

const int CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED = -2147413977;

const int CSSMERR_DL_INVALID_SAMPLE_VALUE = -2147413976;

const int CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED = -2147413975;

const int CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE = -2147413974;

const int CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147413973;

const int CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK = -2147413972;

const int CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED = -2147413971;

const int CSSMERR_DL_INVALID_ACL_ENTRY_TAG = -2147413970;

const int CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND = -2147413969;

const int CSSMERR_DL_INVALID_ACL_EDIT_MODE = -2147413968;

const int CSSMERR_DL_ACL_CHANGE_FAILED = -2147413967;

const int CSSMERR_DL_INVALID_NEW_ACL_ENTRY = -2147413966;

const int CSSMERR_DL_INVALID_NEW_ACL_OWNER = -2147413965;

const int CSSMERR_DL_ACL_DELETE_FAILED = -2147413964;

const int CSSMERR_DL_ACL_REPLACE_FAILED = -2147413963;

const int CSSMERR_DL_ACL_ADD_FAILED = -2147413962;

const int CSSMERR_DL_INVALID_DB_HANDLE = -2147413942;

const int CSSMERR_DL_INVALID_PASSTHROUGH_ID = -2147413930;

const int CSSMERR_DL_INVALID_NETWORK_ADDR = -2147413929;

const int CSSM_DL_BASE_DL_ERROR = -2147413760;

const int CSSMERR_DL_DATABASE_CORRUPT = -2147413759;

const int CSSMERR_DL_INVALID_RECORD_INDEX = -2147413752;

const int CSSMERR_DL_INVALID_RECORDTYPE = -2147413751;

const int CSSMERR_DL_INVALID_FIELD_NAME = -2147413750;

const int CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT = -2147413749;

const int CSSMERR_DL_UNSUPPORTED_INDEX_INFO = -2147413748;

const int CSSMERR_DL_UNSUPPORTED_LOCALITY = -2147413747;

const int CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES = -2147413746;

const int CSSMERR_DL_UNSUPPORTED_NUM_INDEXES = -2147413745;

const int CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES = -2147413744;

const int CSSMERR_DL_UNSUPPORTED_RECORDTYPE = -2147413743;

const int CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE = -2147413742;

const int CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT = -2147413741;

const int CSSMERR_DL_INVALID_PARSING_MODULE = -2147413740;

const int CSSMERR_DL_INVALID_DB_NAME = -2147413738;

const int CSSMERR_DL_DATASTORE_DOESNOT_EXIST = -2147413737;

const int CSSMERR_DL_DATASTORE_ALREADY_EXISTS = -2147413736;

const int CSSMERR_DL_DB_LOCKED = -2147413735;

const int CSSMERR_DL_DATASTORE_IS_OPEN = -2147413734;

const int CSSMERR_DL_RECORD_NOT_FOUND = -2147413733;

const int CSSMERR_DL_MISSING_VALUE = -2147413732;

const int CSSMERR_DL_UNSUPPORTED_QUERY = -2147413731;

const int CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS = -2147413730;

const int CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS = -2147413729;

const int CSSMERR_DL_UNSUPPORTED_OPERATOR = -2147413727;

const int CSSMERR_DL_INVALID_RESULTS_HANDLE = -2147413726;

const int CSSMERR_DL_INVALID_DB_LOCATION = -2147413725;

const int CSSMERR_DL_INVALID_ACCESS_REQUEST = -2147413724;

const int CSSMERR_DL_INVALID_INDEX_INFO = -2147413723;

const int CSSMERR_DL_INVALID_SELECTION_TAG = -2147413722;

const int CSSMERR_DL_INVALID_NEW_OWNER = -2147413721;

const int CSSMERR_DL_INVALID_RECORD_UID = -2147413720;

const int CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA = -2147413719;

const int CSSMERR_DL_INVALID_MODIFY_MODE = -2147413718;

const int CSSMERR_DL_INVALID_OPEN_PARAMETERS = -2147413717;

const int CSSMERR_DL_RECORD_MODIFIED = -2147413716;

const int CSSMERR_DL_ENDOFDATA = -2147413715;

const int CSSMERR_DL_INVALID_QUERY = -2147413714;

const int CSSMERR_DL_INVALID_VALUE = -2147413713;

const int CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED = -2147413712;

const int CSSMERR_DL_STALE_UNIQUE_RECORD = -2147413711;

const int CSSM_WORDID_KEYCHAIN_PROMPT = 65536;

const int CSSM_WORDID_KEYCHAIN_LOCK = 65537;

const int CSSM_WORDID_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_WORDID_PROCESS = 65539;

const int CSSM_WORDID__RESERVED_1 = 65540;

const int CSSM_WORDID_SYMMETRIC_KEY = 65541;

const int CSSM_WORDID_SYSTEM = 65542;

const int CSSM_WORDID_KEY = 65543;

const int CSSM_WORDID_PIN = 65544;

const int CSSM_WORDID_PREAUTH = 65545;

const int CSSM_WORDID_PREAUTH_SOURCE = 65546;

const int CSSM_WORDID_ASYMMETRIC_KEY = 65547;

const int CSSM_WORDID_PARTITION = 65548;

const int CSSM_WORDID_KEYBAG_KEY = 65549;

const int CSSM_WORDID__FIRST_UNUSED = 65550;

const int CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_ACL_SUBJECT_TYPE_PROCESS = 65539;

const int CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE = 116;

const int CSSM_ACL_SUBJECT_TYPE_COMMENT = 12;

const int CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH = 65545;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE = 65546;

const int CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_ACL_SUBJECT_TYPE_PARTITION = 65548;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK = 65537;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_SAMPLE_TYPE_PROCESS = 65539;

const int CSSM_SAMPLE_TYPE_COMMENT = 12;

const int CSSM_SAMPLE_TYPE_RETRY_ID = 85;

const int CSSM_SAMPLE_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_SAMPLE_TYPE_PREAUTH = 65545;

const int CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_SAMPLE_TYPE_KEYBAG_KEY = 65549;

const int CSSM_ACL_AUTHORIZATION_CHANGE_ACL = 65536;

const int CSSM_ACL_AUTHORIZATION_CHANGE_OWNER = 65537;

const int CSSM_ACL_AUTHORIZATION_PARTITION_ID = 65538;

const int CSSM_ACL_AUTHORIZATION_INTEGRITY = 65539;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_BASE = 16842752;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_END = 16908288;

const int CSSM_ACL_CODE_SIGNATURE_INVALID = 0;

const int CSSM_ACL_CODE_SIGNATURE_OSX = 1;

const int CSSM_ACL_MATCH_UID = 1;

const int CSSM_ACL_MATCH_GID = 2;

const int CSSM_ACL_MATCH_HONOR_ROOT = 256;

const int CSSM_ACL_MATCH_BITS = 3;

const int CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE = 1;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED = 16;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT = 32;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID = 64;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT = 128;

const int CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK = 255;

const int CSSM_ACL_PREAUTH_TRACKING_BLOCKED = 0;

const int CSSM_ACL_PREAUTH_TRACKING_UNKNOWN = 1073741824;

const int CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED = -2147483648;

const int CSSM_DB_ACCESS_RESET = 65536;

const int CSSM_ALGID_APPLE_YARROW = -2147483648;

const int CSSM_ALGID_AES = -2147483647;

const int CSSM_ALGID_FEE = -2147483646;

const int CSSM_ALGID_FEE_MD5 = -2147483645;

const int CSSM_ALGID_FEE_SHA1 = -2147483644;

const int CSSM_ALGID_FEED = -2147483643;

const int CSSM_ALGID_FEEDEXP = -2147483642;

const int CSSM_ALGID_ASC = -2147483641;

const int CSSM_ALGID_SHA1HMAC_LEGACY = -2147483640;

const int CSSM_ALGID_KEYCHAIN_KEY = -2147483639;

const int CSSM_ALGID_PKCS12_PBE_ENCR = -2147483638;

const int CSSM_ALGID_PKCS12_PBE_MAC = -2147483637;

const int CSSM_ALGID_SECURE_PASSPHRASE = -2147483636;

const int CSSM_ALGID_PBE_OPENSSL_MD5 = -2147483635;

const int CSSM_ALGID_SHA256 = -2147483634;

const int CSSM_ALGID_SHA384 = -2147483633;

const int CSSM_ALGID_SHA512 = -2147483632;

const int CSSM_ALGID_ENTROPY_DEFAULT = -2147483631;

const int CSSM_ALGID_SHA224 = -2147483630;

const int CSSM_ALGID_SHA224WithRSA = -2147483629;

const int CSSM_ALGID_SHA256WithRSA = -2147483628;

const int CSSM_ALGID_SHA384WithRSA = -2147483627;

const int CSSM_ALGID_SHA512WithRSA = -2147483626;

const int CSSM_ALGID_OPENSSH1 = -2147483625;

const int CSSM_ALGID_SHA224WithECDSA = -2147483624;

const int CSSM_ALGID_SHA256WithECDSA = -2147483623;

const int CSSM_ALGID_SHA384WithECDSA = -2147483622;

const int CSSM_ALGID_SHA512WithECDSA = -2147483621;

const int CSSM_ALGID_ECDSA_SPECIFIED = -2147483620;

const int CSSM_ALGID_ECDH_X963_KDF = -2147483619;

const int CSSM_ALGID__FIRST_UNUSED = -2147483618;

const int CSSM_PADDING_APPLE_SSLv2 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_X509 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH = -2147483647;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSL = -2147483646;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2 = -2147483645;

const int CSSM_CUSTOM_COMMON_ERROR_EXTENT = 224;

const int CSSM_ERRCODE_NO_USER_INTERACTION = 224;

const int CSSM_ERRCODE_USER_CANCELED = 225;

const int CSSM_ERRCODE_SERVICE_NOT_AVAILABLE = 226;

const int CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION = 227;

const int CSSM_ERRCODE_DEVICE_RESET = 228;

const int CSSM_ERRCODE_DEVICE_FAILED = 229;

const int CSSM_ERRCODE_IN_DARK_WAKE = 230;

const int CSSMERR_CSSM_NO_USER_INTERACTION = -2147417888;

const int CSSMERR_AC_NO_USER_INTERACTION = -2147405600;

const int CSSMERR_CSP_NO_USER_INTERACTION = -2147415840;

const int CSSMERR_CL_NO_USER_INTERACTION = -2147411744;

const int CSSMERR_DL_NO_USER_INTERACTION = -2147413792;

const int CSSMERR_TP_NO_USER_INTERACTION = -2147409696;

const int CSSMERR_CSSM_USER_CANCELED = -2147417887;

const int CSSMERR_AC_USER_CANCELED = -2147405599;

const int CSSMERR_CSP_USER_CANCELED = -2147415839;

const int CSSMERR_CL_USER_CANCELED = -2147411743;

const int CSSMERR_DL_USER_CANCELED = -2147413791;

const int CSSMERR_TP_USER_CANCELED = -2147409695;

const int CSSMERR_CSSM_SERVICE_NOT_AVAILABLE = -2147417886;

const int CSSMERR_AC_SERVICE_NOT_AVAILABLE = -2147405598;

const int CSSMERR_CSP_SERVICE_NOT_AVAILABLE = -2147415838;

const int CSSMERR_CL_SERVICE_NOT_AVAILABLE = -2147411742;

const int CSSMERR_DL_SERVICE_NOT_AVAILABLE = -2147413790;

const int CSSMERR_TP_SERVICE_NOT_AVAILABLE = -2147409694;

const int CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147417885;

const int CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147405597;

const int CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147415837;

const int CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147411741;

const int CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147413789;

const int CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147409693;

const int CSSMERR_CSSM_DEVICE_RESET = -2147417884;

const int CSSMERR_AC_DEVICE_RESET = -2147405596;

const int CSSMERR_CSP_DEVICE_RESET = -2147415836;

const int CSSMERR_CL_DEVICE_RESET = -2147411740;

const int CSSMERR_DL_DEVICE_RESET = -2147413788;

const int CSSMERR_TP_DEVICE_RESET = -2147409692;

const int CSSMERR_CSSM_DEVICE_FAILED = -2147417883;

const int CSSMERR_AC_DEVICE_FAILED = -2147405595;

const int CSSMERR_CSP_DEVICE_FAILED = -2147415835;

const int CSSMERR_CL_DEVICE_FAILED = -2147411739;

const int CSSMERR_DL_DEVICE_FAILED = -2147413787;

const int CSSMERR_TP_DEVICE_FAILED = -2147409691;

const int CSSMERR_CSSM_IN_DARK_WAKE = -2147417882;

const int CSSMERR_AC_IN_DARK_WAKE = -2147405594;

const int CSSMERR_CSP_IN_DARK_WAKE = -2147415834;

const int CSSMERR_CL_IN_DARK_WAKE = -2147411738;

const int CSSMERR_DL_IN_DARK_WAKE = -2147413786;

const int CSSMERR_TP_IN_DARK_WAKE = -2147409690;

const int CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT = -2147415040;

const int CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE = -2147415039;

const int CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH = -2147415038;

const int CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE = -2147415037;

const int CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE = -2147415036;

const int CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR = -2147415035;

const int CSSMERR_CSP_APPLE_SSLv2_ROLLBACK = -2147415034;

const int CSSM_DL_DB_RECORD_GENERIC_PASSWORD = -2147483648;

const int CSSM_DL_DB_RECORD_INTERNET_PASSWORD = -2147483647;

const int CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD = -2147483646;

const int CSSM_DL_DB_RECORD_X509_CERTIFICATE = -2147479552;

const int CSSM_DL_DB_RECORD_USER_TRUST = -2147479551;

const int CSSM_DL_DB_RECORD_X509_CRL = -2147479550;

const int CSSM_DL_DB_RECORD_UNLOCK_REFERRAL = -2147479549;

const int CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE = -2147479548;

const int CSSM_DL_DB_RECORD_METADATA = -2147450880;

const int CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT = 0;

const int CSSM_APPLEFILEDL_COMMIT = 1;

const int CSSM_APPLEFILEDL_ROLLBACK = 2;

const int CSSM_APPLEFILEDL_TAKE_FILE_LOCK = 3;

const int CSSM_APPLEFILEDL_MAKE_BACKUP = 4;

const int CSSM_APPLEFILEDL_MAKE_COPY = 5;

const int CSSM_APPLEFILEDL_DELETE_FILE = 6;

const int CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT = 1;

const int CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE = 2;

const int CSSM_APPLE_UNLOCK_TYPE_KEYBAG = 3;

const int CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS = -2147412992;

const int CSSMERR_APPLEDL_DISK_FULL = -2147412991;

const int CSSMERR_APPLEDL_QUOTA_EXCEEDED = -2147412990;

const int CSSMERR_APPLEDL_FILE_TOO_BIG = -2147412989;

const int CSSMERR_APPLEDL_INVALID_DATABASE_BLOB = -2147412988;

const int CSSMERR_APPLEDL_INVALID_KEY_BLOB = -2147412987;

const int CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB = -2147412986;

const int CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB = -2147412985;

const int CSSMERR_APPLETP_HOSTNAME_MISMATCH = -2147408896;

const int CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN = -2147408895;

const int CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS = -2147408894;

const int CSSMERR_APPLETP_INVALID_CA = -2147408893;

const int CSSMERR_APPLETP_INVALID_AUTHORITY_ID = -2147408892;

const int CSSMERR_APPLETP_INVALID_SUBJECT_ID = -2147408891;

const int CSSMERR_APPLETP_INVALID_KEY_USAGE = -2147408890;

const int CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE = -2147408889;

const int CSSMERR_APPLETP_INVALID_ID_LINKAGE = -2147408888;

const int CSSMERR_APPLETP_PATH_LEN_CONSTRAINT = -2147408887;

const int CSSMERR_APPLETP_INVALID_ROOT = -2147408886;

const int CSSMERR_APPLETP_CRL_EXPIRED = -2147408885;

const int CSSMERR_APPLETP_CRL_NOT_VALID_YET = -2147408884;

const int CSSMERR_APPLETP_CRL_NOT_FOUND = -2147408883;

const int CSSMERR_APPLETP_CRL_SERVER_DOWN = -2147408882;

const int CSSMERR_APPLETP_CRL_BAD_URI = -2147408881;

const int CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN = -2147408880;

const int CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN = -2147408879;

const int CSSMERR_APPLETP_CRL_NOT_TRUSTED = -2147408878;

const int CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT = -2147408877;

const int CSSMERR_APPLETP_CRL_POLICY_FAIL = -2147408876;

const int CSSMERR_APPLETP_IDP_FAIL = -2147408875;

const int CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER = -2147408874;

const int CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER = -2147408873;

const int CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND = -2147408872;

const int CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE = -2147408871;

const int CSSMERR_APPLETP_SMIME_BAD_KEY_USE = -2147408870;

const int CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL = -2147408869;

const int CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS = -2147408868;

const int CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT = -2147408867;

const int CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE = -2147408866;

const int CSSMERR_APPLETP_OCSP_BAD_RESPONSE = -2147408865;

const int CSSMERR_APPLETP_OCSP_BAD_REQUEST = -2147408864;

const int CSSMERR_APPLETP_OCSP_UNAVAILABLE = -2147408863;

const int CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED = -2147408862;

const int CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK = -2147408861;

const int CSSMERR_APPLETP_NETWORK_FAILURE = -2147408860;

const int CSSMERR_APPLETP_OCSP_NOT_TRUSTED = -2147408859;

const int CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT = -2147408858;

const int CSSMERR_APPLETP_OCSP_SIG_ERROR = -2147408857;

const int CSSMERR_APPLETP_OCSP_NO_SIGNER = -2147408856;

const int CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ = -2147408855;

const int CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR = -2147408854;

const int CSSMERR_APPLETP_OCSP_RESP_TRY_LATER = -2147408853;

const int CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED = -2147408852;

const int CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED = -2147408851;

const int CSSMERR_APPLETP_OCSP_NONCE_MISMATCH = -2147408850;

const int CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH = -2147408849;

const int CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS = -2147408848;

const int CSSMERR_APPLETP_CS_BAD_PATH_LENGTH = -2147408847;

const int CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE = -2147408846;

const int CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT = -2147408845;

const int CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH = -2147408844;

const int CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE = -2147408843;

const int CSSMERR_APPLETP_TRUST_SETTING_DENY = -2147408842;

const int CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT = -2147408841;

const int CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT = -2147408840;

const int CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION = -2147408839;

const int CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL = -2147408838;

const int CSSMERR_APPLETP_IDENTIFIER_MISSING = -2147408837;

const int CSSMERR_APPLETP_CA_PIN_MISMATCH = -2147408836;

const int CSSMERR_APPLETP_LEAF_PIN_MISMATCH = -2147408835;

const int CSSMERR_APPLE_DOTMAC_REQ_QUEUED = -2147408796;

const int CSSMERR_APPLE_DOTMAC_REQ_REDIRECT = -2147408795;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR = -2147408794;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM = -2147408793;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH = -2147408792;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL = -2147408791;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL = -2147408790;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST = -2147408789;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR = -2147408788;

const int CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING = -2147408787;

const int CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING = -2147408786;

const int CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL = -2147408785;

const int CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK = -2147408784;

const int CSSM_APPLEDL_OPEN_PARAMETERS_VERSION = 1;

const int CSSM_APPLECSPDL_DB_LOCK = 0;

const int CSSM_APPLECSPDL_DB_UNLOCK = 1;

const int CSSM_APPLECSPDL_DB_GET_SETTINGS = 2;

const int CSSM_APPLECSPDL_DB_SET_SETTINGS = 3;

const int CSSM_APPLECSPDL_DB_IS_LOCKED = 4;

const int CSSM_APPLECSPDL_DB_CHANGE_PASSWORD = 5;

const int CSSM_APPLECSPDL_DB_GET_HANDLE = 6;

const int CSSM_APPLESCPDL_CSP_GET_KEYHANDLE = 7;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_8 = 8;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_9 = 9;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_10 = 10;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_11 = 11;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_12 = 12;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_13 = 13;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_14 = 14;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_15 = 15;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_16 = 16;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_17 = 17;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_18 = 18;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_19 = 19;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_20 = 20;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_21 = 21;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_22 = 22;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_23 = 23;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_24 = 24;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_25 = 25;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_26 = 26;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_27 = 27;

const int CSSM_APPLECSP_KEYDIGEST = 256;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM = 100;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL = 101;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1 = 102;

const int CSSM_ATTRIBUTE_VENDOR_DEFINED = 8388608;

const int CSSM_ATTRIBUTE_PUBLIC_KEY = 1082130432;

const int CSSM_ATTRIBUTE_FEE_PRIME_TYPE = 276824065;

const int CSSM_ATTRIBUTE_FEE_CURVE_TYPE = 276824066;

const int CSSM_ATTRIBUTE_ASC_OPTIMIZATION = 276824067;

const int CSSM_ATTRIBUTE_RSA_BLINDING = 276824068;

const int CSSM_ATTRIBUTE_PARAM_KEY = 1082130437;

const int CSSM_ATTRIBUTE_PROMPT = 545259526;

const int CSSM_ATTRIBUTE_ALERT_TITLE = 545259527;

const int CSSM_ATTRIBUTE_VERIFY_PASSPHRASE = 276824072;

const int CSSM_FEE_PRIME_TYPE_DEFAULT = 0;

const int CSSM_FEE_PRIME_TYPE_MERSENNE = 1;

const int CSSM_FEE_PRIME_TYPE_FEE = 2;

const int CSSM_FEE_PRIME_TYPE_GENERAL = 3;

const int CSSM_FEE_CURVE_TYPE_DEFAULT = 0;

const int CSSM_FEE_CURVE_TYPE_MONTGOMERY = 1;

const int CSSM_FEE_CURVE_TYPE_WEIERSTRASS = 2;

const int CSSM_FEE_CURVE_TYPE_ANSI_X9_62 = 3;

const int CSSM_ASC_OPTIMIZE_DEFAULT = 0;

const int CSSM_ASC_OPTIMIZE_SIZE = 1;

const int CSSM_ASC_OPTIMIZE_SECURITY = 2;

const int CSSM_ASC_OPTIMIZE_TIME = 3;

const int CSSM_ASC_OPTIMIZE_TIME_SIZE = 4;

const int CSSM_ASC_OPTIMIZE_ASCII = 5;

const int CSSM_KEYATTR_PARTIAL = 65536;

const int CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT = 131072;

const int CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT = 1;

const int CSSM_TP_ACTION_FETCH_CRL_FROM_NET = 2;

const int CSSM_TP_ACTION_CRL_SUFFICIENT = 4;

const int CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT = 8;

const int CSSM_TP_ACTION_ALLOW_EXPIRED = 1;

const int CSSM_TP_ACTION_LEAF_IS_CA = 2;

const int CSSM_TP_ACTION_FETCH_CERT_FROM_NET = 4;

const int CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT = 8;

const int CSSM_TP_ACTION_REQUIRE_REV_PER_CERT = 16;

const int CSSM_TP_ACTION_TRUST_SETTINGS = 32;

const int CSSM_TP_ACTION_IMPLICIT_ANCHORS = 64;

const int CSSM_CERT_STATUS_EXPIRED = 1;

const int CSSM_CERT_STATUS_NOT_VALID_YET = 2;

const int CSSM_CERT_STATUS_IS_IN_INPUT_CERTS = 4;

const int CSSM_CERT_STATUS_IS_IN_ANCHORS = 8;

const int CSSM_CERT_STATUS_IS_ROOT = 16;

const int CSSM_CERT_STATUS_IS_FROM_NET = 32;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER = 64;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN = 128;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM = 256;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST = 512;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_DENY = 1024;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR = 2048;

const int CSSM_EVIDENCE_FORM_APPLE_HEADER = -2147483648;

const int CSSM_EVIDENCE_FORM_APPLE_CERTGROUP = -2147483647;

const int CSSM_EVIDENCE_FORM_APPLE_CERT_INFO = -2147483646;

const int CSSM_APPLEX509CL_OBTAIN_CSR = 0;

const int CSSM_APPLEX509CL_VERIFY_CSR = 1;

const int kSecSubjectItemAttr = 1937072746;

const int kSecIssuerItemAttr = 1769173877;

const int kSecSerialNumberItemAttr = 1936614002;

const int kSecPublicKeyHashItemAttr = 1752198009;

const int kSecSubjectKeyIdentifierItemAttr = 1936419172;

const int kSecCertTypeItemAttr = 1668577648;

const int kSecCertEncodingItemAttr = 1667591779;

const int SSL_NULL_WITH_NULL_NULL = 0;

const int SSL_RSA_WITH_NULL_MD5 = 1;

const int SSL_RSA_WITH_NULL_SHA = 2;

const int SSL_RSA_EXPORT_WITH_RC4_40_MD5 = 3;

const int SSL_RSA_WITH_RC4_128_MD5 = 4;

const int SSL_RSA_WITH_RC4_128_SHA = 5;

const int SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 6;

const int SSL_RSA_WITH_IDEA_CBC_SHA = 7;

const int SSL_RSA_EXPORT_WITH_DES40_CBC_SHA = 8;

const int SSL_RSA_WITH_DES_CBC_SHA = 9;

const int SSL_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 11;

const int SSL_DH_DSS_WITH_DES_CBC_SHA = 12;

const int SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 14;

const int SSL_DH_RSA_WITH_DES_CBC_SHA = 15;

const int SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 17;

const int SSL_DHE_DSS_WITH_DES_CBC_SHA = 18;

const int SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 20;

const int SSL_DHE_RSA_WITH_DES_CBC_SHA = 21;

const int SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int SSL_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23;

const int SSL_DH_anon_WITH_RC4_128_MD5 = 24;

const int SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25;

const int SSL_DH_anon_WITH_DES_CBC_SHA = 26;

const int SSL_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int SSL_FORTEZZA_DMS_WITH_NULL_SHA = 28;

const int SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA = 29;

const int TLS_RSA_WITH_AES_128_CBC_SHA = 47;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA = 48;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA = 49;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 50;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA = 52;

const int TLS_RSA_WITH_AES_256_CBC_SHA = 53;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA = 54;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA = 55;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 56;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA = 58;

const int TLS_ECDH_ECDSA_WITH_NULL_SHA = -16383;

const int TLS_ECDH_ECDSA_WITH_RC4_128_SHA = -16382;

const int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = -16381;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = -16380;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = -16379;

const int TLS_ECDHE_ECDSA_WITH_NULL_SHA = -16378;

const int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = -16377;

const int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = -16376;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = -16375;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = -16374;

const int TLS_ECDH_RSA_WITH_NULL_SHA = -16373;

const int TLS_ECDH_RSA_WITH_RC4_128_SHA = -16372;

const int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = -16371;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = -16370;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = -16369;

const int TLS_ECDHE_RSA_WITH_NULL_SHA = -16368;

const int TLS_ECDHE_RSA_WITH_RC4_128_SHA = -16367;

const int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = -16366;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = -16365;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = -16364;

const int TLS_ECDH_anon_WITH_NULL_SHA = -16363;

const int TLS_ECDH_anon_WITH_RC4_128_SHA = -16362;

const int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = -16361;

const int TLS_ECDH_anon_WITH_AES_128_CBC_SHA = -16360;

const int TLS_ECDH_anon_WITH_AES_256_CBC_SHA = -16359;

const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = -16331;

const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = -16330;

const int TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = -13141;

const int TLS_NULL_WITH_NULL_NULL = 0;

const int TLS_RSA_WITH_NULL_MD5 = 1;

const int TLS_RSA_WITH_NULL_SHA = 2;

const int TLS_RSA_WITH_RC4_128_MD5 = 4;

const int TLS_RSA_WITH_RC4_128_SHA = 5;

const int TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int TLS_RSA_WITH_NULL_SHA256 = 59;

const int TLS_RSA_WITH_AES_128_CBC_SHA256 = 60;

const int TLS_RSA_WITH_AES_256_CBC_SHA256 = 61;

const int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 62;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 63;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 64;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 104;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 105;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 106;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107;

const int TLS_DH_anon_WITH_RC4_128_MD5 = 24;

const int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109;

const int TLS_PSK_WITH_RC4_128_SHA = 138;

const int TLS_PSK_WITH_3DES_EDE_CBC_SHA = 139;

const int TLS_PSK_WITH_AES_128_CBC_SHA = 140;

const int TLS_PSK_WITH_AES_256_CBC_SHA = 141;

const int TLS_DHE_PSK_WITH_RC4_128_SHA = 142;

const int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 143;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 144;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 145;

const int TLS_RSA_PSK_WITH_RC4_128_SHA = 146;

const int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 147;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 148;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 149;

const int TLS_PSK_WITH_NULL_SHA = 44;

const int TLS_DHE_PSK_WITH_NULL_SHA = 45;

const int TLS_RSA_PSK_WITH_NULL_SHA = 46;

const int TLS_RSA_WITH_AES_128_GCM_SHA256 = 156;

const int TLS_RSA_WITH_AES_256_GCM_SHA384 = 157;

const int TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158;

const int TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159;

const int TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 160;

const int TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 161;

const int TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 162;

const int TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 163;

const int TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 164;

const int TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 165;

const int TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166;

const int TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167;

const int TLS_PSK_WITH_AES_128_GCM_SHA256 = 168;

const int TLS_PSK_WITH_AES_256_GCM_SHA384 = 169;

const int TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 170;

const int TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 171;

const int TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 172;

const int TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 173;

const int TLS_PSK_WITH_AES_128_CBC_SHA256 = 174;

const int TLS_PSK_WITH_AES_256_CBC_SHA384 = 175;

const int TLS_PSK_WITH_NULL_SHA256 = 176;

const int TLS_PSK_WITH_NULL_SHA384 = 177;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 178;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 179;

const int TLS_DHE_PSK_WITH_NULL_SHA256 = 180;

const int TLS_DHE_PSK_WITH_NULL_SHA384 = 181;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 182;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 183;

const int TLS_RSA_PSK_WITH_NULL_SHA256 = 184;

const int TLS_RSA_PSK_WITH_NULL_SHA384 = 185;

const int TLS_AES_128_GCM_SHA256 = 4865;

const int TLS_AES_256_GCM_SHA384 = 4866;

const int TLS_CHACHA20_POLY1305_SHA256 = 4867;

const int TLS_AES_128_CCM_SHA256 = 4868;

const int TLS_AES_128_CCM_8_SHA256 = 4869;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = -16349;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = -16348;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = -16347;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = -16346;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = -16345;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = -16344;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = -16343;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = -16342;

const int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = -16341;

const int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = -16340;

const int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = -16339;

const int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = -16338;

const int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = -16337;

const int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = -16336;

const int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = -16335;

const int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = -16334;

const int TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = -13144;

const int TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = -13143;

const int TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 255;

const int SSL_RSA_WITH_RC2_CBC_MD5 = -128;

const int SSL_RSA_WITH_IDEA_CBC_MD5 = -127;

const int SSL_RSA_WITH_DES_CBC_MD5 = -126;

const int SSL_RSA_WITH_3DES_EDE_CBC_MD5 = -125;

const int SSL_NO_SUCH_CIPHERSUITE = -1;

const int NSASCIIStringEncoding = 1;

const int NSNEXTSTEPStringEncoding = 2;

const int NSJapaneseEUCStringEncoding = 3;

const int NSUTF8StringEncoding = 4;

const int NSISOLatin1StringEncoding = 5;

const int NSSymbolStringEncoding = 6;

const int NSNonLossyASCIIStringEncoding = 7;

const int NSShiftJISStringEncoding = 8;

const int NSISOLatin2StringEncoding = 9;

const int NSUnicodeStringEncoding = 10;

const int NSWindowsCP1251StringEncoding = 11;

const int NSWindowsCP1252StringEncoding = 12;

const int NSWindowsCP1253StringEncoding = 13;

const int NSWindowsCP1254StringEncoding = 14;

const int NSWindowsCP1250StringEncoding = 15;

const int NSISO2022JPStringEncoding = 21;

const int NSMacOSRomanStringEncoding = 30;

const int NSUTF16StringEncoding = 10;

const int NSUTF16BigEndianStringEncoding = 2415919360;

const int NSUTF16LittleEndianStringEncoding = 2483028224;

const int NSUTF32StringEncoding = 2348810496;

const int NSUTF32BigEndianStringEncoding = 2550137088;

const int NSUTF32LittleEndianStringEncoding = 2617245952;

const int NSProprietaryStringEncoding = 65536;

const int NSOpenStepUnicodeReservedBase = 62464;

const int kNativeArgNumberPos = 0;

const int kNativeArgNumberSize = 8;

const int kNativeArgTypePos = 8;

const int kNativeArgTypeSize = 8;

const int NS_BLOCKS_AVAILABLE = 1;

const int __COREFOUNDATION_CFAVAILABILITY__ = 1;

const int __CF_ENUM_FIXED_IS_AVAILABLE = 1;

const double NSFoundationVersionNumber10_0 = 397.4;

const double NSFoundationVersionNumber10_1 = 425.0;

const double NSFoundationVersionNumber10_1_1 = 425.0;

const double NSFoundationVersionNumber10_1_2 = 425.0;

const double NSFoundationVersionNumber10_1_3 = 425.0;

const double NSFoundationVersionNumber10_1_4 = 425.0;

const double NSFoundationVersionNumber10_2 = 462.0;

const double NSFoundationVersionNumber10_2_1 = 462.0;

const double NSFoundationVersionNumber10_2_2 = 462.0;

const double NSFoundationVersionNumber10_2_3 = 462.0;

const double NSFoundationVersionNumber10_2_4 = 462.0;

const double NSFoundationVersionNumber10_2_5 = 462.0;

const double NSFoundationVersionNumber10_2_6 = 462.0;

const double NSFoundationVersionNumber10_2_7 = 462.7;

const double NSFoundationVersionNumber10_2_8 = 462.7;

const double NSFoundationVersionNumber10_3 = 500.0;

const double NSFoundationVersionNumber10_3_1 = 500.0;

const double NSFoundationVersionNumber10_3_2 = 500.3;

const double NSFoundationVersionNumber10_3_3 = 500.54;

const double NSFoundationVersionNumber10_3_4 = 500.56;

const double NSFoundationVersionNumber10_3_5 = 500.56;

const double NSFoundationVersionNumber10_3_6 = 500.56;

const double NSFoundationVersionNumber10_3_7 = 500.56;

const double NSFoundationVersionNumber10_3_8 = 500.56;

const double NSFoundationVersionNumber10_3_9 = 500.58;

const double NSFoundationVersionNumber10_4 = 567.0;

const double NSFoundationVersionNumber10_4_1 = 567.0;

const double NSFoundationVersionNumber10_4_2 = 567.12;

const double NSFoundationVersionNumber10_4_3 = 567.21;

const double NSFoundationVersionNumber10_4_4_Intel = 567.23;

const double NSFoundationVersionNumber10_4_4_PowerPC = 567.21;

const double NSFoundationVersionNumber10_4_5 = 567.25;

const double NSFoundationVersionNumber10_4_6 = 567.26;

const double NSFoundationVersionNumber10_4_7 = 567.27;

const double NSFoundationVersionNumber10_4_8 = 567.28;

const double NSFoundationVersionNumber10_4_9 = 567.29;

const double NSFoundationVersionNumber10_4_10 = 567.29;

const double NSFoundationVersionNumber10_4_11 = 567.36;

const double NSFoundationVersionNumber10_5 = 677.0;

const double NSFoundationVersionNumber10_5_1 = 677.1;

const double NSFoundationVersionNumber10_5_2 = 677.15;

const double NSFoundationVersionNumber10_5_3 = 677.19;

const double NSFoundationVersionNumber10_5_4 = 677.19;

const double NSFoundationVersionNumber10_5_5 = 677.21;

const double NSFoundationVersionNumber10_5_6 = 677.22;

const double NSFoundationVersionNumber10_5_7 = 677.24;

const double NSFoundationVersionNumber10_5_8 = 677.26;

const double NSFoundationVersionNumber10_6 = 751.0;

const double NSFoundationVersionNumber10_6_1 = 751.0;

const double NSFoundationVersionNumber10_6_2 = 751.14;

const double NSFoundationVersionNumber10_6_3 = 751.21;

const double NSFoundationVersionNumber10_6_4 = 751.29;

const double NSFoundationVersionNumber10_6_5 = 751.42;

const double NSFoundationVersionNumber10_6_6 = 751.53;

const double NSFoundationVersionNumber10_6_7 = 751.53;

const double NSFoundationVersionNumber10_6_8 = 751.62;

const double NSFoundationVersionNumber10_7 = 833.1;

const double NSFoundationVersionNumber10_7_1 = 833.1;

const double NSFoundationVersionNumber10_7_2 = 833.2;

const double NSFoundationVersionNumber10_7_3 = 833.24;

const double NSFoundationVersionNumber10_7_4 = 833.25;

const double NSFoundationVersionNumber10_8 = 945.0;

const double NSFoundationVersionNumber10_8_1 = 945.0;

const double NSFoundationVersionNumber10_8_2 = 945.11;

const double NSFoundationVersionNumber10_8_3 = 945.16;

const double NSFoundationVersionNumber10_8_4 = 945.18;

const int NSFoundationVersionNumber10_9 = 1056;

const int NSFoundationVersionNumber10_9_1 = 1056;

const double NSFoundationVersionNumber10_9_2 = 1056.13;

const double NSFoundationVersionNumber10_10 = 1151.16;

const double NSFoundationVersionNumber10_10_1 = 1151.16;

const double NSFoundationVersionNumber10_10_2 = 1152.14;

const double NSFoundationVersionNumber10_10_3 = 1153.2;

const double NSFoundationVersionNumber10_10_4 = 1153.2;

const int NSFoundationVersionNumber10_10_5 = 1154;

const int NSFoundationVersionNumber10_10_Max = 1199;

const int NSFoundationVersionNumber10_11 = 1252;

const double NSFoundationVersionNumber10_11_1 = 1255.1;

const double NSFoundationVersionNumber10_11_2 = 1256.1;

const double NSFoundationVersionNumber10_11_3 = 1256.1;

const int NSFoundationVersionNumber10_11_4 = 1258;

const int NSFoundationVersionNumber10_11_Max = 1299;

const int __COREFOUNDATION_CFBASE__ = 1;

const int TRUE = 1;

const int FALSE = 0;

const double kCFCoreFoundationVersionNumber10_0 = 196.4;

const double kCFCoreFoundationVersionNumber10_0_3 = 196.5;

const double kCFCoreFoundationVersionNumber10_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_2 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_3 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_4 = 227.3;

const double kCFCoreFoundationVersionNumber10_2 = 263.0;

const double kCFCoreFoundationVersionNumber10_2_1 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_2 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_3 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_4 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_5 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_6 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_7 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_8 = 263.5;

const double kCFCoreFoundationVersionNumber10_3 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_1 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_2 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_3 = 299.3;

const double kCFCoreFoundationVersionNumber10_3_4 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_5 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_6 = 299.32;

const double kCFCoreFoundationVersionNumber10_3_7 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_8 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_9 = 299.35;

const double kCFCoreFoundationVersionNumber10_4 = 368.0;

const double kCFCoreFoundationVersionNumber10_4_1 = 368.1;

const double kCFCoreFoundationVersionNumber10_4_2 = 368.11;

const double kCFCoreFoundationVersionNumber10_4_3 = 368.18;

const double kCFCoreFoundationVersionNumber10_4_4_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_4_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_5_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_5_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_6_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_6_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_7 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_8 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_9 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_10 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_11 = 368.31;

const double kCFCoreFoundationVersionNumber10_5 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_1 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_2 = 476.1;

const double kCFCoreFoundationVersionNumber10_5_3 = 476.13;

const double kCFCoreFoundationVersionNumber10_5_4 = 476.14;

const double kCFCoreFoundationVersionNumber10_5_5 = 476.15;

const double kCFCoreFoundationVersionNumber10_5_6 = 476.17;

const double kCFCoreFoundationVersionNumber10_5_7 = 476.18;

const double kCFCoreFoundationVersionNumber10_5_8 = 476.19;

const double kCFCoreFoundationVersionNumber10_6 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_1 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_2 = 550.13;

const double kCFCoreFoundationVersionNumber10_6_3 = 550.19;

const double kCFCoreFoundationVersionNumber10_6_4 = 550.29;

const double kCFCoreFoundationVersionNumber10_6_5 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_6 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_7 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_8 = 550.43;

const double kCFCoreFoundationVersionNumber10_7 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_1 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_2 = 635.15;

const double kCFCoreFoundationVersionNumber10_7_3 = 635.19;

const double kCFCoreFoundationVersionNumber10_7_4 = 635.21;

const double kCFCoreFoundationVersionNumber10_7_5 = 635.21;

const double kCFCoreFoundationVersionNumber10_8 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_1 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_2 = 744.12;

const double kCFCoreFoundationVersionNumber10_8_3 = 744.18;

const double kCFCoreFoundationVersionNumber10_8_4 = 744.19;

const double kCFCoreFoundationVersionNumber10_9 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_1 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_2 = 855.14;

const double kCFCoreFoundationVersionNumber10_10 = 1151.16;

const double kCFCoreFoundationVersionNumber10_10_1 = 1151.16;

const int kCFCoreFoundationVersionNumber10_10_2 = 1152;

const double kCFCoreFoundationVersionNumber10_10_3 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_4 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_5 = 1153.18;

const int kCFCoreFoundationVersionNumber10_10_Max = 1199;

const int kCFCoreFoundationVersionNumber10_11 = 1253;

const double kCFCoreFoundationVersionNumber10_11_1 = 1255.1;

const double kCFCoreFoundationVersionNumber10_11_2 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_3 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_4 = 1258.1;

const int kCFCoreFoundationVersionNumber10_11_Max = 1299;

const int ISA_PTRAUTH_DISCRIMINATOR = 27361;

const double NSTimeIntervalSince1970 = 978307200.0;

const int __COREFOUNDATION_CFARRAY__ = 1;

const int SEC_OS_IPHONE = 0;

const int SEC_OS_OSX = 1;

const int SEC_OS_OSX_INCLUDES = 1;

const int SECURITY_TYPE_UNIFICATION = 1;

const int __COREFOUNDATION_COREFOUNDATION__ = 1;

const int __COREFOUNDATION__ = 1;

const int __COREFOUNDATION_CFBAG__ = 1;

const int __COREFOUNDATION_CFBINARYHEAP__ = 1;

const int __COREFOUNDATION_CFBITVECTOR__ = 1;

const int __COREFOUNDATION_CFBYTEORDER__ = 1;

const int CF_USE_OSBYTEORDER_H = 1;

const int __COREFOUNDATION_CFCALENDAR__ = 1;

const int __COREFOUNDATION_CFLOCALE__ = 1;

const int __COREFOUNDATION_CFDICTIONARY__ = 1;

const int __COREFOUNDATION_CFNOTIFICATIONCENTER__ = 1;

const int __COREFOUNDATION_CFDATE__ = 1;

const int __COREFOUNDATION_CFTIMEZONE__ = 1;

const int __COREFOUNDATION_CFDATA__ = 1;

const int __COREFOUNDATION_CFSTRING__ = 1;

const int __COREFOUNDATION_CFCHARACTERSET__ = 1;

const int kCFStringEncodingInvalidId = 4294967295;

const int __kCFStringInlineBufferLength = 64;

const int __COREFOUNDATION_CFDATEFORMATTER__ = 1;

const int __COREFOUNDATION_CFERROR__ = 1;

const int __COREFOUNDATION_CFNUMBER__ = 1;

const int __COREFOUNDATION_CFNUMBERFORMATTER__ = 1;

const int __COREFOUNDATION_CFPREFERENCES__ = 1;

const int __COREFOUNDATION_CFPROPERTYLIST__ = 1;

const int __COREFOUNDATION_CFSTREAM__ = 1;

const int __COREFOUNDATION_CFURL__ = 1;

const int __COREFOUNDATION_CFRUNLOOP__ = 1;

const int __COREFOUNDATION_CFSOCKET__ = 1;

const int __COREFOUNDATION_CFSET__ = 1;

const int __COREFOUNDATION_CFSTRINGENCODINGEXT__ = 1;

const int __COREFOUNDATION_CFTREE__ = 1;

const int __COREFOUNDATION_CFURLACCESS__ = 1;

const int __COREFOUNDATION_CFUUID__ = 1;

const int __COREFOUNDATION_CFUTILITIES__ = 1;

const int __COREFOUNDATION_CFBUNDLE__ = 1;

const int __COREFOUNDATION_CFMESSAGEPORT__ = 1;

const int __COREFOUNDATION_CFPLUGIN__ = 1;

const int COREFOUNDATION_CFPLUGINCOM_SEPARATE = 1;

const int __COREFOUNDATION_CFMACHPORT__ = 1;

const int __COREFOUNDATION_CFATTRIBUTEDSTRING__ = 1;

const int __COREFOUNDATION_CFURLENUMERATOR__ = 1;

const int __COREFOUNDATION_CFFILESECURITY__ = 1;

const int __COREFOUNDATION_CFSTRINGTOKENIZER__ = 1;

const int __COREFOUNDATION_CFFILEDESCRIPTOR__ = 1;

const int __COREFOUNDATION_CFUSERNOTIFICATION__ = 1;

const int __COREFOUNDATION_CFXMLNODE__ = 1;

const int __COREFOUNDATION_CFXMLPARSER__ = 1;

const int _CSSMTYPE_H_ = 1;

const int _CSSMCONFIG_H_ = 1;

const int SEC_ASN1_TAG_MASK = 255;

const int SEC_ASN1_TAGNUM_MASK = 31;

const int SEC_ASN1_BOOLEAN = 1;

const int SEC_ASN1_INTEGER = 2;

const int SEC_ASN1_BIT_STRING = 3;

const int SEC_ASN1_OCTET_STRING = 4;

const int SEC_ASN1_NULL = 5;

const int SEC_ASN1_OBJECT_ID = 6;

const int SEC_ASN1_OBJECT_DESCRIPTOR = 7;

const int SEC_ASN1_REAL = 9;

const int SEC_ASN1_ENUMERATED = 10;

const int SEC_ASN1_EMBEDDED_PDV = 11;

const int SEC_ASN1_UTF8_STRING = 12;

const int SEC_ASN1_SEQUENCE = 16;

const int SEC_ASN1_SET = 17;

const int SEC_ASN1_NUMERIC_STRING = 18;

const int SEC_ASN1_PRINTABLE_STRING = 19;

const int SEC_ASN1_T61_STRING = 20;

const int SEC_ASN1_VIDEOTEX_STRING = 21;

const int SEC_ASN1_IA5_STRING = 22;

const int SEC_ASN1_UTC_TIME = 23;

const int SEC_ASN1_GENERALIZED_TIME = 24;

const int SEC_ASN1_GRAPHIC_STRING = 25;

const int SEC_ASN1_VISIBLE_STRING = 26;

const int SEC_ASN1_GENERAL_STRING = 27;

const int SEC_ASN1_UNIVERSAL_STRING = 28;

const int SEC_ASN1_BMP_STRING = 30;

const int SEC_ASN1_HIGH_TAG_NUMBER = 31;

const int SEC_ASN1_TELETEX_STRING = 20;

const int SEC_ASN1_METHOD_MASK = 32;

const int SEC_ASN1_PRIMITIVE = 0;

const int SEC_ASN1_CONSTRUCTED = 32;

const int SEC_ASN1_CLASS_MASK = 192;

const int SEC_ASN1_UNIVERSAL = 0;

const int SEC_ASN1_APPLICATION = 64;

const int SEC_ASN1_CONTEXT_SPECIFIC = 128;

const int SEC_ASN1_PRIVATE = 192;

const int SEC_ASN1_OPTIONAL = 256;

const int SEC_ASN1_EXPLICIT = 512;

const int SEC_ASN1_ANY = 1024;

const int SEC_ASN1_INLINE = 2048;

const int SEC_ASN1_POINTER = 4096;

const int SEC_ASN1_GROUP = 8192;

const int SEC_ASN1_DYNAMIC = 16384;

const int SEC_ASN1_SKIP = 32768;

const int SEC_ASN1_INNER = 65536;

const int SEC_ASN1_SAVE = 131072;

const int SEC_ASN1_SKIP_REST = 524288;

const int SEC_ASN1_CHOICE = 1048576;

const int SEC_ASN1_SIGNED_INT = 8388608;

const int SEC_ASN1_SEQUENCE_OF = 8208;

const int SEC_ASN1_SET_OF = 8209;

const int SEC_ASN1_ANY_CONTENTS = 66560;

const int _CSSMAPPLE_H_ = 1;

const int _CSSMERR_H_ = 1;

const int _X509DEFS_H_ = 1;

const int BER_TAG_UNKNOWN = 0;

const int BER_TAG_BOOLEAN = 1;

const int BER_TAG_INTEGER = 2;

const int BER_TAG_BIT_STRING = 3;

const int BER_TAG_OCTET_STRING = 4;

const int BER_TAG_NULL = 5;

const int BER_TAG_OID = 6;

const int BER_TAG_OBJECT_DESCRIPTOR = 7;

const int BER_TAG_EXTERNAL = 8;

const int BER_TAG_REAL = 9;

const int BER_TAG_ENUMERATED = 10;

const int BER_TAG_PKIX_UTF8_STRING = 12;

const int BER_TAG_SEQUENCE = 16;

const int BER_TAG_SET = 17;

const int BER_TAG_NUMERIC_STRING = 18;

const int BER_TAG_PRINTABLE_STRING = 19;

const int BER_TAG_T61_STRING = 20;

const int BER_TAG_TELETEX_STRING = 20;

const int BER_TAG_VIDEOTEX_STRING = 21;

const int BER_TAG_IA5_STRING = 22;

const int BER_TAG_UTC_TIME = 23;

const int BER_TAG_GENERALIZED_TIME = 24;

const int BER_TAG_GRAPHIC_STRING = 25;

const int BER_TAG_ISO646_STRING = 26;

const int BER_TAG_GENERAL_STRING = 27;

const int BER_TAG_VISIBLE_STRING = 26;

const int BER_TAG_PKIX_UNIVERSAL_STRING = 28;

const int BER_TAG_PKIX_BMP_STRING = 30;

const int CSSM_X509_OPTION_PRESENT = 1;

const int CSSM_X509_OPTION_NOT_PRESENT = 0;

const int CE_KU_DigitalSignature = 32768;

const int CE_KU_NonRepudiation = 16384;

const int CE_KU_KeyEncipherment = 8192;

const int CE_KU_DataEncipherment = 4096;

const int CE_KU_KeyAgreement = 2048;

const int CE_KU_KeyCertSign = 1024;

const int CE_KU_CRLSign = 512;

const int CE_KU_EncipherOnly = 256;

const int CE_KU_DecipherOnly = 128;

const int CE_CR_Unspecified = 0;

const int CE_CR_KeyCompromise = 1;

const int CE_CR_CACompromise = 2;

const int CE_CR_AffiliationChanged = 3;

const int CE_CR_Superseded = 4;

const int CE_CR_CessationOfOperation = 5;

const int CE_CR_CertificateHold = 6;

const int CE_CR_RemoveFromCRL = 8;

const int CE_CD_Unspecified = 128;

const int CE_CD_KeyCompromise = 64;

const int CE_CD_CACompromise = 32;

const int CE_CD_AffiliationChanged = 16;

const int CE_CD_Superseded = 8;

const int CE_CD_CessationOfOperation = 4;

const int CE_CD_CertificateHold = 2;

const int CSSM_APPLE_TP_SSL_OPTS_VERSION = 1;

const int CSSM_APPLE_TP_SSL_CLIENT = 1;

const int CSSM_APPLE_TP_CRL_OPTS_VERSION = 0;

const int CSSM_APPLE_TP_SMIME_OPTS_VERSION = 0;

const int CSSM_APPLE_TP_ACTION_VERSION = 0;

const int CSSM_TP_APPLE_EVIDENCE_VERSION = 0;

const int CSSM_EVIDENCE_FORM_APPLE_CUSTOM = 2147483648;

const String CSSM_APPLE_CRL_END_OF_TIME = '99991231235959';

const String kKeychainSuffix = '.keychain';

const String kKeychainDbSuffix = '.keychain-db';

const String kSystemKeychainName = 'System.keychain';

const String kSystemKeychainDir = '/Library/Keychains/';

const String kSystemUnlockFile = '/var/db/SystemKey';

const String kSystemKeychainPath = '/Library/Keychains/System.keychain';

const String CSSM_APPLE_ACL_TAG_PARTITION_ID = '___PARTITION___';

const String CSSM_APPLE_ACL_TAG_INTEGRITY = '___INTEGRITY___';

const int errSecErrnoBase = 100000;

const int errSecErrnoLimit = 100255;

const int SEC_PROTOCOL_CERT_COMPRESSION_DEFAULT = 1;

const int errSSLServerAuthCompleted = -9841;

const int errSSLClientAuthCompleted = -9841;

const int errSSLLast = -9849;

const int NSMaximumStringLength = 2147483646;

const int NS_UNICHAR_IS_EIGHT_BIT = 0;

const int NSURLResponseUnknownLength = -1;

const int NSOperationQualityOfServiceUserInteractive = 33;

const int NSOperationQualityOfServiceUserInitiated = 25;

const int NSOperationQualityOfServiceUtility = 17;

const int NSOperationQualityOfServiceBackground = 9;

const int DART_FLAGS_CURRENT_VERSION = 12;

const int DART_INITIALIZE_PARAMS_CURRENT_VERSION = 4;

const int ILLEGAL_PORT = 0;

const String DART_KERNEL_ISOLATE_NAME = 'kernel-service';

const String DART_VM_SERVICE_ISOLATE_NAME = 'vm-service';

const String kSnapshotBuildIdCSymbol = 'kDartSnapshotBuildId';

const String kVmSnapshotDataCSymbol = 'kDartVmSnapshotData';

const String kVmSnapshotInstructionsCSymbol = 'kDartVmSnapshotInstructions';

const String kVmSnapshotBssCSymbol = 'kDartVmSnapshotBss';

const String kIsolateSnapshotDataCSymbol = 'kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsCSymbol =
    'kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssCSymbol = 'kDartIsolateSnapshotBss';

const String kSnapshotBuildIdAsmSymbol = '_kDartSnapshotBuildId';

const String kVmSnapshotDataAsmSymbol = '_kDartVmSnapshotData';

const String kVmSnapshotInstructionsAsmSymbol = '_kDartVmSnapshotInstructions';

const String kVmSnapshotBssAsmSymbol = '_kDartVmSnapshotBss';

const String kIsolateSnapshotDataAsmSymbol = '_kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsAsmSymbol =
    '_kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssAsmSymbol = '_kDartIsolateSnapshotBss';
