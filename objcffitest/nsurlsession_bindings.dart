// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as pkg_ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflowPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<ffi.Void>,
              pkg_ffi.Int)>>('__darwin_check_fd_set_overflow');
  late final ___darwin_check_fd_set_overflow =
      ___darwin_check_fd_set_overflowPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<pkg_ffi.Char> sel_getName(
    SEL sel,
  ) {
    return _sel_getName(
      sel,
    );
  }

  late final _sel_getNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(SEL)>>(
          'sel_getName');
  late final _sel_getName =
      _sel_getNamePtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(SEL)>();

  SEL sel_registerName(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return _sel_registerName(
      str,
    );
  }

  late final _sel_registerNamePtr =
      _lookup<ffi.NativeFunction<SEL Function(ffi.Pointer<pkg_ffi.Char>)>>(
          'sel_registerName');
  late final _sel_registerName = _sel_registerNamePtr
      .asFunction<SEL Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> object_getClassName(
    id obj,
  ) {
    return _object_getClassName(
      obj,
    );
  }

  late final _object_getClassNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(id)>>(
          'object_getClassName');
  late final _object_getClassName = _object_getClassNamePtr
      .asFunction<ffi.Pointer<pkg_ffi.Char> Function(id)>();

  ffi.Pointer<ffi.Void> object_getIndexedIvars(
    id obj,
  ) {
    return _object_getIndexedIvars(
      obj,
    );
  }

  late final _object_getIndexedIvarsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(id)>>(
          'object_getIndexedIvars');
  late final _object_getIndexedIvars = _object_getIndexedIvarsPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(id)>();

  bool sel_isMapped(
    SEL sel,
  ) {
    return _sel_isMapped(
          sel,
        ) !=
        0;
  }

  late final _sel_isMappedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(SEL)>>('sel_isMapped');
  late final _sel_isMapped = _sel_isMappedPtr.asFunction<int Function(SEL)>();

  SEL sel_getUid(
    ffi.Pointer<pkg_ffi.Char> str,
  ) {
    return _sel_getUid(
      str,
    );
  }

  late final _sel_getUidPtr =
      _lookup<ffi.NativeFunction<SEL Function(ffi.Pointer<pkg_ffi.Char>)>>(
          'sel_getUid');
  late final _sel_getUid =
      _sel_getUidPtr.asFunction<SEL Function(ffi.Pointer<pkg_ffi.Char>)>();

  id objc_retainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_retainedObject(
      obj,
    );
  }

  late final _objc_retainedObjectPtr =
      _lookup<ffi.NativeFunction<id Function(objc_objectptr_t)>>(
          'objc_retainedObject');
  late final _objc_retainedObject =
      _objc_retainedObjectPtr.asFunction<id Function(objc_objectptr_t)>();

  id objc_unretainedObject(
    objc_objectptr_t obj,
  ) {
    return _objc_unretainedObject(
      obj,
    );
  }

  late final _objc_unretainedObjectPtr =
      _lookup<ffi.NativeFunction<id Function(objc_objectptr_t)>>(
          'objc_unretainedObject');
  late final _objc_unretainedObject =
      _objc_unretainedObjectPtr.asFunction<id Function(objc_objectptr_t)>();

  objc_objectptr_t objc_unretainedPointer(
    id obj,
  ) {
    return _objc_unretainedPointer(
      obj,
    );
  }

  late final _objc_unretainedPointerPtr =
      _lookup<ffi.NativeFunction<objc_objectptr_t Function(id)>>(
          'objc_unretainedPointer');
  late final _objc_unretainedPointer =
      _objc_unretainedPointerPtr.asFunction<objc_objectptr_t Function(id)>();

  late final ffi.Pointer<ffi.Double> _NSFoundationVersionNumber =
      _lookup<ffi.Double>('NSFoundationVersionNumber');

  double get NSFoundationVersionNumber => _NSFoundationVersionNumber.value;

  set NSFoundationVersionNumber(double value) =>
      _NSFoundationVersionNumber.value = value;

  ffi.Pointer<pkg_ffi.Int> NSStringFromSelector(
    SEL aSelector,
  ) {
    return _NSStringFromSelector(
      aSelector,
    );
  }

  late final _NSStringFromSelectorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Int> Function(SEL)>>(
          'NSStringFromSelector');
  late final _NSStringFromSelector = _NSStringFromSelectorPtr.asFunction<
      ffi.Pointer<pkg_ffi.Int> Function(SEL)>();

  SEL NSSelectorFromString(
    ffi.Pointer<pkg_ffi.Int> aSelectorName,
  ) {
    return _NSSelectorFromString(
      aSelectorName,
    );
  }

  late final _NSSelectorFromStringPtr =
      _lookup<ffi.NativeFunction<SEL Function(ffi.Pointer<pkg_ffi.Int>)>>(
          'NSSelectorFromString');
  late final _NSSelectorFromString = _NSSelectorFromStringPtr.asFunction<
      SEL Function(ffi.Pointer<pkg_ffi.Int>)>();

  ffi.Pointer<pkg_ffi.Int> NSStringFromClass(
    Class aClass,
  ) {
    return _NSStringFromClass(
      aClass,
    );
  }

  late final _NSStringFromClassPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Int> Function(Class)>>(
          'NSStringFromClass');
  late final _NSStringFromClass = _NSStringFromClassPtr.asFunction<
      ffi.Pointer<pkg_ffi.Int> Function(Class)>();

  Class NSClassFromString(
    ffi.Pointer<pkg_ffi.Int> aClassName,
  ) {
    return _NSClassFromString(
      aClassName,
    );
  }

  late final _NSClassFromStringPtr =
      _lookup<ffi.NativeFunction<Class Function(ffi.Pointer<pkg_ffi.Int>)>>(
          'NSClassFromString');
  late final _NSClassFromString = _NSClassFromStringPtr.asFunction<
      Class Function(ffi.Pointer<pkg_ffi.Int>)>();

  ffi.Pointer<pkg_ffi.Int> NSStringFromProtocol(
    ffi.Pointer<pkg_ffi.Int> proto,
  ) {
    return _NSStringFromProtocol(
      proto,
    );
  }

  late final _NSStringFromProtocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Int> Function(
              ffi.Pointer<pkg_ffi.Int>)>>('NSStringFromProtocol');
  late final _NSStringFromProtocol = _NSStringFromProtocolPtr.asFunction<
      ffi.Pointer<pkg_ffi.Int> Function(ffi.Pointer<pkg_ffi.Int>)>();

  ffi.Pointer<pkg_ffi.Int> NSProtocolFromString(
    ffi.Pointer<pkg_ffi.Int> namestr,
  ) {
    return _NSProtocolFromString(
      namestr,
    );
  }

  late final _NSProtocolFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Int> Function(
              ffi.Pointer<pkg_ffi.Int>)>>('NSProtocolFromString');
  late final _NSProtocolFromString = _NSProtocolFromStringPtr.asFunction<
      ffi.Pointer<pkg_ffi.Int> Function(ffi.Pointer<pkg_ffi.Int>)>();

  ffi.Pointer<pkg_ffi.Char> NSGetSizeAndAlignment(
    ffi.Pointer<pkg_ffi.Char> typePtr,
    ffi.Pointer<NSUInteger> sizep,
    ffi.Pointer<NSUInteger> alignp,
  ) {
    return _NSGetSizeAndAlignment(
      typePtr,
      sizep,
      alignp,
    );
  }

  late final _NSGetSizeAndAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<NSUInteger>,
              ffi.Pointer<NSUInteger>)>>('NSGetSizeAndAlignment');
  late final _NSGetSizeAndAlignment = _NSGetSizeAndAlignmentPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<NSUInteger>, ffi.Pointer<NSUInteger>)>();

  void NSLog(
    ffi.Pointer<pkg_ffi.Int> format,
  ) {
    return _NSLog(
      format,
    );
  }

  late final _NSLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pkg_ffi.Int>)>>(
          'NSLog');
  late final _NSLog =
      _NSLogPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Int>)>();

  void NSLogv(
    ffi.Pointer<pkg_ffi.Int> format,
    va_list args,
  ) {
    return _NSLogv(
      format,
      args,
    );
  }

  late final _NSLogvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pkg_ffi.Int>, va_list)>>('NSLogv');
  late final _NSLogv =
      _NSLogvPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Int>, va_list)>();

  late final ffi.Pointer<NSInteger> _NSNotFound =
      _lookup<NSInteger>('NSNotFound');

  int get NSNotFound => _NSNotFound.value;

  set NSNotFound(int value) => _NSNotFound.value = value;

  ffi.Pointer<ffi.Void> _Block_copy(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_copy(
      aBlock,
    );
  }

  late final __Block_copyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('_Block_copy');
  late final __Block_copy = __Block_copyPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void _Block_release(
    ffi.Pointer<ffi.Void> aBlock,
  ) {
    return __Block_release(
      aBlock,
    );
  }

  late final __Block_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_Block_release');
  late final __Block_release =
      __Block_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void _Block_object_assign(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return __Block_object_assign(
      arg0,
      arg1,
      arg2,
    );
  }

  late final __Block_object_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Int)>>('_Block_object_assign');
  late final __Block_object_assign = __Block_object_assignPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void _Block_object_dispose(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return __Block_object_dispose(
      arg0,
      arg1,
    );
  }

  late final __Block_object_disposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, pkg_ffi.Int)>>('_Block_object_dispose');
  late final __Block_object_dispose = __Block_object_disposePtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteGlobalBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteGlobalBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteGlobalBlock =>
      __NSConcreteGlobalBlock.value;

  set _NSConcreteGlobalBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteGlobalBlock.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __NSConcreteStackBlock =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_NSConcreteStackBlock');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _NSConcreteStackBlock =>
      __NSConcreteStackBlock.value;

  set _NSConcreteStackBlock(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __NSConcreteStackBlock.value = value;

  void Debugger() {
    return _Debugger();
  }

  late final _DebuggerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Debugger');
  late final _Debugger = _DebuggerPtr.asFunction<void Function()>();

  void DebugStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _DebugStr(
      debuggerMsg,
    );
  }

  late final _DebugStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'DebugStr');
  late final _DebugStr =
      _DebugStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreak() {
    return _SysBreak();
  }

  late final _SysBreakPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SysBreak');
  late final _SysBreak = _SysBreakPtr.asFunction<void Function()>();

  void SysBreakStr(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakStr(
      debuggerMsg,
    );
  }

  late final _SysBreakStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakStr');
  late final _SysBreakStr =
      _SysBreakStrPtr.asFunction<void Function(ConstStr255Param)>();

  void SysBreakFunc(
    ConstStr255Param debuggerMsg,
  ) {
    return _SysBreakFunc(
      debuggerMsg,
    );
  }

  late final _SysBreakFuncPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ConstStr255Param)>>(
          'SysBreakFunc');
  late final _SysBreakFunc =
      _SysBreakFuncPtr.asFunction<void Function(ConstStr255Param)>();

  late final ffi.Pointer<ffi.Double> _kCFCoreFoundationVersionNumber =
      _lookup<ffi.Double>('kCFCoreFoundationVersionNumber');

  double get kCFCoreFoundationVersionNumber =>
      _kCFCoreFoundationVersionNumber.value;

  set kCFCoreFoundationVersionNumber(double value) =>
      _kCFCoreFoundationVersionNumber.value = value;

  late final ffi.Pointer<CFIndex> _kCFNotFound =
      _lookup<CFIndex>('kCFNotFound');

  int get kCFNotFound => _kCFNotFound.value;

  set kCFNotFound(int value) => _kCFNotFound.value = value;

  CFRange __CFRangeMake(
    int loc,
    int len,
  ) {
    return ___CFRangeMake(
      loc,
      len,
    );
  }

  late final ___CFRangeMakePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFIndex, CFIndex)>>(
          '__CFRangeMake');
  late final ___CFRangeMake =
      ___CFRangeMakePtr.asFunction<CFRange Function(int, int)>();

  int CFNullGetTypeID() {
    return _CFNullGetTypeID();
  }

  late final _CFNullGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNullGetTypeID');
  late final _CFNullGetTypeID =
      _CFNullGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFNullRef> _kCFNull = _lookup<CFNullRef>('kCFNull');

  CFNullRef get kCFNull => _kCFNull.value;

  set kCFNull(CFNullRef value) => _kCFNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorDefault');

  CFAllocatorRef get kCFAllocatorDefault => _kCFAllocatorDefault.value;

  set kCFAllocatorDefault(CFAllocatorRef value) =>
      _kCFAllocatorDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorSystemDefault =
      _lookup<CFAllocatorRef>('kCFAllocatorSystemDefault');

  CFAllocatorRef get kCFAllocatorSystemDefault =>
      _kCFAllocatorSystemDefault.value;

  set kCFAllocatorSystemDefault(CFAllocatorRef value) =>
      _kCFAllocatorSystemDefault.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMalloc =
      _lookup<CFAllocatorRef>('kCFAllocatorMalloc');

  CFAllocatorRef get kCFAllocatorMalloc => _kCFAllocatorMalloc.value;

  set kCFAllocatorMalloc(CFAllocatorRef value) =>
      _kCFAllocatorMalloc.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorMallocZone =
      _lookup<CFAllocatorRef>('kCFAllocatorMallocZone');

  CFAllocatorRef get kCFAllocatorMallocZone => _kCFAllocatorMallocZone.value;

  set kCFAllocatorMallocZone(CFAllocatorRef value) =>
      _kCFAllocatorMallocZone.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorNull =
      _lookup<CFAllocatorRef>('kCFAllocatorNull');

  CFAllocatorRef get kCFAllocatorNull => _kCFAllocatorNull.value;

  set kCFAllocatorNull(CFAllocatorRef value) => _kCFAllocatorNull.value = value;

  late final ffi.Pointer<CFAllocatorRef> _kCFAllocatorUseContext =
      _lookup<CFAllocatorRef>('kCFAllocatorUseContext');

  CFAllocatorRef get kCFAllocatorUseContext => _kCFAllocatorUseContext.value;

  set kCFAllocatorUseContext(CFAllocatorRef value) =>
      _kCFAllocatorUseContext.value = value;

  int CFAllocatorGetTypeID() {
    return _CFAllocatorGetTypeID();
  }

  late final _CFAllocatorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFAllocatorGetTypeID');
  late final _CFAllocatorGetTypeID =
      _CFAllocatorGetTypeIDPtr.asFunction<int Function()>();

  void CFAllocatorSetDefault(
    CFAllocatorRef allocator,
  ) {
    return _CFAllocatorSetDefault(
      allocator,
    );
  }

  late final _CFAllocatorSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFAllocatorRef)>>(
          'CFAllocatorSetDefault');
  late final _CFAllocatorSetDefault =
      _CFAllocatorSetDefaultPtr.asFunction<void Function(CFAllocatorRef)>();

  CFAllocatorRef CFAllocatorGetDefault() {
    return _CFAllocatorGetDefault();
  }

  late final _CFAllocatorGetDefaultPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function()>>(
          'CFAllocatorGetDefault');
  late final _CFAllocatorGetDefault =
      _CFAllocatorGetDefaultPtr.asFunction<CFAllocatorRef Function()>();

  CFAllocatorRef CFAllocatorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorCreate(
      allocator,
      context,
    );
  }

  late final _CFAllocatorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAllocatorRef Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorCreate');
  late final _CFAllocatorCreate = _CFAllocatorCreatePtr.asFunction<
      CFAllocatorRef Function(
          CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  ffi.Pointer<ffi.Void> CFAllocatorAllocate(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorAllocate(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorAllocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFIndex, CFOptionFlags)>>('CFAllocatorAllocate');
  late final _CFAllocatorAllocate = _CFAllocatorAllocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, int, int)>();

  ffi.Pointer<ffi.Void> CFAllocatorReallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
    int newsize,
    int hint,
  ) {
    return _CFAllocatorReallocate(
      allocator,
      ptr,
      newsize,
      hint,
    );
  }

  late final _CFAllocatorReallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>,
              CFIndex, CFOptionFlags)>>('CFAllocatorReallocate');
  late final _CFAllocatorReallocate = _CFAllocatorReallocatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          CFAllocatorRef, ffi.Pointer<ffi.Void>, int, int)>();

  void CFAllocatorDeallocate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _CFAllocatorDeallocate(
      allocator,
      ptr,
    );
  }

  late final _CFAllocatorDeallocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>>('CFAllocatorDeallocate');
  late final _CFAllocatorDeallocate = _CFAllocatorDeallocatePtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>();

  int CFAllocatorGetPreferredSizeForSize(
    CFAllocatorRef allocator,
    int size,
    int hint,
  ) {
    return _CFAllocatorGetPreferredSizeForSize(
      allocator,
      size,
      hint,
    );
  }

  late final _CFAllocatorGetPreferredSizeForSizePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFAllocatorRef, CFIndex,
              CFOptionFlags)>>('CFAllocatorGetPreferredSizeForSize');
  late final _CFAllocatorGetPreferredSizeForSize =
      _CFAllocatorGetPreferredSizeForSizePtr.asFunction<
          int Function(CFAllocatorRef, int, int)>();

  void CFAllocatorGetContext(
    CFAllocatorRef allocator,
    ffi.Pointer<CFAllocatorContext> context,
  ) {
    return _CFAllocatorGetContext(
      allocator,
      context,
    );
  }

  late final _CFAllocatorGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef,
              ffi.Pointer<CFAllocatorContext>)>>('CFAllocatorGetContext');
  late final _CFAllocatorGetContext = _CFAllocatorGetContextPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFAllocatorContext>)>();

  int CFGetTypeID(
    CFTypeRef cf,
  ) {
    return _CFGetTypeID(
      cf,
    );
  }

  late final _CFGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function(CFTypeRef)>>('CFGetTypeID');
  late final _CFGetTypeID =
      _CFGetTypeIDPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyTypeIDDescription(
    int type_id,
  ) {
    return _CFCopyTypeIDDescription(
      type_id,
    );
  }

  late final _CFCopyTypeIDDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeID)>>(
          'CFCopyTypeIDDescription');
  late final _CFCopyTypeIDDescription =
      _CFCopyTypeIDDescriptionPtr.asFunction<CFStringRef Function(int)>();

  CFTypeRef CFRetain(
    CFTypeRef cf,
  ) {
    return _CFRetain(
      cf,
    );
  }

  late final _CFRetainPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>('CFRetain');
  late final _CFRetain =
      _CFRetainPtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  void CFRelease(
    CFTypeRef cf,
  ) {
    return _CFRelease(
      cf,
    );
  }

  late final _CFReleasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFRelease');
  late final _CFRelease = _CFReleasePtr.asFunction<void Function(CFTypeRef)>();

  CFTypeRef CFAutorelease(
    CFTypeRef arg,
  ) {
    return _CFAutorelease(
      arg,
    );
  }

  late final _CFAutoreleasePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFAutorelease');
  late final _CFAutorelease =
      _CFAutoreleasePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  int CFGetRetainCount(
    CFTypeRef cf,
  ) {
    return _CFGetRetainCount(
      cf,
    );
  }

  late final _CFGetRetainCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTypeRef)>>(
          'CFGetRetainCount');
  late final _CFGetRetainCount =
      _CFGetRetainCountPtr.asFunction<int Function(CFTypeRef)>();

  int CFEqual(
    CFTypeRef cf1,
    CFTypeRef cf2,
  ) {
    return _CFEqual(
      cf1,
      cf2,
    );
  }

  late final _CFEqualPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFTypeRef, CFTypeRef)>>(
          'CFEqual');
  late final _CFEqual =
      _CFEqualPtr.asFunction<int Function(CFTypeRef, CFTypeRef)>();

  int CFHash(
    CFTypeRef cf,
  ) {
    return _CFHash(
      cf,
    );
  }

  late final _CFHashPtr =
      _lookup<ffi.NativeFunction<CFHashCode Function(CFTypeRef)>>('CFHash');
  late final _CFHash = _CFHashPtr.asFunction<int Function(CFTypeRef)>();

  CFStringRef CFCopyDescription(
    CFTypeRef cf,
  ) {
    return _CFCopyDescription(
      cf,
    );
  }

  late final _CFCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTypeRef)>>(
          'CFCopyDescription');
  late final _CFCopyDescription =
      _CFCopyDescriptionPtr.asFunction<CFStringRef Function(CFTypeRef)>();

  CFAllocatorRef CFGetAllocator(
    CFTypeRef cf,
  ) {
    return _CFGetAllocator(
      cf,
    );
  }

  late final _CFGetAllocatorPtr =
      _lookup<ffi.NativeFunction<CFAllocatorRef Function(CFTypeRef)>>(
          'CFGetAllocator');
  late final _CFGetAllocator =
      _CFGetAllocatorPtr.asFunction<CFAllocatorRef Function(CFTypeRef)>();

  CFTypeRef CFMakeCollectable(
    CFTypeRef cf,
  ) {
    return _CFMakeCollectable(
      cf,
    );
  }

  late final _CFMakeCollectablePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFTypeRef)>>(
          'CFMakeCollectable');
  late final _CFMakeCollectable =
      _CFMakeCollectablePtr.asFunction<CFTypeRef Function(CFTypeRef)>();

  ffi.Pointer<NSZone> NSDefaultMallocZone() {
    return _NSDefaultMallocZone();
  }

  late final _NSDefaultMallocZonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<NSZone> Function()>>(
          'NSDefaultMallocZone');
  late final _NSDefaultMallocZone =
      _NSDefaultMallocZonePtr.asFunction<ffi.Pointer<NSZone> Function()>();

  ffi.Pointer<NSZone> NSCreateZone(
    int startSize,
    int granularity,
    bool canFree,
  ) {
    return _NSCreateZone(
      startSize,
      granularity,
      canFree ? 1 : 0,
    );
  }

  late final _NSCreateZonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              NSUInteger, NSUInteger, ffi.Uint8)>>('NSCreateZone');
  late final _NSCreateZone = _NSCreateZonePtr.asFunction<
      ffi.Pointer<NSZone> Function(int, int, int)>();

  void NSRecycleZone(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSRecycleZone(
      zone,
    );
  }

  late final _NSRecycleZonePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NSZone>)>>(
          'NSRecycleZone');
  late final _NSRecycleZone =
      _NSRecycleZonePtr.asFunction<void Function(ffi.Pointer<NSZone>)>();

  void NSSetZoneName(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<pkg_ffi.Int> name,
  ) {
    return _NSSetZoneName(
      zone,
      name,
    );
  }

  late final _NSSetZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<pkg_ffi.Int>)>>('NSSetZoneName');
  late final _NSSetZoneName = _NSSetZoneNamePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<pkg_ffi.Int>)>();

  ffi.Pointer<pkg_ffi.Int> NSZoneName(
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSZoneName(
      zone,
    );
  }

  late final _NSZoneNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Int> Function(
              ffi.Pointer<NSZone>)>>('NSZoneName');
  late final _NSZoneName = _NSZoneNamePtr.asFunction<
      ffi.Pointer<pkg_ffi.Int> Function(ffi.Pointer<NSZone>)>();

  ffi.Pointer<NSZone> NSZoneFromPointer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFromPointer(
      ptr,
    );
  }

  late final _NSZoneFromPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<NSZone> Function(
              ffi.Pointer<ffi.Void>)>>('NSZoneFromPointer');
  late final _NSZoneFromPointer = _NSZoneFromPointerPtr.asFunction<
      ffi.Pointer<NSZone> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSZoneMalloc(
    ffi.Pointer<NSZone> zone,
    int size,
  ) {
    return _NSZoneMalloc(
      zone,
      size,
    );
  }

  late final _NSZoneMallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger)>>('NSZoneMalloc');
  late final _NSZoneMalloc = _NSZoneMallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int)>();

  ffi.Pointer<ffi.Void> NSZoneCalloc(
    ffi.Pointer<NSZone> zone,
    int numElems,
    int byteSize,
  ) {
    return _NSZoneCalloc(
      zone,
      numElems,
      byteSize,
    );
  }

  late final _NSZoneCallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<NSZone>, NSUInteger, NSUInteger)>>('NSZoneCalloc');
  late final _NSZoneCalloc = _NSZoneCallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>, int, int)>();

  ffi.Pointer<ffi.Void> NSZoneRealloc(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
    int size,
  ) {
    return _NSZoneRealloc(
      zone,
      ptr,
      size,
    );
  }

  late final _NSZoneReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<NSZone>,
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSZoneRealloc');
  late final _NSZoneRealloc = _NSZoneReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>, int)>();

  void NSZoneFree(
    ffi.Pointer<NSZone> zone,
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _NSZoneFree(
      zone,
      ptr,
    );
  }

  late final _NSZoneFreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>>('NSZoneFree');
  late final _NSZoneFree = _NSZoneFreePtr.asFunction<
      void Function(ffi.Pointer<NSZone>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NSAllocateCollectable(
    int size,
    int options,
  ) {
    return _NSAllocateCollectable(
      size,
      options,
    );
  }

  late final _NSAllocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              NSUInteger, NSUInteger)>>('NSAllocateCollectable');
  late final _NSAllocateCollectable = _NSAllocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> NSReallocateCollectable(
    ffi.Pointer<ffi.Void> ptr,
    int size,
    int options,
  ) {
    return _NSReallocateCollectable(
      ptr,
      size,
      options,
    );
  }

  late final _NSReallocateCollectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, NSUInteger,
              NSUInteger)>>('NSReallocateCollectable');
  late final _NSReallocateCollectable = _NSReallocateCollectablePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int NSPageSize() {
    return _NSPageSize();
  }

  late final _NSPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSPageSize');
  late final _NSPageSize = _NSPageSizePtr.asFunction<int Function()>();

  int NSLogPageSize() {
    return _NSLogPageSize();
  }

  late final _NSLogPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>('NSLogPageSize');
  late final _NSLogPageSize = _NSLogPageSizePtr.asFunction<int Function()>();

  int NSRoundUpToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundUpToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundUpToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundUpToMultipleOfPageSize');
  late final _NSRoundUpToMultipleOfPageSize =
      _NSRoundUpToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  int NSRoundDownToMultipleOfPageSize(
    int bytes,
  ) {
    return _NSRoundDownToMultipleOfPageSize(
      bytes,
    );
  }

  late final _NSRoundDownToMultipleOfPageSizePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(NSUInteger)>>(
          'NSRoundDownToMultipleOfPageSize');
  late final _NSRoundDownToMultipleOfPageSize =
      _NSRoundDownToMultipleOfPageSizePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> NSAllocateMemoryPages(
    int bytes,
  ) {
    return _NSAllocateMemoryPages(
      bytes,
    );
  }

  late final _NSAllocateMemoryPagesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(NSUInteger)>>(
          'NSAllocateMemoryPages');
  late final _NSAllocateMemoryPages = _NSAllocateMemoryPagesPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void NSDeallocateMemoryPages(
    ffi.Pointer<ffi.Void> ptr,
    int bytes,
  ) {
    return _NSDeallocateMemoryPages(
      ptr,
      bytes,
    );
  }

  late final _NSDeallocateMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, NSUInteger)>>('NSDeallocateMemoryPages');
  late final _NSDeallocateMemoryPages = _NSDeallocateMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int)>();

  void NSCopyMemoryPages(
    ffi.Pointer<ffi.Void> source,
    ffi.Pointer<ffi.Void> dest,
    int bytes,
  ) {
    return _NSCopyMemoryPages(
      source,
      dest,
      bytes,
    );
  }

  late final _NSCopyMemoryPagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              NSUInteger)>>('NSCopyMemoryPages');
  late final _NSCopyMemoryPages = _NSCopyMemoryPagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int NSRealMemoryAvailable() {
    return _NSRealMemoryAvailable();
  }

  late final _NSRealMemoryAvailablePtr =
      _lookup<ffi.NativeFunction<NSUInteger Function()>>(
          'NSRealMemoryAvailable');
  late final _NSRealMemoryAvailable =
      _NSRealMemoryAvailablePtr.asFunction<int Function()>();

  late final ffi.Pointer<pkg_ffi.Int> _nullable =
      _lookup<pkg_ffi.Int>('nullable');

  int get nullable => _nullable.value;

  set nullable(int value) => _nullable.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _BOOL = _lookup<pkg_ffi.Int>('BOOL');

  int get BOOL => _BOOL.value;

  set BOOL(int value) => _BOOL.value = value;

  void NSDeallocateObject(
    id object,
  ) {
    return _NSDeallocateObject(
      object,
    );
  }

  late final _NSDeallocateObjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(id)>>('NSDeallocateObject');
  late final _NSDeallocateObject =
      _NSDeallocateObjectPtr.asFunction<void Function(id)>();

  id NSCopyObject(
    id object,
    int extraBytes,
    ffi.Pointer<NSZone> zone,
  ) {
    return _NSCopyObject(
      object,
      extraBytes,
      zone,
    );
  }

  late final _NSCopyObjectPtr = _lookup<
          ffi.NativeFunction<id Function(id, NSUInteger, ffi.Pointer<NSZone>)>>(
      'NSCopyObject');
  late final _NSCopyObject =
      _NSCopyObjectPtr.asFunction<id Function(id, int, ffi.Pointer<NSZone>)>();

  bool NSShouldRetainWithZone(
    id anObject,
    ffi.Pointer<NSZone> requestedZone,
  ) {
    return _NSShouldRetainWithZone(
          anObject,
          requestedZone,
        ) !=
        0;
  }

  late final _NSShouldRetainWithZonePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(id, ffi.Pointer<NSZone>)>>(
          'NSShouldRetainWithZone');
  late final _NSShouldRetainWithZone = _NSShouldRetainWithZonePtr.asFunction<
      int Function(id, ffi.Pointer<NSZone>)>();

  void NSIncrementExtraRefCount(
    id object,
  ) {
    return _NSIncrementExtraRefCount(
      object,
    );
  }

  late final _NSIncrementExtraRefCountPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(id)>>(
          'NSIncrementExtraRefCount');
  late final _NSIncrementExtraRefCount =
      _NSIncrementExtraRefCountPtr.asFunction<void Function(id)>();

  bool NSDecrementExtraRefCountWasZero(
    id object,
  ) {
    return _NSDecrementExtraRefCountWasZero(
          object,
        ) !=
        0;
  }

  late final _NSDecrementExtraRefCountWasZeroPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(id)>>(
          'NSDecrementExtraRefCountWasZero');
  late final _NSDecrementExtraRefCountWasZero =
      _NSDecrementExtraRefCountWasZeroPtr.asFunction<int Function(id)>();

  int NSExtraRefCount(
    id object,
  ) {
    return _NSExtraRefCount(
      object,
    );
  }

  late final _NSExtraRefCountPtr =
      _lookup<ffi.NativeFunction<NSUInteger Function(id)>>('NSExtraRefCount');
  late final _NSExtraRefCount =
      _NSExtraRefCountPtr.asFunction<int Function(id)>();

  late final ffi.Pointer<pkg_ffi.Int> _id1 = _lookup<pkg_ffi.Int>('id');

  int get id1 => _id1.value;

  set id1(int value) => _id1.value = value;

  late final ffi.Pointer<NSNotificationName>
      _NSSystemClockDidChangeNotification =
      _lookup<NSNotificationName>('NSSystemClockDidChangeNotification');

  NSNotificationName get NSSystemClockDidChangeNotification =>
      _NSSystemClockDidChangeNotification.value;

  set NSSystemClockDidChangeNotification(NSNotificationName value) =>
      _NSSystemClockDidChangeNotification.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSDate = _lookup<pkg_ffi.Int>('NSDate');

  int get NSDate => _NSDate.value;

  set NSDate(int value) => _NSDate.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSComparisonResult =
      _lookup<pkg_ffi.Int>('NSComparisonResult');

  int get NSComparisonResult => _NSComparisonResult.value;

  set NSComparisonResult(int value) => _NSComparisonResult.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSString =
      _lookup<pkg_ffi.Int>('NSString');

  int get NSString => _NSString.value;

  set NSString(int value) => _NSString.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSHTTPCookieStorage =
      _lookup<pkg_ffi.Int>('NSHTTPCookieStorage');

  int get NSHTTPCookieStorage => _NSHTTPCookieStorage.value;

  set NSHTTPCookieStorage(int value) => _NSHTTPCookieStorage.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSArray =
      _lookup<pkg_ffi.Int>('NSArray');

  int get NSArray => _NSArray.value;

  set NSArray(int value) => _NSArray.value = value;

  late final ffi.Pointer<NSNotificationName>
      _NSHTTPCookieManagerCookiesChangedNotification =
      _lookup<NSNotificationName>(
          'NSHTTPCookieManagerCookiesChangedNotification');

  NSNotificationName get NSHTTPCookieManagerCookiesChangedNotification =>
      _NSHTTPCookieManagerCookiesChangedNotification.value;

  set NSHTTPCookieManagerCookiesChangedNotification(NSNotificationName value) =>
      _NSHTTPCookieManagerCookiesChangedNotification.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSEnumerator =
      _lookup<pkg_ffi.Int>('NSEnumerator');

  int get NSEnumerator => _NSEnumerator.value;

  set NSEnumerator(int value) => _NSEnumerator.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSSet = _lookup<pkg_ffi.Int>('NSSet');

  int get NSSet => _NSSet.value;

  set NSSet(int value) => _NSSet.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSProgress =
      _lookup<pkg_ffi.Int>('NSProgress');

  int get NSProgress => _NSProgress.value;

  set NSProgress(int value) => _NSProgress.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressThroughputKey =
      _lookup<NSProgressUserInfoKey>('NSProgressThroughputKey');

  NSProgressUserInfoKey get NSProgressThroughputKey =>
      _NSProgressThroughputKey.value;

  set NSProgressThroughputKey(NSProgressUserInfoKey value) =>
      _NSProgressThroughputKey.value = value;

  late final ffi.Pointer<NSProgressKind> _NSProgressKindFile =
      _lookup<NSProgressKind>('NSProgressKindFile');

  NSProgressKind get NSProgressKindFile => _NSProgressKindFile.value;

  set NSProgressKindFile(NSProgressKind value) =>
      _NSProgressKindFile.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileOperationKindKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileOperationKindKey');

  NSProgressUserInfoKey get NSProgressFileOperationKindKey =>
      _NSProgressFileOperationKindKey.value;

  set NSProgressFileOperationKindKey(NSProgressUserInfoKey value) =>
      _NSProgressFileOperationKindKey.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDownloading');

  NSProgressFileOperationKind get NSProgressFileOperationKindDownloading =>
      _NSProgressFileOperationKindDownloading.value;

  set NSProgressFileOperationKindDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDecompressingAfterDownloading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDecompressingAfterDownloading');

  NSProgressFileOperationKind
      get NSProgressFileOperationKindDecompressingAfterDownloading =>
          _NSProgressFileOperationKindDecompressingAfterDownloading.value;

  set NSProgressFileOperationKindDecompressingAfterDownloading(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDecompressingAfterDownloading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindReceiving =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindReceiving');

  NSProgressFileOperationKind get NSProgressFileOperationKindReceiving =>
      _NSProgressFileOperationKindReceiving.value;

  set NSProgressFileOperationKindReceiving(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindReceiving.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindCopying =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindCopying');

  NSProgressFileOperationKind get NSProgressFileOperationKindCopying =>
      _NSProgressFileOperationKindCopying.value;

  set NSProgressFileOperationKindCopying(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindCopying.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindUploading =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindUploading');

  NSProgressFileOperationKind get NSProgressFileOperationKindUploading =>
      _NSProgressFileOperationKindUploading.value;

  set NSProgressFileOperationKindUploading(NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindUploading.value = value;

  late final ffi.Pointer<NSProgressFileOperationKind>
      _NSProgressFileOperationKindDuplicating =
      _lookup<NSProgressFileOperationKind>(
          'NSProgressFileOperationKindDuplicating');

  NSProgressFileOperationKind get NSProgressFileOperationKindDuplicating =>
      _NSProgressFileOperationKindDuplicating.value;

  set NSProgressFileOperationKindDuplicating(
          NSProgressFileOperationKind value) =>
      _NSProgressFileOperationKindDuplicating.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileURLKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileURLKey');

  NSProgressUserInfoKey get NSProgressFileURLKey => _NSProgressFileURLKey.value;

  set NSProgressFileURLKey(NSProgressUserInfoKey value) =>
      _NSProgressFileURLKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileTotalCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileTotalCountKey');

  NSProgressUserInfoKey get NSProgressFileTotalCountKey =>
      _NSProgressFileTotalCountKey.value;

  set NSProgressFileTotalCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileTotalCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileCompletedCountKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileCompletedCountKey');

  NSProgressUserInfoKey get NSProgressFileCompletedCountKey =>
      _NSProgressFileCompletedCountKey.value;

  set NSProgressFileCompletedCountKey(NSProgressUserInfoKey value) =>
      _NSProgressFileCompletedCountKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileAnimationImageKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageKey =>
      _NSProgressFileAnimationImageKey.value;

  set NSProgressFileAnimationImageKey(NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey>
      _NSProgressFileAnimationImageOriginalRectKey =
      _lookup<NSProgressUserInfoKey>(
          'NSProgressFileAnimationImageOriginalRectKey');

  NSProgressUserInfoKey get NSProgressFileAnimationImageOriginalRectKey =>
      _NSProgressFileAnimationImageOriginalRectKey.value;

  set NSProgressFileAnimationImageOriginalRectKey(
          NSProgressUserInfoKey value) =>
      _NSProgressFileAnimationImageOriginalRectKey.value = value;

  late final ffi.Pointer<NSProgressUserInfoKey> _NSProgressFileIconKey =
      _lookup<NSProgressUserInfoKey>('NSProgressFileIconKey');

  NSProgressUserInfoKey get NSProgressFileIconKey =>
      _NSProgressFileIconKey.value;

  set NSProgressFileIconKey(NSProgressUserInfoKey value) =>
      _NSProgressFileIconKey.value = value;

  late final ffi.Pointer<CFArrayCallBacks> _kCFTypeArrayCallBacks =
      _lookup<CFArrayCallBacks>('kCFTypeArrayCallBacks');

  CFArrayCallBacks get kCFTypeArrayCallBacks => _kCFTypeArrayCallBacks.ref;

  int CFArrayGetTypeID() {
    return _CFArrayGetTypeID();
  }

  late final _CFArrayGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFArrayGetTypeID');
  late final _CFArrayGetTypeID =
      _CFArrayGetTypeIDPtr.asFunction<int Function()>();

  CFArrayRef CFArrayCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFArrayCreatePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreate');
  late final _CFArrayCreate = _CFArrayCreatePtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int, ffi.Pointer<CFArrayCallBacks>)>();

  CFArrayRef CFArrayCreateCopy(
    CFAllocatorRef allocator,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateCopy(
      allocator,
      theArray,
    );
  }

  late final _CFArrayCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFAllocatorRef, CFArrayRef)>>(
      'CFArrayCreateCopy');
  late final _CFArrayCreateCopy = _CFArrayCreateCopyPtr.asFunction<
      CFArrayRef Function(CFAllocatorRef, CFArrayRef)>();

  CFMutableArrayRef CFArrayCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFArrayCallBacks> callBacks,
  ) {
    return _CFArrayCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFArrayCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFArrayCallBacks>)>>('CFArrayCreateMutable');
  late final _CFArrayCreateMutable = _CFArrayCreateMutablePtr.asFunction<
      CFMutableArrayRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFArrayCallBacks>)>();

  CFMutableArrayRef CFArrayCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFArrayRef theArray,
  ) {
    return _CFArrayCreateMutableCopy(
      allocator,
      capacity,
      theArray,
    );
  }

  late final _CFArrayCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableArrayRef Function(CFAllocatorRef, CFIndex,
              CFArrayRef)>>('CFArrayCreateMutableCopy');
  late final _CFArrayCreateMutableCopy =
      _CFArrayCreateMutableCopyPtr.asFunction<
          CFMutableArrayRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFArrayGetCount(
    CFArrayRef theArray,
  ) {
    return _CFArrayGetCount(
      theArray,
    );
  }

  late final _CFArrayGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFArrayRef)>>(
          'CFArrayGetCount');
  late final _CFArrayGetCount =
      _CFArrayGetCountPtr.asFunction<int Function(CFArrayRef)>();

  int CFArrayGetCountOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetCountOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetCountOfValue');
  late final _CFArrayGetCountOfValue = _CFArrayGetCountOfValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayContainsValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayContainsValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayContainsValue');
  late final _CFArrayContainsValue = _CFArrayContainsValuePtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFArrayGetValueAtIndex(
    CFArrayRef theArray,
    int idx,
  ) {
    return _CFArrayGetValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayGetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFArrayRef, CFIndex)>>('CFArrayGetValueAtIndex');
  late final _CFArrayGetValueAtIndex = _CFArrayGetValueAtIndexPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFArrayRef, int)>();

  void CFArrayGetValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFArrayGetValues(
      theArray,
      range,
      values,
    );
  }

  late final _CFArrayGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFArrayGetValues');
  late final _CFArrayGetValues = _CFArrayGetValuesPtr.asFunction<
      void Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFArrayApplyFunction(
    CFArrayRef theArray,
    CFRange range,
    CFArrayApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayApplyFunction(
      theArray,
      range,
      applier,
      context,
    );
  }

  late final _CFArrayApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayApplyFunction');
  late final _CFArrayApplyFunction = _CFArrayApplyFunctionPtr.asFunction<
      void Function(CFArrayRef, CFRange, CFArrayApplierFunction,
          ffi.Pointer<ffi.Void>)>();

  int CFArrayGetFirstIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetFirstIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetFirstIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetFirstIndexOfValue');
  late final _CFArrayGetFirstIndexOfValue = _CFArrayGetFirstIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayGetLastIndexOfValue(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayGetLastIndexOfValue(
      theArray,
      range,
      value,
    );
  }

  late final _CFArrayGetLastIndexOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFArrayRef, CFRange,
              ffi.Pointer<ffi.Void>)>>('CFArrayGetLastIndexOfValue');
  late final _CFArrayGetLastIndexOfValue = _CFArrayGetLastIndexOfValuePtr
      .asFunction<int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>)>();

  int CFArrayBSearchValues(
    CFArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Void> value,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArrayBSearchValues(
      theArray,
      range,
      value,
      comparator,
      context,
    );
  }

  late final _CFArrayBSearchValuesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFArrayRef,
              CFRange,
              ffi.Pointer<ffi.Void>,
              CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArrayBSearchValues');
  late final _CFArrayBSearchValues = _CFArrayBSearchValuesPtr.asFunction<
      int Function(CFArrayRef, CFRange, ffi.Pointer<ffi.Void>,
          CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendValue(
    CFMutableArrayRef theArray,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayAppendValue(
      theArray,
      value,
    );
  }

  late final _CFArrayAppendValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, ffi.Pointer<ffi.Void>)>>('CFArrayAppendValue');
  late final _CFArrayAppendValue = _CFArrayAppendValuePtr.asFunction<
      void Function(CFMutableArrayRef, ffi.Pointer<ffi.Void>)>();

  void CFArrayInsertValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArrayInsertValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArrayInsertValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArrayInsertValueAtIndex');
  late final _CFArrayInsertValueAtIndex =
      _CFArrayInsertValueAtIndexPtr.asFunction<
          void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArraySetValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFArraySetValueAtIndex(
      theArray,
      idx,
      value,
    );
  }

  late final _CFArraySetValueAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              ffi.Pointer<ffi.Void>)>>('CFArraySetValueAtIndex');
  late final _CFArraySetValueAtIndex = _CFArraySetValueAtIndexPtr.asFunction<
      void Function(CFMutableArrayRef, int, ffi.Pointer<ffi.Void>)>();

  void CFArrayRemoveValueAtIndex(
    CFMutableArrayRef theArray,
    int idx,
  ) {
    return _CFArrayRemoveValueAtIndex(
      theArray,
      idx,
    );
  }

  late final _CFArrayRemoveValueAtIndexPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef, CFIndex)>>(
      'CFArrayRemoveValueAtIndex');
  late final _CFArrayRemoveValueAtIndex = _CFArrayRemoveValueAtIndexPtr
      .asFunction<void Function(CFMutableArrayRef, int)>();

  void CFArrayRemoveAllValues(
    CFMutableArrayRef theArray,
  ) {
    return _CFArrayRemoveAllValues(
      theArray,
    );
  }

  late final _CFArrayRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableArrayRef)>>(
          'CFArrayRemoveAllValues');
  late final _CFArrayRemoveAllValues =
      _CFArrayRemoveAllValuesPtr.asFunction<void Function(CFMutableArrayRef)>();

  void CFArrayReplaceValues(
    CFMutableArrayRef theArray,
    CFRange range,
    ffi.Pointer<ffi.Pointer<ffi.Void>> newValues,
    int newCount,
  ) {
    return _CFArrayReplaceValues(
      theArray,
      range,
      newValues,
      newCount,
    );
  }

  late final _CFArrayReplaceValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef,
              CFRange,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFArrayReplaceValues');
  late final _CFArrayReplaceValues = _CFArrayReplaceValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, int)>();

  void CFArrayExchangeValuesAtIndices(
    CFMutableArrayRef theArray,
    int idx1,
    int idx2,
  ) {
    return _CFArrayExchangeValuesAtIndices(
      theArray,
      idx1,
      idx2,
    );
  }

  late final _CFArrayExchangeValuesAtIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFIndex,
              CFIndex)>>('CFArrayExchangeValuesAtIndices');
  late final _CFArrayExchangeValuesAtIndices =
      _CFArrayExchangeValuesAtIndicesPtr.asFunction<
          void Function(CFMutableArrayRef, int, int)>();

  void CFArraySortValues(
    CFMutableArrayRef theArray,
    CFRange range,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFArraySortValues(
      theArray,
      range,
      comparator,
      context,
    );
  }

  late final _CFArraySortValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFArraySortValues');
  late final _CFArraySortValues = _CFArraySortValuesPtr.asFunction<
      void Function(CFMutableArrayRef, CFRange, CFComparatorFunction,
          ffi.Pointer<ffi.Void>)>();

  void CFArrayAppendArray(
    CFMutableArrayRef theArray,
    CFArrayRef otherArray,
    CFRange otherRange,
  ) {
    return _CFArrayAppendArray(
      theArray,
      otherArray,
      otherRange,
    );
  }

  late final _CFArrayAppendArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableArrayRef, CFArrayRef, CFRange)>>('CFArrayAppendArray');
  late final _CFArrayAppendArray = _CFArrayAppendArrayPtr.asFunction<
      void Function(CFMutableArrayRef, CFArrayRef, CFRange)>();

  ffi.Pointer<ffi.Void> os_retain(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_retain(
      object,
    );
  }

  late final _os_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('os_retain');
  late final _os_retain = _os_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void os_release(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _os_release(
      object,
    );
  }

  late final _os_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'os_release');
  late final _os_release =
      _os_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> sec_retain(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_retain(
      obj,
    );
  }

  late final _sec_retainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('sec_retain');
  late final _sec_retain = _sec_retainPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void sec_release(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _sec_release(
      obj,
    );
  }

  late final _sec_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'sec_release');
  late final _sec_release =
      _sec_releasePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  CFStringRef SecCopyErrorMessageString(
    int status,
    ffi.Pointer<ffi.Void> reserved,
  ) {
    return _SecCopyErrorMessageString(
      status,
      reserved,
    );
  }

  late final _SecCopyErrorMessageStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              OSStatus, ffi.Pointer<ffi.Void>)>>('SecCopyErrorMessageString');
  late final _SecCopyErrorMessageString = _SecCopyErrorMessageStringPtr
      .asFunction<CFStringRef Function(int, ffi.Pointer<ffi.Void>)>();

  void __assert_rtn(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
  ) {
    return ___assert_rtn(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___assert_rtnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>)>>('__assert_rtn');
  late final ___assert_rtn = ___assert_rtnPtr.asFunction<
      void Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int,
          ffi.Pointer<pkg_ffi.Char>)>();

  late final ffi.Pointer<_RuneLocale> __DefaultRuneLocale =
      _lookup<_RuneLocale>('_DefaultRuneLocale');

  _RuneLocale get _DefaultRuneLocale => __DefaultRuneLocale.ref;

  late final ffi.Pointer<ffi.Pointer<_RuneLocale>> __CurrentRuneLocale =
      _lookup<ffi.Pointer<_RuneLocale>>('_CurrentRuneLocale');

  ffi.Pointer<_RuneLocale> get _CurrentRuneLocale => __CurrentRuneLocale.value;

  set _CurrentRuneLocale(ffi.Pointer<_RuneLocale> value) =>
      __CurrentRuneLocale.value = value;

  int ___runetype(
    int arg0,
  ) {
    return ____runetype(
      arg0,
    );
  }

  late final ____runetypePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(__darwin_ct_rune_t)>>('___runetype');
  late final ____runetype = ____runetypePtr.asFunction<int Function(int)>();

  int ___tolower(
    int arg0,
  ) {
    return ____tolower(
      arg0,
    );
  }

  late final ____tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___tolower');
  late final ____tolower = ____tolowerPtr.asFunction<int Function(int)>();

  int ___toupper(
    int arg0,
  ) {
    return ____toupper(
      arg0,
    );
  }

  late final ____toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '___toupper');
  late final ____toupper = ____toupperPtr.asFunction<int Function(int)>();

  int __maskrune(
    int arg0,
    int arg1,
  ) {
    return ___maskrune(
      arg0,
      arg1,
    );
  }

  late final ___maskrunePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              __darwin_ct_rune_t, pkg_ffi.UnsignedLong)>>('__maskrune');
  late final ___maskrune = ___maskrunePtr.asFunction<int Function(int, int)>();

  int __toupper(
    int arg0,
  ) {
    return ___toupper1(
      arg0,
    );
  }

  late final ___toupperPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__toupper');
  late final ___toupper1 = ___toupperPtr.asFunction<int Function(int)>();

  int __tolower(
    int arg0,
  ) {
    return ___tolower1(
      arg0,
    );
  }

  late final ___tolowerPtr = _lookup<
          ffi.NativeFunction<__darwin_ct_rune_t Function(__darwin_ct_rune_t)>>(
      '__tolower');
  late final ___tolower1 = ___tolowerPtr.asFunction<int Function(int)>();

  ffi.Pointer<pkg_ffi.Int> __error() {
    return ___error();
  }

  late final ___errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Int> Function()>>(
          '__error');
  late final ___error =
      ___errorPtr.asFunction<ffi.Pointer<pkg_ffi.Int> Function()>();

  ffi.Pointer<lconv> localeconv() {
    return _localeconv();
  }

  late final _localeconvPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<lconv> Function()>>('localeconv');
  late final _localeconv =
      _localeconvPtr.asFunction<ffi.Pointer<lconv> Function()>();

  ffi.Pointer<pkg_ffi.Char> setlocale(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _setlocale(
      arg0,
      arg1,
    );
  }

  late final _setlocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>)>>('setlocale');
  late final _setlocale = _setlocalePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(int, ffi.Pointer<pkg_ffi.Char>)>();

  int __math_errhandling() {
    return ___math_errhandling();
  }

  late final ___math_errhandlingPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('__math_errhandling');
  late final ___math_errhandling =
      ___math_errhandlingPtr.asFunction<int Function()>();

  int __fpclassifyf(
    double arg0,
  ) {
    return ___fpclassifyf(
      arg0,
    );
  }

  late final ___fpclassifyfPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Float)>>(
          '__fpclassifyf');
  late final ___fpclassifyf =
      ___fpclassifyfPtr.asFunction<int Function(double)>();

  int __fpclassifyd(
    double arg0,
  ) {
    return ___fpclassifyd(
      arg0,
    );
  }

  late final ___fpclassifydPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Double)>>(
          '__fpclassifyd');
  late final ___fpclassifyd =
      ___fpclassifydPtr.asFunction<int Function(double)>();

  double acosf(
    double arg0,
  ) {
    return _acosf(
      arg0,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double acos(
    double arg0,
  ) {
    return _acos(
      arg0,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asinf(
    double arg0,
  ) {
    return _asinf(
      arg0,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double asin(
    double arg0,
  ) {
    return _asin(
      arg0,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atanf(
    double arg0,
  ) {
    return _atanf(
      arg0,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double atan(
    double arg0,
  ) {
    return _atan(
      arg0,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2f(
    double arg0,
    double arg1,
  ) {
    return _atan2f(
      arg0,
      arg1,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atan2(
    double arg0,
    double arg1,
  ) {
    return _atan2(
      arg0,
      arg1,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cosf(
    double arg0,
  ) {
    return _cosf(
      arg0,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double cos(
    double arg0,
  ) {
    return _cos(
      arg0,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double sinf(
    double arg0,
  ) {
    return _sinf(
      arg0,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sin(
    double arg0,
  ) {
    return _sin(
      arg0,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double tanf(
    double arg0,
  ) {
    return _tanf(
      arg0,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tan(
    double arg0,
  ) {
    return _tan(
      arg0,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double acoshf(
    double arg0,
  ) {
    return _acoshf(
      arg0,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double acosh(
    double arg0,
  ) {
    return _acosh(
      arg0,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinhf(
    double arg0,
  ) {
    return _asinhf(
      arg0,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double asinh(
    double arg0,
  ) {
    return _asinh(
      arg0,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanhf(
    double arg0,
  ) {
    return _atanhf(
      arg0,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double atanh(
    double arg0,
  ) {
    return _atanh(
      arg0,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double coshf(
    double arg0,
  ) {
    return _coshf(
      arg0,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double cosh(
    double arg0,
  ) {
    return _cosh(
      arg0,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double sinhf(
    double arg0,
  ) {
    return _sinhf(
      arg0,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sinh(
    double arg0,
  ) {
    return _sinh(
      arg0,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double tanhf(
    double arg0,
  ) {
    return _tanhf(
      arg0,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  double tanh(
    double arg0,
  ) {
    return _tanh(
      arg0,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double expf(
    double arg0,
  ) {
    return _expf(
      arg0,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double exp(
    double arg0,
  ) {
    return _exp(
      arg0,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double exp2f(
    double arg0,
  ) {
    return _exp2f(
      arg0,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double exp2(
    double arg0,
  ) {
    return _exp2(
      arg0,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1f(
    double arg0,
  ) {
    return _expm1f(
      arg0,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double expm1(
    double arg0,
  ) {
    return _expm1(
      arg0,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double logf(
    double arg0,
  ) {
    return _logf(
      arg0,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double log(
    double arg0,
  ) {
    return _log(
      arg0,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10f(
    double arg0,
  ) {
    return _log10f(
      arg0,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double log10(
    double arg0,
  ) {
    return _log10(
      arg0,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double log2f(
    double arg0,
  ) {
    return _log2f(
      arg0,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double log2(
    double arg0,
  ) {
    return _log2(
      arg0,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double log1pf(
    double arg0,
  ) {
    return _log1pf(
      arg0,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log1p(
    double arg0,
  ) {
    return _log1p(
      arg0,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double logbf(
    double arg0,
  ) {
    return _logbf(
      arg0,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf = _logbfPtr.asFunction<double Function(double)>();

  double logb(
    double arg0,
  ) {
    return _logb(
      arg0,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb = _logbPtr.asFunction<double Function(double)>();

  double modff(
    double arg0,
    ffi.Pointer<ffi.Float> arg1,
  ) {
    return _modff(
      arg0,
      arg1,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double modf(
    double arg0,
    ffi.Pointer<ffi.Double> arg1,
  ) {
    return _modf(
      arg0,
      arg1,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double ldexpf(
    double arg0,
    int arg1,
  ) {
    return _ldexpf(
      arg0,
      arg1,
    );
  }

  late final _ldexpfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, pkg_ffi.Int)>>(
          'ldexpf');
  late final _ldexpf = _ldexpfPtr.asFunction<double Function(double, int)>();

  double ldexp(
    double arg0,
    int arg1,
  ) {
    return _ldexp(
      arg0,
      arg1,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, pkg_ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double frexpf(
    double arg0,
    ffi.Pointer<pkg_ffi.Int> arg1,
  ) {
    return _frexpf(
      arg0,
      arg1,
    );
  }

  late final _frexpfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<pkg_ffi.Int>)>>('frexpf');
  late final _frexpf = _frexpfPtr
      .asFunction<double Function(double, ffi.Pointer<pkg_ffi.Int>)>();

  double frexp(
    double arg0,
    ffi.Pointer<pkg_ffi.Int> arg1,
  ) {
    return _frexp(
      arg0,
      arg1,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<pkg_ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<pkg_ffi.Int>)>();

  int ilogbf(
    double arg0,
  ) {
    return _ilogbf(
      arg0,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  int ilogb(
    double arg0,
  ) {
    return _ilogb(
      arg0,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double scalbnf(
    double arg0,
    int arg1,
  ) {
    return _scalbnf(
      arg0,
      arg1,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, pkg_ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double arg0,
    int arg1,
  ) {
    return _scalbn(
      arg0,
      arg1,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, pkg_ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double scalblnf(
    double arg0,
    int arg1,
  ) {
    return _scalblnf(
      arg0,
      arg1,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, pkg_ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbln(
    double arg0,
    int arg1,
  ) {
    return _scalbln(
      arg0,
      arg1,
    );
  }

  late final _scalblnPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Double, pkg_ffi.Long)>>(
      'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double fabsf(
    double arg0,
  ) {
    return _fabsf(
      arg0,
    );
  }

  late final _fabsfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('fabsf');
  late final _fabsf = _fabsfPtr.asFunction<double Function(double)>();

  double fabs(
    double arg0,
  ) {
    return _fabs(
      arg0,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double cbrtf(
    double arg0,
  ) {
    return _cbrtf(
      arg0,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double cbrt(
    double arg0,
  ) {
    return _cbrt(
      arg0,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double hypotf(
    double arg0,
    double arg1,
  ) {
    return _hypotf(
      arg0,
      arg1,
    );
  }

  late final _hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'hypotf');
  late final _hypotf = _hypotfPtr.asFunction<double Function(double, double)>();

  double hypot(
    double arg0,
    double arg1,
  ) {
    return _hypot(
      arg0,
      arg1,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot = _hypotPtr.asFunction<double Function(double, double)>();

  double powf(
    double arg0,
    double arg1,
  ) {
    return _powf(
      arg0,
      arg1,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double pow(
    double arg0,
    double arg1,
  ) {
    return _pow(
      arg0,
      arg1,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sqrtf(
    double arg0,
  ) {
    return _sqrtf(
      arg0,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double sqrt(
    double arg0,
  ) {
    return _sqrt(
      arg0,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double erff(
    double arg0,
  ) {
    return _erff(
      arg0,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erf(
    double arg0,
  ) {
    return _erf(
      arg0,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfcf(
    double arg0,
  ) {
    return _erfcf(
      arg0,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double erfc(
    double arg0,
  ) {
    return _erfc(
      arg0,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double lgammaf(
    double arg0,
  ) {
    return _lgammaf(
      arg0,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  double lgamma(
    double arg0,
  ) {
    return _lgamma(
      arg0,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  double tgammaf(
    double arg0,
  ) {
    return _tgammaf(
      arg0,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double tgamma(
    double arg0,
  ) {
    return _tgamma(
      arg0,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double ceilf(
    double arg0,
  ) {
    return _ceilf(
      arg0,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double ceil(
    double arg0,
  ) {
    return _ceil(
      arg0,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double floorf(
    double arg0,
  ) {
    return _floorf(
      arg0,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double floor(
    double arg0,
  ) {
    return _floor(
      arg0,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double nearbyintf(
    double arg0,
  ) {
    return _nearbyintf(
      arg0,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nearbyint(
    double arg0,
  ) {
    return _nearbyint(
      arg0,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double rintf(
    double arg0,
  ) {
    return _rintf(
      arg0,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double rint(
    double arg0,
  ) {
    return _rint(
      arg0,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  int lrintf(
    double arg0,
  ) {
    return _lrintf(
      arg0,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lrint(
    double arg0,
  ) {
    return _lrint(
      arg0,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  double roundf(
    double arg0,
  ) {
    return _roundf(
      arg0,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double round(
    double arg0,
  ) {
    return _round(
      arg0,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  int lroundf(
    double arg0,
  ) {
    return _lroundf(
      arg0,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  int lround(
    double arg0,
  ) {
    return _lround(
      arg0,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int llrintf(
    double arg0,
  ) {
    return _llrintf(
      arg0,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.LongLong Function(ffi.Float)>>(
          'llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llrint(
    double arg0,
  ) {
    return _llrint(
      arg0,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.LongLong Function(ffi.Double)>>(
          'llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llroundf(
    double arg0,
  ) {
    return _llroundf(
      arg0,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.LongLong Function(ffi.Float)>>(
          'llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  int llround(
    double arg0,
  ) {
    return _llround(
      arg0,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.LongLong Function(ffi.Double)>>(
          'llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double truncf(
    double arg0,
  ) {
    return _truncf(
      arg0,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double trunc(
    double arg0,
  ) {
    return _trunc(
      arg0,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double fmodf(
    double arg0,
    double arg1,
  ) {
    return _fmodf(
      arg0,
      arg1,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double fmod(
    double arg0,
    double arg1,
  ) {
    return _fmod(
      arg0,
      arg1,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double arg0,
    double arg1,
  ) {
    return _remainderf(
      arg0,
      arg1,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remainder(
    double arg0,
    double arg1,
  ) {
    return _remainder(
      arg0,
      arg1,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquof(
    double arg0,
    double arg1,
    ffi.Pointer<pkg_ffi.Int> arg2,
  ) {
    return _remquof(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<pkg_ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<pkg_ffi.Int>)>();

  double remquo(
    double arg0,
    double arg1,
    ffi.Pointer<pkg_ffi.Int> arg2,
  ) {
    return _remquo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<pkg_ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<pkg_ffi.Int>)>();

  double copysignf(
    double arg0,
    double arg1,
  ) {
    return _copysignf(
      arg0,
      arg1,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double copysign(
    double arg0,
    double arg1,
  ) {
    return _copysign(
      arg0,
      arg1,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign =
      _copysignPtr.asFunction<double Function(double, double)>();

  double nanf(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _nanf(
      arg0,
    );
  }

  late final _nanfPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<pkg_ffi.Char>)>();

  double nan(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _nan(
      arg0,
    );
  }

  late final _nanPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<pkg_ffi.Char>)>();

  double nextafterf(
    double arg0,
    double arg1,
  ) {
    return _nextafterf(
      arg0,
      arg1,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double nextafter(
    double arg0,
    double arg1,
  ) {
    return _nextafter(
      arg0,
      arg1,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double fdimf(
    double arg0,
    double arg1,
  ) {
    return _fdimf(
      arg0,
      arg1,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fdim(
    double arg0,
    double arg1,
  ) {
    return _fdim(
      arg0,
      arg1,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double fmaxf(
    double arg0,
    double arg1,
  ) {
    return _fmaxf(
      arg0,
      arg1,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fmax(
    double arg0,
    double arg1,
  ) {
    return _fmax(
      arg0,
      arg1,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fminf(
    double arg0,
    double arg1,
  ) {
    return _fminf(
      arg0,
      arg1,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double fmin(
    double arg0,
    double arg1,
  ) {
    return _fmin(
      arg0,
      arg1,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fmaf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fma(
    double arg0,
    double arg1,
    double arg2,
  ) {
    return _fma(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double __exp10f(
    double arg0,
  ) {
    return ___exp10f(
      arg0,
    );
  }

  late final ___exp10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__exp10f');
  late final ___exp10f = ___exp10fPtr.asFunction<double Function(double)>();

  double __exp10(
    double arg0,
  ) {
    return ___exp10(
      arg0,
    );
  }

  late final ___exp10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__exp10');
  late final ___exp10 = ___exp10Ptr.asFunction<double Function(double)>();

  double __cospif(
    double arg0,
  ) {
    return ___cospif(
      arg0,
    );
  }

  late final ___cospifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__cospif');
  late final ___cospif = ___cospifPtr.asFunction<double Function(double)>();

  double __cospi(
    double arg0,
  ) {
    return ___cospi(
      arg0,
    );
  }

  late final ___cospiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__cospi');
  late final ___cospi = ___cospiPtr.asFunction<double Function(double)>();

  double __sinpif(
    double arg0,
  ) {
    return ___sinpif(
      arg0,
    );
  }

  late final ___sinpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__sinpif');
  late final ___sinpif = ___sinpifPtr.asFunction<double Function(double)>();

  double __sinpi(
    double arg0,
  ) {
    return ___sinpi(
      arg0,
    );
  }

  late final ___sinpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__sinpi');
  late final ___sinpi = ___sinpiPtr.asFunction<double Function(double)>();

  double __tanpif(
    double arg0,
  ) {
    return ___tanpif(
      arg0,
    );
  }

  late final ___tanpifPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('__tanpif');
  late final ___tanpif = ___tanpifPtr.asFunction<double Function(double)>();

  double __tanpi(
    double arg0,
  ) {
    return ___tanpi(
      arg0,
    );
  }

  late final ___tanpiPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('__tanpi');
  late final ___tanpi = ___tanpiPtr.asFunction<double Function(double)>();

  __float2 __sincosf_stret(
    double arg0,
  ) {
    return ___sincosf_stret(
      arg0,
    );
  }

  late final ___sincosf_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincosf_stret');
  late final ___sincosf_stret =
      ___sincosf_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincos_stret(
    double arg0,
  ) {
    return ___sincos_stret(
      arg0,
    );
  }

  late final ___sincos_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincos_stret');
  late final ___sincos_stret =
      ___sincos_stretPtr.asFunction<__double2 Function(double)>();

  __float2 __sincospif_stret(
    double arg0,
  ) {
    return ___sincospif_stret(
      arg0,
    );
  }

  late final ___sincospif_stretPtr =
      _lookup<ffi.NativeFunction<__float2 Function(ffi.Float)>>(
          '__sincospif_stret');
  late final ___sincospif_stret =
      ___sincospif_stretPtr.asFunction<__float2 Function(double)>();

  __double2 __sincospi_stret(
    double arg0,
  ) {
    return ___sincospi_stret(
      arg0,
    );
  }

  late final ___sincospi_stretPtr =
      _lookup<ffi.NativeFunction<__double2 Function(ffi.Double)>>(
          '__sincospi_stret');
  late final ___sincospi_stret =
      ___sincospi_stretPtr.asFunction<__double2 Function(double)>();

  double j0(
    double arg0,
  ) {
    return _j0(
      arg0,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j0 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double arg0,
  ) {
    return _j1(
      arg0,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j1 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int arg0,
    double arg1,
  ) {
    return _jn(
      arg0,
      arg1,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(pkg_ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double arg0,
  ) {
    return _y0(
      arg0,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y0 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double arg0,
  ) {
    return _y1(
      arg0,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y1 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int arg0,
    double arg1,
  ) {
    return _yn(
      arg0,
      arg1,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(pkg_ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn = _ynPtr.asFunction<double Function(int, double)>();

  double scalb(
    double arg0,
    double arg1,
  ) {
    return _scalb(
      arg0,
      arg1,
    );
  }

  late final _scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'scalb');
  late final _scalb = _scalbPtr.asFunction<double Function(double, double)>();

  late final ffi.Pointer<pkg_ffi.Int> _signgam =
      _lookup<pkg_ffi.Int>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  int setjmp(
    ffi.Pointer<pkg_ffi.Int> arg0,
  ) {
    return _setjmp1(
      arg0,
    );
  }

  late final _setjmpPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Int>)>>(
      'setjmp');
  late final _setjmp1 =
      _setjmpPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Int>)>();

  void longjmp(
    ffi.Pointer<pkg_ffi.Int> arg0,
    int arg1,
  ) {
    return _longjmp1(
      arg0,
      arg1,
    );
  }

  late final _longjmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int)>>('longjmp');
  late final _longjmp1 =
      _longjmpPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Int>, int)>();

  int _setjmp(
    ffi.Pointer<pkg_ffi.Int> arg0,
  ) {
    return __setjmp(
      arg0,
    );
  }

  late final __setjmpPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Int>)>>(
      '_setjmp');
  late final __setjmp =
      __setjmpPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Int>)>();

  void _longjmp(
    ffi.Pointer<pkg_ffi.Int> arg0,
    int arg1,
  ) {
    return __longjmp(
      arg0,
      arg1,
    );
  }

  late final __longjmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int)>>('_longjmp');
  late final __longjmp =
      __longjmpPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Int>, int)>();

  int sigsetjmp(
    ffi.Pointer<pkg_ffi.Int> arg0,
    int arg1,
  ) {
    return _sigsetjmp(
      arg0,
      arg1,
    );
  }

  late final _sigsetjmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int)>>('sigsetjmp');
  late final _sigsetjmp =
      _sigsetjmpPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Int>, int)>();

  void siglongjmp(
    ffi.Pointer<pkg_ffi.Int> arg0,
    int arg1,
  ) {
    return _siglongjmp(
      arg0,
      arg1,
    );
  }

  late final _siglongjmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int)>>('siglongjmp');
  late final _siglongjmp =
      _siglongjmpPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Int>, int)>();

  void longjmperror() {
    return _longjmperror();
  }

  late final _longjmperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('longjmperror');
  late final _longjmperror = _longjmperrorPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> Function(
              pkg_ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(pkg_ffi.Int)>>)>>('signal');
  late final _signal = _signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> Function(
          int,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>> _sys_signame =
      _lookup<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>>('sys_signame');

  ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> get sys_signame => _sys_signame.value;

  set sys_signame(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> value) =>
      _sys_signame.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>> _sys_siglist =
      _lookup<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> get sys_siglist => _sys_siglist.value;

  set sys_siglist(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> value) =>
      _sys_siglist.value = value;

  int raise(
    int arg0,
  ) {
    return _raise(
      arg0,
    );
  }

  late final _raisePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('raise');
  late final _raise = _raisePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> bsd_signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> arg1,
  ) {
    return _bsd_signal(
      arg0,
      arg1,
    );
  }

  late final _bsd_signalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> Function(
              pkg_ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(pkg_ffi.Int)>>)>>('bsd_signal');
  late final _bsd_signal = _bsd_signalPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> Function(
          int,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>)>();

  int kill(
    int arg0,
    int arg1,
  ) {
    return _kill(
      arg0,
      arg1,
    );
  }

  late final _killPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pid_t, pkg_ffi.Int)>>(
          'kill');
  late final _kill = _killPtr.asFunction<int Function(int, int)>();

  int killpg(
    int arg0,
    int arg1,
  ) {
    return _killpg(
      arg0,
      arg1,
    );
  }

  late final _killpgPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pid_t, pkg_ffi.Int)>>(
          'killpg');
  late final _killpg = _killpgPtr.asFunction<int Function(int, int)>();

  int pthread_kill(
    pthread_t arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_killPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pthread_t, pkg_ffi.Int)>>(
          'pthread_kill');
  late final _pthread_kill =
      _pthread_killPtr.asFunction<int Function(pthread_t, int)>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmaskPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('pthread_sigmask');
  late final _pthread_sigmask = _pthread_sigmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigaction1(
    int arg0,
    ffi.Pointer<sigaction> arg1,
    ffi.Pointer<sigaction> arg2,
  ) {
    return _sigaction1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigaction1Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<sigaction>,
              ffi.Pointer<sigaction>)>>('sigaction');
  late final _sigaction1 = _sigaction1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigaction>, ffi.Pointer<sigaction>)>();

  int sigaddset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigaddset(
      arg0,
      arg1,
    );
  }

  late final _sigaddsetPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<sigset_t>, pkg_ffi.Int)>>('sigaddset');
  late final _sigaddset =
      _sigaddsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigaltstack(
    ffi.Pointer<stack_t> arg0,
    ffi.Pointer<stack_t> arg1,
  ) {
    return _sigaltstack(
      arg0,
      arg1,
    );
  }

  late final _sigaltstackPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>>('sigaltstack');
  late final _sigaltstack = _sigaltstackPtr
      .asFunction<int Function(ffi.Pointer<stack_t>, ffi.Pointer<stack_t>)>();

  int sigdelset(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigdelset(
      arg0,
      arg1,
    );
  }

  late final _sigdelsetPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<sigset_t>, pkg_ffi.Int)>>('sigdelset');
  late final _sigdelset =
      _sigdelsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigemptyset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigemptyset(
      arg0,
    );
  }

  late final _sigemptysetPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigemptyset');
  late final _sigemptyset =
      _sigemptysetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigfillset(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigfillset(
      arg0,
    );
  }

  late final _sigfillsetPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigfillset');
  late final _sigfillset =
      _sigfillsetPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sighold(
    int arg0,
  ) {
    return _sighold(
      arg0,
    );
  }

  late final _sigholdPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('sighold');
  late final _sighold = _sigholdPtr.asFunction<int Function(int)>();

  int sigignore(
    int arg0,
  ) {
    return _sigignore(
      arg0,
    );
  }

  late final _sigignorePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'sigignore');
  late final _sigignore = _sigignorePtr.asFunction<int Function(int)>();

  int siginterrupt(
    int arg0,
    int arg1,
  ) {
    return _siginterrupt(
      arg0,
      arg1,
    );
  }

  late final _siginterruptPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'siginterrupt');
  late final _siginterrupt =
      _siginterruptPtr.asFunction<int Function(int, int)>();

  int sigismember(
    ffi.Pointer<sigset_t> arg0,
    int arg1,
  ) {
    return _sigismember(
      arg0,
      arg1,
    );
  }

  late final _sigismemberPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<sigset_t>, pkg_ffi.Int)>>('sigismember');
  late final _sigismember =
      _sigismemberPtr.asFunction<int Function(ffi.Pointer<sigset_t>, int)>();

  int sigpause(
    int arg0,
  ) {
    return _sigpause(
      arg0,
    );
  }

  late final _sigpausePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'sigpause');
  late final _sigpause = _sigpausePtr.asFunction<int Function(int)>();

  int sigpending(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigpending(
      arg0,
    );
  }

  late final _sigpendingPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigpending');
  late final _sigpending =
      _sigpendingPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigprocmask(
    int arg0,
    ffi.Pointer<sigset_t> arg1,
    ffi.Pointer<sigset_t> arg2,
  ) {
    return _sigprocmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigprocmaskPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<sigset_t>,
              ffi.Pointer<sigset_t>)>>('sigprocmask');
  late final _sigprocmask = _sigprocmaskPtr.asFunction<
      int Function(int, ffi.Pointer<sigset_t>, ffi.Pointer<sigset_t>)>();

  int sigrelse(
    int arg0,
  ) {
    return _sigrelse(
      arg0,
    );
  }

  late final _sigrelsePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'sigrelse');
  late final _sigrelse = _sigrelsePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> sigset(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> arg1,
  ) {
    return _sigset(
      arg0,
      arg1,
    );
  }

  late final _sigsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> Function(
              pkg_ffi.Int,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(pkg_ffi.Int)>>)>>('sigset');
  late final _sigset = _sigsetPtr.asFunction<
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>> Function(
          int,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>)>();

  int sigsuspend(
    ffi.Pointer<sigset_t> arg0,
  ) {
    return _sigsuspend(
      arg0,
    );
  }

  late final _sigsuspendPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<sigset_t>)>>(
          'sigsuspend');
  late final _sigsuspend =
      _sigsuspendPtr.asFunction<int Function(ffi.Pointer<sigset_t>)>();

  int sigwait(
    ffi.Pointer<sigset_t> arg0,
    ffi.Pointer<pkg_ffi.Int> arg1,
  ) {
    return _sigwait(
      arg0,
      arg1,
    );
  }

  late final _sigwaitPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<sigset_t>, ffi.Pointer<pkg_ffi.Int>)>>('sigwait');
  late final _sigwait = _sigwaitPtr.asFunction<
      int Function(ffi.Pointer<sigset_t>, ffi.Pointer<pkg_ffi.Int>)>();

  void psignal(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _psignal(
      arg0,
      arg1,
    );
  }

  late final _psignalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              pkg_ffi.UnsignedInt, ffi.Pointer<pkg_ffi.Char>)>>('psignal');
  late final _psignal =
      _psignalPtr.asFunction<void Function(int, ffi.Pointer<pkg_ffi.Char>)>();

  int sigblock(
    int arg0,
  ) {
    return _sigblock(
      arg0,
    );
  }

  late final _sigblockPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'sigblock');
  late final _sigblock = _sigblockPtr.asFunction<int Function(int)>();

  int sigsetmask(
    int arg0,
  ) {
    return _sigsetmask(
      arg0,
    );
  }

  late final _sigsetmaskPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'sigsetmask');
  late final _sigsetmask = _sigsetmaskPtr.asFunction<int Function(int)>();

  int sigvec1(
    int arg0,
    ffi.Pointer<sigvec> arg1,
    ffi.Pointer<sigvec> arg2,
  ) {
    return _sigvec1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigvec1Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<sigvec>,
              ffi.Pointer<sigvec>)>>('sigvec');
  late final _sigvec1 = _sigvec1Ptr.asFunction<
      int Function(int, ffi.Pointer<sigvec>, ffi.Pointer<sigvec>)>();

  int renameat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(
          int, ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<pkg_ffi.Char>)>();

  int renamex_np(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.UnsignedInt)>>('renamex_np');
  late final _renamex_np = _renamex_npPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.UnsignedInt)>>('renameatx_np');
  late final _renameatx_np = _renameatx_npPtr.asFunction<
      int Function(int, ffi.Pointer<pkg_ffi.Char>, int,
          ffi.Pointer<pkg_ffi.Char>, int)>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<pkg_ffi.Char> fgets(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<pkg_ffi.Char> __filename,
    ffi.Pointer<pkg_ffi.Char> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>)>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputcPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<FILE>)>>('fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              pkg_ffi.Size, ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<FILE>)>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>)>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<FILE>, pkg_ffi.Long, pkg_ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<fpos_t> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              pkg_ffi.Size, ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  ffi.Pointer<pkg_ffi.Char> gets(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _getsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('gets');
  late final _gets = _getsPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  void perror(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pkg_ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Char>)>();

  int printf(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printfPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putcPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<FILE>)>>('putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _putsPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'puts');
  late final _puts =
      _putsPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int remove(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _removePtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int rename(
    ffi.Pointer<pkg_ffi.Char> __old,
    ffi.Pointer<pkg_ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('rename');
  late final _rename = _renamePtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int scanf(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanfPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int, pkg_ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  int sprintf(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int sscanf(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<pkg_ffi.Char> tmpnam(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetcPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<FILE>)>>('ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>,
              va_list)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int vprintf(
    ffi.Pointer<pkg_ffi.Char> arg0,
    va_list arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, va_list)>>('vprintf');
  late final _vprintf = _vprintfPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int vsprintf(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, va_list)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, va_list)>();

  ffi.Pointer<pkg_ffi.Char> ctermid(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<pkg_ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srgetPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__srget');
  late final ___srget =
      ___srgetPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    va_list arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>,
              va_list)>>('__svfscanf');
  late final ___svfscanf = ___svfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbufPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<FILE>)>>('__swbuf');
  late final ___swbuf =
      ___swbufPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlockedPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, ffi.Pointer<FILE>)>>('putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putwPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<FILE>)>>('putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<pkg_ffi.Char> tempnam(
    ffi.Pointer<pkg_ffi.Char> __dir,
    ffi.Pointer<pkg_ffi.Char> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<FILE>, off_t, pkg_ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<off_t Function(ffi.Pointer<FILE>)>>('ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int snprintf(
    ffi.Pointer<pkg_ffi.Char> __str,
    int __size,
    ffi.Pointer<pkg_ffi.Char> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<pkg_ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<pkg_ffi.Char> __format,
    va_list arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>,
              va_list)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int vscanf(
    ffi.Pointer<pkg_ffi.Char> __format,
    va_list arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, va_list)>>('vscanf');
  late final _vscanf =
      _vscanfPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int vsnprintf(
    ffi.Pointer<pkg_ffi.Char> __str,
    int __size,
    ffi.Pointer<pkg_ffi.Char> __format,
    va_list arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>, va_list)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<pkg_ffi.Char>,
          va_list)>();

  int vsscanf(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<pkg_ffi.Char> __format,
    va_list arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, va_list)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int dprintf(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>)>>('dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>)>();

  int vdprintf(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>, va_list)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __linep,
    ffi.Pointer<pkg_ffi.Size> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Size>,
              pkg_ffi.Int,
              ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<pkg_ffi.Size>, int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __linep,
    ffi.Pointer<pkg_ffi.Size> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<pkg_ffi.Size>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<pkg_ffi.Char> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __bufp,
    ffi.Pointer<pkg_ffi.Size> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, ffi.Pointer<pkg_ffi.Size>)>();

  late final ffi.Pointer<pkg_ffi.Int> _sys_nerr =
      _lookup<pkg_ffi.Int>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> ctermid_r(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('ctermid_r');
  late final _ctermid_r = _ctermid_rPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Size> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetlnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Size>)>>('fgetln');
  late final _fgetln = _fgetlnPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Size>)>();

  ffi.Pointer<pkg_ffi.Char> fmtcheck(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheckPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('fmtcheck');
  late final _fmtcheck = _fmtcheckPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurgePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fpurge');
  late final _fpurge = _fpurgePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    va_list arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Char>, va_list)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<pkg_ffi.Char>, va_list)>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>
        arg2,
    ffi.Pointer<
            ffi.NativeFunction<
                fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, pkg_ffi.Int)>>
        arg3,
    ffi.Pointer<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<ffi.Void>)>>
        arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      fpos_t Function(
                          ffi.Pointer<ffi.Void>, fpos_t, pkg_ffi.Int)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(
                          ffi.Pointer<ffi.Void>)>>)>>('funopen');
  late final _funopen = _funopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, pkg_ffi.Int)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(ffi.Pointer<ffi.Void>)>>)>();

  int __sprintf_chk(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int,
              pkg_ffi.Size, ffi.Pointer<pkg_ffi.Char>)>>('__sprintf_chk');
  late final ___sprintf_chk = ___sprintf_chkPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, int, int, ffi.Pointer<pkg_ffi.Char>)>();

  int __snprintf_chk(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<pkg_ffi.Char> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size,
              pkg_ffi.Int,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>)>>('__snprintf_chk');
  late final ___snprintf_chk = ___snprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, int, int,
          ffi.Pointer<pkg_ffi.Char>)>();

  int __vsprintf_chk(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
    va_list arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              va_list)>>('__vsprintf_chk');
  late final ___vsprintf_chk = ___vsprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, int,
          ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int __vsnprintf_chk(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<pkg_ffi.Char> arg4,
    va_list arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chkPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size,
              pkg_ffi.Int,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              va_list)>>('__vsnprintf_chk');
  late final ___vsnprintf_chk = ___vsnprintf_chkPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, int, int,
          ffi.Pointer<pkg_ffi.Char>, va_list)>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriorityPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, id_t)>>(
          'getpriority');
  late final _getpriority =
      _getpriorityPtr.asFunction<int Function(int, int)>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_npPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'getiopolicy_np');
  late final _getiopolicy_np =
      _getiopolicy_npPtr.asFunction<int Function(int, int)>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimitPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<rlimit>)>>('getrlimit');
  late final _getrlimit =
      _getrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusagePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<rusage>)>>('getrusage');
  late final _getrusage =
      _getrusagePtr.asFunction<int Function(int, ffi.Pointer<rusage>)>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriorityPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, id_t, pkg_ffi.Int)>>('setpriority');
  late final _setpriority =
      _setpriorityPtr.asFunction<int Function(int, int, int)>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, pkg_ffi.Int, pkg_ffi.Int)>>('setiopolicy_np');
  late final _setiopolicy_np =
      _setiopolicy_npPtr.asFunction<int Function(int, int, int)>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimitPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<rlimit>)>>('setrlimit');
  late final _setrlimit =
      _setrlimitPtr.asFunction<int Function(int, ffi.Pointer<rlimit>)>();

  int wait1(
    ffi.Pointer<pkg_ffi.Int> arg0,
  ) {
    return _wait1(
      arg0,
    );
  }

  late final _wait1Ptr =
      _lookup<ffi.NativeFunction<pid_t Function(ffi.Pointer<pkg_ffi.Int>)>>(
          'wait');
  late final _wait1 =
      _wait1Ptr.asFunction<int Function(ffi.Pointer<pkg_ffi.Int>)>();

  int waitpid(
    int arg0,
    ffi.Pointer<pkg_ffi.Int> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpidPtr = _lookup<
      ffi.NativeFunction<
          pid_t Function(
              pid_t, ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int)>>('waitpid');
  late final _waitpid = _waitpidPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Int>, int)>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitidPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Int32, id_t, ffi.Pointer<siginfo_t>, pkg_ffi.Int)>>('waitid');
  late final _waitid = _waitidPtr
      .asFunction<int Function(int, int, ffi.Pointer<siginfo_t>, int)>();

  int wait3(
    ffi.Pointer<pkg_ffi.Int> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int,
              ffi.Pointer<rusage>)>>('wait3');
  late final _wait3 = _wait3Ptr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Int>, int, ffi.Pointer<rusage>)>();

  int wait4(
    int arg0,
    ffi.Pointer<pkg_ffi.Int> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4Ptr = _lookup<
      ffi.NativeFunction<
          pid_t Function(pid_t, ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int,
              ffi.Pointer<rusage>)>>('wait4');
  late final _wait4 = _wait4Ptr.asFunction<
      int Function(int, ffi.Pointer<pkg_ffi.Int>, int, ffi.Pointer<rusage>)>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _allocaPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pkg_ffi.Size)>>(
          'alloca');
  late final _alloca =
      _allocaPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  late final ffi.Pointer<pkg_ffi.Int> ___mb_cur_max =
      _lookup<pkg_ffi.Int>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pkg_ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              pkg_ffi.Size, pkg_ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _vallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pkg_ffi.Size)>>(
          'valloc');
  late final _valloc =
      _vallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_allocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              pkg_ffi.Size, pkg_ffi.Size)>>('aligned_alloc');
  late final _aligned_alloc =
      _aligned_allocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalignPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, pkg_ffi.Size,
              pkg_ffi.Size)>>('posix_memalign');
  late final _posix_memalign = _posix_memalignPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>, int, int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  double atof(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atofPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<pkg_ffi.Char>)>();

  int atoi(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoiPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'atoi');
  late final _atoi =
      _atoiPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int atol(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atolPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Long Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'atol');
  late final _atol =
      _atolPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int atoll(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atollPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.LongLong Function(ffi.Pointer<pkg_ffi.Char>)>>('atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(pkg_ffi.Int, pkg_ffi.Int)>>(
          'div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  void exit(
    int arg0,
  ) {
    return _exit1(
      arg0,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  ffi.Pointer<pkg_ffi.Char> getenv(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function(pkg_ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(pkg_ffi.Long, pkg_ffi.Long)>>(
          'ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.LongLong Function(pkg_ffi.LongLong)>>(
          'llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldivPtr = _lookup<
      ffi.NativeFunction<
          lldiv_t Function(pkg_ffi.LongLong, pkg_ffi.LongLong)>>('lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int mblen(
    ffi.Pointer<pkg_ffi.Char> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<pkg_ffi.WChar> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Size Function(ffi.Pointer<pkg_ffi.WChar>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.WChar>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int mbtowc(
    ffi.Pointer<pkg_ffi.WChar> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.WChar>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.WChar>, ffi.Pointer<pkg_ffi.Char>, int)>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int rand() {
    return _rand();
  }

  late final _randPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.UnsignedInt)>>(
          'srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  double strtod(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  double strtof(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int strtol(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Long Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, pkg_ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  int strtoll(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.LongLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, pkg_ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  int strtoul(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, pkg_ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  int strtoull(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLongLong Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              pkg_ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  int system(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _systemPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int wcstombs(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.WChar> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Size Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.WChar>, pkg_ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.WChar>, int)>();

  int wctomb(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  int a64l(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64lPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Long Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'a64l');
  late final _a64l =
      _a64lPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  double drand48() {
    return _drand48();
  }

  late final _drand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function()>>('drand48');
  late final _drand48 = _drand48Ptr.asFunction<double Function()>();

  ffi.Pointer<pkg_ffi.Char> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Int> arg2,
    ffi.Pointer<pkg_ffi.Int> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Double, pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Int>, ffi.Pointer<pkg_ffi.Int>)>>('ecvt');
  late final _ecvt = _ecvtPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          double, int, ffi.Pointer<pkg_ffi.Int>, ffi.Pointer<pkg_ffi.Int>)>();

  double erand48(
    ffi.Pointer<pkg_ffi.UnsignedShort> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<pkg_ffi.UnsignedShort>)>>('erand48');
  late final _erand48 = _erand48Ptr
      .asFunction<double Function(ffi.Pointer<pkg_ffi.UnsignedShort>)>();

  ffi.Pointer<pkg_ffi.Char> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Int> arg2,
    ffi.Pointer<pkg_ffi.Int> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Double, pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Int>, ffi.Pointer<pkg_ffi.Int>)>>('fcvt');
  late final _fcvt = _fcvtPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          double, int, ffi.Pointer<pkg_ffi.Int>, ffi.Pointer<pkg_ffi.Int>)>();

  ffi.Pointer<pkg_ffi.Char> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Double, pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>)>>('gcvt');
  late final _gcvt = _gcvtPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          double, int, ffi.Pointer<pkg_ffi.Char>)>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsuboptPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('getsubopt');
  late final _getsubopt = _getsuboptPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantptPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('grantpt');
  late final _grantpt = _grantptPtr.asFunction<int Function(int)>();

  ffi.Pointer<pkg_ffi.Char> initstate(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(pkg_ffi.UnsignedInt,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('initstate');
  late final _initstate = _initstatePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int jrand48(
    ffi.Pointer<pkg_ffi.UnsignedShort> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Long Function(
              ffi.Pointer<pkg_ffi.UnsignedShort>)>>('jrand48');
  late final _jrand48 = _jrand48Ptr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.UnsignedShort>)>();

  ffi.Pointer<pkg_ffi.Char> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64aPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(pkg_ffi.Long)>>(
      'l64a');
  late final _l64a =
      _l64aPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(int)>();

  void lcong48(
    ffi.Pointer<pkg_ffi.UnsignedShort> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pkg_ffi.UnsignedShort>)>>('lcong48');
  late final _lcong48 = _lcong48Ptr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.UnsignedShort>)>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48Ptr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function()>>('lrand48');
  late final _lrand48 = _lrand48Ptr.asFunction<int Function()>();

  ffi.Pointer<pkg_ffi.Char> mktemp(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('mktemp');
  late final _mktemp = _mktempPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  int mkstemp(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstempPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'mkstemp');
  late final _mkstemp =
      _mkstempPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48Ptr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function()>>('mrand48');
  late final _mrand48 = _mrand48Ptr.asFunction<int Function()>();

  int nrand48(
    ffi.Pointer<pkg_ffi.UnsignedShort> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Long Function(
              ffi.Pointer<pkg_ffi.UnsignedShort>)>>('nrand48');
  late final _nrand48 = _nrand48Ptr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.UnsignedShort>)>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openptPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'posix_openpt');
  late final _posix_openpt = _posix_openptPtr.asFunction<int Function(int)>();

  ffi.Pointer<pkg_ffi.Char> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsnamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(pkg_ffi.Int)>>(
      'ptsname');
  late final _ptsname =
      _ptsnamePtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(int)>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_rPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('ptsname_r');
  late final _ptsname_r = _ptsname_rPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenvPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'putenv');
  late final _putenv =
      _putenvPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int random() {
    return _random();
  }

  late final _randomPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function()>>('random');
  late final _random = _randomPtr.asFunction<int Function()>();

  int rand_r(
    ffi.Pointer<pkg_ffi.UnsignedInt> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_rPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.UnsignedInt>)>>('rand_r');
  late final _rand_r =
      _rand_rPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.UnsignedInt>)>();

  ffi.Pointer<pkg_ffi.Char> realpath(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('realpath');
  late final _realpath = _realpathPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.UnsignedShort> seed48(
    ffi.Pointer<pkg_ffi.UnsignedShort> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.UnsignedShort> Function(
              ffi.Pointer<pkg_ffi.UnsignedShort>)>>('seed48');
  late final _seed48 = _seed48Ptr.asFunction<
      ffi.Pointer<pkg_ffi.UnsignedShort> Function(
          ffi.Pointer<pkg_ffi.UnsignedShort>)>();

  int setenv(
    ffi.Pointer<pkg_ffi.Char> __name,
    ffi.Pointer<pkg_ffi.Char> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenvPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('setenv');
  late final _setenv = _setenvPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  void setkey(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pkg_ffi.Char>)>>(
          'setkey');
  late final _setkey =
      _setkeyPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> setstate(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('setstate');
  late final _setstate = _setstatePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Long)>>('srand48');
  late final _srand48 = _srand48Ptr.asFunction<void Function(int)>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.UnsignedInt)>>(
          'srandom');
  late final _srandom = _srandomPtr.asFunction<void Function(int)>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockptPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>(
          'unlockpt');
  late final _unlockpt = _unlockptPtr.asFunction<int Function(int)>();

  int unsetenv(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenvPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'unsetenv');
  late final _unsetenv =
      _unsetenvPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4randomPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function()>>('arc4random');
  late final _arc4random = _arc4randomPtr.asFunction<int Function()>();

  void arc4random_addrandom(
    ffi.Pointer<pkg_ffi.UnsignedChar> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandomPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<pkg_ffi.UnsignedChar>,
              pkg_ffi.Int)>>('arc4random_addrandom');
  late final _arc4random_addrandom = _arc4random_addrandomPtr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.UnsignedChar>, int)>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_bufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('arc4random_buf');
  late final _arc4random_buf = _arc4random_bufPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stirPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('arc4random_stir');
  late final _arc4random_stir =
      _arc4random_stirPtr.asFunction<void Function()>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniformPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Uint32)>>(
          'arc4random_uniform');
  late final _arc4random_uniform =
      _arc4random_uniformPtr.asFunction<int Function(int)>();

  ffi.Pointer<pkg_ffi.Char> cgetcap(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('cgetcap');
  late final _cgetcap = _cgetcapPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclosePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('cgetclose');
  late final _cgetclose = _cgetclosePtr.asFunction<int Function()>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetentPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Char>)>>('cgetent');
  late final _cgetent = _cgetentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, ffi.Pointer<pkg_ffi.Char>)>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirstPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('cgetfirst');
  late final _cgetfirst = _cgetfirstPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int cgetmatch(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatchPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('cgetmatch');
  late final _cgetmatch = _cgetmatchPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnextPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('cgetnext');
  late final _cgetnext = _cgetnextPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int cgetnum(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<pkg_ffi.Long> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnumPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Long>)>>('cgetnum');
  late final _cgetnum = _cgetnumPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Long>)>();

  int cgetset(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetsetPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'cgetset');
  late final _cgetset =
      _cgetsetPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int cgetstr(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstrPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('cgetstr');
  late final _cgetstr = _cgetstrPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int cgetustr(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustrPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('cgetustr');
  late final _cgetustr = _cgetustrPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemonPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'daemon');
  late final _daemon = _daemonPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<pkg_ffi.Char> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devnamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(dev_t, mode_t)>>('devname');
  late final _devname =
      _devnamePtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(int, int)>();

  ffi.Pointer<pkg_ffi.Char> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(dev_t, mode_t,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('devname_r');
  late final _devname_r = _devname_rPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          int, int, ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> getbsize(
    ffi.Pointer<pkg_ffi.Int> arg0,
    ffi.Pointer<pkg_ffi.Long> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Int>,
              ffi.Pointer<pkg_ffi.Long>)>>('getbsize');
  late final _getbsize = _getbsizePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Int>, ffi.Pointer<pkg_ffi.Long>)>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavgPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Double>, pkg_ffi.Int)>>('getloadavg');
  late final _getloadavg =
      _getloadavgPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  ffi.Pointer<pkg_ffi.Char> getprogname() {
    return _getprogname();
  }

  late final _getprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function()>>(
          'getprogname');
  late final _getprogname =
      _getprognamePtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function()>();

  void setprogname(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprognamePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pkg_ffi.Char>)>>(
          'setprogname');
  late final _setprogname =
      _setprognamePtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Char>)>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsortPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('heapsort');
  late final _heapsort = _heapsortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesortPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('mergesort');
  late final _mergesort = _mergesortPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.Size,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort');
  late final _psort = _psortPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('psort_r');
  late final _psort_r = _psort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<
            ffi.NativeFunction<
                pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                    ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.Size,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      pkg_ffi.Int Function(
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>,
                          ffi.Pointer<ffi.Void>)>>)>>('qsort_r');
  late final _qsort_r = _qsort_rPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Void>,
          int,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>)>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<pkg_ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<pkg_ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsortPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.UnsignedChar>>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.UnsignedChar>,
              pkg_ffi.UnsignedInt)>>('radixsort');
  late final _radixsort = _radixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.UnsignedChar>>, int,
          ffi.Pointer<pkg_ffi.UnsignedChar>, int)>();

  int rpmatch(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatchPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'rpmatch');
  late final _rpmatch =
      _rpmatchPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<pkg_ffi.UnsignedChar>> __base,
    int __nel,
    ffi.Pointer<pkg_ffi.UnsignedChar> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsortPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.UnsignedChar>>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.UnsignedChar>,
              pkg_ffi.UnsignedInt)>>('sradixsort');
  late final _sradixsort = _sradixsortPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<pkg_ffi.UnsignedChar>>, int,
          ffi.Pointer<pkg_ffi.UnsignedChar>, int)>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sranddev');
  late final _sranddev = _sranddevPtr.asFunction<void Function()>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdevPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('srandomdev');
  late final _srandomdev = _srandomdevPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('reallocf');
  late final _reallocf = _reallocfPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  int strtonum(
    ffi.Pointer<pkg_ffi.Char> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonumPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.LongLong Function(
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.LongLong,
              pkg_ffi.LongLong,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('strtonum');
  late final _strtonum = _strtonumPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, int,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int strtoq(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoqPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.LongLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, pkg_ffi.Int)>>('strtoq');
  late final _strtoq = _strtoqPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  int strtouq(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouqPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLongLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, pkg_ffi.Int)>>('strtouq');
  late final _strtouq = _strtouqPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  late final ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> _suboptarg =
      _lookup<ffi.Pointer<pkg_ffi.Char>>('suboptarg');

  ffi.Pointer<pkg_ffi.Char> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<pkg_ffi.Char> value) => _suboptarg.value = value;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, pkg_ffi.Int, pkg_ffi.Size)>>('memchr');
  late final _memchr = _memchrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('memcmp');
  late final _memcmp = _memcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('memcpy');
  late final _memcpy = _memcpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmovePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('memmove');
  late final _memmove = _memmovePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, pkg_ffi.Int, pkg_ffi.Size)>>('memset');
  late final _memset = _memsetPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<pkg_ffi.Char> strcat(
    ffi.Pointer<pkg_ffi.Char> __s1,
    ffi.Pointer<pkg_ffi.Char> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('strcat');
  late final _strcat = _strcatPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strchr(
    ffi.Pointer<pkg_ffi.Char> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('strchr');
  late final _strchr = _strchrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int strcmp(
    ffi.Pointer<pkg_ffi.Char> __s1,
    ffi.Pointer<pkg_ffi.Char> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('strcmp');
  late final _strcmp = _strcmpPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int strcoll(
    ffi.Pointer<pkg_ffi.Char> __s1,
    ffi.Pointer<pkg_ffi.Char> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcollPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('strcoll');
  late final _strcoll = _strcollPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strcpy(
    ffi.Pointer<pkg_ffi.Char> __dst,
    ffi.Pointer<pkg_ffi.Char> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('strcpy');
  late final _strcpy = _strcpyPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int strcspn(
    ffi.Pointer<pkg_ffi.Char> __s,
    ffi.Pointer<pkg_ffi.Char> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspnPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('strcspn');
  late final _strcspn = _strcspnPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerrorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(pkg_ffi.Int)>>(
      'strerror');
  late final _strerror =
      _strerrorPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(int)>();

  int strlen(
    ffi.Pointer<pkg_ffi.Char> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlenPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<pkg_ffi.Char>)>>('strlen');
  late final _strlen =
      _strlenPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strncat(
    ffi.Pointer<pkg_ffi.Char> __s1,
    ffi.Pointer<pkg_ffi.Char> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strncat');
  late final _strncat = _strncatPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int strncmp(
    ffi.Pointer<pkg_ffi.Char> __s1,
    ffi.Pointer<pkg_ffi.Char> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strncmp');
  late final _strncmp = _strncmpPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> strncpy(
    ffi.Pointer<pkg_ffi.Char> __dst,
    ffi.Pointer<pkg_ffi.Char> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strncpy');
  late final _strncpy = _strncpyPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> strpbrk(
    ffi.Pointer<pkg_ffi.Char> __s,
    ffi.Pointer<pkg_ffi.Char> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('strpbrk');
  late final _strpbrk = _strpbrkPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strrchr(
    ffi.Pointer<pkg_ffi.Char> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('strrchr');
  late final _strrchr = _strrchrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int strspn(
    ffi.Pointer<pkg_ffi.Char> __s,
    ffi.Pointer<pkg_ffi.Char> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspnPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('strspn');
  late final _strspn = _strspnPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strstr(
    ffi.Pointer<pkg_ffi.Char> __big,
    ffi.Pointer<pkg_ffi.Char> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('strstr');
  late final _strstr = _strstrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strtok(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<pkg_ffi.Char> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtokPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('strtok');
  late final _strtok = _strtokPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int strxfrm(
    ffi.Pointer<pkg_ffi.Char> __s1,
    ffi.Pointer<pkg_ffi.Char> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrmPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strxfrm');
  late final _strxfrm = _strxfrmPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> strtok_r(
    ffi.Pointer<pkg_ffi.Char> __str,
    ffi.Pointer<pkg_ffi.Char> __sep,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('strtok_r');
  late final _strtok_r = _strtok_rPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<pkg_ffi.Char> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_rPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('strerror_r');
  late final _strerror_r = _strerror_rPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> strdup(
    ffi.Pointer<pkg_ffi.Char> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('strdup');
  late final _strdup = _strdupPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, pkg_ffi.Int, pkg_ffi.Size)>>('memccpy');
  late final _memccpy = _memccpyPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<pkg_ffi.Char> stpcpy(
    ffi.Pointer<pkg_ffi.Char> __dst,
    ffi.Pointer<pkg_ffi.Char> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('stpcpy');
  late final _stpcpy = _stpcpyPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> stpncpy(
    ffi.Pointer<pkg_ffi.Char> __dst,
    ffi.Pointer<pkg_ffi.Char> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('stpncpy');
  late final _stpncpy = _stpncpyPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> strndup(
    ffi.Pointer<pkg_ffi.Char> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strndup');
  late final _strndup = _strndupPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int strnlen(
    ffi.Pointer<pkg_ffi.Char> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlenPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Size Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strnlen');
  late final _strnlen =
      _strnlenPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignalPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(pkg_ffi.Int)>>(
      'strsignal');
  late final _strsignal =
      _strsignalPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(int)>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Void>, rsize_t, pkg_ffi.Int,
              rsize_t)>>('memset_s');
  late final _memset_s = _memset_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('memmem');
  late final _memmem = _memmemPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('memset_pattern4');
  late final _memset_pattern4 = _memset_pattern4Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('memset_pattern8');
  late final _memset_pattern8 = _memset_pattern8Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('memset_pattern16');
  late final _memset_pattern16 = _memset_pattern16Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<pkg_ffi.Char> strcasestr(
    ffi.Pointer<pkg_ffi.Char> __big,
    ffi.Pointer<pkg_ffi.Char> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('strcasestr');
  late final _strcasestr = _strcasestrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strnstr(
    ffi.Pointer<pkg_ffi.Char> __big,
    ffi.Pointer<pkg_ffi.Char> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strnstr');
  late final _strnstr = _strnstrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int strlcat(
    ffi.Pointer<pkg_ffi.Char> __dst,
    ffi.Pointer<pkg_ffi.Char> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strlcat');
  late final _strlcat = _strlcatPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int strlcpy(
    ffi.Pointer<pkg_ffi.Char> __dst,
    ffi.Pointer<pkg_ffi.Char> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpyPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedLong Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strlcpy');
  late final _strlcpy = _strlcpyPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  void strmode(
    int __mode,
    ffi.Pointer<pkg_ffi.Char> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>)>>('strmode');
  late final _strmode =
      _strmodePtr.asFunction<void Function(int, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> strsep(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __stringp,
    ffi.Pointer<pkg_ffi.Char> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Char>)>>('strsep');
  late final _strsep = _strsepPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, ffi.Pointer<pkg_ffi.Char>)>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('timingsafe_bcmp');
  late final _timingsafe_bcmp = _timingsafe_bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<pkg_ffi.Char> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_rPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('strsignal_r');
  late final _strsignal_r = _strsignal_rPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('bcmp');
  late final _bcmp = _bcmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('bcopy');
  late final _bcopy = _bcopyPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzeroPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('bzero');
  late final _bzero =
      _bzeroPtr.asFunction<void Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<pkg_ffi.Char> index(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('index');
  late final _index = _indexPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> rindex(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('rindex');
  late final _rindex = _rindexPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffsPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('ffs');
  late final _ffs = _ffsPtr.asFunction<int Function(int)>();

  int strcasecmp(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('strcasecmp');
  late final _strcasecmp = _strcasecmpPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int strncasecmp(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('strncasecmp');
  late final _strncasecmp = _strncasecmpPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffslPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Long)>>('ffsl');
  late final _ffsl = _ffslPtr.asFunction<int Function(int)>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsllPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.LongLong)>>(
          'ffsll');
  late final _ffsll = _ffsllPtr.asFunction<int Function(int)>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _flsPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('fls');
  late final _fls = _flsPtr.asFunction<int Function(int)>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flslPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Long)>>('flsl');
  late final _flsl = _flslPtr.asFunction<int Function(int)>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsllPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.LongLong)>>(
          'flsll');
  late final _flsll = _flsllPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> value) =>
      _tzname.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _getdate_err =
      _lookup<pkg_ffi.Int>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<pkg_ffi.Long> _timezone =
      _lookup<pkg_ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _daylight =
      _lookup<pkg_ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  ffi.Pointer<pkg_ffi.Char> asctime(
    ffi.Pointer<tm> arg0,
  ) {
    return _asctime(
      arg0,
    );
  }

  late final _asctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<tm>)>>('asctime');
  late final _asctime = _asctimePtr
      .asFunction<ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<pkg_ffi.Char> ctime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _ctime(
      arg0,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<time_t>)>();

  double difftime(
    int arg0,
    int arg1,
  ) {
    return _difftime(
      arg0,
      arg1,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> getdate(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _getdate(
      arg0,
    );
  }

  late final _getdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<pkg_ffi.Char>)>>('getdate');
  late final _getdate = _getdatePtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _gmtime(
      arg0,
    );
  }

  late final _gmtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> arg0,
  ) {
    return _localtime(
      arg0,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  int mktime(
    ffi.Pointer<tm> arg0,
  ) {
    return _mktime(
      arg0,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
    ffi.Pointer<tm> arg3,
  ) {
    return _strftime(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Size Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<tm>)>();

  ffi.Pointer<pkg_ffi.Char> strptime(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<tm> arg2,
  ) {
    return _strptime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strptimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<tm>)>>('strptime');
  late final _strptime = _strptimePtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<tm>)>();

  int time(
    ffi.Pointer<time_t> arg0,
  ) {
    return _time(
      arg0,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  ffi.Pointer<pkg_ffi.Char> asctime_r(
    ffi.Pointer<tm> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _asctime_r(
      arg0,
      arg1,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<pkg_ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<tm>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> ctime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _ctime_r(
      arg0,
      arg1,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<pkg_ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _gmtime_r(
      arg0,
      arg1,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> arg0,
    ffi.Pointer<tm> arg1,
  ) {
    return _localtime_r(
      arg0,
      arg1,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  int posix2time(
    int arg0,
  ) {
    return _posix2time(
      arg0,
    );
  }

  late final _posix2timePtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('posix2time');
  late final _posix2time = _posix2timePtr.asFunction<int Function(int)>();

  void tzsetwall() {
    return _tzsetwall();
  }

  late final _tzsetwallPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzsetwall');
  late final _tzsetwall = _tzsetwallPtr.asFunction<void Function()>();

  int time2posix(
    int arg0,
  ) {
    return _time2posix(
      arg0,
    );
  }

  late final _time2posixPtr =
      _lookup<ffi.NativeFunction<time_t Function(time_t)>>('time2posix');
  late final _time2posix = _time2posixPtr.asFunction<int Function(int)>();

  int timelocal(
    ffi.Pointer<tm> arg0,
  ) {
    return _timelocal(
      arg0,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timegm(
    ffi.Pointer<tm> arg0,
  ) {
    return _timegm(
      arg0,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int nanosleep(
    ffi.Pointer<timespec> __rqtp,
    ffi.Pointer<timespec> __rmtp,
  ) {
    return _nanosleep(
      __rqtp,
      __rmtp,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Int32, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Int32, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime_nsec_np(
    int __clock_id,
  ) {
    return _clock_gettime_nsec_np(
      __clock_id,
    );
  }

  late final _clock_gettime_nsec_npPtr =
      _lookup<ffi.NativeFunction<__uint64_t Function(ffi.Int32)>>(
          'clock_gettime_nsec_np');
  late final _clock_gettime_nsec_np =
      _clock_gettime_nsec_npPtr.asFunction<int Function(int)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Int32, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int timespec_get(
    ffi.Pointer<timespec> ts,
    int base,
  ) {
    return _timespec_get(
      ts,
      base,
    );
  }

  late final _timespec_getPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<timespec>, pkg_ffi.Int)>>('timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int imaxabs(
    int j,
  ) {
    return _imaxabs(
      j,
    );
  }

  late final _imaxabsPtr =
      _lookup<ffi.NativeFunction<intmax_t Function(intmax_t)>>('imaxabs');
  late final _imaxabs = _imaxabsPtr.asFunction<int Function(int)>();

  imaxdiv_t imaxdiv(
    int __numer,
    int __denom,
  ) {
    return _imaxdiv(
      __numer,
      __denom,
    );
  }

  late final _imaxdivPtr =
      _lookup<ffi.NativeFunction<imaxdiv_t Function(intmax_t, intmax_t)>>(
          'imaxdiv');
  late final _imaxdiv = _imaxdivPtr.asFunction<imaxdiv_t Function(int, int)>();

  int strtoimax(
    ffi.Pointer<pkg_ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              pkg_ffi.Int)>>('strtoimax');
  late final _strtoimax = _strtoimaxPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  int strtoumax(
    ffi.Pointer<pkg_ffi.Char> __nptr,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __endptr,
    int __base,
  ) {
    return _strtoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _strtoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              pkg_ffi.Int)>>('strtoumax');
  late final _strtoumax = _strtoumaxPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>, int)>();

  int wcstoimax(
    ffi.Pointer<pkg_ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<pkg_ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoimax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoimaxPtr = _lookup<
      ffi.NativeFunction<
          intmax_t Function(
              ffi.Pointer<pkg_ffi.WChar>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.WChar>>,
              pkg_ffi.Int)>>('wcstoimax');
  late final _wcstoimax = _wcstoimaxPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.WChar>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.WChar>>, int)>();

  int wcstoumax(
    ffi.Pointer<pkg_ffi.WChar> __nptr,
    ffi.Pointer<ffi.Pointer<pkg_ffi.WChar>> __endptr,
    int __base,
  ) {
    return _wcstoumax(
      __nptr,
      __endptr,
      __base,
    );
  }

  late final _wcstoumaxPtr = _lookup<
      ffi.NativeFunction<
          uintmax_t Function(
              ffi.Pointer<pkg_ffi.WChar>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.WChar>>,
              pkg_ffi.Int)>>('wcstoumax');
  late final _wcstoumax = _wcstoumaxPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.WChar>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.WChar>>, int)>();

  late final ffi.Pointer<CFBagCallBacks> _kCFTypeBagCallBacks =
      _lookup<CFBagCallBacks>('kCFTypeBagCallBacks');

  CFBagCallBacks get kCFTypeBagCallBacks => _kCFTypeBagCallBacks.ref;

  late final ffi.Pointer<CFBagCallBacks> _kCFCopyStringBagCallBacks =
      _lookup<CFBagCallBacks>('kCFCopyStringBagCallBacks');

  CFBagCallBacks get kCFCopyStringBagCallBacks =>
      _kCFCopyStringBagCallBacks.ref;

  int CFBagGetTypeID() {
    return _CFBagGetTypeID();
  }

  late final _CFBagGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBagGetTypeID');
  late final _CFBagGetTypeID = _CFBagGetTypeIDPtr.asFunction<int Function()>();

  CFBagRef CFBagCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFBagCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFBagCallBacks>)>>('CFBagCreate');
  late final _CFBagCreate = _CFBagCreatePtr.asFunction<
      CFBagRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFBagCallBacks>)>();

  CFBagRef CFBagCreateCopy(
    CFAllocatorRef allocator,
    CFBagRef theBag,
  ) {
    return _CFBagCreateCopy(
      allocator,
      theBag,
    );
  }

  late final _CFBagCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFBagRef Function(CFAllocatorRef, CFBagRef)>>(
          'CFBagCreateCopy');
  late final _CFBagCreateCopy = _CFBagCreateCopyPtr.asFunction<
      CFBagRef Function(CFAllocatorRef, CFBagRef)>();

  CFMutableBagRef CFBagCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBagCallBacks> callBacks,
  ) {
    return _CFBagCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFBagCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFBagCallBacks>)>>('CFBagCreateMutable');
  late final _CFBagCreateMutable = _CFBagCreateMutablePtr.asFunction<
      CFMutableBagRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFBagCallBacks>)>();

  CFMutableBagRef CFBagCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBagRef theBag,
  ) {
    return _CFBagCreateMutableCopy(
      allocator,
      capacity,
      theBag,
    );
  }

  late final _CFBagCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBagRef Function(
              CFAllocatorRef, CFIndex, CFBagRef)>>('CFBagCreateMutableCopy');
  late final _CFBagCreateMutableCopy = _CFBagCreateMutableCopyPtr.asFunction<
      CFMutableBagRef Function(CFAllocatorRef, int, CFBagRef)>();

  int CFBagGetCount(
    CFBagRef theBag,
  ) {
    return _CFBagGetCount(
      theBag,
    );
  }

  late final _CFBagGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBagRef)>>('CFBagGetCount');
  late final _CFBagGetCount =
      _CFBagGetCountPtr.asFunction<int Function(CFBagRef)>();

  int CFBagGetCountOfValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetCountOfValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetCountOfValue');
  late final _CFBagGetCountOfValue = _CFBagGetCountOfValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagContainsValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagContainsValue(
      theBag,
      value,
    );
  }

  late final _CFBagContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagContainsValue');
  late final _CFBagContainsValue = _CFBagContainsValuePtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBagGetValue(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagGetValue(
      theBag,
      value,
    );
  }

  late final _CFBagGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBagRef, ffi.Pointer<ffi.Void>)>>('CFBagGetValue');
  late final _CFBagGetValue = _CFBagGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBagRef, ffi.Pointer<ffi.Void>)>();

  int CFBagGetValueIfPresent(
    CFBagRef theBag,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBagGetValueIfPresent(
      theBag,
      candidate,
      value,
    );
  }

  late final _CFBagGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBagRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValueIfPresent');
  late final _CFBagGetValueIfPresent = _CFBagGetValueIfPresentPtr.asFunction<
      int Function(CFBagRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagGetValues(
    CFBagRef theBag,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBagGetValues(
      theBag,
      values,
    );
  }

  late final _CFBagGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBagGetValues');
  late final _CFBagGetValues = _CFBagGetValuesPtr.asFunction<
      void Function(CFBagRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBagApplyFunction(
    CFBagRef theBag,
    CFBagApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBagApplyFunction(
      theBag,
      applier,
      context,
    );
  }

  late final _CFBagApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBagRef, CFBagApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBagApplyFunction');
  late final _CFBagApplyFunction = _CFBagApplyFunctionPtr.asFunction<
      void Function(CFBagRef, CFBagApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFBagAddValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagAddValue(
      theBag,
      value,
    );
  }

  late final _CFBagAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagAddValue');
  late final _CFBagAddValue = _CFBagAddValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagReplaceValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagReplaceValue(
      theBag,
      value,
    );
  }

  late final _CFBagReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagReplaceValue');
  late final _CFBagReplaceValue = _CFBagReplaceValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagSetValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagSetValue(
      theBag,
      value,
    );
  }

  late final _CFBagSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagSetValue');
  late final _CFBagSetValue = _CFBagSetValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveValue(
    CFMutableBagRef theBag,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBagRemoveValue(
      theBag,
      value,
    );
  }

  late final _CFBagRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBagRef, ffi.Pointer<ffi.Void>)>>('CFBagRemoveValue');
  late final _CFBagRemoveValue = _CFBagRemoveValuePtr.asFunction<
      void Function(CFMutableBagRef, ffi.Pointer<ffi.Void>)>();

  void CFBagRemoveAllValues(
    CFMutableBagRef theBag,
  ) {
    return _CFBagRemoveAllValues(
      theBag,
    );
  }

  late final _CFBagRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableBagRef)>>(
          'CFBagRemoveAllValues');
  late final _CFBagRemoveAllValues =
      _CFBagRemoveAllValuesPtr.asFunction<void Function(CFMutableBagRef)>();

  late final ffi.Pointer<CFBinaryHeapCallBacks> _kCFStringBinaryHeapCallBacks =
      _lookup<CFBinaryHeapCallBacks>('kCFStringBinaryHeapCallBacks');

  CFBinaryHeapCallBacks get kCFStringBinaryHeapCallBacks =>
      _kCFStringBinaryHeapCallBacks.ref;

  int CFBinaryHeapGetTypeID() {
    return _CFBinaryHeapGetTypeID();
  }

  late final _CFBinaryHeapGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBinaryHeapGetTypeID');
  late final _CFBinaryHeapGetTypeID =
      _CFBinaryHeapGetTypeIDPtr.asFunction<int Function()>();

  CFBinaryHeapRef CFBinaryHeapCreate(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFBinaryHeapCallBacks> callBacks,
    ffi.Pointer<CFBinaryHeapCompareContext> compareContext,
  ) {
    return _CFBinaryHeapCreate(
      allocator,
      capacity,
      callBacks,
      compareContext,
    );
  }

  late final _CFBinaryHeapCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(
              CFAllocatorRef,
              CFIndex,
              ffi.Pointer<CFBinaryHeapCallBacks>,
              ffi.Pointer<CFBinaryHeapCompareContext>)>>('CFBinaryHeapCreate');
  late final _CFBinaryHeapCreate = _CFBinaryHeapCreatePtr.asFunction<
      CFBinaryHeapRef Function(
          CFAllocatorRef,
          int,
          ffi.Pointer<CFBinaryHeapCallBacks>,
          ffi.Pointer<CFBinaryHeapCompareContext>)>();

  CFBinaryHeapRef CFBinaryHeapCreateCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapCreateCopy(
      allocator,
      capacity,
      heap,
    );
  }

  late final _CFBinaryHeapCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBinaryHeapRef Function(CFAllocatorRef, CFIndex,
              CFBinaryHeapRef)>>('CFBinaryHeapCreateCopy');
  late final _CFBinaryHeapCreateCopy = _CFBinaryHeapCreateCopyPtr.asFunction<
      CFBinaryHeapRef Function(CFAllocatorRef, int, CFBinaryHeapRef)>();

  int CFBinaryHeapGetCount(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetCount(
      heap,
    );
  }

  late final _CFBinaryHeapGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapGetCount');
  late final _CFBinaryHeapGetCount =
      _CFBinaryHeapGetCountPtr.asFunction<int Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetCountOfValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapGetCountOfValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapGetCountOfValue');
  late final _CFBinaryHeapGetCountOfValue = _CFBinaryHeapGetCountOfValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  int CFBinaryHeapContainsValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapContainsValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapContainsValue');
  late final _CFBinaryHeapContainsValue = _CFBinaryHeapContainsValuePtr
      .asFunction<int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFBinaryHeapGetMinimum(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapGetMinimum(
      heap,
    );
  }

  late final _CFBinaryHeapGetMinimumPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>>(
      'CFBinaryHeapGetMinimum');
  late final _CFBinaryHeapGetMinimum = _CFBinaryHeapGetMinimumPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFBinaryHeapRef)>();

  int CFBinaryHeapGetMinimumIfPresent(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFBinaryHeapGetMinimumIfPresent(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapGetMinimumIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBinaryHeapGetMinimumIfPresent');
  late final _CFBinaryHeapGetMinimumIfPresent =
      _CFBinaryHeapGetMinimumIfPresentPtr.asFunction<
          int Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapGetValues(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFBinaryHeapGetValues(
      heap,
      values,
    );
  }

  late final _CFBinaryHeapGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFBinaryHeapGetValues');
  late final _CFBinaryHeapGetValues = _CFBinaryHeapGetValuesPtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFBinaryHeapApplyFunction(
    CFBinaryHeapRef heap,
    CFBinaryHeapApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFBinaryHeapApplyFunction(
      heap,
      applier,
      context,
    );
  }

  late final _CFBinaryHeapApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFBinaryHeapApplyFunction');
  late final _CFBinaryHeapApplyFunction =
      _CFBinaryHeapApplyFunctionPtr.asFunction<
          void Function(CFBinaryHeapRef, CFBinaryHeapApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapAddValue(
    CFBinaryHeapRef heap,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFBinaryHeapAddValue(
      heap,
      value,
    );
  }

  late final _CFBinaryHeapAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>>('CFBinaryHeapAddValue');
  late final _CFBinaryHeapAddValue = _CFBinaryHeapAddValuePtr.asFunction<
      void Function(CFBinaryHeapRef, ffi.Pointer<ffi.Void>)>();

  void CFBinaryHeapRemoveMinimumValue(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveMinimumValue(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveMinimumValuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveMinimumValue');
  late final _CFBinaryHeapRemoveMinimumValue =
      _CFBinaryHeapRemoveMinimumValuePtr.asFunction<
          void Function(CFBinaryHeapRef)>();

  void CFBinaryHeapRemoveAllValues(
    CFBinaryHeapRef heap,
  ) {
    return _CFBinaryHeapRemoveAllValues(
      heap,
    );
  }

  late final _CFBinaryHeapRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBinaryHeapRef)>>(
          'CFBinaryHeapRemoveAllValues');
  late final _CFBinaryHeapRemoveAllValues = _CFBinaryHeapRemoveAllValuesPtr
      .asFunction<void Function(CFBinaryHeapRef)>();

  int CFBitVectorGetTypeID() {
    return _CFBitVectorGetTypeID();
  }

  late final _CFBitVectorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBitVectorGetTypeID');
  late final _CFBitVectorGetTypeID =
      _CFBitVectorGetTypeIDPtr.asFunction<int Function()>();

  CFBitVectorRef CFBitVectorCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int numBits,
  ) {
    return _CFBitVectorCreate(
      allocator,
      bytes,
      numBits,
    );
  }

  late final _CFBitVectorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFBitVectorCreate');
  late final _CFBitVectorCreate = _CFBitVectorCreatePtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFBitVectorRef CFBitVectorCreateCopy(
    CFAllocatorRef allocator,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateCopy(
      allocator,
      bv,
    );
  }

  late final _CFBitVectorCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFBitVectorRef Function(
              CFAllocatorRef, CFBitVectorRef)>>('CFBitVectorCreateCopy');
  late final _CFBitVectorCreateCopy = _CFBitVectorCreateCopyPtr.asFunction<
      CFBitVectorRef Function(CFAllocatorRef, CFBitVectorRef)>();

  CFMutableBitVectorRef CFBitVectorCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFBitVectorCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFBitVectorCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, CFIndex)>>('CFBitVectorCreateMutable');
  late final _CFBitVectorCreateMutable = _CFBitVectorCreateMutablePtr
      .asFunction<CFMutableBitVectorRef Function(CFAllocatorRef, int)>();

  CFMutableBitVectorRef CFBitVectorCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorCreateMutableCopy(
      allocator,
      capacity,
      bv,
    );
  }

  late final _CFBitVectorCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableBitVectorRef Function(CFAllocatorRef, CFIndex,
              CFBitVectorRef)>>('CFBitVectorCreateMutableCopy');
  late final _CFBitVectorCreateMutableCopy =
      _CFBitVectorCreateMutableCopyPtr.asFunction<
          CFMutableBitVectorRef Function(
              CFAllocatorRef, int, CFBitVectorRef)>();

  int CFBitVectorGetCount(
    CFBitVectorRef bv,
  ) {
    return _CFBitVectorGetCount(
      bv,
    );
  }

  late final _CFBitVectorGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFBitVectorRef)>>(
          'CFBitVectorGetCount');
  late final _CFBitVectorGetCount =
      _CFBitVectorGetCountPtr.asFunction<int Function(CFBitVectorRef)>();

  int CFBitVectorGetCountOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetCountOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetCountOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetCountOfBit');
  late final _CFBitVectorGetCountOfBit = _CFBitVectorGetCountOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorContainsBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorContainsBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorContainsBitPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorContainsBit');
  late final _CFBitVectorContainsBit = _CFBitVectorContainsBitPtr.asFunction<
      int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetBitAtIndex(
    CFBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorGetBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorGetBitAtIndexPtr =
      _lookup<ffi.NativeFunction<CFBit Function(CFBitVectorRef, CFIndex)>>(
          'CFBitVectorGetBitAtIndex');
  late final _CFBitVectorGetBitAtIndex = _CFBitVectorGetBitAtIndexPtr
      .asFunction<int Function(CFBitVectorRef, int)>();

  void CFBitVectorGetBits(
    CFBitVectorRef bv,
    CFRange range,
    ffi.Pointer<UInt8> bytes,
  ) {
    return _CFBitVectorGetBits(
      bv,
      range,
      bytes,
    );
  }

  late final _CFBitVectorGetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBitVectorRef, CFRange,
              ffi.Pointer<UInt8>)>>('CFBitVectorGetBits');
  late final _CFBitVectorGetBits = _CFBitVectorGetBitsPtr.asFunction<
      void Function(CFBitVectorRef, CFRange, ffi.Pointer<UInt8>)>();

  int CFBitVectorGetFirstIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetFirstIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetFirstIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetFirstIndexOfBit');
  late final _CFBitVectorGetFirstIndexOfBit = _CFBitVectorGetFirstIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  int CFBitVectorGetLastIndexOfBit(
    CFBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorGetLastIndexOfBit(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorGetLastIndexOfBitPtr = _lookup<
          ffi.NativeFunction<CFIndex Function(CFBitVectorRef, CFRange, CFBit)>>(
      'CFBitVectorGetLastIndexOfBit');
  late final _CFBitVectorGetLastIndexOfBit = _CFBitVectorGetLastIndexOfBitPtr
      .asFunction<int Function(CFBitVectorRef, CFRange, int)>();

  void CFBitVectorSetCount(
    CFMutableBitVectorRef bv,
    int count,
  ) {
    return _CFBitVectorSetCount(
      bv,
      count,
    );
  }

  late final _CFBitVectorSetCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorSetCount');
  late final _CFBitVectorSetCount = _CFBitVectorSetCountPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
  ) {
    return _CFBitVectorFlipBitAtIndex(
      bv,
      idx,
    );
  }

  late final _CFBitVectorFlipBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFIndex)>>('CFBitVectorFlipBitAtIndex');
  late final _CFBitVectorFlipBitAtIndex = _CFBitVectorFlipBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int)>();

  void CFBitVectorFlipBits(
    CFMutableBitVectorRef bv,
    CFRange range,
  ) {
    return _CFBitVectorFlipBits(
      bv,
      range,
    );
  }

  late final _CFBitVectorFlipBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange)>>('CFBitVectorFlipBits');
  late final _CFBitVectorFlipBits = _CFBitVectorFlipBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange)>();

  void CFBitVectorSetBitAtIndex(
    CFMutableBitVectorRef bv,
    int idx,
    int value,
  ) {
    return _CFBitVectorSetBitAtIndex(
      bv,
      idx,
      value,
    );
  }

  late final _CFBitVectorSetBitAtIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableBitVectorRef, CFIndex,
              CFBit)>>('CFBitVectorSetBitAtIndex');
  late final _CFBitVectorSetBitAtIndex = _CFBitVectorSetBitAtIndexPtr
      .asFunction<void Function(CFMutableBitVectorRef, int, int)>();

  void CFBitVectorSetBits(
    CFMutableBitVectorRef bv,
    CFRange range,
    int value,
  ) {
    return _CFBitVectorSetBits(
      bv,
      range,
      value,
    );
  }

  late final _CFBitVectorSetBitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableBitVectorRef, CFRange, CFBit)>>('CFBitVectorSetBits');
  late final _CFBitVectorSetBits = _CFBitVectorSetBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, CFRange, int)>();

  void CFBitVectorSetAllBits(
    CFMutableBitVectorRef bv,
    int value,
  ) {
    return _CFBitVectorSetAllBits(
      bv,
      value,
    );
  }

  late final _CFBitVectorSetAllBitsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableBitVectorRef, CFBit)>>(
      'CFBitVectorSetAllBits');
  late final _CFBitVectorSetAllBits = _CFBitVectorSetAllBitsPtr.asFunction<
      void Function(CFMutableBitVectorRef, int)>();

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFTypeDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFTypeDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFTypeDictionaryKeyCallBacks =>
      _kCFTypeDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryKeyCallBacks>
      _kCFCopyStringDictionaryKeyCallBacks =
      _lookup<CFDictionaryKeyCallBacks>('kCFCopyStringDictionaryKeyCallBacks');

  CFDictionaryKeyCallBacks get kCFCopyStringDictionaryKeyCallBacks =>
      _kCFCopyStringDictionaryKeyCallBacks.ref;

  late final ffi.Pointer<CFDictionaryValueCallBacks>
      _kCFTypeDictionaryValueCallBacks =
      _lookup<CFDictionaryValueCallBacks>('kCFTypeDictionaryValueCallBacks');

  CFDictionaryValueCallBacks get kCFTypeDictionaryValueCallBacks =>
      _kCFTypeDictionaryValueCallBacks.ref;

  int CFDictionaryGetTypeID() {
    return _CFDictionaryGetTypeID();
  }

  late final _CFDictionaryGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDictionaryGetTypeID');
  late final _CFDictionaryGetTypeID =
      _CFDictionaryGetTypeIDPtr.asFunction<int Function()>();

  CFDictionaryRef CFDictionaryCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreate(
      allocator,
      keys,
      values,
      numValues,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>>('CFDictionaryCreate');
  late final _CFDictionaryCreate = _CFDictionaryCreatePtr.asFunction<
      CFDictionaryRef Function(
          CFAllocatorRef,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          int,
          ffi.Pointer<CFDictionaryKeyCallBacks>,
          ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFDictionaryRef CFDictionaryCreateCopy(
    CFAllocatorRef allocator,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateCopy(
      allocator,
      theDict,
    );
  }

  late final _CFDictionaryCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(
              CFAllocatorRef, CFDictionaryRef)>>('CFDictionaryCreateCopy');
  late final _CFDictionaryCreateCopy = _CFDictionaryCreateCopyPtr.asFunction<
      CFDictionaryRef Function(CFAllocatorRef, CFDictionaryRef)>();

  CFMutableDictionaryRef CFDictionaryCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFDictionaryKeyCallBacks> keyCallBacks,
    ffi.Pointer<CFDictionaryValueCallBacks> valueCallBacks,
  ) {
    return _CFDictionaryCreateMutable(
      allocator,
      capacity,
      keyCallBacks,
      valueCallBacks,
    );
  }

  late final _CFDictionaryCreateMutablePtr = _lookup<
          ffi.NativeFunction<
              CFMutableDictionaryRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  ffi.Pointer<CFDictionaryKeyCallBacks>,
                  ffi.Pointer<CFDictionaryValueCallBacks>)>>(
      'CFDictionaryCreateMutable');
  late final _CFDictionaryCreateMutable =
      _CFDictionaryCreateMutablePtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef,
              int,
              ffi.Pointer<CFDictionaryKeyCallBacks>,
              ffi.Pointer<CFDictionaryValueCallBacks>)>();

  CFMutableDictionaryRef CFDictionaryCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryCreateMutableCopy(
      allocator,
      capacity,
      theDict,
    );
  }

  late final _CFDictionaryCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDictionaryRef Function(CFAllocatorRef, CFIndex,
              CFDictionaryRef)>>('CFDictionaryCreateMutableCopy');
  late final _CFDictionaryCreateMutableCopy =
      _CFDictionaryCreateMutableCopyPtr.asFunction<
          CFMutableDictionaryRef Function(
              CFAllocatorRef, int, CFDictionaryRef)>();

  int CFDictionaryGetCount(
    CFDictionaryRef theDict,
  ) {
    return _CFDictionaryGetCount(
      theDict,
    );
  }

  late final _CFDictionaryGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDictionaryRef)>>(
          'CFDictionaryGetCount');
  late final _CFDictionaryGetCount =
      _CFDictionaryGetCountPtr.asFunction<int Function(CFDictionaryRef)>();

  int CFDictionaryGetCountOfKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetCountOfKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetCountOfKeyPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfKey');
  late final _CFDictionaryGetCountOfKey = _CFDictionaryGetCountOfKeyPtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetCountOfValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryGetCountOfValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryGetCountOfValue');
  late final _CFDictionaryGetCountOfValue = _CFDictionaryGetCountOfValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsKey(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryContainsKey(
      theDict,
      key,
    );
  }

  late final _CFDictionaryContainsKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsKey');
  late final _CFDictionaryContainsKey = _CFDictionaryContainsKeyPtr.asFunction<
      int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryContainsValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryContainsValue(
      theDict,
      value,
    );
  }

  late final _CFDictionaryContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryContainsValue');
  late final _CFDictionaryContainsValue = _CFDictionaryContainsValuePtr
      .asFunction<int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFDictionaryGetValue(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryGetValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFDictionaryRef, ffi.Pointer<ffi.Void>)>>('CFDictionaryGetValue');
  late final _CFDictionaryGetValue = _CFDictionaryGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFDictionaryRef, ffi.Pointer<ffi.Void>)>();

  int CFDictionaryGetValueIfPresent(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFDictionaryGetValueIfPresent(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryGetValueIfPresentPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetValueIfPresent');
  late final _CFDictionaryGetValueIfPresent =
      _CFDictionaryGetValueIfPresentPtr.asFunction<
          int Function(CFDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryGetKeysAndValues(
    CFDictionaryRef theDict,
    ffi.Pointer<ffi.Pointer<ffi.Void>> keys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFDictionaryGetKeysAndValues(
      theDict,
      keys,
      values,
    );
  }

  late final _CFDictionaryGetKeysAndValuesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFDictionaryRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFDictionaryGetKeysAndValues');
  late final _CFDictionaryGetKeysAndValues =
      _CFDictionaryGetKeysAndValuesPtr.asFunction<
          void Function(CFDictionaryRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFDictionaryApplyFunction(
    CFDictionaryRef theDict,
    CFDictionaryApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDictionaryApplyFunction(
      theDict,
      applier,
      context,
    );
  }

  late final _CFDictionaryApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryApplyFunction');
  late final _CFDictionaryApplyFunction =
      _CFDictionaryApplyFunctionPtr.asFunction<
          void Function(CFDictionaryRef, CFDictionaryApplierFunction,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryAddValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryAddValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryAddValue');
  late final _CFDictionaryAddValue = _CFDictionaryAddValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionarySetValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionarySetValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionarySetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionarySetValue');
  late final _CFDictionarySetValue = _CFDictionarySetValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  void CFDictionaryReplaceValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFDictionaryReplaceValue(
      theDict,
      key,
      value,
    );
  }

  late final _CFDictionaryReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryReplaceValue');
  late final _CFDictionaryReplaceValue =
      _CFDictionaryReplaceValuePtr.asFunction<
          void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveValue(
    CFMutableDictionaryRef theDict,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _CFDictionaryRemoveValue(
      theDict,
      key,
    );
  }

  late final _CFDictionaryRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDictionaryRef,
              ffi.Pointer<ffi.Void>)>>('CFDictionaryRemoveValue');
  late final _CFDictionaryRemoveValue = _CFDictionaryRemoveValuePtr.asFunction<
      void Function(CFMutableDictionaryRef, ffi.Pointer<ffi.Void>)>();

  void CFDictionaryRemoveAllValues(
    CFMutableDictionaryRef theDict,
  ) {
    return _CFDictionaryRemoveAllValues(
      theDict,
    );
  }

  late final _CFDictionaryRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDictionaryRef)>>(
          'CFDictionaryRemoveAllValues');
  late final _CFDictionaryRemoveAllValues = _CFDictionaryRemoveAllValuesPtr
      .asFunction<void Function(CFMutableDictionaryRef)>();

  int CFNotificationCenterGetTypeID() {
    return _CFNotificationCenterGetTypeID();
  }

  late final _CFNotificationCenterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNotificationCenterGetTypeID');
  late final _CFNotificationCenterGetTypeID =
      _CFNotificationCenterGetTypeIDPtr.asFunction<int Function()>();

  CFNotificationCenterRef CFNotificationCenterGetLocalCenter() {
    return _CFNotificationCenterGetLocalCenter();
  }

  late final _CFNotificationCenterGetLocalCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetLocalCenter');
  late final _CFNotificationCenterGetLocalCenter =
      _CFNotificationCenterGetLocalCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDistributedCenter() {
    return _CFNotificationCenterGetDistributedCenter();
  }

  late final _CFNotificationCenterGetDistributedCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDistributedCenter');
  late final _CFNotificationCenterGetDistributedCenter =
      _CFNotificationCenterGetDistributedCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter() {
    return _CFNotificationCenterGetDarwinNotifyCenter();
  }

  late final _CFNotificationCenterGetDarwinNotifyCenterPtr =
      _lookup<ffi.NativeFunction<CFNotificationCenterRef Function()>>(
          'CFNotificationCenterGetDarwinNotifyCenter');
  late final _CFNotificationCenterGetDarwinNotifyCenter =
      _CFNotificationCenterGetDarwinNotifyCenterPtr.asFunction<
          CFNotificationCenterRef Function()>();

  void CFNotificationCenterAddObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationCallback callBack,
    CFStringRef name,
    ffi.Pointer<ffi.Void> object,
    int suspensionBehavior,
  ) {
    return _CFNotificationCenterAddObserver(
      center,
      observer,
      callBack,
      name,
      object,
      suspensionBehavior,
    );
  }

  late final _CFNotificationCenterAddObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef,
                  ffi.Pointer<ffi.Void>,
                  CFNotificationCallback,
                  CFStringRef,
                  ffi.Pointer<ffi.Void>,
                  CFNotificationSuspensionBehavior)>>(
      'CFNotificationCenterAddObserver');
  late final _CFNotificationCenterAddObserver =
      _CFNotificationCenterAddObserverPtr.asFunction<
          void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationCallback,
              CFStringRef,
              ffi.Pointer<ffi.Void>,
              int)>();

  void CFNotificationCenterRemoveObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
  ) {
    return _CFNotificationCenterRemoveObserver(
      center,
      observer,
      name,
      object,
    );
  }

  late final _CFNotificationCenterRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              ffi.Pointer<ffi.Void>,
              CFNotificationName,
              ffi.Pointer<ffi.Void>)>>('CFNotificationCenterRemoveObserver');
  late final _CFNotificationCenterRemoveObserver =
      _CFNotificationCenterRemoveObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
              CFNotificationName, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterRemoveEveryObserver(
    CFNotificationCenterRef center,
    ffi.Pointer<ffi.Void> observer,
  ) {
    return _CFNotificationCenterRemoveEveryObserver(
      center,
      observer,
    );
  }

  late final _CFNotificationCenterRemoveEveryObserverPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>>(
      'CFNotificationCenterRemoveEveryObserver');
  late final _CFNotificationCenterRemoveEveryObserver =
      _CFNotificationCenterRemoveEveryObserverPtr.asFunction<
          void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>)>();

  void CFNotificationCenterPostNotification(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int deliverImmediately,
  ) {
    return _CFNotificationCenterPostNotification(
      center,
      name,
      object,
      userInfo,
      deliverImmediately,
    );
  }

  late final _CFNotificationCenterPostNotificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFNotificationCenterRef,
              CFNotificationName,
              ffi.Pointer<ffi.Void>,
              CFDictionaryRef,
              Boolean)>>('CFNotificationCenterPostNotification');
  late final _CFNotificationCenterPostNotification =
      _CFNotificationCenterPostNotificationPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  void CFNotificationCenterPostNotificationWithOptions(
    CFNotificationCenterRef center,
    CFNotificationName name,
    ffi.Pointer<ffi.Void> object,
    CFDictionaryRef userInfo,
    int options,
  ) {
    return _CFNotificationCenterPostNotificationWithOptions(
      center,
      name,
      object,
      userInfo,
      options,
    );
  }

  late final _CFNotificationCenterPostNotificationWithOptionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFNotificationCenterRef, CFNotificationName,
                  ffi.Pointer<ffi.Void>, CFDictionaryRef, CFOptionFlags)>>(
      'CFNotificationCenterPostNotificationWithOptions');
  late final _CFNotificationCenterPostNotificationWithOptions =
      _CFNotificationCenterPostNotificationWithOptionsPtr.asFunction<
          void Function(CFNotificationCenterRef, CFNotificationName,
              ffi.Pointer<ffi.Void>, CFDictionaryRef, int)>();

  int CFLocaleGetTypeID() {
    return _CFLocaleGetTypeID();
  }

  late final _CFLocaleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFLocaleGetTypeID');
  late final _CFLocaleGetTypeID =
      _CFLocaleGetTypeIDPtr.asFunction<int Function()>();

  CFLocaleRef CFLocaleGetSystem() {
    return _CFLocaleGetSystem();
  }

  late final _CFLocaleGetSystemPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>('CFLocaleGetSystem');
  late final _CFLocaleGetSystem =
      _CFLocaleGetSystemPtr.asFunction<CFLocaleRef Function()>();

  CFLocaleRef CFLocaleCopyCurrent() {
    return _CFLocaleCopyCurrent();
  }

  late final _CFLocaleCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function()>>(
          'CFLocaleCopyCurrent');
  late final _CFLocaleCopyCurrent =
      _CFLocaleCopyCurrentPtr.asFunction<CFLocaleRef Function()>();

  CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers() {
    return _CFLocaleCopyAvailableLocaleIdentifiers();
  }

  late final _CFLocaleCopyAvailableLocaleIdentifiersPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyAvailableLocaleIdentifiers');
  late final _CFLocaleCopyAvailableLocaleIdentifiers =
      _CFLocaleCopyAvailableLocaleIdentifiersPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOLanguageCodes() {
    return _CFLocaleCopyISOLanguageCodes();
  }

  late final _CFLocaleCopyISOLanguageCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOLanguageCodes');
  late final _CFLocaleCopyISOLanguageCodes =
      _CFLocaleCopyISOLanguageCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCountryCodes() {
    return _CFLocaleCopyISOCountryCodes();
  }

  late final _CFLocaleCopyISOCountryCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCountryCodes');
  late final _CFLocaleCopyISOCountryCodes =
      _CFLocaleCopyISOCountryCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyISOCurrencyCodes() {
    return _CFLocaleCopyISOCurrencyCodes();
  }

  late final _CFLocaleCopyISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyISOCurrencyCodes');
  late final _CFLocaleCopyISOCurrencyCodes =
      _CFLocaleCopyISOCurrencyCodesPtr.asFunction<CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyCommonISOCurrencyCodes() {
    return _CFLocaleCopyCommonISOCurrencyCodes();
  }

  late final _CFLocaleCopyCommonISOCurrencyCodesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyCommonISOCurrencyCodes');
  late final _CFLocaleCopyCommonISOCurrencyCodes =
      _CFLocaleCopyCommonISOCurrencyCodesPtr.asFunction<
          CFArrayRef Function()>();

  CFArrayRef CFLocaleCopyPreferredLanguages() {
    return _CFLocaleCopyPreferredLanguages();
  }

  late final _CFLocaleCopyPreferredLanguagesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFLocaleCopyPreferredLanguages');
  late final _CFLocaleCopyPreferredLanguages =
      _CFLocaleCopyPreferredLanguagesPtr.asFunction<CFArrayRef Function()>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLanguageIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLanguageIdentifierFromString');
  late final _CFLocaleCreateCanonicalLanguageIdentifierFromString =
      _CFLocaleCreateCanonicalLanguageIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromString(
    CFAllocatorRef allocator,
    CFStringRef localeIdentifier,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromString(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>>(
      'CFLocaleCreateCanonicalLocaleIdentifierFromString');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromString =
      _CFLocaleCreateCanonicalLocaleIdentifierFromStringPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFStringRef)>();

  CFLocaleIdentifier
      CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
    CFAllocatorRef allocator,
    int lcode,
    int rcode,
  ) {
    return _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(
      allocator,
      lcode,
      rcode,
    );
  }

  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr =
      _lookup<
              ffi.NativeFunction<
                  CFLocaleIdentifier Function(
                      CFAllocatorRef, LangCode, RegionCode)>>(
          'CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes');
  late final _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes =
      _CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodesPtr
          .asFunction<CFLocaleIdentifier Function(CFAllocatorRef, int, int)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
    CFAllocatorRef allocator,
    int lcid,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(
      allocator,
      lcid,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, ffi.Uint32)>>(
      'CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode');
  late final _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode =
      _CFLocaleCreateLocaleIdentifierFromWindowsLocaleCodePtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, int)>();

  int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(
      localeIdentifier,
    );
  }

  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(CFLocaleIdentifier)>>(
          'CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier');
  late final _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier =
      _CFLocaleGetWindowsLocaleCodeFromLocaleIdentifierPtr.asFunction<
          int Function(CFLocaleIdentifier)>();

  int CFLocaleGetLanguageCharacterDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageCharacterDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageCharacterDirectionPtr = _lookup<
          ffi.NativeFunction<CFLocaleLanguageDirection Function(CFStringRef)>>(
      'CFLocaleGetLanguageCharacterDirection');
  late final _CFLocaleGetLanguageCharacterDirection =
      _CFLocaleGetLanguageCharacterDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  int CFLocaleGetLanguageLineDirection(
    CFStringRef isoLangCode,
  ) {
    return _CFLocaleGetLanguageLineDirection(
      isoLangCode,
    );
  }

  late final _CFLocaleGetLanguageLineDirectionPtr = _lookup<
          ffi.NativeFunction<CFLocaleLanguageDirection Function(CFStringRef)>>(
      'CFLocaleGetLanguageLineDirection');
  late final _CFLocaleGetLanguageLineDirection =
      _CFLocaleGetLanguageLineDirectionPtr.asFunction<
          int Function(CFStringRef)>();

  CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeID,
  ) {
    return _CFLocaleCreateComponentsFromLocaleIdentifier(
      allocator,
      localeID,
    );
  }

  late final _CFLocaleCreateComponentsFromLocaleIdentifierPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>>(
      'CFLocaleCreateComponentsFromLocaleIdentifier');
  late final _CFLocaleCreateComponentsFromLocaleIdentifier =
      _CFLocaleCreateComponentsFromLocaleIdentifierPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(
    CFAllocatorRef allocator,
    CFDictionaryRef dictionary,
  ) {
    return _CFLocaleCreateLocaleIdentifierFromComponents(
      allocator,
      dictionary,
    );
  }

  late final _CFLocaleCreateLocaleIdentifierFromComponentsPtr = _lookup<
          ffi.NativeFunction<
              CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>>(
      'CFLocaleCreateLocaleIdentifierFromComponents');
  late final _CFLocaleCreateLocaleIdentifierFromComponents =
      _CFLocaleCreateLocaleIdentifierFromComponentsPtr.asFunction<
          CFLocaleIdentifier Function(CFAllocatorRef, CFDictionaryRef)>();

  CFLocaleRef CFLocaleCreate(
    CFAllocatorRef allocator,
    CFLocaleIdentifier localeIdentifier,
  ) {
    return _CFLocaleCreate(
      allocator,
      localeIdentifier,
    );
  }

  late final _CFLocaleCreatePtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleIdentifier)>>('CFLocaleCreate');
  late final _CFLocaleCreate = _CFLocaleCreatePtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleIdentifier)>();

  CFLocaleRef CFLocaleCreateCopy(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
  ) {
    return _CFLocaleCreateCopy(
      allocator,
      locale,
    );
  }

  late final _CFLocaleCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFLocaleRef Function(
              CFAllocatorRef, CFLocaleRef)>>('CFLocaleCreateCopy');
  late final _CFLocaleCreateCopy = _CFLocaleCreateCopyPtr.asFunction<
      CFLocaleRef Function(CFAllocatorRef, CFLocaleRef)>();

  CFLocaleIdentifier CFLocaleGetIdentifier(
    CFLocaleRef locale,
  ) {
    return _CFLocaleGetIdentifier(
      locale,
    );
  }

  late final _CFLocaleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFLocaleIdentifier Function(CFLocaleRef)>>(
          'CFLocaleGetIdentifier');
  late final _CFLocaleGetIdentifier = _CFLocaleGetIdentifierPtr.asFunction<
      CFLocaleIdentifier Function(CFLocaleRef)>();

  CFTypeRef CFLocaleGetValue(
    CFLocaleRef locale,
    CFLocaleKey key,
  ) {
    return _CFLocaleGetValue(
      locale,
      key,
    );
  }

  late final _CFLocaleGetValuePtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFLocaleRef, CFLocaleKey)>>(
          'CFLocaleGetValue');
  late final _CFLocaleGetValue = _CFLocaleGetValuePtr.asFunction<
      CFTypeRef Function(CFLocaleRef, CFLocaleKey)>();

  CFStringRef CFLocaleCopyDisplayNameForPropertyValue(
    CFLocaleRef displayLocale,
    CFLocaleKey key,
    CFStringRef value,
  ) {
    return _CFLocaleCopyDisplayNameForPropertyValue(
      displayLocale,
      key,
      value,
    );
  }

  late final _CFLocaleCopyDisplayNameForPropertyValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey,
              CFStringRef)>>('CFLocaleCopyDisplayNameForPropertyValue');
  late final _CFLocaleCopyDisplayNameForPropertyValue =
      _CFLocaleCopyDisplayNameForPropertyValuePtr.asFunction<
          CFStringRef Function(CFLocaleRef, CFLocaleKey, CFStringRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFLocaleCurrentLocaleDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFLocaleCurrentLocaleDidChangeNotification');

  CFNotificationName get kCFLocaleCurrentLocaleDidChangeNotification =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value;

  set kCFLocaleCurrentLocaleDidChangeNotification(CFNotificationName value) =>
      _kCFLocaleCurrentLocaleDidChangeNotification.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleIdentifier');

  CFLocaleKey get kCFLocaleIdentifier => _kCFLocaleIdentifier.value;

  set kCFLocaleIdentifier(CFLocaleKey value) =>
      _kCFLocaleIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleLanguageCode =
      _lookup<CFLocaleKey>('kCFLocaleLanguageCode');

  CFLocaleKey get kCFLocaleLanguageCode => _kCFLocaleLanguageCode.value;

  set kCFLocaleLanguageCode(CFLocaleKey value) =>
      _kCFLocaleLanguageCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCountryCode =
      _lookup<CFLocaleKey>('kCFLocaleCountryCode');

  CFLocaleKey get kCFLocaleCountryCode => _kCFLocaleCountryCode.value;

  set kCFLocaleCountryCode(CFLocaleKey value) =>
      _kCFLocaleCountryCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleScriptCode =
      _lookup<CFLocaleKey>('kCFLocaleScriptCode');

  CFLocaleKey get kCFLocaleScriptCode => _kCFLocaleScriptCode.value;

  set kCFLocaleScriptCode(CFLocaleKey value) =>
      _kCFLocaleScriptCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleVariantCode =
      _lookup<CFLocaleKey>('kCFLocaleVariantCode');

  CFLocaleKey get kCFLocaleVariantCode => _kCFLocaleVariantCode.value;

  set kCFLocaleVariantCode(CFLocaleKey value) =>
      _kCFLocaleVariantCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleExemplarCharacterSet =
      _lookup<CFLocaleKey>('kCFLocaleExemplarCharacterSet');

  CFLocaleKey get kCFLocaleExemplarCharacterSet =>
      _kCFLocaleExemplarCharacterSet.value;

  set kCFLocaleExemplarCharacterSet(CFLocaleKey value) =>
      _kCFLocaleExemplarCharacterSet.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendarIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCalendarIdentifier');

  CFLocaleKey get kCFLocaleCalendarIdentifier =>
      _kCFLocaleCalendarIdentifier.value;

  set kCFLocaleCalendarIdentifier(CFLocaleKey value) =>
      _kCFLocaleCalendarIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCalendar =
      _lookup<CFLocaleKey>('kCFLocaleCalendar');

  CFLocaleKey get kCFLocaleCalendar => _kCFLocaleCalendar.value;

  set kCFLocaleCalendar(CFLocaleKey value) => _kCFLocaleCalendar.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollationIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollationIdentifier');

  CFLocaleKey get kCFLocaleCollationIdentifier =>
      _kCFLocaleCollationIdentifier.value;

  set kCFLocaleCollationIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollationIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleUsesMetricSystem =
      _lookup<CFLocaleKey>('kCFLocaleUsesMetricSystem');

  CFLocaleKey get kCFLocaleUsesMetricSystem => _kCFLocaleUsesMetricSystem.value;

  set kCFLocaleUsesMetricSystem(CFLocaleKey value) =>
      _kCFLocaleUsesMetricSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleMeasurementSystem =
      _lookup<CFLocaleKey>('kCFLocaleMeasurementSystem');

  CFLocaleKey get kCFLocaleMeasurementSystem =>
      _kCFLocaleMeasurementSystem.value;

  set kCFLocaleMeasurementSystem(CFLocaleKey value) =>
      _kCFLocaleMeasurementSystem.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleDecimalSeparator =
      _lookup<CFLocaleKey>('kCFLocaleDecimalSeparator');

  CFLocaleKey get kCFLocaleDecimalSeparator => _kCFLocaleDecimalSeparator.value;

  set kCFLocaleDecimalSeparator(CFLocaleKey value) =>
      _kCFLocaleDecimalSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleGroupingSeparator =
      _lookup<CFLocaleKey>('kCFLocaleGroupingSeparator');

  CFLocaleKey get kCFLocaleGroupingSeparator =>
      _kCFLocaleGroupingSeparator.value;

  set kCFLocaleGroupingSeparator(CFLocaleKey value) =>
      _kCFLocaleGroupingSeparator.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencySymbol =
      _lookup<CFLocaleKey>('kCFLocaleCurrencySymbol');

  CFLocaleKey get kCFLocaleCurrencySymbol => _kCFLocaleCurrencySymbol.value;

  set kCFLocaleCurrencySymbol(CFLocaleKey value) =>
      _kCFLocaleCurrencySymbol.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCurrencyCode =
      _lookup<CFLocaleKey>('kCFLocaleCurrencyCode');

  CFLocaleKey get kCFLocaleCurrencyCode => _kCFLocaleCurrencyCode.value;

  set kCFLocaleCurrencyCode(CFLocaleKey value) =>
      _kCFLocaleCurrencyCode.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleCollatorIdentifier =
      _lookup<CFLocaleKey>('kCFLocaleCollatorIdentifier');

  CFLocaleKey get kCFLocaleCollatorIdentifier =>
      _kCFLocaleCollatorIdentifier.value;

  set kCFLocaleCollatorIdentifier(CFLocaleKey value) =>
      _kCFLocaleCollatorIdentifier.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationBeginDelimiterKey =>
      _kCFLocaleQuotationBeginDelimiterKey.value;

  set kCFLocaleQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey> _kCFLocaleQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleQuotationEndDelimiterKey =>
      _kCFLocaleQuotationEndDelimiterKey.value;

  set kCFLocaleQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationBeginDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationBeginDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationBeginDelimiterKey =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value;

  set kCFLocaleAlternateQuotationBeginDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationBeginDelimiterKey.value = value;

  late final ffi.Pointer<CFLocaleKey>
      _kCFLocaleAlternateQuotationEndDelimiterKey =
      _lookup<CFLocaleKey>('kCFLocaleAlternateQuotationEndDelimiterKey');

  CFLocaleKey get kCFLocaleAlternateQuotationEndDelimiterKey =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value;

  set kCFLocaleAlternateQuotationEndDelimiterKey(CFLocaleKey value) =>
      _kCFLocaleAlternateQuotationEndDelimiterKey.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFGregorianCalendar =
      _lookup<CFCalendarIdentifier>('kCFGregorianCalendar');

  CFCalendarIdentifier get kCFGregorianCalendar => _kCFGregorianCalendar.value;

  set kCFGregorianCalendar(CFCalendarIdentifier value) =>
      _kCFGregorianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFBuddhistCalendar =
      _lookup<CFCalendarIdentifier>('kCFBuddhistCalendar');

  CFCalendarIdentifier get kCFBuddhistCalendar => _kCFBuddhistCalendar.value;

  set kCFBuddhistCalendar(CFCalendarIdentifier value) =>
      _kCFBuddhistCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFChineseCalendar =
      _lookup<CFCalendarIdentifier>('kCFChineseCalendar');

  CFCalendarIdentifier get kCFChineseCalendar => _kCFChineseCalendar.value;

  set kCFChineseCalendar(CFCalendarIdentifier value) =>
      _kCFChineseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFHebrewCalendar =
      _lookup<CFCalendarIdentifier>('kCFHebrewCalendar');

  CFCalendarIdentifier get kCFHebrewCalendar => _kCFHebrewCalendar.value;

  set kCFHebrewCalendar(CFCalendarIdentifier value) =>
      _kCFHebrewCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCalendar');

  CFCalendarIdentifier get kCFIslamicCalendar => _kCFIslamicCalendar.value;

  set kCFIslamicCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicCivilCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicCivilCalendar');

  CFCalendarIdentifier get kCFIslamicCivilCalendar =>
      _kCFIslamicCivilCalendar.value;

  set kCFIslamicCivilCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicCivilCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFJapaneseCalendar =
      _lookup<CFCalendarIdentifier>('kCFJapaneseCalendar');

  CFCalendarIdentifier get kCFJapaneseCalendar => _kCFJapaneseCalendar.value;

  set kCFJapaneseCalendar(CFCalendarIdentifier value) =>
      _kCFJapaneseCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFRepublicOfChinaCalendar =
      _lookup<CFCalendarIdentifier>('kCFRepublicOfChinaCalendar');

  CFCalendarIdentifier get kCFRepublicOfChinaCalendar =>
      _kCFRepublicOfChinaCalendar.value;

  set kCFRepublicOfChinaCalendar(CFCalendarIdentifier value) =>
      _kCFRepublicOfChinaCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFPersianCalendar =
      _lookup<CFCalendarIdentifier>('kCFPersianCalendar');

  CFCalendarIdentifier get kCFPersianCalendar => _kCFPersianCalendar.value;

  set kCFPersianCalendar(CFCalendarIdentifier value) =>
      _kCFPersianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIndianCalendar =
      _lookup<CFCalendarIdentifier>('kCFIndianCalendar');

  CFCalendarIdentifier get kCFIndianCalendar => _kCFIndianCalendar.value;

  set kCFIndianCalendar(CFCalendarIdentifier value) =>
      _kCFIndianCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFISO8601Calendar =
      _lookup<CFCalendarIdentifier>('kCFISO8601Calendar');

  CFCalendarIdentifier get kCFISO8601Calendar => _kCFISO8601Calendar.value;

  set kCFISO8601Calendar(CFCalendarIdentifier value) =>
      _kCFISO8601Calendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicTabularCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicTabularCalendar');

  CFCalendarIdentifier get kCFIslamicTabularCalendar =>
      _kCFIslamicTabularCalendar.value;

  set kCFIslamicTabularCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicTabularCalendar.value = value;

  late final ffi.Pointer<CFCalendarIdentifier> _kCFIslamicUmmAlQuraCalendar =
      _lookup<CFCalendarIdentifier>('kCFIslamicUmmAlQuraCalendar');

  CFCalendarIdentifier get kCFIslamicUmmAlQuraCalendar =>
      _kCFIslamicUmmAlQuraCalendar.value;

  set kCFIslamicUmmAlQuraCalendar(CFCalendarIdentifier value) =>
      _kCFIslamicUmmAlQuraCalendar.value = value;

  double CFAbsoluteTimeGetCurrent() {
    return _CFAbsoluteTimeGetCurrent();
  }

  late final _CFAbsoluteTimeGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function()>>(
          'CFAbsoluteTimeGetCurrent');
  late final _CFAbsoluteTimeGetCurrent =
      _CFAbsoluteTimeGetCurrentPtr.asFunction<double Function()>();

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1970 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1970');

  double get kCFAbsoluteTimeIntervalSince1970 =>
      _kCFAbsoluteTimeIntervalSince1970.value;

  set kCFAbsoluteTimeIntervalSince1970(double value) =>
      _kCFAbsoluteTimeIntervalSince1970.value = value;

  late final ffi.Pointer<CFTimeInterval> _kCFAbsoluteTimeIntervalSince1904 =
      _lookup<CFTimeInterval>('kCFAbsoluteTimeIntervalSince1904');

  double get kCFAbsoluteTimeIntervalSince1904 =>
      _kCFAbsoluteTimeIntervalSince1904.value;

  set kCFAbsoluteTimeIntervalSince1904(double value) =>
      _kCFAbsoluteTimeIntervalSince1904.value = value;

  int CFDateGetTypeID() {
    return _CFDateGetTypeID();
  }

  late final _CFDateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDateGetTypeID');
  late final _CFDateGetTypeID =
      _CFDateGetTypeIDPtr.asFunction<int Function()>();

  CFDateRef CFDateCreate(
    CFAllocatorRef allocator,
    double at,
  ) {
    return _CFDateCreate(
      allocator,
      at,
    );
  }

  late final _CFDateCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFAbsoluteTime)>>('CFDateCreate');
  late final _CFDateCreate =
      _CFDateCreatePtr.asFunction<CFDateRef Function(CFAllocatorRef, double)>();

  double CFDateGetAbsoluteTime(
    CFDateRef theDate,
  ) {
    return _CFDateGetAbsoluteTime(
      theDate,
    );
  }

  late final _CFDateGetAbsoluteTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFDateRef)>>(
          'CFDateGetAbsoluteTime');
  late final _CFDateGetAbsoluteTime =
      _CFDateGetAbsoluteTimePtr.asFunction<double Function(CFDateRef)>();

  double CFDateGetTimeIntervalSinceDate(
    CFDateRef theDate,
    CFDateRef otherDate,
  ) {
    return _CFDateGetTimeIntervalSinceDate(
      theDate,
      otherDate,
    );
  }

  late final _CFDateGetTimeIntervalSinceDatePtr = _lookup<
          ffi.NativeFunction<CFTimeInterval Function(CFDateRef, CFDateRef)>>(
      'CFDateGetTimeIntervalSinceDate');
  late final _CFDateGetTimeIntervalSinceDate =
      _CFDateGetTimeIntervalSinceDatePtr.asFunction<
          double Function(CFDateRef, CFDateRef)>();

  int CFDateCompare(
    CFDateRef theDate,
    CFDateRef otherDate,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFDateCompare(
      theDate,
      otherDate,
      context,
    );
  }

  late final _CFDateComparePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(
              CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>>('CFDateCompare');
  late final _CFDateCompare = _CFDateComparePtr.asFunction<
      int Function(CFDateRef, CFDateRef, ffi.Pointer<ffi.Void>)>();

  int CFGregorianDateIsValid(
    CFGregorianDate gdate,
    int unitFlags,
  ) {
    return _CFGregorianDateIsValid(
      gdate,
      unitFlags,
    );
  }

  late final _CFGregorianDateIsValidPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFGregorianDate, CFOptionFlags)>>(
      'CFGregorianDateIsValid');
  late final _CFGregorianDateIsValid = _CFGregorianDateIsValidPtr.asFunction<
      int Function(CFGregorianDate, int)>();

  double CFGregorianDateGetAbsoluteTime(
    CFGregorianDate gdate,
    CFTimeZoneRef tz,
  ) {
    return _CFGregorianDateGetAbsoluteTime(
      gdate,
      tz,
    );
  }

  late final _CFGregorianDateGetAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFGregorianDate,
              CFTimeZoneRef)>>('CFGregorianDateGetAbsoluteTime');
  late final _CFGregorianDateGetAbsoluteTime =
      _CFGregorianDateGetAbsoluteTimePtr.asFunction<
          double Function(CFGregorianDate, CFTimeZoneRef)>();

  CFGregorianDate CFAbsoluteTimeGetGregorianDate(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetGregorianDate(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetGregorianDatePtr = _lookup<
      ffi.NativeFunction<
          CFGregorianDate Function(CFAbsoluteTime,
              CFTimeZoneRef)>>('CFAbsoluteTimeGetGregorianDate');
  late final _CFAbsoluteTimeGetGregorianDate =
      _CFAbsoluteTimeGetGregorianDatePtr.asFunction<
          CFGregorianDate Function(double, CFTimeZoneRef)>();

  double CFAbsoluteTimeAddGregorianUnits(
    double at,
    CFTimeZoneRef tz,
    CFGregorianUnits units,
  ) {
    return _CFAbsoluteTimeAddGregorianUnits(
      at,
      tz,
      units,
    );
  }

  late final _CFAbsoluteTimeAddGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(CFAbsoluteTime, CFTimeZoneRef,
              CFGregorianUnits)>>('CFAbsoluteTimeAddGregorianUnits');
  late final _CFAbsoluteTimeAddGregorianUnits =
      _CFAbsoluteTimeAddGregorianUnitsPtr.asFunction<
          double Function(double, CFTimeZoneRef, CFGregorianUnits)>();

  CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(
    double at1,
    double at2,
    CFTimeZoneRef tz,
    int unitFlags,
  ) {
    return _CFAbsoluteTimeGetDifferenceAsGregorianUnits(
      at1,
      at2,
      tz,
      unitFlags,
    );
  }

  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr = _lookup<
      ffi.NativeFunction<
          CFGregorianUnits Function(
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFTimeZoneRef,
              CFOptionFlags)>>('CFAbsoluteTimeGetDifferenceAsGregorianUnits');
  late final _CFAbsoluteTimeGetDifferenceAsGregorianUnits =
      _CFAbsoluteTimeGetDifferenceAsGregorianUnitsPtr.asFunction<
          CFGregorianUnits Function(double, double, CFTimeZoneRef, int)>();

  int CFAbsoluteTimeGetDayOfWeek(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfWeek(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfWeekPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfWeek');
  late final _CFAbsoluteTimeGetDayOfWeek = _CFAbsoluteTimeGetDayOfWeekPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetDayOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetDayOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetDayOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetDayOfYear');
  late final _CFAbsoluteTimeGetDayOfYear = _CFAbsoluteTimeGetDayOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFAbsoluteTimeGetWeekOfYear(
    double at,
    CFTimeZoneRef tz,
  ) {
    return _CFAbsoluteTimeGetWeekOfYear(
      at,
      tz,
    );
  }

  late final _CFAbsoluteTimeGetWeekOfYearPtr = _lookup<
          ffi.NativeFunction<SInt32 Function(CFAbsoluteTime, CFTimeZoneRef)>>(
      'CFAbsoluteTimeGetWeekOfYear');
  late final _CFAbsoluteTimeGetWeekOfYear = _CFAbsoluteTimeGetWeekOfYearPtr
      .asFunction<int Function(double, CFTimeZoneRef)>();

  int CFDataGetTypeID() {
    return _CFDataGetTypeID();
  }

  late final _CFDataGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFDataGetTypeID');
  late final _CFDataGetTypeID =
      _CFDataGetTypeIDPtr.asFunction<int Function()>();

  CFDataRef CFDataCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataCreate(
      allocator,
      bytes,
      length,
    );
  }

  late final _CFDataCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex)>>('CFDataCreate');
  late final _CFDataCreate = _CFDataCreatePtr.asFunction<
      CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFDataRef CFDataCreateWithBytesNoCopy(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFDataCreateWithBytesNoCopy(
      allocator,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFDataCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFDataCreateWithBytesNoCopy');
  late final _CFDataCreateWithBytesNoCopy =
      _CFDataCreateWithBytesNoCopyPtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFDataRef CFDataCreateCopy(
    CFAllocatorRef allocator,
    CFDataRef theData,
  ) {
    return _CFDataCreateCopy(
      allocator,
      theData,
    );
  }

  late final _CFDataCreateCopyPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFDataCreateCopy');
  late final _CFDataCreateCopy = _CFDataCreateCopyPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  CFMutableDataRef CFDataCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
  ) {
    return _CFDataCreateMutable(
      allocator,
      capacity,
    );
  }

  late final _CFDataCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex)>>('CFDataCreateMutable');
  late final _CFDataCreateMutable = _CFDataCreateMutablePtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int)>();

  CFMutableDataRef CFDataCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFDataRef theData,
  ) {
    return _CFDataCreateMutableCopy(
      allocator,
      capacity,
      theData,
    );
  }

  late final _CFDataCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableDataRef Function(
              CFAllocatorRef, CFIndex, CFDataRef)>>('CFDataCreateMutableCopy');
  late final _CFDataCreateMutableCopy = _CFDataCreateMutableCopyPtr.asFunction<
      CFMutableDataRef Function(CFAllocatorRef, int, CFDataRef)>();

  int CFDataGetLength(
    CFDataRef theData,
  ) {
    return _CFDataGetLength(
      theData,
    );
  }

  late final _CFDataGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFDataRef)>>(
          'CFDataGetLength');
  late final _CFDataGetLength =
      _CFDataGetLengthPtr.asFunction<int Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetBytePtr(
    CFDataRef theData,
  ) {
    return _CFDataGetBytePtr(
      theData,
    );
  }

  late final _CFDataGetBytePtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFDataRef)>>(
          'CFDataGetBytePtr');
  late final _CFDataGetBytePtr =
      _CFDataGetBytePtrPtr.asFunction<ffi.Pointer<UInt8> Function(CFDataRef)>();

  ffi.Pointer<UInt8> CFDataGetMutableBytePtr(
    CFMutableDataRef theData,
  ) {
    return _CFDataGetMutableBytePtr(
      theData,
    );
  }

  late final _CFDataGetMutableBytePtrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<UInt8> Function(CFMutableDataRef)>>(
      'CFDataGetMutableBytePtr');
  late final _CFDataGetMutableBytePtr = _CFDataGetMutableBytePtrPtr.asFunction<
      ffi.Pointer<UInt8> Function(CFMutableDataRef)>();

  void CFDataGetBytes(
    CFDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> buffer,
  ) {
    return _CFDataGetBytes(
      theData,
      range,
      buffer,
    );
  }

  late final _CFDataGetBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDataRef, CFRange, ffi.Pointer<UInt8>)>>('CFDataGetBytes');
  late final _CFDataGetBytes = _CFDataGetBytesPtr.asFunction<
      void Function(CFDataRef, CFRange, ffi.Pointer<UInt8>)>();

  void CFDataSetLength(
    CFMutableDataRef theData,
    int length,
  ) {
    return _CFDataSetLength(
      theData,
      length,
    );
  }

  late final _CFDataSetLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataSetLength');
  late final _CFDataSetLength =
      _CFDataSetLengthPtr.asFunction<void Function(CFMutableDataRef, int)>();

  void CFDataIncreaseLength(
    CFMutableDataRef theData,
    int extraLength,
  ) {
    return _CFDataIncreaseLength(
      theData,
      extraLength,
    );
  }

  late final _CFDataIncreaseLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFIndex)>>(
          'CFDataIncreaseLength');
  late final _CFDataIncreaseLength = _CFDataIncreaseLengthPtr.asFunction<
      void Function(CFMutableDataRef, int)>();

  void CFDataAppendBytes(
    CFMutableDataRef theData,
    ffi.Pointer<UInt8> bytes,
    int length,
  ) {
    return _CFDataAppendBytes(
      theData,
      bytes,
      length,
    );
  }

  late final _CFDataAppendBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataAppendBytes');
  late final _CFDataAppendBytes = _CFDataAppendBytesPtr.asFunction<
      void Function(CFMutableDataRef, ffi.Pointer<UInt8>, int)>();

  void CFDataReplaceBytes(
    CFMutableDataRef theData,
    CFRange range,
    ffi.Pointer<UInt8> newBytes,
    int newLength,
  ) {
    return _CFDataReplaceBytes(
      theData,
      range,
      newBytes,
      newLength,
    );
  }

  late final _CFDataReplaceBytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>,
              CFIndex)>>('CFDataReplaceBytes');
  late final _CFDataReplaceBytes = _CFDataReplaceBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange, ffi.Pointer<UInt8>, int)>();

  void CFDataDeleteBytes(
    CFMutableDataRef theData,
    CFRange range,
  ) {
    return _CFDataDeleteBytes(
      theData,
      range,
    );
  }

  late final _CFDataDeleteBytesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableDataRef, CFRange)>>(
          'CFDataDeleteBytes');
  late final _CFDataDeleteBytes = _CFDataDeleteBytesPtr.asFunction<
      void Function(CFMutableDataRef, CFRange)>();

  CFRange CFDataFind(
    CFDataRef theData,
    CFDataRef dataToFind,
    CFRange searchRange,
    int compareOptions,
  ) {
    return _CFDataFind(
      theData,
      dataToFind,
      searchRange,
      compareOptions,
    );
  }

  late final _CFDataFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFDataRef, CFDataRef, CFRange, CFDataSearchFlags)>>('CFDataFind');
  late final _CFDataFind = _CFDataFindPtr.asFunction<
      CFRange Function(CFDataRef, CFDataRef, CFRange, int)>();

  int CFCharacterSetGetTypeID() {
    return _CFCharacterSetGetTypeID();
  }

  late final _CFCharacterSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFCharacterSetGetTypeID');
  late final _CFCharacterSetGetTypeID =
      _CFCharacterSetGetTypeIDPtr.asFunction<int Function()>();

  CFCharacterSetRef CFCharacterSetGetPredefined(
    int theSetIdentifier,
  ) {
    return _CFCharacterSetGetPredefined(
      theSetIdentifier,
    );
  }

  late final _CFCharacterSetGetPredefinedPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFCharacterSetPredefinedSet)>>('CFCharacterSetGetPredefined');
  late final _CFCharacterSetGetPredefined = _CFCharacterSetGetPredefinedPtr
      .asFunction<CFCharacterSetRef Function(int)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(
    CFAllocatorRef alloc,
    CFRange theRange,
  ) {
    return _CFCharacterSetCreateWithCharactersInRange(
      alloc,
      theRange,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFRange)>>('CFCharacterSetCreateWithCharactersInRange');
  late final _CFCharacterSetCreateWithCharactersInRange =
      _CFCharacterSetCreateWithCharactersInRangePtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFRange)>();

  CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFCharacterSetCreateWithCharactersInString(
      alloc,
      theString,
    );
  }

  late final _CFCharacterSetCreateWithCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFStringRef)>>('CFCharacterSetCreateWithCharactersInString');
  late final _CFCharacterSetCreateWithCharactersInString =
      _CFCharacterSetCreateWithCharactersInStringPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFStringRef)>();

  CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(
    CFAllocatorRef alloc,
    CFDataRef theData,
  ) {
    return _CFCharacterSetCreateWithBitmapRepresentation(
      alloc,
      theData,
    );
  }

  late final _CFCharacterSetCreateWithBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFDataRef)>>('CFCharacterSetCreateWithBitmapRepresentation');
  late final _CFCharacterSetCreateWithBitmapRepresentation =
      _CFCharacterSetCreateWithBitmapRepresentationPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFDataRef)>();

  CFCharacterSetRef CFCharacterSetCreateInvertedSet(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateInvertedSet(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateInvertedSetPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateInvertedSet');
  late final _CFCharacterSetCreateInvertedSet =
      _CFCharacterSetCreateInvertedSetPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsSupersetOfSet(
    CFCharacterSetRef theSet,
    CFCharacterSetRef theOtherset,
  ) {
    return _CFCharacterSetIsSupersetOfSet(
      theSet,
      theOtherset,
    );
  }

  late final _CFCharacterSetIsSupersetOfSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIsSupersetOfSet');
  late final _CFCharacterSetIsSupersetOfSet = _CFCharacterSetIsSupersetOfSetPtr
      .asFunction<int Function(CFCharacterSetRef, CFCharacterSetRef)>();

  int CFCharacterSetHasMemberInPlane(
    CFCharacterSetRef theSet,
    int thePlane,
  ) {
    return _CFCharacterSetHasMemberInPlane(
      theSet,
      thePlane,
    );
  }

  late final _CFCharacterSetHasMemberInPlanePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, CFIndex)>>(
          'CFCharacterSetHasMemberInPlane');
  late final _CFCharacterSetHasMemberInPlane =
      _CFCharacterSetHasMemberInPlanePtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutable(
    CFAllocatorRef alloc,
  ) {
    return _CFCharacterSetCreateMutable(
      alloc,
    );
  }

  late final _CFCharacterSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef)>>('CFCharacterSetCreateMutable');
  late final _CFCharacterSetCreateMutable = _CFCharacterSetCreateMutablePtr
      .asFunction<CFMutableCharacterSetRef Function(CFAllocatorRef)>();

  CFCharacterSetRef CFCharacterSetCreateCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>>('CFCharacterSetCreateCopy');
  late final _CFCharacterSetCreateCopy =
      _CFCharacterSetCreateCopyPtr.asFunction<
          CFCharacterSetRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateMutableCopy(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableCharacterSetRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateMutableCopy');
  late final _CFCharacterSetCreateMutableCopy =
      _CFCharacterSetCreateMutableCopyPtr.asFunction<
          CFMutableCharacterSetRef Function(
              CFAllocatorRef, CFCharacterSetRef)>();

  int CFCharacterSetIsCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsCharacterMemberPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UniChar)>>(
          'CFCharacterSetIsCharacterMember');
  late final _CFCharacterSetIsCharacterMember =
      _CFCharacterSetIsCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  int CFCharacterSetIsLongCharacterMember(
    CFCharacterSetRef theSet,
    int theChar,
  ) {
    return _CFCharacterSetIsLongCharacterMember(
      theSet,
      theChar,
    );
  }

  late final _CFCharacterSetIsLongCharacterMemberPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFCharacterSetRef, UTF32Char)>>(
      'CFCharacterSetIsLongCharacterMember');
  late final _CFCharacterSetIsLongCharacterMember =
      _CFCharacterSetIsLongCharacterMemberPtr.asFunction<
          int Function(CFCharacterSetRef, int)>();

  CFDataRef CFCharacterSetCreateBitmapRepresentation(
    CFAllocatorRef alloc,
    CFCharacterSetRef theSet,
  ) {
    return _CFCharacterSetCreateBitmapRepresentation(
      alloc,
      theSet,
    );
  }

  late final _CFCharacterSetCreateBitmapRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFCharacterSetRef)>>('CFCharacterSetCreateBitmapRepresentation');
  late final _CFCharacterSetCreateBitmapRepresentation =
      _CFCharacterSetCreateBitmapRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFCharacterSetRef)>();

  void CFCharacterSetAddCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetAddCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetAddCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetAddCharactersInRange');
  late final _CFCharacterSetAddCharactersInRange =
      _CFCharacterSetAddCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetRemoveCharactersInRange(
    CFMutableCharacterSetRef theSet,
    CFRange theRange,
  ) {
    return _CFCharacterSetRemoveCharactersInRange(
      theSet,
      theRange,
    );
  }

  late final _CFCharacterSetRemoveCharactersInRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFRange)>>('CFCharacterSetRemoveCharactersInRange');
  late final _CFCharacterSetRemoveCharactersInRange =
      _CFCharacterSetRemoveCharactersInRangePtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFRange)>();

  void CFCharacterSetAddCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetAddCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetAddCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetAddCharactersInString');
  late final _CFCharacterSetAddCharactersInString =
      _CFCharacterSetAddCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetRemoveCharactersInString(
    CFMutableCharacterSetRef theSet,
    CFStringRef theString,
  ) {
    return _CFCharacterSetRemoveCharactersInString(
      theSet,
      theString,
    );
  }

  late final _CFCharacterSetRemoveCharactersInStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFStringRef)>>('CFCharacterSetRemoveCharactersInString');
  late final _CFCharacterSetRemoveCharactersInString =
      _CFCharacterSetRemoveCharactersInStringPtr.asFunction<
          void Function(CFMutableCharacterSetRef, CFStringRef)>();

  void CFCharacterSetUnion(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetUnion(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetUnionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetUnion');
  late final _CFCharacterSetUnion = _CFCharacterSetUnionPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetIntersect(
    CFMutableCharacterSetRef theSet,
    CFCharacterSetRef theOtherSet,
  ) {
    return _CFCharacterSetIntersect(
      theSet,
      theOtherSet,
    );
  }

  late final _CFCharacterSetIntersectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableCharacterSetRef,
              CFCharacterSetRef)>>('CFCharacterSetIntersect');
  late final _CFCharacterSetIntersect = _CFCharacterSetIntersectPtr.asFunction<
      void Function(CFMutableCharacterSetRef, CFCharacterSetRef)>();

  void CFCharacterSetInvert(
    CFMutableCharacterSetRef theSet,
  ) {
    return _CFCharacterSetInvert(
      theSet,
    );
  }

  late final _CFCharacterSetInvertPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableCharacterSetRef)>>(
          'CFCharacterSetInvert');
  late final _CFCharacterSetInvert = _CFCharacterSetInvertPtr.asFunction<
      void Function(CFMutableCharacterSetRef)>();

  int CFStringGetTypeID() {
    return _CFStringGetTypeID();
  }

  late final _CFStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFStringGetTypeID');
  late final _CFStringGetTypeID =
      _CFStringGetTypeIDPtr.asFunction<int Function()>();

  CFStringRef CFStringCreateWithPascalString(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringCreateWithPascalString(
      alloc,
      pStr,
      encoding,
    );
  }

  late final _CFStringCreateWithPascalStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringCreateWithPascalString');
  late final _CFStringCreateWithPascalString =
      _CFStringCreateWithPascalStringPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ConstStr255Param, int)>();

  CFStringRef CFStringCreateWithCString(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringCreateWithCString(
      alloc,
      cStr,
      encoding,
    );
  }

  late final _CFStringCreateWithCStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringCreateWithCString');
  late final _CFStringCreateWithCString =
      _CFStringCreateWithCStringPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  CFStringRef CFStringCreateWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
  ) {
    return _CFStringCreateWithBytes(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
    );
  }

  late final _CFStringCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, Boolean)>>('CFStringCreateWithBytes');
  late final _CFStringCreateWithBytes = _CFStringCreateWithBytesPtr.asFunction<
      CFStringRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, int)>();

  CFStringRef CFStringCreateWithCharacters(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringCreateWithCharacters(
      alloc,
      chars,
      numChars,
    );
  }

  late final _CFStringCreateWithCharactersPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringCreateWithCharacters');
  late final _CFStringCreateWithCharacters =
      _CFStringCreateWithCharactersPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int)>();

  CFStringRef CFStringCreateWithPascalStringNoCopy(
    CFAllocatorRef alloc,
    ConstStr255Param pStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithPascalStringNoCopy(
      alloc,
      pStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithPascalStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ConstStr255Param,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithPascalStringNoCopy');
  late final _CFStringCreateWithPascalStringNoCopy =
      _CFStringCreateWithPascalStringNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ConstStr255Param, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCStringNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCStringNoCopy(
      alloc,
      cStr,
      encoding,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCStringNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding,
              CFAllocatorRef)>>('CFStringCreateWithCStringNoCopy');
  late final _CFStringCreateWithCStringNoCopy =
      _CFStringCreateWithCStringNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>, int,
              CFAllocatorRef)>();

  CFStringRef CFStringCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int numBytes,
    int encoding,
    int isExternalRepresentation,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithBytesNoCopy(
      alloc,
      bytes,
      numBytes,
      encoding,
      isExternalRepresentation,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              Boolean,
              CFAllocatorRef)>>('CFStringCreateWithBytesNoCopy');
  late final _CFStringCreateWithBytesNoCopy =
      _CFStringCreateWithBytesNoCopyPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int,
              int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    CFAllocatorRef contentsDeallocator,
  ) {
    return _CFStringCreateWithCharactersNoCopy(
      alloc,
      chars,
      numChars,
      contentsDeallocator,
    );
  }

  late final _CFStringCreateWithCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, CFIndex,
              CFAllocatorRef)>>('CFStringCreateWithCharactersNoCopy');
  late final _CFStringCreateWithCharactersNoCopy =
      _CFStringCreateWithCharactersNoCopyPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, ffi.Pointer<UniChar>, int, CFAllocatorRef)>();

  CFStringRef CFStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFRange range,
  ) {
    return _CFStringCreateWithSubstring(
      alloc,
      str,
      range,
    );
  }

  late final _CFStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFRange)>>('CFStringCreateWithSubstring');
  late final _CFStringCreateWithSubstring = _CFStringCreateWithSubstringPtr
      .asFunction<CFStringRef Function(CFAllocatorRef, CFStringRef, CFRange)>();

  CFStringRef CFStringCreateCopy(
    CFAllocatorRef alloc,
    CFStringRef theString,
  ) {
    return _CFStringCreateCopy(
      alloc,
      theString,
    );
  }

  late final _CFStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef)>>('CFStringCreateCopy');
  late final _CFStringCreateCopy = _CFStringCreateCopyPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormat(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringCreateWithFormat(
      alloc,
      formatOptions,
      format,
    );
  }

  late final _CFStringCreateWithFormatPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef,
              CFStringRef)>>('CFStringCreateWithFormat');
  late final _CFStringCreateWithFormat =
      _CFStringCreateWithFormatPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef)>();

  CFStringRef CFStringCreateWithFormatAndArguments(
    CFAllocatorRef alloc,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringCreateWithFormatAndArguments(
      alloc,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringCreateWithFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringCreateWithFormatAndArguments');
  late final _CFStringCreateWithFormatAndArguments =
      _CFStringCreateWithFormatAndArgumentsPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDictionaryRef, CFStringRef, va_list)>();

  CFMutableStringRef CFStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFStringCreateMutable');
  late final _CFStringCreateMutable = _CFStringCreateMutablePtr.asFunction<
      CFMutableStringRef Function(CFAllocatorRef, int)>();

  CFMutableStringRef CFStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFStringRef theString,
  ) {
    return _CFStringCreateMutableCopy(
      alloc,
      maxLength,
      theString,
    );
  }

  late final _CFStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableStringRef Function(CFAllocatorRef, CFIndex,
              CFStringRef)>>('CFStringCreateMutableCopy');
  late final _CFStringCreateMutableCopy =
      _CFStringCreateMutableCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, int, CFStringRef)>();

  CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UniChar> chars,
    int numChars,
    int capacity,
    CFAllocatorRef externalCharactersAllocator,
  ) {
    return _CFStringCreateMutableWithExternalCharactersNoCopy(
      alloc,
      chars,
      numChars,
      capacity,
      externalCharactersAllocator,
    );
  }

  late final _CFStringCreateMutableWithExternalCharactersNoCopyPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>,
                  CFIndex, CFIndex, CFAllocatorRef)>>(
      'CFStringCreateMutableWithExternalCharactersNoCopy');
  late final _CFStringCreateMutableWithExternalCharactersNoCopy =
      _CFStringCreateMutableWithExternalCharactersNoCopyPtr.asFunction<
          CFMutableStringRef Function(CFAllocatorRef, ffi.Pointer<UniChar>, int,
              int, CFAllocatorRef)>();

  int CFStringGetLength(
    CFStringRef theString,
  ) {
    return _CFStringGetLength(
      theString,
    );
  }

  late final _CFStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetLength');
  late final _CFStringGetLength =
      _CFStringGetLengthPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetCharacterAtIndex(
    CFStringRef theString,
    int idx,
  ) {
    return _CFStringGetCharacterAtIndex(
      theString,
      idx,
    );
  }

  late final _CFStringGetCharacterAtIndexPtr =
      _lookup<ffi.NativeFunction<UniChar Function(CFStringRef, CFIndex)>>(
          'CFStringGetCharacterAtIndex');
  late final _CFStringGetCharacterAtIndex = _CFStringGetCharacterAtIndexPtr
      .asFunction<int Function(CFStringRef, int)>();

  void CFStringGetCharacters(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<UniChar> buffer,
  ) {
    return _CFStringGetCharacters(
      theString,
      range,
      buffer,
    );
  }

  late final _CFStringGetCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFRange,
              ffi.Pointer<UniChar>)>>('CFStringGetCharacters');
  late final _CFStringGetCharacters = _CFStringGetCharactersPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<UniChar>)>();

  int CFStringGetPascalString(
    CFStringRef theString,
    StringPtr buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetPascalString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, StringPtr, CFIndex,
              CFStringEncoding)>>('CFStringGetPascalString');
  late final _CFStringGetPascalString = _CFStringGetPascalStringPtr.asFunction<
      int Function(CFStringRef, StringPtr, int, int)>();

  int CFStringGetCString(
    CFStringRef theString,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int bufferSize,
    int encoding,
  ) {
    return _CFStringGetCString(
      theString,
      buffer,
      bufferSize,
      encoding,
    );
  }

  late final _CFStringGetCStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, CFIndex,
              CFStringEncoding)>>('CFStringGetCString');
  late final _CFStringGetCString = _CFStringGetCStringPtr.asFunction<
      int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  ConstStringPtr CFStringGetPascalStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetPascalStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetPascalStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ConstStringPtr Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetPascalStringPtr');
  late final _CFStringGetPascalStringPtr1 = _CFStringGetPascalStringPtrPtr
      .asFunction<ConstStringPtr Function(CFStringRef, int)>();

  ffi.Pointer<pkg_ffi.Char> CFStringGetCStringPtr(
    CFStringRef theString,
    int encoding,
  ) {
    return _CFStringGetCStringPtr1(
      theString,
      encoding,
    );
  }

  late final _CFStringGetCStringPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              CFStringRef, CFStringEncoding)>>('CFStringGetCStringPtr');
  late final _CFStringGetCStringPtr1 = _CFStringGetCStringPtrPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(CFStringRef, int)>();

  ffi.Pointer<UniChar> CFStringGetCharactersPtr(
    CFStringRef theString,
  ) {
    return _CFStringGetCharactersPtr1(
      theString,
    );
  }

  late final _CFStringGetCharactersPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<UniChar> Function(CFStringRef)>>(
          'CFStringGetCharactersPtr');
  late final _CFStringGetCharactersPtr1 = _CFStringGetCharactersPtrPtr
      .asFunction<ffi.Pointer<UniChar> Function(CFStringRef)>();

  int CFStringGetBytes(
    CFStringRef theString,
    CFRange range,
    int encoding,
    int lossByte,
    int isExternalRepresentation,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
    ffi.Pointer<CFIndex> usedBufLen,
  ) {
    return _CFStringGetBytes(
      theString,
      range,
      encoding,
      lossByte,
      isExternalRepresentation,
      buffer,
      maxBufLen,
      usedBufLen,
    );
  }

  late final _CFStringGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFStringRef,
              CFRange,
              CFStringEncoding,
              UInt8,
              Boolean,
              ffi.Pointer<UInt8>,
              CFIndex,
              ffi.Pointer<CFIndex>)>>('CFStringGetBytes');
  late final _CFStringGetBytes = _CFStringGetBytesPtr.asFunction<
      int Function(CFStringRef, CFRange, int, int, int, ffi.Pointer<UInt8>, int,
          ffi.Pointer<CFIndex>)>();

  CFStringRef CFStringCreateFromExternalRepresentation(
    CFAllocatorRef alloc,
    CFDataRef data,
    int encoding,
  ) {
    return _CFStringCreateFromExternalRepresentation(
      alloc,
      data,
      encoding,
    );
  }

  late final _CFStringCreateFromExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef,
              CFStringEncoding)>>('CFStringCreateFromExternalRepresentation');
  late final _CFStringCreateFromExternalRepresentation =
      _CFStringCreateFromExternalRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDataRef, int)>();

  CFDataRef CFStringCreateExternalRepresentation(
    CFAllocatorRef alloc,
    CFStringRef theString,
    int encoding,
    int lossByte,
  ) {
    return _CFStringCreateExternalRepresentation(
      alloc,
      theString,
      encoding,
      lossByte,
    );
  }

  late final _CFStringCreateExternalRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, CFStringEncoding,
              UInt8)>>('CFStringCreateExternalRepresentation');
  late final _CFStringCreateExternalRepresentation =
      _CFStringCreateExternalRepresentationPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  int CFStringGetSmallestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetSmallestEncoding(
      theString,
    );
  }

  late final _CFStringGetSmallestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetSmallestEncoding');
  late final _CFStringGetSmallestEncoding =
      _CFStringGetSmallestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetFastestEncoding(
    CFStringRef theString,
  ) {
    return _CFStringGetFastestEncoding(
      theString,
    );
  }

  late final _CFStringGetFastestEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringGetFastestEncoding');
  late final _CFStringGetFastestEncoding =
      _CFStringGetFastestEncodingPtr.asFunction<int Function(CFStringRef)>();

  int CFStringGetSystemEncoding() {
    return _CFStringGetSystemEncoding();
  }

  late final _CFStringGetSystemEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function()>>(
          'CFStringGetSystemEncoding');
  late final _CFStringGetSystemEncoding =
      _CFStringGetSystemEncodingPtr.asFunction<int Function()>();

  int CFStringGetMaximumSizeForEncoding(
    int length,
    int encoding,
  ) {
    return _CFStringGetMaximumSizeForEncoding(
      length,
      encoding,
    );
  }

  late final _CFStringGetMaximumSizeForEncodingPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFIndex, CFStringEncoding)>>(
          'CFStringGetMaximumSizeForEncoding');
  late final _CFStringGetMaximumSizeForEncoding =
      _CFStringGetMaximumSizeForEncodingPtr.asFunction<
          int Function(int, int)>();

  int CFStringGetFileSystemRepresentation(
    CFStringRef string,
    ffi.Pointer<pkg_ffi.Char> buffer,
    int maxBufLen,
  ) {
    return _CFStringGetFileSystemRepresentation(
      string,
      buffer,
      maxBufLen,
    );
  }

  late final _CFStringGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFIndex)>>('CFStringGetFileSystemRepresentation');
  late final _CFStringGetFileSystemRepresentation =
      _CFStringGetFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int CFStringGetMaximumSizeOfFileSystemRepresentation(
    CFStringRef string,
  ) {
    return _CFStringGetMaximumSizeOfFileSystemRepresentation(
      string,
    );
  }

  late final _CFStringGetMaximumSizeOfFileSystemRepresentationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFStringRef)>>(
          'CFStringGetMaximumSizeOfFileSystemRepresentation');
  late final _CFStringGetMaximumSizeOfFileSystemRepresentation =
      _CFStringGetMaximumSizeOfFileSystemRepresentationPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringCreateWithFileSystemRepresentation(
    CFAllocatorRef alloc,
    ffi.Pointer<pkg_ffi.Char> buffer,
  ) {
    return _CFStringCreateWithFileSystemRepresentation(
      alloc,
      buffer,
    );
  }

  late final _CFStringCreateWithFileSystemRepresentationPtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>>(
      'CFStringCreateWithFileSystemRepresentation');
  late final _CFStringCreateWithFileSystemRepresentation =
      _CFStringCreateWithFileSystemRepresentationPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, ffi.Pointer<pkg_ffi.Char>)>();

  int CFStringCompareWithOptionsAndLocale(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
    CFLocaleRef locale,
  ) {
    return _CFStringCompareWithOptionsAndLocale(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
      locale,
    );
  }

  late final _CFStringCompareWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFStringCompareFlags,
              CFLocaleRef)>>('CFStringCompareWithOptionsAndLocale');
  late final _CFStringCompareWithOptionsAndLocale =
      _CFStringCompareWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  int CFStringCompareWithOptions(
    CFStringRef theString1,
    CFStringRef theString2,
    CFRange rangeToCompare,
    int compareOptions,
  ) {
    return _CFStringCompareWithOptions(
      theString1,
      theString2,
      rangeToCompare,
      compareOptions,
    );
  }

  late final _CFStringCompareWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(CFStringRef, CFStringRef, CFRange,
              CFStringCompareFlags)>>('CFStringCompareWithOptions');
  late final _CFStringCompareWithOptions = _CFStringCompareWithOptionsPtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFRange, int)>();

  int CFStringCompare(
    CFStringRef theString1,
    CFStringRef theString2,
    int compareOptions,
  ) {
    return _CFStringCompare(
      theString1,
      theString2,
      compareOptions,
    );
  }

  late final _CFStringComparePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(CFStringRef, CFStringRef,
              CFStringCompareFlags)>>('CFStringCompare');
  late final _CFStringCompare = _CFStringComparePtr.asFunction<
      int Function(CFStringRef, CFStringRef, int)>();

  int CFStringFindWithOptionsAndLocale(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    CFLocaleRef locale,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptionsAndLocale(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      locale,
      result,
    );
  }

  late final _CFStringFindWithOptionsAndLocalePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFStringCompareFlags,
              CFLocaleRef,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptionsAndLocale');
  late final _CFStringFindWithOptionsAndLocale =
      _CFStringFindWithOptionsAndLocalePtr.asFunction<
          int Function(CFStringRef, CFStringRef, CFRange, int, CFLocaleRef,
              ffi.Pointer<CFRange>)>();

  int CFStringFindWithOptions(
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindWithOptions(
      theString,
      stringToFind,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindWithOptionsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFStringRef,
              CFRange,
              CFStringCompareFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindWithOptions');
  late final _CFStringFindWithOptions = _CFStringFindWithOptionsPtr.asFunction<
      int Function(
          CFStringRef, CFStringRef, CFRange, int, ffi.Pointer<CFRange>)>();

  CFArrayRef CFStringCreateArrayWithFindResults(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef stringToFind,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringCreateArrayWithFindResults(
      alloc,
      theString,
      stringToFind,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringCreateArrayWithFindResultsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef, CFRange,
              CFStringCompareFlags)>>('CFStringCreateArrayWithFindResults');
  late final _CFStringCreateArrayWithFindResults =
      _CFStringCreateArrayWithFindResultsPtr.asFunction<
          CFArrayRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFRange, int)>();

  CFRange CFStringFind(
    CFStringRef theString,
    CFStringRef stringToFind,
    int compareOptions,
  ) {
    return _CFStringFind(
      theString,
      stringToFind,
      compareOptions,
    );
  }

  late final _CFStringFindPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(
              CFStringRef, CFStringRef, CFStringCompareFlags)>>('CFStringFind');
  late final _CFStringFind = _CFStringFindPtr.asFunction<
      CFRange Function(CFStringRef, CFStringRef, int)>();

  int CFStringHasPrefix(
    CFStringRef theString,
    CFStringRef prefix,
  ) {
    return _CFStringHasPrefix(
      theString,
      prefix,
    );
  }

  late final _CFStringHasPrefixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasPrefix');
  late final _CFStringHasPrefix = _CFStringHasPrefixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  int CFStringHasSuffix(
    CFStringRef theString,
    CFStringRef suffix,
  ) {
    return _CFStringHasSuffix(
      theString,
      suffix,
    );
  }

  late final _CFStringHasSuffixPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFStringHasSuffix');
  late final _CFStringHasSuffix = _CFStringHasSuffixPtr.asFunction<
      int Function(CFStringRef, CFStringRef)>();

  CFRange CFStringGetRangeOfComposedCharactersAtIndex(
    CFStringRef theString,
    int theIndex,
  ) {
    return _CFStringGetRangeOfComposedCharactersAtIndex(
      theString,
      theIndex,
    );
  }

  late final _CFStringGetRangeOfComposedCharactersAtIndexPtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringRef, CFIndex)>>(
          'CFStringGetRangeOfComposedCharactersAtIndex');
  late final _CFStringGetRangeOfComposedCharactersAtIndex =
      _CFStringGetRangeOfComposedCharactersAtIndexPtr.asFunction<
          CFRange Function(CFStringRef, int)>();

  int CFStringFindCharacterFromSet(
    CFStringRef theString,
    CFCharacterSetRef theSet,
    CFRange rangeToSearch,
    int searchOptions,
    ffi.Pointer<CFRange> result,
  ) {
    return _CFStringFindCharacterFromSet(
      theString,
      theSet,
      rangeToSearch,
      searchOptions,
      result,
    );
  }

  late final _CFStringFindCharacterFromSetPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFStringRef,
              CFCharacterSetRef,
              CFRange,
              CFStringCompareFlags,
              ffi.Pointer<CFRange>)>>('CFStringFindCharacterFromSet');
  late final _CFStringFindCharacterFromSet =
      _CFStringFindCharacterFromSetPtr.asFunction<
          int Function(CFStringRef, CFCharacterSetRef, CFRange, int,
              ffi.Pointer<CFRange>)>();

  void CFStringGetLineBounds(
    CFStringRef theString,
    CFRange range,
    ffi.Pointer<CFIndex> lineBeginIndex,
    ffi.Pointer<CFIndex> lineEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetLineBounds(
      theString,
      range,
      lineBeginIndex,
      lineEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetLineBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetLineBounds');
  late final _CFStringGetLineBounds = _CFStringGetLineBoundsPtr.asFunction<
      void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
          ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  void CFStringGetParagraphBounds(
    CFStringRef string,
    CFRange range,
    ffi.Pointer<CFIndex> parBeginIndex,
    ffi.Pointer<CFIndex> parEndIndex,
    ffi.Pointer<CFIndex> contentsEndIndex,
  ) {
    return _CFStringGetParagraphBounds(
      string,
      range,
      parBeginIndex,
      parEndIndex,
      contentsEndIndex,
    );
  }

  late final _CFStringGetParagraphBoundsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFStringRef,
              CFRange,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>)>>('CFStringGetParagraphBounds');
  late final _CFStringGetParagraphBounds =
      _CFStringGetParagraphBoundsPtr.asFunction<
          void Function(CFStringRef, CFRange, ffi.Pointer<CFIndex>,
              ffi.Pointer<CFIndex>, ffi.Pointer<CFIndex>)>();

  int CFStringGetHyphenationLocationBeforeIndex(
    CFStringRef string,
    int location,
    CFRange limitRange,
    int options,
    CFLocaleRef locale,
    ffi.Pointer<UTF32Char> character,
  ) {
    return _CFStringGetHyphenationLocationBeforeIndex(
      string,
      location,
      limitRange,
      options,
      locale,
      character,
    );
  }

  late final _CFStringGetHyphenationLocationBeforeIndexPtr = _lookup<
          ffi.NativeFunction<
              CFIndex Function(CFStringRef, CFIndex, CFRange, CFOptionFlags,
                  CFLocaleRef, ffi.Pointer<UTF32Char>)>>(
      'CFStringGetHyphenationLocationBeforeIndex');
  late final _CFStringGetHyphenationLocationBeforeIndex =
      _CFStringGetHyphenationLocationBeforeIndexPtr.asFunction<
          int Function(CFStringRef, int, CFRange, int, CFLocaleRef,
              ffi.Pointer<UTF32Char>)>();

  int CFStringIsHyphenationAvailableForLocale(
    CFLocaleRef locale,
  ) {
    return _CFStringIsHyphenationAvailableForLocale(
      locale,
    );
  }

  late final _CFStringIsHyphenationAvailableForLocalePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFLocaleRef)>>(
          'CFStringIsHyphenationAvailableForLocale');
  late final _CFStringIsHyphenationAvailableForLocale =
      _CFStringIsHyphenationAvailableForLocalePtr.asFunction<
          int Function(CFLocaleRef)>();

  CFStringRef CFStringCreateByCombiningStrings(
    CFAllocatorRef alloc,
    CFArrayRef theArray,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateByCombiningStrings(
      alloc,
      theArray,
      separatorString,
    );
  }

  late final _CFStringCreateByCombiningStringsPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef,
              CFStringRef)>>('CFStringCreateByCombiningStrings');
  late final _CFStringCreateByCombiningStrings =
      _CFStringCreateByCombiningStringsPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFArrayRef, CFStringRef)>();

  CFArrayRef CFStringCreateArrayBySeparatingStrings(
    CFAllocatorRef alloc,
    CFStringRef theString,
    CFStringRef separatorString,
  ) {
    return _CFStringCreateArrayBySeparatingStrings(
      alloc,
      theString,
      separatorString,
    );
  }

  late final _CFStringCreateArrayBySeparatingStringsPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFStringCreateArrayBySeparatingStrings');
  late final _CFStringCreateArrayBySeparatingStrings =
      _CFStringCreateArrayBySeparatingStringsPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  int CFStringGetIntValue(
    CFStringRef str,
  ) {
    return _CFStringGetIntValue(
      str,
    );
  }

  late final _CFStringGetIntValuePtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFStringRef)>>(
          'CFStringGetIntValue');
  late final _CFStringGetIntValue =
      _CFStringGetIntValuePtr.asFunction<int Function(CFStringRef)>();

  double CFStringGetDoubleValue(
    CFStringRef str,
  ) {
    return _CFStringGetDoubleValue(
      str,
    );
  }

  late final _CFStringGetDoubleValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(CFStringRef)>>(
          'CFStringGetDoubleValue');
  late final _CFStringGetDoubleValue =
      _CFStringGetDoubleValuePtr.asFunction<double Function(CFStringRef)>();

  void CFStringAppend(
    CFMutableStringRef theString,
    CFStringRef appendedString,
  ) {
    return _CFStringAppend(
      theString,
      appendedString,
    );
  }

  late final _CFStringAppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringAppend');
  late final _CFStringAppend = _CFStringAppendPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringAppendCharacters(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int numChars,
  ) {
    return _CFStringAppendCharacters(
      theString,
      chars,
      numChars,
    );
  }

  late final _CFStringAppendCharactersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>,
              CFIndex)>>('CFStringAppendCharacters');
  late final _CFStringAppendCharacters =
      _CFStringAppendCharactersPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int)>();

  void CFStringAppendPascalString(
    CFMutableStringRef theString,
    ConstStr255Param pStr,
    int encoding,
  ) {
    return _CFStringAppendPascalString(
      theString,
      pStr,
      encoding,
    );
  }

  late final _CFStringAppendPascalStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ConstStr255Param,
              CFStringEncoding)>>('CFStringAppendPascalString');
  late final _CFStringAppendPascalString = _CFStringAppendPascalStringPtr
      .asFunction<void Function(CFMutableStringRef, ConstStr255Param, int)>();

  void CFStringAppendCString(
    CFMutableStringRef theString,
    ffi.Pointer<pkg_ffi.Char> cStr,
    int encoding,
  ) {
    return _CFStringAppendCString(
      theString,
      cStr,
      encoding,
    );
  }

  late final _CFStringAppendCStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>,
              CFStringEncoding)>>('CFStringAppendCString');
  late final _CFStringAppendCString = _CFStringAppendCStringPtr.asFunction<
      void Function(CFMutableStringRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  void CFStringAppendFormat(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
  ) {
    return _CFStringAppendFormat(
      theString,
      formatOptions,
      format,
    );
  }

  late final _CFStringAppendFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef,
              CFStringRef)>>('CFStringAppendFormat');
  late final _CFStringAppendFormat = _CFStringAppendFormatPtr.asFunction<
      void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef)>();

  void CFStringAppendFormatAndArguments(
    CFMutableStringRef theString,
    CFDictionaryRef formatOptions,
    CFStringRef format,
    va_list arguments,
  ) {
    return _CFStringAppendFormatAndArguments(
      theString,
      formatOptions,
      format,
      arguments,
    );
  }

  late final _CFStringAppendFormatAndArgumentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFDictionaryRef, CFStringRef,
              va_list)>>('CFStringAppendFormatAndArguments');
  late final _CFStringAppendFormatAndArguments =
      _CFStringAppendFormatAndArgumentsPtr.asFunction<
          void Function(
              CFMutableStringRef, CFDictionaryRef, CFStringRef, va_list)>();

  void CFStringInsert(
    CFMutableStringRef str,
    int idx,
    CFStringRef insertedStr,
  ) {
    return _CFStringInsert(
      str,
      idx,
      insertedStr,
    );
  }

  late final _CFStringInsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFIndex, CFStringRef)>>('CFStringInsert');
  late final _CFStringInsert = _CFStringInsertPtr.asFunction<
      void Function(CFMutableStringRef, int, CFStringRef)>();

  void CFStringDelete(
    CFMutableStringRef theString,
    CFRange range,
  ) {
    return _CFStringDelete(
      theString,
      range,
    );
  }

  late final _CFStringDeletePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableStringRef, CFRange)>>(
      'CFStringDelete');
  late final _CFStringDelete = _CFStringDeletePtr.asFunction<
      void Function(CFMutableStringRef, CFRange)>();

  void CFStringReplace(
    CFMutableStringRef theString,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFStringReplace(
      theString,
      range,
      replacement,
    );
  }

  late final _CFStringReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFRange, CFStringRef)>>('CFStringReplace');
  late final _CFStringReplace = _CFStringReplacePtr.asFunction<
      void Function(CFMutableStringRef, CFRange, CFStringRef)>();

  void CFStringReplaceAll(
    CFMutableStringRef theString,
    CFStringRef replacement,
  ) {
    return _CFStringReplaceAll(
      theString,
      replacement,
    );
  }

  late final _CFStringReplaceAllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFStringRef)>>('CFStringReplaceAll');
  late final _CFStringReplaceAll = _CFStringReplaceAllPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  int CFStringFindAndReplace(
    CFMutableStringRef theString,
    CFStringRef stringToFind,
    CFStringRef replacementString,
    CFRange rangeToSearch,
    int compareOptions,
  ) {
    return _CFStringFindAndReplace(
      theString,
      stringToFind,
      replacementString,
      rangeToSearch,
      compareOptions,
    );
  }

  late final _CFStringFindAndReplacePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFMutableStringRef, CFStringRef, CFStringRef,
              CFRange, CFStringCompareFlags)>>('CFStringFindAndReplace');
  late final _CFStringFindAndReplace = _CFStringFindAndReplacePtr.asFunction<
      int Function(
          CFMutableStringRef, CFStringRef, CFStringRef, CFRange, int)>();

  void CFStringSetExternalCharactersNoCopy(
    CFMutableStringRef theString,
    ffi.Pointer<UniChar> chars,
    int length,
    int capacity,
  ) {
    return _CFStringSetExternalCharactersNoCopy(
      theString,
      chars,
      length,
      capacity,
    );
  }

  late final _CFStringSetExternalCharactersNoCopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, ffi.Pointer<UniChar>, CFIndex,
              CFIndex)>>('CFStringSetExternalCharactersNoCopy');
  late final _CFStringSetExternalCharactersNoCopy =
      _CFStringSetExternalCharactersNoCopyPtr.asFunction<
          void Function(CFMutableStringRef, ffi.Pointer<UniChar>, int, int)>();

  void CFStringPad(
    CFMutableStringRef theString,
    CFStringRef padString,
    int length,
    int indexIntoPad,
  ) {
    return _CFStringPad(
      theString,
      padString,
      length,
      indexIntoPad,
    );
  }

  late final _CFStringPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef, CFIndex,
              CFIndex)>>('CFStringPad');
  late final _CFStringPad = _CFStringPadPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef, int, int)>();

  void CFStringTrim(
    CFMutableStringRef theString,
    CFStringRef trimString,
  ) {
    return _CFStringTrim(
      theString,
      trimString,
    );
  }

  late final _CFStringTrimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringRef)>>('CFStringTrim');
  late final _CFStringTrim = _CFStringTrimPtr.asFunction<
      void Function(CFMutableStringRef, CFStringRef)>();

  void CFStringTrimWhitespace(
    CFMutableStringRef theString,
  ) {
    return _CFStringTrimWhitespace(
      theString,
    );
  }

  late final _CFStringTrimWhitespacePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableStringRef)>>(
          'CFStringTrimWhitespace');
  late final _CFStringTrimWhitespace = _CFStringTrimWhitespacePtr.asFunction<
      void Function(CFMutableStringRef)>();

  void CFStringLowercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringLowercase(
      theString,
      locale,
    );
  }

  late final _CFStringLowercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringLowercase');
  late final _CFStringLowercase = _CFStringLowercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringUppercase(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringUppercase(
      theString,
      locale,
    );
  }

  late final _CFStringUppercasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringUppercase');
  late final _CFStringUppercase = _CFStringUppercasePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringCapitalize(
    CFMutableStringRef theString,
    CFLocaleRef locale,
  ) {
    return _CFStringCapitalize(
      theString,
      locale,
    );
  }

  late final _CFStringCapitalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableStringRef, CFLocaleRef)>>('CFStringCapitalize');
  late final _CFStringCapitalize = _CFStringCapitalizePtr.asFunction<
      void Function(CFMutableStringRef, CFLocaleRef)>();

  void CFStringNormalize(
    CFMutableStringRef theString,
    int theForm,
  ) {
    return _CFStringNormalize(
      theString,
      theForm,
    );
  }

  late final _CFStringNormalizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef,
              CFStringNormalizationForm)>>('CFStringNormalize');
  late final _CFStringNormalize = _CFStringNormalizePtr.asFunction<
      void Function(CFMutableStringRef, int)>();

  void CFStringFold(
    CFMutableStringRef theString,
    int theFlags,
    CFLocaleRef theLocale,
  ) {
    return _CFStringFold(
      theString,
      theFlags,
      theLocale,
    );
  }

  late final _CFStringFoldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableStringRef, CFStringCompareFlags,
              CFLocaleRef)>>('CFStringFold');
  late final _CFStringFold = _CFStringFoldPtr.asFunction<
      void Function(CFMutableStringRef, int, CFLocaleRef)>();

  int CFStringTransform(
    CFMutableStringRef string,
    ffi.Pointer<CFRange> range,
    CFStringRef transform,
    int reverse,
  ) {
    return _CFStringTransform(
      string,
      range,
      transform,
      reverse,
    );
  }

  late final _CFStringTransformPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFMutableStringRef, ffi.Pointer<CFRange>,
              CFStringRef, Boolean)>>('CFStringTransform');
  late final _CFStringTransform = _CFStringTransformPtr.asFunction<
      int Function(
          CFMutableStringRef, ffi.Pointer<CFRange>, CFStringRef, int)>();

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripCombiningMarks =
      _lookup<CFStringRef>('kCFStringTransformStripCombiningMarks');

  CFStringRef get kCFStringTransformStripCombiningMarks =>
      _kCFStringTransformStripCombiningMarks.value;

  set kCFStringTransformStripCombiningMarks(CFStringRef value) =>
      _kCFStringTransformStripCombiningMarks.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToLatin =
      _lookup<CFStringRef>('kCFStringTransformToLatin');

  CFStringRef get kCFStringTransformToLatin => _kCFStringTransformToLatin.value;

  set kCFStringTransformToLatin(CFStringRef value) =>
      _kCFStringTransformToLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformFullwidthHalfwidth =
      _lookup<CFStringRef>('kCFStringTransformFullwidthHalfwidth');

  CFStringRef get kCFStringTransformFullwidthHalfwidth =>
      _kCFStringTransformFullwidthHalfwidth.value;

  set kCFStringTransformFullwidthHalfwidth(CFStringRef value) =>
      _kCFStringTransformFullwidthHalfwidth.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinKatakana =
      _lookup<CFStringRef>('kCFStringTransformLatinKatakana');

  CFStringRef get kCFStringTransformLatinKatakana =>
      _kCFStringTransformLatinKatakana.value;

  set kCFStringTransformLatinKatakana(CFStringRef value) =>
      _kCFStringTransformLatinKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHiragana =
      _lookup<CFStringRef>('kCFStringTransformLatinHiragana');

  CFStringRef get kCFStringTransformLatinHiragana =>
      _kCFStringTransformLatinHiragana.value;

  set kCFStringTransformLatinHiragana(CFStringRef value) =>
      _kCFStringTransformLatinHiragana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformHiraganaKatakana =
      _lookup<CFStringRef>('kCFStringTransformHiraganaKatakana');

  CFStringRef get kCFStringTransformHiraganaKatakana =>
      _kCFStringTransformHiraganaKatakana.value;

  set kCFStringTransformHiraganaKatakana(CFStringRef value) =>
      _kCFStringTransformHiraganaKatakana.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformMandarinLatin =
      _lookup<CFStringRef>('kCFStringTransformMandarinLatin');

  CFStringRef get kCFStringTransformMandarinLatin =>
      _kCFStringTransformMandarinLatin.value;

  set kCFStringTransformMandarinLatin(CFStringRef value) =>
      _kCFStringTransformMandarinLatin.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHangul =
      _lookup<CFStringRef>('kCFStringTransformLatinHangul');

  CFStringRef get kCFStringTransformLatinHangul =>
      _kCFStringTransformLatinHangul.value;

  set kCFStringTransformLatinHangul(CFStringRef value) =>
      _kCFStringTransformLatinHangul.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinArabic =
      _lookup<CFStringRef>('kCFStringTransformLatinArabic');

  CFStringRef get kCFStringTransformLatinArabic =>
      _kCFStringTransformLatinArabic.value;

  set kCFStringTransformLatinArabic(CFStringRef value) =>
      _kCFStringTransformLatinArabic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinHebrew =
      _lookup<CFStringRef>('kCFStringTransformLatinHebrew');

  CFStringRef get kCFStringTransformLatinHebrew =>
      _kCFStringTransformLatinHebrew.value;

  set kCFStringTransformLatinHebrew(CFStringRef value) =>
      _kCFStringTransformLatinHebrew.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinThai =
      _lookup<CFStringRef>('kCFStringTransformLatinThai');

  CFStringRef get kCFStringTransformLatinThai =>
      _kCFStringTransformLatinThai.value;

  set kCFStringTransformLatinThai(CFStringRef value) =>
      _kCFStringTransformLatinThai.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinCyrillic =
      _lookup<CFStringRef>('kCFStringTransformLatinCyrillic');

  CFStringRef get kCFStringTransformLatinCyrillic =>
      _kCFStringTransformLatinCyrillic.value;

  set kCFStringTransformLatinCyrillic(CFStringRef value) =>
      _kCFStringTransformLatinCyrillic.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformLatinGreek =
      _lookup<CFStringRef>('kCFStringTransformLatinGreek');

  CFStringRef get kCFStringTransformLatinGreek =>
      _kCFStringTransformLatinGreek.value;

  set kCFStringTransformLatinGreek(CFStringRef value) =>
      _kCFStringTransformLatinGreek.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToXMLHex =
      _lookup<CFStringRef>('kCFStringTransformToXMLHex');

  CFStringRef get kCFStringTransformToXMLHex =>
      _kCFStringTransformToXMLHex.value;

  set kCFStringTransformToXMLHex(CFStringRef value) =>
      _kCFStringTransformToXMLHex.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformToUnicodeName =
      _lookup<CFStringRef>('kCFStringTransformToUnicodeName');

  CFStringRef get kCFStringTransformToUnicodeName =>
      _kCFStringTransformToUnicodeName.value;

  set kCFStringTransformToUnicodeName(CFStringRef value) =>
      _kCFStringTransformToUnicodeName.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStringTransformStripDiacritics =
      _lookup<CFStringRef>('kCFStringTransformStripDiacritics');

  CFStringRef get kCFStringTransformStripDiacritics =>
      _kCFStringTransformStripDiacritics.value;

  set kCFStringTransformStripDiacritics(CFStringRef value) =>
      _kCFStringTransformStripDiacritics.value = value;

  int CFStringIsEncodingAvailable(
    int encoding,
  ) {
    return _CFStringIsEncodingAvailable(
      encoding,
    );
  }

  late final _CFStringIsEncodingAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringEncoding)>>(
          'CFStringIsEncodingAvailable');
  late final _CFStringIsEncodingAvailable =
      _CFStringIsEncodingAvailablePtr.asFunction<int Function(int)>();

  ffi.Pointer<CFStringEncoding> CFStringGetListOfAvailableEncodings() {
    return _CFStringGetListOfAvailableEncodings();
  }

  late final _CFStringGetListOfAvailableEncodingsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CFStringEncoding> Function()>>(
          'CFStringGetListOfAvailableEncodings');
  late final _CFStringGetListOfAvailableEncodings =
      _CFStringGetListOfAvailableEncodingsPtr.asFunction<
          ffi.Pointer<CFStringEncoding> Function()>();

  CFStringRef CFStringGetNameOfEncoding(
    int encoding,
  ) {
    return _CFStringGetNameOfEncoding(
      encoding,
    );
  }

  late final _CFStringGetNameOfEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringGetNameOfEncoding');
  late final _CFStringGetNameOfEncoding =
      _CFStringGetNameOfEncodingPtr.asFunction<CFStringRef Function(int)>();

  int CFStringConvertEncodingToNSStringEncoding(
    int encoding,
  ) {
    return _CFStringConvertEncodingToNSStringEncoding(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToNSStringEncodingPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.UnsignedLong Function(CFStringEncoding)>>(
      'CFStringConvertEncodingToNSStringEncoding');
  late final _CFStringConvertEncodingToNSStringEncoding =
      _CFStringConvertEncodingToNSStringEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertNSStringEncodingToEncoding(
    int encoding,
  ) {
    return _CFStringConvertNSStringEncodingToEncoding(
      encoding,
    );
  }

  late final _CFStringConvertNSStringEncodingToEncodingPtr = _lookup<
          ffi.NativeFunction<CFStringEncoding Function(pkg_ffi.UnsignedLong)>>(
      'CFStringConvertNSStringEncodingToEncoding');
  late final _CFStringConvertNSStringEncodingToEncoding =
      _CFStringConvertNSStringEncodingToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertEncodingToWindowsCodepage(
    int encoding,
  ) {
    return _CFStringConvertEncodingToWindowsCodepage(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToWindowsCodepagePtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToWindowsCodepage');
  late final _CFStringConvertEncodingToWindowsCodepage =
      _CFStringConvertEncodingToWindowsCodepagePtr.asFunction<
          int Function(int)>();

  int CFStringConvertWindowsCodepageToEncoding(
    int codepage,
  ) {
    return _CFStringConvertWindowsCodepageToEncoding(
      codepage,
    );
  }

  late final _CFStringConvertWindowsCodepageToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(UInt32)>>(
          'CFStringConvertWindowsCodepageToEncoding');
  late final _CFStringConvertWindowsCodepageToEncoding =
      _CFStringConvertWindowsCodepageToEncodingPtr.asFunction<
          int Function(int)>();

  int CFStringConvertIANACharSetNameToEncoding(
    CFStringRef theString,
  ) {
    return _CFStringConvertIANACharSetNameToEncoding(
      theString,
    );
  }

  late final _CFStringConvertIANACharSetNameToEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringRef)>>(
          'CFStringConvertIANACharSetNameToEncoding');
  late final _CFStringConvertIANACharSetNameToEncoding =
      _CFStringConvertIANACharSetNameToEncodingPtr.asFunction<
          int Function(CFStringRef)>();

  CFStringRef CFStringConvertEncodingToIANACharSetName(
    int encoding,
  ) {
    return _CFStringConvertEncodingToIANACharSetName(
      encoding,
    );
  }

  late final _CFStringConvertEncodingToIANACharSetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringEncoding)>>(
          'CFStringConvertEncodingToIANACharSetName');
  late final _CFStringConvertEncodingToIANACharSetName =
      _CFStringConvertEncodingToIANACharSetNamePtr.asFunction<
          CFStringRef Function(int)>();

  int CFStringGetMostCompatibleMacStringEncoding(
    int encoding,
  ) {
    return _CFStringGetMostCompatibleMacStringEncoding(
      encoding,
    );
  }

  late final _CFStringGetMostCompatibleMacStringEncodingPtr =
      _lookup<ffi.NativeFunction<CFStringEncoding Function(CFStringEncoding)>>(
          'CFStringGetMostCompatibleMacStringEncoding');
  late final _CFStringGetMostCompatibleMacStringEncoding =
      _CFStringGetMostCompatibleMacStringEncodingPtr.asFunction<
          int Function(int)>();

  void CFShow(
    CFTypeRef obj,
  ) {
    return _CFShow(
      obj,
    );
  }

  late final _CFShowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTypeRef)>>('CFShow');
  late final _CFShow = _CFShowPtr.asFunction<void Function(CFTypeRef)>();

  void CFShowStr(
    CFStringRef str,
  ) {
    return _CFShowStr(
      str,
    );
  }

  late final _CFShowStrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef)>>('CFShowStr');
  late final _CFShowStr =
      _CFShowStrPtr.asFunction<void Function(CFStringRef)>();

  CFStringRef __CFStringMakeConstantString(
    ffi.Pointer<pkg_ffi.Char> cStr,
  ) {
    return ___CFStringMakeConstantString(
      cStr,
    );
  }

  late final ___CFStringMakeConstantStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>>(
      '__CFStringMakeConstantString');
  late final ___CFStringMakeConstantString = ___CFStringMakeConstantStringPtr
      .asFunction<CFStringRef Function(ffi.Pointer<pkg_ffi.Char>)>();

  int CFTimeZoneGetTypeID() {
    return _CFTimeZoneGetTypeID();
  }

  late final _CFTimeZoneGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTimeZoneGetTypeID');
  late final _CFTimeZoneGetTypeID =
      _CFTimeZoneGetTypeIDPtr.asFunction<int Function()>();

  CFTimeZoneRef CFTimeZoneCopySystem() {
    return _CFTimeZoneCopySystem();
  }

  late final _CFTimeZoneCopySystemPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopySystem');
  late final _CFTimeZoneCopySystem =
      _CFTimeZoneCopySystemPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneResetSystem() {
    return _CFTimeZoneResetSystem();
  }

  late final _CFTimeZoneResetSystemPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFTimeZoneResetSystem');
  late final _CFTimeZoneResetSystem =
      _CFTimeZoneResetSystemPtr.asFunction<void Function()>();

  CFTimeZoneRef CFTimeZoneCopyDefault() {
    return _CFTimeZoneCopyDefault();
  }

  late final _CFTimeZoneCopyDefaultPtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function()>>(
          'CFTimeZoneCopyDefault');
  late final _CFTimeZoneCopyDefault =
      _CFTimeZoneCopyDefaultPtr.asFunction<CFTimeZoneRef Function()>();

  void CFTimeZoneSetDefault(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneSetDefault(
      tz,
    );
  }

  late final _CFTimeZoneSetDefaultPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTimeZoneRef)>>(
          'CFTimeZoneSetDefault');
  late final _CFTimeZoneSetDefault =
      _CFTimeZoneSetDefaultPtr.asFunction<void Function(CFTimeZoneRef)>();

  CFArrayRef CFTimeZoneCopyKnownNames() {
    return _CFTimeZoneCopyKnownNames();
  }

  late final _CFTimeZoneCopyKnownNamesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFTimeZoneCopyKnownNames');
  late final _CFTimeZoneCopyKnownNames =
      _CFTimeZoneCopyKnownNamesPtr.asFunction<CFArrayRef Function()>();

  CFDictionaryRef CFTimeZoneCopyAbbreviationDictionary() {
    return _CFTimeZoneCopyAbbreviationDictionary();
  }

  late final _CFTimeZoneCopyAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function()>>(
          'CFTimeZoneCopyAbbreviationDictionary');
  late final _CFTimeZoneCopyAbbreviationDictionary =
      _CFTimeZoneCopyAbbreviationDictionaryPtr.asFunction<
          CFDictionaryRef Function()>();

  void CFTimeZoneSetAbbreviationDictionary(
    CFDictionaryRef dict,
  ) {
    return _CFTimeZoneSetAbbreviationDictionary(
      dict,
    );
  }

  late final _CFTimeZoneSetAbbreviationDictionaryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFDictionaryRef)>>(
          'CFTimeZoneSetAbbreviationDictionary');
  late final _CFTimeZoneSetAbbreviationDictionary =
      _CFTimeZoneSetAbbreviationDictionaryPtr.asFunction<
          void Function(CFDictionaryRef)>();

  CFTimeZoneRef CFTimeZoneCreate(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFDataRef data,
  ) {
    return _CFTimeZoneCreate(
      allocator,
      name,
      data,
    );
  }

  late final _CFTimeZoneCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(
              CFAllocatorRef, CFStringRef, CFDataRef)>>('CFTimeZoneCreate');
  late final _CFTimeZoneCreate = _CFTimeZoneCreatePtr.asFunction<
      CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(
    CFAllocatorRef allocator,
    double ti,
  ) {
    return _CFTimeZoneCreateWithTimeIntervalFromGMT(
      allocator,
      ti,
    );
  }

  late final _CFTimeZoneCreateWithTimeIntervalFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef,
              CFTimeInterval)>>('CFTimeZoneCreateWithTimeIntervalFromGMT');
  late final _CFTimeZoneCreateWithTimeIntervalFromGMT =
      _CFTimeZoneCreateWithTimeIntervalFromGMTPtr.asFunction<
          CFTimeZoneRef Function(CFAllocatorRef, double)>();

  CFTimeZoneRef CFTimeZoneCreateWithName(
    CFAllocatorRef allocator,
    CFStringRef name,
    int tryAbbrev,
  ) {
    return _CFTimeZoneCreateWithName(
      allocator,
      name,
      tryAbbrev,
    );
  }

  late final _CFTimeZoneCreateWithNamePtr = _lookup<
      ffi.NativeFunction<
          CFTimeZoneRef Function(CFAllocatorRef, CFStringRef,
              Boolean)>>('CFTimeZoneCreateWithName');
  late final _CFTimeZoneCreateWithName = _CFTimeZoneCreateWithNamePtr
      .asFunction<CFTimeZoneRef Function(CFAllocatorRef, CFStringRef, int)>();

  CFStringRef CFTimeZoneGetName(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetName(
      tz,
    );
  }

  late final _CFTimeZoneGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetName');
  late final _CFTimeZoneGetName =
      _CFTimeZoneGetNamePtr.asFunction<CFStringRef Function(CFTimeZoneRef)>();

  CFDataRef CFTimeZoneGetData(
    CFTimeZoneRef tz,
  ) {
    return _CFTimeZoneGetData(
      tz,
    );
  }

  late final _CFTimeZoneGetDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFTimeZoneRef)>>(
          'CFTimeZoneGetData');
  late final _CFTimeZoneGetData =
      _CFTimeZoneGetDataPtr.asFunction<CFDataRef Function(CFTimeZoneRef)>();

  double CFTimeZoneGetSecondsFromGMT(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetSecondsFromGMT(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetSecondsFromGMTPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneGetSecondsFromGMT');
  late final _CFTimeZoneGetSecondsFromGMT = _CFTimeZoneGetSecondsFromGMTPtr
      .asFunction<double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyAbbreviation(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneCopyAbbreviation(
      tz,
      at,
    );
  }

  late final _CFTimeZoneCopyAbbreviationPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFTimeZoneRef, CFAbsoluteTime)>>('CFTimeZoneCopyAbbreviation');
  late final _CFTimeZoneCopyAbbreviation = _CFTimeZoneCopyAbbreviationPtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, double)>();

  int CFTimeZoneIsDaylightSavingTime(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneIsDaylightSavingTime(
      tz,
      at,
    );
  }

  late final _CFTimeZoneIsDaylightSavingTimePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneIsDaylightSavingTime');
  late final _CFTimeZoneIsDaylightSavingTime =
      _CFTimeZoneIsDaylightSavingTimePtr.asFunction<
          int Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetDaylightSavingTimeOffset(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetDaylightSavingTimeOffset(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetDaylightSavingTimeOffsetPtr = _lookup<
      ffi.NativeFunction<
          CFTimeInterval Function(CFTimeZoneRef,
              CFAbsoluteTime)>>('CFTimeZoneGetDaylightSavingTimeOffset');
  late final _CFTimeZoneGetDaylightSavingTimeOffset =
      _CFTimeZoneGetDaylightSavingTimeOffsetPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  double CFTimeZoneGetNextDaylightSavingTimeTransition(
    CFTimeZoneRef tz,
    double at,
  ) {
    return _CFTimeZoneGetNextDaylightSavingTimeTransition(
      tz,
      at,
    );
  }

  late final _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr = _lookup<
          ffi.NativeFunction<
              CFAbsoluteTime Function(CFTimeZoneRef, CFAbsoluteTime)>>(
      'CFTimeZoneGetNextDaylightSavingTimeTransition');
  late final _CFTimeZoneGetNextDaylightSavingTimeTransition =
      _CFTimeZoneGetNextDaylightSavingTimeTransitionPtr.asFunction<
          double Function(CFTimeZoneRef, double)>();

  CFStringRef CFTimeZoneCopyLocalizedName(
    CFTimeZoneRef tz,
    int style,
    CFLocaleRef locale,
  ) {
    return _CFTimeZoneCopyLocalizedName(
      tz,
      style,
      locale,
    );
  }

  late final _CFTimeZoneCopyLocalizedNamePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFTimeZoneRef, CFTimeZoneNameStyle,
              CFLocaleRef)>>('CFTimeZoneCopyLocalizedName');
  late final _CFTimeZoneCopyLocalizedName = _CFTimeZoneCopyLocalizedNamePtr
      .asFunction<CFStringRef Function(CFTimeZoneRef, int, CFLocaleRef)>();

  late final ffi.Pointer<CFNotificationName>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification =
      _lookup<CFNotificationName>(
          'kCFTimeZoneSystemTimeZoneDidChangeNotification');

  CFNotificationName get kCFTimeZoneSystemTimeZoneDidChangeNotification =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value;

  set kCFTimeZoneSystemTimeZoneDidChangeNotification(
          CFNotificationName value) =>
      _kCFTimeZoneSystemTimeZoneDidChangeNotification.value = value;

  int CFCalendarGetTypeID() {
    return _CFCalendarGetTypeID();
  }

  late final _CFCalendarGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFCalendarGetTypeID');
  late final _CFCalendarGetTypeID =
      _CFCalendarGetTypeIDPtr.asFunction<int Function()>();

  CFCalendarRef CFCalendarCopyCurrent() {
    return _CFCalendarCopyCurrent();
  }

  late final _CFCalendarCopyCurrentPtr =
      _lookup<ffi.NativeFunction<CFCalendarRef Function()>>(
          'CFCalendarCopyCurrent');
  late final _CFCalendarCopyCurrent =
      _CFCalendarCopyCurrentPtr.asFunction<CFCalendarRef Function()>();

  CFCalendarRef CFCalendarCreateWithIdentifier(
    CFAllocatorRef allocator,
    CFCalendarIdentifier identifier,
  ) {
    return _CFCalendarCreateWithIdentifier(
      allocator,
      identifier,
    );
  }

  late final _CFCalendarCreateWithIdentifierPtr = _lookup<
      ffi.NativeFunction<
          CFCalendarRef Function(CFAllocatorRef,
              CFCalendarIdentifier)>>('CFCalendarCreateWithIdentifier');
  late final _CFCalendarCreateWithIdentifier =
      _CFCalendarCreateWithIdentifierPtr.asFunction<
          CFCalendarRef Function(CFAllocatorRef, CFCalendarIdentifier)>();

  CFCalendarIdentifier CFCalendarGetIdentifier(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetIdentifier(
      calendar,
    );
  }

  late final _CFCalendarGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFCalendarIdentifier Function(CFCalendarRef)>>(
          'CFCalendarGetIdentifier');
  late final _CFCalendarGetIdentifier = _CFCalendarGetIdentifierPtr.asFunction<
      CFCalendarIdentifier Function(CFCalendarRef)>();

  CFLocaleRef CFCalendarCopyLocale(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyLocale(
      calendar,
    );
  }

  late final _CFCalendarCopyLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFCalendarRef)>>(
          'CFCalendarCopyLocale');
  late final _CFCalendarCopyLocale = _CFCalendarCopyLocalePtr.asFunction<
      CFLocaleRef Function(CFCalendarRef)>();

  void CFCalendarSetLocale(
    CFCalendarRef calendar,
    CFLocaleRef locale,
  ) {
    return _CFCalendarSetLocale(
      calendar,
      locale,
    );
  }

  late final _CFCalendarSetLocalePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFLocaleRef)>>(
      'CFCalendarSetLocale');
  late final _CFCalendarSetLocale = _CFCalendarSetLocalePtr.asFunction<
      void Function(CFCalendarRef, CFLocaleRef)>();

  CFTimeZoneRef CFCalendarCopyTimeZone(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarCopyTimeZone(
      calendar,
    );
  }

  late final _CFCalendarCopyTimeZonePtr =
      _lookup<ffi.NativeFunction<CFTimeZoneRef Function(CFCalendarRef)>>(
          'CFCalendarCopyTimeZone');
  late final _CFCalendarCopyTimeZone = _CFCalendarCopyTimeZonePtr.asFunction<
      CFTimeZoneRef Function(CFCalendarRef)>();

  void CFCalendarSetTimeZone(
    CFCalendarRef calendar,
    CFTimeZoneRef tz,
  ) {
    return _CFCalendarSetTimeZone(
      calendar,
      tz,
    );
  }

  late final _CFCalendarSetTimeZonePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFTimeZoneRef)>>(
      'CFCalendarSetTimeZone');
  late final _CFCalendarSetTimeZone = _CFCalendarSetTimeZonePtr.asFunction<
      void Function(CFCalendarRef, CFTimeZoneRef)>();

  int CFCalendarGetFirstWeekday(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetFirstWeekday(
      calendar,
    );
  }

  late final _CFCalendarGetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetFirstWeekday');
  late final _CFCalendarGetFirstWeekday =
      _CFCalendarGetFirstWeekdayPtr.asFunction<int Function(CFCalendarRef)>();

  void CFCalendarSetFirstWeekday(
    CFCalendarRef calendar,
    int wkdy,
  ) {
    return _CFCalendarSetFirstWeekday(
      calendar,
      wkdy,
    );
  }

  late final _CFCalendarSetFirstWeekdayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetFirstWeekday');
  late final _CFCalendarSetFirstWeekday = _CFCalendarSetFirstWeekdayPtr
      .asFunction<void Function(CFCalendarRef, int)>();

  int CFCalendarGetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
  ) {
    return _CFCalendarGetMinimumDaysInFirstWeek(
      calendar,
    );
  }

  late final _CFCalendarGetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFCalendarRef)>>(
          'CFCalendarGetMinimumDaysInFirstWeek');
  late final _CFCalendarGetMinimumDaysInFirstWeek =
      _CFCalendarGetMinimumDaysInFirstWeekPtr.asFunction<
          int Function(CFCalendarRef)>();

  void CFCalendarSetMinimumDaysInFirstWeek(
    CFCalendarRef calendar,
    int mwd,
  ) {
    return _CFCalendarSetMinimumDaysInFirstWeek(
      calendar,
      mwd,
    );
  }

  late final _CFCalendarSetMinimumDaysInFirstWeekPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFCalendarRef, CFIndex)>>(
          'CFCalendarSetMinimumDaysInFirstWeek');
  late final _CFCalendarSetMinimumDaysInFirstWeek =
      _CFCalendarSetMinimumDaysInFirstWeekPtr.asFunction<
          void Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMinimumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMinimumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMinimumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFCalendarUnit)>>(
      'CFCalendarGetMinimumRangeOfUnit');
  late final _CFCalendarGetMinimumRangeOfUnit =
      _CFCalendarGetMinimumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetMaximumRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
  ) {
    return _CFCalendarGetMaximumRangeOfUnit(
      calendar,
      unit,
    );
  }

  late final _CFCalendarGetMaximumRangeOfUnitPtr = _lookup<
          ffi.NativeFunction<CFRange Function(CFCalendarRef, CFCalendarUnit)>>(
      'CFCalendarGetMaximumRangeOfUnit');
  late final _CFCalendarGetMaximumRangeOfUnit =
      _CFCalendarGetMaximumRangeOfUnitPtr.asFunction<
          CFRange Function(CFCalendarRef, int)>();

  CFRange CFCalendarGetRangeOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetRangeOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFCalendarRef, CFCalendarUnit, CFCalendarUnit,
              CFAbsoluteTime)>>('CFCalendarGetRangeOfUnit');
  late final _CFCalendarGetRangeOfUnit = _CFCalendarGetRangeOfUnitPtr
      .asFunction<CFRange Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetOrdinalityOfUnit(
    CFCalendarRef calendar,
    int smallerUnit,
    int biggerUnit,
    double at,
  ) {
    return _CFCalendarGetOrdinalityOfUnit(
      calendar,
      smallerUnit,
      biggerUnit,
      at,
    );
  }

  late final _CFCalendarGetOrdinalityOfUnitPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFCalendarRef, CFCalendarUnit, CFCalendarUnit,
              CFAbsoluteTime)>>('CFCalendarGetOrdinalityOfUnit');
  late final _CFCalendarGetOrdinalityOfUnit = _CFCalendarGetOrdinalityOfUnitPtr
      .asFunction<int Function(CFCalendarRef, int, int, double)>();

  int CFCalendarGetTimeRangeOfUnit(
    CFCalendarRef calendar,
    int unit,
    double at,
    ffi.Pointer<CFAbsoluteTime> startp,
    ffi.Pointer<CFTimeInterval> tip,
  ) {
    return _CFCalendarGetTimeRangeOfUnit(
      calendar,
      unit,
      at,
      startp,
      tip,
    );
  }

  late final _CFCalendarGetTimeRangeOfUnitPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFCalendarUnit,
              CFAbsoluteTime,
              ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>>('CFCalendarGetTimeRangeOfUnit');
  late final _CFCalendarGetTimeRangeOfUnit =
      _CFCalendarGetTimeRangeOfUnitPtr.asFunction<
          int Function(CFCalendarRef, int, double, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<CFTimeInterval>)>();

  int CFCalendarComposeAbsoluteTime(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarComposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarComposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarComposeAbsoluteTime');
  late final _CFCalendarComposeAbsoluteTime =
      _CFCalendarComposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>,
              ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarDecomposeAbsoluteTime(
    CFCalendarRef calendar,
    double at,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarDecomposeAbsoluteTime(
      calendar,
      at,
      componentDesc,
    );
  }

  late final _CFCalendarDecomposeAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFCalendarRef, CFAbsoluteTime,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarDecomposeAbsoluteTime');
  late final _CFCalendarDecomposeAbsoluteTime =
      _CFCalendarDecomposeAbsoluteTimePtr.asFunction<
          int Function(CFCalendarRef, double, ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarAddComponents(
    CFCalendarRef calendar,
    ffi.Pointer<CFAbsoluteTime> at,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarAddComponents(
      calendar,
      at,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarAddComponentsPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              ffi.Pointer<CFAbsoluteTime>,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarAddComponents');
  late final _CFCalendarAddComponents = _CFCalendarAddComponentsPtr.asFunction<
      int Function(CFCalendarRef, ffi.Pointer<CFAbsoluteTime>, int,
          ffi.Pointer<pkg_ffi.Char>)>();

  int CFCalendarGetComponentDifference(
    CFCalendarRef calendar,
    double startingAT,
    double resultAT,
    int options,
    ffi.Pointer<pkg_ffi.Char> componentDesc,
  ) {
    return _CFCalendarGetComponentDifference(
      calendar,
      startingAT,
      resultAT,
      options,
      componentDesc,
    );
  }

  late final _CFCalendarGetComponentDifferencePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFCalendarRef,
              CFAbsoluteTime,
              CFAbsoluteTime,
              CFOptionFlags,
              ffi.Pointer<pkg_ffi.Char>)>>('CFCalendarGetComponentDifference');
  late final _CFCalendarGetComponentDifference =
      _CFCalendarGetComponentDifferencePtr.asFunction<
          int Function(
              CFCalendarRef, double, double, int, ffi.Pointer<pkg_ffi.Char>)>();

  CFStringRef CFDateFormatterCreateDateFormatFromTemplate(
    CFAllocatorRef allocator,
    CFStringRef tmplate,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFDateFormatterCreateDateFormatFromTemplate(
      allocator,
      tmplate,
      options,
      locale,
    );
  }

  late final _CFDateFormatterCreateDateFormatFromTemplatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFOptionFlags,
              CFLocaleRef)>>('CFDateFormatterCreateDateFormatFromTemplate');
  late final _CFDateFormatterCreateDateFormatFromTemplate =
      _CFDateFormatterCreateDateFormatFromTemplatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, int, CFLocaleRef)>();

  int CFDateFormatterGetTypeID() {
    return _CFDateFormatterGetTypeID();
  }

  late final _CFDateFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFDateFormatterGetTypeID');
  late final _CFDateFormatterGetTypeID =
      _CFDateFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFDateFormatterRef CFDateFormatterCreateISO8601Formatter(
    CFAllocatorRef allocator,
    int formatOptions,
  ) {
    return _CFDateFormatterCreateISO8601Formatter(
      allocator,
      formatOptions,
    );
  }

  late final _CFDateFormatterCreateISO8601FormatterPtr = _lookup<
          ffi.NativeFunction<
              CFDateFormatterRef Function(
                  CFAllocatorRef, CFISO8601DateFormatOptions)>>(
      'CFDateFormatterCreateISO8601Formatter');
  late final _CFDateFormatterCreateISO8601Formatter =
      _CFDateFormatterCreateISO8601FormatterPtr.asFunction<
          CFDateFormatterRef Function(CFAllocatorRef, int)>();

  CFDateFormatterRef CFDateFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int dateStyle,
    int timeStyle,
  ) {
    return _CFDateFormatterCreate(
      allocator,
      locale,
      dateStyle,
      timeStyle,
    );
  }

  late final _CFDateFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterRef Function(
              CFAllocatorRef,
              CFLocaleRef,
              CFDateFormatterStyle,
              CFDateFormatterStyle)>>('CFDateFormatterCreate');
  late final _CFDateFormatterCreate = _CFDateFormatterCreatePtr.asFunction<
      CFDateFormatterRef Function(CFAllocatorRef, CFLocaleRef, int, int)>();

  CFLocaleRef CFDateFormatterGetLocale(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetLocale(
      formatter,
    );
  }

  late final _CFDateFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetLocale');
  late final _CFDateFormatterGetLocale = _CFDateFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFDateFormatterRef)>();

  int CFDateFormatterGetDateStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetDateStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetDateStylePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterStyle Function(
              CFDateFormatterRef)>>('CFDateFormatterGetDateStyle');
  late final _CFDateFormatterGetDateStyle = _CFDateFormatterGetDateStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  int CFDateFormatterGetTimeStyle(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetTimeStyle(
      formatter,
    );
  }

  late final _CFDateFormatterGetTimeStylePtr = _lookup<
      ffi.NativeFunction<
          CFDateFormatterStyle Function(
              CFDateFormatterRef)>>('CFDateFormatterGetTimeStyle');
  late final _CFDateFormatterGetTimeStyle = _CFDateFormatterGetTimeStylePtr
      .asFunction<int Function(CFDateFormatterRef)>();

  CFStringRef CFDateFormatterGetFormat(
    CFDateFormatterRef formatter,
  ) {
    return _CFDateFormatterGetFormat(
      formatter,
    );
  }

  late final _CFDateFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFDateFormatterRef)>>(
          'CFDateFormatterGetFormat');
  late final _CFDateFormatterGetFormat = _CFDateFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFDateFormatterRef)>();

  void CFDateFormatterSetFormat(
    CFDateFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFDateFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFDateFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFDateFormatterRef, CFStringRef)>>('CFDateFormatterSetFormat');
  late final _CFDateFormatterSetFormat = _CFDateFormatterSetFormatPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef)>();

  CFStringRef CFDateFormatterCreateStringWithDate(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFDateRef date,
  ) {
    return _CFDateFormatterCreateStringWithDate(
      allocator,
      formatter,
      date,
    );
  }

  late final _CFDateFormatterCreateStringWithDatePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFDateRef)>>('CFDateFormatterCreateStringWithDate');
  late final _CFDateFormatterCreateStringWithDate =
      _CFDateFormatterCreateStringWithDatePtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFDateFormatterRef, CFDateRef)>();

  CFStringRef CFDateFormatterCreateStringWithAbsoluteTime(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    double at,
  ) {
    return _CFDateFormatterCreateStringWithAbsoluteTime(
      allocator,
      formatter,
      at,
    );
  }

  late final _CFDateFormatterCreateStringWithAbsoluteTimePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef,
              CFAbsoluteTime)>>('CFDateFormatterCreateStringWithAbsoluteTime');
  late final _CFDateFormatterCreateStringWithAbsoluteTime =
      _CFDateFormatterCreateStringWithAbsoluteTimePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFDateFormatterRef, double)>();

  CFDateRef CFDateFormatterCreateDateFromString(
    CFAllocatorRef allocator,
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
  ) {
    return _CFDateFormatterCreateDateFromString(
      allocator,
      formatter,
      string,
      rangep,
    );
  }

  late final _CFDateFormatterCreateDateFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFDateFormatterCreateDateFromString');
  late final _CFDateFormatterCreateDateFromString =
      _CFDateFormatterCreateDateFromStringPtr.asFunction<
          CFDateRef Function(CFAllocatorRef, CFDateFormatterRef, CFStringRef,
              ffi.Pointer<CFRange>)>();

  int CFDateFormatterGetAbsoluteTimeFromString(
    CFDateFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    ffi.Pointer<CFAbsoluteTime> atp,
  ) {
    return _CFDateFormatterGetAbsoluteTimeFromString(
      formatter,
      string,
      rangep,
      atp,
    );
  }

  late final _CFDateFormatterGetAbsoluteTimeFromStringPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFDateFormatterRef, CFStringRef,
                  ffi.Pointer<CFRange>, ffi.Pointer<CFAbsoluteTime>)>>(
      'CFDateFormatterGetAbsoluteTimeFromString');
  late final _CFDateFormatterGetAbsoluteTimeFromString =
      _CFDateFormatterGetAbsoluteTimeFromStringPtr.asFunction<
          int Function(CFDateFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              ffi.Pointer<CFAbsoluteTime>)>();

  void CFDateFormatterSetProperty(
    CFDateFormatterRef formatter,
    CFStringRef key,
    CFTypeRef value,
  ) {
    return _CFDateFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFDateFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDateFormatterRef, CFStringRef,
              CFTypeRef)>>('CFDateFormatterSetProperty');
  late final _CFDateFormatterSetProperty = _CFDateFormatterSetPropertyPtr
      .asFunction<void Function(CFDateFormatterRef, CFStringRef, CFTypeRef)>();

  CFTypeRef CFDateFormatterCopyProperty(
    CFDateFormatterRef formatter,
    CFDateFormatterKey key,
  ) {
    return _CFDateFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFDateFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFDateFormatterRef,
              CFDateFormatterKey)>>('CFDateFormatterCopyProperty');
  late final _CFDateFormatterCopyProperty = _CFDateFormatterCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFDateFormatterRef, CFDateFormatterKey)>();

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterIsLenient =
      _lookup<CFDateFormatterKey>('kCFDateFormatterIsLenient');

  CFDateFormatterKey get kCFDateFormatterIsLenient =>
      _kCFDateFormatterIsLenient.value;

  set kCFDateFormatterIsLenient(CFDateFormatterKey value) =>
      _kCFDateFormatterIsLenient.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterTimeZone =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTimeZone');

  CFDateFormatterKey get kCFDateFormatterTimeZone =>
      _kCFDateFormatterTimeZone.value;

  set kCFDateFormatterTimeZone(CFDateFormatterKey value) =>
      _kCFDateFormatterTimeZone.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendarName =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendarName');

  CFDateFormatterKey get kCFDateFormatterCalendarName =>
      _kCFDateFormatterCalendarName.value;

  set kCFDateFormatterCalendarName(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendarName.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultFormat =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultFormat');

  CFDateFormatterKey get kCFDateFormatterDefaultFormat =>
      _kCFDateFormatterDefaultFormat.value;

  set kCFDateFormatterDefaultFormat(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterTwoDigitStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterTwoDigitStartDate');

  CFDateFormatterKey get kCFDateFormatterTwoDigitStartDate =>
      _kCFDateFormatterTwoDigitStartDate.value;

  set kCFDateFormatterTwoDigitStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterTwoDigitStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterDefaultDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterDefaultDate');

  CFDateFormatterKey get kCFDateFormatterDefaultDate =>
      _kCFDateFormatterDefaultDate.value;

  set kCFDateFormatterDefaultDate(CFDateFormatterKey value) =>
      _kCFDateFormatterDefaultDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterCalendar =
      _lookup<CFDateFormatterKey>('kCFDateFormatterCalendar');

  CFDateFormatterKey get kCFDateFormatterCalendar =>
      _kCFDateFormatterCalendar.value;

  set kCFDateFormatterCalendar(CFDateFormatterKey value) =>
      _kCFDateFormatterCalendar.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterEraSymbols');

  CFDateFormatterKey get kCFDateFormatterEraSymbols =>
      _kCFDateFormatterEraSymbols.value;

  set kCFDateFormatterEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterMonthSymbols =>
      _kCFDateFormatterMonthSymbols.value;

  set kCFDateFormatterMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortMonthSymbols =>
      _kCFDateFormatterShortMonthSymbols.value;

  set kCFDateFormatterShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterWeekdaySymbols =>
      _kCFDateFormatterWeekdaySymbols.value;

  set kCFDateFormatterWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortWeekdaySymbols =>
      _kCFDateFormatterShortWeekdaySymbols.value;

  set kCFDateFormatterShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterAMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterAMSymbol');

  CFDateFormatterKey get kCFDateFormatterAMSymbol =>
      _kCFDateFormatterAMSymbol.value;

  set kCFDateFormatterAMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterAMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterPMSymbol =
      _lookup<CFDateFormatterKey>('kCFDateFormatterPMSymbol');

  CFDateFormatterKey get kCFDateFormatterPMSymbol =>
      _kCFDateFormatterPMSymbol.value;

  set kCFDateFormatterPMSymbol(CFDateFormatterKey value) =>
      _kCFDateFormatterPMSymbol.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterLongEraSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterLongEraSymbols');

  CFDateFormatterKey get kCFDateFormatterLongEraSymbols =>
      _kCFDateFormatterLongEraSymbols.value;

  set kCFDateFormatterLongEraSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterLongEraSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortMonthSymbols =>
      _kCFDateFormatterVeryShortMonthSymbols.value;

  set kCFDateFormatterVeryShortMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneMonthSymbols =>
      _kCFDateFormatterStandaloneMonthSymbols.value;

  set kCFDateFormatterStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneMonthSymbols =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value;

  set kCFDateFormatterShortStandaloneMonthSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneMonthSymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneMonthSymbols =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value;

  set kCFDateFormatterVeryShortStandaloneMonthSymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneMonthSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterVeryShortWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortWeekdaySymbols =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value;

  set kCFDateFormatterVeryShortWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneWeekdaySymbols =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value;

  set kCFDateFormatterStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterShortStandaloneWeekdaySymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterVeryShortStandaloneWeekdaySymbols');

  CFDateFormatterKey get kCFDateFormatterVeryShortStandaloneWeekdaySymbols =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value;

  set kCFDateFormatterVeryShortStandaloneWeekdaySymbols(
          CFDateFormatterKey value) =>
      _kCFDateFormatterVeryShortStandaloneWeekdaySymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey> _kCFDateFormatterQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterQuarterSymbols =>
      _kCFDateFormatterQuarterSymbols.value;

  set kCFDateFormatterQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterShortQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortQuarterSymbols =>
      _kCFDateFormatterShortQuarterSymbols.value;

  set kCFDateFormatterShortQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>('kCFDateFormatterStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterStandaloneQuarterSymbols =>
      _kCFDateFormatterStandaloneQuarterSymbols.value;

  set kCFDateFormatterStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterShortStandaloneQuarterSymbols =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterShortStandaloneQuarterSymbols');

  CFDateFormatterKey get kCFDateFormatterShortStandaloneQuarterSymbols =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value;

  set kCFDateFormatterShortStandaloneQuarterSymbols(CFDateFormatterKey value) =>
      _kCFDateFormatterShortStandaloneQuarterSymbols.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterGregorianStartDate =
      _lookup<CFDateFormatterKey>('kCFDateFormatterGregorianStartDate');

  CFDateFormatterKey get kCFDateFormatterGregorianStartDate =>
      _kCFDateFormatterGregorianStartDate.value;

  set kCFDateFormatterGregorianStartDate(CFDateFormatterKey value) =>
      _kCFDateFormatterGregorianStartDate.value = value;

  late final ffi.Pointer<CFDateFormatterKey>
      _kCFDateFormatterDoesRelativeDateFormattingKey =
      _lookup<CFDateFormatterKey>(
          'kCFDateFormatterDoesRelativeDateFormattingKey');

  CFDateFormatterKey get kCFDateFormatterDoesRelativeDateFormattingKey =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value;

  set kCFDateFormatterDoesRelativeDateFormattingKey(CFDateFormatterKey value) =>
      _kCFDateFormatterDoesRelativeDateFormattingKey.value = value;

  int CFErrorGetTypeID() {
    return _CFErrorGetTypeID();
  }

  late final _CFErrorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFErrorGetTypeID');
  late final _CFErrorGetTypeID =
      _CFErrorGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainPOSIX =
      _lookup<CFErrorDomain>('kCFErrorDomainPOSIX');

  CFErrorDomain get kCFErrorDomainPOSIX => _kCFErrorDomainPOSIX.value;

  set kCFErrorDomainPOSIX(CFErrorDomain value) =>
      _kCFErrorDomainPOSIX.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainOSStatus =
      _lookup<CFErrorDomain>('kCFErrorDomainOSStatus');

  CFErrorDomain get kCFErrorDomainOSStatus => _kCFErrorDomainOSStatus.value;

  set kCFErrorDomainOSStatus(CFErrorDomain value) =>
      _kCFErrorDomainOSStatus.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainMach =
      _lookup<CFErrorDomain>('kCFErrorDomainMach');

  CFErrorDomain get kCFErrorDomainMach => _kCFErrorDomainMach.value;

  set kCFErrorDomainMach(CFErrorDomain value) =>
      _kCFErrorDomainMach.value = value;

  late final ffi.Pointer<CFErrorDomain> _kCFErrorDomainCocoa =
      _lookup<CFErrorDomain>('kCFErrorDomainCocoa');

  CFErrorDomain get kCFErrorDomainCocoa => _kCFErrorDomainCocoa.value;

  set kCFErrorDomainCocoa(CFErrorDomain value) =>
      _kCFErrorDomainCocoa.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedDescriptionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedDescriptionKey');

  CFStringRef get kCFErrorLocalizedDescriptionKey =>
      _kCFErrorLocalizedDescriptionKey.value;

  set kCFErrorLocalizedDescriptionKey(CFStringRef value) =>
      _kCFErrorLocalizedDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureKey');

  CFStringRef get kCFErrorLocalizedFailureKey =>
      _kCFErrorLocalizedFailureKey.value;

  set kCFErrorLocalizedFailureKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedFailureReasonKey =
      _lookup<CFStringRef>('kCFErrorLocalizedFailureReasonKey');

  CFStringRef get kCFErrorLocalizedFailureReasonKey =>
      _kCFErrorLocalizedFailureReasonKey.value;

  set kCFErrorLocalizedFailureReasonKey(CFStringRef value) =>
      _kCFErrorLocalizedFailureReasonKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorLocalizedRecoverySuggestionKey =
      _lookup<CFStringRef>('kCFErrorLocalizedRecoverySuggestionKey');

  CFStringRef get kCFErrorLocalizedRecoverySuggestionKey =>
      _kCFErrorLocalizedRecoverySuggestionKey.value;

  set kCFErrorLocalizedRecoverySuggestionKey(CFStringRef value) =>
      _kCFErrorLocalizedRecoverySuggestionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorDescriptionKey =
      _lookup<CFStringRef>('kCFErrorDescriptionKey');

  CFStringRef get kCFErrorDescriptionKey => _kCFErrorDescriptionKey.value;

  set kCFErrorDescriptionKey(CFStringRef value) =>
      _kCFErrorDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorUnderlyingErrorKey =
      _lookup<CFStringRef>('kCFErrorUnderlyingErrorKey');

  CFStringRef get kCFErrorUnderlyingErrorKey =>
      _kCFErrorUnderlyingErrorKey.value;

  set kCFErrorUnderlyingErrorKey(CFStringRef value) =>
      _kCFErrorUnderlyingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorURLKey =
      _lookup<CFStringRef>('kCFErrorURLKey');

  CFStringRef get kCFErrorURLKey => _kCFErrorURLKey.value;

  set kCFErrorURLKey(CFStringRef value) => _kCFErrorURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFErrorFilePathKey =
      _lookup<CFStringRef>('kCFErrorFilePathKey');

  CFStringRef get kCFErrorFilePathKey => _kCFErrorFilePathKey.value;

  set kCFErrorFilePathKey(CFStringRef value) =>
      _kCFErrorFilePathKey.value = value;

  CFErrorRef CFErrorCreate(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    CFDictionaryRef userInfo,
  ) {
    return _CFErrorCreate(
      allocator,
      domain,
      code,
      userInfo,
    );
  }

  late final _CFErrorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(CFAllocatorRef, CFErrorDomain, CFIndex,
              CFDictionaryRef)>>('CFErrorCreate');
  late final _CFErrorCreate = _CFErrorCreatePtr.asFunction<
      CFErrorRef Function(
          CFAllocatorRef, CFErrorDomain, int, CFDictionaryRef)>();

  CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(
    CFAllocatorRef allocator,
    CFErrorDomain domain,
    int code,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoKeys,
    ffi.Pointer<ffi.Pointer<ffi.Void>> userInfoValues,
    int numUserInfoValues,
  ) {
    return _CFErrorCreateWithUserInfoKeysAndValues(
      allocator,
      domain,
      code,
      userInfoKeys,
      userInfoValues,
      numUserInfoValues,
    );
  }

  late final _CFErrorCreateWithUserInfoKeysAndValuesPtr = _lookup<
      ffi.NativeFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              CFIndex,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex)>>('CFErrorCreateWithUserInfoKeysAndValues');
  late final _CFErrorCreateWithUserInfoKeysAndValues =
      _CFErrorCreateWithUserInfoKeysAndValuesPtr.asFunction<
          CFErrorRef Function(
              CFAllocatorRef,
              CFErrorDomain,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              int)>();

  CFErrorDomain CFErrorGetDomain(
    CFErrorRef err,
  ) {
    return _CFErrorGetDomain(
      err,
    );
  }

  late final _CFErrorGetDomainPtr =
      _lookup<ffi.NativeFunction<CFErrorDomain Function(CFErrorRef)>>(
          'CFErrorGetDomain');
  late final _CFErrorGetDomain =
      _CFErrorGetDomainPtr.asFunction<CFErrorDomain Function(CFErrorRef)>();

  int CFErrorGetCode(
    CFErrorRef err,
  ) {
    return _CFErrorGetCode(
      err,
    );
  }

  late final _CFErrorGetCodePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFErrorRef)>>(
          'CFErrorGetCode');
  late final _CFErrorGetCode =
      _CFErrorGetCodePtr.asFunction<int Function(CFErrorRef)>();

  CFDictionaryRef CFErrorCopyUserInfo(
    CFErrorRef err,
  ) {
    return _CFErrorCopyUserInfo(
      err,
    );
  }

  late final _CFErrorCopyUserInfoPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFErrorRef)>>(
          'CFErrorCopyUserInfo');
  late final _CFErrorCopyUserInfo = _CFErrorCopyUserInfoPtr.asFunction<
      CFDictionaryRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyDescription(
    CFErrorRef err,
  ) {
    return _CFErrorCopyDescription(
      err,
    );
  }

  late final _CFErrorCopyDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyDescription');
  late final _CFErrorCopyDescription =
      _CFErrorCopyDescriptionPtr.asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyFailureReason(
    CFErrorRef err,
  ) {
    return _CFErrorCopyFailureReason(
      err,
    );
  }

  late final _CFErrorCopyFailureReasonPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyFailureReason');
  late final _CFErrorCopyFailureReason = _CFErrorCopyFailureReasonPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  CFStringRef CFErrorCopyRecoverySuggestion(
    CFErrorRef err,
  ) {
    return _CFErrorCopyRecoverySuggestion(
      err,
    );
  }

  late final _CFErrorCopyRecoverySuggestionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFErrorRef)>>(
          'CFErrorCopyRecoverySuggestion');
  late final _CFErrorCopyRecoverySuggestion = _CFErrorCopyRecoverySuggestionPtr
      .asFunction<CFStringRef Function(CFErrorRef)>();

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanTrue =
      _lookup<CFBooleanRef>('kCFBooleanTrue');

  CFBooleanRef get kCFBooleanTrue => _kCFBooleanTrue.value;

  set kCFBooleanTrue(CFBooleanRef value) => _kCFBooleanTrue.value = value;

  late final ffi.Pointer<CFBooleanRef> _kCFBooleanFalse =
      _lookup<CFBooleanRef>('kCFBooleanFalse');

  CFBooleanRef get kCFBooleanFalse => _kCFBooleanFalse.value;

  set kCFBooleanFalse(CFBooleanRef value) => _kCFBooleanFalse.value = value;

  int CFBooleanGetTypeID() {
    return _CFBooleanGetTypeID();
  }

  late final _CFBooleanGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBooleanGetTypeID');
  late final _CFBooleanGetTypeID =
      _CFBooleanGetTypeIDPtr.asFunction<int Function()>();

  int CFBooleanGetValue(
    CFBooleanRef boolean,
  ) {
    return _CFBooleanGetValue(
      boolean,
    );
  }

  late final _CFBooleanGetValuePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBooleanRef)>>(
          'CFBooleanGetValue');
  late final _CFBooleanGetValue =
      _CFBooleanGetValuePtr.asFunction<int Function(CFBooleanRef)>();

  late final ffi.Pointer<CFNumberRef> _kCFNumberPositiveInfinity =
      _lookup<CFNumberRef>('kCFNumberPositiveInfinity');

  CFNumberRef get kCFNumberPositiveInfinity => _kCFNumberPositiveInfinity.value;

  set kCFNumberPositiveInfinity(CFNumberRef value) =>
      _kCFNumberPositiveInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNegativeInfinity =
      _lookup<CFNumberRef>('kCFNumberNegativeInfinity');

  CFNumberRef get kCFNumberNegativeInfinity => _kCFNumberNegativeInfinity.value;

  set kCFNumberNegativeInfinity(CFNumberRef value) =>
      _kCFNumberNegativeInfinity.value = value;

  late final ffi.Pointer<CFNumberRef> _kCFNumberNaN =
      _lookup<CFNumberRef>('kCFNumberNaN');

  CFNumberRef get kCFNumberNaN => _kCFNumberNaN.value;

  set kCFNumberNaN(CFNumberRef value) => _kCFNumberNaN.value = value;

  int CFNumberGetTypeID() {
    return _CFNumberGetTypeID();
  }

  late final _CFNumberGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFNumberGetTypeID');
  late final _CFNumberGetTypeID =
      _CFNumberGetTypeIDPtr.asFunction<int Function()>();

  CFNumberRef CFNumberCreate(
    CFAllocatorRef allocator,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberCreate(
      allocator,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberType,
              ffi.Pointer<ffi.Void>)>>('CFNumberCreate');
  late final _CFNumberCreate = _CFNumberCreatePtr.asFunction<
      CFNumberRef Function(CFAllocatorRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberGetType(
    CFNumberRef number,
  ) {
    return _CFNumberGetType(
      number,
    );
  }

  late final _CFNumberGetTypePtr =
      _lookup<ffi.NativeFunction<CFNumberType Function(CFNumberRef)>>(
          'CFNumberGetType');
  late final _CFNumberGetType =
      _CFNumberGetTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetByteSize(
    CFNumberRef number,
  ) {
    return _CFNumberGetByteSize(
      number,
    );
  }

  late final _CFNumberGetByteSizePtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFNumberRef)>>(
          'CFNumberGetByteSize');
  late final _CFNumberGetByteSize =
      _CFNumberGetByteSizePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberIsFloatType(
    CFNumberRef number,
  ) {
    return _CFNumberIsFloatType(
      number,
    );
  }

  late final _CFNumberIsFloatTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFNumberRef)>>(
          'CFNumberIsFloatType');
  late final _CFNumberIsFloatType =
      _CFNumberIsFloatTypePtr.asFunction<int Function(CFNumberRef)>();

  int CFNumberGetValue(
    CFNumberRef number,
    int theType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberGetValue(
      number,
      theType,
      valuePtr,
    );
  }

  late final _CFNumberGetValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFNumberRef, CFNumberType,
              ffi.Pointer<ffi.Void>)>>('CFNumberGetValue');
  late final _CFNumberGetValue = _CFNumberGetValuePtr.asFunction<
      int Function(CFNumberRef, int, ffi.Pointer<ffi.Void>)>();

  int CFNumberCompare(
    CFNumberRef number,
    CFNumberRef otherNumber,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFNumberCompare(
      number,
      otherNumber,
      context,
    );
  }

  late final _CFNumberComparePtr = _lookup<
      ffi.NativeFunction<
          CFComparisonResult Function(CFNumberRef, CFNumberRef,
              ffi.Pointer<ffi.Void>)>>('CFNumberCompare');
  late final _CFNumberCompare = _CFNumberComparePtr.asFunction<
      int Function(CFNumberRef, CFNumberRef, ffi.Pointer<ffi.Void>)>();

  int CFNumberFormatterGetTypeID() {
    return _CFNumberFormatterGetTypeID();
  }

  late final _CFNumberFormatterGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFNumberFormatterGetTypeID');
  late final _CFNumberFormatterGetTypeID =
      _CFNumberFormatterGetTypeIDPtr.asFunction<int Function()>();

  CFNumberFormatterRef CFNumberFormatterCreate(
    CFAllocatorRef allocator,
    CFLocaleRef locale,
    int style,
  ) {
    return _CFNumberFormatterCreate(
      allocator,
      locale,
      style,
    );
  }

  late final _CFNumberFormatterCreatePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef,
              CFNumberFormatterStyle)>>('CFNumberFormatterCreate');
  late final _CFNumberFormatterCreate = _CFNumberFormatterCreatePtr.asFunction<
      CFNumberFormatterRef Function(CFAllocatorRef, CFLocaleRef, int)>();

  CFLocaleRef CFNumberFormatterGetLocale(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetLocale(
      formatter,
    );
  }

  late final _CFNumberFormatterGetLocalePtr =
      _lookup<ffi.NativeFunction<CFLocaleRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetLocale');
  late final _CFNumberFormatterGetLocale = _CFNumberFormatterGetLocalePtr
      .asFunction<CFLocaleRef Function(CFNumberFormatterRef)>();

  int CFNumberFormatterGetStyle(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetStyle(
      formatter,
    );
  }

  late final _CFNumberFormatterGetStylePtr = _lookup<
      ffi.NativeFunction<
          CFNumberFormatterStyle Function(
              CFNumberFormatterRef)>>('CFNumberFormatterGetStyle');
  late final _CFNumberFormatterGetStyle = _CFNumberFormatterGetStylePtr
      .asFunction<int Function(CFNumberFormatterRef)>();

  CFStringRef CFNumberFormatterGetFormat(
    CFNumberFormatterRef formatter,
  ) {
    return _CFNumberFormatterGetFormat(
      formatter,
    );
  }

  late final _CFNumberFormatterGetFormatPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFNumberFormatterRef)>>(
          'CFNumberFormatterGetFormat');
  late final _CFNumberFormatterGetFormat = _CFNumberFormatterGetFormatPtr
      .asFunction<CFStringRef Function(CFNumberFormatterRef)>();

  void CFNumberFormatterSetFormat(
    CFNumberFormatterRef formatter,
    CFStringRef formatString,
  ) {
    return _CFNumberFormatterSetFormat(
      formatter,
      formatString,
    );
  }

  late final _CFNumberFormatterSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef,
              CFStringRef)>>('CFNumberFormatterSetFormat');
  late final _CFNumberFormatterSetFormat = _CFNumberFormatterSetFormatPtr
      .asFunction<void Function(CFNumberFormatterRef, CFStringRef)>();

  CFStringRef CFNumberFormatterCreateStringWithNumber(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFNumberRef number,
  ) {
    return _CFNumberFormatterCreateStringWithNumber(
      allocator,
      formatter,
      number,
    );
  }

  late final _CFNumberFormatterCreateStringWithNumberPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFNumberRef)>>('CFNumberFormatterCreateStringWithNumber');
  late final _CFNumberFormatterCreateStringWithNumber =
      _CFNumberFormatterCreateStringWithNumberPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFNumberFormatterRef, CFNumberRef)>();

  CFStringRef CFNumberFormatterCreateStringWithValue(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterCreateStringWithValue(
      allocator,
      formatter,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterCreateStringWithValuePtr = _lookup<
          ffi.NativeFunction<
              CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef,
                  CFNumberType, ffi.Pointer<ffi.Void>)>>(
      'CFNumberFormatterCreateStringWithValue');
  late final _CFNumberFormatterCreateStringWithValue =
      _CFNumberFormatterCreateStringWithValuePtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFNumberFormatterRef, int,
              ffi.Pointer<ffi.Void>)>();

  CFNumberRef CFNumberFormatterCreateNumberFromString(
    CFAllocatorRef allocator,
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int options,
  ) {
    return _CFNumberFormatterCreateNumberFromString(
      allocator,
      formatter,
      string,
      rangep,
      options,
    );
  }

  late final _CFNumberFormatterCreateNumberFromStringPtr = _lookup<
      ffi.NativeFunction<
          CFNumberRef Function(
              CFAllocatorRef,
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFOptionFlags)>>('CFNumberFormatterCreateNumberFromString');
  late final _CFNumberFormatterCreateNumberFromString =
      _CFNumberFormatterCreateNumberFromStringPtr.asFunction<
          CFNumberRef Function(CFAllocatorRef, CFNumberFormatterRef,
              CFStringRef, ffi.Pointer<CFRange>, int)>();

  int CFNumberFormatterGetValueFromString(
    CFNumberFormatterRef formatter,
    CFStringRef string,
    ffi.Pointer<CFRange> rangep,
    int numberType,
    ffi.Pointer<ffi.Void> valuePtr,
  ) {
    return _CFNumberFormatterGetValueFromString(
      formatter,
      string,
      rangep,
      numberType,
      valuePtr,
    );
  }

  late final _CFNumberFormatterGetValueFromStringPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFNumberFormatterRef,
              CFStringRef,
              ffi.Pointer<CFRange>,
              CFNumberType,
              ffi.Pointer<ffi.Void>)>>('CFNumberFormatterGetValueFromString');
  late final _CFNumberFormatterGetValueFromString =
      _CFNumberFormatterGetValueFromStringPtr.asFunction<
          int Function(CFNumberFormatterRef, CFStringRef, ffi.Pointer<CFRange>,
              int, ffi.Pointer<ffi.Void>)>();

  void CFNumberFormatterSetProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
    CFTypeRef value,
  ) {
    return _CFNumberFormatterSetProperty(
      formatter,
      key,
      value,
    );
  }

  late final _CFNumberFormatterSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFNumberFormatterRef, CFNumberFormatterKey,
              CFTypeRef)>>('CFNumberFormatterSetProperty');
  late final _CFNumberFormatterSetProperty =
      _CFNumberFormatterSetPropertyPtr.asFunction<
          void Function(
              CFNumberFormatterRef, CFNumberFormatterKey, CFTypeRef)>();

  CFTypeRef CFNumberFormatterCopyProperty(
    CFNumberFormatterRef formatter,
    CFNumberFormatterKey key,
  ) {
    return _CFNumberFormatterCopyProperty(
      formatter,
      key,
    );
  }

  late final _CFNumberFormatterCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFNumberFormatterRef,
              CFNumberFormatterKey)>>('CFNumberFormatterCopyProperty');
  late final _CFNumberFormatterCopyProperty =
      _CFNumberFormatterCopyPropertyPtr.asFunction<
          CFTypeRef Function(CFNumberFormatterRef, CFNumberFormatterKey)>();

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterCurrencyCode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencyCode');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyCode =>
      _kCFNumberFormatterCurrencyCode.value;

  set kCFNumberFormatterCurrencyCode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyCode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDecimalSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterDecimalSeparator =>
      _kCFNumberFormatterDecimalSeparator.value;

  set kCFNumberFormatterDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyDecimalSeparator =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value;

  set kCFNumberFormatterCurrencyDecimalSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterAlwaysShowDecimalSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterAlwaysShowDecimalSeparator');

  CFNumberFormatterKey get kCFNumberFormatterAlwaysShowDecimalSeparator =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value;

  set kCFNumberFormatterAlwaysShowDecimalSeparator(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterAlwaysShowDecimalSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSeparator =>
      _kCFNumberFormatterGroupingSeparator.value;

  set kCFNumberFormatterGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseGroupingSeparator =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterUseGroupingSeparator =>
      _kCFNumberFormatterUseGroupingSeparator.value;

  set kCFNumberFormatterUseGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPercentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPercentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPercentSymbol =>
      _kCFNumberFormatterPercentSymbol.value;

  set kCFNumberFormatterPercentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPercentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterZeroSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterZeroSymbol');

  CFNumberFormatterKey get kCFNumberFormatterZeroSymbol =>
      _kCFNumberFormatterZeroSymbol.value;

  set kCFNumberFormatterZeroSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterZeroSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterNaNSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNaNSymbol');

  CFNumberFormatterKey get kCFNumberFormatterNaNSymbol =>
      _kCFNumberFormatterNaNSymbol.value;

  set kCFNumberFormatterNaNSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNaNSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInfinitySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterInfinitySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInfinitySymbol =>
      _kCFNumberFormatterInfinitySymbol.value;

  set kCFNumberFormatterInfinitySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterInfinitySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMinusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinusSign');

  CFNumberFormatterKey get kCFNumberFormatterMinusSign =>
      _kCFNumberFormatterMinusSign.value;

  set kCFNumberFormatterMinusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterPlusSign =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPlusSign');

  CFNumberFormatterKey get kCFNumberFormatterPlusSign =>
      _kCFNumberFormatterPlusSign.value;

  set kCFNumberFormatterPlusSign(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPlusSign.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencySymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterCurrencySymbol =>
      _kCFNumberFormatterCurrencySymbol.value;

  set kCFNumberFormatterCurrencySymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterExponentSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterExponentSymbol');

  CFNumberFormatterKey get kCFNumberFormatterExponentSymbol =>
      _kCFNumberFormatterExponentSymbol.value;

  set kCFNumberFormatterExponentSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterExponentSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinIntegerDigits =>
      _kCFNumberFormatterMinIntegerDigits.value;

  set kCFNumberFormatterMinIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxIntegerDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxIntegerDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxIntegerDigits =>
      _kCFNumberFormatterMaxIntegerDigits.value;

  set kCFNumberFormatterMaxIntegerDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxIntegerDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinFractionDigits =>
      _kCFNumberFormatterMinFractionDigits.value;

  set kCFNumberFormatterMinFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxFractionDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxFractionDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxFractionDigits =>
      _kCFNumberFormatterMaxFractionDigits.value;

  set kCFNumberFormatterMaxFractionDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxFractionDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterGroupingSize =>
      _kCFNumberFormatterGroupingSize.value;

  set kCFNumberFormatterGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterSecondaryGroupingSize =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterSecondaryGroupingSize');

  CFNumberFormatterKey get kCFNumberFormatterSecondaryGroupingSize =>
      _kCFNumberFormatterSecondaryGroupingSize.value;

  set kCFNumberFormatterSecondaryGroupingSize(CFNumberFormatterKey value) =>
      _kCFNumberFormatterSecondaryGroupingSize.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterRoundingMode =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingMode');

  CFNumberFormatterKey get kCFNumberFormatterRoundingMode =>
      _kCFNumberFormatterRoundingMode.value;

  set kCFNumberFormatterRoundingMode(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingMode.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterRoundingIncrement =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterRoundingIncrement');

  CFNumberFormatterKey get kCFNumberFormatterRoundingIncrement =>
      _kCFNumberFormatterRoundingIncrement.value;

  set kCFNumberFormatterRoundingIncrement(CFNumberFormatterKey value) =>
      _kCFNumberFormatterRoundingIncrement.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterFormatWidth =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterFormatWidth');

  CFNumberFormatterKey get kCFNumberFormatterFormatWidth =>
      _kCFNumberFormatterFormatWidth.value;

  set kCFNumberFormatterFormatWidth(CFNumberFormatterKey value) =>
      _kCFNumberFormatterFormatWidth.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingPosition =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingPosition');

  CFNumberFormatterKey get kCFNumberFormatterPaddingPosition =>
      _kCFNumberFormatterPaddingPosition.value;

  set kCFNumberFormatterPaddingPosition(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingPosition.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPaddingCharacter =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPaddingCharacter');

  CFNumberFormatterKey get kCFNumberFormatterPaddingCharacter =>
      _kCFNumberFormatterPaddingCharacter.value;

  set kCFNumberFormatterPaddingCharacter(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPaddingCharacter.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterDefaultFormat =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterDefaultFormat');

  CFNumberFormatterKey get kCFNumberFormatterDefaultFormat =>
      _kCFNumberFormatterDefaultFormat.value;

  set kCFNumberFormatterDefaultFormat(CFNumberFormatterKey value) =>
      _kCFNumberFormatterDefaultFormat.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterMultiplier =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMultiplier');

  CFNumberFormatterKey get kCFNumberFormatterMultiplier =>
      _kCFNumberFormatterMultiplier.value;

  set kCFNumberFormatterMultiplier(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMultiplier.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositivePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositivePrefix');

  CFNumberFormatterKey get kCFNumberFormatterPositivePrefix =>
      _kCFNumberFormatterPositivePrefix.value;

  set kCFNumberFormatterPositivePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositivePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPositiveSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPositiveSuffix');

  CFNumberFormatterKey get kCFNumberFormatterPositiveSuffix =>
      _kCFNumberFormatterPositiveSuffix.value;

  set kCFNumberFormatterPositiveSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPositiveSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativePrefix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativePrefix');

  CFNumberFormatterKey get kCFNumberFormatterNegativePrefix =>
      _kCFNumberFormatterNegativePrefix.value;

  set kCFNumberFormatterNegativePrefix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativePrefix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterNegativeSuffix =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterNegativeSuffix');

  CFNumberFormatterKey get kCFNumberFormatterNegativeSuffix =>
      _kCFNumberFormatterNegativeSuffix.value;

  set kCFNumberFormatterNegativeSuffix(CFNumberFormatterKey value) =>
      _kCFNumberFormatterNegativeSuffix.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterPerMillSymbol =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterPerMillSymbol');

  CFNumberFormatterKey get kCFNumberFormatterPerMillSymbol =>
      _kCFNumberFormatterPerMillSymbol.value;

  set kCFNumberFormatterPerMillSymbol(CFNumberFormatterKey value) =>
      _kCFNumberFormatterPerMillSymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterInternationalCurrencySymbol =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterInternationalCurrencySymbol');

  CFNumberFormatterKey get kCFNumberFormatterInternationalCurrencySymbol =>
      _kCFNumberFormatterInternationalCurrencySymbol.value;

  set kCFNumberFormatterInternationalCurrencySymbol(
          CFNumberFormatterKey value) =>
      _kCFNumberFormatterInternationalCurrencySymbol.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterCurrencyGroupingSeparator =
      _lookup<CFNumberFormatterKey>(
          'kCFNumberFormatterCurrencyGroupingSeparator');

  CFNumberFormatterKey get kCFNumberFormatterCurrencyGroupingSeparator =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value;

  set kCFNumberFormatterCurrencyGroupingSeparator(CFNumberFormatterKey value) =>
      _kCFNumberFormatterCurrencyGroupingSeparator.value = value;

  late final ffi.Pointer<CFNumberFormatterKey> _kCFNumberFormatterIsLenient =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterIsLenient');

  CFNumberFormatterKey get kCFNumberFormatterIsLenient =>
      _kCFNumberFormatterIsLenient.value;

  set kCFNumberFormatterIsLenient(CFNumberFormatterKey value) =>
      _kCFNumberFormatterIsLenient.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterUseSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterUseSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterUseSignificantDigits =>
      _kCFNumberFormatterUseSignificantDigits.value;

  set kCFNumberFormatterUseSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterUseSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMinSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMinSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMinSignificantDigits =>
      _kCFNumberFormatterMinSignificantDigits.value;

  set kCFNumberFormatterMinSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMinSignificantDigits.value = value;

  late final ffi.Pointer<CFNumberFormatterKey>
      _kCFNumberFormatterMaxSignificantDigits =
      _lookup<CFNumberFormatterKey>('kCFNumberFormatterMaxSignificantDigits');

  CFNumberFormatterKey get kCFNumberFormatterMaxSignificantDigits =>
      _kCFNumberFormatterMaxSignificantDigits.value;

  set kCFNumberFormatterMaxSignificantDigits(CFNumberFormatterKey value) =>
      _kCFNumberFormatterMaxSignificantDigits.value = value;

  int CFNumberFormatterGetDecimalInfoForCurrencyCode(
    CFStringRef currencyCode,
    ffi.Pointer<ffi.Int32> defaultFractionDigits,
    ffi.Pointer<ffi.Double> roundingIncrement,
  ) {
    return _CFNumberFormatterGetDecimalInfoForCurrencyCode(
      currencyCode,
      defaultFractionDigits,
      roundingIncrement,
    );
  }

  late final _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFStringRef, ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Double>)>>(
      'CFNumberFormatterGetDecimalInfoForCurrencyCode');
  late final _CFNumberFormatterGetDecimalInfoForCurrencyCode =
      _CFNumberFormatterGetDecimalInfoForCurrencyCodePtr.asFunction<
          int Function(
              CFStringRef, ffi.Pointer<ffi.Int32>, ffi.Pointer<ffi.Double>)>();

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyApplication =
      _lookup<CFStringRef>('kCFPreferencesAnyApplication');

  CFStringRef get kCFPreferencesAnyApplication =>
      _kCFPreferencesAnyApplication.value;

  set kCFPreferencesAnyApplication(CFStringRef value) =>
      _kCFPreferencesAnyApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentApplication =
      _lookup<CFStringRef>('kCFPreferencesCurrentApplication');

  CFStringRef get kCFPreferencesCurrentApplication =>
      _kCFPreferencesCurrentApplication.value;

  set kCFPreferencesCurrentApplication(CFStringRef value) =>
      _kCFPreferencesCurrentApplication.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyHost =
      _lookup<CFStringRef>('kCFPreferencesAnyHost');

  CFStringRef get kCFPreferencesAnyHost => _kCFPreferencesAnyHost.value;

  set kCFPreferencesAnyHost(CFStringRef value) =>
      _kCFPreferencesAnyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentHost =
      _lookup<CFStringRef>('kCFPreferencesCurrentHost');

  CFStringRef get kCFPreferencesCurrentHost => _kCFPreferencesCurrentHost.value;

  set kCFPreferencesCurrentHost(CFStringRef value) =>
      _kCFPreferencesCurrentHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesAnyUser =
      _lookup<CFStringRef>('kCFPreferencesAnyUser');

  CFStringRef get kCFPreferencesAnyUser => _kCFPreferencesAnyUser.value;

  set kCFPreferencesAnyUser(CFStringRef value) =>
      _kCFPreferencesAnyUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPreferencesCurrentUser =
      _lookup<CFStringRef>('kCFPreferencesCurrentUser');

  CFStringRef get kCFPreferencesCurrentUser => _kCFPreferencesCurrentUser.value;

  set kCFPreferencesCurrentUser(CFStringRef value) =>
      _kCFPreferencesCurrentUser.value = value;

  CFPropertyListRef CFPreferencesCopyAppValue(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesCopyAppValue(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesCopyAppValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFStringRef, CFStringRef)>>('CFPreferencesCopyAppValue');
  late final _CFPreferencesCopyAppValue = _CFPreferencesCopyAppValuePtr
      .asFunction<CFPropertyListRef Function(CFStringRef, CFStringRef)>();

  int CFPreferencesGetAppBooleanValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppBooleanValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppBooleanValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppBooleanValue');
  late final _CFPreferencesGetAppBooleanValue =
      _CFPreferencesGetAppBooleanValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  int CFPreferencesGetAppIntegerValue(
    CFStringRef key,
    CFStringRef applicationID,
    ffi.Pointer<Boolean> keyExistsAndHasValidFormat,
  ) {
    return _CFPreferencesGetAppIntegerValue(
      key,
      applicationID,
      keyExistsAndHasValidFormat,
    );
  }

  late final _CFPreferencesGetAppIntegerValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringRef, CFStringRef,
              ffi.Pointer<Boolean>)>>('CFPreferencesGetAppIntegerValue');
  late final _CFPreferencesGetAppIntegerValue =
      _CFPreferencesGetAppIntegerValuePtr.asFunction<
          int Function(CFStringRef, CFStringRef, ffi.Pointer<Boolean>)>();

  void CFPreferencesSetAppValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesSetAppValue(
      key,
      value,
      applicationID,
    );
  }

  late final _CFPreferencesSetAppValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef,
              CFStringRef)>>('CFPreferencesSetAppValue');
  late final _CFPreferencesSetAppValue = _CFPreferencesSetAppValuePtr
      .asFunction<void Function(CFStringRef, CFPropertyListRef, CFStringRef)>();

  void CFPreferencesAddSuitePreferencesToApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesAddSuitePreferencesToApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesAddSuitePreferencesToAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAddSuitePreferencesToApp');
  late final _CFPreferencesAddSuitePreferencesToApp =
      _CFPreferencesAddSuitePreferencesToAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  void CFPreferencesRemoveSuitePreferencesFromApp(
    CFStringRef applicationID,
    CFStringRef suiteID,
  ) {
    return _CFPreferencesRemoveSuitePreferencesFromApp(
      applicationID,
      suiteID,
    );
  }

  late final _CFPreferencesRemoveSuitePreferencesFromAppPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesRemoveSuitePreferencesFromApp');
  late final _CFPreferencesRemoveSuitePreferencesFromApp =
      _CFPreferencesRemoveSuitePreferencesFromAppPtr.asFunction<
          void Function(CFStringRef, CFStringRef)>();

  int CFPreferencesAppSynchronize(
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppSynchronize(
      applicationID,
    );
  }

  late final _CFPreferencesAppSynchronizePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef)>>(
          'CFPreferencesAppSynchronize');
  late final _CFPreferencesAppSynchronize =
      _CFPreferencesAppSynchronizePtr.asFunction<int Function(CFStringRef)>();

  CFPropertyListRef CFPreferencesCopyValue(
    CFStringRef key,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyValue(
      key,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyValuePtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyValue');
  late final _CFPreferencesCopyValue = _CFPreferencesCopyValuePtr.asFunction<
      CFPropertyListRef Function(
          CFStringRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFPreferencesCopyMultiple(
    CFArrayRef keysToFetch,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyMultiple(
      keysToFetch,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyMultiplePtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyMultiple');
  late final _CFPreferencesCopyMultiple =
      _CFPreferencesCopyMultiplePtr.asFunction<
          CFDictionaryRef Function(
              CFArrayRef, CFStringRef, CFStringRef, CFStringRef)>();

  void CFPreferencesSetValue(
    CFStringRef key,
    CFPropertyListRef value,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetValue(
      key,
      value,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringRef, CFPropertyListRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetValue');
  late final _CFPreferencesSetValue = _CFPreferencesSetValuePtr.asFunction<
      void Function(CFStringRef, CFPropertyListRef, CFStringRef, CFStringRef,
          CFStringRef)>();

  void CFPreferencesSetMultiple(
    CFDictionaryRef keysToSet,
    CFArrayRef keysToRemove,
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSetMultiple(
      keysToSet,
      keysToRemove,
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSetMultiplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFDictionaryRef, CFArrayRef, CFStringRef,
              CFStringRef, CFStringRef)>>('CFPreferencesSetMultiple');
  late final _CFPreferencesSetMultiple =
      _CFPreferencesSetMultiplePtr.asFunction<
          void Function(CFDictionaryRef, CFArrayRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  int CFPreferencesSynchronize(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesSynchronize(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesSynchronizePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesSynchronize');
  late final _CFPreferencesSynchronize = _CFPreferencesSynchronizePtr
      .asFunction<int Function(CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyApplicationList(
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyApplicationList(
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyApplicationListPtr = _lookup<
          ffi.NativeFunction<CFArrayRef Function(CFStringRef, CFStringRef)>>(
      'CFPreferencesCopyApplicationList');
  late final _CFPreferencesCopyApplicationList =
      _CFPreferencesCopyApplicationListPtr.asFunction<
          CFArrayRef Function(CFStringRef, CFStringRef)>();

  CFArrayRef CFPreferencesCopyKeyList(
    CFStringRef applicationID,
    CFStringRef userName,
    CFStringRef hostName,
  ) {
    return _CFPreferencesCopyKeyList(
      applicationID,
      userName,
      hostName,
    );
  }

  late final _CFPreferencesCopyKeyListPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFStringRef, CFStringRef,
              CFStringRef)>>('CFPreferencesCopyKeyList');
  late final _CFPreferencesCopyKeyList = _CFPreferencesCopyKeyListPtr
      .asFunction<CFArrayRef Function(CFStringRef, CFStringRef, CFStringRef)>();

  int CFPreferencesAppValueIsForced(
    CFStringRef key,
    CFStringRef applicationID,
  ) {
    return _CFPreferencesAppValueIsForced(
      key,
      applicationID,
    );
  }

  late final _CFPreferencesAppValueIsForcedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFStringRef, CFStringRef)>>(
          'CFPreferencesAppValueIsForced');
  late final _CFPreferencesAppValueIsForced = _CFPreferencesAppValueIsForcedPtr
      .asFunction<int Function(CFStringRef, CFStringRef)>();

  int CFURLGetTypeID() {
    return _CFURLGetTypeID();
  }

  late final _CFURLGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFURLGetTypeID');
  late final _CFURLGetTypeID = _CFURLGetTypeIDPtr.asFunction<int Function()>();

  CFURLRef CFURLCreateWithBytes(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> URLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithBytes(
      allocator,
      URLBytes,
      length,
      encoding,
      baseURL,
    );
  }

  late final _CFURLCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFStringEncoding, CFURLRef)>>('CFURLCreateWithBytes');
  late final _CFURLCreateWithBytes = _CFURLCreateWithBytesPtr.asFunction<
      CFURLRef Function(
          CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  CFDataRef CFURLCreateData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int encoding,
    int escapeWhitespace,
  ) {
    return _CFURLCreateData(
      allocator,
      url,
      encoding,
      escapeWhitespace,
    );
  }

  late final _CFURLCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef, CFStringEncoding,
              Boolean)>>('CFURLCreateData');
  late final _CFURLCreateData = _CFURLCreateDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFURLRef CFURLCreateWithString(
    CFAllocatorRef allocator,
    CFStringRef URLString,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithString(
      allocator,
      URLString,
      baseURL,
    );
  }

  late final _CFURLCreateWithStringPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, CFStringRef, CFURLRef)>>('CFURLCreateWithString');
  late final _CFURLCreateWithString = _CFURLCreateWithStringPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLRef)>();

  CFURLRef CFURLCreateAbsoluteURLWithBytes(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> relativeURLBytes,
    int length,
    int encoding,
    CFURLRef baseURL,
    int useCompatibilityMode,
  ) {
    return _CFURLCreateAbsoluteURLWithBytes(
      alloc,
      relativeURLBytes,
      length,
      encoding,
      baseURL,
      useCompatibilityMode,
    );
  }

  late final _CFURLCreateAbsoluteURLWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              ffi.Pointer<UInt8>,
              CFIndex,
              CFStringEncoding,
              CFURLRef,
              Boolean)>>('CFURLCreateAbsoluteURLWithBytes');
  late final _CFURLCreateAbsoluteURLWithBytes =
      _CFURLCreateAbsoluteURLWithBytesPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef, int)>();

  CFURLRef CFURLCreateWithFileSystemPath(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
  ) {
    return _CFURLCreateWithFileSystemPath(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
    );
  }

  late final _CFURLCreateWithFileSystemPathPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, CFURLPathStyle,
              Boolean)>>('CFURLCreateWithFileSystemPath');
  late final _CFURLCreateWithFileSystemPath = _CFURLCreateWithFileSystemPathPtr
      .asFunction<CFURLRef Function(CFAllocatorRef, CFStringRef, int, int)>();

  CFURLRef CFURLCreateFromFileSystemRepresentation(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
  ) {
    return _CFURLCreateFromFileSystemRepresentation(
      allocator,
      buffer,
      bufLen,
      isDirectory,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              Boolean)>>('CFURLCreateFromFileSystemRepresentation');
  late final _CFURLCreateFromFileSystemRepresentation =
      _CFURLCreateFromFileSystemRepresentationPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int, int)>();

  CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(
    CFAllocatorRef allocator,
    CFStringRef filePath,
    int pathStyle,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateWithFileSystemPathRelativeToBase(
      allocator,
      filePath,
      pathStyle,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateWithFileSystemPathRelativeToBasePtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFURLPathStyle,
              Boolean,
              CFURLRef)>>('CFURLCreateWithFileSystemPathRelativeToBase');
  late final _CFURLCreateWithFileSystemPathRelativeToBase =
      _CFURLCreateWithFileSystemPathRelativeToBasePtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFStringRef, int, int, CFURLRef)>();

  CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(
    CFAllocatorRef allocator,
    ffi.Pointer<UInt8> buffer,
    int bufLen,
    int isDirectory,
    CFURLRef baseURL,
  ) {
    return _CFURLCreateFromFileSystemRepresentationRelativeToBase(
      allocator,
      buffer,
      bufLen,
      isDirectory,
      baseURL,
    );
  }

  late final _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr =
      _lookup<
              ffi.NativeFunction<
                  CFURLRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
                      Boolean, CFURLRef)>>(
          'CFURLCreateFromFileSystemRepresentationRelativeToBase');
  late final _CFURLCreateFromFileSystemRepresentationRelativeToBase =
      _CFURLCreateFromFileSystemRepresentationRelativeToBasePtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, int, CFURLRef)>();

  int CFURLGetFileSystemRepresentation(
    CFURLRef url,
    int resolveAgainstBase,
    ffi.Pointer<UInt8> buffer,
    int maxBufLen,
  ) {
    return _CFURLGetFileSystemRepresentation(
      url,
      resolveAgainstBase,
      buffer,
      maxBufLen,
    );
  }

  late final _CFURLGetFileSystemRepresentationPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, Boolean, ffi.Pointer<UInt8>,
              CFIndex)>>('CFURLGetFileSystemRepresentation');
  late final _CFURLGetFileSystemRepresentation =
      _CFURLGetFileSystemRepresentationPtr.asFunction<
          int Function(CFURLRef, int, ffi.Pointer<UInt8>, int)>();

  CFURLRef CFURLCopyAbsoluteURL(
    CFURLRef relativeURL,
  ) {
    return _CFURLCopyAbsoluteURL(
      relativeURL,
    );
  }

  late final _CFURLCopyAbsoluteURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLCopyAbsoluteURL');
  late final _CFURLCopyAbsoluteURL =
      _CFURLCopyAbsoluteURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  CFStringRef CFURLGetString(
    CFURLRef anURL,
  ) {
    return _CFURLGetString(
      anURL,
    );
  }

  late final _CFURLGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLGetString');
  late final _CFURLGetString =
      _CFURLGetStringPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLGetBaseURL(
    CFURLRef anURL,
  ) {
    return _CFURLGetBaseURL(
      anURL,
    );
  }

  late final _CFURLGetBaseURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFURLRef)>>(
          'CFURLGetBaseURL');
  late final _CFURLGetBaseURL =
      _CFURLGetBaseURLPtr.asFunction<CFURLRef Function(CFURLRef)>();

  int CFURLCanBeDecomposed(
    CFURLRef anURL,
  ) {
    return _CFURLCanBeDecomposed(
      anURL,
    );
  }

  late final _CFURLCanBeDecomposedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLCanBeDecomposed');
  late final _CFURLCanBeDecomposed =
      _CFURLCanBeDecomposedPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyScheme(
    CFURLRef anURL,
  ) {
    return _CFURLCopyScheme(
      anURL,
    );
  }

  late final _CFURLCopySchemePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyScheme');
  late final _CFURLCopyScheme =
      _CFURLCopySchemePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyNetLocation(
    CFURLRef anURL,
  ) {
    return _CFURLCopyNetLocation(
      anURL,
    );
  }

  late final _CFURLCopyNetLocationPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyNetLocation');
  late final _CFURLCopyNetLocation =
      _CFURLCopyNetLocationPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPath(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPath(
      anURL,
    );
  }

  late final _CFURLCopyPathPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPath');
  late final _CFURLCopyPath =
      _CFURLCopyPathPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyStrictPath(
    CFURLRef anURL,
    ffi.Pointer<Boolean> isAbsolute,
  ) {
    return _CFURLCopyStrictPath(
      anURL,
      isAbsolute,
    );
  }

  late final _CFURLCopyStrictPathPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFURLRef, ffi.Pointer<Boolean>)>>('CFURLCopyStrictPath');
  late final _CFURLCopyStrictPath = _CFURLCopyStrictPathPtr.asFunction<
      CFStringRef Function(CFURLRef, ffi.Pointer<Boolean>)>();

  CFStringRef CFURLCopyFileSystemPath(
    CFURLRef anURL,
    int pathStyle,
  ) {
    return _CFURLCopyFileSystemPath(
      anURL,
      pathStyle,
    );
  }

  late final _CFURLCopyFileSystemPathPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFURLRef, CFURLPathStyle)>>(
      'CFURLCopyFileSystemPath');
  late final _CFURLCopyFileSystemPath = _CFURLCopyFileSystemPathPtr.asFunction<
      CFStringRef Function(CFURLRef, int)>();

  int CFURLHasDirectoryPath(
    CFURLRef anURL,
  ) {
    return _CFURLHasDirectoryPath(
      anURL,
    );
  }

  late final _CFURLHasDirectoryPathPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLHasDirectoryPath');
  late final _CFURLHasDirectoryPath =
      _CFURLHasDirectoryPathPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyResourceSpecifier(
    CFURLRef anURL,
  ) {
    return _CFURLCopyResourceSpecifier(
      anURL,
    );
  }

  late final _CFURLCopyResourceSpecifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyResourceSpecifier');
  late final _CFURLCopyResourceSpecifier = _CFURLCopyResourceSpecifierPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyHostName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyHostName(
      anURL,
    );
  }

  late final _CFURLCopyHostNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyHostName');
  late final _CFURLCopyHostName =
      _CFURLCopyHostNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  int CFURLGetPortNumber(
    CFURLRef anURL,
  ) {
    return _CFURLGetPortNumber(
      anURL,
    );
  }

  late final _CFURLGetPortNumberPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFURLRef)>>(
          'CFURLGetPortNumber');
  late final _CFURLGetPortNumber =
      _CFURLGetPortNumberPtr.asFunction<int Function(CFURLRef)>();

  CFStringRef CFURLCopyUserName(
    CFURLRef anURL,
  ) {
    return _CFURLCopyUserName(
      anURL,
    );
  }

  late final _CFURLCopyUserNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyUserName');
  late final _CFURLCopyUserName =
      _CFURLCopyUserNamePtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPassword(
    CFURLRef anURL,
  ) {
    return _CFURLCopyPassword(
      anURL,
    );
  }

  late final _CFURLCopyPasswordPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPassword');
  late final _CFURLCopyPassword =
      _CFURLCopyPasswordPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyParameterString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyParameterString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyParameterStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyParameterString');
  late final _CFURLCopyParameterString = _CFURLCopyParameterStringPtr
      .asFunction<CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyQueryString(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyQueryString(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyQueryStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyQueryString');
  late final _CFURLCopyQueryString = _CFURLCopyQueryStringPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyFragment(
    CFURLRef anURL,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCopyFragment(
      anURL,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCopyFragmentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef, CFStringRef)>>(
          'CFURLCopyFragment');
  late final _CFURLCopyFragment = _CFURLCopyFragmentPtr.asFunction<
      CFStringRef Function(CFURLRef, CFStringRef)>();

  CFStringRef CFURLCopyLastPathComponent(
    CFURLRef url,
  ) {
    return _CFURLCopyLastPathComponent(
      url,
    );
  }

  late final _CFURLCopyLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyLastPathComponent');
  late final _CFURLCopyLastPathComponent = _CFURLCopyLastPathComponentPtr
      .asFunction<CFStringRef Function(CFURLRef)>();

  CFStringRef CFURLCopyPathExtension(
    CFURLRef url,
  ) {
    return _CFURLCopyPathExtension(
      url,
    );
  }

  late final _CFURLCopyPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFURLRef)>>(
          'CFURLCopyPathExtension');
  late final _CFURLCopyPathExtension =
      _CFURLCopyPathExtensionPtr.asFunction<CFStringRef Function(CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef pathComponent,
    int isDirectory,
  ) {
    return _CFURLCreateCopyAppendingPathComponent(
      allocator,
      url,
      pathComponent,
      isDirectory,
    );
  }

  late final _CFURLCreateCopyAppendingPathComponentPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              Boolean)>>('CFURLCreateCopyAppendingPathComponent');
  late final _CFURLCreateCopyAppendingPathComponent =
      _CFURLCreateCopyAppendingPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef, int)>();

  CFURLRef CFURLCreateCopyDeletingLastPathComponent(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingLastPathComponent(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingLastPathComponentPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingLastPathComponent');
  late final _CFURLCreateCopyDeletingLastPathComponent =
      _CFURLCreateCopyDeletingLastPathComponentPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  CFURLRef CFURLCreateCopyAppendingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
    CFStringRef extension1,
  ) {
    return _CFURLCreateCopyAppendingPathExtension(
      allocator,
      url,
      extension1,
    );
  }

  late final _CFURLCreateCopyAppendingPathExtensionPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFURLCreateCopyAppendingPathExtension');
  late final _CFURLCreateCopyAppendingPathExtension =
      _CFURLCreateCopyAppendingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFURLCreateCopyDeletingPathExtension(
    CFAllocatorRef allocator,
    CFURLRef url,
  ) {
    return _CFURLCreateCopyDeletingPathExtension(
      allocator,
      url,
    );
  }

  late final _CFURLCreateCopyDeletingPathExtensionPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFAllocatorRef, CFURLRef)>>(
          'CFURLCreateCopyDeletingPathExtension');
  late final _CFURLCreateCopyDeletingPathExtension =
      _CFURLCreateCopyDeletingPathExtensionPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef)>();

  int CFURLGetBytes(
    CFURLRef url,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFURLGetBytes(
      url,
      buffer,
      bufferLength,
    );
  }

  late final _CFURLGetBytesPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFURLRef, ffi.Pointer<UInt8>, CFIndex)>>('CFURLGetBytes');
  late final _CFURLGetBytes = _CFURLGetBytesPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<UInt8>, int)>();

  CFRange CFURLGetByteRangeForComponent(
    CFURLRef url,
    int component,
    ffi.Pointer<CFRange> rangeIncludingSeparators,
  ) {
    return _CFURLGetByteRangeForComponent(
      url,
      component,
      rangeIncludingSeparators,
    );
  }

  late final _CFURLGetByteRangeForComponentPtr = _lookup<
      ffi.NativeFunction<
          CFRange Function(CFURLRef, CFURLComponentType,
              ffi.Pointer<CFRange>)>>('CFURLGetByteRangeForComponent');
  late final _CFURLGetByteRangeForComponent = _CFURLGetByteRangeForComponentPtr
      .asFunction<CFRange Function(CFURLRef, int, ffi.Pointer<CFRange>)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveEscaped,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveEscaped,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFStringRef)>>('CFURLCreateStringByReplacingPercentEscapes');
  late final _CFURLCreateStringByReplacingPercentEscapes =
      _CFURLCreateStringByReplacingPercentEscapesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef)>();

  CFStringRef CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
    CFAllocatorRef allocator,
    CFStringRef origString,
    CFStringRef charsToLeaveEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByReplacingPercentEscapesUsingEncoding(
      allocator,
      origString,
      charsToLeaveEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr =
      _lookup<
              ffi.NativeFunction<
                  CFStringRef Function(CFAllocatorRef, CFStringRef, CFStringRef,
                      CFStringEncoding)>>(
          'CFURLCreateStringByReplacingPercentEscapesUsingEncoding');
  late final _CFURLCreateStringByReplacingPercentEscapesUsingEncoding =
      _CFURLCreateStringByReplacingPercentEscapesUsingEncodingPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, int)>();

  CFStringRef CFURLCreateStringByAddingPercentEscapes(
    CFAllocatorRef allocator,
    CFStringRef originalString,
    CFStringRef charactersToLeaveUnescaped,
    CFStringRef legalURLCharactersToBeEscaped,
    int encoding,
  ) {
    return _CFURLCreateStringByAddingPercentEscapes(
      allocator,
      originalString,
      charactersToLeaveUnescaped,
      legalURLCharactersToBeEscaped,
      encoding,
    );
  }

  late final _CFURLCreateStringByAddingPercentEscapesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringEncoding)>>('CFURLCreateStringByAddingPercentEscapes');
  late final _CFURLCreateStringByAddingPercentEscapes =
      _CFURLCreateStringByAddingPercentEscapesPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, CFStringRef, CFStringRef, CFStringRef, int)>();

  int CFURLIsFileReferenceURL(
    CFURLRef url,
  ) {
    return _CFURLIsFileReferenceURL(
      url,
    );
  }

  late final _CFURLIsFileReferenceURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLIsFileReferenceURL');
  late final _CFURLIsFileReferenceURL =
      _CFURLIsFileReferenceURLPtr.asFunction<int Function(CFURLRef)>();

  CFURLRef CFURLCreateFileReferenceURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFileReferenceURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFileReferenceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFileReferenceURL');
  late final _CFURLCreateFileReferenceURL =
      _CFURLCreateFileReferenceURLPtr.asFunction<
          CFURLRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFilePathURL(
    CFAllocatorRef allocator,
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateFilePathURL(
      allocator,
      url,
      error,
    );
  }

  late final _CFURLCreateFilePathURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateFilePathURL');
  late final _CFURLCreateFilePathURL = _CFURLCreateFilePathURLPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateFromFSRef(
    CFAllocatorRef allocator,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLCreateFromFSRef(
      allocator,
      fsRef,
    );
  }

  late final _CFURLCreateFromFSRefPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef, ffi.Pointer<FSRef>)>>('CFURLCreateFromFSRef');
  late final _CFURLCreateFromFSRef = _CFURLCreateFromFSRefPtr.asFunction<
      CFURLRef Function(CFAllocatorRef, ffi.Pointer<FSRef>)>();

  int CFURLGetFSRef(
    CFURLRef url,
    ffi.Pointer<FSRef> fsRef,
  ) {
    return _CFURLGetFSRef(
      url,
      fsRef,
    );
  }

  late final _CFURLGetFSRefPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<FSRef>)>>(
      'CFURLGetFSRef');
  late final _CFURLGetFSRef = _CFURLGetFSRefPtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<FSRef>)>();

  int CFURLCopyResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    ffi.Pointer<ffi.Void> propertyValueTypeRefPtr,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertyForKey(
      url,
      key,
      propertyValueTypeRefPtr,
      error,
    );
  }

  late final _CFURLCopyResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertyForKey');
  late final _CFURLCopyResourcePropertyForKey =
      _CFURLCopyResourcePropertyForKeyPtr.asFunction<
          int Function(CFURLRef, CFStringRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCopyResourcePropertiesForKeys(
    CFURLRef url,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCopyResourcePropertiesForKeys(
      url,
      keys,
      error,
    );
  }

  late final _CFURLCopyResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFURLRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCopyResourcePropertiesForKeys');
  late final _CFURLCopyResourcePropertiesForKeys =
      _CFURLCopyResourcePropertiesForKeysPtr.asFunction<
          CFDictionaryRef Function(
              CFURLRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertyForKey(
      url,
      key,
      propertyValue,
      error,
    );
  }

  late final _CFURLSetResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFStringRef, CFTypeRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertyForKey');
  late final _CFURLSetResourcePropertyForKey =
      _CFURLSetResourcePropertyForKeyPtr.asFunction<
          int Function(
              CFURLRef, CFStringRef, CFTypeRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLSetResourcePropertiesForKeys(
    CFURLRef url,
    CFDictionaryRef keyedPropertyValues,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLSetResourcePropertiesForKeys(
      url,
      keyedPropertyValues,
      error,
    );
  }

  late final _CFURLSetResourcePropertiesForKeysPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDictionaryRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLSetResourcePropertiesForKeys');
  late final _CFURLSetResourcePropertiesForKeys =
      _CFURLSetResourcePropertiesForKeysPtr.asFunction<
          int Function(CFURLRef, CFDictionaryRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLKeysOfUnsetValuesKey =
      _lookup<CFStringRef>('kCFURLKeysOfUnsetValuesKey');

  CFStringRef get kCFURLKeysOfUnsetValuesKey =>
      _kCFURLKeysOfUnsetValuesKey.value;

  set kCFURLKeysOfUnsetValuesKey(CFStringRef value) =>
      _kCFURLKeysOfUnsetValuesKey.value = value;

  void CFURLClearResourcePropertyCacheForKey(
    CFURLRef url,
    CFStringRef key,
  ) {
    return _CFURLClearResourcePropertyCacheForKey(
      url,
      key,
    );
  }

  late final _CFURLClearResourcePropertyCacheForKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef, CFStringRef)>>(
          'CFURLClearResourcePropertyCacheForKey');
  late final _CFURLClearResourcePropertyCacheForKey =
      _CFURLClearResourcePropertyCacheForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef)>();

  void CFURLClearResourcePropertyCache(
    CFURLRef url,
  ) {
    return _CFURLClearResourcePropertyCache(
      url,
    );
  }

  late final _CFURLClearResourcePropertyCachePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLClearResourcePropertyCache');
  late final _CFURLClearResourcePropertyCache =
      _CFURLClearResourcePropertyCachePtr.asFunction<void Function(CFURLRef)>();

  void CFURLSetTemporaryResourcePropertyForKey(
    CFURLRef url,
    CFStringRef key,
    CFTypeRef propertyValue,
  ) {
    return _CFURLSetTemporaryResourcePropertyForKey(
      url,
      key,
      propertyValue,
    );
  }

  late final _CFURLSetTemporaryResourcePropertyForKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFURLRef, CFStringRef,
              CFTypeRef)>>('CFURLSetTemporaryResourcePropertyForKey');
  late final _CFURLSetTemporaryResourcePropertyForKey =
      _CFURLSetTemporaryResourcePropertyForKeyPtr.asFunction<
          void Function(CFURLRef, CFStringRef, CFTypeRef)>();

  int CFURLResourceIsReachable(
    CFURLRef url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLResourceIsReachable(
      url,
      error,
    );
  }

  late final _CFURLResourceIsReachablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFURLRef, ffi.Pointer<CFErrorRef>)>>('CFURLResourceIsReachable');
  late final _CFURLResourceIsReachable = _CFURLResourceIsReachablePtr
      .asFunction<int Function(CFURLRef, ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLNameKey =
      _lookup<CFStringRef>('kCFURLNameKey');

  CFStringRef get kCFURLNameKey => _kCFURLNameKey.value;

  set kCFURLNameKey(CFStringRef value) => _kCFURLNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLLocalizedNameKey');

  CFStringRef get kCFURLLocalizedNameKey => _kCFURLLocalizedNameKey.value;

  set kCFURLLocalizedNameKey(CFStringRef value) =>
      _kCFURLLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsRegularFileKey =
      _lookup<CFStringRef>('kCFURLIsRegularFileKey');

  CFStringRef get kCFURLIsRegularFileKey => _kCFURLIsRegularFileKey.value;

  set kCFURLIsRegularFileKey(CFStringRef value) =>
      _kCFURLIsRegularFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsDirectoryKey =
      _lookup<CFStringRef>('kCFURLIsDirectoryKey');

  CFStringRef get kCFURLIsDirectoryKey => _kCFURLIsDirectoryKey.value;

  set kCFURLIsDirectoryKey(CFStringRef value) =>
      _kCFURLIsDirectoryKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSymbolicLinkKey =
      _lookup<CFStringRef>('kCFURLIsSymbolicLinkKey');

  CFStringRef get kCFURLIsSymbolicLinkKey => _kCFURLIsSymbolicLinkKey.value;

  set kCFURLIsSymbolicLinkKey(CFStringRef value) =>
      _kCFURLIsSymbolicLinkKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsVolumeKey =
      _lookup<CFStringRef>('kCFURLIsVolumeKey');

  CFStringRef get kCFURLIsVolumeKey => _kCFURLIsVolumeKey.value;

  set kCFURLIsVolumeKey(CFStringRef value) => _kCFURLIsVolumeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPackageKey =
      _lookup<CFStringRef>('kCFURLIsPackageKey');

  CFStringRef get kCFURLIsPackageKey => _kCFURLIsPackageKey.value;

  set kCFURLIsPackageKey(CFStringRef value) =>
      _kCFURLIsPackageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsApplicationKey =
      _lookup<CFStringRef>('kCFURLIsApplicationKey');

  CFStringRef get kCFURLIsApplicationKey => _kCFURLIsApplicationKey.value;

  set kCFURLIsApplicationKey(CFStringRef value) =>
      _kCFURLIsApplicationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLApplicationIsScriptableKey =
      _lookup<CFStringRef>('kCFURLApplicationIsScriptableKey');

  CFStringRef get kCFURLApplicationIsScriptableKey =>
      _kCFURLApplicationIsScriptableKey.value;

  set kCFURLApplicationIsScriptableKey(CFStringRef value) =>
      _kCFURLApplicationIsScriptableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSystemImmutableKey =
      _lookup<CFStringRef>('kCFURLIsSystemImmutableKey');

  CFStringRef get kCFURLIsSystemImmutableKey =>
      _kCFURLIsSystemImmutableKey.value;

  set kCFURLIsSystemImmutableKey(CFStringRef value) =>
      _kCFURLIsSystemImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUserImmutableKey =
      _lookup<CFStringRef>('kCFURLIsUserImmutableKey');

  CFStringRef get kCFURLIsUserImmutableKey => _kCFURLIsUserImmutableKey.value;

  set kCFURLIsUserImmutableKey(CFStringRef value) =>
      _kCFURLIsUserImmutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsHiddenKey =
      _lookup<CFStringRef>('kCFURLIsHiddenKey');

  CFStringRef get kCFURLIsHiddenKey => _kCFURLIsHiddenKey.value;

  set kCFURLIsHiddenKey(CFStringRef value) => _kCFURLIsHiddenKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHasHiddenExtensionKey =
      _lookup<CFStringRef>('kCFURLHasHiddenExtensionKey');

  CFStringRef get kCFURLHasHiddenExtensionKey =>
      _kCFURLHasHiddenExtensionKey.value;

  set kCFURLHasHiddenExtensionKey(CFStringRef value) =>
      _kCFURLHasHiddenExtensionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCreationDateKey =
      _lookup<CFStringRef>('kCFURLCreationDateKey');

  CFStringRef get kCFURLCreationDateKey => _kCFURLCreationDateKey.value;

  set kCFURLCreationDateKey(CFStringRef value) =>
      _kCFURLCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentAccessDateKey =
      _lookup<CFStringRef>('kCFURLContentAccessDateKey');

  CFStringRef get kCFURLContentAccessDateKey =>
      _kCFURLContentAccessDateKey.value;

  set kCFURLContentAccessDateKey(CFStringRef value) =>
      _kCFURLContentAccessDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLContentModificationDateKey =
      _lookup<CFStringRef>('kCFURLContentModificationDateKey');

  CFStringRef get kCFURLContentModificationDateKey =>
      _kCFURLContentModificationDateKey.value;

  set kCFURLContentModificationDateKey(CFStringRef value) =>
      _kCFURLContentModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAttributeModificationDateKey =
      _lookup<CFStringRef>('kCFURLAttributeModificationDateKey');

  CFStringRef get kCFURLAttributeModificationDateKey =>
      _kCFURLAttributeModificationDateKey.value;

  set kCFURLAttributeModificationDateKey(CFStringRef value) =>
      _kCFURLAttributeModificationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileContentIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileContentIdentifierKey');

  CFStringRef get kCFURLFileContentIdentifierKey =>
      _kCFURLFileContentIdentifierKey.value;

  set kCFURLFileContentIdentifierKey(CFStringRef value) =>
      _kCFURLFileContentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayShareFileContentKey =
      _lookup<CFStringRef>('kCFURLMayShareFileContentKey');

  CFStringRef get kCFURLMayShareFileContentKey =>
      _kCFURLMayShareFileContentKey.value;

  set kCFURLMayShareFileContentKey(CFStringRef value) =>
      _kCFURLMayShareFileContentKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLMayHaveExtendedAttributesKey =
      _lookup<CFStringRef>('kCFURLMayHaveExtendedAttributesKey');

  CFStringRef get kCFURLMayHaveExtendedAttributesKey =>
      _kCFURLMayHaveExtendedAttributesKey.value;

  set kCFURLMayHaveExtendedAttributesKey(CFStringRef value) =>
      _kCFURLMayHaveExtendedAttributesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsPurgeableKey =
      _lookup<CFStringRef>('kCFURLIsPurgeableKey');

  CFStringRef get kCFURLIsPurgeableKey => _kCFURLIsPurgeableKey.value;

  set kCFURLIsPurgeableKey(CFStringRef value) =>
      _kCFURLIsPurgeableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsSparseKey =
      _lookup<CFStringRef>('kCFURLIsSparseKey');

  CFStringRef get kCFURLIsSparseKey => _kCFURLIsSparseKey.value;

  set kCFURLIsSparseKey(CFStringRef value) => _kCFURLIsSparseKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLinkCountKey =
      _lookup<CFStringRef>('kCFURLLinkCountKey');

  CFStringRef get kCFURLLinkCountKey => _kCFURLLinkCountKey.value;

  set kCFURLLinkCountKey(CFStringRef value) =>
      _kCFURLLinkCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLParentDirectoryURLKey =
      _lookup<CFStringRef>('kCFURLParentDirectoryURLKey');

  CFStringRef get kCFURLParentDirectoryURLKey =>
      _kCFURLParentDirectoryURLKey.value;

  set kCFURLParentDirectoryURLKey(CFStringRef value) =>
      _kCFURLParentDirectoryURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLKey =
      _lookup<CFStringRef>('kCFURLVolumeURLKey');

  CFStringRef get kCFURLVolumeURLKey => _kCFURLVolumeURLKey.value;

  set kCFURLVolumeURLKey(CFStringRef value) =>
      _kCFURLVolumeURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTypeIdentifierKey =
      _lookup<CFStringRef>('kCFURLTypeIdentifierKey');

  CFStringRef get kCFURLTypeIdentifierKey => _kCFURLTypeIdentifierKey.value;

  set kCFURLTypeIdentifierKey(CFStringRef value) =>
      _kCFURLTypeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedTypeDescriptionKey =
      _lookup<CFStringRef>('kCFURLLocalizedTypeDescriptionKey');

  CFStringRef get kCFURLLocalizedTypeDescriptionKey =>
      _kCFURLLocalizedTypeDescriptionKey.value;

  set kCFURLLocalizedTypeDescriptionKey(CFStringRef value) =>
      _kCFURLLocalizedTypeDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelNumberKey =
      _lookup<CFStringRef>('kCFURLLabelNumberKey');

  CFStringRef get kCFURLLabelNumberKey => _kCFURLLabelNumberKey.value;

  set kCFURLLabelNumberKey(CFStringRef value) =>
      _kCFURLLabelNumberKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLabelColorKey =
      _lookup<CFStringRef>('kCFURLLabelColorKey');

  CFStringRef get kCFURLLabelColorKey => _kCFURLLabelColorKey.value;

  set kCFURLLabelColorKey(CFStringRef value) =>
      _kCFURLLabelColorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLLocalizedLabelKey =
      _lookup<CFStringRef>('kCFURLLocalizedLabelKey');

  CFStringRef get kCFURLLocalizedLabelKey => _kCFURLLocalizedLabelKey.value;

  set kCFURLLocalizedLabelKey(CFStringRef value) =>
      _kCFURLLocalizedLabelKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLEffectiveIconKey =
      _lookup<CFStringRef>('kCFURLEffectiveIconKey');

  CFStringRef get kCFURLEffectiveIconKey => _kCFURLEffectiveIconKey.value;

  set kCFURLEffectiveIconKey(CFStringRef value) =>
      _kCFURLEffectiveIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCustomIconKey =
      _lookup<CFStringRef>('kCFURLCustomIconKey');

  CFStringRef get kCFURLCustomIconKey => _kCFURLCustomIconKey.value;

  set kCFURLCustomIconKey(CFStringRef value) =>
      _kCFURLCustomIconKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceIdentifierKey =
      _lookup<CFStringRef>('kCFURLFileResourceIdentifierKey');

  CFStringRef get kCFURLFileResourceIdentifierKey =>
      _kCFURLFileResourceIdentifierKey.value;

  set kCFURLFileResourceIdentifierKey(CFStringRef value) =>
      _kCFURLFileResourceIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIdentifierKey =
      _lookup<CFStringRef>('kCFURLVolumeIdentifierKey');

  CFStringRef get kCFURLVolumeIdentifierKey => _kCFURLVolumeIdentifierKey.value;

  set kCFURLVolumeIdentifierKey(CFStringRef value) =>
      _kCFURLVolumeIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPreferredIOBlockSizeKey =
      _lookup<CFStringRef>('kCFURLPreferredIOBlockSizeKey');

  CFStringRef get kCFURLPreferredIOBlockSizeKey =>
      _kCFURLPreferredIOBlockSizeKey.value;

  set kCFURLPreferredIOBlockSizeKey(CFStringRef value) =>
      _kCFURLPreferredIOBlockSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsReadableKey =
      _lookup<CFStringRef>('kCFURLIsReadableKey');

  CFStringRef get kCFURLIsReadableKey => _kCFURLIsReadableKey.value;

  set kCFURLIsReadableKey(CFStringRef value) =>
      _kCFURLIsReadableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsWritableKey =
      _lookup<CFStringRef>('kCFURLIsWritableKey');

  CFStringRef get kCFURLIsWritableKey => _kCFURLIsWritableKey.value;

  set kCFURLIsWritableKey(CFStringRef value) =>
      _kCFURLIsWritableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExecutableKey =
      _lookup<CFStringRef>('kCFURLIsExecutableKey');

  CFStringRef get kCFURLIsExecutableKey => _kCFURLIsExecutableKey.value;

  set kCFURLIsExecutableKey(CFStringRef value) =>
      _kCFURLIsExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSecurityKey =
      _lookup<CFStringRef>('kCFURLFileSecurityKey');

  CFStringRef get kCFURLFileSecurityKey => _kCFURLFileSecurityKey.value;

  set kCFURLFileSecurityKey(CFStringRef value) =>
      _kCFURLFileSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsExcludedFromBackupKey =
      _lookup<CFStringRef>('kCFURLIsExcludedFromBackupKey');

  CFStringRef get kCFURLIsExcludedFromBackupKey =>
      _kCFURLIsExcludedFromBackupKey.value;

  set kCFURLIsExcludedFromBackupKey(CFStringRef value) =>
      _kCFURLIsExcludedFromBackupKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTagNamesKey =
      _lookup<CFStringRef>('kCFURLTagNamesKey');

  CFStringRef get kCFURLTagNamesKey => _kCFURLTagNamesKey.value;

  set kCFURLTagNamesKey(CFStringRef value) => _kCFURLTagNamesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLPathKey =
      _lookup<CFStringRef>('kCFURLPathKey');

  CFStringRef get kCFURLPathKey => _kCFURLPathKey.value;

  set kCFURLPathKey(CFStringRef value) => _kCFURLPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLCanonicalPathKey =
      _lookup<CFStringRef>('kCFURLCanonicalPathKey');

  CFStringRef get kCFURLCanonicalPathKey => _kCFURLCanonicalPathKey.value;

  set kCFURLCanonicalPathKey(CFStringRef value) =>
      _kCFURLCanonicalPathKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsMountTriggerKey =
      _lookup<CFStringRef>('kCFURLIsMountTriggerKey');

  CFStringRef get kCFURLIsMountTriggerKey => _kCFURLIsMountTriggerKey.value;

  set kCFURLIsMountTriggerKey(CFStringRef value) =>
      _kCFURLIsMountTriggerKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLGenerationIdentifierKey =
      _lookup<CFStringRef>('kCFURLGenerationIdentifierKey');

  CFStringRef get kCFURLGenerationIdentifierKey =>
      _kCFURLGenerationIdentifierKey.value;

  set kCFURLGenerationIdentifierKey(CFStringRef value) =>
      _kCFURLGenerationIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLDocumentIdentifierKey =
      _lookup<CFStringRef>('kCFURLDocumentIdentifierKey');

  CFStringRef get kCFURLDocumentIdentifierKey =>
      _kCFURLDocumentIdentifierKey.value;

  set kCFURLDocumentIdentifierKey(CFStringRef value) =>
      _kCFURLDocumentIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLAddedToDirectoryDateKey =
      _lookup<CFStringRef>('kCFURLAddedToDirectoryDateKey');

  CFStringRef get kCFURLAddedToDirectoryDateKey =>
      _kCFURLAddedToDirectoryDateKey.value;

  set kCFURLAddedToDirectoryDateKey(CFStringRef value) =>
      _kCFURLAddedToDirectoryDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLQuarantinePropertiesKey =
      _lookup<CFStringRef>('kCFURLQuarantinePropertiesKey');

  CFStringRef get kCFURLQuarantinePropertiesKey =>
      _kCFURLQuarantinePropertiesKey.value;

  set kCFURLQuarantinePropertiesKey(CFStringRef value) =>
      _kCFURLQuarantinePropertiesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeKey =
      _lookup<CFStringRef>('kCFURLFileResourceTypeKey');

  CFStringRef get kCFURLFileResourceTypeKey => _kCFURLFileResourceTypeKey.value;

  set kCFURLFileResourceTypeKey(CFStringRef value) =>
      _kCFURLFileResourceTypeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeNamedPipe =
      _lookup<CFStringRef>('kCFURLFileResourceTypeNamedPipe');

  CFStringRef get kCFURLFileResourceTypeNamedPipe =>
      _kCFURLFileResourceTypeNamedPipe.value;

  set kCFURLFileResourceTypeNamedPipe(CFStringRef value) =>
      _kCFURLFileResourceTypeNamedPipe.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeCharacterSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeCharacterSpecial');

  CFStringRef get kCFURLFileResourceTypeCharacterSpecial =>
      _kCFURLFileResourceTypeCharacterSpecial.value;

  set kCFURLFileResourceTypeCharacterSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeCharacterSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeDirectory =
      _lookup<CFStringRef>('kCFURLFileResourceTypeDirectory');

  CFStringRef get kCFURLFileResourceTypeDirectory =>
      _kCFURLFileResourceTypeDirectory.value;

  set kCFURLFileResourceTypeDirectory(CFStringRef value) =>
      _kCFURLFileResourceTypeDirectory.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeBlockSpecial =
      _lookup<CFStringRef>('kCFURLFileResourceTypeBlockSpecial');

  CFStringRef get kCFURLFileResourceTypeBlockSpecial =>
      _kCFURLFileResourceTypeBlockSpecial.value;

  set kCFURLFileResourceTypeBlockSpecial(CFStringRef value) =>
      _kCFURLFileResourceTypeBlockSpecial.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeRegular =
      _lookup<CFStringRef>('kCFURLFileResourceTypeRegular');

  CFStringRef get kCFURLFileResourceTypeRegular =>
      _kCFURLFileResourceTypeRegular.value;

  set kCFURLFileResourceTypeRegular(CFStringRef value) =>
      _kCFURLFileResourceTypeRegular.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSymbolicLink =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSymbolicLink');

  CFStringRef get kCFURLFileResourceTypeSymbolicLink =>
      _kCFURLFileResourceTypeSymbolicLink.value;

  set kCFURLFileResourceTypeSymbolicLink(CFStringRef value) =>
      _kCFURLFileResourceTypeSymbolicLink.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeSocket =
      _lookup<CFStringRef>('kCFURLFileResourceTypeSocket');

  CFStringRef get kCFURLFileResourceTypeSocket =>
      _kCFURLFileResourceTypeSocket.value;

  set kCFURLFileResourceTypeSocket(CFStringRef value) =>
      _kCFURLFileResourceTypeSocket.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileResourceTypeUnknown =
      _lookup<CFStringRef>('kCFURLFileResourceTypeUnknown');

  CFStringRef get kCFURLFileResourceTypeUnknown =>
      _kCFURLFileResourceTypeUnknown.value;

  set kCFURLFileResourceTypeUnknown(CFStringRef value) =>
      _kCFURLFileResourceTypeUnknown.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileSizeKey =
      _lookup<CFStringRef>('kCFURLFileSizeKey');

  CFStringRef get kCFURLFileSizeKey => _kCFURLFileSizeKey.value;

  set kCFURLFileSizeKey(CFStringRef value) => _kCFURLFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLFileAllocatedSizeKey');

  CFStringRef get kCFURLFileAllocatedSizeKey =>
      _kCFURLFileAllocatedSizeKey.value;

  set kCFURLFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileSizeKey');

  CFStringRef get kCFURLTotalFileSizeKey => _kCFURLTotalFileSizeKey.value;

  set kCFURLTotalFileSizeKey(CFStringRef value) =>
      _kCFURLTotalFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLTotalFileAllocatedSizeKey =
      _lookup<CFStringRef>('kCFURLTotalFileAllocatedSizeKey');

  CFStringRef get kCFURLTotalFileAllocatedSizeKey =>
      _kCFURLTotalFileAllocatedSizeKey.value;

  set kCFURLTotalFileAllocatedSizeKey(CFStringRef value) =>
      _kCFURLTotalFileAllocatedSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsAliasFileKey =
      _lookup<CFStringRef>('kCFURLIsAliasFileKey');

  CFStringRef get kCFURLIsAliasFileKey => _kCFURLIsAliasFileKey.value;

  set kCFURLIsAliasFileKey(CFStringRef value) =>
      _kCFURLIsAliasFileKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionKey =
      _lookup<CFStringRef>('kCFURLFileProtectionKey');

  CFStringRef get kCFURLFileProtectionKey => _kCFURLFileProtectionKey.value;

  set kCFURLFileProtectionKey(CFStringRef value) =>
      _kCFURLFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionNone =
      _lookup<CFStringRef>('kCFURLFileProtectionNone');

  CFStringRef get kCFURLFileProtectionNone => _kCFURLFileProtectionNone.value;

  set kCFURLFileProtectionNone(CFStringRef value) =>
      _kCFURLFileProtectionNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionComplete =
      _lookup<CFStringRef>('kCFURLFileProtectionComplete');

  CFStringRef get kCFURLFileProtectionComplete =>
      _kCFURLFileProtectionComplete.value;

  set kCFURLFileProtectionComplete(CFStringRef value) =>
      _kCFURLFileProtectionComplete.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileProtectionCompleteUnlessOpen =
      _lookup<CFStringRef>('kCFURLFileProtectionCompleteUnlessOpen');

  CFStringRef get kCFURLFileProtectionCompleteUnlessOpen =>
      _kCFURLFileProtectionCompleteUnlessOpen.value;

  set kCFURLFileProtectionCompleteUnlessOpen(CFStringRef value) =>
      _kCFURLFileProtectionCompleteUnlessOpen.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication =
      _lookup<CFStringRef>(
          'kCFURLFileProtectionCompleteUntilFirstUserAuthentication');

  CFStringRef get kCFURLFileProtectionCompleteUntilFirstUserAuthentication =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value;

  set kCFURLFileProtectionCompleteUntilFirstUserAuthentication(
          CFStringRef value) =>
      _kCFURLFileProtectionCompleteUntilFirstUserAuthentication.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeLocalizedFormatDescriptionKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedFormatDescriptionKey');

  CFStringRef get kCFURLVolumeLocalizedFormatDescriptionKey =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value;

  set kCFURLVolumeLocalizedFormatDescriptionKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedFormatDescriptionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeTotalCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeTotalCapacityKey');

  CFStringRef get kCFURLVolumeTotalCapacityKey =>
      _kCFURLVolumeTotalCapacityKey.value;

  set kCFURLVolumeTotalCapacityKey(CFStringRef value) =>
      _kCFURLVolumeTotalCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeAvailableCapacityKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityKey');

  CFStringRef get kCFURLVolumeAvailableCapacityKey =>
      _kCFURLVolumeAvailableCapacityKey.value;

  set kCFURLVolumeAvailableCapacityKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey =
      _lookup<CFStringRef>('kCFURLVolumeAvailableCapacityForImportantUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForImportantUsageKey =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value;

  set kCFURLVolumeAvailableCapacityForImportantUsageKey(CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForImportantUsageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =
      _lookup<CFStringRef>(
          'kCFURLVolumeAvailableCapacityForOpportunisticUsageKey');

  CFStringRef get kCFURLVolumeAvailableCapacityForOpportunisticUsageKey =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value;

  set kCFURLVolumeAvailableCapacityForOpportunisticUsageKey(
          CFStringRef value) =>
      _kCFURLVolumeAvailableCapacityForOpportunisticUsageKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeResourceCountKey =
      _lookup<CFStringRef>('kCFURLVolumeResourceCountKey');

  CFStringRef get kCFURLVolumeResourceCountKey =>
      _kCFURLVolumeResourceCountKey.value;

  set kCFURLVolumeResourceCountKey(CFStringRef value) =>
      _kCFURLVolumeResourceCountKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsPersistentIDsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsPersistentIDsKey');

  CFStringRef get kCFURLVolumeSupportsPersistentIDsKey =>
      _kCFURLVolumeSupportsPersistentIDsKey.value;

  set kCFURLVolumeSupportsPersistentIDsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsPersistentIDsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSymbolicLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSymbolicLinksKey');

  CFStringRef get kCFURLVolumeSupportsSymbolicLinksKey =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value;

  set kCFURLVolumeSupportsSymbolicLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSymbolicLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsHardLinksKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsHardLinksKey');

  CFStringRef get kCFURLVolumeSupportsHardLinksKey =>
      _kCFURLVolumeSupportsHardLinksKey.value;

  set kCFURLVolumeSupportsHardLinksKey(CFStringRef value) =>
      _kCFURLVolumeSupportsHardLinksKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsJournalingKey');

  CFStringRef get kCFURLVolumeSupportsJournalingKey =>
      _kCFURLVolumeSupportsJournalingKey.value;

  set kCFURLVolumeSupportsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsJournalingKey =
      _lookup<CFStringRef>('kCFURLVolumeIsJournalingKey');

  CFStringRef get kCFURLVolumeIsJournalingKey =>
      _kCFURLVolumeIsJournalingKey.value;

  set kCFURLVolumeIsJournalingKey(CFStringRef value) =>
      _kCFURLVolumeIsJournalingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSparseFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSparseFilesKey');

  CFStringRef get kCFURLVolumeSupportsSparseFilesKey =>
      _kCFURLVolumeSupportsSparseFilesKey.value;

  set kCFURLVolumeSupportsSparseFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSparseFilesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsZeroRunsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsZeroRunsKey');

  CFStringRef get kCFURLVolumeSupportsZeroRunsKey =>
      _kCFURLVolumeSupportsZeroRunsKey.value;

  set kCFURLVolumeSupportsZeroRunsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsZeroRunsKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCaseSensitiveNamesKey');

  CFStringRef get kCFURLVolumeSupportsCaseSensitiveNamesKey =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value;

  set kCFURLVolumeSupportsCaseSensitiveNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCaseSensitiveNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsCasePreservedNamesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCasePreservedNamesKey');

  CFStringRef get kCFURLVolumeSupportsCasePreservedNamesKey =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value;

  set kCFURLVolumeSupportsCasePreservedNamesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCasePreservedNamesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsRootDirectoryDatesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRootDirectoryDatesKey');

  CFStringRef get kCFURLVolumeSupportsRootDirectoryDatesKey =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value;

  set kCFURLVolumeSupportsRootDirectoryDatesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRootDirectoryDatesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsVolumeSizesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsVolumeSizesKey');

  CFStringRef get kCFURLVolumeSupportsVolumeSizesKey =>
      _kCFURLVolumeSupportsVolumeSizesKey.value;

  set kCFURLVolumeSupportsVolumeSizesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsVolumeSizesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsRenamingKey');

  CFStringRef get kCFURLVolumeSupportsRenamingKey =>
      _kCFURLVolumeSupportsRenamingKey.value;

  set kCFURLVolumeSupportsRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAdvisoryFileLockingKey');

  CFStringRef get kCFURLVolumeSupportsAdvisoryFileLockingKey =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value;

  set kCFURLVolumeSupportsAdvisoryFileLockingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAdvisoryFileLockingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsExtendedSecurityKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExtendedSecurityKey');

  CFStringRef get kCFURLVolumeSupportsExtendedSecurityKey =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value;

  set kCFURLVolumeSupportsExtendedSecurityKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExtendedSecurityKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsBrowsableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsBrowsableKey');

  CFStringRef get kCFURLVolumeIsBrowsableKey =>
      _kCFURLVolumeIsBrowsableKey.value;

  set kCFURLVolumeIsBrowsableKey(CFStringRef value) =>
      _kCFURLVolumeIsBrowsableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeMaximumFileSizeKey =
      _lookup<CFStringRef>('kCFURLVolumeMaximumFileSizeKey');

  CFStringRef get kCFURLVolumeMaximumFileSizeKey =>
      _kCFURLVolumeMaximumFileSizeKey.value;

  set kCFURLVolumeMaximumFileSizeKey(CFStringRef value) =>
      _kCFURLVolumeMaximumFileSizeKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEjectableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEjectableKey');

  CFStringRef get kCFURLVolumeIsEjectableKey =>
      _kCFURLVolumeIsEjectableKey.value;

  set kCFURLVolumeIsEjectableKey(CFStringRef value) =>
      _kCFURLVolumeIsEjectableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRemovableKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRemovableKey');

  CFStringRef get kCFURLVolumeIsRemovableKey =>
      _kCFURLVolumeIsRemovableKey.value;

  set kCFURLVolumeIsRemovableKey(CFStringRef value) =>
      _kCFURLVolumeIsRemovableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsInternalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsInternalKey');

  CFStringRef get kCFURLVolumeIsInternalKey => _kCFURLVolumeIsInternalKey.value;

  set kCFURLVolumeIsInternalKey(CFStringRef value) =>
      _kCFURLVolumeIsInternalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsAutomountedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsAutomountedKey');

  CFStringRef get kCFURLVolumeIsAutomountedKey =>
      _kCFURLVolumeIsAutomountedKey.value;

  set kCFURLVolumeIsAutomountedKey(CFStringRef value) =>
      _kCFURLVolumeIsAutomountedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsLocalKey =
      _lookup<CFStringRef>('kCFURLVolumeIsLocalKey');

  CFStringRef get kCFURLVolumeIsLocalKey => _kCFURLVolumeIsLocalKey.value;

  set kCFURLVolumeIsLocalKey(CFStringRef value) =>
      _kCFURLVolumeIsLocalKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsReadOnlyKey =
      _lookup<CFStringRef>('kCFURLVolumeIsReadOnlyKey');

  CFStringRef get kCFURLVolumeIsReadOnlyKey => _kCFURLVolumeIsReadOnlyKey.value;

  set kCFURLVolumeIsReadOnlyKey(CFStringRef value) =>
      _kCFURLVolumeIsReadOnlyKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeCreationDateKey =
      _lookup<CFStringRef>('kCFURLVolumeCreationDateKey');

  CFStringRef get kCFURLVolumeCreationDateKey =>
      _kCFURLVolumeCreationDateKey.value;

  set kCFURLVolumeCreationDateKey(CFStringRef value) =>
      _kCFURLVolumeCreationDateKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeURLForRemountingKey =
      _lookup<CFStringRef>('kCFURLVolumeURLForRemountingKey');

  CFStringRef get kCFURLVolumeURLForRemountingKey =>
      _kCFURLVolumeURLForRemountingKey.value;

  set kCFURLVolumeURLForRemountingKey(CFStringRef value) =>
      _kCFURLVolumeURLForRemountingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeUUIDStringKey =
      _lookup<CFStringRef>('kCFURLVolumeUUIDStringKey');

  CFStringRef get kCFURLVolumeUUIDStringKey => _kCFURLVolumeUUIDStringKey.value;

  set kCFURLVolumeUUIDStringKey(CFStringRef value) =>
      _kCFURLVolumeUUIDStringKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeNameKey =
      _lookup<CFStringRef>('kCFURLVolumeNameKey');

  CFStringRef get kCFURLVolumeNameKey => _kCFURLVolumeNameKey.value;

  set kCFURLVolumeNameKey(CFStringRef value) =>
      _kCFURLVolumeNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeLocalizedNameKey =
      _lookup<CFStringRef>('kCFURLVolumeLocalizedNameKey');

  CFStringRef get kCFURLVolumeLocalizedNameKey =>
      _kCFURLVolumeLocalizedNameKey.value;

  set kCFURLVolumeLocalizedNameKey(CFStringRef value) =>
      _kCFURLVolumeLocalizedNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsEncryptedKey =
      _lookup<CFStringRef>('kCFURLVolumeIsEncryptedKey');

  CFStringRef get kCFURLVolumeIsEncryptedKey =>
      _kCFURLVolumeIsEncryptedKey.value;

  set kCFURLVolumeIsEncryptedKey(CFStringRef value) =>
      _kCFURLVolumeIsEncryptedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeIsRootFileSystemKey =
      _lookup<CFStringRef>('kCFURLVolumeIsRootFileSystemKey');

  CFStringRef get kCFURLVolumeIsRootFileSystemKey =>
      _kCFURLVolumeIsRootFileSystemKey.value;

  set kCFURLVolumeIsRootFileSystemKey(CFStringRef value) =>
      _kCFURLVolumeIsRootFileSystemKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsCompressionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsCompressionKey');

  CFStringRef get kCFURLVolumeSupportsCompressionKey =>
      _kCFURLVolumeSupportsCompressionKey.value;

  set kCFURLVolumeSupportsCompressionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsCompressionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileCloningKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileCloningKey');

  CFStringRef get kCFURLVolumeSupportsFileCloningKey =>
      _kCFURLVolumeSupportsFileCloningKey.value;

  set kCFURLVolumeSupportsFileCloningKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileCloningKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsSwapRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsSwapRenamingKey');

  CFStringRef get kCFURLVolumeSupportsSwapRenamingKey =>
      _kCFURLVolumeSupportsSwapRenamingKey.value;

  set kCFURLVolumeSupportsSwapRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsSwapRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsExclusiveRenamingKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsExclusiveRenamingKey');

  CFStringRef get kCFURLVolumeSupportsExclusiveRenamingKey =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value;

  set kCFURLVolumeSupportsExclusiveRenamingKey(CFStringRef value) =>
      _kCFURLVolumeSupportsExclusiveRenamingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsImmutableFilesKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsImmutableFilesKey');

  CFStringRef get kCFURLVolumeSupportsImmutableFilesKey =>
      _kCFURLVolumeSupportsImmutableFilesKey.value;

  set kCFURLVolumeSupportsImmutableFilesKey(CFStringRef value) =>
      _kCFURLVolumeSupportsImmutableFilesKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLVolumeSupportsAccessPermissionsKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsAccessPermissionsKey');

  CFStringRef get kCFURLVolumeSupportsAccessPermissionsKey =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value;

  set kCFURLVolumeSupportsAccessPermissionsKey(CFStringRef value) =>
      _kCFURLVolumeSupportsAccessPermissionsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLVolumeSupportsFileProtectionKey =
      _lookup<CFStringRef>('kCFURLVolumeSupportsFileProtectionKey');

  CFStringRef get kCFURLVolumeSupportsFileProtectionKey =>
      _kCFURLVolumeSupportsFileProtectionKey.value;

  set kCFURLVolumeSupportsFileProtectionKey(CFStringRef value) =>
      _kCFURLVolumeSupportsFileProtectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLIsUbiquitousItemKey =
      _lookup<CFStringRef>('kCFURLIsUbiquitousItemKey');

  CFStringRef get kCFURLIsUbiquitousItemKey => _kCFURLIsUbiquitousItemKey.value;

  set kCFURLIsUbiquitousItemKey(CFStringRef value) =>
      _kCFURLIsUbiquitousItemKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemHasUnresolvedConflictsKey');

  CFStringRef get kCFURLUbiquitousItemHasUnresolvedConflictsKey =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value;

  set kCFURLUbiquitousItemHasUnresolvedConflictsKey(CFStringRef value) =>
      _kCFURLUbiquitousItemHasUnresolvedConflictsKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadedKey =>
      _kCFURLUbiquitousItemIsDownloadedKey.value;

  set kCFURLUbiquitousItemIsDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsDownloadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsDownloadingKey');

  CFStringRef get kCFURLUbiquitousItemIsDownloadingKey =>
      _kCFURLUbiquitousItemIsDownloadingKey.value;

  set kCFURLUbiquitousItemIsDownloadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsDownloadingKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadedKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadedKey =>
      _kCFURLUbiquitousItemIsUploadedKey.value;

  set kCFURLUbiquitousItemIsUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemIsUploadingKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsUploadingKey');

  CFStringRef get kCFURLUbiquitousItemIsUploadingKey =>
      _kCFURLUbiquitousItemIsUploadingKey.value;

  set kCFURLUbiquitousItemIsUploadingKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsUploadingKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemPercentDownloadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentDownloadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentDownloadedKey =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value;

  set kCFURLUbiquitousItemPercentDownloadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentDownloadedKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemPercentUploadedKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemPercentUploadedKey');

  CFStringRef get kCFURLUbiquitousItemPercentUploadedKey =>
      _kCFURLUbiquitousItemPercentUploadedKey.value;

  set kCFURLUbiquitousItemPercentUploadedKey(CFStringRef value) =>
      _kCFURLUbiquitousItemPercentUploadedKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusKey =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value;

  set kCFURLUbiquitousItemDownloadingStatusKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemDownloadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemDownloadingErrorKey =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value;

  set kCFURLUbiquitousItemDownloadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLUbiquitousItemUploadingErrorKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemUploadingErrorKey');

  CFStringRef get kCFURLUbiquitousItemUploadingErrorKey =>
      _kCFURLUbiquitousItemUploadingErrorKey.value;

  set kCFURLUbiquitousItemUploadingErrorKey(CFStringRef value) =>
      _kCFURLUbiquitousItemUploadingErrorKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey =
      _lookup<CFStringRef>('kCFURLUbiquitousItemIsExcludedFromSyncKey');

  CFStringRef get kCFURLUbiquitousItemIsExcludedFromSyncKey =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value;

  set kCFURLUbiquitousItemIsExcludedFromSyncKey(CFStringRef value) =>
      _kCFURLUbiquitousItemIsExcludedFromSyncKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded =
      _lookup<CFStringRef>(
          'kCFURLUbiquitousItemDownloadingStatusNotDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusNotDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusNotDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusNotDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusDownloaded');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusDownloaded =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value;

  set kCFURLUbiquitousItemDownloadingStatusDownloaded(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusDownloaded.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFURLUbiquitousItemDownloadingStatusCurrent =
      _lookup<CFStringRef>('kCFURLUbiquitousItemDownloadingStatusCurrent');

  CFStringRef get kCFURLUbiquitousItemDownloadingStatusCurrent =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value;

  set kCFURLUbiquitousItemDownloadingStatusCurrent(CFStringRef value) =>
      _kCFURLUbiquitousItemDownloadingStatusCurrent.value = value;

  CFDataRef CFURLCreateBookmarkData(
    CFAllocatorRef allocator,
    CFURLRef url,
    int options,
    CFArrayRef resourcePropertiesToInclude,
    CFURLRef relativeToURL,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateBookmarkData(
      allocator,
      url,
      options,
      resourcePropertiesToInclude,
      relativeToURL,
      error,
    );
  }

  late final _CFURLCreateBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFURLRef,
              CFURLBookmarkCreationOptions,
              CFArrayRef,
              CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkData');
  late final _CFURLCreateBookmarkData = _CFURLCreateBookmarkDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFURLRef, int, CFArrayRef, CFURLRef,
          ffi.Pointer<CFErrorRef>)>();

  CFURLRef CFURLCreateByResolvingBookmarkData(
    CFAllocatorRef allocator,
    CFDataRef bookmark,
    int options,
    CFURLRef relativeToURL,
    CFArrayRef resourcePropertiesToInclude,
    ffi.Pointer<Boolean> isStale,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLCreateByResolvingBookmarkData(
      allocator,
      bookmark,
      options,
      relativeToURL,
      resourcePropertiesToInclude,
      isStale,
      error,
    );
  }

  late final _CFURLCreateByResolvingBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLBookmarkResolutionOptions,
              CFURLRef,
              CFArrayRef,
              ffi.Pointer<Boolean>,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateByResolvingBookmarkData');
  late final _CFURLCreateByResolvingBookmarkData =
      _CFURLCreateByResolvingBookmarkDataPtr.asFunction<
          CFURLRef Function(CFAllocatorRef, CFDataRef, int, CFURLRef,
              CFArrayRef, ffi.Pointer<Boolean>, ffi.Pointer<CFErrorRef>)>();

  CFDictionaryRef CFURLCreateResourcePropertiesForKeysFromBookmarkData(
    CFAllocatorRef allocator,
    CFArrayRef resourcePropertiesToReturn,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertiesForKeysFromBookmarkData(
      allocator,
      resourcePropertiesToReturn,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr = _lookup<
          ffi.NativeFunction<
              CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>>(
      'CFURLCreateResourcePropertiesForKeysFromBookmarkData');
  late final _CFURLCreateResourcePropertiesForKeysFromBookmarkData =
      _CFURLCreateResourcePropertiesForKeysFromBookmarkDataPtr.asFunction<
          CFDictionaryRef Function(CFAllocatorRef, CFArrayRef, CFDataRef)>();

  CFTypeRef CFURLCreateResourcePropertyForKeyFromBookmarkData(
    CFAllocatorRef allocator,
    CFStringRef resourcePropertyKey,
    CFDataRef bookmark,
  ) {
    return _CFURLCreateResourcePropertyForKeyFromBookmarkData(
      allocator,
      resourcePropertyKey,
      bookmark,
    );
  }

  late final _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef,
              CFDataRef)>>('CFURLCreateResourcePropertyForKeyFromBookmarkData');
  late final _CFURLCreateResourcePropertyForKeyFromBookmarkData =
      _CFURLCreateResourcePropertyForKeyFromBookmarkDataPtr.asFunction<
          CFTypeRef Function(CFAllocatorRef, CFStringRef, CFDataRef)>();

  CFDataRef CFURLCreateBookmarkDataFromFile(
    CFAllocatorRef allocator,
    CFURLRef fileURL,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLCreateBookmarkDataFromFile(
      allocator,
      fileURL,
      errorRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromFilePtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef, CFURLRef,
              ffi.Pointer<CFErrorRef>)>>('CFURLCreateBookmarkDataFromFile');
  late final _CFURLCreateBookmarkDataFromFile =
      _CFURLCreateBookmarkDataFromFilePtr.asFunction<
          CFDataRef Function(
              CFAllocatorRef, CFURLRef, ffi.Pointer<CFErrorRef>)>();

  int CFURLWriteBookmarkDataToFile(
    CFDataRef bookmarkRef,
    CFURLRef fileURL,
    int options,
    ffi.Pointer<CFErrorRef> errorRef,
  ) {
    return _CFURLWriteBookmarkDataToFile(
      bookmarkRef,
      fileURL,
      options,
      errorRef,
    );
  }

  late final _CFURLWriteBookmarkDataToFilePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFDataRef,
              CFURLRef,
              CFURLBookmarkFileCreationOptions,
              ffi.Pointer<CFErrorRef>)>>('CFURLWriteBookmarkDataToFile');
  late final _CFURLWriteBookmarkDataToFile =
      _CFURLWriteBookmarkDataToFilePtr.asFunction<
          int Function(CFDataRef, CFURLRef, int, ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFURLCreateBookmarkDataFromAliasRecord(
    CFAllocatorRef allocatorRef,
    CFDataRef aliasRecordDataRef,
  ) {
    return _CFURLCreateBookmarkDataFromAliasRecord(
      allocatorRef,
      aliasRecordDataRef,
    );
  }

  late final _CFURLCreateBookmarkDataFromAliasRecordPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFDataRef)>>(
      'CFURLCreateBookmarkDataFromAliasRecord');
  late final _CFURLCreateBookmarkDataFromAliasRecord =
      _CFURLCreateBookmarkDataFromAliasRecordPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFDataRef)>();

  int CFURLStartAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStartAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStartAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFURLStartAccessingSecurityScopedResource');
  late final _CFURLStartAccessingSecurityScopedResource =
      _CFURLStartAccessingSecurityScopedResourcePtr.asFunction<
          int Function(CFURLRef)>();

  void CFURLStopAccessingSecurityScopedResource(
    CFURLRef url,
  ) {
    return _CFURLStopAccessingSecurityScopedResource(
      url,
    );
  }

  late final _CFURLStopAccessingSecurityScopedResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLRef)>>(
          'CFURLStopAccessingSecurityScopedResource');
  late final _CFURLStopAccessingSecurityScopedResource =
      _CFURLStopAccessingSecurityScopedResourcePtr.asFunction<
          void Function(CFURLRef)>();

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopDefaultMode =
      _lookup<CFRunLoopMode>('kCFRunLoopDefaultMode');

  CFRunLoopMode get kCFRunLoopDefaultMode => _kCFRunLoopDefaultMode.value;

  set kCFRunLoopDefaultMode(CFRunLoopMode value) =>
      _kCFRunLoopDefaultMode.value = value;

  late final ffi.Pointer<CFRunLoopMode> _kCFRunLoopCommonModes =
      _lookup<CFRunLoopMode>('kCFRunLoopCommonModes');

  CFRunLoopMode get kCFRunLoopCommonModes => _kCFRunLoopCommonModes.value;

  set kCFRunLoopCommonModes(CFRunLoopMode value) =>
      _kCFRunLoopCommonModes.value = value;

  int CFRunLoopGetTypeID() {
    return _CFRunLoopGetTypeID();
  }

  late final _CFRunLoopGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFRunLoopGetTypeID');
  late final _CFRunLoopGetTypeID =
      _CFRunLoopGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopRef CFRunLoopGetCurrent() {
    return _CFRunLoopGetCurrent();
  }

  late final _CFRunLoopGetCurrentPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>(
          'CFRunLoopGetCurrent');
  late final _CFRunLoopGetCurrent =
      _CFRunLoopGetCurrentPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopRef CFRunLoopGetMain() {
    return _CFRunLoopGetMain();
  }

  late final _CFRunLoopGetMainPtr =
      _lookup<ffi.NativeFunction<CFRunLoopRef Function()>>('CFRunLoopGetMain');
  late final _CFRunLoopGetMain =
      _CFRunLoopGetMainPtr.asFunction<CFRunLoopRef Function()>();

  CFRunLoopMode CFRunLoopCopyCurrentMode(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyCurrentMode(
      rl,
    );
  }

  late final _CFRunLoopCopyCurrentModePtr =
      _lookup<ffi.NativeFunction<CFRunLoopMode Function(CFRunLoopRef)>>(
          'CFRunLoopCopyCurrentMode');
  late final _CFRunLoopCopyCurrentMode = _CFRunLoopCopyCurrentModePtr
      .asFunction<CFRunLoopMode Function(CFRunLoopRef)>();

  CFArrayRef CFRunLoopCopyAllModes(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopCopyAllModes(
      rl,
    );
  }

  late final _CFRunLoopCopyAllModesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFRunLoopRef)>>(
          'CFRunLoopCopyAllModes');
  late final _CFRunLoopCopyAllModes =
      _CFRunLoopCopyAllModesPtr.asFunction<CFArrayRef Function(CFRunLoopRef)>();

  void CFRunLoopAddCommonMode(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddCommonMode(
      rl,
      mode,
    );
  }

  late final _CFRunLoopAddCommonModePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFRunLoopRef, CFRunLoopMode)>>(
      'CFRunLoopAddCommonMode');
  late final _CFRunLoopAddCommonMode = _CFRunLoopAddCommonModePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopMode)>();

  double CFRunLoopGetNextTimerFireDate(
    CFRunLoopRef rl,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopGetNextTimerFireDate(
      rl,
      mode,
    );
  }

  late final _CFRunLoopGetNextTimerFireDatePtr = _lookup<
      ffi.NativeFunction<
          CFAbsoluteTime Function(
              CFRunLoopRef, CFRunLoopMode)>>('CFRunLoopGetNextTimerFireDate');
  late final _CFRunLoopGetNextTimerFireDate = _CFRunLoopGetNextTimerFireDatePtr
      .asFunction<double Function(CFRunLoopRef, CFRunLoopMode)>();

  void CFRunLoopRun() {
    return _CFRunLoopRun();
  }

  late final _CFRunLoopRunPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CFRunLoopRun');
  late final _CFRunLoopRun = _CFRunLoopRunPtr.asFunction<void Function()>();

  int CFRunLoopRunInMode(
    CFRunLoopMode mode,
    double seconds,
    int returnAfterSourceHandled,
  ) {
    return _CFRunLoopRunInMode(
      mode,
      seconds,
      returnAfterSourceHandled,
    );
  }

  late final _CFRunLoopRunInModePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopRunResult Function(
              CFRunLoopMode, CFTimeInterval, Boolean)>>('CFRunLoopRunInMode');
  late final _CFRunLoopRunInMode = _CFRunLoopRunInModePtr.asFunction<
      int Function(CFRunLoopMode, double, int)>();

  int CFRunLoopIsWaiting(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopIsWaiting(
      rl,
    );
  }

  late final _CFRunLoopIsWaitingPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopRef)>>(
          'CFRunLoopIsWaiting');
  late final _CFRunLoopIsWaiting =
      _CFRunLoopIsWaitingPtr.asFunction<int Function(CFRunLoopRef)>();

  void CFRunLoopWakeUp(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopWakeUp(
      rl,
    );
  }

  late final _CFRunLoopWakeUpPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopWakeUp');
  late final _CFRunLoopWakeUp =
      _CFRunLoopWakeUpPtr.asFunction<void Function(CFRunLoopRef)>();

  void CFRunLoopStop(
    CFRunLoopRef rl,
  ) {
    return _CFRunLoopStop(
      rl,
    );
  }

  late final _CFRunLoopStopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopRef)>>(
          'CFRunLoopStop');
  late final _CFRunLoopStop =
      _CFRunLoopStopPtr.asFunction<void Function(CFRunLoopRef)>();

  int CFRunLoopContainsSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopContainsSourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopContainsSource');
  late final _CFRunLoopContainsSource = _CFRunLoopContainsSourcePtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopAddSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopAddSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopAddSource');
  late final _CFRunLoopAddSource = _CFRunLoopAddSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  void CFRunLoopRemoveSource(
    CFRunLoopRef rl,
    CFRunLoopSourceRef source,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveSource(
      rl,
      source,
      mode,
    );
  }

  late final _CFRunLoopRemoveSourcePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopSourceRef,
              CFRunLoopMode)>>('CFRunLoopRemoveSource');
  late final _CFRunLoopRemoveSource = _CFRunLoopRemoveSourcePtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopSourceRef, CFRunLoopMode)>();

  int CFRunLoopContainsObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopContainsObserverPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopContainsObserver');
  late final _CFRunLoopContainsObserver =
      _CFRunLoopContainsObserverPtr.asFunction<
          int Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopAddObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopAddObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopAddObserver');
  late final _CFRunLoopAddObserver = _CFRunLoopAddObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  void CFRunLoopRemoveObserver(
    CFRunLoopRef rl,
    CFRunLoopObserverRef observer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveObserver(
      rl,
      observer,
      mode,
    );
  }

  late final _CFRunLoopRemoveObserverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopObserverRef,
              CFRunLoopMode)>>('CFRunLoopRemoveObserver');
  late final _CFRunLoopRemoveObserver = _CFRunLoopRemoveObserverPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopObserverRef, CFRunLoopMode)>();

  int CFRunLoopContainsTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopContainsTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopContainsTimerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopContainsTimer');
  late final _CFRunLoopContainsTimer = _CFRunLoopContainsTimerPtr.asFunction<
      int Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopAddTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopAddTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopAddTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopAddTimer');
  late final _CFRunLoopAddTimer = _CFRunLoopAddTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  void CFRunLoopRemoveTimer(
    CFRunLoopRef rl,
    CFRunLoopTimerRef timer,
    CFRunLoopMode mode,
  ) {
    return _CFRunLoopRemoveTimer(
      rl,
      timer,
      mode,
    );
  }

  late final _CFRunLoopRemoveTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopRef, CFRunLoopTimerRef,
              CFRunLoopMode)>>('CFRunLoopRemoveTimer');
  late final _CFRunLoopRemoveTimer = _CFRunLoopRemoveTimerPtr.asFunction<
      void Function(CFRunLoopRef, CFRunLoopTimerRef, CFRunLoopMode)>();

  int CFRunLoopSourceGetTypeID() {
    return _CFRunLoopSourceGetTypeID();
  }

  late final _CFRunLoopSourceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopSourceGetTypeID');
  late final _CFRunLoopSourceGetTypeID =
      _CFRunLoopSourceGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopSourceRef CFRunLoopSourceCreate(
    CFAllocatorRef allocator,
    int order,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceCreate(
      allocator,
      order,
      context,
    );
  }

  late final _CFRunLoopSourceCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFRunLoopSourceContext>)>>('CFRunLoopSourceCreate');
  late final _CFRunLoopSourceCreate = _CFRunLoopSourceCreatePtr.asFunction<
      CFRunLoopSourceRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFRunLoopSourceContext>)>();

  int CFRunLoopSourceGetOrder(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceGetOrder(
      source,
    );
  }

  late final _CFRunLoopSourceGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceGetOrder');
  late final _CFRunLoopSourceGetOrder = _CFRunLoopSourceGetOrderPtr.asFunction<
      int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceInvalidate(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceInvalidate(
      source,
    );
  }

  late final _CFRunLoopSourceInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceInvalidate');
  late final _CFRunLoopSourceInvalidate = _CFRunLoopSourceInvalidatePtr
      .asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopSourceIsValid(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceIsValid(
      source,
    );
  }

  late final _CFRunLoopSourceIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceIsValid');
  late final _CFRunLoopSourceIsValid =
      _CFRunLoopSourceIsValidPtr.asFunction<int Function(CFRunLoopSourceRef)>();

  void CFRunLoopSourceGetContext(
    CFRunLoopSourceRef source,
    ffi.Pointer<CFRunLoopSourceContext> context,
  ) {
    return _CFRunLoopSourceGetContext(
      source,
      context,
    );
  }

  late final _CFRunLoopSourceGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>>(
      'CFRunLoopSourceGetContext');
  late final _CFRunLoopSourceGetContext =
      _CFRunLoopSourceGetContextPtr.asFunction<
          void Function(
              CFRunLoopSourceRef, ffi.Pointer<CFRunLoopSourceContext>)>();

  void CFRunLoopSourceSignal(
    CFRunLoopSourceRef source,
  ) {
    return _CFRunLoopSourceSignal(
      source,
    );
  }

  late final _CFRunLoopSourceSignalPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopSourceRef)>>(
          'CFRunLoopSourceSignal');
  late final _CFRunLoopSourceSignal =
      _CFRunLoopSourceSignalPtr.asFunction<void Function(CFRunLoopSourceRef)>();

  int CFRunLoopObserverGetTypeID() {
    return _CFRunLoopObserverGetTypeID();
  }

  late final _CFRunLoopObserverGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopObserverGetTypeID');
  late final _CFRunLoopObserverGetTypeID =
      _CFRunLoopObserverGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopObserverRef CFRunLoopObserverCreate(
    CFAllocatorRef allocator,
    int activities,
    int repeats,
    int order,
    CFRunLoopObserverCallBack callout,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverCreate(
      allocator,
      activities,
      repeats,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopObserverCreatePtr = _lookup<
          ffi.NativeFunction<
              CFRunLoopObserverRef Function(
                  CFAllocatorRef,
                  CFOptionFlags,
                  Boolean,
                  CFIndex,
                  CFRunLoopObserverCallBack,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverCreate');
  late final _CFRunLoopObserverCreate = _CFRunLoopObserverCreatePtr.asFunction<
      CFRunLoopObserverRef Function(CFAllocatorRef, int, int, int,
          CFRunLoopObserverCallBack, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopObserverGetActivities(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetActivities(
      observer,
    );
  }

  late final _CFRunLoopObserverGetActivitiesPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetActivities');
  late final _CFRunLoopObserverGetActivities =
      _CFRunLoopObserverGetActivitiesPtr.asFunction<
          int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverDoesRepeat(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverDoesRepeat(
      observer,
    );
  }

  late final _CFRunLoopObserverDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverDoesRepeat');
  late final _CFRunLoopObserverDoesRepeat = _CFRunLoopObserverDoesRepeatPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverGetOrder(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverGetOrder(
      observer,
    );
  }

  late final _CFRunLoopObserverGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverGetOrder');
  late final _CFRunLoopObserverGetOrder = _CFRunLoopObserverGetOrderPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverInvalidate(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverInvalidate(
      observer,
    );
  }

  late final _CFRunLoopObserverInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverInvalidate');
  late final _CFRunLoopObserverInvalidate = _CFRunLoopObserverInvalidatePtr
      .asFunction<void Function(CFRunLoopObserverRef)>();

  int CFRunLoopObserverIsValid(
    CFRunLoopObserverRef observer,
  ) {
    return _CFRunLoopObserverIsValid(
      observer,
    );
  }

  late final _CFRunLoopObserverIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopObserverRef)>>(
          'CFRunLoopObserverIsValid');
  late final _CFRunLoopObserverIsValid = _CFRunLoopObserverIsValidPtr
      .asFunction<int Function(CFRunLoopObserverRef)>();

  void CFRunLoopObserverGetContext(
    CFRunLoopObserverRef observer,
    ffi.Pointer<CFRunLoopObserverContext> context,
  ) {
    return _CFRunLoopObserverGetContext(
      observer,
      context,
    );
  }

  late final _CFRunLoopObserverGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFRunLoopObserverRef,
                  ffi.Pointer<CFRunLoopObserverContext>)>>(
      'CFRunLoopObserverGetContext');
  late final _CFRunLoopObserverGetContext =
      _CFRunLoopObserverGetContextPtr.asFunction<
          void Function(
              CFRunLoopObserverRef, ffi.Pointer<CFRunLoopObserverContext>)>();

  int CFRunLoopTimerGetTypeID() {
    return _CFRunLoopTimerGetTypeID();
  }

  late final _CFRunLoopTimerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFRunLoopTimerGetTypeID');
  late final _CFRunLoopTimerGetTypeID =
      _CFRunLoopTimerGetTypeIDPtr.asFunction<int Function()>();

  CFRunLoopTimerRef CFRunLoopTimerCreate(
    CFAllocatorRef allocator,
    double fireDate,
    double interval,
    int flags,
    int order,
    CFRunLoopTimerCallBack callout,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerCreate(
      allocator,
      fireDate,
      interval,
      flags,
      order,
      callout,
      context,
    );
  }

  late final _CFRunLoopTimerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopTimerRef Function(
              CFAllocatorRef,
              CFAbsoluteTime,
              CFTimeInterval,
              CFOptionFlags,
              CFIndex,
              CFRunLoopTimerCallBack,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerCreate');
  late final _CFRunLoopTimerCreate = _CFRunLoopTimerCreatePtr.asFunction<
      CFRunLoopTimerRef Function(CFAllocatorRef, double, double, int, int,
          CFRunLoopTimerCallBack, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetNextFireDate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetNextFireDate(
      timer,
    );
  }

  late final _CFRunLoopTimerGetNextFireDatePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetNextFireDate');
  late final _CFRunLoopTimerGetNextFireDate = _CFRunLoopTimerGetNextFireDatePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetNextFireDate(
    CFRunLoopTimerRef timer,
    double fireDate,
  ) {
    return _CFRunLoopTimerSetNextFireDate(
      timer,
      fireDate,
    );
  }

  late final _CFRunLoopTimerSetNextFireDatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFAbsoluteTime)>>('CFRunLoopTimerSetNextFireDate');
  late final _CFRunLoopTimerSetNextFireDate = _CFRunLoopTimerSetNextFireDatePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  double CFRunLoopTimerGetInterval(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetInterval(
      timer,
    );
  }

  late final _CFRunLoopTimerGetIntervalPtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetInterval');
  late final _CFRunLoopTimerGetInterval = _CFRunLoopTimerGetIntervalPtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerDoesRepeat(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerDoesRepeat(
      timer,
    );
  }

  late final _CFRunLoopTimerDoesRepeatPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerDoesRepeat');
  late final _CFRunLoopTimerDoesRepeat = _CFRunLoopTimerDoesRepeatPtr
      .asFunction<int Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerGetOrder(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetOrder(
      timer,
    );
  }

  late final _CFRunLoopTimerGetOrderPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetOrder');
  late final _CFRunLoopTimerGetOrder =
      _CFRunLoopTimerGetOrderPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerInvalidate(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerInvalidate(
      timer,
    );
  }

  late final _CFRunLoopTimerInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerInvalidate');
  late final _CFRunLoopTimerInvalidate = _CFRunLoopTimerInvalidatePtr
      .asFunction<void Function(CFRunLoopTimerRef)>();

  int CFRunLoopTimerIsValid(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerIsValid(
      timer,
    );
  }

  late final _CFRunLoopTimerIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerIsValid');
  late final _CFRunLoopTimerIsValid =
      _CFRunLoopTimerIsValidPtr.asFunction<int Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerGetContext(
    CFRunLoopTimerRef timer,
    ffi.Pointer<CFRunLoopTimerContext> context,
  ) {
    return _CFRunLoopTimerGetContext(
      timer,
      context,
    );
  }

  late final _CFRunLoopTimerGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              ffi.Pointer<CFRunLoopTimerContext>)>>('CFRunLoopTimerGetContext');
  late final _CFRunLoopTimerGetContext =
      _CFRunLoopTimerGetContextPtr.asFunction<
          void Function(
              CFRunLoopTimerRef, ffi.Pointer<CFRunLoopTimerContext>)>();

  double CFRunLoopTimerGetTolerance(
    CFRunLoopTimerRef timer,
  ) {
    return _CFRunLoopTimerGetTolerance(
      timer,
    );
  }

  late final _CFRunLoopTimerGetTolerancePtr =
      _lookup<ffi.NativeFunction<CFTimeInterval Function(CFRunLoopTimerRef)>>(
          'CFRunLoopTimerGetTolerance');
  late final _CFRunLoopTimerGetTolerance = _CFRunLoopTimerGetTolerancePtr
      .asFunction<double Function(CFRunLoopTimerRef)>();

  void CFRunLoopTimerSetTolerance(
    CFRunLoopTimerRef timer,
    double tolerance,
  ) {
    return _CFRunLoopTimerSetTolerance(
      timer,
      tolerance,
    );
  }

  late final _CFRunLoopTimerSetTolerancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFRunLoopTimerRef,
              CFTimeInterval)>>('CFRunLoopTimerSetTolerance');
  late final _CFRunLoopTimerSetTolerance = _CFRunLoopTimerSetTolerancePtr
      .asFunction<void Function(CFRunLoopTimerRef, double)>();

  int CFSocketGetTypeID() {
    return _CFSocketGetTypeID();
  }

  late final _CFSocketGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSocketGetTypeID');
  late final _CFSocketGetTypeID =
      _CFSocketGetTypeIDPtr.asFunction<int Function()>();

  CFSocketRef CFSocketCreate(
    CFAllocatorRef allocator,
    int protocolFamily,
    int socketType,
    int protocol,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreate(
      allocator,
      protocolFamily,
      socketType,
      protocol,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              SInt32,
              SInt32,
              SInt32,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreate');
  late final _CFSocketCreate = _CFSocketCreatePtr.asFunction<
      CFSocketRef Function(CFAllocatorRef, int, int, int, int, CFSocketCallBack,
          ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithNative(
    CFAllocatorRef allocator,
    int sock,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithNative(
      allocator,
      sock,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithNativePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>>('CFSocketCreateWithNative');
  late final _CFSocketCreateWithNative =
      _CFSocketCreateWithNativePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, int, int, CFSocketCallBack,
              ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateWithSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketCreateWithSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
    );
  }

  late final _CFSocketCreateWithSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketRef Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  CFOptionFlags,
                  CFSocketCallBack,
                  ffi.Pointer<CFSocketContext>)>>(
      'CFSocketCreateWithSocketSignature');
  late final _CFSocketCreateWithSocketSignature =
      _CFSocketCreateWithSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>)>();

  CFSocketRef CFSocketCreateConnectedToSocketSignature(
    CFAllocatorRef allocator,
    ffi.Pointer<CFSocketSignature> signature,
    int callBackTypes,
    CFSocketCallBack callout,
    ffi.Pointer<CFSocketContext> context,
    double timeout,
  ) {
    return _CFSocketCreateConnectedToSocketSignature(
      allocator,
      signature,
      callBackTypes,
      callout,
      context,
      timeout,
    );
  }

  late final _CFSocketCreateConnectedToSocketSignaturePtr = _lookup<
      ffi.NativeFunction<
          CFSocketRef Function(
              CFAllocatorRef,
              ffi.Pointer<CFSocketSignature>,
              CFOptionFlags,
              CFSocketCallBack,
              ffi.Pointer<CFSocketContext>,
              CFTimeInterval)>>('CFSocketCreateConnectedToSocketSignature');
  late final _CFSocketCreateConnectedToSocketSignature =
      _CFSocketCreateConnectedToSocketSignaturePtr.asFunction<
          CFSocketRef Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              int, CFSocketCallBack, ffi.Pointer<CFSocketContext>, double)>();

  int CFSocketSetAddress(
    CFSocketRef s,
    CFDataRef address,
  ) {
    return _CFSocketSetAddress(
      s,
      address,
    );
  }

  late final _CFSocketSetAddressPtr = _lookup<
          ffi.NativeFunction<CFSocketError Function(CFSocketRef, CFDataRef)>>(
      'CFSocketSetAddress');
  late final _CFSocketSetAddress =
      _CFSocketSetAddressPtr.asFunction<int Function(CFSocketRef, CFDataRef)>();

  int CFSocketConnectToAddress(
    CFSocketRef s,
    CFDataRef address,
    double timeout,
  ) {
    return _CFSocketConnectToAddress(
      s,
      address,
      timeout,
    );
  }

  late final _CFSocketConnectToAddressPtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(CFSocketRef, CFDataRef,
              CFTimeInterval)>>('CFSocketConnectToAddress');
  late final _CFSocketConnectToAddress = _CFSocketConnectToAddressPtr
      .asFunction<int Function(CFSocketRef, CFDataRef, double)>();

  void CFSocketInvalidate(
    CFSocketRef s,
  ) {
    return _CFSocketInvalidate(
      s,
    );
  }

  late final _CFSocketInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFSocketRef)>>(
          'CFSocketInvalidate');
  late final _CFSocketInvalidate =
      _CFSocketInvalidatePtr.asFunction<void Function(CFSocketRef)>();

  int CFSocketIsValid(
    CFSocketRef s,
  ) {
    return _CFSocketIsValid(
      s,
    );
  }

  late final _CFSocketIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFSocketRef)>>(
          'CFSocketIsValid');
  late final _CFSocketIsValid =
      _CFSocketIsValidPtr.asFunction<int Function(CFSocketRef)>();

  CFDataRef CFSocketCopyAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyAddress(
      s,
    );
  }

  late final _CFSocketCopyAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyAddress');
  late final _CFSocketCopyAddress =
      _CFSocketCopyAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  CFDataRef CFSocketCopyPeerAddress(
    CFSocketRef s,
  ) {
    return _CFSocketCopyPeerAddress(
      s,
    );
  }

  late final _CFSocketCopyPeerAddressPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(CFSocketRef)>>(
          'CFSocketCopyPeerAddress');
  late final _CFSocketCopyPeerAddress =
      _CFSocketCopyPeerAddressPtr.asFunction<CFDataRef Function(CFSocketRef)>();

  void CFSocketGetContext(
    CFSocketRef s,
    ffi.Pointer<CFSocketContext> context,
  ) {
    return _CFSocketGetContext(
      s,
      context,
    );
  }

  late final _CFSocketGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSocketRef,
              ffi.Pointer<CFSocketContext>)>>('CFSocketGetContext');
  late final _CFSocketGetContext = _CFSocketGetContextPtr.asFunction<
      void Function(CFSocketRef, ffi.Pointer<CFSocketContext>)>();

  int CFSocketGetNative(
    CFSocketRef s,
  ) {
    return _CFSocketGetNative(
      s,
    );
  }

  late final _CFSocketGetNativePtr =
      _lookup<ffi.NativeFunction<CFSocketNativeHandle Function(CFSocketRef)>>(
          'CFSocketGetNative');
  late final _CFSocketGetNative =
      _CFSocketGetNativePtr.asFunction<int Function(CFSocketRef)>();

  CFRunLoopSourceRef CFSocketCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFSocketRef s,
    int order,
  ) {
    return _CFSocketCreateRunLoopSource(
      allocator,
      s,
      order,
    );
  }

  late final _CFSocketCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef,
              CFIndex)>>('CFSocketCreateRunLoopSource');
  late final _CFSocketCreateRunLoopSource =
      _CFSocketCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFSocketRef, int)>();

  int CFSocketGetSocketFlags(
    CFSocketRef s,
  ) {
    return _CFSocketGetSocketFlags(
      s,
    );
  }

  late final _CFSocketGetSocketFlagsPtr =
      _lookup<ffi.NativeFunction<CFOptionFlags Function(CFSocketRef)>>(
          'CFSocketGetSocketFlags');
  late final _CFSocketGetSocketFlags =
      _CFSocketGetSocketFlagsPtr.asFunction<int Function(CFSocketRef)>();

  void CFSocketSetSocketFlags(
    CFSocketRef s,
    int flags,
  ) {
    return _CFSocketSetSocketFlags(
      s,
      flags,
    );
  }

  late final _CFSocketSetSocketFlagsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketSetSocketFlags');
  late final _CFSocketSetSocketFlags =
      _CFSocketSetSocketFlagsPtr.asFunction<void Function(CFSocketRef, int)>();

  void CFSocketDisableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketDisableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketDisableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketDisableCallBacks');
  late final _CFSocketDisableCallBacks = _CFSocketDisableCallBacksPtr
      .asFunction<void Function(CFSocketRef, int)>();

  void CFSocketEnableCallBacks(
    CFSocketRef s,
    int callBackTypes,
  ) {
    return _CFSocketEnableCallBacks(
      s,
      callBackTypes,
    );
  }

  late final _CFSocketEnableCallBacksPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFSocketRef, CFOptionFlags)>>(
      'CFSocketEnableCallBacks');
  late final _CFSocketEnableCallBacks =
      _CFSocketEnableCallBacksPtr.asFunction<void Function(CFSocketRef, int)>();

  int CFSocketSendData(
    CFSocketRef s,
    CFDataRef address,
    CFDataRef data,
    double timeout,
  ) {
    return _CFSocketSendData(
      s,
      address,
      data,
      timeout,
    );
  }

  late final _CFSocketSendDataPtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(CFSocketRef, CFDataRef, CFDataRef,
              CFTimeInterval)>>('CFSocketSendData');
  late final _CFSocketSendData = _CFSocketSendDataPtr.asFunction<
      int Function(CFSocketRef, CFDataRef, CFDataRef, double)>();

  int CFSocketRegisterValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    CFPropertyListRef value,
  ) {
    return _CFSocketRegisterValue(
      nameServerSignature,
      timeout,
      name,
      value,
    );
  }

  late final _CFSocketRegisterValuePtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef, CFPropertyListRef)>>('CFSocketRegisterValue');
  late final _CFSocketRegisterValue = _CFSocketRegisterValuePtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
          CFPropertyListRef)>();

  int CFSocketCopyRegisteredValue(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFPropertyListRef> value,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredValue(
      nameServerSignature,
      timeout,
      name,
      value,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredValuePtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(
              ffi.Pointer<CFSocketSignature>,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFPropertyListRef>,
              ffi.Pointer<CFDataRef>)>>('CFSocketCopyRegisteredValue');
  late final _CFSocketCopyRegisteredValue =
      _CFSocketCopyRegisteredValuePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFPropertyListRef>, ffi.Pointer<CFDataRef>)>();

  int CFSocketRegisterSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
  ) {
    return _CFSocketRegisterSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
    );
  }

  late final _CFSocketRegisterSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketError Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>)>>(
      'CFSocketRegisterSocketSignature');
  late final _CFSocketRegisterSocketSignature =
      _CFSocketRegisterSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>)>();

  int CFSocketCopyRegisteredSocketSignature(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFDataRef> nameServerAddress,
  ) {
    return _CFSocketCopyRegisteredSocketSignature(
      nameServerSignature,
      timeout,
      name,
      signature,
      nameServerAddress,
    );
  }

  late final _CFSocketCopyRegisteredSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              CFSocketError Function(
                  ffi.Pointer<CFSocketSignature>,
                  CFTimeInterval,
                  CFStringRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFDataRef>)>>(
      'CFSocketCopyRegisteredSocketSignature');
  late final _CFSocketCopyRegisteredSocketSignature =
      _CFSocketCopyRegisteredSocketSignaturePtr.asFunction<
          int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef,
              ffi.Pointer<CFSocketSignature>, ffi.Pointer<CFDataRef>)>();

  int CFSocketUnregister(
    ffi.Pointer<CFSocketSignature> nameServerSignature,
    double timeout,
    CFStringRef name,
  ) {
    return _CFSocketUnregister(
      nameServerSignature,
      timeout,
      name,
    );
  }

  late final _CFSocketUnregisterPtr = _lookup<
      ffi.NativeFunction<
          CFSocketError Function(ffi.Pointer<CFSocketSignature>, CFTimeInterval,
              CFStringRef)>>('CFSocketUnregister');
  late final _CFSocketUnregister = _CFSocketUnregisterPtr.asFunction<
      int Function(ffi.Pointer<CFSocketSignature>, double, CFStringRef)>();

  void CFSocketSetDefaultNameRegistryPortNumber(
    int port,
  ) {
    return _CFSocketSetDefaultNameRegistryPortNumber(
      port,
    );
  }

  late final _CFSocketSetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(UInt16)>>(
          'CFSocketSetDefaultNameRegistryPortNumber');
  late final _CFSocketSetDefaultNameRegistryPortNumber =
      _CFSocketSetDefaultNameRegistryPortNumberPtr.asFunction<
          void Function(int)>();

  int CFSocketGetDefaultNameRegistryPortNumber() {
    return _CFSocketGetDefaultNameRegistryPortNumber();
  }

  late final _CFSocketGetDefaultNameRegistryPortNumberPtr =
      _lookup<ffi.NativeFunction<UInt16 Function()>>(
          'CFSocketGetDefaultNameRegistryPortNumber');
  late final _CFSocketGetDefaultNameRegistryPortNumber =
      _CFSocketGetDefaultNameRegistryPortNumberPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStringRef> _kCFSocketCommandKey =
      _lookup<CFStringRef>('kCFSocketCommandKey');

  CFStringRef get kCFSocketCommandKey => _kCFSocketCommandKey.value;

  set kCFSocketCommandKey(CFStringRef value) =>
      _kCFSocketCommandKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketNameKey =
      _lookup<CFStringRef>('kCFSocketNameKey');

  CFStringRef get kCFSocketNameKey => _kCFSocketNameKey.value;

  set kCFSocketNameKey(CFStringRef value) => _kCFSocketNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketValueKey =
      _lookup<CFStringRef>('kCFSocketValueKey');

  CFStringRef get kCFSocketValueKey => _kCFSocketValueKey.value;

  set kCFSocketValueKey(CFStringRef value) => _kCFSocketValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketResultKey =
      _lookup<CFStringRef>('kCFSocketResultKey');

  CFStringRef get kCFSocketResultKey => _kCFSocketResultKey.value;

  set kCFSocketResultKey(CFStringRef value) =>
      _kCFSocketResultKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketErrorKey =
      _lookup<CFStringRef>('kCFSocketErrorKey');

  CFStringRef get kCFSocketErrorKey => _kCFSocketErrorKey.value;

  set kCFSocketErrorKey(CFStringRef value) => _kCFSocketErrorKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRegisterCommand =
      _lookup<CFStringRef>('kCFSocketRegisterCommand');

  CFStringRef get kCFSocketRegisterCommand => _kCFSocketRegisterCommand.value;

  set kCFSocketRegisterCommand(CFStringRef value) =>
      _kCFSocketRegisterCommand.value = value;

  late final ffi.Pointer<CFStringRef> _kCFSocketRetrieveCommand =
      _lookup<CFStringRef>('kCFSocketRetrieveCommand');

  CFStringRef get kCFSocketRetrieveCommand => _kCFSocketRetrieveCommand.value;

  set kCFSocketRetrieveCommand(CFStringRef value) =>
      _kCFSocketRetrieveCommand.value = value;

  int getattrlistbulk(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlistbulk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistbulkPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              ffi.Uint64)>>('getattrlistbulk');
  late final _getattrlistbulk = _getattrlistbulkPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlistat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _getattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _getattrlistatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.UnsignedLong)>>('getattrlistat');
  late final _getattrlistat = _getattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlistat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _setattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _setattrlistatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              ffi.Uint32)>>('setattrlistat');
  late final _setattrlistat = _setattrlistatPtr.asFunction<
      int Function(int, ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int faccessat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _faccessat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _faccessatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int, pkg_ffi.Int)>>('faccessat');
  late final _faccessat = _faccessatPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  int fchownat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _fchownat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fchownatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>, uid_t,
              gid_t, pkg_ffi.Int)>>('fchownat');
  late final _fchownat = _fchownatPtr.asFunction<
      int Function(int, ffi.Pointer<pkg_ffi.Char>, int, int, int)>();

  int linkat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
    int arg4,
  ) {
    return _linkat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _linkatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('linkat');
  late final _linkat = _linkatPtr.asFunction<
      int Function(int, ffi.Pointer<pkg_ffi.Char>, int,
          ffi.Pointer<pkg_ffi.Char>, int)>();

  int readlinkat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
    int arg3,
  ) {
    return _readlinkat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _readlinkatPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('readlinkat');
  late final _readlinkat = _readlinkatPtr.asFunction<
      int Function(
          int, ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int symlinkat(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
  ) {
    return _symlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _symlinkatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>)>>('symlinkat');
  late final _symlinkat = _symlinkatPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<pkg_ffi.Char>)>();

  int unlinkat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _unlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _unlinkatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int)>>('unlinkat');
  late final _unlinkat = _unlinkatPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  void _exit(
    int arg0,
  ) {
    return __exit(
      arg0,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  int access(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _access(
      arg0,
      arg1,
    );
  }

  late final _accessPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('access');
  late final _access =
      _accessPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int alarm(
    int arg0,
  ) {
    return _alarm(
      arg0,
    );
  }

  late final _alarmPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedInt Function(pkg_ffi.UnsignedInt)>>('alarm');
  late final _alarm = _alarmPtr.asFunction<int Function(int)>();

  int chdir(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _chdir(
      arg0,
    );
  }

  late final _chdirPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'chdir');
  late final _chdir =
      _chdirPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int chown(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _chown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _chownPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, uid_t, gid_t)>>('chown');
  late final _chown =
      _chownPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int)>();

  int close(
    int arg0,
  ) {
    return _close(
      arg0,
    );
  }

  late final _closePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('close');
  late final _close = _closePtr.asFunction<int Function(int)>();

  int dup(
    int arg0,
  ) {
    return _dup(
      arg0,
    );
  }

  late final _dupPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('dup');
  late final _dup = _dupPtr.asFunction<int Function(int)>();

  int dup2(
    int arg0,
    int arg1,
  ) {
    return _dup2(
      arg0,
      arg1,
    );
  }

  late final _dup2Ptr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'dup2');
  late final _dup2 = _dup2Ptr.asFunction<int Function(int, int)>();

  int execl(
    ffi.Pointer<pkg_ffi.Char> __path,
    ffi.Pointer<pkg_ffi.Char> __arg0,
  ) {
    return _execl(
      __path,
      __arg0,
    );
  }

  late final _execlPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('execl');
  late final _execl = _execlPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int execle(
    ffi.Pointer<pkg_ffi.Char> __path,
    ffi.Pointer<pkg_ffi.Char> __arg0,
  ) {
    return _execle(
      __path,
      __arg0,
    );
  }

  late final _execlePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('execle');
  late final _execle = _execlePtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int execlp(
    ffi.Pointer<pkg_ffi.Char> __file,
    ffi.Pointer<pkg_ffi.Char> __arg0,
  ) {
    return _execlp(
      __file,
      __arg0,
    );
  }

  late final _execlpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('execlp');
  late final _execlp = _execlpPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int execv(
    ffi.Pointer<pkg_ffi.Char> __path,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execvPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('execv');
  late final _execv = _execvPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int execve(
    ffi.Pointer<pkg_ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __argv,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __envp,
  ) {
    return _execve(
      __file,
      __argv,
      __envp,
    );
  }

  late final _execvePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('execve');
  late final _execve = _execvePtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int execvp(
    ffi.Pointer<pkg_ffi.Char> __file,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvpPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('execvp');
  late final _execvp = _execvpPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int fork() {
    return _fork();
  }

  late final _forkPtr = _lookup<ffi.NativeFunction<pid_t Function()>>('fork');
  late final _fork = _forkPtr.asFunction<int Function()>();

  int fpathconf(
    int arg0,
    int arg1,
  ) {
    return _fpathconf(
      arg0,
      arg1,
    );
  }

  late final _fpathconfPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Long Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'fpathconf');
  late final _fpathconf = _fpathconfPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<pkg_ffi.Char> getcwd(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _getcwd(
      arg0,
      arg1,
    );
  }

  late final _getcwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('getcwd');
  late final _getcwd = _getcwdPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int getegid() {
    return _getegid();
  }

  late final _getegidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getegid');
  late final _getegid = _getegidPtr.asFunction<int Function()>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('geteuid');
  late final _geteuid = _geteuidPtr.asFunction<int Function()>();

  int getgid() {
    return _getgid();
  }

  late final _getgidPtr =
      _lookup<ffi.NativeFunction<gid_t Function()>>('getgid');
  late final _getgid = _getgidPtr.asFunction<int Function()>();

  int getgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _getgroups(
      arg0,
      arg1,
    );
  }

  late final _getgroupsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<gid_t>)>>('getgroups');
  late final _getgroups =
      _getgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  ffi.Pointer<pkg_ffi.Char> getlogin() {
    return _getlogin();
  }

  late final _getloginPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function()>>(
          'getlogin');
  late final _getlogin =
      _getloginPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function()>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpgrp');
  late final _getpgrp = _getpgrpPtr.asFunction<int Function()>();

  int getpid() {
    return _getpid();
  }

  late final _getpidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getpid');
  late final _getpid = _getpidPtr.asFunction<int Function()>();

  int getppid() {
    return _getppid();
  }

  late final _getppidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('getppid');
  late final _getppid = _getppidPtr.asFunction<int Function()>();

  int getuid() {
    return _getuid();
  }

  late final _getuidPtr =
      _lookup<ffi.NativeFunction<uid_t Function()>>('getuid');
  late final _getuid = _getuidPtr.asFunction<int Function()>();

  int isatty(
    int arg0,
  ) {
    return _isatty(
      arg0,
    );
  }

  late final _isattyPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('isatty');
  late final _isatty = _isattyPtr.asFunction<int Function(int)>();

  int link(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _link(
      arg0,
      arg1,
    );
  }

  late final _linkPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('link');
  late final _link = _linkPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int lseek(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lseekPtr = _lookup<
          ffi.NativeFunction<off_t Function(pkg_ffi.Int, off_t, pkg_ffi.Int)>>(
      'lseek');
  late final _lseek = _lseekPtr.asFunction<int Function(int, int, int)>();

  int pathconf(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _pathconf(
      arg0,
      arg1,
    );
  }

  late final _pathconfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Long Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('pathconf');
  late final _pathconf =
      _pathconfPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int pause() {
    return _pause();
  }

  late final _pausePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('pause');
  late final _pause = _pausePtr.asFunction<int Function()>();

  int pipe(
    ffi.Pointer<pkg_ffi.Int> arg0,
  ) {
    return _pipe(
      arg0,
    );
  }

  late final _pipePtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Int>)>>(
      'pipe');
  late final _pipe =
      _pipePtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Int>)>();

  int read(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _read(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              pkg_ffi.Int, ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('read');
  late final _read =
      _readPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int rmdir(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _rmdir(
      arg0,
    );
  }

  late final _rmdirPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'rmdir');
  late final _rmdir =
      _rmdirPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int setgid(
    int arg0,
  ) {
    return _setgid(
      arg0,
    );
  }

  late final _setgidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(gid_t)>>('setgid');
  late final _setgid = _setgidPtr.asFunction<int Function(int)>();

  int setpgid(
    int arg0,
    int arg1,
  ) {
    return _setpgid(
      arg0,
      arg1,
    );
  }

  late final _setpgidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pid_t, pid_t)>>(
          'setpgid');
  late final _setpgid = _setpgidPtr.asFunction<int Function(int, int)>();

  int setsid() {
    return _setsid();
  }

  late final _setsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setsid');
  late final _setsid = _setsidPtr.asFunction<int Function()>();

  int setuid(
    int arg0,
  ) {
    return _setuid(
      arg0,
    );
  }

  late final _setuidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(uid_t)>>('setuid');
  late final _setuid = _setuidPtr.asFunction<int Function(int)>();

  int sleep(
    int arg0,
  ) {
    return _sleep(
      arg0,
    );
  }

  late final _sleepPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.UnsignedInt Function(pkg_ffi.UnsignedInt)>>('sleep');
  late final _sleep = _sleepPtr.asFunction<int Function(int)>();

  int sysconf(
    int arg0,
  ) {
    return _sysconf(
      arg0,
    );
  }

  late final _sysconfPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function(pkg_ffi.Int)>>(
          'sysconf');
  late final _sysconf = _sysconfPtr.asFunction<int Function(int)>();

  int tcgetpgrp(
    int arg0,
  ) {
    return _tcgetpgrp(
      arg0,
    );
  }

  late final _tcgetpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pkg_ffi.Int)>>('tcgetpgrp');
  late final _tcgetpgrp = _tcgetpgrpPtr.asFunction<int Function(int)>();

  int tcsetpgrp(
    int arg0,
    int arg1,
  ) {
    return _tcsetpgrp(
      arg0,
      arg1,
    );
  }

  late final _tcsetpgrpPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pid_t)>>(
          'tcsetpgrp');
  late final _tcsetpgrp = _tcsetpgrpPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<pkg_ffi.Char> ttyname(
    int arg0,
  ) {
    return _ttyname(
      arg0,
    );
  }

  late final _ttynamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function(pkg_ffi.Int)>>(
      'ttyname');
  late final _ttyname =
      _ttynamePtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(int)>();

  int ttyname_r(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _ttyname_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ttyname_rPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('ttyname_r');
  late final _ttyname_r = _ttyname_rPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int unlink(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _unlink(
      arg0,
    );
  }

  late final _unlinkPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'unlink');
  late final _unlink =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
  ) {
    return _write(
      __fd,
      __buf,
      __nbyte,
    );
  }

  late final _writePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              pkg_ffi.Int, ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>('write');
  late final _write =
      _writePtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>, int)>();

  int confstr(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _confstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _confstrPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Size Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('confstr');
  late final _confstr = _confstrPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int getopt(
    int arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
  ) {
    return _getopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getoptPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.Char>)>>('getopt');
  late final _getopt = _getoptPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<pkg_ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> _optarg =
      _lookup<ffi.Pointer<pkg_ffi.Char>>('optarg');

  ffi.Pointer<pkg_ffi.Char> get optarg => _optarg.value;

  set optarg(ffi.Pointer<pkg_ffi.Char> value) => _optarg.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _optind = _lookup<pkg_ffi.Int>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _opterr = _lookup<pkg_ffi.Int>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _optopt = _lookup<pkg_ffi.Int>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  ffi.Pointer<ffi.Void> brk(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _brk(
      arg0,
    );
  }

  late final _brkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('brk');
  late final _brk = _brkPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  int chroot(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _chroot(
      arg0,
    );
  }

  late final _chrootPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'chroot');
  late final _chroot =
      _chrootPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> crypt(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _crypt(
      arg0,
      arg1,
    );
  }

  late final _cryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>>('crypt');
  late final _crypt = _cryptPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  void encrypt(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _encrypt(
      arg0,
      arg1,
    );
  }

  late final _encryptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('encrypt');
  late final _encrypt =
      _encryptPtr.asFunction<void Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int fchdir(
    int arg0,
  ) {
    return _fchdir(
      arg0,
    );
  }

  late final _fchdirPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('fchdir');
  late final _fchdir = _fchdirPtr.asFunction<int Function(int)>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Long Function()>>('gethostid');
  late final _gethostid = _gethostidPtr.asFunction<int Function()>();

  int getpgid(
    int arg0,
  ) {
    return _getpgid(
      arg0,
    );
  }

  late final _getpgidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getpgid');
  late final _getpgid = _getpgidPtr.asFunction<int Function(int)>();

  int getsid(
    int arg0,
  ) {
    return _getsid(
      arg0,
    );
  }

  late final _getsidPtr =
      _lookup<ffi.NativeFunction<pid_t Function(pid_t)>>('getsid');
  late final _getsid = _getsidPtr.asFunction<int Function(int)>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesizePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('getdtablesize');
  late final _getdtablesize = _getdtablesizePtr.asFunction<int Function()>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesizePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('getpagesize');
  late final _getpagesize = _getpagesizePtr.asFunction<int Function()>();

  ffi.Pointer<pkg_ffi.Char> getpass(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _getpass(
      arg0,
    );
  }

  late final _getpassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('getpass');
  late final _getpass = _getpassPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<pkg_ffi.Char> getwd(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _getwd(
      arg0,
    );
  }

  late final _getwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('getwd');
  late final _getwd = _getwdPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  int lchown(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _lchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lchownPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, uid_t, gid_t)>>('lchown');
  late final _lchown = _lchownPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int)>();

  int lockf(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lockf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lockfPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int, off_t)>>('lockf');
  late final _lockf = _lockfPtr.asFunction<int Function(int, int, int)>();

  int nice(
    int arg0,
  ) {
    return _nice(
      arg0,
    );
  }

  late final _nicePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('nice');
  late final _nice = _nicePtr.asFunction<int Function(int)>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _preadPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(pkg_ffi.Int, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              off_t)>>('pread');
  late final _pread = _preadPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _pwritePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(pkg_ffi.Int, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              off_t)>>('pwrite');
  late final _pwrite = _pwritePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> sbrk(
    int arg0,
  ) {
    return _sbrk(
      arg0,
    );
  }

  late final _sbrkPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pkg_ffi.Int)>>(
          'sbrk');
  late final _sbrk = _sbrkPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrpPtr =
      _lookup<ffi.NativeFunction<pid_t Function()>>('setpgrp');
  late final _setpgrp = _setpgrpPtr.asFunction<int Function()>();

  int setregid(
    int arg0,
    int arg1,
  ) {
    return _setregid(
      arg0,
      arg1,
    );
  }

  late final _setregidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(gid_t, gid_t)>>(
          'setregid');
  late final _setregid = _setregidPtr.asFunction<int Function(int, int)>();

  int setreuid(
    int arg0,
    int arg1,
  ) {
    return _setreuid(
      arg0,
      arg1,
    );
  }

  late final _setreuidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(uid_t, uid_t)>>(
          'setreuid');
  late final _setreuid = _setreuidPtr.asFunction<int Function(int, int)>();

  void swab1(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swab1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, ssize_t)>>('swab');
  late final _swab1 = _swab1Ptr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void sync1() {
    return _sync1();
  }

  late final _sync1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('sync');
  late final _sync1 = _sync1Ptr.asFunction<void Function()>();

  int truncate(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _truncate(
      arg0,
      arg1,
    );
  }

  late final _truncatePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, off_t)>>('truncate');
  late final _truncate =
      _truncatePtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int ualarm(
    int arg0,
    int arg1,
  ) {
    return _ualarm(
      arg0,
      arg1,
    );
  }

  late final _ualarmPtr =
      _lookup<ffi.NativeFunction<useconds_t Function(useconds_t, useconds_t)>>(
          'ualarm');
  late final _ualarm = _ualarmPtr.asFunction<int Function(int, int)>();

  int usleep(
    int arg0,
  ) {
    return _usleep(
      arg0,
    );
  }

  late final _usleepPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(useconds_t)>>('usleep');
  late final _usleep = _usleepPtr.asFunction<int Function(int)>();

  int vfork() {
    return _vfork();
  }

  late final _vforkPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('vfork');
  late final _vfork = _vforkPtr.asFunction<int Function()>();

  int fsync(
    int arg0,
  ) {
    return _fsync(
      arg0,
    );
  }

  late final _fsyncPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('fsync');
  late final _fsync = _fsyncPtr.asFunction<int Function(int)>();

  int ftruncate(
    int arg0,
    int arg1,
  ) {
    return _ftruncate(
      arg0,
      arg1,
    );
  }

  late final _ftruncatePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, off_t)>>(
          'ftruncate');
  late final _ftruncate = _ftruncatePtr.asFunction<int Function(int, int)>();

  int getlogin_r(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _getlogin_r(
      arg0,
      arg1,
    );
  }

  late final _getlogin_rPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('getlogin_r');
  late final _getlogin_r =
      _getlogin_rPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int fchown(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _fchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fchownPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, uid_t, gid_t)>>(
      'fchown');
  late final _fchown = _fchownPtr.asFunction<int Function(int, int, int)>();

  int gethostname(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _gethostname(
      arg0,
      arg1,
    );
  }

  late final _gethostnamePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size)>>('gethostname');
  late final _gethostname = _gethostnamePtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int readlink(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _readlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readlinkPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('readlink');
  late final _readlink = _readlinkPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int setegid(
    int arg0,
  ) {
    return _setegid(
      arg0,
    );
  }

  late final _setegidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(gid_t)>>('setegid');
  late final _setegid = _setegidPtr.asFunction<int Function(int)>();

  int seteuid(
    int arg0,
  ) {
    return _seteuid(
      arg0,
    );
  }

  late final _seteuidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(uid_t)>>('seteuid');
  late final _seteuid = _seteuidPtr.asFunction<int Function(int)>();

  int symlink(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
  ) {
    return _symlink(
      arg0,
      arg1,
    );
  }

  late final _symlinkPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('symlink');
  late final _symlink = _symlinkPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int pselect(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timespec> arg4,
    ffi.Pointer<sigset_t> arg5,
  ) {
    return _pselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _pselectPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timespec>,
              ffi.Pointer<sigset_t>)>>('pselect');
  late final _pselect = _pselectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timespec>, ffi.Pointer<sigset_t>)>();

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _selectPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<timeval>)>>('select');
  late final _select = _selectPtr.asFunction<
      int Function(int, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<timeval>)>();

  void _Exit1(
    int arg0,
  ) {
    return __Exit1(
      arg0,
    );
  }

  late final __Exit1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>('_Exit');
  late final __Exit1 = __Exit1Ptr.asFunction<void Function(int)>();

  int accessx_np(
    ffi.Pointer<accessx_descriptor> arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Int> arg2,
    int arg3,
  ) {
    return _accessx_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _accessx_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<accessx_descriptor>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Int>, uid_t)>>('accessx_np');
  late final _accessx_np = _accessx_npPtr.asFunction<
      int Function(ffi.Pointer<accessx_descriptor>, int,
          ffi.Pointer<pkg_ffi.Int>, int)>();

  int acct(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _acct(
      arg0,
    );
  }

  late final _acctPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'acct');
  late final _acct =
      _acctPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int add_profil(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _add_profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _add_profilPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size,
              pkg_ffi.UnsignedLong, pkg_ffi.UnsignedInt)>>('add_profil');
  late final _add_profil = _add_profilPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int, int)>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('endusershell');
  late final _endusershell = _endusershellPtr.asFunction<void Function()>();

  int execvP(
    ffi.Pointer<pkg_ffi.Char> __file,
    ffi.Pointer<pkg_ffi.Char> __searchpath,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> __argv,
  ) {
    return _execvP(
      __file,
      __searchpath,
      __argv,
    );
  }

  late final _execvPPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('execvP');
  late final _execvP = _execvPPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  ffi.Pointer<pkg_ffi.Char> fflagstostr(
    int arg0,
  ) {
    return _fflagstostr(
      arg0,
    );
  }

  late final _fflagstostrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              pkg_ffi.UnsignedLong)>>('fflagstostr');
  late final _fflagstostr =
      _fflagstostrPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function(int)>();

  int getdomainname(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _getdomainname(
      arg0,
      arg1,
    );
  }

  late final _getdomainnamePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('getdomainname');
  late final _getdomainname = _getdomainnamePtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int getgrouplist(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Int> arg2,
    ffi.Pointer<pkg_ffi.Int> arg3,
  ) {
    return _getgrouplist(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getgrouplistPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Int>,
              ffi.Pointer<pkg_ffi.Int>)>>('getgrouplist');
  late final _getgrouplist = _getgrouplistPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<pkg_ffi.Int>,
          ffi.Pointer<pkg_ffi.Int>)>();

  int gethostuuid(
    ffi.Pointer<pkg_ffi.UnsignedChar> arg0,
    ffi.Pointer<timespec> arg1,
  ) {
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  late final _gethostuuidPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.UnsignedChar>,
              ffi.Pointer<timespec>)>>('gethostuuid');
  late final _gethostuuid = _gethostuuidPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.UnsignedChar>, ffi.Pointer<timespec>)>();

  int getmode(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _getmode(
      arg0,
      arg1,
    );
  }

  late final _getmodePtr = _lookup<
          ffi.NativeFunction<mode_t Function(ffi.Pointer<ffi.Void>, mode_t)>>(
      'getmode');
  late final _getmode =
      _getmodePtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int getpeereid(
    int arg0,
    ffi.Pointer<uid_t> arg1,
    ffi.Pointer<gid_t> arg2,
  ) {
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeereidPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<uid_t>,
              ffi.Pointer<gid_t>)>>('getpeereid');
  late final _getpeereid = _getpeereidPtr
      .asFunction<int Function(int, ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int getsgroups_np(
    ffi.Pointer<pkg_ffi.Int> arg0,
    ffi.Pointer<pkg_ffi.UnsignedChar> arg1,
  ) {
    return _getsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Int>,
              ffi.Pointer<pkg_ffi.UnsignedChar>)>>('getsgroups_np');
  late final _getsgroups_np = _getsgroups_npPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Int>, ffi.Pointer<pkg_ffi.UnsignedChar>)>();

  ffi.Pointer<pkg_ffi.Char> getusershell() {
    return _getusershell();
  }

  late final _getusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<pkg_ffi.Char> Function()>>(
          'getusershell');
  late final _getusershell =
      _getusershellPtr.asFunction<ffi.Pointer<pkg_ffi.Char> Function()>();

  int getwgroups_np(
    ffi.Pointer<pkg_ffi.Int> arg0,
    ffi.Pointer<pkg_ffi.UnsignedChar> arg1,
  ) {
    return _getwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Int>,
              ffi.Pointer<pkg_ffi.UnsignedChar>)>>('getwgroups_np');
  late final _getwgroups_np = _getwgroups_npPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Int>, ffi.Pointer<pkg_ffi.UnsignedChar>)>();

  int initgroups(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _initgroups(
      arg0,
      arg1,
    );
  }

  late final _initgroupsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('initgroups');
  late final _initgroups =
      _initgroupsPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int issetugid() {
    return _issetugid();
  }

  late final _issetugidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('issetugid');
  late final _issetugid = _issetugidPtr.asFunction<int Function()>();

  ffi.Pointer<pkg_ffi.Char> mkdtemp(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _mkdtemp(
      arg0,
    );
  }

  late final _mkdtempPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('mkdtemp');
  late final _mkdtemp = _mkdtempPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  int mknod(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
  ) {
    return _mknod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mknodPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, mode_t, dev_t)>>('mknod');
  late final _mknod =
      _mknodPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int)>();

  int mkpath_np(
    ffi.Pointer<pkg_ffi.Char> path,
    int omode,
  ) {
    return _mkpath_np(
      path,
      omode,
    );
  }

  late final _mkpath_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, mode_t)>>('mkpath_np');
  late final _mkpath_np =
      _mkpath_npPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int mkpathat_np(
    int dfd,
    ffi.Pointer<pkg_ffi.Char> path,
    int omode,
  ) {
    return _mkpathat_np(
      dfd,
      path,
      omode,
    );
  }

  late final _mkpathat_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>, mode_t)>>('mkpathat_np');
  late final _mkpathat_np = _mkpathat_npPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int mkstemp1(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _mkstemp1(
      arg0,
    );
  }

  late final _mkstemp1Ptr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'mkstemp');
  late final _mkstemp1 =
      _mkstemp1Ptr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int mkstemps(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _mkstemps(
      arg0,
      arg1,
    );
  }

  late final _mkstempsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('mkstemps');
  late final _mkstemps =
      _mkstempsPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  ffi.Pointer<pkg_ffi.Char> mktemp1(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _mktemp1(
      arg0,
    );
  }

  late final _mktemp1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('mktemp');
  late final _mktemp1 = _mktemp1Ptr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(ffi.Pointer<pkg_ffi.Char>)>();

  int mkostemp(
    ffi.Pointer<pkg_ffi.Char> path,
    int oflags,
  ) {
    return _mkostemp(
      path,
      oflags,
    );
  }

  late final _mkostempPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('mkostemp');
  late final _mkostemp =
      _mkostempPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int mkostemps(
    ffi.Pointer<pkg_ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostemps(
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int,
              pkg_ffi.Int)>>('mkostemps');
  late final _mkostemps = _mkostempsPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int)>();

  int mkstemp_dprotected_np(
    ffi.Pointer<pkg_ffi.Char> path,
    int dpclass,
    int dpflags,
  ) {
    return _mkstemp_dprotected_np(
      path,
      dpclass,
      dpflags,
    );
  }

  late final _mkstemp_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int,
              pkg_ffi.Int)>>('mkstemp_dprotected_np');
  late final _mkstemp_dprotected_np = _mkstemp_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int)>();

  ffi.Pointer<pkg_ffi.Char> mkdtempat_np(
    int dfd,
    ffi.Pointer<pkg_ffi.Char> path,
  ) {
    return _mkdtempat_np(
      dfd,
      path,
    );
  }

  late final _mkdtempat_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>)>>('mkdtempat_np');
  late final _mkdtempat_np = _mkdtempat_npPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(int, ffi.Pointer<pkg_ffi.Char>)>();

  int mkstempsat_np(
    int dfd,
    ffi.Pointer<pkg_ffi.Char> path,
    int slen,
  ) {
    return _mkstempsat_np(
      dfd,
      path,
      slen,
    );
  }

  late final _mkstempsat_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int)>>('mkstempsat_np');
  late final _mkstempsat_np = _mkstempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int mkostempsat_np(
    int dfd,
    ffi.Pointer<pkg_ffi.Char> path,
    int slen,
    int oflags,
  ) {
    return _mkostempsat_np(
      dfd,
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsat_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int, pkg_ffi.Int)>>('mkostempsat_np');
  late final _mkostempsat_np = _mkostempsat_npPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int, int)>();

  int nfssvc(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _nfssvc(
      arg0,
      arg1,
    );
  }

  late final _nfssvcPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<ffi.Void>)>>('nfssvc');
  late final _nfssvc =
      _nfssvcPtr.asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int profil(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _profilPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Size,
              pkg_ffi.UnsignedLong, pkg_ffi.UnsignedInt)>>('profil');
  late final _profil = _profilPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int, int)>();

  int pthread_setugid_np(
    int arg0,
    int arg1,
  ) {
    return _pthread_setugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_setugid_npPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(uid_t, gid_t)>>(
          'pthread_setugid_np');
  late final _pthread_setugid_np =
      _pthread_setugid_npPtr.asFunction<int Function(int, int)>();

  int pthread_getugid_np(
    ffi.Pointer<uid_t> arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _pthread_getugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_getugid_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>>('pthread_getugid_np');
  late final _pthread_getugid_np = _pthread_getugid_npPtr
      .asFunction<int Function(ffi.Pointer<uid_t>, ffi.Pointer<gid_t>)>();

  int reboot(
    int arg0,
  ) {
    return _reboot(
      arg0,
    );
  }

  late final _rebootPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('reboot');
  late final _reboot = _rebootPtr.asFunction<int Function(int)>();

  int revoke(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _revoke(
      arg0,
    );
  }

  late final _revokePtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'revoke');
  late final _revoke =
      _revokePtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int rcmd(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
    ffi.Pointer<pkg_ffi.Char> arg4,
    ffi.Pointer<pkg_ffi.Int> arg5,
  ) {
    return _rcmd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _rcmdPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Int>)>>('rcmd');
  late final _rcmd = _rcmdPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          int,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Int>)>();

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
    ffi.Pointer<pkg_ffi.Char> arg4,
    ffi.Pointer<pkg_ffi.Int> arg5,
    int arg6,
  ) {
    return _rcmd_af(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _rcmd_afPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Int>,
              pkg_ffi.Int)>>('rcmd_af');
  late final _rcmd_af = _rcmd_afPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          int,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Int>,
          int)>();

  int rresvport(
    ffi.Pointer<pkg_ffi.Int> arg0,
  ) {
    return _rresvport(
      arg0,
    );
  }

  late final _rresvportPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Int>)>>(
      'rresvport');
  late final _rresvport =
      _rresvportPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Int>)>();

  int rresvport_af(
    ffi.Pointer<pkg_ffi.Int> arg0,
    int arg1,
  ) {
    return _rresvport_af(
      arg0,
      arg1,
    );
  }

  late final _rresvport_afPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Int>, pkg_ffi.Int)>>('rresvport_af');
  late final _rresvport_af = _rresvport_afPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Int>, int)>();

  int iruserok(
    int arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
  ) {
    return _iruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _iruserokPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.UnsignedLong,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('iruserok');
  late final _iruserok = _iruserokPtr.asFunction<
      int Function(
          int, int, ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>)>();

  int iruserok_sa(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
    ffi.Pointer<pkg_ffi.Char> arg4,
  ) {
    return _iruserok_sa(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _iruserok_saPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Int,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('iruserok_sa');
  late final _iruserok_sa = _iruserok_saPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>)>();

  int ruserok(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Char> arg2,
    ffi.Pointer<pkg_ffi.Char> arg3,
  ) {
    return _ruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ruserokPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>)>>('ruserok');
  late final _ruserok = _ruserokPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Char>)>();

  int setdomainname(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _setdomainname(
      arg0,
      arg1,
    );
  }

  late final _setdomainnamePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('setdomainname');
  late final _setdomainname = _setdomainnamePtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int setgroups(
    int arg0,
    ffi.Pointer<gid_t> arg1,
  ) {
    return _setgroups(
      arg0,
      arg1,
    );
  }

  late final _setgroupsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, ffi.Pointer<gid_t>)>>('setgroups');
  late final _setgroups =
      _setgroupsPtr.asFunction<int Function(int, ffi.Pointer<gid_t>)>();

  void sethostid(
    int arg0,
  ) {
    return _sethostid(
      arg0,
    );
  }

  late final _sethostidPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Long)>>('sethostid');
  late final _sethostid = _sethostidPtr.asFunction<void Function(int)>();

  int sethostname(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _sethostname(
      arg0,
      arg1,
    );
  }

  late final _sethostnamePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('sethostname');
  late final _sethostname = _sethostnamePtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  void setkey1(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _setkey1(
      arg0,
    );
  }

  late final _setkey1Ptr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<pkg_ffi.Char>)>>(
          'setkey');
  late final _setkey1 =
      _setkey1Ptr.asFunction<void Function(ffi.Pointer<pkg_ffi.Char>)>();

  int setlogin(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _setlogin(
      arg0,
    );
  }

  late final _setloginPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'setlogin');
  late final _setlogin =
      _setloginPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<ffi.Void> setmode(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _setmode(
      arg0,
    );
  }

  late final _setmodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<pkg_ffi.Char>)>>('setmode');
  late final _setmode = _setmodePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<pkg_ffi.Char>)>();

  int setrgid(
    int arg0,
  ) {
    return _setrgid(
      arg0,
    );
  }

  late final _setrgidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(gid_t)>>('setrgid');
  late final _setrgid = _setrgidPtr.asFunction<int Function(int)>();

  int setruid(
    int arg0,
  ) {
    return _setruid(
      arg0,
    );
  }

  late final _setruidPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(uid_t)>>('setruid');
  late final _setruid = _setruidPtr.asFunction<int Function(int)>();

  int setsgroups_np(
    int arg0,
    ffi.Pointer<pkg_ffi.UnsignedChar> arg1,
  ) {
    return _setsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setsgroups_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.UnsignedChar>)>>('setsgroups_np');
  late final _setsgroups_np = _setsgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.UnsignedChar>)>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershellPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('setusershell');
  late final _setusershell = _setusershellPtr.asFunction<void Function()>();

  int setwgroups_np(
    int arg0,
    ffi.Pointer<pkg_ffi.UnsignedChar> arg1,
  ) {
    return _setwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setwgroups_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int,
              ffi.Pointer<pkg_ffi.UnsignedChar>)>>('setwgroups_np');
  late final _setwgroups_np = _setwgroups_npPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.UnsignedChar>)>();

  int strtofflags(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<pkg_ffi.UnsignedLong> arg1,
    ffi.Pointer<pkg_ffi.UnsignedLong> arg2,
  ) {
    return _strtofflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strtofflagsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<pkg_ffi.UnsignedLong>,
              ffi.Pointer<pkg_ffi.UnsignedLong>)>>('strtofflags');
  late final _strtofflags = _strtofflagsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<pkg_ffi.UnsignedLong>,
          ffi.Pointer<pkg_ffi.UnsignedLong>)>();

  int swapon(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _swapon(
      arg0,
    );
  }

  late final _swaponPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'swapon');
  late final _swapon =
      _swaponPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslotPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function()>>('ttyslot');
  late final _ttyslot = _ttyslotPtr.asFunction<int Function()>();

  int undelete(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _undelete(
      arg0,
    );
  }

  late final _undeletePtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'undelete');
  late final _undelete =
      _undeletePtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  int unwhiteout(
    ffi.Pointer<pkg_ffi.Char> arg0,
  ) {
    return _unwhiteout(
      arg0,
    );
  }

  late final _unwhiteoutPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'unwhiteout');
  late final _unwhiteout =
      _unwhiteoutPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  ffi.Pointer<ffi.Void> valloc1(
    int arg0,
  ) {
    return _valloc1(
      arg0,
    );
  }

  late final _valloc1Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pkg_ffi.Size)>>(
          'valloc');
  late final _valloc1 =
      _valloc1Ptr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int syscall(
    int arg0,
  ) {
    return _syscall(
      arg0,
    );
  }

  late final _syscallPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int)>>('syscall');
  late final _syscall = _syscallPtr.asFunction<int Function(int)>();

  int getsubopt1(
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg0,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg1,
    ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> arg2,
  ) {
    return _getsubopt1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsubopt1Ptr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>>('getsubopt');
  late final _getsubopt1 = _getsubopt1Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>,
          ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>();

  int fgetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fgetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fgetattrlistPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.UnsignedInt)>>('fgetattrlist');
  late final _fgetattrlist = _fgetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int fsetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fsetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fsetattrlistPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.UnsignedInt)>>('fsetattrlist');
  late final _fsetattrlist = _fsetattrlistPtr.asFunction<
      int Function(
          int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  int getattrlist(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.UnsignedInt)>>('getattrlist');
  late final _getattrlist = _getattrlistPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int setattrlist(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _setattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _setattrlistPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              pkg_ffi.UnsignedInt)>>('setattrlist');
  late final _setattrlist = _setattrlistPtr.asFunction<
      int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>, int, int)>();

  int exchangedata(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _exchangedata(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _exchangedataPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.UnsignedInt)>>('exchangedata');
  late final _exchangedata = _exchangedataPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, ffi.Pointer<pkg_ffi.Char>, int)>();

  int getdirentriesattr(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<pkg_ffi.UnsignedInt> arg4,
    ffi.Pointer<pkg_ffi.UnsignedInt> arg5,
    ffi.Pointer<pkg_ffi.UnsignedInt> arg6,
    int arg7,
  ) {
    return _getdirentriesattr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _getdirentriesattrPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.UnsignedInt>,
              ffi.Pointer<pkg_ffi.UnsignedInt>,
              ffi.Pointer<pkg_ffi.UnsignedInt>,
              pkg_ffi.UnsignedInt)>>('getdirentriesattr');
  late final _getdirentriesattr = _getdirentriesattrPtr.asFunction<
      int Function(
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<pkg_ffi.UnsignedInt>,
          ffi.Pointer<pkg_ffi.UnsignedInt>,
          ffi.Pointer<pkg_ffi.UnsignedInt>,
          int)>();

  int searchfs(
    ffi.Pointer<pkg_ffi.Char> arg0,
    ffi.Pointer<fssearchblock> arg1,
    ffi.Pointer<pkg_ffi.UnsignedLong> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<searchstate> arg5,
  ) {
    return _searchfs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _searchfsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<fssearchblock>,
              ffi.Pointer<pkg_ffi.UnsignedLong>,
              pkg_ffi.UnsignedInt,
              pkg_ffi.UnsignedInt,
              ffi.Pointer<searchstate>)>>('searchfs');
  late final _searchfs = _searchfsPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<fssearchblock>,
          ffi.Pointer<pkg_ffi.UnsignedLong>,
          int,
          int,
          ffi.Pointer<searchstate>)>();

  int fsctl(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _fsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fsctlPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, pkg_ffi.UnsignedInt)>>('fsctl');
  late final _fsctl = _fsctlPtr.asFunction<
      int Function(
          ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<ffi.Void>, int)>();

  int ffsctl(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _ffsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ffsctlPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.UnsignedLong,
              ffi.Pointer<ffi.Void>, pkg_ffi.UnsignedInt)>>('ffsctl');
  late final _ffsctl = _ffsctlPtr
      .asFunction<int Function(int, int, ffi.Pointer<ffi.Void>, int)>();

  int fsync_volume_np(
    int arg0,
    int arg1,
  ) {
    return _fsync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _fsync_volume_npPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'fsync_volume_np');
  late final _fsync_volume_np =
      _fsync_volume_npPtr.asFunction<int Function(int, int)>();

  int sync_volume_np(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _sync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _sync_volume_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('sync_volume_np');
  late final _sync_volume_np = _sync_volume_npPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  late final ffi.Pointer<pkg_ffi.Int> _optreset =
      _lookup<pkg_ffi.Int>('optreset');

  int get optreset => _optreset.value;

  set optreset(int value) => _optreset.value = value;

  int open(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _openPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('open');
  late final _open =
      _openPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int openat(
    int arg0,
    ffi.Pointer<pkg_ffi.Char> arg1,
    int arg2,
  ) {
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int)>>('openat');
  late final _openat = _openatPtr
      .asFunction<int Function(int, ffi.Pointer<pkg_ffi.Char>, int)>();

  int creat(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
  ) {
    return _creat(
      arg0,
      arg1,
    );
  }

  late final _creatPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, mode_t)>>('creat');
  late final _creat =
      _creatPtr.asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int fcntl(
    int arg0,
    int arg1,
  ) {
    return _fcntl(
      arg0,
      arg1,
    );
  }

  late final _fcntlPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'fcntl');
  late final _fcntl = _fcntlPtr.asFunction<int Function(int, int)>();

  int openx_np(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    filesec_t arg2,
  ) {
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openx_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int, filesec_t)>>('openx_np');
  late final _openx_np = _openx_npPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, filesec_t)>();

  int open_dprotected_np(
    ffi.Pointer<pkg_ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _open_dprotected_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, pkg_ffi.Int,
              pkg_ffi.Int, pkg_ffi.Int)>>('open_dprotected_np');
  late final _open_dprotected_np = _open_dprotected_npPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, int, int)>();

  int flock1(
    int arg0,
    int arg1,
  ) {
    return _flock1(
      arg0,
      arg1,
    );
  }

  late final _flock1Ptr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, pkg_ffi.Int)>>(
      'flock');
  late final _flock1 = _flock1Ptr.asFunction<int Function(int, int)>();

  filesec_t filesec_init() {
    return _filesec_init();
  }

  late final _filesec_initPtr =
      _lookup<ffi.NativeFunction<filesec_t Function()>>('filesec_init');
  late final _filesec_init =
      _filesec_initPtr.asFunction<filesec_t Function()>();

  filesec_t filesec_dup(
    filesec_t arg0,
  ) {
    return _filesec_dup(
      arg0,
    );
  }

  late final _filesec_dupPtr =
      _lookup<ffi.NativeFunction<filesec_t Function(filesec_t)>>('filesec_dup');
  late final _filesec_dup =
      _filesec_dupPtr.asFunction<filesec_t Function(filesec_t)>();

  void filesec_free(
    filesec_t arg0,
  ) {
    return _filesec_free(
      arg0,
    );
  }

  late final _filesec_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(filesec_t)>>('filesec_free');
  late final _filesec_free =
      _filesec_freePtr.asFunction<void Function(filesec_t)>();

  int filesec_get_property(
    filesec_t arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_get_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_get_propertyPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(filesec_t, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('filesec_get_property');
  late final _filesec_get_property = _filesec_get_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_query_property(
    filesec_t arg0,
    int arg1,
    ffi.Pointer<pkg_ffi.Int> arg2,
  ) {
    return _filesec_query_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_query_propertyPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(filesec_t, ffi.Int32,
              ffi.Pointer<pkg_ffi.Int>)>>('filesec_query_property');
  late final _filesec_query_property = _filesec_query_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<pkg_ffi.Int>)>();

  int filesec_set_property(
    filesec_t arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_set_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_set_propertyPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(filesec_t, ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('filesec_set_property');
  late final _filesec_set_property = _filesec_set_propertyPtr
      .asFunction<int Function(filesec_t, int, ffi.Pointer<ffi.Void>)>();

  int filesec_unset_property(
    filesec_t arg0,
    int arg1,
  ) {
    return _filesec_unset_property(
      arg0,
      arg1,
    );
  }

  late final _filesec_unset_propertyPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(filesec_t, ffi.Int32)>>(
          'filesec_unset_property');
  late final _filesec_unset_property =
      _filesec_unset_propertyPtr.asFunction<int Function(filesec_t, int)>();

  int os_workgroup_copy_port(
    os_workgroup_t wg,
    ffi.Pointer<mach_port_t> mach_port_out,
  ) {
    return _os_workgroup_copy_port(
      wg,
      mach_port_out,
    );
  }

  late final _os_workgroup_copy_portPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(os_workgroup_t,
              ffi.Pointer<mach_port_t>)>>('os_workgroup_copy_port');
  late final _os_workgroup_copy_port = _os_workgroup_copy_portPtr
      .asFunction<int Function(os_workgroup_t, ffi.Pointer<mach_port_t>)>();

  os_workgroup_t os_workgroup_create_with_port(
    ffi.Pointer<pkg_ffi.Char> name,
    int mach_port,
  ) {
    return _os_workgroup_create_with_port(
      name,
      mach_port,
    );
  }

  late final _os_workgroup_create_with_portPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<pkg_ffi.Char>,
              mach_port_t)>>('os_workgroup_create_with_port');
  late final _os_workgroup_create_with_port = _os_workgroup_create_with_portPtr
      .asFunction<os_workgroup_t Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  os_workgroup_t os_workgroup_create_with_workgroup(
    ffi.Pointer<pkg_ffi.Char> name,
    os_workgroup_t wg,
  ) {
    return _os_workgroup_create_with_workgroup(
      name,
      wg,
    );
  }

  late final _os_workgroup_create_with_workgroupPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_t Function(ffi.Pointer<pkg_ffi.Char>,
              os_workgroup_t)>>('os_workgroup_create_with_workgroup');
  late final _os_workgroup_create_with_workgroup =
      _os_workgroup_create_with_workgroupPtr.asFunction<
          os_workgroup_t Function(ffi.Pointer<pkg_ffi.Char>, os_workgroup_t)>();

  int os_workgroup_join(
    os_workgroup_t wg,
    os_workgroup_join_token_t token_out,
  ) {
    return _os_workgroup_join(
      wg,
      token_out,
    );
  }

  late final _os_workgroup_joinPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              os_workgroup_t, os_workgroup_join_token_t)>>('os_workgroup_join');
  late final _os_workgroup_join = _os_workgroup_joinPtr
      .asFunction<int Function(os_workgroup_t, os_workgroup_join_token_t)>();

  void os_workgroup_leave(
    os_workgroup_t wg,
    os_workgroup_join_token_t token,
  ) {
    return _os_workgroup_leave(
      wg,
      token,
    );
  }

  late final _os_workgroup_leavePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(os_workgroup_t,
              os_workgroup_join_token_t)>>('os_workgroup_leave');
  late final _os_workgroup_leave = _os_workgroup_leavePtr
      .asFunction<void Function(os_workgroup_t, os_workgroup_join_token_t)>();

  int os_workgroup_set_working_arena(
    os_workgroup_t wg,
    ffi.Pointer<ffi.Void> arena,
    int max_workers,
    os_workgroup_working_arena_destructor_t destructor,
  ) {
    return _os_workgroup_set_working_arena(
      wg,
      arena,
      max_workers,
      destructor,
    );
  }

  late final _os_workgroup_set_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              pkg_ffi.Int Function(os_workgroup_t, ffi.Pointer<ffi.Void>,
                  ffi.Uint32, os_workgroup_working_arena_destructor_t)>>(
      'os_workgroup_set_working_arena');
  late final _os_workgroup_set_working_arena =
      _os_workgroup_set_working_arenaPtr.asFunction<
          int Function(os_workgroup_t, ffi.Pointer<ffi.Void>, int,
              os_workgroup_working_arena_destructor_t)>();

  ffi.Pointer<ffi.Void> os_workgroup_get_working_arena(
    os_workgroup_t wg,
    ffi.Pointer<os_workgroup_index> index_out,
  ) {
    return _os_workgroup_get_working_arena(
      wg,
      index_out,
    );
  }

  late final _os_workgroup_get_working_arenaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  os_workgroup_t, ffi.Pointer<os_workgroup_index>)>>(
      'os_workgroup_get_working_arena');
  late final _os_workgroup_get_working_arena =
      _os_workgroup_get_working_arenaPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              os_workgroup_t, ffi.Pointer<os_workgroup_index>)>();

  void os_workgroup_cancel(
    os_workgroup_t wg,
  ) {
    return _os_workgroup_cancel(
      wg,
    );
  }

  late final _os_workgroup_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(os_workgroup_t)>>(
          'os_workgroup_cancel');
  late final _os_workgroup_cancel =
      _os_workgroup_cancelPtr.asFunction<void Function(os_workgroup_t)>();

  bool os_workgroup_testcancel(
    os_workgroup_t wg,
  ) {
    return _os_workgroup_testcancel(
          wg,
        ) !=
        0;
  }

  late final _os_workgroup_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(os_workgroup_t)>>(
          'os_workgroup_testcancel');
  late final _os_workgroup_testcancel =
      _os_workgroup_testcancelPtr.asFunction<int Function(os_workgroup_t)>();

  int os_workgroup_max_parallel_threads(
    os_workgroup_t wg,
    os_workgroup_mpt_attr_t attr,
  ) {
    return _os_workgroup_max_parallel_threads(
      wg,
      attr,
    );
  }

  late final _os_workgroup_max_parallel_threadsPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(os_workgroup_t,
              os_workgroup_mpt_attr_t)>>('os_workgroup_max_parallel_threads');
  late final _os_workgroup_max_parallel_threads =
      _os_workgroup_max_parallel_threadsPtr
          .asFunction<int Function(os_workgroup_t, os_workgroup_mpt_attr_t)>();

  int os_workgroup_interval_start(
    os_workgroup_interval_t wg,
    int start,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_start(
      wg,
      start,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_startPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(os_workgroup_interval_t, ffi.Uint64, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_start');
  late final _os_workgroup_interval_start =
      _os_workgroup_interval_startPtr.asFunction<
          int Function(os_workgroup_interval_t, int, int,
              os_workgroup_interval_data_t)>();

  int os_workgroup_interval_update(
    os_workgroup_interval_t wg,
    int deadline,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_update(
      wg,
      deadline,
      data,
    );
  }

  late final _os_workgroup_interval_updatePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(os_workgroup_interval_t, ffi.Uint64,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_update');
  late final _os_workgroup_interval_update =
      _os_workgroup_interval_updatePtr.asFunction<
          int Function(
              os_workgroup_interval_t, int, os_workgroup_interval_data_t)>();

  int os_workgroup_interval_finish(
    os_workgroup_interval_t wg,
    os_workgroup_interval_data_t data,
  ) {
    return _os_workgroup_interval_finish(
      wg,
      data,
    );
  }

  late final _os_workgroup_interval_finishPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(os_workgroup_interval_t,
              os_workgroup_interval_data_t)>>('os_workgroup_interval_finish');
  late final _os_workgroup_interval_finish =
      _os_workgroup_interval_finishPtr.asFunction<
          int Function(
              os_workgroup_interval_t, os_workgroup_interval_data_t)>();

  os_workgroup_parallel_t os_workgroup_parallel_create(
    ffi.Pointer<pkg_ffi.Char> name,
    os_workgroup_attr_t attr,
  ) {
    return _os_workgroup_parallel_create(
      name,
      attr,
    );
  }

  late final _os_workgroup_parallel_createPtr = _lookup<
      ffi.NativeFunction<
          os_workgroup_parallel_t Function(ffi.Pointer<pkg_ffi.Char>,
              os_workgroup_attr_t)>>('os_workgroup_parallel_create');
  late final _os_workgroup_parallel_create =
      _os_workgroup_parallel_createPtr.asFunction<
          os_workgroup_parallel_t Function(
              ffi.Pointer<pkg_ffi.Char>, os_workgroup_attr_t)>();

  int dispatch_time(
    int when,
    int delta,
  ) {
    return _dispatch_time(
      when,
      delta,
    );
  }

  late final _dispatch_timePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              dispatch_time_t, ffi.Int64)>>('dispatch_time');
  late final _dispatch_time =
      _dispatch_timePtr.asFunction<int Function(int, int)>();

  int dispatch_walltime(
    ffi.Pointer<timespec> when,
    int delta,
  ) {
    return _dispatch_walltime(
      when,
      delta,
    );
  }

  late final _dispatch_walltimePtr = _lookup<
      ffi.NativeFunction<
          dispatch_time_t Function(
              ffi.Pointer<timespec>, ffi.Int64)>>('dispatch_walltime');
  late final _dispatch_walltime = _dispatch_walltimePtr
      .asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int qos_class_self() {
    return _qos_class_self();
  }

  late final _qos_class_selfPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_self');
  late final _qos_class_self = _qos_class_selfPtr.asFunction<int Function()>();

  int qos_class_main() {
    return _qos_class_main();
  }

  late final _qos_class_mainPtr =
      _lookup<ffi.NativeFunction<qos_class_t Function()>>('qos_class_main');
  late final _qos_class_main = _qos_class_mainPtr.asFunction<int Function()>();

  void dispatch_retain(
    dispatch_object_t object,
  ) {
    return _dispatch_retain(
      object,
    );
  }

  late final _dispatch_retainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_retain');
  late final _dispatch_retain =
      _dispatch_retainPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_release(
    dispatch_object_t object,
  ) {
    return _dispatch_release(
      object,
    );
  }

  late final _dispatch_releasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_release');
  late final _dispatch_release =
      _dispatch_releasePtr.asFunction<void Function(dispatch_object_t)>();

  ffi.Pointer<ffi.Void> dispatch_get_context(
    dispatch_object_t object,
  ) {
    return _dispatch_get_context(
      object,
    );
  }

  late final _dispatch_get_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              dispatch_object_t)>>('dispatch_get_context');
  late final _dispatch_get_context = _dispatch_get_contextPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(dispatch_object_t)>();

  void dispatch_set_context(
    dispatch_object_t object,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _dispatch_set_context(
      object,
      context,
    );
  }

  late final _dispatch_set_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_set_context');
  late final _dispatch_set_context = _dispatch_set_contextPtr
      .asFunction<void Function(dispatch_object_t, ffi.Pointer<ffi.Void>)>();

  void dispatch_set_finalizer_f(
    dispatch_object_t object,
    dispatch_function_t finalizer,
  ) {
    return _dispatch_set_finalizer_f(
      object,
      finalizer,
    );
  }

  late final _dispatch_set_finalizer_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_function_t)>>('dispatch_set_finalizer_f');
  late final _dispatch_set_finalizer_f = _dispatch_set_finalizer_fPtr
      .asFunction<void Function(dispatch_object_t, dispatch_function_t)>();

  void dispatch_activate(
    dispatch_object_t object,
  ) {
    return _dispatch_activate(
      object,
    );
  }

  late final _dispatch_activatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_activate');
  late final _dispatch_activate =
      _dispatch_activatePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_suspend(
    dispatch_object_t object,
  ) {
    return _dispatch_suspend(
      object,
    );
  }

  late final _dispatch_suspendPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_suspend');
  late final _dispatch_suspend =
      _dispatch_suspendPtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_resume(
    dispatch_object_t object,
  ) {
    return _dispatch_resume(
      object,
    );
  }

  late final _dispatch_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_object_t)>>(
          'dispatch_resume');
  late final _dispatch_resume =
      _dispatch_resumePtr.asFunction<void Function(dispatch_object_t)>();

  void dispatch_set_qos_class_floor(
    dispatch_object_t object,
    int qos_class,
    int relative_priority,
  ) {
    return _dispatch_set_qos_class_floor(
      object,
      qos_class,
      relative_priority,
    );
  }

  late final _dispatch_set_qos_class_floorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, dispatch_qos_class_t,
              pkg_ffi.Int)>>('dispatch_set_qos_class_floor');
  late final _dispatch_set_qos_class_floor = _dispatch_set_qos_class_floorPtr
      .asFunction<void Function(dispatch_object_t, int, int)>();

  int dispatch_wait(
    ffi.Pointer<ffi.Void> object,
    int timeout,
  ) {
    return _dispatch_wait(
      object,
      timeout,
    );
  }

  late final _dispatch_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<ffi.Void>, dispatch_time_t)>>('dispatch_wait');
  late final _dispatch_wait =
      _dispatch_waitPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  void dispatch_cancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_cancel(
      object,
    );
  }

  late final _dispatch_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_cancel');
  late final _dispatch_cancel =
      _dispatch_cancelPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int dispatch_testcancel(
    ffi.Pointer<ffi.Void> object,
  ) {
    return _dispatch_testcancel(
      object,
    );
  }

  late final _dispatch_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'dispatch_testcancel');
  late final _dispatch_testcancel =
      _dispatch_testcancelPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_debug(
    dispatch_object_t object,
    ffi.Pointer<pkg_ffi.Char> message,
  ) {
    return _dispatch_debug(
      object,
      message,
    );
  }

  late final _dispatch_debugPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_object_t, ffi.Pointer<pkg_ffi.Char>)>>('dispatch_debug');
  late final _dispatch_debug = _dispatch_debugPtr.asFunction<
      void Function(dispatch_object_t, ffi.Pointer<pkg_ffi.Char>)>();

  void dispatch_debugv(
    dispatch_object_t object,
    ffi.Pointer<pkg_ffi.Char> message,
    va_list ap,
  ) {
    return _dispatch_debugv(
      object,
      message,
      ap,
    );
  }

  late final _dispatch_debugvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t, ffi.Pointer<pkg_ffi.Char>,
              va_list)>>('dispatch_debugv');
  late final _dispatch_debugv = _dispatch_debugvPtr.asFunction<
      void Function(dispatch_object_t, ffi.Pointer<pkg_ffi.Char>, va_list)>();

  void dispatch_async_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_f');
  late final _dispatch_async_f = _dispatch_async_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_sync_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_sync_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_sync_f');
  late final _dispatch_sync_f = _dispatch_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_async_and_wait_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_async_and_wait_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_async_and_wait_f');
  late final _dispatch_async_and_wait_f =
      _dispatch_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_apply_f(
    int iterations,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>
        work,
  ) {
    return _dispatch_apply_f(
      iterations,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_apply_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              pkg_ffi.Size,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(ffi.Pointer<ffi.Void>,
                          pkg_ffi.Size)>>)>>('dispatch_apply_f');
  late final _dispatch_apply_f = _dispatch_apply_fPtr.asFunction<
      void Function(
          int,
          dispatch_queue_t,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void>, pkg_ffi.Size)>>)>();

  dispatch_queue_t dispatch_get_current_queue() {
    return _dispatch_get_current_queue();
  }

  late final _dispatch_get_current_queuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function()>>(
          'dispatch_get_current_queue');
  late final _dispatch_get_current_queue =
      _dispatch_get_current_queuePtr.asFunction<dispatch_queue_t Function()>();

  late final ffi.Pointer<dispatch_queue_s> __dispatch_main_q =
      _lookup<dispatch_queue_s>('_dispatch_main_q');

  ffi.Pointer<dispatch_queue_s> get _dispatch_main_q => __dispatch_main_q;

  dispatch_queue_global_t dispatch_get_global_queue(
    int identifier,
    int flags,
  ) {
    return _dispatch_get_global_queue(
      identifier,
      flags,
    );
  }

  late final _dispatch_get_global_queuePtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_global_t Function(
              ffi.IntPtr, uintptr_t)>>('dispatch_get_global_queue');
  late final _dispatch_get_global_queue = _dispatch_get_global_queuePtr
      .asFunction<dispatch_queue_global_t Function(int, int)>();

  late final ffi.Pointer<dispatch_queue_attr_s>
      __dispatch_queue_attr_concurrent =
      _lookup<dispatch_queue_attr_s>('_dispatch_queue_attr_concurrent');

  ffi.Pointer<dispatch_queue_attr_s> get _dispatch_queue_attr_concurrent =>
      __dispatch_queue_attr_concurrent;

  dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(
    dispatch_queue_attr_t attr,
  ) {
    return _dispatch_queue_attr_make_initially_inactive(
      attr,
    );
  }

  late final _dispatch_queue_attr_make_initially_inactivePtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(dispatch_queue_attr_t)>>(
      'dispatch_queue_attr_make_initially_inactive');
  late final _dispatch_queue_attr_make_initially_inactive =
      _dispatch_queue_attr_make_initially_inactivePtr
          .asFunction<dispatch_queue_attr_t Function(dispatch_queue_attr_t)>();

  dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(
    dispatch_queue_attr_t attr,
    int frequency,
  ) {
    return _dispatch_queue_attr_make_with_autorelease_frequency(
      attr,
      frequency,
    );
  }

  late final _dispatch_queue_attr_make_with_autorelease_frequencyPtr = _lookup<
          ffi.NativeFunction<
              dispatch_queue_attr_t Function(
                  dispatch_queue_attr_t, ffi.Int32)>>(
      'dispatch_queue_attr_make_with_autorelease_frequency');
  late final _dispatch_queue_attr_make_with_autorelease_frequency =
      _dispatch_queue_attr_make_with_autorelease_frequencyPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int)>();

  dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(
    dispatch_queue_attr_t attr,
    int qos_class,
    int relative_priority,
  ) {
    return _dispatch_queue_attr_make_with_qos_class(
      attr,
      qos_class,
      relative_priority,
    );
  }

  late final _dispatch_queue_attr_make_with_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_attr_t Function(
              dispatch_queue_attr_t,
              dispatch_qos_class_t,
              pkg_ffi.Int)>>('dispatch_queue_attr_make_with_qos_class');
  late final _dispatch_queue_attr_make_with_qos_class =
      _dispatch_queue_attr_make_with_qos_classPtr.asFunction<
          dispatch_queue_attr_t Function(dispatch_queue_attr_t, int, int)>();

  dispatch_queue_t dispatch_queue_create_with_target(
    ffi.Pointer<pkg_ffi.Char> label,
    dispatch_queue_attr_t attr,
    dispatch_queue_t target,
  ) {
    return _dispatch_queue_create_with_target(
      label,
      attr,
      target,
    );
  }

  late final _dispatch_queue_create_with_targetPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(
              ffi.Pointer<pkg_ffi.Char>,
              dispatch_queue_attr_t,
              dispatch_queue_t)>>('dispatch_queue_create_with_target');
  late final _dispatch_queue_create_with_target =
      _dispatch_queue_create_with_targetPtr.asFunction<
          dispatch_queue_t Function(ffi.Pointer<pkg_ffi.Char>,
              dispatch_queue_attr_t, dispatch_queue_t)>();

  dispatch_queue_t dispatch_queue_create(
    ffi.Pointer<pkg_ffi.Char> label,
    dispatch_queue_attr_t attr,
  ) {
    return _dispatch_queue_create(
      label,
      attr,
    );
  }

  late final _dispatch_queue_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_queue_t Function(ffi.Pointer<pkg_ffi.Char>,
              dispatch_queue_attr_t)>>('dispatch_queue_create');
  late final _dispatch_queue_create = _dispatch_queue_createPtr.asFunction<
      dispatch_queue_t Function(
          ffi.Pointer<pkg_ffi.Char>, dispatch_queue_attr_t)>();

  ffi.Pointer<pkg_ffi.Char> dispatch_queue_get_label(
    dispatch_queue_t queue,
  ) {
    return _dispatch_queue_get_label(
      queue,
    );
  }

  late final _dispatch_queue_get_labelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              dispatch_queue_t)>>('dispatch_queue_get_label');
  late final _dispatch_queue_get_label = _dispatch_queue_get_labelPtr
      .asFunction<ffi.Pointer<pkg_ffi.Char> Function(dispatch_queue_t)>();

  int dispatch_queue_get_qos_class(
    dispatch_queue_t queue,
    ffi.Pointer<pkg_ffi.Int> relative_priority_ptr,
  ) {
    return _dispatch_queue_get_qos_class(
      queue,
      relative_priority_ptr,
    );
  }

  late final _dispatch_queue_get_qos_classPtr = _lookup<
      ffi.NativeFunction<
          dispatch_qos_class_t Function(dispatch_queue_t,
              ffi.Pointer<pkg_ffi.Int>)>>('dispatch_queue_get_qos_class');
  late final _dispatch_queue_get_qos_class = _dispatch_queue_get_qos_classPtr
      .asFunction<int Function(dispatch_queue_t, ffi.Pointer<pkg_ffi.Int>)>();

  void dispatch_set_target_queue(
    dispatch_object_t object,
    dispatch_queue_t queue,
  ) {
    return _dispatch_set_target_queue(
      object,
      queue,
    );
  }

  late final _dispatch_set_target_queuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_object_t,
              dispatch_queue_t)>>('dispatch_set_target_queue');
  late final _dispatch_set_target_queue = _dispatch_set_target_queuePtr
      .asFunction<void Function(dispatch_object_t, dispatch_queue_t)>();

  void dispatch_main() {
    return _dispatch_main();
  }

  late final _dispatch_mainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('dispatch_main');
  late final _dispatch_main = _dispatch_mainPtr.asFunction<void Function()>();

  void dispatch_after_f(
    int when,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_after_f(
      when,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_after_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_time_t, dispatch_queue_t,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>>('dispatch_after_f');
  late final _dispatch_after_f = _dispatch_after_fPtr.asFunction<
      void Function(
          int, dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_f');
  late final _dispatch_barrier_async_f =
      _dispatch_barrier_async_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_sync_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_sync_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_sync_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_sync_f');
  late final _dispatch_barrier_sync_f = _dispatch_barrier_sync_fPtr.asFunction<
      void Function(
          dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_barrier_async_and_wait_f(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_barrier_async_and_wait_f(
      queue,
      context,
      work,
    );
  }

  late final _dispatch_barrier_async_and_wait_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_barrier_async_and_wait_f');
  late final _dispatch_barrier_async_and_wait_f =
      _dispatch_barrier_async_and_wait_fPtr.asFunction<
          void Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  void dispatch_queue_set_specific(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t destructor,
  ) {
    return _dispatch_queue_set_specific(
      queue,
      key,
      context,
      destructor,
    );
  }

  late final _dispatch_queue_set_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_queue_set_specific');
  late final _dispatch_queue_set_specific =
      _dispatch_queue_set_specificPtr.asFunction<
          void Function(dispatch_queue_t, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, dispatch_function_t)>();

  ffi.Pointer<ffi.Void> dispatch_queue_get_specific(
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_queue_get_specific(
      queue,
      key,
    );
  }

  late final _dispatch_queue_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(dispatch_queue_t,
              ffi.Pointer<ffi.Void>)>>('dispatch_queue_get_specific');
  late final _dispatch_queue_get_specific =
      _dispatch_queue_get_specificPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              dispatch_queue_t, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> dispatch_get_specific(
    ffi.Pointer<ffi.Void> key,
  ) {
    return _dispatch_get_specific(
      key,
    );
  }

  late final _dispatch_get_specificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('dispatch_get_specific');
  late final _dispatch_get_specific = _dispatch_get_specificPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void dispatch_assert_queue(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue(
      queue,
    );
  }

  late final _dispatch_assert_queuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue');
  late final _dispatch_assert_queue =
      _dispatch_assert_queuePtr.asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_barrier(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_barrier(
      queue,
    );
  }

  late final _dispatch_assert_queue_barrierPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_barrier');
  late final _dispatch_assert_queue_barrier = _dispatch_assert_queue_barrierPtr
      .asFunction<void Function(dispatch_queue_t)>();

  void dispatch_assert_queue_not(
    dispatch_queue_t queue,
  ) {
    return _dispatch_assert_queue_not(
      queue,
    );
  }

  late final _dispatch_assert_queue_notPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_queue_t)>>(
          'dispatch_assert_queue_not');
  late final _dispatch_assert_queue_not = _dispatch_assert_queue_notPtr
      .asFunction<void Function(dispatch_queue_t)>();

  late final ffi.Pointer<security_token_t> _KERNEL_SECURITY_TOKEN =
      _lookup<security_token_t>('KERNEL_SECURITY_TOKEN');

  security_token_t get KERNEL_SECURITY_TOKEN => _KERNEL_SECURITY_TOKEN.ref;

  late final ffi.Pointer<audit_token_t> _KERNEL_AUDIT_TOKEN =
      _lookup<audit_token_t>('KERNEL_AUDIT_TOKEN');

  audit_token_t get KERNEL_AUDIT_TOKEN => _KERNEL_AUDIT_TOKEN.ref;

  int mach_msg_overwrite(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
    ffi.Pointer<mach_msg_header_t> rcv_msg,
    int rcv_limit,
  ) {
    return _mach_msg_overwrite(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
      rcv_msg,
      rcv_limit,
    );
  }

  late final _mach_msg_overwritePtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t,
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_size_t)>>('mach_msg_overwrite');
  late final _mach_msg_overwrite = _mach_msg_overwritePtr.asFunction<
      int Function(ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int,
          ffi.Pointer<mach_msg_header_t>, int)>();

  int mach_msg(
    ffi.Pointer<mach_msg_header_t> msg,
    int option,
    int send_size,
    int rcv_size,
    int rcv_name,
    int timeout,
    int notify,
  ) {
    return _mach_msg(
      msg,
      option,
      send_size,
      rcv_size,
      rcv_name,
      timeout,
      notify,
    );
  }

  late final _mach_msgPtr = _lookup<
      ffi.NativeFunction<
          mach_msg_return_t Function(
              ffi.Pointer<mach_msg_header_t>,
              mach_msg_option_t,
              mach_msg_size_t,
              mach_msg_size_t,
              mach_port_name_t,
              mach_msg_timeout_t,
              mach_port_name_t)>>('mach_msg');
  late final _mach_msg = _mach_msgPtr.asFunction<
      int Function(
          ffi.Pointer<mach_msg_header_t>, int, int, int, int, int, int)>();

  int mach_voucher_deallocate(
    int voucher,
  ) {
    return _mach_voucher_deallocate(
      voucher,
    );
  }

  late final _mach_voucher_deallocatePtr =
      _lookup<ffi.NativeFunction<kern_return_t Function(mach_port_name_t)>>(
          'mach_voucher_deallocate');
  late final _mach_voucher_deallocate =
      _mach_voucher_deallocatePtr.asFunction<int Function(int)>();

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_add =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_add');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_add =>
      __dispatch_source_type_data_add;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_or =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_or');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_or =>
      __dispatch_source_type_data_or;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_data_replace =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_data_replace');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_data_replace =>
      __dispatch_source_type_data_replace;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_send =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_send');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_send =>
      __dispatch_source_type_mach_send;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_mach_recv =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_mach_recv');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_mach_recv =>
      __dispatch_source_type_mach_recv;

  late final ffi.Pointer<dispatch_source_type_s>
      __dispatch_source_type_memorypressure =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_memorypressure');

  ffi.Pointer<dispatch_source_type_s>
      get _dispatch_source_type_memorypressure =>
          __dispatch_source_type_memorypressure;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_proc =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_proc');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_proc =>
      __dispatch_source_type_proc;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_read =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_read');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_read =>
      __dispatch_source_type_read;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_signal =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_signal');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_signal =>
      __dispatch_source_type_signal;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_timer =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_timer');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_timer =>
      __dispatch_source_type_timer;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_vnode =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_vnode');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_vnode =>
      __dispatch_source_type_vnode;

  late final ffi.Pointer<dispatch_source_type_s> __dispatch_source_type_write =
      _lookup<dispatch_source_type_s>('_dispatch_source_type_write');

  ffi.Pointer<dispatch_source_type_s> get _dispatch_source_type_write =>
      __dispatch_source_type_write;

  dispatch_source_t dispatch_source_create(
    dispatch_source_type_t type,
    int handle,
    int mask,
    dispatch_queue_t queue,
  ) {
    return _dispatch_source_create(
      type,
      handle,
      mask,
      queue,
    );
  }

  late final _dispatch_source_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_source_t Function(dispatch_source_type_t, uintptr_t,
              uintptr_t, dispatch_queue_t)>>('dispatch_source_create');
  late final _dispatch_source_create = _dispatch_source_createPtr.asFunction<
      dispatch_source_t Function(
          dispatch_source_type_t, int, int, dispatch_queue_t)>();

  void dispatch_source_set_event_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_event_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_event_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_event_handler_f');
  late final _dispatch_source_set_event_handler_f =
      _dispatch_source_set_event_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_set_cancel_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_cancel_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_cancel_handler_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t,
              dispatch_function_t)>>('dispatch_source_set_cancel_handler_f');
  late final _dispatch_source_set_cancel_handler_f =
      _dispatch_source_set_cancel_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  void dispatch_source_cancel(
    dispatch_source_t source,
  ) {
    return _dispatch_source_cancel(
      source,
    );
  }

  late final _dispatch_source_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_source_t)>>(
          'dispatch_source_cancel');
  late final _dispatch_source_cancel =
      _dispatch_source_cancelPtr.asFunction<void Function(dispatch_source_t)>();

  int dispatch_source_testcancel(
    dispatch_source_t source,
  ) {
    return _dispatch_source_testcancel(
      source,
    );
  }

  late final _dispatch_source_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_source_t)>>(
          'dispatch_source_testcancel');
  late final _dispatch_source_testcancel = _dispatch_source_testcancelPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_handle(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_handle(
      source,
    );
  }

  late final _dispatch_source_get_handlePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(dispatch_source_t)>>(
          'dispatch_source_get_handle');
  late final _dispatch_source_get_handle = _dispatch_source_get_handlePtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_mask(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_mask(
      source,
    );
  }

  late final _dispatch_source_get_maskPtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(dispatch_source_t)>>(
          'dispatch_source_get_mask');
  late final _dispatch_source_get_mask = _dispatch_source_get_maskPtr
      .asFunction<int Function(dispatch_source_t)>();

  int dispatch_source_get_data(
    dispatch_source_t source,
  ) {
    return _dispatch_source_get_data(
      source,
    );
  }

  late final _dispatch_source_get_dataPtr =
      _lookup<ffi.NativeFunction<uintptr_t Function(dispatch_source_t)>>(
          'dispatch_source_get_data');
  late final _dispatch_source_get_data = _dispatch_source_get_dataPtr
      .asFunction<int Function(dispatch_source_t)>();

  void dispatch_source_merge_data(
    dispatch_source_t source,
    int value,
  ) {
    return _dispatch_source_merge_data(
      source,
      value,
    );
  }

  late final _dispatch_source_merge_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(dispatch_source_t, uintptr_t)>>(
      'dispatch_source_merge_data');
  late final _dispatch_source_merge_data = _dispatch_source_merge_dataPtr
      .asFunction<void Function(dispatch_source_t, int)>();

  void dispatch_source_set_timer(
    dispatch_source_t source,
    int start,
    int interval,
    int leeway,
  ) {
    return _dispatch_source_set_timer(
      source,
      start,
      interval,
      leeway,
    );
  }

  late final _dispatch_source_set_timerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_source_t, dispatch_time_t, ffi.Uint64,
              ffi.Uint64)>>('dispatch_source_set_timer');
  late final _dispatch_source_set_timer = _dispatch_source_set_timerPtr
      .asFunction<void Function(dispatch_source_t, int, int, int)>();

  void dispatch_source_set_registration_handler_f(
    dispatch_source_t source,
    dispatch_function_t handler,
  ) {
    return _dispatch_source_set_registration_handler_f(
      source,
      handler,
    );
  }

  late final _dispatch_source_set_registration_handler_fPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(dispatch_source_t, dispatch_function_t)>>(
      'dispatch_source_set_registration_handler_f');
  late final _dispatch_source_set_registration_handler_f =
      _dispatch_source_set_registration_handler_fPtr
          .asFunction<void Function(dispatch_source_t, dispatch_function_t)>();

  dispatch_group_t dispatch_group_create() {
    return _dispatch_group_create();
  }

  late final _dispatch_group_createPtr =
      _lookup<ffi.NativeFunction<dispatch_group_t Function()>>(
          'dispatch_group_create');
  late final _dispatch_group_create =
      _dispatch_group_createPtr.asFunction<dispatch_group_t Function()>();

  void dispatch_group_async_f(
    dispatch_group_t group,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_async_f(
      group,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_group_async_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_async_f');
  late final _dispatch_group_async_f = _dispatch_group_async_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  int dispatch_group_wait(
    dispatch_group_t group,
    int timeout,
  ) {
    return _dispatch_group_wait(
      group,
      timeout,
    );
  }

  late final _dispatch_group_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              dispatch_group_t, dispatch_time_t)>>('dispatch_group_wait');
  late final _dispatch_group_wait =
      _dispatch_group_waitPtr.asFunction<int Function(dispatch_group_t, int)>();

  void dispatch_group_notify_f(
    dispatch_group_t group,
    dispatch_queue_t queue,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t work,
  ) {
    return _dispatch_group_notify_f(
      group,
      queue,
      context,
      work,
    );
  }

  late final _dispatch_group_notify_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_group_t,
              dispatch_queue_t,
              ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_group_notify_f');
  late final _dispatch_group_notify_f = _dispatch_group_notify_fPtr.asFunction<
      void Function(dispatch_group_t, dispatch_queue_t, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  void dispatch_group_enter(
    dispatch_group_t group,
  ) {
    return _dispatch_group_enter(
      group,
    );
  }

  late final _dispatch_group_enterPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_enter');
  late final _dispatch_group_enter =
      _dispatch_group_enterPtr.asFunction<void Function(dispatch_group_t)>();

  void dispatch_group_leave(
    dispatch_group_t group,
  ) {
    return _dispatch_group_leave(
      group,
    );
  }

  late final _dispatch_group_leavePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(dispatch_group_t)>>(
          'dispatch_group_leave');
  late final _dispatch_group_leave =
      _dispatch_group_leavePtr.asFunction<void Function(dispatch_group_t)>();

  dispatch_semaphore_t dispatch_semaphore_create(
    int value,
  ) {
    return _dispatch_semaphore_create(
      value,
    );
  }

  late final _dispatch_semaphore_createPtr =
      _lookup<ffi.NativeFunction<dispatch_semaphore_t Function(ffi.IntPtr)>>(
          'dispatch_semaphore_create');
  late final _dispatch_semaphore_create = _dispatch_semaphore_createPtr
      .asFunction<dispatch_semaphore_t Function(int)>();

  int dispatch_semaphore_wait(
    dispatch_semaphore_t dsema,
    int timeout,
  ) {
    return _dispatch_semaphore_wait(
      dsema,
      timeout,
    );
  }

  late final _dispatch_semaphore_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(dispatch_semaphore_t,
              dispatch_time_t)>>('dispatch_semaphore_wait');
  late final _dispatch_semaphore_wait = _dispatch_semaphore_waitPtr
      .asFunction<int Function(dispatch_semaphore_t, int)>();

  int dispatch_semaphore_signal(
    dispatch_semaphore_t dsema,
  ) {
    return _dispatch_semaphore_signal(
      dsema,
    );
  }

  late final _dispatch_semaphore_signalPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(dispatch_semaphore_t)>>(
          'dispatch_semaphore_signal');
  late final _dispatch_semaphore_signal = _dispatch_semaphore_signalPtr
      .asFunction<int Function(dispatch_semaphore_t)>();

  void dispatch_once_f(
    ffi.Pointer<dispatch_once_t> predicate,
    ffi.Pointer<ffi.Void> context,
    dispatch_function_t function,
  ) {
    return _dispatch_once_f(
      predicate,
      context,
      function,
    );
  }

  late final _dispatch_once_fPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
              dispatch_function_t)>>('dispatch_once_f');
  late final _dispatch_once_f = _dispatch_once_fPtr.asFunction<
      void Function(ffi.Pointer<dispatch_once_t>, ffi.Pointer<ffi.Void>,
          dispatch_function_t)>();

  late final ffi.Pointer<dispatch_data_s> __dispatch_data_empty =
      _lookup<dispatch_data_s>('_dispatch_data_empty');

  ffi.Pointer<dispatch_data_s> get _dispatch_data_empty =>
      __dispatch_data_empty;

  int dispatch_data_get_size(
    dispatch_data_t data,
  ) {
    return _dispatch_data_get_size(
      data,
    );
  }

  late final _dispatch_data_get_sizePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Size Function(dispatch_data_t)>>(
          'dispatch_data_get_size');
  late final _dispatch_data_get_size =
      _dispatch_data_get_sizePtr.asFunction<int Function(dispatch_data_t)>();

  dispatch_data_t dispatch_data_create_map(
    dispatch_data_t data,
    ffi.Pointer<ffi.Pointer<ffi.Void>> buffer_ptr,
    ffi.Pointer<pkg_ffi.Size> size_ptr,
  ) {
    return _dispatch_data_create_map(
      data,
      buffer_ptr,
      size_ptr,
    );
  }

  late final _dispatch_data_create_mapPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('dispatch_data_create_map');
  late final _dispatch_data_create_map =
      _dispatch_data_create_mapPtr.asFunction<
          dispatch_data_t Function(dispatch_data_t,
              ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<pkg_ffi.Size>)>();

  dispatch_data_t dispatch_data_create_concat(
    dispatch_data_t data1,
    dispatch_data_t data2,
  ) {
    return _dispatch_data_create_concat(
      data1,
      data2,
    );
  }

  late final _dispatch_data_create_concatPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t,
              dispatch_data_t)>>('dispatch_data_create_concat');
  late final _dispatch_data_create_concat = _dispatch_data_create_concatPtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, dispatch_data_t)>();

  dispatch_data_t dispatch_data_create_subrange(
    dispatch_data_t data,
    int offset,
    int length,
  ) {
    return _dispatch_data_create_subrange(
      data,
      offset,
      length,
    );
  }

  late final _dispatch_data_create_subrangePtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, pkg_ffi.Size,
              pkg_ffi.Size)>>('dispatch_data_create_subrange');
  late final _dispatch_data_create_subrange = _dispatch_data_create_subrangePtr
      .asFunction<dispatch_data_t Function(dispatch_data_t, int, int)>();

  dispatch_data_t dispatch_data_copy_region(
    dispatch_data_t data,
    int location,
    ffi.Pointer<pkg_ffi.Size> offset_ptr,
  ) {
    return _dispatch_data_copy_region(
      data,
      location,
      offset_ptr,
    );
  }

  late final _dispatch_data_copy_regionPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(dispatch_data_t, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('dispatch_data_copy_region');
  late final _dispatch_data_copy_region =
      _dispatch_data_copy_regionPtr.asFunction<
          dispatch_data_t Function(
              dispatch_data_t, int, ffi.Pointer<pkg_ffi.Size>)>();

  void dispatch_io_close(
    dispatch_io_t channel,
    int flags,
  ) {
    return _dispatch_io_close(
      channel,
      flags,
    );
  }

  late final _dispatch_io_closePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              dispatch_io_t, dispatch_io_close_flags_t)>>('dispatch_io_close');
  late final _dispatch_io_close =
      _dispatch_io_closePtr.asFunction<void Function(dispatch_io_t, int)>();

  int dispatch_io_get_descriptor(
    dispatch_io_t channel,
  ) {
    return _dispatch_io_get_descriptor(
      channel,
    );
  }

  late final _dispatch_io_get_descriptorPtr =
      _lookup<ffi.NativeFunction<dispatch_fd_t Function(dispatch_io_t)>>(
          'dispatch_io_get_descriptor');
  late final _dispatch_io_get_descriptor =
      _dispatch_io_get_descriptorPtr.asFunction<int Function(dispatch_io_t)>();

  void dispatch_io_set_high_water(
    dispatch_io_t channel,
    int high_water,
  ) {
    return _dispatch_io_set_high_water(
      channel,
      high_water,
    );
  }

  late final _dispatch_io_set_high_waterPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(dispatch_io_t, pkg_ffi.Size)>>(
      'dispatch_io_set_high_water');
  late final _dispatch_io_set_high_water = _dispatch_io_set_high_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_low_water(
    dispatch_io_t channel,
    int low_water,
  ) {
    return _dispatch_io_set_low_water(
      channel,
      low_water,
    );
  }

  late final _dispatch_io_set_low_waterPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(dispatch_io_t, pkg_ffi.Size)>>(
      'dispatch_io_set_low_water');
  late final _dispatch_io_set_low_water = _dispatch_io_set_low_waterPtr
      .asFunction<void Function(dispatch_io_t, int)>();

  void dispatch_io_set_interval(
    dispatch_io_t channel,
    int interval,
    int flags,
  ) {
    return _dispatch_io_set_interval(
      channel,
      interval,
      flags,
    );
  }

  late final _dispatch_io_set_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_io_t, ffi.Uint64,
              dispatch_io_interval_flags_t)>>('dispatch_io_set_interval');
  late final _dispatch_io_set_interval = _dispatch_io_set_intervalPtr
      .asFunction<void Function(dispatch_io_t, int, int)>();

  dispatch_workloop_t dispatch_workloop_create(
    ffi.Pointer<pkg_ffi.Char> label,
  ) {
    return _dispatch_workloop_create(
      label,
    );
  }

  late final _dispatch_workloop_createPtr = _lookup<
      ffi.NativeFunction<
          dispatch_workloop_t Function(
              ffi.Pointer<pkg_ffi.Char>)>>('dispatch_workloop_create');
  late final _dispatch_workloop_create = _dispatch_workloop_createPtr
      .asFunction<dispatch_workloop_t Function(ffi.Pointer<pkg_ffi.Char>)>();

  dispatch_workloop_t dispatch_workloop_create_inactive(
    ffi.Pointer<pkg_ffi.Char> label,
  ) {
    return _dispatch_workloop_create_inactive(
      label,
    );
  }

  late final _dispatch_workloop_create_inactivePtr = _lookup<
      ffi.NativeFunction<
          dispatch_workloop_t Function(
              ffi.Pointer<pkg_ffi.Char>)>>('dispatch_workloop_create_inactive');
  late final _dispatch_workloop_create_inactive =
      _dispatch_workloop_create_inactivePtr.asFunction<
          dispatch_workloop_t Function(ffi.Pointer<pkg_ffi.Char>)>();

  void dispatch_workloop_set_autorelease_frequency(
    dispatch_workloop_t workloop,
    int frequency,
  ) {
    return _dispatch_workloop_set_autorelease_frequency(
      workloop,
      frequency,
    );
  }

  late final _dispatch_workloop_set_autorelease_frequencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_workloop_t,
              ffi.Int32)>>('dispatch_workloop_set_autorelease_frequency');
  late final _dispatch_workloop_set_autorelease_frequency =
      _dispatch_workloop_set_autorelease_frequencyPtr
          .asFunction<void Function(dispatch_workloop_t, int)>();

  void dispatch_workloop_set_os_workgroup(
    dispatch_workloop_t workloop,
    os_workgroup_t workgroup,
  ) {
    return _dispatch_workloop_set_os_workgroup(
      workloop,
      workgroup,
    );
  }

  late final _dispatch_workloop_set_os_workgroupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(dispatch_workloop_t,
              os_workgroup_t)>>('dispatch_workloop_set_os_workgroup');
  late final _dispatch_workloop_set_os_workgroup =
      _dispatch_workloop_set_os_workgroupPtr
          .asFunction<void Function(dispatch_workloop_t, os_workgroup_t)>();

  int CFReadStreamGetTypeID() {
    return _CFReadStreamGetTypeID();
  }

  late final _CFReadStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFReadStreamGetTypeID');
  late final _CFReadStreamGetTypeID =
      _CFReadStreamGetTypeIDPtr.asFunction<int Function()>();

  int CFWriteStreamGetTypeID() {
    return _CFWriteStreamGetTypeID();
  }

  late final _CFWriteStreamGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFWriteStreamGetTypeID');
  late final _CFWriteStreamGetTypeID =
      _CFWriteStreamGetTypeIDPtr.asFunction<int Function()>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyDataWritten =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyDataWritten');

  CFStreamPropertyKey get kCFStreamPropertyDataWritten =>
      _kCFStreamPropertyDataWritten.value;

  set kCFStreamPropertyDataWritten(CFStreamPropertyKey value) =>
      _kCFStreamPropertyDataWritten.value = value;

  CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> bytes,
    int length,
    CFAllocatorRef bytesDeallocator,
  ) {
    return _CFReadStreamCreateWithBytesNoCopy(
      alloc,
      bytes,
      length,
      bytesDeallocator,
    );
  }

  late final _CFReadStreamCreateWithBytesNoCopyPtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, CFIndex,
              CFAllocatorRef)>>('CFReadStreamCreateWithBytesNoCopy');
  late final _CFReadStreamCreateWithBytesNoCopy =
      _CFReadStreamCreateWithBytesNoCopyPtr.asFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, ffi.Pointer<UInt8>, int, CFAllocatorRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithBuffer(
    CFAllocatorRef alloc,
    ffi.Pointer<UInt8> buffer,
    int bufferCapacity,
  ) {
    return _CFWriteStreamCreateWithBuffer(
      alloc,
      buffer,
      bufferCapacity,
    );
  }

  late final _CFWriteStreamCreateWithBufferPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamCreateWithBuffer');
  late final _CFWriteStreamCreateWithBuffer =
      _CFWriteStreamCreateWithBufferPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, ffi.Pointer<UInt8>, int)>();

  CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(
    CFAllocatorRef alloc,
    CFAllocatorRef bufferAllocator,
  ) {
    return _CFWriteStreamCreateWithAllocatedBuffers(
      alloc,
      bufferAllocator,
    );
  }

  late final _CFWriteStreamCreateWithAllocatedBuffersPtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(CFAllocatorRef,
              CFAllocatorRef)>>('CFWriteStreamCreateWithAllocatedBuffers');
  late final _CFWriteStreamCreateWithAllocatedBuffers =
      _CFWriteStreamCreateWithAllocatedBuffersPtr.asFunction<
          CFWriteStreamRef Function(CFAllocatorRef, CFAllocatorRef)>();

  CFReadStreamRef CFReadStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFReadStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFReadStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFReadStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFReadStreamCreateWithFile');
  late final _CFReadStreamCreateWithFile = _CFReadStreamCreateWithFilePtr
      .asFunction<CFReadStreamRef Function(CFAllocatorRef, CFURLRef)>();

  CFWriteStreamRef CFWriteStreamCreateWithFile(
    CFAllocatorRef alloc,
    CFURLRef fileURL,
  ) {
    return _CFWriteStreamCreateWithFile(
      alloc,
      fileURL,
    );
  }

  late final _CFWriteStreamCreateWithFilePtr = _lookup<
      ffi.NativeFunction<
          CFWriteStreamRef Function(
              CFAllocatorRef, CFURLRef)>>('CFWriteStreamCreateWithFile');
  late final _CFWriteStreamCreateWithFile = _CFWriteStreamCreateWithFilePtr
      .asFunction<CFWriteStreamRef Function(CFAllocatorRef, CFURLRef)>();

  void CFStreamCreateBoundPair(
    CFAllocatorRef alloc,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
    int transferBufferSize,
  ) {
    return _CFStreamCreateBoundPair(
      alloc,
      readStream,
      writeStream,
      transferBufferSize,
    );
  }

  late final _CFStreamCreateBoundPairPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>,
              CFIndex)>>('CFStreamCreateBoundPair');
  late final _CFStreamCreateBoundPair = _CFStreamCreateBoundPairPtr.asFunction<
      void Function(CFAllocatorRef, ffi.Pointer<CFReadStreamRef>,
          ffi.Pointer<CFWriteStreamRef>, int)>();

  late final ffi.Pointer<CFStreamPropertyKey> _kCFStreamPropertyAppendToFile =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyAppendToFile');

  CFStreamPropertyKey get kCFStreamPropertyAppendToFile =>
      _kCFStreamPropertyAppendToFile.value;

  set kCFStreamPropertyAppendToFile(CFStreamPropertyKey value) =>
      _kCFStreamPropertyAppendToFile.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertyFileCurrentOffset =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertyFileCurrentOffset');

  CFStreamPropertyKey get kCFStreamPropertyFileCurrentOffset =>
      _kCFStreamPropertyFileCurrentOffset.value;

  set kCFStreamPropertyFileCurrentOffset(CFStreamPropertyKey value) =>
      _kCFStreamPropertyFileCurrentOffset.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketNativeHandle =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketNativeHandle');

  CFStreamPropertyKey get kCFStreamPropertySocketNativeHandle =>
      _kCFStreamPropertySocketNativeHandle.value;

  set kCFStreamPropertySocketNativeHandle(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketNativeHandle.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemoteHostName =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemoteHostName');

  CFStreamPropertyKey get kCFStreamPropertySocketRemoteHostName =>
      _kCFStreamPropertySocketRemoteHostName.value;

  set kCFStreamPropertySocketRemoteHostName(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemoteHostName.value = value;

  late final ffi.Pointer<CFStreamPropertyKey>
      _kCFStreamPropertySocketRemotePortNumber =
      _lookup<CFStreamPropertyKey>('kCFStreamPropertySocketRemotePortNumber');

  CFStreamPropertyKey get kCFStreamPropertySocketRemotePortNumber =>
      _kCFStreamPropertySocketRemotePortNumber.value;

  set kCFStreamPropertySocketRemotePortNumber(CFStreamPropertyKey value) =>
      _kCFStreamPropertySocketRemotePortNumber.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _kCFStreamErrorDomainSOCKS =
      _lookup<pkg_ffi.Int>('kCFStreamErrorDomainSOCKS');

  int get kCFStreamErrorDomainSOCKS => _kCFStreamErrorDomainSOCKS.value;

  set kCFStreamErrorDomainSOCKS(int value) =>
      _kCFStreamErrorDomainSOCKS.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxy =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxy');

  CFStringRef get kCFStreamPropertySOCKSProxy =>
      _kCFStreamPropertySOCKSProxy.value;

  set kCFStreamPropertySOCKSProxy(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxy.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyHost =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyHost');

  CFStringRef get kCFStreamPropertySOCKSProxyHost =>
      _kCFStreamPropertySOCKSProxyHost.value;

  set kCFStreamPropertySOCKSProxyHost(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyHost.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSProxyPort =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSProxyPort');

  CFStringRef get kCFStreamPropertySOCKSProxyPort =>
      _kCFStreamPropertySOCKSProxyPort.value;

  set kCFStreamPropertySOCKSProxyPort(CFStringRef value) =>
      _kCFStreamPropertySOCKSProxyPort.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSVersion =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSVersion');

  CFStringRef get kCFStreamPropertySOCKSVersion =>
      _kCFStreamPropertySOCKSVersion.value;

  set kCFStreamPropertySOCKSVersion(CFStringRef value) =>
      _kCFStreamPropertySOCKSVersion.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion4 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion4');

  CFStringRef get kCFStreamSocketSOCKSVersion4 =>
      _kCFStreamSocketSOCKSVersion4.value;

  set kCFStreamSocketSOCKSVersion4(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion4.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSOCKSVersion5 =
      _lookup<CFStringRef>('kCFStreamSocketSOCKSVersion5');

  CFStringRef get kCFStreamSocketSOCKSVersion5 =>
      _kCFStreamSocketSOCKSVersion5.value;

  set kCFStreamSocketSOCKSVersion5(CFStringRef value) =>
      _kCFStreamSocketSOCKSVersion5.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSUser =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSUser');

  CFStringRef get kCFStreamPropertySOCKSUser =>
      _kCFStreamPropertySOCKSUser.value;

  set kCFStreamPropertySOCKSUser(CFStringRef value) =>
      _kCFStreamPropertySOCKSUser.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySOCKSPassword =
      _lookup<CFStringRef>('kCFStreamPropertySOCKSPassword');

  CFStringRef get kCFStreamPropertySOCKSPassword =>
      _kCFStreamPropertySOCKSPassword.value;

  set kCFStreamPropertySOCKSPassword(CFStringRef value) =>
      _kCFStreamPropertySOCKSPassword.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _kCFStreamErrorDomainSSL =
      _lookup<pkg_ffi.Int>('kCFStreamErrorDomainSSL');

  int get kCFStreamErrorDomainSSL => _kCFStreamErrorDomainSSL.value;

  set kCFStreamErrorDomainSSL(int value) =>
      _kCFStreamErrorDomainSSL.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamPropertySocketSecurityLevel =
      _lookup<CFStringRef>('kCFStreamPropertySocketSecurityLevel');

  CFStringRef get kCFStreamPropertySocketSecurityLevel =>
      _kCFStreamPropertySocketSecurityLevel.value;

  set kCFStreamPropertySocketSecurityLevel(CFStringRef value) =>
      _kCFStreamPropertySocketSecurityLevel.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelNone =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNone');

  CFStringRef get kCFStreamSocketSecurityLevelNone =>
      _kCFStreamSocketSecurityLevelNone.value;

  set kCFStreamSocketSecurityLevelNone(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNone.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv2 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv2');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv2 =>
      _kCFStreamSocketSecurityLevelSSLv2.value;

  set kCFStreamSocketSecurityLevelSSLv2(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv2.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelSSLv3 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelSSLv3');

  CFStringRef get kCFStreamSocketSecurityLevelSSLv3 =>
      _kCFStreamSocketSecurityLevelSSLv3.value;

  set kCFStreamSocketSecurityLevelSSLv3(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelSSLv3.value = value;

  late final ffi.Pointer<CFStringRef> _kCFStreamSocketSecurityLevelTLSv1 =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelTLSv1');

  CFStringRef get kCFStreamSocketSecurityLevelTLSv1 =>
      _kCFStreamSocketSecurityLevelTLSv1.value;

  set kCFStreamSocketSecurityLevelTLSv1(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelTLSv1.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamSocketSecurityLevelNegotiatedSSL =
      _lookup<CFStringRef>('kCFStreamSocketSecurityLevelNegotiatedSSL');

  CFStringRef get kCFStreamSocketSecurityLevelNegotiatedSSL =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value;

  set kCFStreamSocketSecurityLevelNegotiatedSSL(CFStringRef value) =>
      _kCFStreamSocketSecurityLevelNegotiatedSSL.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFStreamPropertyShouldCloseNativeSocket =
      _lookup<CFStringRef>('kCFStreamPropertyShouldCloseNativeSocket');

  CFStringRef get kCFStreamPropertyShouldCloseNativeSocket =>
      _kCFStreamPropertyShouldCloseNativeSocket.value;

  set kCFStreamPropertyShouldCloseNativeSocket(CFStringRef value) =>
      _kCFStreamPropertyShouldCloseNativeSocket.value = value;

  void CFStreamCreatePairWithSocket(
    CFAllocatorRef alloc,
    int sock,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocket(
      alloc,
      sock,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFAllocatorRef,
              CFSocketNativeHandle,
              ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>>('CFStreamCreatePairWithSocket');
  late final _CFStreamCreatePairWithSocket =
      _CFStreamCreatePairWithSocketPtr.asFunction<
          void Function(CFAllocatorRef, int, ffi.Pointer<CFReadStreamRef>,
              ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithSocketToHost(
    CFAllocatorRef alloc,
    CFStringRef host,
    int port,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithSocketToHost(
      alloc,
      host,
      port,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithSocketToHostPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  CFStringRef,
                  UInt32,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithSocketToHost');
  late final _CFStreamCreatePairWithSocketToHost =
      _CFStreamCreatePairWithSocketToHostPtr.asFunction<
          void Function(CFAllocatorRef, CFStringRef, int,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  void CFStreamCreatePairWithPeerSocketSignature(
    CFAllocatorRef alloc,
    ffi.Pointer<CFSocketSignature> signature,
    ffi.Pointer<CFReadStreamRef> readStream,
    ffi.Pointer<CFWriteStreamRef> writeStream,
  ) {
    return _CFStreamCreatePairWithPeerSocketSignature(
      alloc,
      signature,
      readStream,
      writeStream,
    );
  }

  late final _CFStreamCreatePairWithPeerSocketSignaturePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFAllocatorRef,
                  ffi.Pointer<CFSocketSignature>,
                  ffi.Pointer<CFReadStreamRef>,
                  ffi.Pointer<CFWriteStreamRef>)>>(
      'CFStreamCreatePairWithPeerSocketSignature');
  late final _CFStreamCreatePairWithPeerSocketSignature =
      _CFStreamCreatePairWithPeerSocketSignaturePtr.asFunction<
          void Function(CFAllocatorRef, ffi.Pointer<CFSocketSignature>,
              ffi.Pointer<CFReadStreamRef>, ffi.Pointer<CFWriteStreamRef>)>();

  int CFReadStreamGetStatus(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetStatus(
      stream,
    );
  }

  late final _CFReadStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFStreamStatus Function(CFReadStreamRef)>>(
          'CFReadStreamGetStatus');
  late final _CFReadStreamGetStatus =
      _CFReadStreamGetStatusPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamGetStatus(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetStatus(
      stream,
    );
  }

  late final _CFWriteStreamGetStatusPtr =
      _lookup<ffi.NativeFunction<CFStreamStatus Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetStatus');
  late final _CFWriteStreamGetStatus =
      _CFWriteStreamGetStatusPtr.asFunction<int Function(CFWriteStreamRef)>();

  CFErrorRef CFReadStreamCopyError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyError(
      stream,
    );
  }

  late final _CFReadStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFReadStreamRef)>>(
          'CFReadStreamCopyError');
  late final _CFReadStreamCopyError = _CFReadStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFReadStreamRef)>();

  CFErrorRef CFWriteStreamCopyError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyError(
      stream,
    );
  }

  late final _CFWriteStreamCopyErrorPtr =
      _lookup<ffi.NativeFunction<CFErrorRef Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyError');
  late final _CFWriteStreamCopyError = _CFWriteStreamCopyErrorPtr.asFunction<
      CFErrorRef Function(CFWriteStreamRef)>();

  int CFReadStreamOpen(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamOpen(
      stream,
    );
  }

  late final _CFReadStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamOpen');
  late final _CFReadStreamOpen =
      _CFReadStreamOpenPtr.asFunction<int Function(CFReadStreamRef)>();

  int CFWriteStreamOpen(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamOpen(
      stream,
    );
  }

  late final _CFWriteStreamOpenPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamOpen');
  late final _CFWriteStreamOpen =
      _CFWriteStreamOpenPtr.asFunction<int Function(CFWriteStreamRef)>();

  void CFReadStreamClose(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamClose(
      stream,
    );
  }

  late final _CFReadStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFReadStreamRef)>>(
          'CFReadStreamClose');
  late final _CFReadStreamClose =
      _CFReadStreamClosePtr.asFunction<void Function(CFReadStreamRef)>();

  void CFWriteStreamClose(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamClose(
      stream,
    );
  }

  late final _CFWriteStreamClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFWriteStreamRef)>>(
          'CFWriteStreamClose');
  late final _CFWriteStreamClose =
      _CFWriteStreamClosePtr.asFunction<void Function(CFWriteStreamRef)>();

  int CFReadStreamHasBytesAvailable(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamHasBytesAvailable(
      stream,
    );
  }

  late final _CFReadStreamHasBytesAvailablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFReadStreamRef)>>(
          'CFReadStreamHasBytesAvailable');
  late final _CFReadStreamHasBytesAvailable = _CFReadStreamHasBytesAvailablePtr
      .asFunction<int Function(CFReadStreamRef)>();

  int CFReadStreamRead(
    CFReadStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFReadStreamRead(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFReadStreamReadPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFReadStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFReadStreamRead');
  late final _CFReadStreamRead = _CFReadStreamReadPtr.asFunction<
      int Function(CFReadStreamRef, ffi.Pointer<UInt8>, int)>();

  ffi.Pointer<UInt8> CFReadStreamGetBuffer(
    CFReadStreamRef stream,
    int maxBytesToRead,
    ffi.Pointer<CFIndex> numBytesRead,
  ) {
    return _CFReadStreamGetBuffer(
      stream,
      maxBytesToRead,
      numBytesRead,
    );
  }

  late final _CFReadStreamGetBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<UInt8> Function(CFReadStreamRef, CFIndex,
              ffi.Pointer<CFIndex>)>>('CFReadStreamGetBuffer');
  late final _CFReadStreamGetBuffer = _CFReadStreamGetBufferPtr.asFunction<
      ffi.Pointer<UInt8> Function(
          CFReadStreamRef, int, ffi.Pointer<CFIndex>)>();

  int CFWriteStreamCanAcceptBytes(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCanAcceptBytes(
      stream,
    );
  }

  late final _CFWriteStreamCanAcceptBytesPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFWriteStreamRef)>>(
          'CFWriteStreamCanAcceptBytes');
  late final _CFWriteStreamCanAcceptBytes = _CFWriteStreamCanAcceptBytesPtr
      .asFunction<int Function(CFWriteStreamRef)>();

  int CFWriteStreamWrite(
    CFWriteStreamRef stream,
    ffi.Pointer<UInt8> buffer,
    int bufferLength,
  ) {
    return _CFWriteStreamWrite(
      stream,
      buffer,
      bufferLength,
    );
  }

  late final _CFWriteStreamWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFWriteStreamRef, ffi.Pointer<UInt8>,
              CFIndex)>>('CFWriteStreamWrite');
  late final _CFWriteStreamWrite = _CFWriteStreamWritePtr.asFunction<
      int Function(CFWriteStreamRef, ffi.Pointer<UInt8>, int)>();

  CFTypeRef CFReadStreamCopyProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFReadStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFReadStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFReadStreamRef,
              CFStreamPropertyKey)>>('CFReadStreamCopyProperty');
  late final _CFReadStreamCopyProperty = _CFReadStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFReadStreamRef, CFStreamPropertyKey)>();

  CFTypeRef CFWriteStreamCopyProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
  ) {
    return _CFWriteStreamCopyProperty(
      stream,
      propertyName,
    );
  }

  late final _CFWriteStreamCopyPropertyPtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFWriteStreamRef,
              CFStreamPropertyKey)>>('CFWriteStreamCopyProperty');
  late final _CFWriteStreamCopyProperty = _CFWriteStreamCopyPropertyPtr
      .asFunction<CFTypeRef Function(CFWriteStreamRef, CFStreamPropertyKey)>();

  int CFReadStreamSetProperty(
    CFReadStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFReadStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFReadStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFReadStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFReadStreamSetProperty');
  late final _CFReadStreamSetProperty = _CFReadStreamSetPropertyPtr.asFunction<
      int Function(CFReadStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFWriteStreamSetProperty(
    CFWriteStreamRef stream,
    CFStreamPropertyKey propertyName,
    CFTypeRef propertyValue,
  ) {
    return _CFWriteStreamSetProperty(
      stream,
      propertyName,
      propertyValue,
    );
  }

  late final _CFWriteStreamSetPropertyPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFWriteStreamRef, CFStreamPropertyKey,
              CFTypeRef)>>('CFWriteStreamSetProperty');
  late final _CFWriteStreamSetProperty =
      _CFWriteStreamSetPropertyPtr.asFunction<
          int Function(CFWriteStreamRef, CFStreamPropertyKey, CFTypeRef)>();

  int CFReadStreamSetClient(
    CFReadStreamRef stream,
    int streamEvents,
    CFReadStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFReadStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFReadStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFReadStreamRef,
              CFOptionFlags,
              CFReadStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFReadStreamSetClient');
  late final _CFReadStreamSetClient = _CFReadStreamSetClientPtr.asFunction<
      int Function(CFReadStreamRef, int, CFReadStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  int CFWriteStreamSetClient(
    CFWriteStreamRef stream,
    int streamEvents,
    CFWriteStreamClientCallBack clientCB,
    ffi.Pointer<CFStreamClientContext> clientContext,
  ) {
    return _CFWriteStreamSetClient(
      stream,
      streamEvents,
      clientCB,
      clientContext,
    );
  }

  late final _CFWriteStreamSetClientPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFWriteStreamRef,
              CFOptionFlags,
              CFWriteStreamClientCallBack,
              ffi.Pointer<CFStreamClientContext>)>>('CFWriteStreamSetClient');
  late final _CFWriteStreamSetClient = _CFWriteStreamSetClientPtr.asFunction<
      int Function(CFWriteStreamRef, int, CFWriteStreamClientCallBack,
          ffi.Pointer<CFStreamClientContext>)>();

  void CFReadStreamScheduleWithRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamScheduleWithRunLoop');
  late final _CFReadStreamScheduleWithRunLoop =
      _CFReadStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamScheduleWithRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamScheduleWithRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamScheduleWithRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamScheduleWithRunLoop');
  late final _CFWriteStreamScheduleWithRunLoop =
      _CFWriteStreamScheduleWithRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamUnscheduleFromRunLoop(
    CFReadStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFReadStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFReadStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFReadStreamUnscheduleFromRunLoop');
  late final _CFReadStreamUnscheduleFromRunLoop =
      _CFReadStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFReadStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFWriteStreamUnscheduleFromRunLoop(
    CFWriteStreamRef stream,
    CFRunLoopRef runLoop,
    CFRunLoopMode runLoopMode,
  ) {
    return _CFWriteStreamUnscheduleFromRunLoop(
      stream,
      runLoop,
      runLoopMode,
    );
  }

  late final _CFWriteStreamUnscheduleFromRunLoopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef, CFRunLoopRef,
              CFRunLoopMode)>>('CFWriteStreamUnscheduleFromRunLoop');
  late final _CFWriteStreamUnscheduleFromRunLoop =
      _CFWriteStreamUnscheduleFromRunLoopPtr.asFunction<
          void Function(CFWriteStreamRef, CFRunLoopRef, CFRunLoopMode)>();

  void CFReadStreamSetDispatchQueue(
    CFReadStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFReadStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFReadStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFReadStreamRef,
              dispatch_queue_t)>>('CFReadStreamSetDispatchQueue');
  late final _CFReadStreamSetDispatchQueue = _CFReadStreamSetDispatchQueuePtr
      .asFunction<void Function(CFReadStreamRef, dispatch_queue_t)>();

  void CFWriteStreamSetDispatchQueue(
    CFWriteStreamRef stream,
    dispatch_queue_t q,
  ) {
    return _CFWriteStreamSetDispatchQueue(
      stream,
      q,
    );
  }

  late final _CFWriteStreamSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFWriteStreamRef,
              dispatch_queue_t)>>('CFWriteStreamSetDispatchQueue');
  late final _CFWriteStreamSetDispatchQueue = _CFWriteStreamSetDispatchQueuePtr
      .asFunction<void Function(CFWriteStreamRef, dispatch_queue_t)>();

  dispatch_queue_t CFReadStreamCopyDispatchQueue(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFReadStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFReadStreamRef)>>(
          'CFReadStreamCopyDispatchQueue');
  late final _CFReadStreamCopyDispatchQueue = _CFReadStreamCopyDispatchQueuePtr
      .asFunction<dispatch_queue_t Function(CFReadStreamRef)>();

  dispatch_queue_t CFWriteStreamCopyDispatchQueue(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamCopyDispatchQueue(
      stream,
    );
  }

  late final _CFWriteStreamCopyDispatchQueuePtr =
      _lookup<ffi.NativeFunction<dispatch_queue_t Function(CFWriteStreamRef)>>(
          'CFWriteStreamCopyDispatchQueue');
  late final _CFWriteStreamCopyDispatchQueue =
      _CFWriteStreamCopyDispatchQueuePtr.asFunction<
          dispatch_queue_t Function(CFWriteStreamRef)>();

  CFStreamError CFReadStreamGetError(
    CFReadStreamRef stream,
  ) {
    return _CFReadStreamGetError(
      stream,
    );
  }

  late final _CFReadStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFReadStreamRef)>>(
          'CFReadStreamGetError');
  late final _CFReadStreamGetError = _CFReadStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFReadStreamRef)>();

  CFStreamError CFWriteStreamGetError(
    CFWriteStreamRef stream,
  ) {
    return _CFWriteStreamGetError(
      stream,
    );
  }

  late final _CFWriteStreamGetErrorPtr =
      _lookup<ffi.NativeFunction<CFStreamError Function(CFWriteStreamRef)>>(
          'CFWriteStreamGetError');
  late final _CFWriteStreamGetError = _CFWriteStreamGetErrorPtr.asFunction<
      CFStreamError Function(CFWriteStreamRef)>();

  CFPropertyListRef CFPropertyListCreateFromXMLData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    int mutabilityOption,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromXMLData(
      allocator,
      xmlData,
      mutabilityOption,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, CFOptionFlags,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromXMLData');
  late final _CFPropertyListCreateFromXMLData =
      _CFPropertyListCreateFromXMLDataPtr.asFunction<
          CFPropertyListRef Function(
              CFAllocatorRef, CFDataRef, int, ffi.Pointer<CFStringRef>)>();

  CFDataRef CFPropertyListCreateXMLData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
  ) {
    return _CFPropertyListCreateXMLData(
      allocator,
      propertyList,
    );
  }

  late final _CFPropertyListCreateXMLDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(CFAllocatorRef,
              CFPropertyListRef)>>('CFPropertyListCreateXMLData');
  late final _CFPropertyListCreateXMLData = _CFPropertyListCreateXMLDataPtr
      .asFunction<CFDataRef Function(CFAllocatorRef, CFPropertyListRef)>();

  CFPropertyListRef CFPropertyListCreateDeepCopy(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int mutabilityOption,
  ) {
    return _CFPropertyListCreateDeepCopy(
      allocator,
      propertyList,
      mutabilityOption,
    );
  }

  late final _CFPropertyListCreateDeepCopyPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef,
              CFOptionFlags)>>('CFPropertyListCreateDeepCopy');
  late final _CFPropertyListCreateDeepCopy =
      _CFPropertyListCreateDeepCopyPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFPropertyListRef, int)>();

  int CFPropertyListIsValid(
    CFPropertyListRef plist,
    int format,
  ) {
    return _CFPropertyListIsValid(
      plist,
      format,
    );
  }

  late final _CFPropertyListIsValidPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFPropertyListRef,
              CFPropertyListFormat)>>('CFPropertyListIsValid');
  late final _CFPropertyListIsValid = _CFPropertyListIsValidPtr.asFunction<
      int Function(CFPropertyListRef, int)>();

  int CFPropertyListWriteToStream(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListWriteToStream(
      propertyList,
      stream,
      format,
      errorString,
    );
  }

  late final _CFPropertyListWriteToStreamPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFPropertyListRef,
              CFWriteStreamRef,
              CFPropertyListFormat,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListWriteToStream');
  late final _CFPropertyListWriteToStream =
      _CFPropertyListWriteToStreamPtr.asFunction<
          int Function(CFPropertyListRef, CFWriteStreamRef, int,
              ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateFromStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int mutabilityOption,
    ffi.Pointer<CFPropertyListFormat> format,
    ffi.Pointer<CFStringRef> errorString,
  ) {
    return _CFPropertyListCreateFromStream(
      allocator,
      stream,
      streamLength,
      mutabilityOption,
      format,
      errorString,
    );
  }

  late final _CFPropertyListCreateFromStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFPropertyListFormat>,
              ffi.Pointer<CFStringRef>)>>('CFPropertyListCreateFromStream');
  late final _CFPropertyListCreateFromStream =
      _CFPropertyListCreateFromStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFPropertyListFormat>, ffi.Pointer<CFStringRef>)>();

  CFPropertyListRef CFPropertyListCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
    int options,
    ffi.Pointer<CFPropertyListFormat> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithData(
      allocator,
      data,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFOptionFlags,
              ffi.Pointer<CFPropertyListFormat>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithData');
  late final _CFPropertyListCreateWithData =
      _CFPropertyListCreateWithDataPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFDataRef, int,
              ffi.Pointer<CFPropertyListFormat>, ffi.Pointer<CFErrorRef>)>();

  CFPropertyListRef CFPropertyListCreateWithStream(
    CFAllocatorRef allocator,
    CFReadStreamRef stream,
    int streamLength,
    int options,
    ffi.Pointer<CFPropertyListFormat> format,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateWithStream(
      allocator,
      stream,
      streamLength,
      options,
      format,
      error,
    );
  }

  late final _CFPropertyListCreateWithStreamPtr = _lookup<
      ffi.NativeFunction<
          CFPropertyListRef Function(
              CFAllocatorRef,
              CFReadStreamRef,
              CFIndex,
              CFOptionFlags,
              ffi.Pointer<CFPropertyListFormat>,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateWithStream');
  late final _CFPropertyListCreateWithStream =
      _CFPropertyListCreateWithStreamPtr.asFunction<
          CFPropertyListRef Function(CFAllocatorRef, CFReadStreamRef, int, int,
              ffi.Pointer<CFPropertyListFormat>, ffi.Pointer<CFErrorRef>)>();

  int CFPropertyListWrite(
    CFPropertyListRef propertyList,
    CFWriteStreamRef stream,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListWrite(
      propertyList,
      stream,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListWritePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFPropertyListRef,
              CFWriteStreamRef,
              CFPropertyListFormat,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListWrite');
  late final _CFPropertyListWrite = _CFPropertyListWritePtr.asFunction<
      int Function(CFPropertyListRef, CFWriteStreamRef, int, int,
          ffi.Pointer<CFErrorRef>)>();

  CFDataRef CFPropertyListCreateData(
    CFAllocatorRef allocator,
    CFPropertyListRef propertyList,
    int format,
    int options,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFPropertyListCreateData(
      allocator,
      propertyList,
      format,
      options,
      error,
    );
  }

  late final _CFPropertyListCreateDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(
              CFAllocatorRef,
              CFPropertyListRef,
              CFPropertyListFormat,
              CFOptionFlags,
              ffi.Pointer<CFErrorRef>)>>('CFPropertyListCreateData');
  late final _CFPropertyListCreateData =
      _CFPropertyListCreateDataPtr.asFunction<
          CFDataRef Function(CFAllocatorRef, CFPropertyListRef, int, int,
              ffi.Pointer<CFErrorRef>)>();

  late final ffi.Pointer<CFSetCallBacks> _kCFTypeSetCallBacks =
      _lookup<CFSetCallBacks>('kCFTypeSetCallBacks');

  CFSetCallBacks get kCFTypeSetCallBacks => _kCFTypeSetCallBacks.ref;

  late final ffi.Pointer<CFSetCallBacks> _kCFCopyStringSetCallBacks =
      _lookup<CFSetCallBacks>('kCFCopyStringSetCallBacks');

  CFSetCallBacks get kCFCopyStringSetCallBacks =>
      _kCFCopyStringSetCallBacks.ref;

  int CFSetGetTypeID() {
    return _CFSetGetTypeID();
  }

  late final _CFSetGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFSetGetTypeID');
  late final _CFSetGetTypeID = _CFSetGetTypeIDPtr.asFunction<int Function()>();

  CFSetRef CFSetCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
    int numValues,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreate(
      allocator,
      values,
      numValues,
      callBacks,
    );
  }

  late final _CFSetCreatePtr = _lookup<
      ffi.NativeFunction<
          CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              CFIndex, ffi.Pointer<CFSetCallBacks>)>>('CFSetCreate');
  late final _CFSetCreate = _CFSetCreatePtr.asFunction<
      CFSetRef Function(CFAllocatorRef, ffi.Pointer<ffi.Pointer<ffi.Void>>, int,
          ffi.Pointer<CFSetCallBacks>)>();

  CFSetRef CFSetCreateCopy(
    CFAllocatorRef allocator,
    CFSetRef theSet,
  ) {
    return _CFSetCreateCopy(
      allocator,
      theSet,
    );
  }

  late final _CFSetCreateCopyPtr =
      _lookup<ffi.NativeFunction<CFSetRef Function(CFAllocatorRef, CFSetRef)>>(
          'CFSetCreateCopy');
  late final _CFSetCreateCopy = _CFSetCreateCopyPtr.asFunction<
      CFSetRef Function(CFAllocatorRef, CFSetRef)>();

  CFMutableSetRef CFSetCreateMutable(
    CFAllocatorRef allocator,
    int capacity,
    ffi.Pointer<CFSetCallBacks> callBacks,
  ) {
    return _CFSetCreateMutable(
      allocator,
      capacity,
      callBacks,
    );
  }

  late final _CFSetCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(CFAllocatorRef, CFIndex,
              ffi.Pointer<CFSetCallBacks>)>>('CFSetCreateMutable');
  late final _CFSetCreateMutable = _CFSetCreateMutablePtr.asFunction<
      CFMutableSetRef Function(
          CFAllocatorRef, int, ffi.Pointer<CFSetCallBacks>)>();

  CFMutableSetRef CFSetCreateMutableCopy(
    CFAllocatorRef allocator,
    int capacity,
    CFSetRef theSet,
  ) {
    return _CFSetCreateMutableCopy(
      allocator,
      capacity,
      theSet,
    );
  }

  late final _CFSetCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableSetRef Function(
              CFAllocatorRef, CFIndex, CFSetRef)>>('CFSetCreateMutableCopy');
  late final _CFSetCreateMutableCopy = _CFSetCreateMutableCopyPtr.asFunction<
      CFMutableSetRef Function(CFAllocatorRef, int, CFSetRef)>();

  int CFSetGetCount(
    CFSetRef theSet,
  ) {
    return _CFSetGetCount(
      theSet,
    );
  }

  late final _CFSetGetCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFSetRef)>>('CFSetGetCount');
  late final _CFSetGetCount =
      _CFSetGetCountPtr.asFunction<int Function(CFSetRef)>();

  int CFSetGetCountOfValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetCountOfValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetCountOfValuePtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetCountOfValue');
  late final _CFSetGetCountOfValue = _CFSetGetCountOfValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetContainsValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetContainsValue(
      theSet,
      value,
    );
  }

  late final _CFSetContainsValuePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetContainsValue');
  late final _CFSetContainsValue = _CFSetContainsValuePtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> CFSetGetValue(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetGetValue(
      theSet,
      value,
    );
  }

  late final _CFSetGetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFSetRef, ffi.Pointer<ffi.Void>)>>('CFSetGetValue');
  late final _CFSetGetValue = _CFSetGetValuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFSetRef, ffi.Pointer<ffi.Void>)>();

  int CFSetGetValueIfPresent(
    CFSetRef theSet,
    ffi.Pointer<ffi.Void> candidate,
    ffi.Pointer<ffi.Pointer<ffi.Void>> value,
  ) {
    return _CFSetGetValueIfPresent(
      theSet,
      candidate,
      value,
    );
  }

  late final _CFSetGetValueIfPresentPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFSetRef, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValueIfPresent');
  late final _CFSetGetValueIfPresent = _CFSetGetValueIfPresentPtr.asFunction<
      int Function(CFSetRef, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetGetValues(
    CFSetRef theSet,
    ffi.Pointer<ffi.Pointer<ffi.Void>> values,
  ) {
    return _CFSetGetValues(
      theSet,
      values,
    );
  }

  late final _CFSetGetValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('CFSetGetValues');
  late final _CFSetGetValues = _CFSetGetValuesPtr.asFunction<
      void Function(CFSetRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  void CFSetApplyFunction(
    CFSetRef theSet,
    CFSetApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFSetApplyFunction(
      theSet,
      applier,
      context,
    );
  }

  late final _CFSetApplyFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFSetRef, CFSetApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFSetApplyFunction');
  late final _CFSetApplyFunction = _CFSetApplyFunctionPtr.asFunction<
      void Function(CFSetRef, CFSetApplierFunction, ffi.Pointer<ffi.Void>)>();

  void CFSetAddValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetAddValue(
      theSet,
      value,
    );
  }

  late final _CFSetAddValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetAddValue');
  late final _CFSetAddValue = _CFSetAddValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetReplaceValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetReplaceValue(
      theSet,
      value,
    );
  }

  late final _CFSetReplaceValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetReplaceValue');
  late final _CFSetReplaceValue = _CFSetReplaceValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetSetValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetSetValue(
      theSet,
      value,
    );
  }

  late final _CFSetSetValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetSetValue');
  late final _CFSetSetValue = _CFSetSetValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveValue(
    CFMutableSetRef theSet,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _CFSetRemoveValue(
      theSet,
      value,
    );
  }

  late final _CFSetRemoveValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFMutableSetRef, ffi.Pointer<ffi.Void>)>>('CFSetRemoveValue');
  late final _CFSetRemoveValue = _CFSetRemoveValuePtr.asFunction<
      void Function(CFMutableSetRef, ffi.Pointer<ffi.Void>)>();

  void CFSetRemoveAllValues(
    CFMutableSetRef theSet,
  ) {
    return _CFSetRemoveAllValues(
      theSet,
    );
  }

  late final _CFSetRemoveAllValuesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMutableSetRef)>>(
          'CFSetRemoveAllValues');
  late final _CFSetRemoveAllValues =
      _CFSetRemoveAllValuesPtr.asFunction<void Function(CFMutableSetRef)>();

  int CFTreeGetTypeID() {
    return _CFTreeGetTypeID();
  }

  late final _CFTreeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFTreeGetTypeID');
  late final _CFTreeGetTypeID =
      _CFTreeGetTypeIDPtr.asFunction<int Function()>();

  CFTreeRef CFTreeCreate(
    CFAllocatorRef allocator,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeCreate(
      allocator,
      context,
    );
  }

  late final _CFTreeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFTreeRef Function(
              CFAllocatorRef, ffi.Pointer<CFTreeContext>)>>('CFTreeCreate');
  late final _CFTreeCreate = _CFTreeCreatePtr.asFunction<
      CFTreeRef Function(CFAllocatorRef, ffi.Pointer<CFTreeContext>)>();

  CFTreeRef CFTreeGetParent(
    CFTreeRef tree,
  ) {
    return _CFTreeGetParent(
      tree,
    );
  }

  late final _CFTreeGetParentPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetParent');
  late final _CFTreeGetParent =
      _CFTreeGetParentPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetNextSibling(
    CFTreeRef tree,
  ) {
    return _CFTreeGetNextSibling(
      tree,
    );
  }

  late final _CFTreeGetNextSiblingPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetNextSibling');
  late final _CFTreeGetNextSibling =
      _CFTreeGetNextSiblingPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  CFTreeRef CFTreeGetFirstChild(
    CFTreeRef tree,
  ) {
    return _CFTreeGetFirstChild(
      tree,
    );
  }

  late final _CFTreeGetFirstChildPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeGetFirstChild');
  late final _CFTreeGetFirstChild =
      _CFTreeGetFirstChildPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeGetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeGetContext(
      tree,
      context,
    );
  }

  late final _CFTreeGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeGetContext');
  late final _CFTreeGetContext = _CFTreeGetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  int CFTreeGetChildCount(
    CFTreeRef tree,
  ) {
    return _CFTreeGetChildCount(
      tree,
    );
  }

  late final _CFTreeGetChildCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFTreeRef)>>(
          'CFTreeGetChildCount');
  late final _CFTreeGetChildCount =
      _CFTreeGetChildCountPtr.asFunction<int Function(CFTreeRef)>();

  CFTreeRef CFTreeGetChildAtIndex(
    CFTreeRef tree,
    int idx,
  ) {
    return _CFTreeGetChildAtIndex(
      tree,
      idx,
    );
  }

  late final _CFTreeGetChildAtIndexPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef, CFIndex)>>(
          'CFTreeGetChildAtIndex');
  late final _CFTreeGetChildAtIndex = _CFTreeGetChildAtIndexPtr.asFunction<
      CFTreeRef Function(CFTreeRef, int)>();

  void CFTreeGetChildren(
    CFTreeRef tree,
    ffi.Pointer<CFTreeRef> children,
  ) {
    return _CFTreeGetChildren(
      tree,
      children,
    );
  }

  late final _CFTreeGetChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeRef>)>>('CFTreeGetChildren');
  late final _CFTreeGetChildren = _CFTreeGetChildrenPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeRef>)>();

  void CFTreeApplyFunctionToChildren(
    CFTreeRef tree,
    CFTreeApplierFunction applier,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeApplyFunctionToChildren(
      tree,
      applier,
      context,
    );
  }

  late final _CFTreeApplyFunctionToChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFTreeApplierFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeApplyFunctionToChildren');
  late final _CFTreeApplyFunctionToChildren =
      _CFTreeApplyFunctionToChildrenPtr.asFunction<
          void Function(
              CFTreeRef, CFTreeApplierFunction, ffi.Pointer<ffi.Void>)>();

  CFTreeRef CFTreeFindRoot(
    CFTreeRef tree,
  ) {
    return _CFTreeFindRoot(
      tree,
    );
  }

  late final _CFTreeFindRootPtr =
      _lookup<ffi.NativeFunction<CFTreeRef Function(CFTreeRef)>>(
          'CFTreeFindRoot');
  late final _CFTreeFindRoot =
      _CFTreeFindRootPtr.asFunction<CFTreeRef Function(CFTreeRef)>();

  void CFTreeSetContext(
    CFTreeRef tree,
    ffi.Pointer<CFTreeContext> context,
  ) {
    return _CFTreeSetContext(
      tree,
      context,
    );
  }

  late final _CFTreeSetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              CFTreeRef, ffi.Pointer<CFTreeContext>)>>('CFTreeSetContext');
  late final _CFTreeSetContext = _CFTreeSetContextPtr.asFunction<
      void Function(CFTreeRef, ffi.Pointer<CFTreeContext>)>();

  void CFTreePrependChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreePrependChild(
      tree,
      newChild,
    );
  }

  late final _CFTreePrependChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreePrependChild');
  late final _CFTreePrependChild =
      _CFTreePrependChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeAppendChild(
    CFTreeRef tree,
    CFTreeRef newChild,
  ) {
    return _CFTreeAppendChild(
      tree,
      newChild,
    );
  }

  late final _CFTreeAppendChildPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeAppendChild');
  late final _CFTreeAppendChild =
      _CFTreeAppendChildPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeInsertSibling(
    CFTreeRef tree,
    CFTreeRef newSibling,
  ) {
    return _CFTreeInsertSibling(
      tree,
      newSibling,
    );
  }

  late final _CFTreeInsertSiblingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef, CFTreeRef)>>(
          'CFTreeInsertSibling');
  late final _CFTreeInsertSibling =
      _CFTreeInsertSiblingPtr.asFunction<void Function(CFTreeRef, CFTreeRef)>();

  void CFTreeRemove(
    CFTreeRef tree,
  ) {
    return _CFTreeRemove(
      tree,
    );
  }

  late final _CFTreeRemovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>('CFTreeRemove');
  late final _CFTreeRemove =
      _CFTreeRemovePtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeRemoveAllChildren(
    CFTreeRef tree,
  ) {
    return _CFTreeRemoveAllChildren(
      tree,
    );
  }

  late final _CFTreeRemoveAllChildrenPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFTreeRef)>>(
          'CFTreeRemoveAllChildren');
  late final _CFTreeRemoveAllChildren =
      _CFTreeRemoveAllChildrenPtr.asFunction<void Function(CFTreeRef)>();

  void CFTreeSortChildren(
    CFTreeRef tree,
    CFComparatorFunction comparator,
    ffi.Pointer<ffi.Void> context,
  ) {
    return _CFTreeSortChildren(
      tree,
      comparator,
      context,
    );
  }

  late final _CFTreeSortChildrenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFTreeRef, CFComparatorFunction,
              ffi.Pointer<ffi.Void>)>>('CFTreeSortChildren');
  late final _CFTreeSortChildren = _CFTreeSortChildrenPtr.asFunction<
      void Function(CFTreeRef, CFComparatorFunction, ffi.Pointer<ffi.Void>)>();

  int CFURLCreateDataAndPropertiesFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    ffi.Pointer<CFDataRef> resourceData,
    ffi.Pointer<CFDictionaryRef> properties,
    CFArrayRef desiredProperties,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreateDataAndPropertiesFromResource(
      alloc,
      url,
      resourceData,
      properties,
      desiredProperties,
      errorCode,
    );
  }

  late final _CFURLCreateDataAndPropertiesFromResourcePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(
                  CFAllocatorRef,
                  CFURLRef,
                  ffi.Pointer<CFDataRef>,
                  ffi.Pointer<CFDictionaryRef>,
                  CFArrayRef,
                  ffi.Pointer<SInt32>)>>(
      'CFURLCreateDataAndPropertiesFromResource');
  late final _CFURLCreateDataAndPropertiesFromResource =
      _CFURLCreateDataAndPropertiesFromResourcePtr.asFunction<
          int Function(CFAllocatorRef, CFURLRef, ffi.Pointer<CFDataRef>,
              ffi.Pointer<CFDictionaryRef>, CFArrayRef, ffi.Pointer<SInt32>)>();

  int CFURLWriteDataAndPropertiesToResource(
    CFURLRef url,
    CFDataRef dataToWrite,
    CFDictionaryRef propertiesToWrite,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLWriteDataAndPropertiesToResource(
      url,
      dataToWrite,
      propertiesToWrite,
      errorCode,
    );
  }

  late final _CFURLWriteDataAndPropertiesToResourcePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, CFDataRef, CFDictionaryRef,
              ffi.Pointer<SInt32>)>>('CFURLWriteDataAndPropertiesToResource');
  late final _CFURLWriteDataAndPropertiesToResource =
      _CFURLWriteDataAndPropertiesToResourcePtr.asFunction<
          int Function(
              CFURLRef, CFDataRef, CFDictionaryRef, ffi.Pointer<SInt32>)>();

  int CFURLDestroyResource(
    CFURLRef url,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLDestroyResource(
      url,
      errorCode,
    );
  }

  late final _CFURLDestroyResourcePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFURLRef, ffi.Pointer<SInt32>)>>(
      'CFURLDestroyResource');
  late final _CFURLDestroyResource = _CFURLDestroyResourcePtr.asFunction<
      int Function(CFURLRef, ffi.Pointer<SInt32>)>();

  CFTypeRef CFURLCreatePropertyFromResource(
    CFAllocatorRef alloc,
    CFURLRef url,
    CFStringRef property,
    ffi.Pointer<SInt32> errorCode,
  ) {
    return _CFURLCreatePropertyFromResource(
      alloc,
      url,
      property,
      errorCode,
    );
  }

  late final _CFURLCreatePropertyFromResourcePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAllocatorRef, CFURLRef, CFStringRef,
              ffi.Pointer<SInt32>)>>('CFURLCreatePropertyFromResource');
  late final _CFURLCreatePropertyFromResource =
      _CFURLCreatePropertyFromResourcePtr.asFunction<
          CFTypeRef Function(
              CFAllocatorRef, CFURLRef, CFStringRef, ffi.Pointer<SInt32>)>();

  late final ffi.Pointer<CFStringRef> _kCFURLFileExists =
      _lookup<CFStringRef>('kCFURLFileExists');

  CFStringRef get kCFURLFileExists => _kCFURLFileExists.value;

  set kCFURLFileExists(CFStringRef value) => _kCFURLFileExists.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileDirectoryContents =
      _lookup<CFStringRef>('kCFURLFileDirectoryContents');

  CFStringRef get kCFURLFileDirectoryContents =>
      _kCFURLFileDirectoryContents.value;

  set kCFURLFileDirectoryContents(CFStringRef value) =>
      _kCFURLFileDirectoryContents.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLength =
      _lookup<CFStringRef>('kCFURLFileLength');

  CFStringRef get kCFURLFileLength => _kCFURLFileLength.value;

  set kCFURLFileLength(CFStringRef value) => _kCFURLFileLength.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileLastModificationTime =
      _lookup<CFStringRef>('kCFURLFileLastModificationTime');

  CFStringRef get kCFURLFileLastModificationTime =>
      _kCFURLFileLastModificationTime.value;

  set kCFURLFileLastModificationTime(CFStringRef value) =>
      _kCFURLFileLastModificationTime.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFilePOSIXMode =
      _lookup<CFStringRef>('kCFURLFilePOSIXMode');

  CFStringRef get kCFURLFilePOSIXMode => _kCFURLFilePOSIXMode.value;

  set kCFURLFilePOSIXMode(CFStringRef value) =>
      _kCFURLFilePOSIXMode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLFileOwnerID =
      _lookup<CFStringRef>('kCFURLFileOwnerID');

  CFStringRef get kCFURLFileOwnerID => _kCFURLFileOwnerID.value;

  set kCFURLFileOwnerID(CFStringRef value) => _kCFURLFileOwnerID.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusCode =
      _lookup<CFStringRef>('kCFURLHTTPStatusCode');

  CFStringRef get kCFURLHTTPStatusCode => _kCFURLHTTPStatusCode.value;

  set kCFURLHTTPStatusCode(CFStringRef value) =>
      _kCFURLHTTPStatusCode.value = value;

  late final ffi.Pointer<CFStringRef> _kCFURLHTTPStatusLine =
      _lookup<CFStringRef>('kCFURLHTTPStatusLine');

  CFStringRef get kCFURLHTTPStatusLine => _kCFURLHTTPStatusLine.value;

  set kCFURLHTTPStatusLine(CFStringRef value) =>
      _kCFURLHTTPStatusLine.value = value;

  int CFUUIDGetTypeID() {
    return _CFUUIDGetTypeID();
  }

  late final _CFUUIDGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFUUIDGetTypeID');
  late final _CFUUIDGetTypeID =
      _CFUUIDGetTypeIDPtr.asFunction<int Function()>();

  CFUUIDRef CFUUIDCreate(
    CFAllocatorRef alloc,
  ) {
    return _CFUUIDCreate(
      alloc,
    );
  }

  late final _CFUUIDCreatePtr =
      _lookup<ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef)>>(
          'CFUUIDCreate');
  late final _CFUUIDCreate =
      _CFUUIDCreatePtr.asFunction<CFUUIDRef Function(CFAllocatorRef)>();

  CFUUIDRef CFUUIDCreateWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDCreateWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDCreateWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDCreateWithBytes');
  late final _CFUUIDCreateWithBytes = _CFUUIDCreateWithBytesPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int, int,
          int, int, int, int, int, int, int, int)>();

  CFUUIDRef CFUUIDCreateFromString(
    CFAllocatorRef alloc,
    CFStringRef uuidStr,
  ) {
    return _CFUUIDCreateFromString(
      alloc,
      uuidStr,
    );
  }

  late final _CFUUIDCreateFromStringPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFStringRef)>>(
      'CFUUIDCreateFromString');
  late final _CFUUIDCreateFromString = _CFUUIDCreateFromStringPtr.asFunction<
      CFUUIDRef Function(CFAllocatorRef, CFStringRef)>();

  CFStringRef CFUUIDCreateString(
    CFAllocatorRef alloc,
    CFUUIDRef uuid,
  ) {
    return _CFUUIDCreateString(
      alloc,
      uuid,
    );
  }

  late final _CFUUIDCreateStringPtr = _lookup<
          ffi.NativeFunction<CFStringRef Function(CFAllocatorRef, CFUUIDRef)>>(
      'CFUUIDCreateString');
  late final _CFUUIDCreateString = _CFUUIDCreateStringPtr.asFunction<
      CFStringRef Function(CFAllocatorRef, CFUUIDRef)>();

  CFUUIDRef CFUUIDGetConstantUUIDWithBytes(
    CFAllocatorRef alloc,
    int byte0,
    int byte1,
    int byte2,
    int byte3,
    int byte4,
    int byte5,
    int byte6,
    int byte7,
    int byte8,
    int byte9,
    int byte10,
    int byte11,
    int byte12,
    int byte13,
    int byte14,
    int byte15,
  ) {
    return _CFUUIDGetConstantUUIDWithBytes(
      alloc,
      byte0,
      byte1,
      byte2,
      byte3,
      byte4,
      byte5,
      byte6,
      byte7,
      byte8,
      byte9,
      byte10,
      byte11,
      byte12,
      byte13,
      byte14,
      byte15,
    );
  }

  late final _CFUUIDGetConstantUUIDWithBytesPtr = _lookup<
      ffi.NativeFunction<
          CFUUIDRef Function(
              CFAllocatorRef,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8,
              UInt8)>>('CFUUIDGetConstantUUIDWithBytes');
  late final _CFUUIDGetConstantUUIDWithBytes =
      _CFUUIDGetConstantUUIDWithBytesPtr.asFunction<
          CFUUIDRef Function(CFAllocatorRef, int, int, int, int, int, int, int,
              int, int, int, int, int, int, int, int, int)>();

  CFUUIDBytes CFUUIDGetUUIDBytes(
    CFUUIDRef uuid,
  ) {
    return _CFUUIDGetUUIDBytes(
      uuid,
    );
  }

  late final _CFUUIDGetUUIDBytesPtr =
      _lookup<ffi.NativeFunction<CFUUIDBytes Function(CFUUIDRef)>>(
          'CFUUIDGetUUIDBytes');
  late final _CFUUIDGetUUIDBytes =
      _CFUUIDGetUUIDBytesPtr.asFunction<CFUUIDBytes Function(CFUUIDRef)>();

  CFUUIDRef CFUUIDCreateFromUUIDBytes(
    CFAllocatorRef alloc,
    CFUUIDBytes bytes,
  ) {
    return _CFUUIDCreateFromUUIDBytes(
      alloc,
      bytes,
    );
  }

  late final _CFUUIDCreateFromUUIDBytesPtr = _lookup<
          ffi.NativeFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>>(
      'CFUUIDCreateFromUUIDBytes');
  late final _CFUUIDCreateFromUUIDBytes = _CFUUIDCreateFromUUIDBytesPtr
      .asFunction<CFUUIDRef Function(CFAllocatorRef, CFUUIDBytes)>();

  CFURLRef CFCopyHomeDirectoryURL() {
    return _CFCopyHomeDirectoryURL();
  }

  late final _CFCopyHomeDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function()>>(
          'CFCopyHomeDirectoryURL');
  late final _CFCopyHomeDirectoryURL =
      _CFCopyHomeDirectoryURLPtr.asFunction<CFURLRef Function()>();

  late final ffi.Pointer<CFStringRef> _kCFBundleInfoDictionaryVersionKey =
      _lookup<CFStringRef>('kCFBundleInfoDictionaryVersionKey');

  CFStringRef get kCFBundleInfoDictionaryVersionKey =>
      _kCFBundleInfoDictionaryVersionKey.value;

  set kCFBundleInfoDictionaryVersionKey(CFStringRef value) =>
      _kCFBundleInfoDictionaryVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleExecutableKey =
      _lookup<CFStringRef>('kCFBundleExecutableKey');

  CFStringRef get kCFBundleExecutableKey => _kCFBundleExecutableKey.value;

  set kCFBundleExecutableKey(CFStringRef value) =>
      _kCFBundleExecutableKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleIdentifierKey =
      _lookup<CFStringRef>('kCFBundleIdentifierKey');

  CFStringRef get kCFBundleIdentifierKey => _kCFBundleIdentifierKey.value;

  set kCFBundleIdentifierKey(CFStringRef value) =>
      _kCFBundleIdentifierKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleVersionKey =
      _lookup<CFStringRef>('kCFBundleVersionKey');

  CFStringRef get kCFBundleVersionKey => _kCFBundleVersionKey.value;

  set kCFBundleVersionKey(CFStringRef value) =>
      _kCFBundleVersionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleDevelopmentRegionKey =
      _lookup<CFStringRef>('kCFBundleDevelopmentRegionKey');

  CFStringRef get kCFBundleDevelopmentRegionKey =>
      _kCFBundleDevelopmentRegionKey.value;

  set kCFBundleDevelopmentRegionKey(CFStringRef value) =>
      _kCFBundleDevelopmentRegionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleNameKey =
      _lookup<CFStringRef>('kCFBundleNameKey');

  CFStringRef get kCFBundleNameKey => _kCFBundleNameKey.value;

  set kCFBundleNameKey(CFStringRef value) => _kCFBundleNameKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFBundleLocalizationsKey =
      _lookup<CFStringRef>('kCFBundleLocalizationsKey');

  CFStringRef get kCFBundleLocalizationsKey => _kCFBundleLocalizationsKey.value;

  set kCFBundleLocalizationsKey(CFStringRef value) =>
      _kCFBundleLocalizationsKey.value = value;

  CFBundleRef CFBundleGetMainBundle() {
    return _CFBundleGetMainBundle();
  }

  late final _CFBundleGetMainBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function()>>(
          'CFBundleGetMainBundle');
  late final _CFBundleGetMainBundle =
      _CFBundleGetMainBundlePtr.asFunction<CFBundleRef Function()>();

  CFBundleRef CFBundleGetBundleWithIdentifier(
    CFStringRef bundleID,
  ) {
    return _CFBundleGetBundleWithIdentifier(
      bundleID,
    );
  }

  late final _CFBundleGetBundleWithIdentifierPtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFStringRef)>>(
          'CFBundleGetBundleWithIdentifier');
  late final _CFBundleGetBundleWithIdentifier =
      _CFBundleGetBundleWithIdentifierPtr.asFunction<
          CFBundleRef Function(CFStringRef)>();

  CFArrayRef CFBundleGetAllBundles() {
    return _CFBundleGetAllBundles();
  }

  late final _CFBundleGetAllBundlesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function()>>(
          'CFBundleGetAllBundles');
  late final _CFBundleGetAllBundles =
      _CFBundleGetAllBundlesPtr.asFunction<CFArrayRef Function()>();

  int CFBundleGetTypeID() {
    return _CFBundleGetTypeID();
  }

  late final _CFBundleGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFBundleGetTypeID');
  late final _CFBundleGetTypeID =
      _CFBundleGetTypeIDPtr.asFunction<int Function()>();

  CFBundleRef CFBundleCreate(
    CFAllocatorRef allocator,
    CFURLRef bundleURL,
  ) {
    return _CFBundleCreate(
      allocator,
      bundleURL,
    );
  }

  late final _CFBundleCreatePtr = _lookup<
          ffi.NativeFunction<CFBundleRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFBundleCreate');
  late final _CFBundleCreate = _CFBundleCreatePtr.asFunction<
      CFBundleRef Function(CFAllocatorRef, CFURLRef)>();

  CFArrayRef CFBundleCreateBundlesFromDirectory(
    CFAllocatorRef allocator,
    CFURLRef directoryURL,
    CFStringRef bundleType,
  ) {
    return _CFBundleCreateBundlesFromDirectory(
      allocator,
      directoryURL,
      bundleType,
    );
  }

  late final _CFBundleCreateBundlesFromDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef,
              CFStringRef)>>('CFBundleCreateBundlesFromDirectory');
  late final _CFBundleCreateBundlesFromDirectory =
      _CFBundleCreateBundlesFromDirectoryPtr.asFunction<
          CFArrayRef Function(CFAllocatorRef, CFURLRef, CFStringRef)>();

  CFURLRef CFBundleCopyBundleURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleURL(
      bundle,
    );
  }

  late final _CFBundleCopyBundleURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleURL');
  late final _CFBundleCopyBundleURL =
      _CFBundleCopyBundleURLPtr.asFunction<CFURLRef Function(CFBundleRef)>();

  CFTypeRef CFBundleGetValueForInfoDictionaryKey(
    CFBundleRef bundle,
    CFStringRef key,
  ) {
    return _CFBundleGetValueForInfoDictionaryKey(
      bundle,
      key,
    );
  }

  late final _CFBundleGetValueForInfoDictionaryKeyPtr =
      _lookup<ffi.NativeFunction<CFTypeRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleGetValueForInfoDictionaryKey');
  late final _CFBundleGetValueForInfoDictionaryKey =
      _CFBundleGetValueForInfoDictionaryKeyPtr.asFunction<
          CFTypeRef Function(CFBundleRef, CFStringRef)>();

  CFDictionaryRef CFBundleGetInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetInfoDictionary');
  late final _CFBundleGetInfoDictionary = _CFBundleGetInfoDictionaryPtr
      .asFunction<CFDictionaryRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleGetLocalInfoDictionary(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetLocalInfoDictionary(
      bundle,
    );
  }

  late final _CFBundleGetLocalInfoDictionaryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFBundleRef)>>(
          'CFBundleGetLocalInfoDictionary');
  late final _CFBundleGetLocalInfoDictionary =
      _CFBundleGetLocalInfoDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFBundleRef)>();

  void CFBundleGetPackageInfo(
    CFBundleRef bundle,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfo(
      bundle,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFBundleRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfo');
  late final _CFBundleGetPackageInfo = _CFBundleGetPackageInfoPtr.asFunction<
      void Function(CFBundleRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFStringRef CFBundleGetIdentifier(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetIdentifier(
      bundle,
    );
  }

  late final _CFBundleGetIdentifierPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetIdentifier');
  late final _CFBundleGetIdentifier =
      _CFBundleGetIdentifierPtr.asFunction<CFStringRef Function(CFBundleRef)>();

  int CFBundleGetVersionNumber(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetVersionNumber(
      bundle,
    );
  }

  late final _CFBundleGetVersionNumberPtr =
      _lookup<ffi.NativeFunction<UInt32 Function(CFBundleRef)>>(
          'CFBundleGetVersionNumber');
  late final _CFBundleGetVersionNumber =
      _CFBundleGetVersionNumberPtr.asFunction<int Function(CFBundleRef)>();

  CFStringRef CFBundleGetDevelopmentRegion(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetDevelopmentRegion(
      bundle,
    );
  }

  late final _CFBundleGetDevelopmentRegionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFBundleRef)>>(
          'CFBundleGetDevelopmentRegion');
  late final _CFBundleGetDevelopmentRegion = _CFBundleGetDevelopmentRegionPtr
      .asFunction<CFStringRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySupportFilesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySupportFilesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopySupportFilesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySupportFilesDirectoryURL');
  late final _CFBundleCopySupportFilesDirectoryURL =
      _CFBundleCopySupportFilesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyResourcesDirectoryURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyResourcesDirectoryURL(
      bundle,
    );
  }

  late final _CFBundleCopyResourcesDirectoryURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyResourcesDirectoryURL');
  late final _CFBundleCopyResourcesDirectoryURL =
      _CFBundleCopyResourcesDirectoryURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyPrivateFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyPrivateFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopyPrivateFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyPrivateFrameworksURL');
  late final _CFBundleCopyPrivateFrameworksURL =
      _CFBundleCopyPrivateFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedFrameworksURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedFrameworksURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedFrameworksURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedFrameworksURL');
  late final _CFBundleCopySharedFrameworksURL =
      _CFBundleCopySharedFrameworksURLPtr.asFunction<
          CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopySharedSupportURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopySharedSupportURL(
      bundle,
    );
  }

  late final _CFBundleCopySharedSupportURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopySharedSupportURL');
  late final _CFBundleCopySharedSupportURL = _CFBundleCopySharedSupportURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFURLRef CFBundleCopyBuiltInPlugInsURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBuiltInPlugInsURL(
      bundle,
    );
  }

  late final _CFBundleCopyBuiltInPlugInsURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyBuiltInPlugInsURL');
  late final _CFBundleCopyBuiltInPlugInsURL = _CFBundleCopyBuiltInPlugInsURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(
    CFURLRef bundleURL,
  ) {
    return _CFBundleCopyInfoDictionaryInDirectory(
      bundleURL,
    );
  }

  late final _CFBundleCopyInfoDictionaryInDirectoryPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryInDirectory');
  late final _CFBundleCopyInfoDictionaryInDirectory =
      _CFBundleCopyInfoDictionaryInDirectoryPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  int CFBundleGetPackageInfoInDirectory(
    CFURLRef url,
    ffi.Pointer<UInt32> packageType,
    ffi.Pointer<UInt32> packageCreator,
  ) {
    return _CFBundleGetPackageInfoInDirectory(
      url,
      packageType,
      packageCreator,
    );
  }

  late final _CFBundleGetPackageInfoInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFURLRef, ffi.Pointer<UInt32>,
              ffi.Pointer<UInt32>)>>('CFBundleGetPackageInfoInDirectory');
  late final _CFBundleGetPackageInfoInDirectory =
      _CFBundleGetPackageInfoInDirectoryPtr.asFunction<
          int Function(CFURLRef, ffi.Pointer<UInt32>, ffi.Pointer<UInt32>)>();

  CFURLRef CFBundleCopyResourceURL(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURL(
      bundle,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURL');
  late final _CFBundleCopyResourceURL = _CFBundleCopyResourceURLPtr.asFunction<
      CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfType(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfType(
      bundle,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypePtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfType');
  late final _CFBundleCopyResourceURLsOfType =
      _CFBundleCopyResourceURLsOfTypePtr.asFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef)>();

  CFStringRef CFBundleCopyLocalizedString(
    CFBundleRef bundle,
    CFStringRef key,
    CFStringRef value,
    CFStringRef tableName,
  ) {
    return _CFBundleCopyLocalizedString(
      bundle,
      key,
      value,
      tableName,
    );
  }

  late final _CFBundleCopyLocalizedStringPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyLocalizedString');
  late final _CFBundleCopyLocalizedString =
      _CFBundleCopyLocalizedStringPtr.asFunction<
          CFStringRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFURLRef CFBundleCopyResourceURLInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLInDirectory(
      bundleURL,
      resourceName,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLInDirectory');
  late final _CFBundleCopyResourceURLInDirectory =
      _CFBundleCopyResourceURLInDirectoryPtr.asFunction<
          CFURLRef Function(CFURLRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(
    CFURLRef bundleURL,
    CFStringRef resourceType,
    CFStringRef subDirName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeInDirectory(
      bundleURL,
      resourceType,
      subDirName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeInDirectoryPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFURLRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeInDirectory');
  late final _CFBundleCopyResourceURLsOfTypeInDirectory =
      _CFBundleCopyResourceURLsOfTypeInDirectoryPtr.asFunction<
          CFArrayRef Function(CFURLRef, CFStringRef, CFStringRef)>();

  CFArrayRef CFBundleCopyBundleLocalizations(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyBundleLocalizations(
      bundle,
    );
  }

  late final _CFBundleCopyBundleLocalizationsPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyBundleLocalizations');
  late final _CFBundleCopyBundleLocalizations =
      _CFBundleCopyBundleLocalizationsPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(
    CFArrayRef locArray,
  ) {
    return _CFBundleCopyPreferredLocalizationsFromArray(
      locArray,
    );
  }

  late final _CFBundleCopyPreferredLocalizationsFromArrayPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef)>>(
          'CFBundleCopyPreferredLocalizationsFromArray');
  late final _CFBundleCopyPreferredLocalizationsFromArray =
      _CFBundleCopyPreferredLocalizationsFromArrayPtr.asFunction<
          CFArrayRef Function(CFArrayRef)>();

  CFArrayRef CFBundleCopyLocalizationsForPreferences(
    CFArrayRef locArray,
    CFArrayRef prefArray,
  ) {
    return _CFBundleCopyLocalizationsForPreferences(
      locArray,
      prefArray,
    );
  }

  late final _CFBundleCopyLocalizationsForPreferencesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFArrayRef, CFArrayRef)>>(
          'CFBundleCopyLocalizationsForPreferences');
  late final _CFBundleCopyLocalizationsForPreferences =
      _CFBundleCopyLocalizationsForPreferencesPtr.asFunction<
          CFArrayRef Function(CFArrayRef, CFArrayRef)>();

  CFURLRef CFBundleCopyResourceURLForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceName,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLForLocalization(
      bundle,
      resourceName,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLForLocalization');
  late final _CFBundleCopyResourceURLForLocalization =
      _CFBundleCopyResourceURLForLocalizationPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef, CFStringRef, CFStringRef,
              CFStringRef)>();

  CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(
    CFBundleRef bundle,
    CFStringRef resourceType,
    CFStringRef subDirName,
    CFStringRef localizationName,
  ) {
    return _CFBundleCopyResourceURLsOfTypeForLocalization(
      bundle,
      resourceType,
      subDirName,
      localizationName,
    );
  }

  late final _CFBundleCopyResourceURLsOfTypeForLocalizationPtr = _lookup<
      ffi.NativeFunction<
          CFArrayRef Function(CFBundleRef, CFStringRef, CFStringRef,
              CFStringRef)>>('CFBundleCopyResourceURLsOfTypeForLocalization');
  late final _CFBundleCopyResourceURLsOfTypeForLocalization =
      _CFBundleCopyResourceURLsOfTypeForLocalizationPtr.asFunction<
          CFArrayRef Function(
              CFBundleRef, CFStringRef, CFStringRef, CFStringRef)>();

  CFDictionaryRef CFBundleCopyInfoDictionaryForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyInfoDictionaryForURL(
      url,
    );
  }

  late final _CFBundleCopyInfoDictionaryForURLPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(CFURLRef)>>(
          'CFBundleCopyInfoDictionaryForURL');
  late final _CFBundleCopyInfoDictionaryForURL =
      _CFBundleCopyInfoDictionaryForURLPtr.asFunction<
          CFDictionaryRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyLocalizationsForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyLocalizationsForURL(
      url,
    );
  }

  late final _CFBundleCopyLocalizationsForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyLocalizationsForURL');
  late final _CFBundleCopyLocalizationsForURL =
      _CFBundleCopyLocalizationsForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFArrayRef CFBundleCopyExecutableArchitecturesForURL(
    CFURLRef url,
  ) {
    return _CFBundleCopyExecutableArchitecturesForURL(
      url,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesForURLPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFURLRef)>>(
          'CFBundleCopyExecutableArchitecturesForURL');
  late final _CFBundleCopyExecutableArchitecturesForURL =
      _CFBundleCopyExecutableArchitecturesForURLPtr.asFunction<
          CFArrayRef Function(CFURLRef)>();

  CFURLRef CFBundleCopyExecutableURL(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableURL(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableURL');
  late final _CFBundleCopyExecutableURL = _CFBundleCopyExecutableURLPtr
      .asFunction<CFURLRef Function(CFBundleRef)>();

  CFArrayRef CFBundleCopyExecutableArchitectures(
    CFBundleRef bundle,
  ) {
    return _CFBundleCopyExecutableArchitectures(
      bundle,
    );
  }

  late final _CFBundleCopyExecutableArchitecturesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFBundleRef)>>(
          'CFBundleCopyExecutableArchitectures');
  late final _CFBundleCopyExecutableArchitectures =
      _CFBundleCopyExecutableArchitecturesPtr.asFunction<
          CFArrayRef Function(CFBundleRef)>();

  int CFBundlePreflightExecutable(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundlePreflightExecutable(
      bundle,
      error,
    );
  }

  late final _CFBundlePreflightExecutablePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFBundleRef,
              ffi.Pointer<CFErrorRef>)>>('CFBundlePreflightExecutable');
  late final _CFBundlePreflightExecutable = _CFBundlePreflightExecutablePtr
      .asFunction<int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutableAndReturnError(
    CFBundleRef bundle,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFBundleLoadExecutableAndReturnError(
      bundle,
      error,
    );
  }

  late final _CFBundleLoadExecutableAndReturnErrorPtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>>(
      'CFBundleLoadExecutableAndReturnError');
  late final _CFBundleLoadExecutableAndReturnError =
      _CFBundleLoadExecutableAndReturnErrorPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFErrorRef>)>();

  int CFBundleLoadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleLoadExecutable(
      bundle,
    );
  }

  late final _CFBundleLoadExecutablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleLoadExecutable');
  late final _CFBundleLoadExecutable =
      _CFBundleLoadExecutablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoaded(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoaded(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadedPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoaded');
  late final _CFBundleIsExecutableLoaded =
      _CFBundleIsExecutableLoadedPtr.asFunction<int Function(CFBundleRef)>();

  void CFBundleUnloadExecutable(
    CFBundleRef bundle,
  ) {
    return _CFBundleUnloadExecutable(
      bundle,
    );
  }

  late final _CFBundleUnloadExecutablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFBundleRef)>>(
          'CFBundleUnloadExecutable');
  late final _CFBundleUnloadExecutable =
      _CFBundleUnloadExecutablePtr.asFunction<void Function(CFBundleRef)>();

  ffi.Pointer<ffi.Void> CFBundleGetFunctionPointerForName(
    CFBundleRef bundle,
    CFStringRef functionName,
  ) {
    return _CFBundleGetFunctionPointerForName(
      bundle,
      functionName,
    );
  }

  late final _CFBundleGetFunctionPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetFunctionPointerForName');
  late final _CFBundleGetFunctionPointerForName =
      _CFBundleGetFunctionPointerForNamePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetFunctionPointersForNames(
    CFBundleRef bundle,
    CFArrayRef functionNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFBundleGetFunctionPointersForNames(
      bundle,
      functionNames,
      ftbl,
    );
  }

  late final _CFBundleGetFunctionPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetFunctionPointersForNames');
  late final _CFBundleGetFunctionPointersForNames =
      _CFBundleGetFunctionPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  ffi.Pointer<ffi.Void> CFBundleGetDataPointerForName(
    CFBundleRef bundle,
    CFStringRef symbolName,
  ) {
    return _CFBundleGetDataPointerForName(
      bundle,
      symbolName,
    );
  }

  late final _CFBundleGetDataPointerForNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFBundleRef, CFStringRef)>>('CFBundleGetDataPointerForName');
  late final _CFBundleGetDataPointerForName = _CFBundleGetDataPointerForNamePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(CFBundleRef, CFStringRef)>();

  void CFBundleGetDataPointersForNames(
    CFBundleRef bundle,
    CFArrayRef symbolNames,
    ffi.Pointer<ffi.Pointer<ffi.Void>> stbl,
  ) {
    return _CFBundleGetDataPointersForNames(
      bundle,
      symbolNames,
      stbl,
    );
  }

  late final _CFBundleGetDataPointersForNamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFBundleRef, CFArrayRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFBundleGetDataPointersForNames');
  late final _CFBundleGetDataPointersForNames =
      _CFBundleGetDataPointersForNamesPtr.asFunction<
          void Function(
              CFBundleRef, CFArrayRef, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFURLRef CFBundleCopyAuxiliaryExecutableURL(
    CFBundleRef bundle,
    CFStringRef executableName,
  ) {
    return _CFBundleCopyAuxiliaryExecutableURL(
      bundle,
      executableName,
    );
  }

  late final _CFBundleCopyAuxiliaryExecutableURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFBundleRef, CFStringRef)>>(
          'CFBundleCopyAuxiliaryExecutableURL');
  late final _CFBundleCopyAuxiliaryExecutableURL =
      _CFBundleCopyAuxiliaryExecutableURLPtr.asFunction<
          CFURLRef Function(CFBundleRef, CFStringRef)>();

  int CFBundleIsExecutableLoadable(
    CFBundleRef bundle,
  ) {
    return _CFBundleIsExecutableLoadable(
      bundle,
    );
  }

  late final _CFBundleIsExecutableLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFBundleRef)>>(
          'CFBundleIsExecutableLoadable');
  late final _CFBundleIsExecutableLoadable =
      _CFBundleIsExecutableLoadablePtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleIsExecutableLoadableForURL(
    CFURLRef url,
  ) {
    return _CFBundleIsExecutableLoadableForURL(
      url,
    );
  }

  late final _CFBundleIsExecutableLoadableForURLPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLRef)>>(
          'CFBundleIsExecutableLoadableForURL');
  late final _CFBundleIsExecutableLoadableForURL =
      _CFBundleIsExecutableLoadableForURLPtr.asFunction<
          int Function(CFURLRef)>();

  int CFBundleIsArchitectureLoadable(
    int arch,
  ) {
    return _CFBundleIsArchitectureLoadable(
      arch,
    );
  }

  late final _CFBundleIsArchitectureLoadablePtr =
      _lookup<ffi.NativeFunction<Boolean Function(cpu_type_t)>>(
          'CFBundleIsArchitectureLoadable');
  late final _CFBundleIsArchitectureLoadable =
      _CFBundleIsArchitectureLoadablePtr.asFunction<int Function(int)>();

  CFPlugInRef CFBundleGetPlugIn(
    CFBundleRef bundle,
  ) {
    return _CFBundleGetPlugIn(
      bundle,
    );
  }

  late final _CFBundleGetPlugInPtr =
      _lookup<ffi.NativeFunction<CFPlugInRef Function(CFBundleRef)>>(
          'CFBundleGetPlugIn');
  late final _CFBundleGetPlugIn =
      _CFBundleGetPlugInPtr.asFunction<CFPlugInRef Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceMap(
    CFBundleRef bundle,
  ) {
    return _CFBundleOpenBundleResourceMap(
      bundle,
    );
  }

  late final _CFBundleOpenBundleResourceMapPtr =
      _lookup<ffi.NativeFunction<CFBundleRefNum Function(CFBundleRef)>>(
          'CFBundleOpenBundleResourceMap');
  late final _CFBundleOpenBundleResourceMap =
      _CFBundleOpenBundleResourceMapPtr.asFunction<int Function(CFBundleRef)>();

  int CFBundleOpenBundleResourceFiles(
    CFBundleRef bundle,
    ffi.Pointer<CFBundleRefNum> refNum,
    ffi.Pointer<CFBundleRefNum> localizedRefNum,
  ) {
    return _CFBundleOpenBundleResourceFiles(
      bundle,
      refNum,
      localizedRefNum,
    );
  }

  late final _CFBundleOpenBundleResourceFilesPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>>('CFBundleOpenBundleResourceFiles');
  late final _CFBundleOpenBundleResourceFiles =
      _CFBundleOpenBundleResourceFilesPtr.asFunction<
          int Function(CFBundleRef, ffi.Pointer<CFBundleRefNum>,
              ffi.Pointer<CFBundleRefNum>)>();

  void CFBundleCloseBundleResourceMap(
    CFBundleRef bundle,
    int refNum,
  ) {
    return _CFBundleCloseBundleResourceMap(
      bundle,
      refNum,
    );
  }

  late final _CFBundleCloseBundleResourceMapPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFBundleRef, CFBundleRefNum)>>(
      'CFBundleCloseBundleResourceMap');
  late final _CFBundleCloseBundleResourceMap =
      _CFBundleCloseBundleResourceMapPtr.asFunction<
          void Function(CFBundleRef, int)>();

  int CFMessagePortGetTypeID() {
    return _CFMessagePortGetTypeID();
  }

  late final _CFMessagePortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFMessagePortGetTypeID');
  late final _CFMessagePortGetTypeID =
      _CFMessagePortGetTypeIDPtr.asFunction<int Function()>();

  CFMessagePortRef CFMessagePortCreateLocal(
    CFAllocatorRef allocator,
    CFStringRef name,
    CFMessagePortCallBack callout,
    ffi.Pointer<CFMessagePortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMessagePortCreateLocal(
      allocator,
      name,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMessagePortCreateLocalPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>>('CFMessagePortCreateLocal');
  late final _CFMessagePortCreateLocal =
      _CFMessagePortCreateLocalPtr.asFunction<
          CFMessagePortRef Function(
              CFAllocatorRef,
              CFStringRef,
              CFMessagePortCallBack,
              ffi.Pointer<CFMessagePortContext>,
              ffi.Pointer<Boolean>)>();

  CFMessagePortRef CFMessagePortCreateRemote(
    CFAllocatorRef allocator,
    CFStringRef name,
  ) {
    return _CFMessagePortCreateRemote(
      allocator,
      name,
    );
  }

  late final _CFMessagePortCreateRemotePtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortRef Function(
              CFAllocatorRef, CFStringRef)>>('CFMessagePortCreateRemote');
  late final _CFMessagePortCreateRemote = _CFMessagePortCreateRemotePtr
      .asFunction<CFMessagePortRef Function(CFAllocatorRef, CFStringRef)>();

  int CFMessagePortIsRemote(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsRemote(
      ms,
    );
  }

  late final _CFMessagePortIsRemotePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsRemote');
  late final _CFMessagePortIsRemote =
      _CFMessagePortIsRemotePtr.asFunction<int Function(CFMessagePortRef)>();

  CFStringRef CFMessagePortGetName(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetName(
      ms,
    );
  }

  late final _CFMessagePortGetNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFMessagePortRef)>>(
          'CFMessagePortGetName');
  late final _CFMessagePortGetName = _CFMessagePortGetNamePtr.asFunction<
      CFStringRef Function(CFMessagePortRef)>();

  int CFMessagePortSetName(
    CFMessagePortRef ms,
    CFStringRef newName,
  ) {
    return _CFMessagePortSetName(
      ms,
      newName,
    );
  }

  late final _CFMessagePortSetNamePtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFMessagePortRef, CFStringRef)>>(
      'CFMessagePortSetName');
  late final _CFMessagePortSetName = _CFMessagePortSetNamePtr.asFunction<
      int Function(CFMessagePortRef, CFStringRef)>();

  void CFMessagePortGetContext(
    CFMessagePortRef ms,
    ffi.Pointer<CFMessagePortContext> context,
  ) {
    return _CFMessagePortGetContext(
      ms,
      context,
    );
  }

  late final _CFMessagePortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              ffi.Pointer<CFMessagePortContext>)>>('CFMessagePortGetContext');
  late final _CFMessagePortGetContext = _CFMessagePortGetContextPtr.asFunction<
      void Function(CFMessagePortRef, ffi.Pointer<CFMessagePortContext>)>();

  void CFMessagePortInvalidate(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortInvalidate(
      ms,
    );
  }

  late final _CFMessagePortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMessagePortRef)>>(
          'CFMessagePortInvalidate');
  late final _CFMessagePortInvalidate =
      _CFMessagePortInvalidatePtr.asFunction<void Function(CFMessagePortRef)>();

  int CFMessagePortIsValid(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortIsValid(
      ms,
    );
  }

  late final _CFMessagePortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMessagePortRef)>>(
          'CFMessagePortIsValid');
  late final _CFMessagePortIsValid =
      _CFMessagePortIsValidPtr.asFunction<int Function(CFMessagePortRef)>();

  CFMessagePortInvalidationCallBack CFMessagePortGetInvalidationCallBack(
    CFMessagePortRef ms,
  ) {
    return _CFMessagePortGetInvalidationCallBack(
      ms,
    );
  }

  late final _CFMessagePortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMessagePortInvalidationCallBack Function(
              CFMessagePortRef)>>('CFMessagePortGetInvalidationCallBack');
  late final _CFMessagePortGetInvalidationCallBack =
      _CFMessagePortGetInvalidationCallBackPtr.asFunction<
          CFMessagePortInvalidationCallBack Function(CFMessagePortRef)>();

  void CFMessagePortSetInvalidationCallBack(
    CFMessagePortRef ms,
    CFMessagePortInvalidationCallBack callout,
  ) {
    return _CFMessagePortSetInvalidationCallBack(
      ms,
      callout,
    );
  }

  late final _CFMessagePortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMessagePortRef, CFMessagePortInvalidationCallBack)>>(
      'CFMessagePortSetInvalidationCallBack');
  late final _CFMessagePortSetInvalidationCallBack =
      _CFMessagePortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMessagePortRef, CFMessagePortInvalidationCallBack)>();

  int CFMessagePortSendRequest(
    CFMessagePortRef remote,
    int msgid,
    CFDataRef data,
    double sendTimeout,
    double rcvTimeout,
    CFStringRef replyMode,
    ffi.Pointer<CFDataRef> returnData,
  ) {
    return _CFMessagePortSendRequest(
      remote,
      msgid,
      data,
      sendTimeout,
      rcvTimeout,
      replyMode,
      returnData,
    );
  }

  late final _CFMessagePortSendRequestPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFMessagePortRef,
              SInt32,
              CFDataRef,
              CFTimeInterval,
              CFTimeInterval,
              CFStringRef,
              ffi.Pointer<CFDataRef>)>>('CFMessagePortSendRequest');
  late final _CFMessagePortSendRequest =
      _CFMessagePortSendRequestPtr.asFunction<
          int Function(CFMessagePortRef, int, CFDataRef, double, double,
              CFStringRef, ffi.Pointer<CFDataRef>)>();

  CFRunLoopSourceRef CFMessagePortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMessagePortRef local,
    int order,
  ) {
    return _CFMessagePortCreateRunLoopSource(
      allocator,
      local,
      order,
    );
  }

  late final _CFMessagePortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef,
              CFIndex)>>('CFMessagePortCreateRunLoopSource');
  late final _CFMessagePortCreateRunLoopSource =
      _CFMessagePortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMessagePortRef, int)>();

  void CFMessagePortSetDispatchQueue(
    CFMessagePortRef ms,
    dispatch_queue_t queue,
  ) {
    return _CFMessagePortSetDispatchQueue(
      ms,
      queue,
    );
  }

  late final _CFMessagePortSetDispatchQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMessagePortRef,
              dispatch_queue_t)>>('CFMessagePortSetDispatchQueue');
  late final _CFMessagePortSetDispatchQueue = _CFMessagePortSetDispatchQueuePtr
      .asFunction<void Function(CFMessagePortRef, dispatch_queue_t)>();

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegistrationKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegistrationKey');

  CFStringRef get kCFPlugInDynamicRegistrationKey =>
      _kCFPlugInDynamicRegistrationKey.value;

  set kCFPlugInDynamicRegistrationKey(CFStringRef value) =>
      _kCFPlugInDynamicRegistrationKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInDynamicRegisterFunctionKey =
      _lookup<CFStringRef>('kCFPlugInDynamicRegisterFunctionKey');

  CFStringRef get kCFPlugInDynamicRegisterFunctionKey =>
      _kCFPlugInDynamicRegisterFunctionKey.value;

  set kCFPlugInDynamicRegisterFunctionKey(CFStringRef value) =>
      _kCFPlugInDynamicRegisterFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInUnloadFunctionKey =
      _lookup<CFStringRef>('kCFPlugInUnloadFunctionKey');

  CFStringRef get kCFPlugInUnloadFunctionKey =>
      _kCFPlugInUnloadFunctionKey.value;

  set kCFPlugInUnloadFunctionKey(CFStringRef value) =>
      _kCFPlugInUnloadFunctionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInFactoriesKey =
      _lookup<CFStringRef>('kCFPlugInFactoriesKey');

  CFStringRef get kCFPlugInFactoriesKey => _kCFPlugInFactoriesKey.value;

  set kCFPlugInFactoriesKey(CFStringRef value) =>
      _kCFPlugInFactoriesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFPlugInTypesKey =
      _lookup<CFStringRef>('kCFPlugInTypesKey');

  CFStringRef get kCFPlugInTypesKey => _kCFPlugInTypesKey.value;

  set kCFPlugInTypesKey(CFStringRef value) => _kCFPlugInTypesKey.value = value;

  int CFPlugInGetTypeID() {
    return _CFPlugInGetTypeID();
  }

  late final _CFPlugInGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFPlugInGetTypeID');
  late final _CFPlugInGetTypeID =
      _CFPlugInGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInRef CFPlugInCreate(
    CFAllocatorRef allocator,
    CFURLRef plugInURL,
  ) {
    return _CFPlugInCreate(
      allocator,
      plugInURL,
    );
  }

  late final _CFPlugInCreatePtr = _lookup<
          ffi.NativeFunction<CFPlugInRef Function(CFAllocatorRef, CFURLRef)>>(
      'CFPlugInCreate');
  late final _CFPlugInCreate = _CFPlugInCreatePtr.asFunction<
      CFPlugInRef Function(CFAllocatorRef, CFURLRef)>();

  CFBundleRef CFPlugInGetBundle(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInGetBundle(
      plugIn,
    );
  }

  late final _CFPlugInGetBundlePtr =
      _lookup<ffi.NativeFunction<CFBundleRef Function(CFPlugInRef)>>(
          'CFPlugInGetBundle');
  late final _CFPlugInGetBundle =
      _CFPlugInGetBundlePtr.asFunction<CFBundleRef Function(CFPlugInRef)>();

  void CFPlugInSetLoadOnDemand(
    CFPlugInRef plugIn,
    int flag,
  ) {
    return _CFPlugInSetLoadOnDemand(
      plugIn,
      flag,
    );
  }

  late final _CFPlugInSetLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFPlugInRef, Boolean)>>(
          'CFPlugInSetLoadOnDemand');
  late final _CFPlugInSetLoadOnDemand =
      _CFPlugInSetLoadOnDemandPtr.asFunction<void Function(CFPlugInRef, int)>();

  int CFPlugInIsLoadOnDemand(
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInIsLoadOnDemand(
      plugIn,
    );
  }

  late final _CFPlugInIsLoadOnDemandPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFPlugInRef)>>(
          'CFPlugInIsLoadOnDemand');
  late final _CFPlugInIsLoadOnDemand =
      _CFPlugInIsLoadOnDemandPtr.asFunction<int Function(CFPlugInRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInType(
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInFindFactoriesForPlugInType(
      typeUUID,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypePtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef)>>(
          'CFPlugInFindFactoriesForPlugInType');
  late final _CFPlugInFindFactoriesForPlugInType =
      _CFPlugInFindFactoriesForPlugInTypePtr.asFunction<
          CFArrayRef Function(CFUUIDRef)>();

  CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(
    CFUUIDRef typeUUID,
    CFPlugInRef plugIn,
  ) {
    return _CFPlugInFindFactoriesForPlugInTypeInPlugIn(
      typeUUID,
      plugIn,
    );
  }

  late final _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(CFUUIDRef, CFPlugInRef)>>(
          'CFPlugInFindFactoriesForPlugInTypeInPlugIn');
  late final _CFPlugInFindFactoriesForPlugInTypeInPlugIn =
      _CFPlugInFindFactoriesForPlugInTypeInPlugInPtr.asFunction<
          CFArrayRef Function(CFUUIDRef, CFPlugInRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceCreate(
    CFAllocatorRef allocator,
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInInstanceCreate(
      allocator,
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInInstanceCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, CFUUIDRef, CFUUIDRef)>>('CFPlugInInstanceCreate');
  late final _CFPlugInInstanceCreate = _CFPlugInInstanceCreatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef, CFUUIDRef)>();

  int CFPlugInRegisterFactoryFunction(
    CFUUIDRef factoryUUID,
    CFPlugInFactoryFunction func,
  ) {
    return _CFPlugInRegisterFactoryFunction(
      factoryUUID,
      func,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef,
              CFPlugInFactoryFunction)>>('CFPlugInRegisterFactoryFunction');
  late final _CFPlugInRegisterFactoryFunction =
      _CFPlugInRegisterFactoryFunctionPtr.asFunction<
          int Function(CFUUIDRef, CFPlugInFactoryFunction)>();

  int CFPlugInRegisterFactoryFunctionByName(
    CFUUIDRef factoryUUID,
    CFPlugInRef plugIn,
    CFStringRef functionName,
  ) {
    return _CFPlugInRegisterFactoryFunctionByName(
      factoryUUID,
      plugIn,
      functionName,
    );
  }

  late final _CFPlugInRegisterFactoryFunctionByNamePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFUUIDRef, CFPlugInRef,
              CFStringRef)>>('CFPlugInRegisterFactoryFunctionByName');
  late final _CFPlugInRegisterFactoryFunctionByName =
      _CFPlugInRegisterFactoryFunctionByNamePtr.asFunction<
          int Function(CFUUIDRef, CFPlugInRef, CFStringRef)>();

  int CFPlugInUnregisterFactory(
    CFUUIDRef factoryUUID,
  ) {
    return _CFPlugInUnregisterFactory(
      factoryUUID,
    );
  }

  late final _CFPlugInUnregisterFactoryPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef)>>(
          'CFPlugInUnregisterFactory');
  late final _CFPlugInUnregisterFactory =
      _CFPlugInUnregisterFactoryPtr.asFunction<int Function(CFUUIDRef)>();

  int CFPlugInRegisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInRegisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInRegisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInRegisterPlugInType');
  late final _CFPlugInRegisterPlugInType = _CFPlugInRegisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  int CFPlugInUnregisterPlugInType(
    CFUUIDRef factoryUUID,
    CFUUIDRef typeUUID,
  ) {
    return _CFPlugInUnregisterPlugInType(
      factoryUUID,
      typeUUID,
    );
  }

  late final _CFPlugInUnregisterPlugInTypePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFUUIDRef, CFUUIDRef)>>(
          'CFPlugInUnregisterPlugInType');
  late final _CFPlugInUnregisterPlugInType = _CFPlugInUnregisterPlugInTypePtr
      .asFunction<int Function(CFUUIDRef, CFUUIDRef)>();

  void CFPlugInAddInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInAddInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInAddInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInAddInstanceForFactory');
  late final _CFPlugInAddInstanceForFactory =
      _CFPlugInAddInstanceForFactoryPtr.asFunction<void Function(CFUUIDRef)>();

  void CFPlugInRemoveInstanceForFactory(
    CFUUIDRef factoryID,
  ) {
    return _CFPlugInRemoveInstanceForFactory(
      factoryID,
    );
  }

  late final _CFPlugInRemoveInstanceForFactoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFUUIDRef)>>(
          'CFPlugInRemoveInstanceForFactory');
  late final _CFPlugInRemoveInstanceForFactory =
      _CFPlugInRemoveInstanceForFactoryPtr.asFunction<
          void Function(CFUUIDRef)>();

  int CFPlugInInstanceGetInterfaceFunctionTable(
    CFPlugInInstanceRef instance,
    CFStringRef interfaceName,
    ffi.Pointer<ffi.Pointer<ffi.Void>> ftbl,
  ) {
    return _CFPlugInInstanceGetInterfaceFunctionTable(
      instance,
      interfaceName,
      ftbl,
    );
  }

  late final _CFPlugInInstanceGetInterfaceFunctionTablePtr = _lookup<
          ffi.NativeFunction<
              Boolean Function(CFPlugInInstanceRef, CFStringRef,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'CFPlugInInstanceGetInterfaceFunctionTable');
  late final _CFPlugInInstanceGetInterfaceFunctionTable =
      _CFPlugInInstanceGetInterfaceFunctionTablePtr.asFunction<
          int Function(CFPlugInInstanceRef, CFStringRef,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  CFStringRef CFPlugInInstanceGetFactoryName(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetFactoryName(
      instance,
    );
  }

  late final _CFPlugInInstanceGetFactoryNamePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFPlugInInstanceRef)>>(
          'CFPlugInInstanceGetFactoryName');
  late final _CFPlugInInstanceGetFactoryName =
      _CFPlugInInstanceGetFactoryNamePtr.asFunction<
          CFStringRef Function(CFPlugInInstanceRef)>();

  ffi.Pointer<ffi.Void> CFPlugInInstanceGetInstanceData(
    CFPlugInInstanceRef instance,
  ) {
    return _CFPlugInInstanceGetInstanceData(
      instance,
    );
  }

  late final _CFPlugInInstanceGetInstanceDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFPlugInInstanceRef)>>('CFPlugInInstanceGetInstanceData');
  late final _CFPlugInInstanceGetInstanceData =
      _CFPlugInInstanceGetInstanceDataPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(CFPlugInInstanceRef)>();

  int CFPlugInInstanceGetTypeID() {
    return _CFPlugInInstanceGetTypeID();
  }

  late final _CFPlugInInstanceGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFPlugInInstanceGetTypeID');
  late final _CFPlugInInstanceGetTypeID =
      _CFPlugInInstanceGetTypeIDPtr.asFunction<int Function()>();

  CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(
    CFAllocatorRef allocator,
    int instanceDataSize,
    CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction,
    CFStringRef factoryName,
    CFPlugInInstanceGetInterfaceFunction getInterfaceFunction,
  ) {
    return _CFPlugInInstanceCreateWithInstanceDataSize(
      allocator,
      instanceDataSize,
      deallocateInstanceFunction,
      factoryName,
      getInterfaceFunction,
    );
  }

  late final _CFPlugInInstanceCreateWithInstanceDataSizePtr = _lookup<
          ffi.NativeFunction<
              CFPlugInInstanceRef Function(
                  CFAllocatorRef,
                  CFIndex,
                  CFPlugInInstanceDeallocateInstanceDataFunction,
                  CFStringRef,
                  CFPlugInInstanceGetInterfaceFunction)>>(
      'CFPlugInInstanceCreateWithInstanceDataSize');
  late final _CFPlugInInstanceCreateWithInstanceDataSize =
      _CFPlugInInstanceCreateWithInstanceDataSizePtr.asFunction<
          CFPlugInInstanceRef Function(
              CFAllocatorRef,
              int,
              CFPlugInInstanceDeallocateInstanceDataFunction,
              CFStringRef,
              CFPlugInInstanceGetInterfaceFunction)>();

  int CFMachPortGetTypeID() {
    return _CFMachPortGetTypeID();
  }

  late final _CFMachPortGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFMachPortGetTypeID');
  late final _CFMachPortGetTypeID =
      _CFMachPortGetTypeIDPtr.asFunction<int Function()>();

  CFMachPortRef CFMachPortCreate(
    CFAllocatorRef allocator,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreate(
      allocator,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreatePtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreate');
  late final _CFMachPortCreate = _CFMachPortCreatePtr.asFunction<
      CFMachPortRef Function(CFAllocatorRef, CFMachPortCallBack,
          ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  CFMachPortRef CFMachPortCreateWithPort(
    CFAllocatorRef allocator,
    int portNum,
    CFMachPortCallBack callout,
    ffi.Pointer<CFMachPortContext> context,
    ffi.Pointer<Boolean> shouldFreeInfo,
  ) {
    return _CFMachPortCreateWithPort(
      allocator,
      portNum,
      callout,
      context,
      shouldFreeInfo,
    );
  }

  late final _CFMachPortCreateWithPortPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortRef Function(
              CFAllocatorRef,
              mach_port_t,
              CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>,
              ffi.Pointer<Boolean>)>>('CFMachPortCreateWithPort');
  late final _CFMachPortCreateWithPort =
      _CFMachPortCreateWithPortPtr.asFunction<
          CFMachPortRef Function(CFAllocatorRef, int, CFMachPortCallBack,
              ffi.Pointer<CFMachPortContext>, ffi.Pointer<Boolean>)>();

  int CFMachPortGetPort(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetPort(
      port,
    );
  }

  late final _CFMachPortGetPortPtr =
      _lookup<ffi.NativeFunction<mach_port_t Function(CFMachPortRef)>>(
          'CFMachPortGetPort');
  late final _CFMachPortGetPort =
      _CFMachPortGetPortPtr.asFunction<int Function(CFMachPortRef)>();

  void CFMachPortGetContext(
    CFMachPortRef port,
    ffi.Pointer<CFMachPortContext> context,
  ) {
    return _CFMachPortGetContext(
      port,
      context,
    );
  }

  late final _CFMachPortGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMachPortRef,
              ffi.Pointer<CFMachPortContext>)>>('CFMachPortGetContext');
  late final _CFMachPortGetContext = _CFMachPortGetContextPtr.asFunction<
      void Function(CFMachPortRef, ffi.Pointer<CFMachPortContext>)>();

  void CFMachPortInvalidate(
    CFMachPortRef port,
  ) {
    return _CFMachPortInvalidate(
      port,
    );
  }

  late final _CFMachPortInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFMachPortRef)>>(
          'CFMachPortInvalidate');
  late final _CFMachPortInvalidate =
      _CFMachPortInvalidatePtr.asFunction<void Function(CFMachPortRef)>();

  int CFMachPortIsValid(
    CFMachPortRef port,
  ) {
    return _CFMachPortIsValid(
      port,
    );
  }

  late final _CFMachPortIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFMachPortRef)>>(
          'CFMachPortIsValid');
  late final _CFMachPortIsValid =
      _CFMachPortIsValidPtr.asFunction<int Function(CFMachPortRef)>();

  CFMachPortInvalidationCallBack CFMachPortGetInvalidationCallBack(
    CFMachPortRef port,
  ) {
    return _CFMachPortGetInvalidationCallBack(
      port,
    );
  }

  late final _CFMachPortGetInvalidationCallBackPtr = _lookup<
      ffi.NativeFunction<
          CFMachPortInvalidationCallBack Function(
              CFMachPortRef)>>('CFMachPortGetInvalidationCallBack');
  late final _CFMachPortGetInvalidationCallBack =
      _CFMachPortGetInvalidationCallBackPtr.asFunction<
          CFMachPortInvalidationCallBack Function(CFMachPortRef)>();

  void CFMachPortSetInvalidationCallBack(
    CFMachPortRef port,
    CFMachPortInvalidationCallBack callout,
  ) {
    return _CFMachPortSetInvalidationCallBack(
      port,
      callout,
    );
  }

  late final _CFMachPortSetInvalidationCallBackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFMachPortRef, CFMachPortInvalidationCallBack)>>(
      'CFMachPortSetInvalidationCallBack');
  late final _CFMachPortSetInvalidationCallBack =
      _CFMachPortSetInvalidationCallBackPtr.asFunction<
          void Function(CFMachPortRef, CFMachPortInvalidationCallBack)>();

  CFRunLoopSourceRef CFMachPortCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFMachPortRef port,
    int order,
  ) {
    return _CFMachPortCreateRunLoopSource(
      allocator,
      port,
      order,
    );
  }

  late final _CFMachPortCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef,
              CFIndex)>>('CFMachPortCreateRunLoopSource');
  late final _CFMachPortCreateRunLoopSource =
      _CFMachPortCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFMachPortRef, int)>();

  int CFAttributedStringGetTypeID() {
    return _CFAttributedStringGetTypeID();
  }

  late final _CFAttributedStringGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFAttributedStringGetTypeID');
  late final _CFAttributedStringGetTypeID =
      _CFAttributedStringGetTypeIDPtr.asFunction<int Function()>();

  CFAttributedStringRef CFAttributedStringCreate(
    CFAllocatorRef alloc,
    CFStringRef str,
    CFDictionaryRef attributes,
  ) {
    return _CFAttributedStringCreate(
      alloc,
      str,
      attributes,
    );
  }

  late final _CFAttributedStringCreatePtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFAttributedStringCreate');
  late final _CFAttributedStringCreate =
      _CFAttributedStringCreatePtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFAttributedStringRef CFAttributedStringCreateWithSubstring(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
    CFRange range,
  ) {
    return _CFAttributedStringCreateWithSubstring(
      alloc,
      aStr,
      range,
    );
  }

  late final _CFAttributedStringCreateWithSubstringPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef, CFAttributedStringRef,
              CFRange)>>('CFAttributedStringCreateWithSubstring');
  late final _CFAttributedStringCreateWithSubstring =
      _CFAttributedStringCreateWithSubstringPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef, CFRange)>();

  CFAttributedStringRef CFAttributedStringCreateCopy(
    CFAllocatorRef alloc,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateCopy(
      alloc,
      aStr,
    );
  }

  late final _CFAttributedStringCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFAttributedStringRef Function(CFAllocatorRef,
              CFAttributedStringRef)>>('CFAttributedStringCreateCopy');
  late final _CFAttributedStringCreateCopy =
      _CFAttributedStringCreateCopyPtr.asFunction<
          CFAttributedStringRef Function(
              CFAllocatorRef, CFAttributedStringRef)>();

  CFStringRef CFAttributedStringGetString(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetString(
      aStr,
    );
  }

  late final _CFAttributedStringGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetString');
  late final _CFAttributedStringGetString = _CFAttributedStringGetStringPtr
      .asFunction<CFStringRef Function(CFAttributedStringRef)>();

  int CFAttributedStringGetLength(
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetLength(
      aStr,
    );
  }

  late final _CFAttributedStringGetLengthPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFAttributedStringRef)>>(
          'CFAttributedStringGetLength');
  late final _CFAttributedStringGetLength = _CFAttributedStringGetLengthPtr
      .asFunction<int Function(CFAttributedStringRef)>();

  CFDictionaryRef CFAttributedStringGetAttributes(
    CFAttributedStringRef aStr,
    int loc,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttributes(
      aStr,
      loc,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttributes');
  late final _CFAttributedStringGetAttributes =
      _CFAttributedStringGetAttributesPtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttribute(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    ffi.Pointer<CFRange> effectiveRange,
  ) {
    return _CFAttributedStringGetAttribute(
      aStr,
      loc,
      attrName,
      effectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFAttributedStringRef, CFIndex, CFStringRef,
              ffi.Pointer<CFRange>)>>('CFAttributedStringGetAttribute');
  late final _CFAttributedStringGetAttribute =
      _CFAttributedStringGetAttributePtr.asFunction<
          CFTypeRef Function(
              CFAttributedStringRef, int, CFStringRef, ffi.Pointer<CFRange>)>();

  CFDictionaryRef CFAttributedStringGetAttributesAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributesAndLongestEffectiveRange(
      aStr,
      loc,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFDictionaryRef Function(CFAttributedStringRef, CFIndex,
                      CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributesAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributesAndLongestEffectiveRange =
      _CFAttributedStringGetAttributesAndLongestEffectiveRangePtr.asFunction<
          CFDictionaryRef Function(
              CFAttributedStringRef, int, CFRange, ffi.Pointer<CFRange>)>();

  CFTypeRef CFAttributedStringGetAttributeAndLongestEffectiveRange(
    CFAttributedStringRef aStr,
    int loc,
    CFStringRef attrName,
    CFRange inRange,
    ffi.Pointer<CFRange> longestEffectiveRange,
  ) {
    return _CFAttributedStringGetAttributeAndLongestEffectiveRange(
      aStr,
      loc,
      attrName,
      inRange,
      longestEffectiveRange,
    );
  }

  late final _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr =
      _lookup<
              ffi.NativeFunction<
                  CFTypeRef Function(CFAttributedStringRef, CFIndex,
                      CFStringRef, CFRange, ffi.Pointer<CFRange>)>>(
          'CFAttributedStringGetAttributeAndLongestEffectiveRange');
  late final _CFAttributedStringGetAttributeAndLongestEffectiveRange =
      _CFAttributedStringGetAttributeAndLongestEffectiveRangePtr.asFunction<
          CFTypeRef Function(CFAttributedStringRef, int, CFStringRef, CFRange,
              ffi.Pointer<CFRange>)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutableCopy(
    CFAllocatorRef alloc,
    int maxLength,
    CFAttributedStringRef aStr,
  ) {
    return _CFAttributedStringCreateMutableCopy(
      alloc,
      maxLength,
      aStr,
    );
  }

  late final _CFAttributedStringCreateMutableCopyPtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, CFIndex,
              CFAttributedStringRef)>>('CFAttributedStringCreateMutableCopy');
  late final _CFAttributedStringCreateMutableCopy =
      _CFAttributedStringCreateMutableCopyPtr.asFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, int, CFAttributedStringRef)>();

  CFMutableAttributedStringRef CFAttributedStringCreateMutable(
    CFAllocatorRef alloc,
    int maxLength,
  ) {
    return _CFAttributedStringCreateMutable(
      alloc,
      maxLength,
    );
  }

  late final _CFAttributedStringCreateMutablePtr = _lookup<
      ffi.NativeFunction<
          CFMutableAttributedStringRef Function(
              CFAllocatorRef, CFIndex)>>('CFAttributedStringCreateMutable');
  late final _CFAttributedStringCreateMutable =
      _CFAttributedStringCreateMutablePtr.asFunction<
          CFMutableAttributedStringRef Function(CFAllocatorRef, int)>();

  void CFAttributedStringReplaceString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef replacement,
  ) {
    return _CFAttributedStringReplaceString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringReplaceString');
  late final _CFAttributedStringReplaceString =
      _CFAttributedStringReplaceStringPtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  CFMutableStringRef CFAttributedStringGetMutableString(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringGetMutableString(
      aStr,
    );
  }

  late final _CFAttributedStringGetMutableStringPtr = _lookup<
          ffi.NativeFunction<
              CFMutableStringRef Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringGetMutableString');
  late final _CFAttributedStringGetMutableString =
      _CFAttributedStringGetMutableStringPtr.asFunction<
          CFMutableStringRef Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringSetAttributes(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFDictionaryRef replacement,
    int clearOtherAttributes,
  ) {
    return _CFAttributedStringSetAttributes(
      aStr,
      range,
      replacement,
      clearOtherAttributes,
    );
  }

  late final _CFAttributedStringSetAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFDictionaryRef, Boolean)>>('CFAttributedStringSetAttributes');
  late final _CFAttributedStringSetAttributes =
      _CFAttributedStringSetAttributesPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFDictionaryRef, int)>();

  void CFAttributedStringSetAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
    CFTypeRef value,
  ) {
    return _CFAttributedStringSetAttribute(
      aStr,
      range,
      attrName,
      value,
    );
  }

  late final _CFAttributedStringSetAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange, CFStringRef,
              CFTypeRef)>>('CFAttributedStringSetAttribute');
  late final _CFAttributedStringSetAttribute =
      _CFAttributedStringSetAttributePtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFStringRef, CFTypeRef)>();

  void CFAttributedStringRemoveAttribute(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFStringRef attrName,
  ) {
    return _CFAttributedStringRemoveAttribute(
      aStr,
      range,
      attrName,
    );
  }

  late final _CFAttributedStringRemoveAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFMutableAttributedStringRef, CFRange,
              CFStringRef)>>('CFAttributedStringRemoveAttribute');
  late final _CFAttributedStringRemoveAttribute =
      _CFAttributedStringRemoveAttributePtr.asFunction<
          void Function(CFMutableAttributedStringRef, CFRange, CFStringRef)>();

  void CFAttributedStringReplaceAttributedString(
    CFMutableAttributedStringRef aStr,
    CFRange range,
    CFAttributedStringRef replacement,
  ) {
    return _CFAttributedStringReplaceAttributedString(
      aStr,
      range,
      replacement,
    );
  }

  late final _CFAttributedStringReplaceAttributedStringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(CFMutableAttributedStringRef, CFRange,
                  CFAttributedStringRef)>>(
      'CFAttributedStringReplaceAttributedString');
  late final _CFAttributedStringReplaceAttributedString =
      _CFAttributedStringReplaceAttributedStringPtr.asFunction<
          void Function(
              CFMutableAttributedStringRef, CFRange, CFAttributedStringRef)>();

  void CFAttributedStringBeginEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringBeginEditing(
      aStr,
    );
  }

  late final _CFAttributedStringBeginEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringBeginEditing');
  late final _CFAttributedStringBeginEditing =
      _CFAttributedStringBeginEditingPtr.asFunction<
          void Function(CFMutableAttributedStringRef)>();

  void CFAttributedStringEndEditing(
    CFMutableAttributedStringRef aStr,
  ) {
    return _CFAttributedStringEndEditing(
      aStr,
    );
  }

  late final _CFAttributedStringEndEditingPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(CFMutableAttributedStringRef)>>(
      'CFAttributedStringEndEditing');
  late final _CFAttributedStringEndEditing = _CFAttributedStringEndEditingPtr
      .asFunction<void Function(CFMutableAttributedStringRef)>();

  int CFURLEnumeratorGetTypeID() {
    return _CFURLEnumeratorGetTypeID();
  }

  late final _CFURLEnumeratorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFURLEnumeratorGetTypeID');
  late final _CFURLEnumeratorGetTypeID =
      _CFURLEnumeratorGetTypeIDPtr.asFunction<int Function()>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForDirectoryURL(
    CFAllocatorRef alloc,
    CFURLRef directoryURL,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForDirectoryURL(
      alloc,
      directoryURL,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForDirectoryURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef,
              CFURLRef,
              CFURLEnumeratorOptions,
              CFArrayRef)>>('CFURLEnumeratorCreateForDirectoryURL');
  late final _CFURLEnumeratorCreateForDirectoryURL =
      _CFURLEnumeratorCreateForDirectoryURLPtr.asFunction<
          CFURLEnumeratorRef Function(
              CFAllocatorRef, CFURLRef, int, CFArrayRef)>();

  CFURLEnumeratorRef CFURLEnumeratorCreateForMountedVolumes(
    CFAllocatorRef alloc,
    int option,
    CFArrayRef propertyKeys,
  ) {
    return _CFURLEnumeratorCreateForMountedVolumes(
      alloc,
      option,
      propertyKeys,
    );
  }

  late final _CFURLEnumeratorCreateForMountedVolumesPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, CFURLEnumeratorOptions,
              CFArrayRef)>>('CFURLEnumeratorCreateForMountedVolumes');
  late final _CFURLEnumeratorCreateForMountedVolumes =
      _CFURLEnumeratorCreateForMountedVolumesPtr.asFunction<
          CFURLEnumeratorRef Function(CFAllocatorRef, int, CFArrayRef)>();

  int CFURLEnumeratorGetNextURL(
    CFURLEnumeratorRef enumerator,
    ffi.Pointer<CFURLRef> url,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _CFURLEnumeratorGetNextURL(
      enumerator,
      url,
      error,
    );
  }

  late final _CFURLEnumeratorGetNextURLPtr = _lookup<
      ffi.NativeFunction<
          CFURLEnumeratorResult Function(
              CFURLEnumeratorRef,
              ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>>('CFURLEnumeratorGetNextURL');
  late final _CFURLEnumeratorGetNextURL =
      _CFURLEnumeratorGetNextURLPtr.asFunction<
          int Function(CFURLEnumeratorRef, ffi.Pointer<CFURLRef>,
              ffi.Pointer<CFErrorRef>)>();

  void CFURLEnumeratorSkipDescendents(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorSkipDescendents(
      enumerator,
    );
  }

  late final _CFURLEnumeratorSkipDescendentsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorSkipDescendents');
  late final _CFURLEnumeratorSkipDescendents =
      _CFURLEnumeratorSkipDescendentsPtr.asFunction<
          void Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetDescendentLevel(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetDescendentLevel(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetDescendentLevelPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetDescendentLevel');
  late final _CFURLEnumeratorGetDescendentLevel =
      _CFURLEnumeratorGetDescendentLevelPtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  int CFURLEnumeratorGetSourceDidChange(
    CFURLEnumeratorRef enumerator,
  ) {
    return _CFURLEnumeratorGetSourceDidChange(
      enumerator,
    );
  }

  late final _CFURLEnumeratorGetSourceDidChangePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFURLEnumeratorRef)>>(
          'CFURLEnumeratorGetSourceDidChange');
  late final _CFURLEnumeratorGetSourceDidChange =
      _CFURLEnumeratorGetSourceDidChangePtr.asFunction<
          int Function(CFURLEnumeratorRef)>();

  acl_t acl_dup(
    acl_t acl,
  ) {
    return _acl_dup(
      acl,
    );
  }

  late final _acl_dupPtr =
      _lookup<ffi.NativeFunction<acl_t Function(acl_t)>>('acl_dup');
  late final _acl_dup = _acl_dupPtr.asFunction<acl_t Function(acl_t)>();

  int acl_free(
    ffi.Pointer<ffi.Void> obj_p,
  ) {
    return _acl_free(
      obj_p,
    );
  }

  late final _acl_freePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'acl_free');
  late final _acl_free =
      _acl_freePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_init(
    int count,
  ) {
    return _acl_init(
      count,
    );
  }

  late final _acl_initPtr =
      _lookup<ffi.NativeFunction<acl_t Function(pkg_ffi.Int)>>('acl_init');
  late final _acl_init = _acl_initPtr.asFunction<acl_t Function(int)>();

  int acl_copy_entry(
    acl_entry_t dest_d,
    acl_entry_t src_d,
  ) {
    return _acl_copy_entry(
      dest_d,
      src_d,
    );
  }

  late final _acl_copy_entryPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_entry_t, acl_entry_t)>>(
      'acl_copy_entry');
  late final _acl_copy_entry =
      _acl_copy_entryPtr.asFunction<int Function(acl_entry_t, acl_entry_t)>();

  int acl_create_entry(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_create_entry(
      acl_p,
      entry_p,
    );
  }

  late final _acl_create_entryPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<acl_t>,
              ffi.Pointer<acl_entry_t>)>>('acl_create_entry');
  late final _acl_create_entry = _acl_create_entryPtr
      .asFunction<int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>)>();

  int acl_create_entry_np(
    ffi.Pointer<acl_t> acl_p,
    ffi.Pointer<acl_entry_t> entry_p,
    int entry_index,
  ) {
    return _acl_create_entry_np(
      acl_p,
      entry_p,
      entry_index,
    );
  }

  late final _acl_create_entry_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>,
              pkg_ffi.Int)>>('acl_create_entry_np');
  late final _acl_create_entry_np = _acl_create_entry_npPtr.asFunction<
      int Function(ffi.Pointer<acl_t>, ffi.Pointer<acl_entry_t>, int)>();

  int acl_delete_entry(
    acl_t acl,
    acl_entry_t entry_d,
  ) {
    return _acl_delete_entry(
      acl,
      entry_d,
    );
  }

  late final _acl_delete_entryPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(acl_t, acl_entry_t)>>(
          'acl_delete_entry');
  late final _acl_delete_entry =
      _acl_delete_entryPtr.asFunction<int Function(acl_t, acl_entry_t)>();

  int acl_get_entry(
    acl_t acl,
    int entry_id,
    ffi.Pointer<acl_entry_t> entry_p,
  ) {
    return _acl_get_entry(
      acl,
      entry_id,
      entry_p,
    );
  }

  late final _acl_get_entryPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              acl_t, pkg_ffi.Int, ffi.Pointer<acl_entry_t>)>>('acl_get_entry');
  late final _acl_get_entry = _acl_get_entryPtr
      .asFunction<int Function(acl_t, int, ffi.Pointer<acl_entry_t>)>();

  int acl_valid(
    acl_t acl,
  ) {
    return _acl_valid(
      acl,
    );
  }

  late final _acl_validPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(acl_t)>>('acl_valid');
  late final _acl_valid = _acl_validPtr.asFunction<int Function(acl_t)>();

  int acl_valid_fd_np(
    int fd,
    int type,
    acl_t acl,
  ) {
    return _acl_valid_fd_np(
      fd,
      type,
      acl,
    );
  }

  late final _acl_valid_fd_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, ffi.Int32, acl_t)>>('acl_valid_fd_np');
  late final _acl_valid_fd_np =
      _acl_valid_fd_npPtr.asFunction<int Function(int, int, acl_t)>();

  int acl_valid_file_np(
    ffi.Pointer<pkg_ffi.Char> path,
    int type,
    acl_t acl,
  ) {
    return _acl_valid_file_np(
      path,
      type,
      acl,
    );
  }

  late final _acl_valid_file_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Int32,
              acl_t)>>('acl_valid_file_np');
  late final _acl_valid_file_np = _acl_valid_file_npPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, acl_t)>();

  int acl_valid_link_np(
    ffi.Pointer<pkg_ffi.Char> path,
    int type,
    acl_t acl,
  ) {
    return _acl_valid_link_np(
      path,
      type,
      acl,
    );
  }

  late final _acl_valid_link_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>, ffi.Int32,
              acl_t)>>('acl_valid_link_np');
  late final _acl_valid_link_np = _acl_valid_link_npPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, acl_t)>();

  int acl_add_perm(
    acl_permset_t permset_d,
    int perm,
  ) {
    return _acl_add_perm(
      permset_d,
      perm,
    );
  }

  late final _acl_add_permPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_permset_t, ffi.Int32)>>(
      'acl_add_perm');
  late final _acl_add_perm =
      _acl_add_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_calc_mask(
    ffi.Pointer<acl_t> acl_p,
  ) {
    return _acl_calc_mask(
      acl_p,
    );
  }

  late final _acl_calc_maskPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<acl_t>)>>(
          'acl_calc_mask');
  late final _acl_calc_mask =
      _acl_calc_maskPtr.asFunction<int Function(ffi.Pointer<acl_t>)>();

  int acl_clear_perms(
    acl_permset_t permset_d,
  ) {
    return _acl_clear_perms(
      permset_d,
    );
  }

  late final _acl_clear_permsPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(acl_permset_t)>>(
          'acl_clear_perms');
  late final _acl_clear_perms =
      _acl_clear_permsPtr.asFunction<int Function(acl_permset_t)>();

  int acl_delete_perm(
    acl_permset_t permset_d,
    int perm,
  ) {
    return _acl_delete_perm(
      permset_d,
      perm,
    );
  }

  late final _acl_delete_permPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_permset_t, ffi.Int32)>>(
      'acl_delete_perm');
  late final _acl_delete_perm =
      _acl_delete_permPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_perm_np(
    acl_permset_t permset_d,
    int perm,
  ) {
    return _acl_get_perm_np(
      permset_d,
      perm,
    );
  }

  late final _acl_get_perm_npPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_permset_t, ffi.Int32)>>(
      'acl_get_perm_np');
  late final _acl_get_perm_np =
      _acl_get_perm_npPtr.asFunction<int Function(acl_permset_t, int)>();

  int acl_get_permset(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_t> permset_p,
  ) {
    return _acl_get_permset(
      entry_d,
      permset_p,
    );
  }

  late final _acl_get_permsetPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              acl_entry_t, ffi.Pointer<acl_permset_t>)>>('acl_get_permset');
  late final _acl_get_permset = _acl_get_permsetPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_t>)>();

  int acl_set_permset(
    acl_entry_t entry_d,
    acl_permset_t permset_d,
  ) {
    return _acl_set_permset(
      entry_d,
      permset_d,
    );
  }

  late final _acl_set_permsetPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_entry_t, acl_permset_t)>>(
      'acl_set_permset');
  late final _acl_set_permset = _acl_set_permsetPtr
      .asFunction<int Function(acl_entry_t, acl_permset_t)>();

  int acl_maximal_permset_mask_np(
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_maximal_permset_mask_np(
      mask_p,
    );
  }

  late final _acl_maximal_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<acl_permset_mask_t>)>>('acl_maximal_permset_mask_np');
  late final _acl_maximal_permset_mask_np = _acl_maximal_permset_mask_npPtr
      .asFunction<int Function(ffi.Pointer<acl_permset_mask_t>)>();

  int acl_get_permset_mask_np(
    acl_entry_t entry_d,
    ffi.Pointer<acl_permset_mask_t> mask_p,
  ) {
    return _acl_get_permset_mask_np(
      entry_d,
      mask_p,
    );
  }

  late final _acl_get_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(acl_entry_t,
              ffi.Pointer<acl_permset_mask_t>)>>('acl_get_permset_mask_np');
  late final _acl_get_permset_mask_np = _acl_get_permset_mask_npPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<acl_permset_mask_t>)>();

  int acl_set_permset_mask_np(
    acl_entry_t entry_d,
    int mask,
  ) {
    return _acl_set_permset_mask_np(
      entry_d,
      mask,
    );
  }

  late final _acl_set_permset_mask_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              acl_entry_t, acl_permset_mask_t)>>('acl_set_permset_mask_np');
  late final _acl_set_permset_mask_np =
      _acl_set_permset_mask_npPtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_add_flag_np(
    acl_flagset_t flagset_d,
    int flag,
  ) {
    return _acl_add_flag_np(
      flagset_d,
      flag,
    );
  }

  late final _acl_add_flag_npPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_flagset_t, ffi.Int32)>>(
      'acl_add_flag_np');
  late final _acl_add_flag_np =
      _acl_add_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_clear_flags_np(
    acl_flagset_t flagset_d,
  ) {
    return _acl_clear_flags_np(
      flagset_d,
    );
  }

  late final _acl_clear_flags_npPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(acl_flagset_t)>>(
          'acl_clear_flags_np');
  late final _acl_clear_flags_np =
      _acl_clear_flags_npPtr.asFunction<int Function(acl_flagset_t)>();

  int acl_delete_flag_np(
    acl_flagset_t flagset_d,
    int flag,
  ) {
    return _acl_delete_flag_np(
      flagset_d,
      flag,
    );
  }

  late final _acl_delete_flag_npPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_flagset_t, ffi.Int32)>>(
      'acl_delete_flag_np');
  late final _acl_delete_flag_np =
      _acl_delete_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flag_np(
    acl_flagset_t flagset_d,
    int flag,
  ) {
    return _acl_get_flag_np(
      flagset_d,
      flag,
    );
  }

  late final _acl_get_flag_npPtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(acl_flagset_t, ffi.Int32)>>(
      'acl_get_flag_np');
  late final _acl_get_flag_np =
      _acl_get_flag_npPtr.asFunction<int Function(acl_flagset_t, int)>();

  int acl_get_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    ffi.Pointer<acl_flagset_t> flagset_p,
  ) {
    return _acl_get_flagset_np(
      obj_p,
      flagset_p,
    );
  }

  late final _acl_get_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<acl_flagset_t>)>>('acl_get_flagset_np');
  late final _acl_get_flagset_np = _acl_get_flagset_npPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<acl_flagset_t>)>();

  int acl_set_flagset_np(
    ffi.Pointer<ffi.Void> obj_p,
    acl_flagset_t flagset_d,
  ) {
    return _acl_set_flagset_np(
      obj_p,
      flagset_d,
    );
  }

  late final _acl_set_flagset_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<ffi.Void>, acl_flagset_t)>>('acl_set_flagset_np');
  late final _acl_set_flagset_np = _acl_set_flagset_npPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_flagset_t)>();

  ffi.Pointer<ffi.Void> acl_get_qualifier(
    acl_entry_t entry_d,
  ) {
    return _acl_get_qualifier(
      entry_d,
    );
  }

  late final _acl_get_qualifierPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>>(
          'acl_get_qualifier');
  late final _acl_get_qualifier = _acl_get_qualifierPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(acl_entry_t)>();

  int acl_get_tag_type(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.Int32> tag_type_p,
  ) {
    return _acl_get_tag_type(
      entry_d,
      tag_type_p,
    );
  }

  late final _acl_get_tag_typePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.Int32>)>>('acl_get_tag_type');
  late final _acl_get_tag_type = _acl_get_tag_typePtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.Int32>)>();

  int acl_set_qualifier(
    acl_entry_t entry_d,
    ffi.Pointer<ffi.Void> tag_qualifier_p,
  ) {
    return _acl_set_qualifier(
      entry_d,
      tag_qualifier_p,
    );
  }

  late final _acl_set_qualifierPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              acl_entry_t, ffi.Pointer<ffi.Void>)>>('acl_set_qualifier');
  late final _acl_set_qualifier = _acl_set_qualifierPtr
      .asFunction<int Function(acl_entry_t, ffi.Pointer<ffi.Void>)>();

  int acl_set_tag_type(
    acl_entry_t entry_d,
    int tag_type,
  ) {
    return _acl_set_tag_type(
      entry_d,
      tag_type,
    );
  }

  late final _acl_set_tag_typePtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(acl_entry_t, ffi.Int32)>>(
          'acl_set_tag_type');
  late final _acl_set_tag_type =
      _acl_set_tag_typePtr.asFunction<int Function(acl_entry_t, int)>();

  int acl_delete_def_file(
    ffi.Pointer<pkg_ffi.Char> path_p,
  ) {
    return _acl_delete_def_file(
      path_p,
    );
  }

  late final _acl_delete_def_filePtr = _lookup<
          ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<pkg_ffi.Char>)>>(
      'acl_delete_def_file');
  late final _acl_delete_def_file = _acl_delete_def_filePtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>)>();

  acl_t acl_get_fd(
    int fd,
  ) {
    return _acl_get_fd(
      fd,
    );
  }

  late final _acl_get_fdPtr =
      _lookup<ffi.NativeFunction<acl_t Function(pkg_ffi.Int)>>('acl_get_fd');
  late final _acl_get_fd = _acl_get_fdPtr.asFunction<acl_t Function(int)>();

  acl_t acl_get_fd_np(
    int fd,
    int type,
  ) {
    return _acl_get_fd_np(
      fd,
      type,
    );
  }

  late final _acl_get_fd_npPtr =
      _lookup<ffi.NativeFunction<acl_t Function(pkg_ffi.Int, ffi.Int32)>>(
          'acl_get_fd_np');
  late final _acl_get_fd_np =
      _acl_get_fd_npPtr.asFunction<acl_t Function(int, int)>();

  acl_t acl_get_file(
    ffi.Pointer<pkg_ffi.Char> path_p,
    int type,
  ) {
    return _acl_get_file(
      path_p,
      type,
    );
  }

  late final _acl_get_filePtr = _lookup<
      ffi.NativeFunction<
          acl_t Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Int32)>>('acl_get_file');
  late final _acl_get_file = _acl_get_filePtr
      .asFunction<acl_t Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  acl_t acl_get_link_np(
    ffi.Pointer<pkg_ffi.Char> path_p,
    int type,
  ) {
    return _acl_get_link_np(
      path_p,
      type,
    );
  }

  late final _acl_get_link_npPtr = _lookup<
      ffi.NativeFunction<
          acl_t Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Int32)>>('acl_get_link_np');
  late final _acl_get_link_np = _acl_get_link_npPtr
      .asFunction<acl_t Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  int acl_set_fd(
    int fd,
    acl_t acl,
  ) {
    return _acl_set_fd(
      fd,
      acl,
    );
  }

  late final _acl_set_fdPtr =
      _lookup<ffi.NativeFunction<pkg_ffi.Int Function(pkg_ffi.Int, acl_t)>>(
          'acl_set_fd');
  late final _acl_set_fd =
      _acl_set_fdPtr.asFunction<int Function(int, acl_t)>();

  int acl_set_fd_np(
    int fd,
    acl_t acl,
    int acl_type,
  ) {
    return _acl_set_fd_np(
      fd,
      acl,
      acl_type,
    );
  }

  late final _acl_set_fd_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              pkg_ffi.Int, acl_t, ffi.Int32)>>('acl_set_fd_np');
  late final _acl_set_fd_np =
      _acl_set_fd_npPtr.asFunction<int Function(int, acl_t, int)>();

  int acl_set_file(
    ffi.Pointer<pkg_ffi.Char> path_p,
    int type,
    acl_t acl,
  ) {
    return _acl_set_file(
      path_p,
      type,
      acl,
    );
  }

  late final _acl_set_filePtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Int32, acl_t)>>('acl_set_file');
  late final _acl_set_file = _acl_set_filePtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, acl_t)>();

  int acl_set_link_np(
    ffi.Pointer<pkg_ffi.Char> path_p,
    int type,
    acl_t acl,
  ) {
    return _acl_set_link_np(
      path_p,
      type,
      acl,
    );
  }

  late final _acl_set_link_npPtr = _lookup<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              ffi.Pointer<pkg_ffi.Char>, ffi.Int32, acl_t)>>('acl_set_link_np');
  late final _acl_set_link_np = _acl_set_link_npPtr
      .asFunction<int Function(ffi.Pointer<pkg_ffi.Char>, int, acl_t)>();

  int acl_copy_ext(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_extPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext');
  late final _acl_copy_ext = _acl_copy_extPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  int acl_copy_ext_native(
    ffi.Pointer<ffi.Void> buf_p,
    acl_t acl,
    int size,
  ) {
    return _acl_copy_ext_native(
      buf_p,
      acl,
      size,
    );
  }

  late final _acl_copy_ext_nativePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<ffi.Void>, acl_t, ssize_t)>>('acl_copy_ext_native');
  late final _acl_copy_ext_native = _acl_copy_ext_nativePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, acl_t, int)>();

  acl_t acl_copy_int(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int(
      buf_p,
    );
  }

  late final _acl_copy_intPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int');
  late final _acl_copy_int =
      _acl_copy_intPtr.asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_copy_int_native(
    ffi.Pointer<ffi.Void> buf_p,
  ) {
    return _acl_copy_int_native(
      buf_p,
    );
  }

  late final _acl_copy_int_nativePtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<ffi.Void>)>>(
          'acl_copy_int_native');
  late final _acl_copy_int_native = _acl_copy_int_nativePtr
      .asFunction<acl_t Function(ffi.Pointer<ffi.Void>)>();

  acl_t acl_from_text(
    ffi.Pointer<pkg_ffi.Char> buf_p,
  ) {
    return _acl_from_text(
      buf_p,
    );
  }

  late final _acl_from_textPtr =
      _lookup<ffi.NativeFunction<acl_t Function(ffi.Pointer<pkg_ffi.Char>)>>(
          'acl_from_text');
  late final _acl_from_text =
      _acl_from_textPtr.asFunction<acl_t Function(ffi.Pointer<pkg_ffi.Char>)>();

  int acl_size(
    acl_t acl,
  ) {
    return _acl_size(
      acl,
    );
  }

  late final _acl_sizePtr =
      _lookup<ffi.NativeFunction<ssize_t Function(acl_t)>>('acl_size');
  late final _acl_size = _acl_sizePtr.asFunction<int Function(acl_t)>();

  ffi.Pointer<pkg_ffi.Char> acl_to_text(
    acl_t acl,
    ffi.Pointer<ssize_t> len_p,
  ) {
    return _acl_to_text(
      acl,
      len_p,
    );
  }

  late final _acl_to_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<pkg_ffi.Char> Function(
              acl_t, ffi.Pointer<ssize_t>)>>('acl_to_text');
  late final _acl_to_text = _acl_to_textPtr.asFunction<
      ffi.Pointer<pkg_ffi.Char> Function(acl_t, ffi.Pointer<ssize_t>)>();

  int CFFileSecurityGetTypeID() {
    return _CFFileSecurityGetTypeID();
  }

  late final _CFFileSecurityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileSecurityGetTypeID');
  late final _CFFileSecurityGetTypeID =
      _CFFileSecurityGetTypeIDPtr.asFunction<int Function()>();

  CFFileSecurityRef CFFileSecurityCreate(
    CFAllocatorRef allocator,
  ) {
    return _CFFileSecurityCreate(
      allocator,
    );
  }

  late final _CFFileSecurityCreatePtr =
      _lookup<ffi.NativeFunction<CFFileSecurityRef Function(CFAllocatorRef)>>(
          'CFFileSecurityCreate');
  late final _CFFileSecurityCreate = _CFFileSecurityCreatePtr.asFunction<
      CFFileSecurityRef Function(CFAllocatorRef)>();

  CFFileSecurityRef CFFileSecurityCreateCopy(
    CFAllocatorRef allocator,
    CFFileSecurityRef fileSec,
  ) {
    return _CFFileSecurityCreateCopy(
      allocator,
      fileSec,
    );
  }

  late final _CFFileSecurityCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFFileSecurityRef Function(
              CFAllocatorRef, CFFileSecurityRef)>>('CFFileSecurityCreateCopy');
  late final _CFFileSecurityCreateCopy =
      _CFFileSecurityCreateCopyPtr.asFunction<
          CFFileSecurityRef Function(CFAllocatorRef, CFFileSecurityRef)>();

  int CFFileSecurityCopyOwnerUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> ownerUUID,
  ) {
    return _CFFileSecurityCopyOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecurityCopyOwnerUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyOwnerUUID');
  late final _CFFileSecurityCopyOwnerUUID = _CFFileSecurityCopyOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetOwnerUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef ownerUUID,
  ) {
    return _CFFileSecuritySetOwnerUUID(
      fileSec,
      ownerUUID,
    );
  }

  late final _CFFileSecuritySetOwnerUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetOwnerUUID');
  late final _CFFileSecuritySetOwnerUUID = _CFFileSecuritySetOwnerUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyGroupUUID(
    CFFileSecurityRef fileSec,
    ffi.Pointer<CFUUIDRef> groupUUID,
  ) {
    return _CFFileSecurityCopyGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecurityCopyGroupUUIDPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<CFUUIDRef>)>>('CFFileSecurityCopyGroupUUID');
  late final _CFFileSecurityCopyGroupUUID = _CFFileSecurityCopyGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, ffi.Pointer<CFUUIDRef>)>();

  int CFFileSecuritySetGroupUUID(
    CFFileSecurityRef fileSec,
    CFUUIDRef groupUUID,
  ) {
    return _CFFileSecuritySetGroupUUID(
      fileSec,
      groupUUID,
    );
  }

  late final _CFFileSecuritySetGroupUUIDPtr = _lookup<
          ffi.NativeFunction<Boolean Function(CFFileSecurityRef, CFUUIDRef)>>(
      'CFFileSecuritySetGroupUUID');
  late final _CFFileSecuritySetGroupUUID = _CFFileSecuritySetGroupUUIDPtr
      .asFunction<int Function(CFFileSecurityRef, CFUUIDRef)>();

  int CFFileSecurityCopyAccessControlList(
    CFFileSecurityRef fileSec,
    ffi.Pointer<acl_t> accessControlList,
  ) {
    return _CFFileSecurityCopyAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecurityCopyAccessControlListPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<acl_t>)>>('CFFileSecurityCopyAccessControlList');
  late final _CFFileSecurityCopyAccessControlList =
      _CFFileSecurityCopyAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, ffi.Pointer<acl_t>)>();

  int CFFileSecuritySetAccessControlList(
    CFFileSecurityRef fileSec,
    acl_t accessControlList,
  ) {
    return _CFFileSecuritySetAccessControlList(
      fileSec,
      accessControlList,
    );
  }

  late final _CFFileSecuritySetAccessControlListPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, acl_t)>>(
          'CFFileSecuritySetAccessControlList');
  late final _CFFileSecuritySetAccessControlList =
      _CFFileSecuritySetAccessControlListPtr.asFunction<
          int Function(CFFileSecurityRef, acl_t)>();

  int CFFileSecurityGetOwner(
    CFFileSecurityRef fileSec,
    ffi.Pointer<uid_t> owner,
  ) {
    return _CFFileSecurityGetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecurityGetOwnerPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<uid_t>)>>('CFFileSecurityGetOwner');
  late final _CFFileSecurityGetOwner = _CFFileSecurityGetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<uid_t>)>();

  int CFFileSecuritySetOwner(
    CFFileSecurityRef fileSec,
    int owner,
  ) {
    return _CFFileSecuritySetOwner(
      fileSec,
      owner,
    );
  }

  late final _CFFileSecuritySetOwnerPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, uid_t)>>(
          'CFFileSecuritySetOwner');
  late final _CFFileSecuritySetOwner = _CFFileSecuritySetOwnerPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetGroup(
    CFFileSecurityRef fileSec,
    ffi.Pointer<gid_t> group,
  ) {
    return _CFFileSecurityGetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecurityGetGroupPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<gid_t>)>>('CFFileSecurityGetGroup');
  late final _CFFileSecurityGetGroup = _CFFileSecurityGetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<gid_t>)>();

  int CFFileSecuritySetGroup(
    CFFileSecurityRef fileSec,
    int group,
  ) {
    return _CFFileSecuritySetGroup(
      fileSec,
      group,
    );
  }

  late final _CFFileSecuritySetGroupPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, gid_t)>>(
          'CFFileSecuritySetGroup');
  late final _CFFileSecuritySetGroup = _CFFileSecuritySetGroupPtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityGetMode(
    CFFileSecurityRef fileSec,
    ffi.Pointer<mode_t> mode,
  ) {
    return _CFFileSecurityGetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecurityGetModePtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              ffi.Pointer<mode_t>)>>('CFFileSecurityGetMode');
  late final _CFFileSecurityGetMode = _CFFileSecurityGetModePtr.asFunction<
      int Function(CFFileSecurityRef, ffi.Pointer<mode_t>)>();

  int CFFileSecuritySetMode(
    CFFileSecurityRef fileSec,
    int mode,
  ) {
    return _CFFileSecuritySetMode(
      fileSec,
      mode,
    );
  }

  late final _CFFileSecuritySetModePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileSecurityRef, mode_t)>>(
          'CFFileSecuritySetMode');
  late final _CFFileSecuritySetMode = _CFFileSecuritySetModePtr.asFunction<
      int Function(CFFileSecurityRef, int)>();

  int CFFileSecurityClearProperties(
    CFFileSecurityRef fileSec,
    int clearPropertyMask,
  ) {
    return _CFFileSecurityClearProperties(
      fileSec,
      clearPropertyMask,
    );
  }

  late final _CFFileSecurityClearPropertiesPtr = _lookup<
      ffi.NativeFunction<
          Boolean Function(CFFileSecurityRef,
              CFFileSecurityClearOptions)>>('CFFileSecurityClearProperties');
  late final _CFFileSecurityClearProperties = _CFFileSecurityClearPropertiesPtr
      .asFunction<int Function(CFFileSecurityRef, int)>();

  CFStringRef CFStringTokenizerCopyBestStringLanguage(
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerCopyBestStringLanguage(
      string,
      range,
    );
  }

  late final _CFStringTokenizerCopyBestStringLanguagePtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFStringRef, CFRange)>>(
          'CFStringTokenizerCopyBestStringLanguage');
  late final _CFStringTokenizerCopyBestStringLanguage =
      _CFStringTokenizerCopyBestStringLanguagePtr.asFunction<
          CFStringRef Function(CFStringRef, CFRange)>();

  int CFStringTokenizerGetTypeID() {
    return _CFStringTokenizerGetTypeID();
  }

  late final _CFStringTokenizerGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFStringTokenizerGetTypeID');
  late final _CFStringTokenizerGetTypeID =
      _CFStringTokenizerGetTypeIDPtr.asFunction<int Function()>();

  CFStringTokenizerRef CFStringTokenizerCreate(
    CFAllocatorRef alloc,
    CFStringRef string,
    CFRange range,
    int options,
    CFLocaleRef locale,
  ) {
    return _CFStringTokenizerCreate(
      alloc,
      string,
      range,
      options,
      locale,
    );
  }

  late final _CFStringTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerRef Function(CFAllocatorRef, CFStringRef, CFRange,
              CFOptionFlags, CFLocaleRef)>>('CFStringTokenizerCreate');
  late final _CFStringTokenizerCreate = _CFStringTokenizerCreatePtr.asFunction<
      CFStringTokenizerRef Function(
          CFAllocatorRef, CFStringRef, CFRange, int, CFLocaleRef)>();

  void CFStringTokenizerSetString(
    CFStringTokenizerRef tokenizer,
    CFStringRef string,
    CFRange range,
  ) {
    return _CFStringTokenizerSetString(
      tokenizer,
      string,
      range,
    );
  }

  late final _CFStringTokenizerSetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFStringTokenizerRef, CFStringRef,
              CFRange)>>('CFStringTokenizerSetString');
  late final _CFStringTokenizerSetString = _CFStringTokenizerSetStringPtr
      .asFunction<void Function(CFStringTokenizerRef, CFStringRef, CFRange)>();

  int CFStringTokenizerGoToTokenAtIndex(
    CFStringTokenizerRef tokenizer,
    int index,
  ) {
    return _CFStringTokenizerGoToTokenAtIndex(
      tokenizer,
      index,
    );
  }

  late final _CFStringTokenizerGoToTokenAtIndexPtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerTokenType Function(CFStringTokenizerRef,
              CFIndex)>>('CFStringTokenizerGoToTokenAtIndex');
  late final _CFStringTokenizerGoToTokenAtIndex =
      _CFStringTokenizerGoToTokenAtIndexPtr.asFunction<
          int Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerAdvanceToNextToken(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerAdvanceToNextToken(
      tokenizer,
    );
  }

  late final _CFStringTokenizerAdvanceToNextTokenPtr = _lookup<
      ffi.NativeFunction<
          CFStringTokenizerTokenType Function(
              CFStringTokenizerRef)>>('CFStringTokenizerAdvanceToNextToken');
  late final _CFStringTokenizerAdvanceToNextToken =
      _CFStringTokenizerAdvanceToNextTokenPtr.asFunction<
          int Function(CFStringTokenizerRef)>();

  CFRange CFStringTokenizerGetCurrentTokenRange(
    CFStringTokenizerRef tokenizer,
  ) {
    return _CFStringTokenizerGetCurrentTokenRange(
      tokenizer,
    );
  }

  late final _CFStringTokenizerGetCurrentTokenRangePtr =
      _lookup<ffi.NativeFunction<CFRange Function(CFStringTokenizerRef)>>(
          'CFStringTokenizerGetCurrentTokenRange');
  late final _CFStringTokenizerGetCurrentTokenRange =
      _CFStringTokenizerGetCurrentTokenRangePtr.asFunction<
          CFRange Function(CFStringTokenizerRef)>();

  CFTypeRef CFStringTokenizerCopyCurrentTokenAttribute(
    CFStringTokenizerRef tokenizer,
    int attribute,
  ) {
    return _CFStringTokenizerCopyCurrentTokenAttribute(
      tokenizer,
      attribute,
    );
  }

  late final _CFStringTokenizerCopyCurrentTokenAttributePtr = _lookup<
      ffi.NativeFunction<
          CFTypeRef Function(CFStringTokenizerRef,
              CFOptionFlags)>>('CFStringTokenizerCopyCurrentTokenAttribute');
  late final _CFStringTokenizerCopyCurrentTokenAttribute =
      _CFStringTokenizerCopyCurrentTokenAttributePtr.asFunction<
          CFTypeRef Function(CFStringTokenizerRef, int)>();

  int CFStringTokenizerGetCurrentSubTokens(
    CFStringTokenizerRef tokenizer,
    ffi.Pointer<CFRange> ranges,
    int maxRangeLength,
    CFMutableArrayRef derivedSubTokens,
  ) {
    return _CFStringTokenizerGetCurrentSubTokens(
      tokenizer,
      ranges,
      maxRangeLength,
      derivedSubTokens,
    );
  }

  late final _CFStringTokenizerGetCurrentSubTokensPtr = _lookup<
      ffi.NativeFunction<
          CFIndex Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, CFIndex,
              CFMutableArrayRef)>>('CFStringTokenizerGetCurrentSubTokens');
  late final _CFStringTokenizerGetCurrentSubTokens =
      _CFStringTokenizerGetCurrentSubTokensPtr.asFunction<
          int Function(CFStringTokenizerRef, ffi.Pointer<CFRange>, int,
              CFMutableArrayRef)>();

  int CFFileDescriptorGetTypeID() {
    return _CFFileDescriptorGetTypeID();
  }

  late final _CFFileDescriptorGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFFileDescriptorGetTypeID');
  late final _CFFileDescriptorGetTypeID =
      _CFFileDescriptorGetTypeIDPtr.asFunction<int Function()>();

  CFFileDescriptorRef CFFileDescriptorCreate(
    CFAllocatorRef allocator,
    int fd,
    int closeOnInvalidate,
    CFFileDescriptorCallBack callout,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorCreate(
      allocator,
      fd,
      closeOnInvalidate,
      callout,
      context,
    );
  }

  late final _CFFileDescriptorCreatePtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorRef Function(
              CFAllocatorRef,
              CFFileDescriptorNativeDescriptor,
              Boolean,
              CFFileDescriptorCallBack,
              ffi.Pointer<CFFileDescriptorContext>)>>('CFFileDescriptorCreate');
  late final _CFFileDescriptorCreate = _CFFileDescriptorCreatePtr.asFunction<
      CFFileDescriptorRef Function(CFAllocatorRef, int, int,
          CFFileDescriptorCallBack, ffi.Pointer<CFFileDescriptorContext>)>();

  int CFFileDescriptorGetNativeDescriptor(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorGetNativeDescriptor(
      f,
    );
  }

  late final _CFFileDescriptorGetNativeDescriptorPtr = _lookup<
      ffi.NativeFunction<
          CFFileDescriptorNativeDescriptor Function(
              CFFileDescriptorRef)>>('CFFileDescriptorGetNativeDescriptor');
  late final _CFFileDescriptorGetNativeDescriptor =
      _CFFileDescriptorGetNativeDescriptorPtr.asFunction<
          int Function(CFFileDescriptorRef)>();

  void CFFileDescriptorGetContext(
    CFFileDescriptorRef f,
    ffi.Pointer<CFFileDescriptorContext> context,
  ) {
    return _CFFileDescriptorGetContext(
      f,
      context,
    );
  }

  late final _CFFileDescriptorGetContextPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>>(
      'CFFileDescriptorGetContext');
  late final _CFFileDescriptorGetContext =
      _CFFileDescriptorGetContextPtr.asFunction<
          void Function(
              CFFileDescriptorRef, ffi.Pointer<CFFileDescriptorContext>)>();

  void CFFileDescriptorEnableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorEnableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorEnableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorEnableCallBacks');
  late final _CFFileDescriptorEnableCallBacks =
      _CFFileDescriptorEnableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorDisableCallBacks(
    CFFileDescriptorRef f,
    int callBackTypes,
  ) {
    return _CFFileDescriptorDisableCallBacks(
      f,
      callBackTypes,
    );
  }

  late final _CFFileDescriptorDisableCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFFileDescriptorRef,
              CFOptionFlags)>>('CFFileDescriptorDisableCallBacks');
  late final _CFFileDescriptorDisableCallBacks =
      _CFFileDescriptorDisableCallBacksPtr.asFunction<
          void Function(CFFileDescriptorRef, int)>();

  void CFFileDescriptorInvalidate(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorInvalidate(
      f,
    );
  }

  late final _CFFileDescriptorInvalidatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorInvalidate');
  late final _CFFileDescriptorInvalidate = _CFFileDescriptorInvalidatePtr
      .asFunction<void Function(CFFileDescriptorRef)>();

  int CFFileDescriptorIsValid(
    CFFileDescriptorRef f,
  ) {
    return _CFFileDescriptorIsValid(
      f,
    );
  }

  late final _CFFileDescriptorIsValidPtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFFileDescriptorRef)>>(
          'CFFileDescriptorIsValid');
  late final _CFFileDescriptorIsValid = _CFFileDescriptorIsValidPtr.asFunction<
      int Function(CFFileDescriptorRef)>();

  CFRunLoopSourceRef CFFileDescriptorCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFFileDescriptorRef f,
    int order,
  ) {
    return _CFFileDescriptorCreateRunLoopSource(
      allocator,
      f,
      order,
    );
  }

  late final _CFFileDescriptorCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFFileDescriptorRef,
              CFIndex)>>('CFFileDescriptorCreateRunLoopSource');
  late final _CFFileDescriptorCreateRunLoopSource =
      _CFFileDescriptorCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef, CFFileDescriptorRef, int)>();

  int CFUserNotificationGetTypeID() {
    return _CFUserNotificationGetTypeID();
  }

  late final _CFUserNotificationGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'CFUserNotificationGetTypeID');
  late final _CFUserNotificationGetTypeID =
      _CFUserNotificationGetTypeIDPtr.asFunction<int Function()>();

  CFUserNotificationRef CFUserNotificationCreate(
    CFAllocatorRef allocator,
    double timeout,
    int flags,
    ffi.Pointer<SInt32> error,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationCreate(
      allocator,
      timeout,
      flags,
      error,
      dictionary,
    );
  }

  late final _CFUserNotificationCreatePtr = _lookup<
      ffi.NativeFunction<
          CFUserNotificationRef Function(
              CFAllocatorRef,
              CFTimeInterval,
              CFOptionFlags,
              ffi.Pointer<SInt32>,
              CFDictionaryRef)>>('CFUserNotificationCreate');
  late final _CFUserNotificationCreate =
      _CFUserNotificationCreatePtr.asFunction<
          CFUserNotificationRef Function(CFAllocatorRef, double, int,
              ffi.Pointer<SInt32>, CFDictionaryRef)>();

  int CFUserNotificationReceiveResponse(
    CFUserNotificationRef userNotification,
    double timeout,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationReceiveResponse(
      userNotification,
      timeout,
      responseFlags,
    );
  }

  late final _CFUserNotificationReceiveResponsePtr = _lookup<
          ffi.NativeFunction<
              SInt32 Function(CFUserNotificationRef, CFTimeInterval,
                  ffi.Pointer<CFOptionFlags>)>>(
      'CFUserNotificationReceiveResponse');
  late final _CFUserNotificationReceiveResponse =
      _CFUserNotificationReceiveResponsePtr.asFunction<
          int Function(
              CFUserNotificationRef, double, ffi.Pointer<CFOptionFlags>)>();

  CFStringRef CFUserNotificationGetResponseValue(
    CFUserNotificationRef userNotification,
    CFStringRef key,
    int idx,
  ) {
    return _CFUserNotificationGetResponseValue(
      userNotification,
      key,
      idx,
    );
  }

  late final _CFUserNotificationGetResponseValuePtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef,
              CFIndex)>>('CFUserNotificationGetResponseValue');
  late final _CFUserNotificationGetResponseValue =
      _CFUserNotificationGetResponseValuePtr.asFunction<
          CFStringRef Function(CFUserNotificationRef, CFStringRef, int)>();

  CFDictionaryRef CFUserNotificationGetResponseDictionary(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationGetResponseDictionary(
      userNotification,
    );
  }

  late final _CFUserNotificationGetResponseDictionaryPtr = _lookup<
          ffi.NativeFunction<CFDictionaryRef Function(CFUserNotificationRef)>>(
      'CFUserNotificationGetResponseDictionary');
  late final _CFUserNotificationGetResponseDictionary =
      _CFUserNotificationGetResponseDictionaryPtr.asFunction<
          CFDictionaryRef Function(CFUserNotificationRef)>();

  int CFUserNotificationUpdate(
    CFUserNotificationRef userNotification,
    double timeout,
    int flags,
    CFDictionaryRef dictionary,
  ) {
    return _CFUserNotificationUpdate(
      userNotification,
      timeout,
      flags,
      dictionary,
    );
  }

  late final _CFUserNotificationUpdatePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(CFUserNotificationRef, CFTimeInterval, CFOptionFlags,
              CFDictionaryRef)>>('CFUserNotificationUpdate');
  late final _CFUserNotificationUpdate =
      _CFUserNotificationUpdatePtr.asFunction<
          int Function(CFUserNotificationRef, double, int, CFDictionaryRef)>();

  int CFUserNotificationCancel(
    CFUserNotificationRef userNotification,
  ) {
    return _CFUserNotificationCancel(
      userNotification,
    );
  }

  late final _CFUserNotificationCancelPtr =
      _lookup<ffi.NativeFunction<SInt32 Function(CFUserNotificationRef)>>(
          'CFUserNotificationCancel');
  late final _CFUserNotificationCancel = _CFUserNotificationCancelPtr
      .asFunction<int Function(CFUserNotificationRef)>();

  CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(
    CFAllocatorRef allocator,
    CFUserNotificationRef userNotification,
    CFUserNotificationCallBack callout,
    int order,
  ) {
    return _CFUserNotificationCreateRunLoopSource(
      allocator,
      userNotification,
      callout,
      order,
    );
  }

  late final _CFUserNotificationCreateRunLoopSourcePtr = _lookup<
      ffi.NativeFunction<
          CFRunLoopSourceRef Function(
              CFAllocatorRef,
              CFUserNotificationRef,
              CFUserNotificationCallBack,
              CFIndex)>>('CFUserNotificationCreateRunLoopSource');
  late final _CFUserNotificationCreateRunLoopSource =
      _CFUserNotificationCreateRunLoopSourcePtr.asFunction<
          CFRunLoopSourceRef Function(CFAllocatorRef, CFUserNotificationRef,
              CFUserNotificationCallBack, int)>();

  int CFUserNotificationDisplayNotice(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
  ) {
    return _CFUserNotificationDisplayNotice(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
    );
  }

  late final _CFUserNotificationDisplayNoticePtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef)>>('CFUserNotificationDisplayNotice');
  late final _CFUserNotificationDisplayNotice =
      _CFUserNotificationDisplayNoticePtr.asFunction<
          int Function(double, int, CFURLRef, CFURLRef, CFURLRef, CFStringRef,
              CFStringRef, CFStringRef)>();

  int CFUserNotificationDisplayAlert(
    double timeout,
    int flags,
    CFURLRef iconURL,
    CFURLRef soundURL,
    CFURLRef localizationURL,
    CFStringRef alertHeader,
    CFStringRef alertMessage,
    CFStringRef defaultButtonTitle,
    CFStringRef alternateButtonTitle,
    CFStringRef otherButtonTitle,
    ffi.Pointer<CFOptionFlags> responseFlags,
  ) {
    return _CFUserNotificationDisplayAlert(
      timeout,
      flags,
      iconURL,
      soundURL,
      localizationURL,
      alertHeader,
      alertMessage,
      defaultButtonTitle,
      alternateButtonTitle,
      otherButtonTitle,
      responseFlags,
    );
  }

  late final _CFUserNotificationDisplayAlertPtr = _lookup<
      ffi.NativeFunction<
          SInt32 Function(
              CFTimeInterval,
              CFOptionFlags,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>>('CFUserNotificationDisplayAlert');
  late final _CFUserNotificationDisplayAlert =
      _CFUserNotificationDisplayAlertPtr.asFunction<
          int Function(
              double,
              int,
              CFURLRef,
              CFURLRef,
              CFURLRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              CFStringRef,
              ffi.Pointer<CFOptionFlags>)>();

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationIconURLKey =
      _lookup<CFStringRef>('kCFUserNotificationIconURLKey');

  CFStringRef get kCFUserNotificationIconURLKey =>
      _kCFUserNotificationIconURLKey.value;

  set kCFUserNotificationIconURLKey(CFStringRef value) =>
      _kCFUserNotificationIconURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationSoundURLKey =
      _lookup<CFStringRef>('kCFUserNotificationSoundURLKey');

  CFStringRef get kCFUserNotificationSoundURLKey =>
      _kCFUserNotificationSoundURLKey.value;

  set kCFUserNotificationSoundURLKey(CFStringRef value) =>
      _kCFUserNotificationSoundURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationLocalizationURLKey =
      _lookup<CFStringRef>('kCFUserNotificationLocalizationURLKey');

  CFStringRef get kCFUserNotificationLocalizationURLKey =>
      _kCFUserNotificationLocalizationURLKey.value;

  set kCFUserNotificationLocalizationURLKey(CFStringRef value) =>
      _kCFUserNotificationLocalizationURLKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertHeaderKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertHeaderKey');

  CFStringRef get kCFUserNotificationAlertHeaderKey =>
      _kCFUserNotificationAlertHeaderKey.value;

  set kCFUserNotificationAlertHeaderKey(CFStringRef value) =>
      _kCFUserNotificationAlertHeaderKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertMessageKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertMessageKey');

  CFStringRef get kCFUserNotificationAlertMessageKey =>
      _kCFUserNotificationAlertMessageKey.value;

  set kCFUserNotificationAlertMessageKey(CFStringRef value) =>
      _kCFUserNotificationAlertMessageKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationDefaultButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationDefaultButtonTitleKey');

  CFStringRef get kCFUserNotificationDefaultButtonTitleKey =>
      _kCFUserNotificationDefaultButtonTitleKey.value;

  set kCFUserNotificationDefaultButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationDefaultButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationAlternateButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationAlternateButtonTitleKey');

  CFStringRef get kCFUserNotificationAlternateButtonTitleKey =>
      _kCFUserNotificationAlternateButtonTitleKey.value;

  set kCFUserNotificationAlternateButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationAlternateButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationOtherButtonTitleKey =
      _lookup<CFStringRef>('kCFUserNotificationOtherButtonTitleKey');

  CFStringRef get kCFUserNotificationOtherButtonTitleKey =>
      _kCFUserNotificationOtherButtonTitleKey.value;

  set kCFUserNotificationOtherButtonTitleKey(CFStringRef value) =>
      _kCFUserNotificationOtherButtonTitleKey.value = value;

  late final ffi.Pointer<CFStringRef>
      _kCFUserNotificationProgressIndicatorValueKey =
      _lookup<CFStringRef>('kCFUserNotificationProgressIndicatorValueKey');

  CFStringRef get kCFUserNotificationProgressIndicatorValueKey =>
      _kCFUserNotificationProgressIndicatorValueKey.value;

  set kCFUserNotificationProgressIndicatorValueKey(CFStringRef value) =>
      _kCFUserNotificationProgressIndicatorValueKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpTitlesKey');

  CFStringRef get kCFUserNotificationPopUpTitlesKey =>
      _kCFUserNotificationPopUpTitlesKey.value;

  set kCFUserNotificationPopUpTitlesKey(CFStringRef value) =>
      _kCFUserNotificationPopUpTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldTitlesKey');

  CFStringRef get kCFUserNotificationTextFieldTitlesKey =>
      _kCFUserNotificationTextFieldTitlesKey.value;

  set kCFUserNotificationTextFieldTitlesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationCheckBoxTitlesKey =
      _lookup<CFStringRef>('kCFUserNotificationCheckBoxTitlesKey');

  CFStringRef get kCFUserNotificationCheckBoxTitlesKey =>
      _kCFUserNotificationCheckBoxTitlesKey.value;

  set kCFUserNotificationCheckBoxTitlesKey(CFStringRef value) =>
      _kCFUserNotificationCheckBoxTitlesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationTextFieldValuesKey =
      _lookup<CFStringRef>('kCFUserNotificationTextFieldValuesKey');

  CFStringRef get kCFUserNotificationTextFieldValuesKey =>
      _kCFUserNotificationTextFieldValuesKey.value;

  set kCFUserNotificationTextFieldValuesKey(CFStringRef value) =>
      _kCFUserNotificationTextFieldValuesKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationPopUpSelectionKey =
      _lookup<CFStringRef>('kCFUserNotificationPopUpSelectionKey');

  CFStringRef get kCFUserNotificationPopUpSelectionKey =>
      _kCFUserNotificationPopUpSelectionKey.value;

  set kCFUserNotificationPopUpSelectionKey(CFStringRef value) =>
      _kCFUserNotificationPopUpSelectionKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationAlertTopMostKey =
      _lookup<CFStringRef>('kCFUserNotificationAlertTopMostKey');

  CFStringRef get kCFUserNotificationAlertTopMostKey =>
      _kCFUserNotificationAlertTopMostKey.value;

  set kCFUserNotificationAlertTopMostKey(CFStringRef value) =>
      _kCFUserNotificationAlertTopMostKey.value = value;

  late final ffi.Pointer<CFStringRef> _kCFUserNotificationKeyboardTypesKey =
      _lookup<CFStringRef>('kCFUserNotificationKeyboardTypesKey');

  CFStringRef get kCFUserNotificationKeyboardTypesKey =>
      _kCFUserNotificationKeyboardTypesKey.value;

  set kCFUserNotificationKeyboardTypesKey(CFStringRef value) =>
      _kCFUserNotificationKeyboardTypesKey.value = value;

  int CFXMLNodeGetTypeID() {
    return _CFXMLNodeGetTypeID();
  }

  late final _CFXMLNodeGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLNodeGetTypeID');
  late final _CFXMLNodeGetTypeID =
      _CFXMLNodeGetTypeIDPtr.asFunction<int Function()>();

  CFXMLNodeRef CFXMLNodeCreate(
    CFAllocatorRef alloc,
    int xmlType,
    CFStringRef dataString,
    ffi.Pointer<ffi.Void> additionalInfoPtr,
    int version,
  ) {
    return _CFXMLNodeCreate(
      alloc,
      xmlType,
      dataString,
      additionalInfoPtr,
      version,
    );
  }

  late final _CFXMLNodeCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeTypeCode, CFStringRef,
              ffi.Pointer<ffi.Void>, CFIndex)>>('CFXMLNodeCreate');
  late final _CFXMLNodeCreate = _CFXMLNodeCreatePtr.asFunction<
      CFXMLNodeRef Function(
          CFAllocatorRef, int, CFStringRef, ffi.Pointer<ffi.Void>, int)>();

  CFXMLNodeRef CFXMLNodeCreateCopy(
    CFAllocatorRef alloc,
    CFXMLNodeRef origNode,
  ) {
    return _CFXMLNodeCreateCopy(
      alloc,
      origNode,
    );
  }

  late final _CFXMLNodeCreateCopyPtr = _lookup<
      ffi.NativeFunction<
          CFXMLNodeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLNodeCreateCopy');
  late final _CFXMLNodeCreateCopy = _CFXMLNodeCreateCopyPtr.asFunction<
      CFXMLNodeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  int CFXMLNodeGetTypeCode(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetTypeCode(
      node,
    );
  }

  late final _CFXMLNodeGetTypeCodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeTypeCode Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetTypeCode');
  late final _CFXMLNodeGetTypeCode =
      _CFXMLNodeGetTypeCodePtr.asFunction<int Function(CFXMLNodeRef)>();

  CFStringRef CFXMLNodeGetString(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetString(
      node,
    );
  }

  late final _CFXMLNodeGetStringPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetString');
  late final _CFXMLNodeGetString =
      _CFXMLNodeGetStringPtr.asFunction<CFStringRef Function(CFXMLNodeRef)>();

  ffi.Pointer<ffi.Void> CFXMLNodeGetInfoPtr(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetInfoPtr(
      node,
    );
  }

  late final _CFXMLNodeGetInfoPtrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetInfoPtr');
  late final _CFXMLNodeGetInfoPtr = _CFXMLNodeGetInfoPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLNodeRef)>();

  int CFXMLNodeGetVersion(
    CFXMLNodeRef node,
  ) {
    return _CFXMLNodeGetVersion(
      node,
    );
  }

  late final _CFXMLNodeGetVersionPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLNodeRef)>>(
          'CFXMLNodeGetVersion');
  late final _CFXMLNodeGetVersion =
      _CFXMLNodeGetVersionPtr.asFunction<int Function(CFXMLNodeRef)>();

  CFXMLTreeRef CFXMLTreeCreateWithNode(
    CFAllocatorRef allocator,
    CFXMLNodeRef node,
  ) {
    return _CFXMLTreeCreateWithNode(
      allocator,
      node,
    );
  }

  late final _CFXMLTreeCreateWithNodePtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(
              CFAllocatorRef, CFXMLNodeRef)>>('CFXMLTreeCreateWithNode');
  late final _CFXMLTreeCreateWithNode = _CFXMLTreeCreateWithNodePtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFXMLNodeRef)>();

  CFXMLNodeRef CFXMLTreeGetNode(
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeGetNode(
      xmlTree,
    );
  }

  late final _CFXMLTreeGetNodePtr =
      _lookup<ffi.NativeFunction<CFXMLNodeRef Function(CFXMLTreeRef)>>(
          'CFXMLTreeGetNode');
  late final _CFXMLTreeGetNode =
      _CFXMLTreeGetNodePtr.asFunction<CFXMLNodeRef Function(CFXMLTreeRef)>();

  int CFXMLParserGetTypeID() {
    return _CFXMLParserGetTypeID();
  }

  late final _CFXMLParserGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('CFXMLParserGetTypeID');
  late final _CFXMLParserGetTypeID =
      _CFXMLParserGetTypeIDPtr.asFunction<int Function()>();

  CFXMLParserRef CFXMLParserCreate(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreate(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreatePtr = _lookup<
      ffi.NativeFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFDataRef,
              CFURLRef,
              CFOptionFlags,
              CFIndex,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserCreate');
  late final _CFXMLParserCreate = _CFXMLParserCreatePtr.asFunction<
      CFXMLParserRef Function(
          CFAllocatorRef,
          CFDataRef,
          CFURLRef,
          int,
          int,
          ffi.Pointer<CFXMLParserCallBacks>,
          ffi.Pointer<CFXMLParserContext>)>();

  CFXMLParserRef CFXMLParserCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
      callBacks,
      context,
    );
  }

  late final _CFXMLParserCreateWithDataFromURLPtr = _lookup<
          ffi.NativeFunction<
              CFXMLParserRef Function(
                  CFAllocatorRef,
                  CFURLRef,
                  CFOptionFlags,
                  CFIndex,
                  ffi.Pointer<CFXMLParserCallBacks>,
                  ffi.Pointer<CFXMLParserContext>)>>(
      'CFXMLParserCreateWithDataFromURL');
  late final _CFXMLParserCreateWithDataFromURL =
      _CFXMLParserCreateWithDataFromURLPtr.asFunction<
          CFXMLParserRef Function(
              CFAllocatorRef,
              CFURLRef,
              int,
              int,
              ffi.Pointer<CFXMLParserCallBacks>,
              ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetContext(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserContext> context,
  ) {
    return _CFXMLParserGetContext(
      parser,
      context,
    );
  }

  late final _CFXMLParserGetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserContext>)>>('CFXMLParserGetContext');
  late final _CFXMLParserGetContext = _CFXMLParserGetContextPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserContext>)>();

  void CFXMLParserGetCallBacks(
    CFXMLParserRef parser,
    ffi.Pointer<CFXMLParserCallBacks> callBacks,
  ) {
    return _CFXMLParserGetCallBacks(
      parser,
      callBacks,
    );
  }

  late final _CFXMLParserGetCallBacksPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef,
              ffi.Pointer<CFXMLParserCallBacks>)>>('CFXMLParserGetCallBacks');
  late final _CFXMLParserGetCallBacks = _CFXMLParserGetCallBacksPtr.asFunction<
      void Function(CFXMLParserRef, ffi.Pointer<CFXMLParserCallBacks>)>();

  CFURLRef CFXMLParserGetSourceURL(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetSourceURL(
      parser,
    );
  }

  late final _CFXMLParserGetSourceURLPtr =
      _lookup<ffi.NativeFunction<CFURLRef Function(CFXMLParserRef)>>(
          'CFXMLParserGetSourceURL');
  late final _CFXMLParserGetSourceURL = _CFXMLParserGetSourceURLPtr.asFunction<
      CFURLRef Function(CFXMLParserRef)>();

  int CFXMLParserGetLocation(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLocation(
      parser,
    );
  }

  late final _CFXMLParserGetLocationPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLocation');
  late final _CFXMLParserGetLocation =
      _CFXMLParserGetLocationPtr.asFunction<int Function(CFXMLParserRef)>();

  int CFXMLParserGetLineNumber(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetLineNumber(
      parser,
    );
  }

  late final _CFXMLParserGetLineNumberPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(CFXMLParserRef)>>(
          'CFXMLParserGetLineNumber');
  late final _CFXMLParserGetLineNumber =
      _CFXMLParserGetLineNumberPtr.asFunction<int Function(CFXMLParserRef)>();

  ffi.Pointer<ffi.Void> CFXMLParserGetDocument(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetDocument(
      parser,
    );
  }

  late final _CFXMLParserGetDocumentPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>>(
      'CFXMLParserGetDocument');
  late final _CFXMLParserGetDocument = _CFXMLParserGetDocumentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(CFXMLParserRef)>();

  int CFXMLParserGetStatusCode(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserGetStatusCode(
      parser,
    );
  }

  late final _CFXMLParserGetStatusCodePtr = _lookup<
          ffi.NativeFunction<CFXMLParserStatusCode Function(CFXMLParserRef)>>(
      'CFXMLParserGetStatusCode');
  late final _CFXMLParserGetStatusCode =
      _CFXMLParserGetStatusCodePtr.asFunction<int Function(CFXMLParserRef)>();

  CFStringRef CFXMLParserCopyErrorDescription(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserCopyErrorDescription(
      parser,
    );
  }

  late final _CFXMLParserCopyErrorDescriptionPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(CFXMLParserRef)>>(
          'CFXMLParserCopyErrorDescription');
  late final _CFXMLParserCopyErrorDescription =
      _CFXMLParserCopyErrorDescriptionPtr.asFunction<
          CFStringRef Function(CFXMLParserRef)>();

  void CFXMLParserAbort(
    CFXMLParserRef parser,
    int errorCode,
    CFStringRef errorDescription,
  ) {
    return _CFXMLParserAbort(
      parser,
      errorCode,
      errorDescription,
    );
  }

  late final _CFXMLParserAbortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(CFXMLParserRef, CFXMLParserStatusCode,
              CFStringRef)>>('CFXMLParserAbort');
  late final _CFXMLParserAbort = _CFXMLParserAbortPtr.asFunction<
      void Function(CFXMLParserRef, int, CFStringRef)>();

  int CFXMLParserParse(
    CFXMLParserRef parser,
  ) {
    return _CFXMLParserParse(
      parser,
    );
  }

  late final _CFXMLParserParsePtr =
      _lookup<ffi.NativeFunction<Boolean Function(CFXMLParserRef)>>(
          'CFXMLParserParse');
  late final _CFXMLParserParse =
      _CFXMLParserParsePtr.asFunction<int Function(CFXMLParserRef)>();

  CFXMLTreeRef CFXMLTreeCreateFromData(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateFromData(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
              CFOptionFlags, CFIndex)>>('CFXMLTreeCreateFromData');
  late final _CFXMLTreeCreateFromData = _CFXMLTreeCreateFromDataPtr.asFunction<
      CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int)>();

  CFXMLTreeRef CFXMLTreeCreateFromDataWithError(
    CFAllocatorRef allocator,
    CFDataRef xmlData,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
    ffi.Pointer<CFDictionaryRef> errorDict,
  ) {
    return _CFXMLTreeCreateFromDataWithError(
      allocator,
      xmlData,
      dataSource,
      parseOptions,
      versionOfNodes,
      errorDict,
    );
  }

  late final _CFXMLTreeCreateFromDataWithErrorPtr = _lookup<
          ffi.NativeFunction<
              CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef,
                  CFOptionFlags, CFIndex, ffi.Pointer<CFDictionaryRef>)>>(
      'CFXMLTreeCreateFromDataWithError');
  late final _CFXMLTreeCreateFromDataWithError =
      _CFXMLTreeCreateFromDataWithErrorPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFDataRef, CFURLRef, int, int,
              ffi.Pointer<CFDictionaryRef>)>();

  CFXMLTreeRef CFXMLTreeCreateWithDataFromURL(
    CFAllocatorRef allocator,
    CFURLRef dataSource,
    int parseOptions,
    int versionOfNodes,
  ) {
    return _CFXMLTreeCreateWithDataFromURL(
      allocator,
      dataSource,
      parseOptions,
      versionOfNodes,
    );
  }

  late final _CFXMLTreeCreateWithDataFromURLPtr = _lookup<
      ffi.NativeFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, CFOptionFlags,
              CFIndex)>>('CFXMLTreeCreateWithDataFromURL');
  late final _CFXMLTreeCreateWithDataFromURL =
      _CFXMLTreeCreateWithDataFromURLPtr.asFunction<
          CFXMLTreeRef Function(CFAllocatorRef, CFURLRef, int, int)>();

  CFDataRef CFXMLTreeCreateXMLData(
    CFAllocatorRef allocator,
    CFXMLTreeRef xmlTree,
  ) {
    return _CFXMLTreeCreateXMLData(
      allocator,
      xmlTree,
    );
  }

  late final _CFXMLTreeCreateXMLDataPtr = _lookup<
          ffi.NativeFunction<CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>>(
      'CFXMLTreeCreateXMLData');
  late final _CFXMLTreeCreateXMLData = _CFXMLTreeCreateXMLDataPtr.asFunction<
      CFDataRef Function(CFAllocatorRef, CFXMLTreeRef)>();

  CFStringRef CFXMLCreateStringByEscapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByEscapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByEscapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByEscapingEntities');
  late final _CFXMLCreateStringByEscapingEntities =
      _CFXMLCreateStringByEscapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  CFStringRef CFXMLCreateStringByUnescapingEntities(
    CFAllocatorRef allocator,
    CFStringRef string,
    CFDictionaryRef entitiesDictionary,
  ) {
    return _CFXMLCreateStringByUnescapingEntities(
      allocator,
      string,
      entitiesDictionary,
    );
  }

  late final _CFXMLCreateStringByUnescapingEntitiesPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef,
              CFDictionaryRef)>>('CFXMLCreateStringByUnescapingEntities');
  late final _CFXMLCreateStringByUnescapingEntities =
      _CFXMLCreateStringByUnescapingEntitiesPtr.asFunction<
          CFStringRef Function(CFAllocatorRef, CFStringRef, CFDictionaryRef)>();

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorDescription =
      _lookup<CFStringRef>('kCFXMLTreeErrorDescription');

  CFStringRef get kCFXMLTreeErrorDescription =>
      _kCFXMLTreeErrorDescription.value;

  set kCFXMLTreeErrorDescription(CFStringRef value) =>
      _kCFXMLTreeErrorDescription.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLineNumber =
      _lookup<CFStringRef>('kCFXMLTreeErrorLineNumber');

  CFStringRef get kCFXMLTreeErrorLineNumber => _kCFXMLTreeErrorLineNumber.value;

  set kCFXMLTreeErrorLineNumber(CFStringRef value) =>
      _kCFXMLTreeErrorLineNumber.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorLocation =
      _lookup<CFStringRef>('kCFXMLTreeErrorLocation');

  CFStringRef get kCFXMLTreeErrorLocation => _kCFXMLTreeErrorLocation.value;

  set kCFXMLTreeErrorLocation(CFStringRef value) =>
      _kCFXMLTreeErrorLocation.value = value;

  late final ffi.Pointer<CFStringRef> _kCFXMLTreeErrorStatusCode =
      _lookup<CFStringRef>('kCFXMLTreeErrorStatusCode');

  CFStringRef get kCFXMLTreeErrorStatusCode => _kCFXMLTreeErrorStatusCode.value;

  set kCFXMLTreeErrorStatusCode(CFStringRef value) =>
      _kCFXMLTreeErrorStatusCode.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeTitle =
      _lookup<CFStringRef>('kSecPropertyTypeTitle');

  CFStringRef get kSecPropertyTypeTitle => _kSecPropertyTypeTitle.value;

  set kSecPropertyTypeTitle(CFStringRef value) =>
      _kSecPropertyTypeTitle.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeError =
      _lookup<CFStringRef>('kSecPropertyTypeError');

  CFStringRef get kSecPropertyTypeError => _kSecPropertyTypeError.value;

  set kSecPropertyTypeError(CFStringRef value) =>
      _kSecPropertyTypeError.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustEvaluationDate =
      _lookup<CFStringRef>('kSecTrustEvaluationDate');

  CFStringRef get kSecTrustEvaluationDate => _kSecTrustEvaluationDate.value;

  set kSecTrustEvaluationDate(CFStringRef value) =>
      _kSecTrustEvaluationDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustExtendedValidation =
      _lookup<CFStringRef>('kSecTrustExtendedValidation');

  CFStringRef get kSecTrustExtendedValidation =>
      _kSecTrustExtendedValidation.value;

  set kSecTrustExtendedValidation(CFStringRef value) =>
      _kSecTrustExtendedValidation.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustOrganizationName =
      _lookup<CFStringRef>('kSecTrustOrganizationName');

  CFStringRef get kSecTrustOrganizationName => _kSecTrustOrganizationName.value;

  set kSecTrustOrganizationName(CFStringRef value) =>
      _kSecTrustOrganizationName.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustResultValue =
      _lookup<CFStringRef>('kSecTrustResultValue');

  CFStringRef get kSecTrustResultValue => _kSecTrustResultValue.value;

  set kSecTrustResultValue(CFStringRef value) =>
      _kSecTrustResultValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationChecked =
      _lookup<CFStringRef>('kSecTrustRevocationChecked');

  CFStringRef get kSecTrustRevocationChecked =>
      _kSecTrustRevocationChecked.value;

  set kSecTrustRevocationChecked(CFStringRef value) =>
      _kSecTrustRevocationChecked.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustRevocationValidUntilDate =
      _lookup<CFStringRef>('kSecTrustRevocationValidUntilDate');

  CFStringRef get kSecTrustRevocationValidUntilDate =>
      _kSecTrustRevocationValidUntilDate.value;

  set kSecTrustRevocationValidUntilDate(CFStringRef value) =>
      _kSecTrustRevocationValidUntilDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecTrustCertificateTransparency =
      _lookup<CFStringRef>('kSecTrustCertificateTransparency');

  CFStringRef get kSecTrustCertificateTransparency =>
      _kSecTrustCertificateTransparency.value;

  set kSecTrustCertificateTransparency(CFStringRef value) =>
      _kSecTrustCertificateTransparency.value = value;

  late final ffi.Pointer<CFStringRef>
      _kSecTrustCertificateTransparencyWhiteList =
      _lookup<CFStringRef>('kSecTrustCertificateTransparencyWhiteList');

  CFStringRef get kSecTrustCertificateTransparencyWhiteList =>
      _kSecTrustCertificateTransparencyWhiteList.value;

  set kSecTrustCertificateTransparencyWhiteList(CFStringRef value) =>
      _kSecTrustCertificateTransparencyWhiteList.value = value;

  int SecTrustGetTypeID() {
    return _SecTrustGetTypeID();
  }

  late final _SecTrustGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecTrustGetTypeID');
  late final _SecTrustGetTypeID =
      _SecTrustGetTypeIDPtr.asFunction<int Function()>();

  int SecTrustCreateWithCertificates(
    CFTypeRef certificates,
    CFTypeRef policies,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SecTrustCreateWithCertificates(
      certificates,
      policies,
      trust,
    );
  }

  late final _SecTrustCreateWithCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFTypeRef, CFTypeRef,
              ffi.Pointer<SecTrustRef>)>>('SecTrustCreateWithCertificates');
  late final _SecTrustCreateWithCertificates =
      _SecTrustCreateWithCertificatesPtr.asFunction<
          int Function(CFTypeRef, CFTypeRef, ffi.Pointer<SecTrustRef>)>();

  int SecTrustSetPolicies(
    SecTrustRef trust,
    CFTypeRef policies,
  ) {
    return _SecTrustSetPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustSetPoliciesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetPolicies');
  late final _SecTrustSetPolicies = _SecTrustSetPoliciesPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustCopyPolicies(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> policies,
  ) {
    return _SecTrustCopyPolicies(
      trust,
      policies,
    );
  }

  late final _SecTrustCopyPoliciesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, ffi.Pointer<CFArrayRef>)>>('SecTrustCopyPolicies');
  late final _SecTrustCopyPolicies = _SecTrustCopyPoliciesPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetNetworkFetchAllowed(
    SecTrustRef trust,
    int allowFetch,
  ) {
    return _SecTrustSetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustSetNetworkFetchAllowedPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetNetworkFetchAllowed');
  late final _SecTrustSetNetworkFetchAllowed =
      _SecTrustSetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustGetNetworkFetchAllowed(
    SecTrustRef trust,
    ffi.Pointer<Boolean> allowFetch,
  ) {
    return _SecTrustGetNetworkFetchAllowed(
      trust,
      allowFetch,
    );
  }

  late final _SecTrustGetNetworkFetchAllowedPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<Boolean>)>>('SecTrustGetNetworkFetchAllowed');
  late final _SecTrustGetNetworkFetchAllowed =
      _SecTrustGetNetworkFetchAllowedPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<Boolean>)>();

  int SecTrustSetAnchorCertificates(
    SecTrustRef trust,
    CFArrayRef anchorCertificates,
  ) {
    return _SecTrustSetAnchorCertificates(
      trust,
      anchorCertificates,
    );
  }

  late final _SecTrustSetAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetAnchorCertificates');
  late final _SecTrustSetAnchorCertificates = _SecTrustSetAnchorCertificatesPtr
      .asFunction<int Function(SecTrustRef, CFArrayRef)>();

  int SecTrustSetAnchorCertificatesOnly(
    SecTrustRef trust,
    int anchorCertificatesOnly,
  ) {
    return _SecTrustSetAnchorCertificatesOnly(
      trust,
      anchorCertificatesOnly,
    );
  }

  late final _SecTrustSetAnchorCertificatesOnlyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, Boolean)>>(
          'SecTrustSetAnchorCertificatesOnly');
  late final _SecTrustSetAnchorCertificatesOnly =
      _SecTrustSetAnchorCertificatesOnlyPtr.asFunction<
          int Function(SecTrustRef, int)>();

  int SecTrustCopyCustomAnchorCertificates(
    SecTrustRef trust,
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyCustomAnchorCertificates(
      trust,
      anchors,
    );
  }

  late final _SecTrustCopyCustomAnchorCertificatesPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>>(
      'SecTrustCopyCustomAnchorCertificates');
  late final _SecTrustCopyCustomAnchorCertificates =
      _SecTrustCopyCustomAnchorCertificatesPtr.asFunction<
          int Function(SecTrustRef, ffi.Pointer<CFArrayRef>)>();

  int SecTrustSetVerifyDate(
    SecTrustRef trust,
    CFDateRef verifyDate,
  ) {
    return _SecTrustSetVerifyDate(
      trust,
      verifyDate,
    );
  }

  late final _SecTrustSetVerifyDatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFDateRef)>>(
          'SecTrustSetVerifyDate');
  late final _SecTrustSetVerifyDate = _SecTrustSetVerifyDatePtr.asFunction<
      int Function(SecTrustRef, CFDateRef)>();

  double SecTrustGetVerifyTime(
    SecTrustRef trust,
  ) {
    return _SecTrustGetVerifyTime(
      trust,
    );
  }

  late final _SecTrustGetVerifyTimePtr =
      _lookup<ffi.NativeFunction<CFAbsoluteTime Function(SecTrustRef)>>(
          'SecTrustGetVerifyTime');
  late final _SecTrustGetVerifyTime =
      _SecTrustGetVerifyTimePtr.asFunction<double Function(SecTrustRef)>();

  int SecTrustEvaluate(
    SecTrustRef trust,
    ffi.Pointer<SecTrustResultType> result,
  ) {
    return _SecTrustEvaluate(
      trust,
      result,
    );
  }

  late final _SecTrustEvaluatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<SecTrustResultType>)>>('SecTrustEvaluate');
  late final _SecTrustEvaluate = _SecTrustEvaluatePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<SecTrustResultType>)>();

  bool SecTrustEvaluateWithError(
    SecTrustRef trust,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecTrustEvaluateWithError(
          trust,
          error,
        ) !=
        0;
  }

  late final _SecTrustEvaluateWithErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(SecTrustRef,
              ffi.Pointer<CFErrorRef>)>>('SecTrustEvaluateWithError');
  late final _SecTrustEvaluateWithError = _SecTrustEvaluateWithErrorPtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<CFErrorRef>)>();

  int SecTrustGetTrustResult(
    SecTrustRef trust,
    ffi.Pointer<SecTrustResultType> result,
  ) {
    return _SecTrustGetTrustResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetTrustResultPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<SecTrustResultType>)>>('SecTrustGetTrustResult');
  late final _SecTrustGetTrustResult = _SecTrustGetTrustResultPtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<SecTrustResultType>)>();

  SecKeyRef SecTrustCopyPublicKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyPublicKey(
      trust,
    );
  }

  late final _SecTrustCopyPublicKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyPublicKey');
  late final _SecTrustCopyPublicKey =
      _SecTrustCopyPublicKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  SecKeyRef SecTrustCopyKey(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyKey(
      trust,
    );
  }

  late final _SecTrustCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecTrustRef)>>(
          'SecTrustCopyKey');
  late final _SecTrustCopyKey =
      _SecTrustCopyKeyPtr.asFunction<SecKeyRef Function(SecTrustRef)>();

  int SecTrustGetCertificateCount(
    SecTrustRef trust,
  ) {
    return _SecTrustGetCertificateCount(
      trust,
    );
  }

  late final _SecTrustGetCertificateCountPtr =
      _lookup<ffi.NativeFunction<CFIndex Function(SecTrustRef)>>(
          'SecTrustGetCertificateCount');
  late final _SecTrustGetCertificateCount =
      _SecTrustGetCertificateCountPtr.asFunction<int Function(SecTrustRef)>();

  SecCertificateRef SecTrustGetCertificateAtIndex(
    SecTrustRef trust,
    int ix,
  ) {
    return _SecTrustGetCertificateAtIndex(
      trust,
      ix,
    );
  }

  late final _SecTrustGetCertificateAtIndexPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(SecTrustRef, CFIndex)>>(
      'SecTrustGetCertificateAtIndex');
  late final _SecTrustGetCertificateAtIndex = _SecTrustGetCertificateAtIndexPtr
      .asFunction<SecCertificateRef Function(SecTrustRef, int)>();

  CFDataRef SecTrustCopyExceptions(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyExceptions(
      trust,
    );
  }

  late final _SecTrustCopyExceptionsPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecTrustRef)>>(
          'SecTrustCopyExceptions');
  late final _SecTrustCopyExceptions =
      _SecTrustCopyExceptionsPtr.asFunction<CFDataRef Function(SecTrustRef)>();

  bool SecTrustSetExceptions(
    SecTrustRef trust,
    CFDataRef exceptions,
  ) {
    return _SecTrustSetExceptions(
          trust,
          exceptions,
        ) !=
        0;
  }

  late final _SecTrustSetExceptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(SecTrustRef, CFDataRef)>>(
          'SecTrustSetExceptions');
  late final _SecTrustSetExceptions = _SecTrustSetExceptionsPtr.asFunction<
      int Function(SecTrustRef, CFDataRef)>();

  CFArrayRef SecTrustCopyProperties(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyProperties(
      trust,
    );
  }

  late final _SecTrustCopyPropertiesPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyProperties');
  late final _SecTrustCopyProperties =
      _SecTrustCopyPropertiesPtr.asFunction<CFArrayRef Function(SecTrustRef)>();

  CFDictionaryRef SecTrustCopyResult(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyResult(
      trust,
    );
  }

  late final _SecTrustCopyResultPtr =
      _lookup<ffi.NativeFunction<CFDictionaryRef Function(SecTrustRef)>>(
          'SecTrustCopyResult');
  late final _SecTrustCopyResult = _SecTrustCopyResultPtr.asFunction<
      CFDictionaryRef Function(SecTrustRef)>();

  int SecTrustSetOCSPResponse(
    SecTrustRef trust,
    CFTypeRef responseData,
  ) {
    return _SecTrustSetOCSPResponse(
      trust,
      responseData,
    );
  }

  late final _SecTrustSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetOCSPResponse');
  late final _SecTrustSetOCSPResponse = _SecTrustSetOCSPResponsePtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustSetSignedCertificateTimestamps(
    SecTrustRef trust,
    CFArrayRef sctArray,
  ) {
    return _SecTrustSetSignedCertificateTimestamps(
      trust,
      sctArray,
    );
  }

  late final _SecTrustSetSignedCertificateTimestampsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFArrayRef)>>(
          'SecTrustSetSignedCertificateTimestamps');
  late final _SecTrustSetSignedCertificateTimestamps =
      _SecTrustSetSignedCertificateTimestampsPtr.asFunction<
          int Function(SecTrustRef, CFArrayRef)>();

  CFArrayRef SecTrustCopyCertificateChain(
    SecTrustRef trust,
  ) {
    return _SecTrustCopyCertificateChain(
      trust,
    );
  }

  late final _SecTrustCopyCertificateChainPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(SecTrustRef)>>(
          'SecTrustCopyCertificateChain');
  late final _SecTrustCopyCertificateChain = _SecTrustCopyCertificateChainPtr
      .asFunction<CFArrayRef Function(SecTrustRef)>();

  late final ffi.Pointer<CSSM_GUID> _gGuidCssm =
      _lookup<CSSM_GUID>('gGuidCssm');

  CSSM_GUID get gGuidCssm => _gGuidCssm.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleFileDL =
      _lookup<CSSM_GUID>('gGuidAppleFileDL');

  CSSM_GUID get gGuidAppleFileDL => _gGuidAppleFileDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSP =
      _lookup<CSSM_GUID>('gGuidAppleCSP');

  CSSM_GUID get gGuidAppleCSP => _gGuidAppleCSP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleCSPDL');

  CSSM_GUID get gGuidAppleCSPDL => _gGuidAppleCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509CL =
      _lookup<CSSM_GUID>('gGuidAppleX509CL');

  CSSM_GUID get gGuidAppleX509CL => _gGuidAppleX509CL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleX509TP =
      _lookup<CSSM_GUID>('gGuidAppleX509TP');

  CSSM_GUID get gGuidAppleX509TP => _gGuidAppleX509TP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleLDAPDL =
      _lookup<CSSM_GUID>('gGuidAppleLDAPDL');

  CSSM_GUID get gGuidAppleLDAPDL => _gGuidAppleLDAPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacTP =
      _lookup<CSSM_GUID>('gGuidAppleDotMacTP');

  CSSM_GUID get gGuidAppleDotMacTP => _gGuidAppleDotMacTP.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleSdCSPDL =
      _lookup<CSSM_GUID>('gGuidAppleSdCSPDL');

  CSSM_GUID get gGuidAppleSdCSPDL => _gGuidAppleSdCSPDL.ref;

  late final ffi.Pointer<CSSM_GUID> _gGuidAppleDotMacDL =
      _lookup<CSSM_GUID>('gGuidAppleDotMacDL');

  CSSM_GUID get gGuidAppleDotMacDL => _gGuidAppleDotMacDL.ref;

  void cssmPerror(
    ffi.Pointer<pkg_ffi.Char> how,
    int error,
  ) {
    return _cssmPerror(
      how,
      error,
    );
  }

  late final _cssmPerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<pkg_ffi.Char>, CSSM_RETURN)>>('cssmPerror');
  late final _cssmPerror = _cssmPerrorPtr
      .asFunction<void Function(ffi.Pointer<pkg_ffi.Char>, int)>();

  bool cssmOidToAlg(
    ffi.Pointer<SecAsn1Oid> oid,
    ffi.Pointer<CSSM_ALGORITHMS> alg,
  ) {
    return _cssmOidToAlg(
          oid,
          alg,
        ) !=
        0;
  }

  late final _cssmOidToAlgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(ffi.Pointer<SecAsn1Oid>,
              ffi.Pointer<CSSM_ALGORITHMS>)>>('cssmOidToAlg');
  late final _cssmOidToAlg = _cssmOidToAlgPtr.asFunction<
      int Function(ffi.Pointer<SecAsn1Oid>, ffi.Pointer<CSSM_ALGORITHMS>)>();

  ffi.Pointer<SecAsn1Oid> cssmAlgToOid(
    int algId,
  ) {
    return _cssmAlgToOid(
      algId,
    );
  }

  late final _cssmAlgToOidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SecAsn1Oid> Function(CSSM_ALGORITHMS)>>('cssmAlgToOid');
  late final _cssmAlgToOid =
      _cssmAlgToOidPtr.asFunction<ffi.Pointer<SecAsn1Oid> Function(int)>();

  int SecTrustSetOptions(
    SecTrustRef trustRef,
    int options,
  ) {
    return _SecTrustSetOptions(
      trustRef,
      options,
    );
  }

  late final _SecTrustSetOptionsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecTrustRef, SecTrustOptionFlags)>>('SecTrustSetOptions');
  late final _SecTrustSetOptions =
      _SecTrustSetOptionsPtr.asFunction<int Function(SecTrustRef, int)>();

  int SecTrustSetParameters(
    SecTrustRef trustRef,
    int action,
    CFDataRef actionData,
  ) {
    return _SecTrustSetParameters(
      trustRef,
      action,
      actionData,
    );
  }

  late final _SecTrustSetParametersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef, CSSM_TP_ACTION,
              CFDataRef)>>('SecTrustSetParameters');
  late final _SecTrustSetParameters = _SecTrustSetParametersPtr.asFunction<
      int Function(SecTrustRef, int, CFDataRef)>();

  int SecTrustSetKeychains(
    SecTrustRef trust,
    CFTypeRef keychainOrArray,
  ) {
    return _SecTrustSetKeychains(
      trust,
      keychainOrArray,
    );
  }

  late final _SecTrustSetKeychainsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SecTrustRef, CFTypeRef)>>(
          'SecTrustSetKeychains');
  late final _SecTrustSetKeychains = _SecTrustSetKeychainsPtr.asFunction<
      int Function(SecTrustRef, CFTypeRef)>();

  int SecTrustGetResult(
    SecTrustRef trustRef,
    ffi.Pointer<SecTrustResultType> result,
    ffi.Pointer<CFArrayRef> certChain,
    ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>> statusChain,
  ) {
    return _SecTrustGetResult(
      trustRef,
      result,
      certChain,
      statusChain,
    );
  }

  late final _SecTrustGetResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecTrustRef,
                  ffi.Pointer<SecTrustResultType>,
                  ffi.Pointer<CFArrayRef>,
                  ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>>(
      'SecTrustGetResult');
  late final _SecTrustGetResult = _SecTrustGetResultPtr.asFunction<
      int Function(
          SecTrustRef,
          ffi.Pointer<SecTrustResultType>,
          ffi.Pointer<CFArrayRef>,
          ffi.Pointer<ffi.Pointer<CSSM_TP_APPLE_EVIDENCE_INFO>>)>();

  int SecTrustGetCssmResult(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR> result,
  ) {
    return _SecTrustGetCssmResult(
      trust,
      result,
    );
  }

  late final _SecTrustGetCssmResultPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecTrustRef,
                  ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>>(
      'SecTrustGetCssmResult');
  late final _SecTrustGetCssmResult = _SecTrustGetCssmResultPtr.asFunction<
      int Function(
          SecTrustRef, ffi.Pointer<CSSM_TP_VERIFY_CONTEXT_RESULT_PTR>)>();

  int SecTrustGetCssmResultCode(
    SecTrustRef trust,
    ffi.Pointer<OSStatus> resultCode,
  ) {
    return _SecTrustGetCssmResultCode(
      trust,
      resultCode,
    );
  }

  late final _SecTrustGetCssmResultCodePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<OSStatus>)>>('SecTrustGetCssmResultCode');
  late final _SecTrustGetCssmResultCode = _SecTrustGetCssmResultCodePtr
      .asFunction<int Function(SecTrustRef, ffi.Pointer<OSStatus>)>();

  int SecTrustGetTPHandle(
    SecTrustRef trust,
    ffi.Pointer<CSSM_TP_HANDLE> handle,
  ) {
    return _SecTrustGetTPHandle(
      trust,
      handle,
    );
  }

  late final _SecTrustGetTPHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecTrustRef,
              ffi.Pointer<CSSM_TP_HANDLE>)>>('SecTrustGetTPHandle');
  late final _SecTrustGetTPHandle = _SecTrustGetTPHandlePtr.asFunction<
      int Function(SecTrustRef, ffi.Pointer<CSSM_TP_HANDLE>)>();

  int SecTrustCopyAnchorCertificates(
    ffi.Pointer<CFArrayRef> anchors,
  ) {
    return _SecTrustCopyAnchorCertificates(
      anchors,
    );
  }

  late final _SecTrustCopyAnchorCertificatesPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(ffi.Pointer<CFArrayRef>)>>(
          'SecTrustCopyAnchorCertificates');
  late final _SecTrustCopyAnchorCertificates =
      _SecTrustCopyAnchorCertificatesPtr.asFunction<
          int Function(ffi.Pointer<CFArrayRef>)>();

  int SecCertificateGetTypeID() {
    return _SecCertificateGetTypeID();
  }

  late final _SecCertificateGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>(
          'SecCertificateGetTypeID');
  late final _SecCertificateGetTypeID =
      _SecCertificateGetTypeIDPtr.asFunction<int Function()>();

  SecCertificateRef SecCertificateCreateWithData(
    CFAllocatorRef allocator,
    CFDataRef data,
  ) {
    return _SecCertificateCreateWithData(
      allocator,
      data,
    );
  }

  late final _SecCertificateCreateWithDataPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFAllocatorRef, CFDataRef)>>('SecCertificateCreateWithData');
  late final _SecCertificateCreateWithData = _SecCertificateCreateWithDataPtr
      .asFunction<SecCertificateRef Function(CFAllocatorRef, CFDataRef)>();

  CFDataRef SecCertificateCopyData(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyData(
      certificate,
    );
  }

  late final _SecCertificateCopyDataPtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyData');
  late final _SecCertificateCopyData = _SecCertificateCopyDataPtr.asFunction<
      CFDataRef Function(SecCertificateRef)>();

  CFStringRef SecCertificateCopySubjectSummary(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopySubjectSummary(
      certificate,
    );
  }

  late final _SecCertificateCopySubjectSummaryPtr =
      _lookup<ffi.NativeFunction<CFStringRef Function(SecCertificateRef)>>(
          'SecCertificateCopySubjectSummary');
  late final _SecCertificateCopySubjectSummary =
      _SecCertificateCopySubjectSummaryPtr.asFunction<
          CFStringRef Function(SecCertificateRef)>();

  int SecCertificateCopyCommonName(
    SecCertificateRef certificate,
    ffi.Pointer<CFStringRef> commonName,
  ) {
    return _SecCertificateCopyCommonName(
      certificate,
      commonName,
    );
  }

  late final _SecCertificateCopyCommonNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFStringRef>)>>('SecCertificateCopyCommonName');
  late final _SecCertificateCopyCommonName = _SecCertificateCopyCommonNamePtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<CFStringRef>)>();

  int SecCertificateCopyEmailAddresses(
    SecCertificateRef certificate,
    ffi.Pointer<CFArrayRef> emailAddresses,
  ) {
    return _SecCertificateCopyEmailAddresses(
      certificate,
      emailAddresses,
    );
  }

  late final _SecCertificateCopyEmailAddressesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CFArrayRef>)>>('SecCertificateCopyEmailAddresses');
  late final _SecCertificateCopyEmailAddresses =
      _SecCertificateCopyEmailAddressesPtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CFArrayRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedIssuerSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedIssuerSequence');
  late final _SecCertificateCopyNormalizedIssuerSequence =
      _SecCertificateCopyNormalizedIssuerSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  CFDataRef SecCertificateCopyNormalizedSubjectSequence(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyNormalizedSubjectSequence(
      certificate,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectSequencePtr =
      _lookup<ffi.NativeFunction<CFDataRef Function(SecCertificateRef)>>(
          'SecCertificateCopyNormalizedSubjectSequence');
  late final _SecCertificateCopyNormalizedSubjectSequence =
      _SecCertificateCopyNormalizedSubjectSequencePtr.asFunction<
          CFDataRef Function(SecCertificateRef)>();

  SecKeyRef SecCertificateCopyKey(
    SecCertificateRef certificate,
  ) {
    return _SecCertificateCopyKey(
      certificate,
    );
  }

  late final _SecCertificateCopyKeyPtr =
      _lookup<ffi.NativeFunction<SecKeyRef Function(SecCertificateRef)>>(
          'SecCertificateCopyKey');
  late final _SecCertificateCopyKey = _SecCertificateCopyKeyPtr.asFunction<
      SecKeyRef Function(SecCertificateRef)>();

  int SecCertificateCopyPublicKey(
    SecCertificateRef certificate,
    ffi.Pointer<SecKeyRef> key,
  ) {
    return _SecCertificateCopyPublicKey(
      certificate,
      key,
    );
  }

  late final _SecCertificateCopyPublicKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<SecKeyRef>)>>('SecCertificateCopyPublicKey');
  late final _SecCertificateCopyPublicKey = _SecCertificateCopyPublicKeyPtr
      .asFunction<int Function(SecCertificateRef, ffi.Pointer<SecKeyRef>)>();

  CFDataRef SecCertificateCopySerialNumberData(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumberData(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberDataPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumberData');
  late final _SecCertificateCopySerialNumberData =
      _SecCertificateCopySerialNumberDataPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopySerialNumber(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopySerialNumber(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopySerialNumberPtr = _lookup<
      ffi.NativeFunction<
          CFDataRef Function(SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopySerialNumber');
  late final _SecCertificateCopySerialNumber =
      _SecCertificateCopySerialNumberPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecCertificateCreateFromData(
    ffi.Pointer<SecAsn1Item> data,
    int type,
    int encoding,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCreateFromData(
      data,
      type,
      encoding,
      certificate,
    );
  }

  late final _SecCertificateCreateFromDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              ffi.Pointer<SecAsn1Item>,
              CSSM_CERT_TYPE,
              CSSM_CERT_ENCODING,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCreateFromData');
  late final _SecCertificateCreateFromData =
      _SecCertificateCreateFromDataPtr.asFunction<
          int Function(ffi.Pointer<SecAsn1Item>, int, int,
              ffi.Pointer<SecCertificateRef>)>();

  int SecCertificateAddToKeychain(
    SecCertificateRef certificate,
    SecKeychainRef keychain,
  ) {
    return _SecCertificateAddToKeychain(
      certificate,
      keychain,
    );
  }

  late final _SecCertificateAddToKeychainPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              SecKeychainRef)>>('SecCertificateAddToKeychain');
  late final _SecCertificateAddToKeychain = _SecCertificateAddToKeychainPtr
      .asFunction<int Function(SecCertificateRef, SecKeychainRef)>();

  int SecCertificateGetData(
    SecCertificateRef certificate,
    CSSM_DATA_PTR data,
  ) {
    return _SecCertificateGetData(
      certificate,
      data,
    );
  }

  late final _SecCertificateGetDataPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SecCertificateRef, CSSM_DATA_PTR)>>('SecCertificateGetData');
  late final _SecCertificateGetData = _SecCertificateGetDataPtr.asFunction<
      int Function(SecCertificateRef, CSSM_DATA_PTR)>();

  int SecCertificateGetType(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CERT_TYPE> certificateType,
  ) {
    return _SecCertificateGetType(
      certificate,
      certificateType,
    );
  }

  late final _SecCertificateGetTypePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CERT_TYPE>)>>('SecCertificateGetType');
  late final _SecCertificateGetType = _SecCertificateGetTypePtr.asFunction<
      int Function(SecCertificateRef, ffi.Pointer<CSSM_CERT_TYPE>)>();

  int SecCertificateGetSubject(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> subject,
  ) {
    return _SecCertificateGetSubject(
      certificate,
      subject,
    );
  }

  late final _SecCertificateGetSubjectPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetSubject');
  late final _SecCertificateGetSubject =
      _SecCertificateGetSubjectPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetIssuer(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>> issuer,
  ) {
    return _SecCertificateGetIssuer(
      certificate,
      issuer,
    );
  }

  late final _SecCertificateGetIssuerPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(SecCertificateRef,
                  ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>>(
      'SecCertificateGetIssuer');
  late final _SecCertificateGetIssuer = _SecCertificateGetIssuerPtr.asFunction<
      int Function(
          SecCertificateRef, ffi.Pointer<ffi.Pointer<CSSM_X509_NAME>>)>();

  int SecCertificateGetCLHandle(
    SecCertificateRef certificate,
    ffi.Pointer<CSSM_CL_HANDLE> clHandle,
  ) {
    return _SecCertificateGetCLHandle(
      certificate,
      clHandle,
    );
  }

  late final _SecCertificateGetCLHandlePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef,
              ffi.Pointer<CSSM_CL_HANDLE>)>>('SecCertificateGetCLHandle');
  late final _SecCertificateGetCLHandle =
      _SecCertificateGetCLHandlePtr.asFunction<
          int Function(SecCertificateRef, ffi.Pointer<CSSM_CL_HANDLE>)>();

  int SecCertificateGetAlgorithmID(
    SecCertificateRef certificate,
    ffi.Pointer<ffi.Pointer<SecAsn1AlgId>> algid,
  ) {
    return _SecCertificateGetAlgorithmID(
      certificate,
      algid,
    );
  }

  late final _SecCertificateGetAlgorithmIDPtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>>(
      'SecCertificateGetAlgorithmID');
  late final _SecCertificateGetAlgorithmID =
      _SecCertificateGetAlgorithmIDPtr.asFunction<
          int Function(
              SecCertificateRef, ffi.Pointer<ffi.Pointer<SecAsn1AlgId>>)>();

  int SecCertificateCopyPreference(
    CFStringRef name,
    int keyUsage,
    ffi.Pointer<SecCertificateRef> certificate,
  ) {
    return _SecCertificateCopyPreference(
      name,
      keyUsage,
      certificate,
    );
  }

  late final _SecCertificateCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, uint32,
              ffi.Pointer<SecCertificateRef>)>>('SecCertificateCopyPreference');
  late final _SecCertificateCopyPreference =
      _SecCertificateCopyPreferencePtr.asFunction<
          int Function(CFStringRef, int, ffi.Pointer<SecCertificateRef>)>();

  SecCertificateRef SecCertificateCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateCopyPreferred(
      name,
      keyUsage,
    );
  }

  late final _SecCertificateCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecCertificateRef Function(
              CFStringRef, CFArrayRef)>>('SecCertificateCopyPreferred');
  late final _SecCertificateCopyPreferred = _SecCertificateCopyPreferredPtr
      .asFunction<SecCertificateRef Function(CFStringRef, CFArrayRef)>();

  int SecCertificateSetPreference(
    SecCertificateRef certificate,
    CFStringRef name,
    int keyUsage,
    CFDateRef date,
  ) {
    return _SecCertificateSetPreference(
      certificate,
      name,
      keyUsage,
      date,
    );
  }

  late final _SecCertificateSetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef, uint32,
              CFDateRef)>>('SecCertificateSetPreference');
  late final _SecCertificateSetPreference =
      _SecCertificateSetPreferencePtr.asFunction<
          int Function(SecCertificateRef, CFStringRef, int, CFDateRef)>();

  int SecCertificateSetPreferred(
    SecCertificateRef certificate,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecCertificateSetPreferred(
      certificate,
      name,
      keyUsage,
    );
  }

  late final _SecCertificateSetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecCertificateRef, CFStringRef,
              CFArrayRef)>>('SecCertificateSetPreferred');
  late final _SecCertificateSetPreferred = _SecCertificateSetPreferredPtr
      .asFunction<int Function(SecCertificateRef, CFStringRef, CFArrayRef)>();

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyType =
      _lookup<CFStringRef>('kSecPropertyKeyType');

  CFStringRef get kSecPropertyKeyType => _kSecPropertyKeyType.value;

  set kSecPropertyKeyType(CFStringRef value) =>
      _kSecPropertyKeyType.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLabel');

  CFStringRef get kSecPropertyKeyLabel => _kSecPropertyKeyLabel.value;

  set kSecPropertyKeyLabel(CFStringRef value) =>
      _kSecPropertyKeyLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyLocalizedLabel =
      _lookup<CFStringRef>('kSecPropertyKeyLocalizedLabel');

  CFStringRef get kSecPropertyKeyLocalizedLabel =>
      _kSecPropertyKeyLocalizedLabel.value;

  set kSecPropertyKeyLocalizedLabel(CFStringRef value) =>
      _kSecPropertyKeyLocalizedLabel.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyKeyValue =
      _lookup<CFStringRef>('kSecPropertyKeyValue');

  CFStringRef get kSecPropertyKeyValue => _kSecPropertyKeyValue.value;

  set kSecPropertyKeyValue(CFStringRef value) =>
      _kSecPropertyKeyValue.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeWarning =
      _lookup<CFStringRef>('kSecPropertyTypeWarning');

  CFStringRef get kSecPropertyTypeWarning => _kSecPropertyTypeWarning.value;

  set kSecPropertyTypeWarning(CFStringRef value) =>
      _kSecPropertyTypeWarning.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSuccess =
      _lookup<CFStringRef>('kSecPropertyTypeSuccess');

  CFStringRef get kSecPropertyTypeSuccess => _kSecPropertyTypeSuccess.value;

  set kSecPropertyTypeSuccess(CFStringRef value) =>
      _kSecPropertyTypeSuccess.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeSection =
      _lookup<CFStringRef>('kSecPropertyTypeSection');

  CFStringRef get kSecPropertyTypeSection => _kSecPropertyTypeSection.value;

  set kSecPropertyTypeSection(CFStringRef value) =>
      _kSecPropertyTypeSection.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeData =
      _lookup<CFStringRef>('kSecPropertyTypeData');

  CFStringRef get kSecPropertyTypeData => _kSecPropertyTypeData.value;

  set kSecPropertyTypeData(CFStringRef value) =>
      _kSecPropertyTypeData.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeString =
      _lookup<CFStringRef>('kSecPropertyTypeString');

  CFStringRef get kSecPropertyTypeString => _kSecPropertyTypeString.value;

  set kSecPropertyTypeString(CFStringRef value) =>
      _kSecPropertyTypeString.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeURL =
      _lookup<CFStringRef>('kSecPropertyTypeURL');

  CFStringRef get kSecPropertyTypeURL => _kSecPropertyTypeURL.value;

  set kSecPropertyTypeURL(CFStringRef value) =>
      _kSecPropertyTypeURL.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeDate =
      _lookup<CFStringRef>('kSecPropertyTypeDate');

  CFStringRef get kSecPropertyTypeDate => _kSecPropertyTypeDate.value;

  set kSecPropertyTypeDate(CFStringRef value) =>
      _kSecPropertyTypeDate.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeArray =
      _lookup<CFStringRef>('kSecPropertyTypeArray');

  CFStringRef get kSecPropertyTypeArray => _kSecPropertyTypeArray.value;

  set kSecPropertyTypeArray(CFStringRef value) =>
      _kSecPropertyTypeArray.value = value;

  late final ffi.Pointer<CFStringRef> _kSecPropertyTypeNumber =
      _lookup<CFStringRef>('kSecPropertyTypeNumber');

  CFStringRef get kSecPropertyTypeNumber => _kSecPropertyTypeNumber.value;

  set kSecPropertyTypeNumber(CFStringRef value) =>
      _kSecPropertyTypeNumber.value = value;

  CFDictionaryRef SecCertificateCopyValues(
    SecCertificateRef certificate,
    CFArrayRef keys,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyValues(
      certificate,
      keys,
      error,
    );
  }

  late final _SecCertificateCopyValuesPtr = _lookup<
      ffi.NativeFunction<
          CFDictionaryRef Function(SecCertificateRef, CFArrayRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyValues');
  late final _SecCertificateCopyValues =
      _SecCertificateCopyValuesPtr.asFunction<
          CFDictionaryRef Function(
              SecCertificateRef, CFArrayRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyLongDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyLongDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyLongDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyLongDescription');
  late final _SecCertificateCopyLongDescription =
      _SecCertificateCopyLongDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFStringRef SecCertificateCopyShortDescription(
    CFAllocatorRef alloc,
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyShortDescription(
      alloc,
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyShortDescriptionPtr = _lookup<
      ffi.NativeFunction<
          CFStringRef Function(CFAllocatorRef, SecCertificateRef,
              ffi.Pointer<CFErrorRef>)>>('SecCertificateCopyShortDescription');
  late final _SecCertificateCopyShortDescription =
      _SecCertificateCopyShortDescriptionPtr.asFunction<
          CFStringRef Function(
              CFAllocatorRef, SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedIssuerContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedIssuerContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedIssuerContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedIssuerContent');
  late final _SecCertificateCopyNormalizedIssuerContent =
      _SecCertificateCopyNormalizedIssuerContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  CFDataRef SecCertificateCopyNormalizedSubjectContent(
    SecCertificateRef certificate,
    ffi.Pointer<CFErrorRef> error,
  ) {
    return _SecCertificateCopyNormalizedSubjectContent(
      certificate,
      error,
    );
  }

  late final _SecCertificateCopyNormalizedSubjectContentPtr = _lookup<
          ffi.NativeFunction<
              CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>>(
      'SecCertificateCopyNormalizedSubjectContent');
  late final _SecCertificateCopyNormalizedSubjectContent =
      _SecCertificateCopyNormalizedSubjectContentPtr.asFunction<
          CFDataRef Function(SecCertificateRef, ffi.Pointer<CFErrorRef>)>();

  int SecIdentityGetTypeID() {
    return _SecIdentityGetTypeID();
  }

  late final _SecIdentityGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SecIdentityGetTypeID');
  late final _SecIdentityGetTypeID =
      _SecIdentityGetTypeIDPtr.asFunction<int Function()>();

  int SecIdentityCreateWithCertificate(
    CFTypeRef keychainOrArray,
    SecCertificateRef certificateRef,
    ffi.Pointer<SecIdentityRef> identityRef,
  ) {
    return _SecIdentityCreateWithCertificate(
      keychainOrArray,
      certificateRef,
      identityRef,
    );
  }

  late final _SecIdentityCreateWithCertificatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>>(
      'SecIdentityCreateWithCertificate');
  late final _SecIdentityCreateWithCertificate =
      _SecIdentityCreateWithCertificatePtr.asFunction<
          int Function(
              CFTypeRef, SecCertificateRef, ffi.Pointer<SecIdentityRef>)>();

  int SecIdentityCopyCertificate(
    SecIdentityRef identityRef,
    ffi.Pointer<SecCertificateRef> certificateRef,
  ) {
    return _SecIdentityCopyCertificate(
      identityRef,
      certificateRef,
    );
  }

  late final _SecIdentityCopyCertificatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecCertificateRef>)>>('SecIdentityCopyCertificate');
  late final _SecIdentityCopyCertificate =
      _SecIdentityCopyCertificatePtr.asFunction<
          int Function(SecIdentityRef, ffi.Pointer<SecCertificateRef>)>();

  int SecIdentityCopyPrivateKey(
    SecIdentityRef identityRef,
    ffi.Pointer<SecKeyRef> privateKeyRef,
  ) {
    return _SecIdentityCopyPrivateKey(
      identityRef,
      privateKeyRef,
    );
  }

  late final _SecIdentityCopyPrivateKeyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef,
              ffi.Pointer<SecKeyRef>)>>('SecIdentityCopyPrivateKey');
  late final _SecIdentityCopyPrivateKey = _SecIdentityCopyPrivateKeyPtr
      .asFunction<int Function(SecIdentityRef, ffi.Pointer<SecKeyRef>)>();

  int SecIdentityCopyPreference(
    CFStringRef name,
    int keyUsage,
    CFArrayRef validIssuers,
    ffi.Pointer<SecIdentityRef> identity,
  ) {
    return _SecIdentityCopyPreference(
      name,
      keyUsage,
      validIssuers,
      identity,
    );
  }

  late final _SecIdentityCopyPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, CSSM_KEYUSE, CFArrayRef,
              ffi.Pointer<SecIdentityRef>)>>('SecIdentityCopyPreference');
  late final _SecIdentityCopyPreference =
      _SecIdentityCopyPreferencePtr.asFunction<
          int Function(
              CFStringRef, int, CFArrayRef, ffi.Pointer<SecIdentityRef>)>();

  SecIdentityRef SecIdentityCopyPreferred(
    CFStringRef name,
    CFArrayRef keyUsage,
    CFArrayRef validIssuers,
  ) {
    return _SecIdentityCopyPreferred(
      name,
      keyUsage,
      validIssuers,
    );
  }

  late final _SecIdentityCopyPreferredPtr = _lookup<
      ffi.NativeFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef,
              CFArrayRef)>>('SecIdentityCopyPreferred');
  late final _SecIdentityCopyPreferred =
      _SecIdentityCopyPreferredPtr.asFunction<
          SecIdentityRef Function(CFStringRef, CFArrayRef, CFArrayRef)>();

  int SecIdentitySetPreference(
    SecIdentityRef identity,
    CFStringRef name,
    int keyUsage,
  ) {
    return _SecIdentitySetPreference(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferencePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CSSM_KEYUSE)>>('SecIdentitySetPreference');
  late final _SecIdentitySetPreference = _SecIdentitySetPreferencePtr
      .asFunction<int Function(SecIdentityRef, CFStringRef, int)>();

  int SecIdentitySetPreferred(
    SecIdentityRef identity,
    CFStringRef name,
    CFArrayRef keyUsage,
  ) {
    return _SecIdentitySetPreferred(
      identity,
      name,
      keyUsage,
    );
  }

  late final _SecIdentitySetPreferredPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SecIdentityRef, CFStringRef,
              CFArrayRef)>>('SecIdentitySetPreferred');
  late final _SecIdentitySetPreferred = _SecIdentitySetPreferredPtr.asFunction<
      int Function(SecIdentityRef, CFStringRef, CFArrayRef)>();

  int SecIdentityCopySystemIdentity(
    CFStringRef domain,
    ffi.Pointer<SecIdentityRef> idRef,
    ffi.Pointer<CFStringRef> actualDomain,
  ) {
    return _SecIdentityCopySystemIdentity(
      domain,
      idRef,
      actualDomain,
    );
  }

  late final _SecIdentityCopySystemIdentityPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>>('SecIdentityCopySystemIdentity');
  late final _SecIdentityCopySystemIdentity =
      _SecIdentityCopySystemIdentityPtr.asFunction<
          int Function(CFStringRef, ffi.Pointer<SecIdentityRef>,
              ffi.Pointer<CFStringRef>)>();

  int SecIdentitySetSystemIdentity(
    CFStringRef domain,
    SecIdentityRef idRef,
  ) {
    return _SecIdentitySetSystemIdentity(
      domain,
      idRef,
    );
  }

  late final _SecIdentitySetSystemIdentityPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(CFStringRef, SecIdentityRef)>>(
      'SecIdentitySetSystemIdentity');
  late final _SecIdentitySetSystemIdentity = _SecIdentitySetSystemIdentityPtr
      .asFunction<int Function(CFStringRef, SecIdentityRef)>();

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainDefault =
      _lookup<CFStringRef>('kSecIdentityDomainDefault');

  CFStringRef get kSecIdentityDomainDefault => _kSecIdentityDomainDefault.value;

  set kSecIdentityDomainDefault(CFStringRef value) =>
      _kSecIdentityDomainDefault.value = value;

  late final ffi.Pointer<CFStringRef> _kSecIdentityDomainKerberosKDC =
      _lookup<CFStringRef>('kSecIdentityDomainKerberosKDC');

  CFStringRef get kSecIdentityDomainKerberosKDC =>
      _kSecIdentityDomainKerberosKDC.value;

  set kSecIdentityDomainKerberosKDC(CFStringRef value) =>
      _kSecIdentityDomainKerberosKDC.value = value;

  sec_trust_t sec_trust_create(
    SecTrustRef trust,
  ) {
    return _sec_trust_create(
      trust,
    );
  }

  late final _sec_trust_createPtr =
      _lookup<ffi.NativeFunction<sec_trust_t Function(SecTrustRef)>>(
          'sec_trust_create');
  late final _sec_trust_create =
      _sec_trust_createPtr.asFunction<sec_trust_t Function(SecTrustRef)>();

  SecTrustRef sec_trust_copy_ref(
    sec_trust_t trust,
  ) {
    return _sec_trust_copy_ref(
      trust,
    );
  }

  late final _sec_trust_copy_refPtr =
      _lookup<ffi.NativeFunction<SecTrustRef Function(sec_trust_t)>>(
          'sec_trust_copy_ref');
  late final _sec_trust_copy_ref =
      _sec_trust_copy_refPtr.asFunction<SecTrustRef Function(sec_trust_t)>();

  sec_identity_t sec_identity_create(
    SecIdentityRef identity,
  ) {
    return _sec_identity_create(
      identity,
    );
  }

  late final _sec_identity_createPtr =
      _lookup<ffi.NativeFunction<sec_identity_t Function(SecIdentityRef)>>(
          'sec_identity_create');
  late final _sec_identity_create = _sec_identity_createPtr
      .asFunction<sec_identity_t Function(SecIdentityRef)>();

  sec_identity_t sec_identity_create_with_certificates(
    SecIdentityRef identity,
    CFArrayRef certificates,
  ) {
    return _sec_identity_create_with_certificates(
      identity,
      certificates,
    );
  }

  late final _sec_identity_create_with_certificatesPtr = _lookup<
      ffi.NativeFunction<
          sec_identity_t Function(SecIdentityRef,
              CFArrayRef)>>('sec_identity_create_with_certificates');
  late final _sec_identity_create_with_certificates =
      _sec_identity_create_with_certificatesPtr
          .asFunction<sec_identity_t Function(SecIdentityRef, CFArrayRef)>();

  SecIdentityRef sec_identity_copy_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_ref(
      identity,
    );
  }

  late final _sec_identity_copy_refPtr =
      _lookup<ffi.NativeFunction<SecIdentityRef Function(sec_identity_t)>>(
          'sec_identity_copy_ref');
  late final _sec_identity_copy_ref = _sec_identity_copy_refPtr
      .asFunction<SecIdentityRef Function(sec_identity_t)>();

  CFArrayRef sec_identity_copy_certificates_ref(
    sec_identity_t identity,
  ) {
    return _sec_identity_copy_certificates_ref(
      identity,
    );
  }

  late final _sec_identity_copy_certificates_refPtr =
      _lookup<ffi.NativeFunction<CFArrayRef Function(sec_identity_t)>>(
          'sec_identity_copy_certificates_ref');
  late final _sec_identity_copy_certificates_ref =
      _sec_identity_copy_certificates_refPtr
          .asFunction<CFArrayRef Function(sec_identity_t)>();

  sec_certificate_t sec_certificate_create(
    SecCertificateRef certificate,
  ) {
    return _sec_certificate_create(
      certificate,
    );
  }

  late final _sec_certificate_createPtr = _lookup<
          ffi.NativeFunction<sec_certificate_t Function(SecCertificateRef)>>(
      'sec_certificate_create');
  late final _sec_certificate_create = _sec_certificate_createPtr
      .asFunction<sec_certificate_t Function(SecCertificateRef)>();

  SecCertificateRef sec_certificate_copy_ref(
    sec_certificate_t certificate,
  ) {
    return _sec_certificate_copy_ref(
      certificate,
    );
  }

  late final _sec_certificate_copy_refPtr = _lookup<
          ffi.NativeFunction<SecCertificateRef Function(sec_certificate_t)>>(
      'sec_certificate_copy_ref');
  late final _sec_certificate_copy_ref = _sec_certificate_copy_refPtr
      .asFunction<SecCertificateRef Function(sec_certificate_t)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_negotiated_protocol(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_protocol');
  late final _sec_protocol_metadata_get_negotiated_protocol =
      _sec_protocol_metadata_get_negotiated_protocolPtr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_copy_peer_public_key(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_copy_peer_public_key(
      metadata,
    );
  }

  late final _sec_protocol_metadata_copy_peer_public_keyPtr = _lookup<
          ffi.NativeFunction<
              dispatch_data_t Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_copy_peer_public_key');
  late final _sec_protocol_metadata_copy_peer_public_key =
      _sec_protocol_metadata_copy_peer_public_keyPtr
          .asFunction<dispatch_data_t Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_protocol_version(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr =
      _lookup<
              ffi.NativeFunction<
                  tls_protocol_version_t Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_tls_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_tls_protocol_version =
      _sec_protocol_metadata_get_negotiated_tls_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_protocol_version(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_protocol_version(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_protocol_versionPtr =
      _lookup<
              ffi.NativeFunction<
                  SSLProtocol Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_negotiated_protocol_version');
  late final _sec_protocol_metadata_get_negotiated_protocol_version =
      _sec_protocol_metadata_get_negotiated_protocol_versionPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_tls_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_tls_ciphersuite(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr = _lookup<
          ffi.NativeFunction<
              tls_ciphersuite_t Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_tls_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_tls_ciphersuite =
      _sec_protocol_metadata_get_negotiated_tls_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  int sec_protocol_metadata_get_negotiated_ciphersuite(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_negotiated_ciphersuite(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_negotiated_ciphersuitePtr = _lookup<
          ffi.NativeFunction<SSLCipherSuite Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_negotiated_ciphersuite');
  late final _sec_protocol_metadata_get_negotiated_ciphersuite =
      _sec_protocol_metadata_get_negotiated_ciphersuitePtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_get_early_data_accepted(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_early_data_accepted(
          metadata,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_get_early_data_acceptedPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_metadata_t)>>(
          'sec_protocol_metadata_get_early_data_accepted');
  late final _sec_protocol_metadata_get_early_data_accepted =
      _sec_protocol_metadata_get_early_data_acceptedPtr
          .asFunction<int Function(sec_protocol_metadata_t)>();

  ffi.Pointer<pkg_ffi.Char> sec_protocol_metadata_get_server_name(
    sec_protocol_metadata_t metadata,
  ) {
    return _sec_protocol_metadata_get_server_name(
      metadata,
    );
  }

  late final _sec_protocol_metadata_get_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_get_server_name');
  late final _sec_protocol_metadata_get_server_name =
      _sec_protocol_metadata_get_server_namePtr.asFunction<
          ffi.Pointer<pkg_ffi.Char> Function(sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_peers_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_peers_are_equal(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_peers_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_peers_are_equal');
  late final _sec_protocol_metadata_peers_are_equal =
      _sec_protocol_metadata_peers_are_equalPtr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  bool sec_protocol_metadata_challenge_parameters_are_equal(
    sec_protocol_metadata_t metadataA,
    sec_protocol_metadata_t metadataB,
  ) {
    return _sec_protocol_metadata_challenge_parameters_are_equal(
          metadataA,
          metadataB,
        ) !=
        0;
  }

  late final _sec_protocol_metadata_challenge_parameters_are_equalPtr = _lookup<
          ffi.NativeFunction<
              ffi.Uint8 Function(
                  sec_protocol_metadata_t, sec_protocol_metadata_t)>>(
      'sec_protocol_metadata_challenge_parameters_are_equal');
  late final _sec_protocol_metadata_challenge_parameters_are_equal =
      _sec_protocol_metadata_challenge_parameters_are_equalPtr.asFunction<
          int Function(sec_protocol_metadata_t, sec_protocol_metadata_t)>();

  dispatch_data_t sec_protocol_metadata_create_secret(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret(
      metadata,
      label_len,
      label,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secretPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('sec_protocol_metadata_create_secret');
  late final _sec_protocol_metadata_create_secret =
      _sec_protocol_metadata_create_secretPtr.asFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t, int, ffi.Pointer<pkg_ffi.Char>, int)>();

  dispatch_data_t sec_protocol_metadata_create_secret_with_context(
    sec_protocol_metadata_t metadata,
    int label_len,
    ffi.Pointer<pkg_ffi.Char> label,
    int context_len,
    ffi.Pointer<ffi.Uint8> context,
    int exporter_length,
  ) {
    return _sec_protocol_metadata_create_secret_with_context(
      metadata,
      label_len,
      label,
      context_len,
      context,
      exporter_length,
    );
  }

  late final _sec_protocol_metadata_create_secret_with_contextPtr = _lookup<
      ffi.NativeFunction<
          dispatch_data_t Function(
              sec_protocol_metadata_t,
              pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              pkg_ffi
                  .Size)>>('sec_protocol_metadata_create_secret_with_context');
  late final _sec_protocol_metadata_create_secret_with_context =
      _sec_protocol_metadata_create_secret_with_contextPtr.asFunction<
          dispatch_data_t Function(sec_protocol_metadata_t, int,
              ffi.Pointer<pkg_ffi.Char>, int, ffi.Pointer<ffi.Uint8>, int)>();

  bool sec_protocol_options_are_equal(
    sec_protocol_options_t optionsA,
    sec_protocol_options_t optionsB,
  ) {
    return _sec_protocol_options_are_equal(
          optionsA,
          optionsB,
        ) !=
        0;
  }

  late final _sec_protocol_options_are_equalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(sec_protocol_options_t,
              sec_protocol_options_t)>>('sec_protocol_options_are_equal');
  late final _sec_protocol_options_are_equal =
      _sec_protocol_options_are_equalPtr.asFunction<
          int Function(sec_protocol_options_t, sec_protocol_options_t)>();

  void sec_protocol_options_set_local_identity(
    sec_protocol_options_t options,
    sec_identity_t identity,
  ) {
    return _sec_protocol_options_set_local_identity(
      options,
      identity,
    );
  }

  late final _sec_protocol_options_set_local_identityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              sec_identity_t)>>('sec_protocol_options_set_local_identity');
  late final _sec_protocol_options_set_local_identity =
      _sec_protocol_options_set_local_identityPtr
          .asFunction<void Function(sec_protocol_options_t, sec_identity_t)>();

  void sec_protocol_options_append_tls_ciphersuite(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuitePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, tls_ciphersuite_t)>>(
      'sec_protocol_options_append_tls_ciphersuite');
  late final _sec_protocol_options_append_tls_ciphersuite =
      _sec_protocol_options_append_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite(
    sec_protocol_options_t options,
    int ciphersuite,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite(
      options,
      ciphersuite,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              SSLCipherSuite)>>('sec_protocol_options_add_tls_ciphersuite');
  late final _sec_protocol_options_add_tls_ciphersuite =
      _sec_protocol_options_add_tls_ciphersuitePtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_append_tls_ciphersuite_group(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_append_tls_ciphersuite_group(
      options,
      group,
    );
  }

  late final _sec_protocol_options_append_tls_ciphersuite_groupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, tls_ciphersuite_group_t)>>(
      'sec_protocol_options_append_tls_ciphersuite_group');
  late final _sec_protocol_options_append_tls_ciphersuite_group =
      _sec_protocol_options_append_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_add_tls_ciphersuite_group(
    sec_protocol_options_t options,
    int group,
  ) {
    return _sec_protocol_options_add_tls_ciphersuite_group(
      options,
      group,
    );
  }

  late final _sec_protocol_options_add_tls_ciphersuite_groupPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, SSLCiphersuiteGroup)>>(
      'sec_protocol_options_add_tls_ciphersuite_group');
  late final _sec_protocol_options_add_tls_ciphersuite_group =
      _sec_protocol_options_add_tls_ciphersuite_groupPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_min_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_min_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_min_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              SSLProtocol)>>('sec_protocol_options_set_tls_min_version');
  late final _sec_protocol_options_set_tls_min_version =
      _sec_protocol_options_set_tls_min_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_min_tls_protocol_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_min_tls_protocol_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_min_tls_protocol_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, tls_protocol_version_t)>>(
      'sec_protocol_options_set_min_tls_protocol_version');
  late final _sec_protocol_options_set_min_tls_protocol_version =
      _sec_protocol_options_set_min_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_min_tls_protocol_version() {
    return _sec_protocol_options_get_default_min_tls_protocol_version();
  }

  late final _sec_protocol_options_get_default_min_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<tls_protocol_version_t Function()>>(
          'sec_protocol_options_get_default_min_tls_protocol_version');
  late final _sec_protocol_options_get_default_min_tls_protocol_version =
      _sec_protocol_options_get_default_min_tls_protocol_versionPtr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_min_dtls_protocol_version() {
    return _sec_protocol_options_get_default_min_dtls_protocol_version();
  }

  late final _sec_protocol_options_get_default_min_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<tls_protocol_version_t Function()>>(
          'sec_protocol_options_get_default_min_dtls_protocol_version');
  late final _sec_protocol_options_get_default_min_dtls_protocol_version =
      _sec_protocol_options_get_default_min_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  void sec_protocol_options_set_tls_max_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_tls_max_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_tls_max_versionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              SSLProtocol)>>('sec_protocol_options_set_tls_max_version');
  late final _sec_protocol_options_set_tls_max_version =
      _sec_protocol_options_set_tls_max_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_max_tls_protocol_version(
    sec_protocol_options_t options,
    int version,
  ) {
    return _sec_protocol_options_set_max_tls_protocol_version(
      options,
      version,
    );
  }

  late final _sec_protocol_options_set_max_tls_protocol_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, tls_protocol_version_t)>>(
      'sec_protocol_options_set_max_tls_protocol_version');
  late final _sec_protocol_options_set_max_tls_protocol_version =
      _sec_protocol_options_set_max_tls_protocol_versionPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  int sec_protocol_options_get_default_max_tls_protocol_version() {
    return _sec_protocol_options_get_default_max_tls_protocol_version();
  }

  late final _sec_protocol_options_get_default_max_tls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<tls_protocol_version_t Function()>>(
          'sec_protocol_options_get_default_max_tls_protocol_version');
  late final _sec_protocol_options_get_default_max_tls_protocol_version =
      _sec_protocol_options_get_default_max_tls_protocol_versionPtr
          .asFunction<int Function()>();

  int sec_protocol_options_get_default_max_dtls_protocol_version() {
    return _sec_protocol_options_get_default_max_dtls_protocol_version();
  }

  late final _sec_protocol_options_get_default_max_dtls_protocol_versionPtr =
      _lookup<ffi.NativeFunction<tls_protocol_version_t Function()>>(
          'sec_protocol_options_get_default_max_dtls_protocol_version');
  late final _sec_protocol_options_get_default_max_dtls_protocol_version =
      _sec_protocol_options_get_default_max_dtls_protocol_versionPtr
          .asFunction<int Function()>();

  bool sec_protocol_options_get_enable_encrypted_client_hello(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_enable_encrypted_client_hello(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_enable_encrypted_client_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_enable_encrypted_client_hello');
  late final _sec_protocol_options_get_enable_encrypted_client_hello =
      _sec_protocol_options_get_enable_encrypted_client_helloPtr
          .asFunction<int Function(sec_protocol_options_t)>();

  bool sec_protocol_options_get_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
  ) {
    return _sec_protocol_options_get_quic_use_legacy_codepoint(
          options,
        ) !=
        0;
  }

  late final _sec_protocol_options_get_quic_use_legacy_codepointPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(sec_protocol_options_t)>>(
          'sec_protocol_options_get_quic_use_legacy_codepoint');
  late final _sec_protocol_options_get_quic_use_legacy_codepoint =
      _sec_protocol_options_get_quic_use_legacy_codepointPtr
          .asFunction<int Function(sec_protocol_options_t)>();

  void sec_protocol_options_add_tls_application_protocol(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> application_protocol,
  ) {
    return _sec_protocol_options_add_tls_application_protocol(
      options,
      application_protocol,
    );
  }

  late final _sec_protocol_options_add_tls_application_protocolPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_add_tls_application_protocol');
  late final _sec_protocol_options_add_tls_application_protocol =
      _sec_protocol_options_add_tls_application_protocolPtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_server_name(
    sec_protocol_options_t options,
    ffi.Pointer<pkg_ffi.Char> server_name,
  ) {
    return _sec_protocol_options_set_tls_server_name(
      options,
      server_name,
    );
  }

  late final _sec_protocol_options_set_tls_server_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>>(
      'sec_protocol_options_set_tls_server_name');
  late final _sec_protocol_options_set_tls_server_name =
      _sec_protocol_options_set_tls_server_namePtr.asFunction<
          void Function(sec_protocol_options_t, ffi.Pointer<pkg_ffi.Char>)>();

  void sec_protocol_options_set_tls_diffie_hellman_parameters(
    sec_protocol_options_t options,
    dispatch_data_t params,
  ) {
    return _sec_protocol_options_set_tls_diffie_hellman_parameters(
      options,
      params,
    );
  }

  late final _sec_protocol_options_set_tls_diffie_hellman_parametersPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_diffie_hellman_parameters');
  late final _sec_protocol_options_set_tls_diffie_hellman_parameters =
      _sec_protocol_options_set_tls_diffie_hellman_parametersPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_add_pre_shared_key(
    sec_protocol_options_t options,
    dispatch_data_t psk,
    dispatch_data_t psk_identity,
  ) {
    return _sec_protocol_options_add_pre_shared_key(
      options,
      psk,
      psk_identity,
    );
  }

  late final _sec_protocol_options_add_pre_shared_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t, dispatch_data_t,
              dispatch_data_t)>>('sec_protocol_options_add_pre_shared_key');
  late final _sec_protocol_options_add_pre_shared_key =
      _sec_protocol_options_add_pre_shared_keyPtr.asFunction<
          void Function(
              sec_protocol_options_t, dispatch_data_t, dispatch_data_t)>();

  void sec_protocol_options_set_tls_pre_shared_key_identity_hint(
    sec_protocol_options_t options,
    dispatch_data_t psk_identity_hint,
  ) {
    return _sec_protocol_options_set_tls_pre_shared_key_identity_hint(
      options,
      psk_identity_hint,
    );
  }

  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, dispatch_data_t)>>(
          'sec_protocol_options_set_tls_pre_shared_key_identity_hint');
  late final _sec_protocol_options_set_tls_pre_shared_key_identity_hint =
      _sec_protocol_options_set_tls_pre_shared_key_identity_hintPtr
          .asFunction<void Function(sec_protocol_options_t, dispatch_data_t)>();

  void sec_protocol_options_set_tls_tickets_enabled(
    sec_protocol_options_t options,
    bool tickets_enabled,
  ) {
    return _sec_protocol_options_set_tls_tickets_enabled(
      options,
      tickets_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_tickets_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_tickets_enabled');
  late final _sec_protocol_options_set_tls_tickets_enabled =
      _sec_protocol_options_set_tls_tickets_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_is_fallback_attempt(
    sec_protocol_options_t options,
    bool is_fallback_attempt,
  ) {
    return _sec_protocol_options_set_tls_is_fallback_attempt(
      options,
      is_fallback_attempt ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_is_fallback_attemptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_is_fallback_attempt');
  late final _sec_protocol_options_set_tls_is_fallback_attempt =
      _sec_protocol_options_set_tls_is_fallback_attemptPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_resumption_enabled(
    sec_protocol_options_t options,
    bool resumption_enabled,
  ) {
    return _sec_protocol_options_set_tls_resumption_enabled(
      options,
      resumption_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_resumption_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_resumption_enabled');
  late final _sec_protocol_options_set_tls_resumption_enabled =
      _sec_protocol_options_set_tls_resumption_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_false_start_enabled(
    sec_protocol_options_t options,
    bool false_start_enabled,
  ) {
    return _sec_protocol_options_set_tls_false_start_enabled(
      options,
      false_start_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_false_start_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_false_start_enabled');
  late final _sec_protocol_options_set_tls_false_start_enabled =
      _sec_protocol_options_set_tls_false_start_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_ocsp_enabled(
    sec_protocol_options_t options,
    bool ocsp_enabled,
  ) {
    return _sec_protocol_options_set_tls_ocsp_enabled(
      options,
      ocsp_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_ocsp_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_ocsp_enabled');
  late final _sec_protocol_options_set_tls_ocsp_enabled =
      _sec_protocol_options_set_tls_ocsp_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_sct_enabled(
    sec_protocol_options_t options,
    bool sct_enabled,
  ) {
    return _sec_protocol_options_set_tls_sct_enabled(
      options,
      sct_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_sct_enabledPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(sec_protocol_options_t,
              ffi.Uint8)>>('sec_protocol_options_set_tls_sct_enabled');
  late final _sec_protocol_options_set_tls_sct_enabled =
      _sec_protocol_options_set_tls_sct_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_tls_renegotiation_enabled(
    sec_protocol_options_t options,
    bool renegotiation_enabled,
  ) {
    return _sec_protocol_options_set_tls_renegotiation_enabled(
      options,
      renegotiation_enabled ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_tls_renegotiation_enabledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_tls_renegotiation_enabled');
  late final _sec_protocol_options_set_tls_renegotiation_enabled =
      _sec_protocol_options_set_tls_renegotiation_enabledPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_required(
    sec_protocol_options_t options,
    bool peer_authentication_required,
  ) {
    return _sec_protocol_options_set_peer_authentication_required(
      options,
      peer_authentication_required ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_requiredPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_required');
  late final _sec_protocol_options_set_peer_authentication_required =
      _sec_protocol_options_set_peer_authentication_requiredPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_peer_authentication_optional(
    sec_protocol_options_t options,
    bool peer_authentication_optional,
  ) {
    return _sec_protocol_options_set_peer_authentication_optional(
      options,
      peer_authentication_optional ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_peer_authentication_optionalPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_peer_authentication_optional');
  late final _sec_protocol_options_set_peer_authentication_optional =
      _sec_protocol_options_set_peer_authentication_optionalPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_enable_encrypted_client_hello(
    sec_protocol_options_t options,
    bool enable_encrypted_client_hello,
  ) {
    return _sec_protocol_options_set_enable_encrypted_client_hello(
      options,
      enable_encrypted_client_hello ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_enable_encrypted_client_helloPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
          'sec_protocol_options_set_enable_encrypted_client_hello');
  late final _sec_protocol_options_set_enable_encrypted_client_hello =
      _sec_protocol_options_set_enable_encrypted_client_helloPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  void sec_protocol_options_set_quic_use_legacy_codepoint(
    sec_protocol_options_t options,
    bool quic_use_legacy_codepoint,
  ) {
    return _sec_protocol_options_set_quic_use_legacy_codepoint(
      options,
      quic_use_legacy_codepoint ? 1 : 0,
    );
  }

  late final _sec_protocol_options_set_quic_use_legacy_codepointPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(sec_protocol_options_t, ffi.Uint8)>>(
      'sec_protocol_options_set_quic_use_legacy_codepoint');
  late final _sec_protocol_options_set_quic_use_legacy_codepoint =
      _sec_protocol_options_set_quic_use_legacy_codepointPtr
          .asFunction<void Function(sec_protocol_options_t, int)>();

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_default =
      _lookup<CFStringRef>('kSSLSessionConfig_default');

  CFStringRef get kSSLSessionConfig_default => _kSSLSessionConfig_default.value;

  set kSSLSessionConfig_default(CFStringRef value) =>
      _kSSLSessionConfig_default.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1 =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1');

  CFStringRef get kSSLSessionConfig_ATSv1 => _kSSLSessionConfig_ATSv1.value;

  set kSSLSessionConfig_ATSv1(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_ATSv1_noPFS =
      _lookup<CFStringRef>('kSSLSessionConfig_ATSv1_noPFS');

  CFStringRef get kSSLSessionConfig_ATSv1_noPFS =>
      _kSSLSessionConfig_ATSv1_noPFS.value;

  set kSSLSessionConfig_ATSv1_noPFS(CFStringRef value) =>
      _kSSLSessionConfig_ATSv1_noPFS.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_standard =
      _lookup<CFStringRef>('kSSLSessionConfig_standard');

  CFStringRef get kSSLSessionConfig_standard =>
      _kSSLSessionConfig_standard.value;

  set kSSLSessionConfig_standard(CFStringRef value) =>
      _kSSLSessionConfig_standard.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_RC4_fallback');

  CFStringRef get kSSLSessionConfig_RC4_fallback =>
      _kSSLSessionConfig_RC4_fallback.value;

  set kSSLSessionConfig_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_fallback =>
      _kSSLSessionConfig_TLSv1_fallback.value;

  set kSSLSessionConfig_TLSv1_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_RC4_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_RC4_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_RC4_fallback =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value;

  set kSSLSessionConfig_TLSv1_RC4_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_RC4_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy');

  CFStringRef get kSSLSessionConfig_legacy => _kSSLSessionConfig_legacy.value;

  set kSSLSessionConfig_legacy(CFStringRef value) =>
      _kSSLSessionConfig_legacy.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_legacy_DHE =
      _lookup<CFStringRef>('kSSLSessionConfig_legacy_DHE');

  CFStringRef get kSSLSessionConfig_legacy_DHE =>
      _kSSLSessionConfig_legacy_DHE.value;

  set kSSLSessionConfig_legacy_DHE(CFStringRef value) =>
      _kSSLSessionConfig_legacy_DHE.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_anonymous =
      _lookup<CFStringRef>('kSSLSessionConfig_anonymous');

  CFStringRef get kSSLSessionConfig_anonymous =>
      _kSSLSessionConfig_anonymous.value;

  set kSSLSessionConfig_anonymous(CFStringRef value) =>
      _kSSLSessionConfig_anonymous.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_3DES_fallback');

  CFStringRef get kSSLSessionConfig_3DES_fallback =>
      _kSSLSessionConfig_3DES_fallback.value;

  set kSSLSessionConfig_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_3DES_fallback.value = value;

  late final ffi.Pointer<CFStringRef> _kSSLSessionConfig_TLSv1_3DES_fallback =
      _lookup<CFStringRef>('kSSLSessionConfig_TLSv1_3DES_fallback');

  CFStringRef get kSSLSessionConfig_TLSv1_3DES_fallback =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value;

  set kSSLSessionConfig_TLSv1_3DES_fallback(CFStringRef value) =>
      _kSSLSessionConfig_TLSv1_3DES_fallback.value = value;

  int SSLContextGetTypeID() {
    return _SSLContextGetTypeID();
  }

  late final _SSLContextGetTypeIDPtr =
      _lookup<ffi.NativeFunction<CFTypeID Function()>>('SSLContextGetTypeID');
  late final _SSLContextGetTypeID =
      _SSLContextGetTypeIDPtr.asFunction<int Function()>();

  SSLContextRef SSLCreateContext(
    CFAllocatorRef alloc,
    int protocolSide,
    int connectionType,
  ) {
    return _SSLCreateContext(
      alloc,
      protocolSide,
      connectionType,
    );
  }

  late final _SSLCreateContextPtr = _lookup<
      ffi.NativeFunction<
          SSLContextRef Function(CFAllocatorRef, SSLProtocolSide,
              SSLConnectionType)>>('SSLCreateContext');
  late final _SSLCreateContext = _SSLCreateContextPtr.asFunction<
      SSLContextRef Function(CFAllocatorRef, int, int)>();

  int SSLNewContext(
    int isServer,
    ffi.Pointer<SSLContextRef> contextPtr,
  ) {
    return _SSLNewContext(
      isServer,
      contextPtr,
    );
  }

  late final _SSLNewContextPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              Boolean, ffi.Pointer<SSLContextRef>)>>('SSLNewContext');
  late final _SSLNewContext = _SSLNewContextPtr.asFunction<
      int Function(int, ffi.Pointer<SSLContextRef>)>();

  int SSLDisposeContext(
    SSLContextRef context,
  ) {
    return _SSLDisposeContext(
      context,
    );
  }

  late final _SSLDisposeContextPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLDisposeContext');
  late final _SSLDisposeContext =
      _SSLDisposeContextPtr.asFunction<int Function(SSLContextRef)>();

  int SSLGetSessionState(
    SSLContextRef context,
    ffi.Pointer<SSLSessionState> state,
  ) {
    return _SSLGetSessionState(
      context,
      state,
    );
  }

  late final _SSLGetSessionStatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLSessionState>)>>('SSLGetSessionState');
  late final _SSLGetSessionState = _SSLGetSessionStatePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLSessionState>)>();

  int SSLSetSessionOption(
    SSLContextRef context,
    int option,
    int value,
  ) {
    return _SSLSetSessionOption(
      context,
      option,
      value,
    );
  }

  late final _SSLSetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, SSLSessionOption,
              Boolean)>>('SSLSetSessionOption');
  late final _SSLSetSessionOption = _SSLSetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, int)>();

  int SSLGetSessionOption(
    SSLContextRef context,
    int option,
    ffi.Pointer<Boolean> value,
  ) {
    return _SSLGetSessionOption(
      context,
      option,
      value,
    );
  }

  late final _SSLGetSessionOptionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, SSLSessionOption,
              ffi.Pointer<Boolean>)>>('SSLGetSessionOption');
  late final _SSLGetSessionOption = _SSLGetSessionOptionPtr.asFunction<
      int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetIOFuncs(
    SSLContextRef context,
    SSLReadFunc readFunc,
    SSLWriteFunc writeFunc,
  ) {
    return _SSLSetIOFuncs(
      context,
      readFunc,
      writeFunc,
    );
  }

  late final _SSLSetIOFuncsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLReadFunc, SSLWriteFunc)>>('SSLSetIOFuncs');
  late final _SSLSetIOFuncs = _SSLSetIOFuncsPtr.asFunction<
      int Function(SSLContextRef, SSLReadFunc, SSLWriteFunc)>();

  int SSLSetSessionConfig(
    SSLContextRef context,
    CFStringRef config,
  ) {
    return _SSLSetSessionConfig(
      context,
      config,
    );
  }

  late final _SSLSetSessionConfigPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, CFStringRef)>>(
      'SSLSetSessionConfig');
  late final _SSLSetSessionConfig = _SSLSetSessionConfigPtr.asFunction<
      int Function(SSLContextRef, CFStringRef)>();

  int SSLSetProtocolVersionMin(
    SSLContextRef context,
    int minVersion,
  ) {
    return _SSLSetProtocolVersionMin(
      context,
      minVersion,
    );
  }

  late final _SSLSetProtocolVersionMinPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, SSLProtocol)>>(
      'SSLSetProtocolVersionMin');
  late final _SSLSetProtocolVersionMin = _SSLSetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMin(
    SSLContextRef context,
    ffi.Pointer<SSLProtocol> minVersion,
  ) {
    return _SSLGetProtocolVersionMin(
      context,
      minVersion,
    );
  }

  late final _SSLGetProtocolVersionMinPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLProtocol>)>>('SSLGetProtocolVersionMin');
  late final _SSLGetProtocolVersionMin = _SSLGetProtocolVersionMinPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<SSLProtocol>)>();

  int SSLSetProtocolVersionMax(
    SSLContextRef context,
    int maxVersion,
  ) {
    return _SSLSetProtocolVersionMax(
      context,
      maxVersion,
    );
  }

  late final _SSLSetProtocolVersionMaxPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, SSLProtocol)>>(
      'SSLSetProtocolVersionMax');
  late final _SSLSetProtocolVersionMax = _SSLSetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersionMax(
    SSLContextRef context,
    ffi.Pointer<SSLProtocol> maxVersion,
  ) {
    return _SSLGetProtocolVersionMax(
      context,
      maxVersion,
    );
  }

  late final _SSLGetProtocolVersionMaxPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLProtocol>)>>('SSLGetProtocolVersionMax');
  late final _SSLGetProtocolVersionMax = _SSLGetProtocolVersionMaxPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<SSLProtocol>)>();

  int SSLSetProtocolVersionEnabled(
    SSLContextRef context,
    int protocol,
    int enable,
  ) {
    return _SSLSetProtocolVersionEnabled(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLSetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, SSLProtocol,
              Boolean)>>('SSLSetProtocolVersionEnabled');
  late final _SSLSetProtocolVersionEnabled = _SSLSetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, int)>();

  int SSLGetProtocolVersionEnabled(
    SSLContextRef context,
    int protocol,
    ffi.Pointer<Boolean> enable,
  ) {
    return _SSLGetProtocolVersionEnabled(
      context,
      protocol,
      enable,
    );
  }

  late final _SSLGetProtocolVersionEnabledPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, SSLProtocol,
              ffi.Pointer<Boolean>)>>('SSLGetProtocolVersionEnabled');
  late final _SSLGetProtocolVersionEnabled = _SSLGetProtocolVersionEnabledPtr
      .asFunction<int Function(SSLContextRef, int, ffi.Pointer<Boolean>)>();

  int SSLSetProtocolVersion(
    SSLContextRef context,
    int version,
  ) {
    return _SSLSetProtocolVersion(
      context,
      version,
    );
  }

  late final _SSLSetProtocolVersionPtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, SSLProtocol)>>(
      'SSLSetProtocolVersion');
  late final _SSLSetProtocolVersion =
      _SSLSetProtocolVersionPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<SSLProtocol> protocol,
  ) {
    return _SSLGetProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetProtocolVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLProtocol>)>>('SSLGetProtocolVersion');
  late final _SSLGetProtocolVersion = _SSLGetProtocolVersionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLProtocol>)>();

  int SSLSetCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetCertificate');
  late final _SSLSetCertificate = _SSLSetCertificatePtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetConnection(
    SSLContextRef context,
    SSLConnectionRef connection,
  ) {
    return _SSLSetConnection(
      context,
      connection,
    );
  }

  late final _SSLSetConnectionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLConnectionRef)>>('SSLSetConnection');
  late final _SSLSetConnection = _SSLSetConnectionPtr.asFunction<
      int Function(SSLContextRef, SSLConnectionRef)>();

  int SSLGetConnection(
    SSLContextRef context,
    ffi.Pointer<SSLConnectionRef> connection,
  ) {
    return _SSLGetConnection(
      context,
      connection,
    );
  }

  late final _SSLGetConnectionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLConnectionRef>)>>('SSLGetConnection');
  late final _SSLGetConnection = _SSLGetConnectionPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLConnectionRef>)>();

  int SSLSetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    int peerNameLen,
  ) {
    return _SSLSetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLSetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Size)>>('SSLSetPeerDomainName');
  late final _SSLSetPeerDomainName = _SSLSetPeerDomainNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>, int)>();

  int SSLGetPeerDomainNameLength(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainNameLength(
      context,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainNameLength');
  late final _SSLGetPeerDomainNameLength = _SSLGetPeerDomainNameLengthPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetPeerDomainName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLGetPeerDomainName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLGetPeerDomainNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerDomainName');
  late final _SSLGetPeerDomainName = _SSLGetPeerDomainNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerNameLength(
    SSLContextRef ctx,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerNameLength(
      ctx,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNameLengthPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerNameLength');
  late final _SSLCopyRequestedPeerNameLength =
      _SSLCopyRequestedPeerNameLengthPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLCopyRequestedPeerName(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Char> peerName,
    ffi.Pointer<pkg_ffi.Size> peerNameLen,
  ) {
    return _SSLCopyRequestedPeerName(
      context,
      peerName,
      peerNameLen,
    );
  }

  late final _SSLCopyRequestedPeerNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLCopyRequestedPeerName');
  late final _SSLCopyRequestedPeerName =
      _SSLCopyRequestedPeerNamePtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Char>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetDatagramHelloCookie(
    SSLContextRef dtlsContext,
    ffi.Pointer<ffi.Void> cookie,
    int cookieLen,
  ) {
    return _SSLSetDatagramHelloCookie(
      dtlsContext,
      cookie,
      cookieLen,
    );
  }

  late final _SSLSetDatagramHelloCookiePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDatagramHelloCookie');
  late final _SSLSetDatagramHelloCookie = _SSLSetDatagramHelloCookiePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    int maxSize,
  ) {
    return _SSLSetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLSetMaxDatagramRecordSizePtr = _lookup<
          ffi.NativeFunction<OSStatus Function(SSLContextRef, pkg_ffi.Size)>>(
      'SSLSetMaxDatagramRecordSize');
  late final _SSLSetMaxDatagramRecordSize = _SSLSetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetMaxDatagramRecordSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> maxSize,
  ) {
    return _SSLGetMaxDatagramRecordSize(
      dtlsContext,
      maxSize,
    );
  }

  late final _SSLGetMaxDatagramRecordSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetMaxDatagramRecordSize');
  late final _SSLGetMaxDatagramRecordSize = _SSLGetMaxDatagramRecordSizePtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedProtocolVersion(
    SSLContextRef context,
    ffi.Pointer<SSLProtocol> protocol,
  ) {
    return _SSLGetNegotiatedProtocolVersion(
      context,
      protocol,
    );
  }

  late final _SSLGetNegotiatedProtocolVersionPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLProtocol>)>>('SSLGetNegotiatedProtocolVersion');
  late final _SSLGetNegotiatedProtocolVersion =
      _SSLGetNegotiatedProtocolVersionPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<SSLProtocol>)>();

  int SSLGetNumberSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberSupportedCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberSupportedCiphers');
  late final _SSLGetNumberSupportedCiphers = _SSLGetNumberSupportedCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetSupportedCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetSupportedCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetSupportedCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetSupportedCiphers');
  late final _SSLGetSupportedCiphers = _SSLGetSupportedCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNumberEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetNumberEnabledCiphers(
      context,
      numCiphers,
    );
  }

  late final _SSLGetNumberEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetNumberEnabledCiphers');
  late final _SSLGetNumberEnabledCiphers = _SSLGetNumberEnabledCiphersPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    int numCiphers,
  ) {
    return _SSLSetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLSetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              pkg_ffi.Size)>>('SSLSetEnabledCiphers');
  late final _SSLSetEnabledCiphers = _SSLSetEnabledCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>, int)>();

  int SSLGetEnabledCiphers(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> ciphers,
    ffi.Pointer<pkg_ffi.Size> numCiphers,
  ) {
    return _SSLGetEnabledCiphers(
      context,
      ciphers,
      numCiphers,
    );
  }

  late final _SSLGetEnabledCiphersPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetEnabledCiphers');
  late final _SSLGetEnabledCiphers = _SSLGetEnabledCiphersPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetSessionTicketsEnabled(
    SSLContextRef context,
    int enabled,
  ) {
    return _SSLSetSessionTicketsEnabled(
      context,
      enabled,
    );
  }

  late final _SSLSetSessionTicketsEnabledPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetSessionTicketsEnabled');
  late final _SSLSetSessionTicketsEnabled = _SSLSetSessionTicketsEnabledPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLSetEnableCertVerify(
    SSLContextRef context,
    int enableVerify,
  ) {
    return _SSLSetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLSetEnableCertVerifyPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetEnableCertVerify');
  late final _SSLSetEnableCertVerify =
      _SSLSetEnableCertVerifyPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetEnableCertVerify(
    SSLContextRef context,
    ffi.Pointer<Boolean> enableVerify,
  ) {
    return _SSLGetEnableCertVerify(
      context,
      enableVerify,
    );
  }

  late final _SSLGetEnableCertVerifyPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetEnableCertVerify');
  late final _SSLGetEnableCertVerify = _SSLGetEnableCertVerifyPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredCerts(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredCertsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredCerts');
  late final _SSLSetAllowsExpiredCerts = _SSLSetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredCerts(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredCerts(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredCertsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredCerts');
  late final _SSLGetAllowsExpiredCerts = _SSLGetAllowsExpiredCertsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsExpiredRoots(
    SSLContextRef context,
    int allowsExpired,
  ) {
    return _SSLSetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLSetAllowsExpiredRootsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsExpiredRoots');
  late final _SSLSetAllowsExpiredRoots = _SSLSetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsExpiredRoots(
    SSLContextRef context,
    ffi.Pointer<Boolean> allowsExpired,
  ) {
    return _SSLGetAllowsExpiredRoots(
      context,
      allowsExpired,
    );
  }

  late final _SSLGetAllowsExpiredRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<Boolean>)>>('SSLGetAllowsExpiredRoots');
  late final _SSLGetAllowsExpiredRoots = _SSLGetAllowsExpiredRootsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetAllowsAnyRoot(
    SSLContextRef context,
    int anyRoot,
  ) {
    return _SSLSetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLSetAllowsAnyRootPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetAllowsAnyRoot');
  late final _SSLSetAllowsAnyRoot =
      _SSLSetAllowsAnyRootPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetAllowsAnyRoot(
    SSLContextRef context,
    ffi.Pointer<Boolean> anyRoot,
  ) {
    return _SSLGetAllowsAnyRoot(
      context,
      anyRoot,
    );
  }

  late final _SSLGetAllowsAnyRootPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetAllowsAnyRoot');
  late final _SSLGetAllowsAnyRoot = _SSLGetAllowsAnyRootPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLSetTrustedRoots(
    SSLContextRef context,
    CFArrayRef trustedRoots,
    int replaceExisting,
  ) {
    return _SSLSetTrustedRoots(
      context,
      trustedRoots,
      replaceExisting,
    );
  }

  late final _SSLSetTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, CFArrayRef, Boolean)>>('SSLSetTrustedRoots');
  late final _SSLSetTrustedRoots = _SSLSetTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef, int)>();

  int SSLCopyTrustedRoots(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> trustedRoots,
  ) {
    return _SSLCopyTrustedRoots(
      context,
      trustedRoots,
    );
  }

  late final _SSLCopyTrustedRootsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyTrustedRoots');
  late final _SSLCopyTrustedRoots = _SSLCopyTrustedRootsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerCertificates(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certs,
  ) {
    return _SSLCopyPeerCertificates(
      context,
      certs,
    );
  }

  late final _SSLCopyPeerCertificatesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyPeerCertificates');
  late final _SSLCopyPeerCertificates = _SSLCopyPeerCertificatesPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyPeerTrust(
    SSLContextRef context,
    ffi.Pointer<SecTrustRef> trust,
  ) {
    return _SSLCopyPeerTrust(
      context,
      trust,
    );
  }

  late final _SSLCopyPeerTrustPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<SecTrustRef>)>>('SSLCopyPeerTrust');
  late final _SSLCopyPeerTrust = _SSLCopyPeerTrustPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SecTrustRef>)>();

  int SSLSetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> peerID,
    int peerIDLen,
  ) {
    return _SSLSetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLSetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetPeerID');
  late final _SSLSetPeerID = _SSLSetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetPeerID(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> peerID,
    ffi.Pointer<pkg_ffi.Size> peerIDLen,
  ) {
    return _SSLGetPeerID(
      context,
      peerID,
      peerIDLen,
    );
  }

  late final _SSLGetPeerIDPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetPeerID');
  late final _SSLGetPeerID = _SSLGetPeerIDPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetNegotiatedCipher(
    SSLContextRef context,
    ffi.Pointer<SSLCipherSuite> cipherSuite,
  ) {
    return _SSLGetNegotiatedCipher(
      context,
      cipherSuite,
    );
  }

  late final _SSLGetNegotiatedCipherPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<SSLCipherSuite>)>>('SSLGetNegotiatedCipher');
  late final _SSLGetNegotiatedCipher = _SSLGetNegotiatedCipherPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<SSLCipherSuite>)>();

  int SSLSetALPNProtocols(
    SSLContextRef context,
    CFArrayRef protocols,
  ) {
    return _SSLSetALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLSetALPNProtocolsPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetALPNProtocols');
  late final _SSLSetALPNProtocols = _SSLSetALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, CFArrayRef)>();

  int SSLCopyALPNProtocols(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> protocols,
  ) {
    return _SSLCopyALPNProtocols(
      context,
      protocols,
    );
  }

  late final _SSLCopyALPNProtocolsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<CFArrayRef>)>>('SSLCopyALPNProtocols');
  late final _SSLCopyALPNProtocols = _SSLCopyALPNProtocolsPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLSetOCSPResponse(
    SSLContextRef context,
    CFDataRef response,
  ) {
    return _SSLSetOCSPResponse(
      context,
      response,
    );
  }

  late final _SSLSetOCSPResponsePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFDataRef)>>(
          'SSLSetOCSPResponse');
  late final _SSLSetOCSPResponse = _SSLSetOCSPResponsePtr.asFunction<
      int Function(SSLContextRef, CFDataRef)>();

  int SSLSetEncryptionCertificate(
    SSLContextRef context,
    CFArrayRef certRefs,
  ) {
    return _SSLSetEncryptionCertificate(
      context,
      certRefs,
    );
  }

  late final _SSLSetEncryptionCertificatePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, CFArrayRef)>>(
          'SSLSetEncryptionCertificate');
  late final _SSLSetEncryptionCertificate = _SSLSetEncryptionCertificatePtr
      .asFunction<int Function(SSLContextRef, CFArrayRef)>();

  int SSLSetClientSideAuthenticate(
    SSLContextRef context,
    int auth,
  ) {
    return _SSLSetClientSideAuthenticate(
      context,
      auth,
    );
  }

  late final _SSLSetClientSideAuthenticatePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, SSLAuthenticate)>>('SSLSetClientSideAuthenticate');
  late final _SSLSetClientSideAuthenticate = _SSLSetClientSideAuthenticatePtr
      .asFunction<int Function(SSLContextRef, int)>();

  int SSLAddDistinguishedName(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> derDN,
    int derDNLen,
  ) {
    return _SSLAddDistinguishedName(
      context,
      derDN,
      derDNLen,
    );
  }

  late final _SSLAddDistinguishedNamePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLAddDistinguishedName');
  late final _SSLAddDistinguishedName = _SSLAddDistinguishedNamePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLSetCertificateAuthorities(
    SSLContextRef context,
    CFTypeRef certificateOrArray,
    int replaceExisting,
  ) {
    return _SSLSetCertificateAuthorities(
      context,
      certificateOrArray,
      replaceExisting,
    );
  }

  late final _SSLSetCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, CFTypeRef,
              Boolean)>>('SSLSetCertificateAuthorities');
  late final _SSLSetCertificateAuthorities = _SSLSetCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, CFTypeRef, int)>();

  int SSLCopyCertificateAuthorities(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> certificates,
  ) {
    return _SSLCopyCertificateAuthorities(
      context,
      certificates,
    );
  }

  late final _SSLCopyCertificateAuthoritiesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyCertificateAuthorities');
  late final _SSLCopyCertificateAuthorities = _SSLCopyCertificateAuthoritiesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLCopyDistinguishedNames(
    SSLContextRef context,
    ffi.Pointer<CFArrayRef> names,
  ) {
    return _SSLCopyDistinguishedNames(
      context,
      names,
    );
  }

  late final _SSLCopyDistinguishedNamesPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<CFArrayRef>)>>('SSLCopyDistinguishedNames');
  late final _SSLCopyDistinguishedNames = _SSLCopyDistinguishedNamesPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<CFArrayRef>)>();

  int SSLGetClientCertificateState(
    SSLContextRef context,
    ffi.Pointer<SSLClientCertificateState> clientState,
  ) {
    return _SSLGetClientCertificateState(
      context,
      clientState,
    );
  }

  late final _SSLGetClientCertificateStatePtr = _lookup<
          ffi.NativeFunction<
              OSStatus Function(
                  SSLContextRef, ffi.Pointer<SSLClientCertificateState>)>>(
      'SSLGetClientCertificateState');
  late final _SSLGetClientCertificateState =
      _SSLGetClientCertificateStatePtr.asFunction<
          int Function(
              SSLContextRef, ffi.Pointer<SSLClientCertificateState>)>();

  int SSLSetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> dhParams,
    int dhParamsLen,
  ) {
    return _SSLSetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLSetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>,
              pkg_ffi.Size)>>('SSLSetDiffieHellmanParams');
  late final _SSLSetDiffieHellmanParams = _SSLSetDiffieHellmanParamsPtr
      .asFunction<int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int)>();

  int SSLGetDiffieHellmanParams(
    SSLContextRef context,
    ffi.Pointer<ffi.Pointer<ffi.Void>> dhParams,
    ffi.Pointer<pkg_ffi.Size> dhParamsLen,
  ) {
    return _SSLGetDiffieHellmanParams(
      context,
      dhParams,
      dhParamsLen,
    );
  }

  late final _SSLGetDiffieHellmanParamsPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDiffieHellmanParams');
  late final _SSLGetDiffieHellmanParams =
      _SSLGetDiffieHellmanParamsPtr.asFunction<
          int Function(SSLContextRef, ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<pkg_ffi.Size>)>();

  int SSLSetRsaBlinding(
    SSLContextRef context,
    int blinding,
  ) {
    return _SSLSetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLSetRsaBlindingPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, Boolean)>>(
          'SSLSetRsaBlinding');
  late final _SSLSetRsaBlinding =
      _SSLSetRsaBlindingPtr.asFunction<int Function(SSLContextRef, int)>();

  int SSLGetRsaBlinding(
    SSLContextRef context,
    ffi.Pointer<Boolean> blinding,
  ) {
    return _SSLGetRsaBlinding(
      context,
      blinding,
    );
  }

  late final _SSLGetRsaBlindingPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(
              SSLContextRef, ffi.Pointer<Boolean>)>>('SSLGetRsaBlinding');
  late final _SSLGetRsaBlinding = _SSLGetRsaBlindingPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<Boolean>)>();

  int SSLHandshake(
    SSLContextRef context,
  ) {
    return _SSLHandshake(
      context,
    );
  }

  late final _SSLHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLHandshake');
  late final _SSLHandshake =
      _SSLHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLReHandshake(
    SSLContextRef context,
  ) {
    return _SSLReHandshake(
      context,
    );
  }

  late final _SSLReHandshakePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>(
          'SSLReHandshake');
  late final _SSLReHandshake =
      _SSLReHandshakePtr.asFunction<int Function(SSLContextRef)>();

  int SSLWrite(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLWrite(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLWritePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLWrite');
  late final _SSLWrite = _SSLWritePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLRead(
    SSLContextRef context,
    ffi.Pointer<ffi.Void> data,
    int dataLength,
    ffi.Pointer<pkg_ffi.Size> processed,
  ) {
    return _SSLRead(
      context,
      data,
      dataLength,
      processed,
    );
  }

  late final _SSLReadPtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef, ffi.Pointer<ffi.Void>, pkg_ffi.Size,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLRead');
  late final _SSLRead = _SSLReadPtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetBufferedReadSize(
    SSLContextRef context,
    ffi.Pointer<pkg_ffi.Size> bufferSize,
  ) {
    return _SSLGetBufferedReadSize(
      context,
      bufferSize,
    );
  }

  late final _SSLGetBufferedReadSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetBufferedReadSize');
  late final _SSLGetBufferedReadSize = _SSLGetBufferedReadSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLGetDatagramWriteSize(
    SSLContextRef dtlsContext,
    ffi.Pointer<pkg_ffi.Size> bufSize,
  ) {
    return _SSLGetDatagramWriteSize(
      dtlsContext,
      bufSize,
    );
  }

  late final _SSLGetDatagramWriteSizePtr = _lookup<
      ffi.NativeFunction<
          OSStatus Function(SSLContextRef,
              ffi.Pointer<pkg_ffi.Size>)>>('SSLGetDatagramWriteSize');
  late final _SSLGetDatagramWriteSize = _SSLGetDatagramWriteSizePtr.asFunction<
      int Function(SSLContextRef, ffi.Pointer<pkg_ffi.Size>)>();

  int SSLClose(
    SSLContextRef context,
  ) {
    return _SSLClose(
      context,
    );
  }

  late final _SSLClosePtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef)>>('SSLClose');
  late final _SSLClose = _SSLClosePtr.asFunction<int Function(SSLContextRef)>();

  int SSLSetError(
    SSLContextRef context,
    int status,
  ) {
    return _SSLSetError(
      context,
      status,
    );
  }

  late final _SSLSetErrorPtr =
      _lookup<ffi.NativeFunction<OSStatus Function(SSLContextRef, OSStatus)>>(
          'SSLSetError');
  late final _SSLSetError =
      _SSLSetErrorPtr.asFunction<int Function(SSLContextRef, int)>();

  late final ffi.Pointer<ffi.Int64> _NSURLSessionTransferSizeUnknown =
      _lookup<ffi.Int64>('NSURLSessionTransferSizeUnknown');

  int get NSURLSessionTransferSizeUnknown =>
      _NSURLSessionTransferSizeUnknown.value;

  set NSURLSessionTransferSizeUnknown(int value) =>
      _NSURLSessionTransferSizeUnknown.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSURLSession =
      _lookup<pkg_ffi.Int>('NSURLSession');

  int get NSURLSession => _NSURLSession.value;

  set NSURLSession(int value) => _NSURLSession.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSURLSessionDataTask =
      _lookup<pkg_ffi.Int>('NSURLSessionDataTask');

  int get NSURLSessionDataTask => _NSURLSessionDataTask.value;

  set NSURLSessionDataTask(int value) => _NSURLSessionDataTask.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSURLSessionUploadTask =
      _lookup<pkg_ffi.Int>('NSURLSessionUploadTask');

  int get NSURLSessionUploadTask => _NSURLSessionUploadTask.value;

  set NSURLSessionUploadTask(int value) =>
      _NSURLSessionUploadTask.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSURLSessionDownloadTask =
      _lookup<pkg_ffi.Int>('NSURLSessionDownloadTask');

  int get NSURLSessionDownloadTask => _NSURLSessionDownloadTask.value;

  set NSURLSessionDownloadTask(int value) =>
      _NSURLSessionDownloadTask.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSURLSessionStreamTask =
      _lookup<pkg_ffi.Int>('NSURLSessionStreamTask');

  int get NSURLSessionStreamTask => _NSURLSessionStreamTask.value;

  set NSURLSessionStreamTask(int value) =>
      _NSURLSessionStreamTask.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSURLSessionWebSocketTask =
      _lookup<pkg_ffi.Int>('NSURLSessionWebSocketTask');

  int get NSURLSessionWebSocketTask => _NSURLSessionWebSocketTask.value;

  set NSURLSessionWebSocketTask(int value) =>
      _NSURLSessionWebSocketTask.value = value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityLow =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityLow');

  double get NSURLSessionTaskPriorityLow => _NSURLSessionTaskPriorityLow.value;

  set NSURLSessionTaskPriorityLow(double value) =>
      _NSURLSessionTaskPriorityLow.value = value;

  late final ffi.Pointer<ffi.Float> _NSURLSessionTaskPriorityHigh =
      _lookup<ffi.Float>('NSURLSessionTaskPriorityHigh');

  double get NSURLSessionTaskPriorityHigh =>
      _NSURLSessionTaskPriorityHigh.value;

  set NSURLSessionTaskPriorityHigh(double value) =>
      _NSURLSessionTaskPriorityHigh.value = value;

  late final ffi.Pointer<pkg_ffi.Int> _NSURLSessionConfiguration =
      _lookup<pkg_ffi.Int>('NSURLSessionConfiguration');

  int get NSURLSessionConfiguration => _NSURLSessionConfiguration.value;

  set NSURLSessionConfiguration(int value) =>
      _NSURLSessionConfiguration.value = value;
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<pkg_ffi.Char> __mbstate8;

  @pkg_ffi.LongLong()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<pkg_ffi.Char> __opaque;
}

@ffi.Packed(1)
class _OSUnalignedU16 extends ffi.Struct {
  @ffi.Uint16()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU32 extends ffi.Struct {
  @ffi.Uint32()
  external int __val;
}

@ffi.Packed(1)
class _OSUnalignedU64 extends ffi.Struct {
  @ffi.Uint64()
  external int __val;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef __int32_t = pkg_ffi.Int;

class objc_class extends ffi.Opaque {}

class objc_object extends ffi.Struct {
  external Class isa;
}

typedef Class = ffi.Pointer<objc_class>;

class objc_selector extends ffi.Opaque {}

typedef SEL = ffi.Pointer<objc_selector>;
typedef id = ffi.Pointer<objc_object>;
typedef objc_objectptr_t = ffi.Pointer<ffi.Void>;
typedef NSUInteger = pkg_ffi.UnsignedLong;
typedef va_list = __builtin_va_list;
typedef __builtin_va_list = ffi.Pointer<pkg_ffi.Char>;
typedef NSInteger = pkg_ffi.Long;

abstract class ptrauth_key {
  static const int ptrauth_key_asia = 0;
  static const int ptrauth_key_asib = 1;
  static const int ptrauth_key_asda = 2;
  static const int ptrauth_key_asdb = 3;
  static const int ptrauth_key_process_independent_code = 0;
  static const int ptrauth_key_process_dependent_code = 1;
  static const int ptrauth_key_process_independent_data = 2;
  static const int ptrauth_key_process_dependent_data = 3;
  static const int ptrauth_key_function_pointer = 0;
  static const int ptrauth_key_return_address = 1;
  static const int ptrauth_key_frame_pointer = 3;
  static const int ptrauth_key_block_function = 0;
  static const int ptrauth_key_cxx_vtable_pointer = 2;
  static const int ptrauth_key_method_list_pointer = 2;
  static const int ptrauth_key_objc_isa_pointer = 2;
  static const int ptrauth_key_objc_super_pointer = 2;
  static const int ptrauth_key_block_descriptor_pointer = 2;
  static const int ptrauth_key_objc_sel_pointer = 3;
  static const int ptrauth_key_objc_class_ro_pointer = 2;
}

@ffi.Packed(2)
class wide extends ffi.Struct {
  @UInt32()
  external int lo;

  @SInt32()
  external int hi;
}

typedef UInt32 = pkg_ffi.UnsignedInt;
typedef SInt32 = pkg_ffi.Int;

@ffi.Packed(2)
class UnsignedWide extends ffi.Struct {
  @UInt32()
  external int lo;

  @UInt32()
  external int hi;
}

class Float80 extends ffi.Struct {
  @SInt16()
  external int exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

typedef SInt16 = pkg_ffi.Short;
typedef UInt16 = pkg_ffi.UnsignedShort;

class Float96 extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<SInt16> exp;

  @ffi.Array.multi([4])
  external ffi.Array<UInt16> man;
}

@ffi.Packed(2)
class Float32Point extends ffi.Struct {
  @Float32()
  external double x;

  @Float32()
  external double y;
}

typedef Float32 = ffi.Float;

@ffi.Packed(2)
class ProcessSerialNumber extends ffi.Struct {
  @UInt32()
  external int highLongOfPSN;

  @UInt32()
  external int lowLongOfPSN;
}

class Point extends ffi.Struct {
  @pkg_ffi.Short()
  external int v;

  @pkg_ffi.Short()
  external int h;
}

class Rect extends ffi.Struct {
  @pkg_ffi.Short()
  external int top;

  @pkg_ffi.Short()
  external int left;

  @pkg_ffi.Short()
  external int bottom;

  @pkg_ffi.Short()
  external int right;
}

@ffi.Packed(2)
class FixedPoint extends ffi.Struct {
  @Fixed()
  external int x;

  @Fixed()
  external int y;
}

typedef Fixed = SInt32;

@ffi.Packed(2)
class FixedRect extends ffi.Struct {
  @Fixed()
  external int left;

  @Fixed()
  external int top;

  @Fixed()
  external int right;

  @Fixed()
  external int bottom;
}

class TimeBaseRecord extends ffi.Opaque {}

@ffi.Packed(2)
class TimeRecord extends ffi.Struct {
  external CompTimeValue value;

  @TimeScale()
  external int scale;

  external TimeBase base;
}

typedef CompTimeValue = wide;
typedef TimeScale = SInt32;
typedef TimeBase = ffi.Pointer<TimeBaseRecord>;

class NumVersion extends ffi.Struct {
  @UInt8()
  external int nonRelRev;

  @UInt8()
  external int stage;

  @UInt8()
  external int minorAndBugRev;

  @UInt8()
  external int majorRev;
}

typedef UInt8 = pkg_ffi.UnsignedChar;

class NumVersionVariant extends ffi.Union {
  external NumVersion parts;

  @UInt32()
  external int whole;
}

class VersRec extends ffi.Struct {
  external NumVersion numericVersion;

  @pkg_ffi.Short()
  external int countryCode;

  @ffi.Array.multi([256])
  external ffi.Array<pkg_ffi.UnsignedChar> shortVersion;

  @ffi.Array.multi([256])
  external ffi.Array<pkg_ffi.UnsignedChar> reserved;
}

typedef ConstStr255Param = ffi.Pointer<pkg_ffi.UnsignedChar>;

class __CFString extends ffi.Opaque {}

typedef CFIndex = pkg_ffi.Long;

class CFRange extends ffi.Struct {
  @CFIndex()
  external int location;

  @CFIndex()
  external int length;
}

class __CFNull extends ffi.Opaque {}

typedef CFTypeID = pkg_ffi.UnsignedLong;
typedef CFNullRef = ffi.Pointer<__CFNull>;

class __CFAllocator extends ffi.Opaque {}

typedef CFAllocatorRef = ffi.Pointer<__CFAllocator>;

class CFAllocatorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFAllocatorRetainCallBack retain;

  external CFAllocatorReleaseCallBack release;

  external CFAllocatorCopyDescriptionCallBack copyDescription;

  external CFAllocatorAllocateCallBack allocate;

  external CFAllocatorReallocateCallBack reallocate;

  external CFAllocatorDeallocateCallBack deallocate;

  external CFAllocatorPreferredSizeCallBack preferredSize;
}

typedef CFAllocatorRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFStringRef = ffi.Pointer<__CFString>;
typedef CFAllocatorAllocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFOptionFlags = pkg_ffi.UnsignedLong;
typedef CFAllocatorReallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
            CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorDeallocateCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFAllocatorPreferredSizeCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFIndex Function(CFIndex, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;
typedef CFTypeRef = ffi.Pointer<ffi.Void>;
typedef Boolean = pkg_ffi.UnsignedChar;
typedef CFHashCode = pkg_ffi.UnsignedLong;

class _NSZone extends ffi.Opaque {}

typedef NSZone = _NSZone;
typedef NSNotificationName = ffi.Pointer<pkg_ffi.Int>;

class NSFastEnumerationState extends ffi.Struct {
  @pkg_ffi.UnsignedLong()
  external int state;

  external ffi.Pointer<id> itemsPtr;

  external ffi.Pointer<pkg_ffi.UnsignedLong> mutationsPtr;

  @ffi.Array.multi([5])
  external ffi.Array<pkg_ffi.UnsignedLong> extra;
}

typedef NSProgressUserInfoKey = ffi.Pointer<pkg_ffi.Int>;
typedef NSProgressKind = ffi.Pointer<pkg_ffi.Int>;
typedef NSProgressFileOperationKind = ffi.Pointer<pkg_ffi.Int>;

class CFArrayCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFArrayRetainCallBack retain;

  external CFArrayReleaseCallBack release;

  external CFArrayCopyDescriptionCallBack copyDescription;

  external CFArrayEqualCallBack equal;
}

typedef CFArrayRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFArrayCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFArrayEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFArray extends ffi.Opaque {}

typedef CFArrayRef = ffi.Pointer<__CFArray>;
typedef CFMutableArrayRef = ffi.Pointer<__CFArray>;
typedef CFArrayApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFComparatorFunction = ffi.Pointer<
    ffi.NativeFunction<
        CFComparisonResult Function(ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFComparisonResult = CFIndex;

class sec_object extends ffi.Opaque {}

class __SecCertificate extends ffi.Opaque {}

class __SecIdentity extends ffi.Opaque {}

class __SecKey extends ffi.Opaque {}

class __SecPolicy extends ffi.Opaque {}

class __SecAccessControl extends ffi.Opaque {}

class __SecKeychain extends ffi.Opaque {}

class __SecKeychainItem extends ffi.Opaque {}

class __SecKeychainSearch extends ffi.Opaque {}

class SecKeychainAttribute extends ffi.Struct {
  @SecKeychainAttrType()
  external int tag;

  @UInt32()
  external int length;

  external ffi.Pointer<ffi.Void> data;
}

typedef SecKeychainAttrType = OSType;
typedef OSType = FourCharCode;
typedef FourCharCode = UInt32;

class SecKeychainAttributeList extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<SecKeychainAttribute> attr;
}

class __SecTrustedApplication extends ffi.Opaque {}

class __SecAccess extends ffi.Opaque {}

class __SecACL extends ffi.Opaque {}

class __SecPassword extends ffi.Opaque {}

class SecKeychainAttributeInfo extends ffi.Struct {
  @UInt32()
  external int count;

  external ffi.Pointer<UInt32> tag;

  external ffi.Pointer<UInt32> format;
}

typedef OSStatus = SInt32;

class _RuneEntry extends ffi.Struct {
  @__darwin_rune_t()
  external int __min;

  @__darwin_rune_t()
  external int __max;

  @__darwin_rune_t()
  external int __map;

  external ffi.Pointer<__uint32_t> __types;
}

typedef __darwin_rune_t = __darwin_wchar_t;
typedef __darwin_wchar_t = pkg_ffi.Int;
typedef __uint32_t = pkg_ffi.UnsignedInt;

class _RuneRange extends ffi.Struct {
  @pkg_ffi.Int()
  external int __nranges;

  external ffi.Pointer<_RuneEntry> __ranges;
}

class _RuneCharClass extends ffi.Struct {
  @ffi.Array.multi([14])
  external ffi.Array<pkg_ffi.Char> __name;

  @__uint32_t()
  external int __mask;
}

class _RuneLocale extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<pkg_ffi.Char> __magic;

  @ffi.Array.multi([32])
  external ffi.Array<pkg_ffi.Char> __encoding;

  external ffi.Pointer<
      ffi.NativeFunction<
          __darwin_rune_t Function(ffi.Pointer<pkg_ffi.Char>, __darwin_size_t,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>> __sgetrune;

  external ffi.Pointer<
      ffi.NativeFunction<
          pkg_ffi.Int Function(
              __darwin_rune_t,
              ffi.Pointer<pkg_ffi.Char>,
              __darwin_size_t,
              ffi.Pointer<ffi.Pointer<pkg_ffi.Char>>)>> __sputrune;

  @__darwin_rune_t()
  external int __invalid_rune;

  @ffi.Array.multi([256])
  external ffi.Array<__uint32_t> __runetype;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __maplower;

  @ffi.Array.multi([256])
  external ffi.Array<__darwin_rune_t> __mapupper;

  external _RuneRange __runetype_ext;

  external _RuneRange __maplower_ext;

  external _RuneRange __mapupper_ext;

  external ffi.Pointer<ffi.Void> __variable;

  @pkg_ffi.Int()
  external int __variable_len;

  @pkg_ffi.Int()
  external int __ncharclasses;

  external ffi.Pointer<_RuneCharClass> __charclasses;
}

typedef __darwin_size_t = pkg_ffi.UnsignedLong;
typedef __darwin_ct_rune_t = pkg_ffi.Int;

class lconv extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Char> decimal_point;

  external ffi.Pointer<pkg_ffi.Char> thousands_sep;

  external ffi.Pointer<pkg_ffi.Char> grouping;

  external ffi.Pointer<pkg_ffi.Char> int_curr_symbol;

  external ffi.Pointer<pkg_ffi.Char> currency_symbol;

  external ffi.Pointer<pkg_ffi.Char> mon_decimal_point;

  external ffi.Pointer<pkg_ffi.Char> mon_thousands_sep;

  external ffi.Pointer<pkg_ffi.Char> mon_grouping;

  external ffi.Pointer<pkg_ffi.Char> positive_sign;

  external ffi.Pointer<pkg_ffi.Char> negative_sign;

  @pkg_ffi.Char()
  external int int_frac_digits;

  @pkg_ffi.Char()
  external int frac_digits;

  @pkg_ffi.Char()
  external int p_cs_precedes;

  @pkg_ffi.Char()
  external int p_sep_by_space;

  @pkg_ffi.Char()
  external int n_cs_precedes;

  @pkg_ffi.Char()
  external int n_sep_by_space;

  @pkg_ffi.Char()
  external int p_sign_posn;

  @pkg_ffi.Char()
  external int n_sign_posn;

  @pkg_ffi.Char()
  external int int_p_cs_precedes;

  @pkg_ffi.Char()
  external int int_n_cs_precedes;

  @pkg_ffi.Char()
  external int int_p_sep_by_space;

  @pkg_ffi.Char()
  external int int_n_sep_by_space;

  @pkg_ffi.Char()
  external int int_p_sign_posn;

  @pkg_ffi.Char()
  external int int_n_sign_posn;
}

class __float2 extends ffi.Struct {
  @ffi.Float()
  external double __sinval;

  @ffi.Float()
  external double __cosval;
}

class __double2 extends ffi.Struct {
  @ffi.Double()
  external double __sinval;

  @ffi.Double()
  external double __cosval;
}

class exception extends ffi.Struct {
  @pkg_ffi.Int()
  external int type;

  external ffi.Pointer<pkg_ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class __darwin_arm_exception_state extends ffi.Struct {
  @__uint32_t()
  external int __exception;

  @__uint32_t()
  external int __fsr;

  @__uint32_t()
  external int __far;
}

class __darwin_arm_exception_state64 extends ffi.Struct {
  @__uint64_t()
  external int __far;

  @__uint32_t()
  external int __esr;

  @__uint32_t()
  external int __exception;
}

typedef __uint64_t = pkg_ffi.UnsignedLongLong;

class __darwin_arm_thread_state extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __sp;

  @__uint32_t()
  external int __lr;

  @__uint32_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;
}

class __darwin_arm_thread_state64 extends ffi.Struct {
  @ffi.Array.multi([29])
  external ffi.Array<__uint64_t> __x;

  @__uint64_t()
  external int __fp;

  @__uint64_t()
  external int __lr;

  @__uint64_t()
  external int __sp;

  @__uint64_t()
  external int __pc;

  @__uint32_t()
  external int __cpsr;

  @__uint32_t()
  external int __pad;
}

class __darwin_arm_vfp_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> __r;

  @__uint32_t()
  external int __fpscr;
}

class __darwin_arm_neon_state64 extends ffi.Opaque {}

class __darwin_arm_neon_state extends ffi.Opaque {}

class __arm_pagein_state extends ffi.Struct {
  @pkg_ffi.Int()
  external int __pagein_error;
}

class __arm_legacy_debug_state extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;
}

class __darwin_arm_debug_state32 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint32_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

class __darwin_arm_debug_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __bcr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wvr;

  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __wcr;

  @__uint64_t()
  external int __mdscr_el1;
}

class __darwin_arm_cpmu_state64 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__uint64_t> __ctrs;
}

class __darwin_mcontext32 extends ffi.Struct {
  external __darwin_arm_exception_state __es;

  external __darwin_arm_thread_state __ss;

  external __darwin_arm_vfp_state __fs;
}

class __darwin_mcontext64 extends ffi.Opaque {}

class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @__darwin_size_t()
  external int ss_size;

  @pkg_ffi.Int()
  external int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {
  @pkg_ffi.Int()
  external int uc_onstack;

  @__darwin_sigset_t()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @__darwin_size_t()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

typedef __darwin_sigset_t = __uint32_t;

class sigval extends ffi.Union {
  @pkg_ffi.Int()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

class sigevent extends ffi.Struct {
  @pkg_ffi.Int()
  external int sigev_notify;

  @pkg_ffi.Int()
  external int sigev_signo;

  external sigval sigev_value;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(sigval)>>
      sigev_notify_function;

  external ffi.Pointer<pthread_attr_t> sigev_notify_attributes;
}

typedef pthread_attr_t = __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t = _opaque_pthread_attr_t;

class __siginfo extends ffi.Struct {
  @pkg_ffi.Int()
  external int si_signo;

  @pkg_ffi.Int()
  external int si_errno;

  @pkg_ffi.Int()
  external int si_code;

  @pid_t()
  external int si_pid;

  @uid_t()
  external int si_uid;

  @pkg_ffi.Int()
  external int si_status;

  external ffi.Pointer<ffi.Void> si_addr;

  external sigval si_value;

  @pkg_ffi.Long()
  external int si_band;

  @ffi.Array.multi([7])
  external ffi.Array<pkg_ffi.UnsignedLong> __pad;
}

typedef pid_t = __darwin_pid_t;
typedef __darwin_pid_t = __int32_t;
typedef uid_t = __darwin_uid_t;
typedef __darwin_uid_t = __uint32_t;

class __sigaction_u extends ffi.Union {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>
      __sa_handler;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  pkg_ffi.Int, ffi.Pointer<__siginfo>, ffi.Pointer<ffi.Void>)>>
      __sa_sigaction;
}

class __sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, pkg_ffi.Int, pkg_ffi.Int,
              ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>> sa_tramp;

  @sigset_t()
  external int sa_mask;

  @pkg_ffi.Int()
  external int sa_flags;
}

typedef siginfo_t = __siginfo;
typedef sigset_t = __darwin_sigset_t;

class sigaction extends ffi.Struct {
  external __sigaction_u __sigaction_u1;

  @sigset_t()
  external int sa_mask;

  @pkg_ffi.Int()
  external int sa_flags;
}

class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(pkg_ffi.Int)>>
      sv_handler;

  @pkg_ffi.Int()
  external int sv_mask;

  @pkg_ffi.Int()
  external int sv_flags;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Char> ss_sp;

  @pkg_ffi.Int()
  external int ss_onstack;
}

typedef pthread_t = __darwin_pthread_t;
typedef __darwin_pthread_t = ffi.Pointer<_opaque_pthread_t>;
typedef stack_t = __darwin_sigaltstack;

class __sbuf extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.UnsignedChar> _base;

  @pkg_ffi.Int()
  external int _size;
}

class __sFILEX extends ffi.Opaque {}

class __sFILE extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.UnsignedChar> _p;

  @pkg_ffi.Int()
  external int _r;

  @pkg_ffi.Int()
  external int _w;

  @pkg_ffi.Short()
  external int _flags;

  @pkg_ffi.Short()
  external int _file;

  external __sbuf _bf;

  @pkg_ffi.Int()
  external int _lbfsize;

  external ffi.Pointer<ffi.Void> _cookie;

  external ffi.Pointer<
      ffi.NativeFunction<pkg_ffi.Int Function(ffi.Pointer<ffi.Void>)>> _close;

  external ffi.Pointer<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int)>> _read;

  external ffi.Pointer<
      ffi.NativeFunction<
          fpos_t Function(ffi.Pointer<ffi.Void>, fpos_t, pkg_ffi.Int)>> _seek;

  external ffi.Pointer<
      ffi.NativeFunction<
          pkg_ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<pkg_ffi.Char>,
              pkg_ffi.Int)>> _write;

  external __sbuf _ub;

  external ffi.Pointer<__sFILEX> _extra;

  @pkg_ffi.Int()
  external int _ur;

  @ffi.Array.multi([3])
  external ffi.Array<pkg_ffi.UnsignedChar> _ubuf;

  @ffi.Array.multi([1])
  external ffi.Array<pkg_ffi.UnsignedChar> _nbuf;

  external __sbuf _lb;

  @pkg_ffi.Int()
  external int _blksize;

  @fpos_t()
  external int _offset;
}

typedef fpos_t = __darwin_off_t;
typedef __darwin_off_t = __int64_t;
typedef __int64_t = pkg_ffi.LongLong;
typedef FILE = __sFILE;
typedef off_t = __darwin_off_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = pkg_ffi.Long;

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class timeval extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @__darwin_suseconds_t()
  external int tv_usec;
}

typedef __darwin_time_t = pkg_ffi.Long;
typedef __darwin_suseconds_t = __int32_t;

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @pkg_ffi.Long()
  external int ru_maxrss;

  @pkg_ffi.Long()
  external int ru_ixrss;

  @pkg_ffi.Long()
  external int ru_idrss;

  @pkg_ffi.Long()
  external int ru_isrss;

  @pkg_ffi.Long()
  external int ru_minflt;

  @pkg_ffi.Long()
  external int ru_majflt;

  @pkg_ffi.Long()
  external int ru_nswap;

  @pkg_ffi.Long()
  external int ru_inblock;

  @pkg_ffi.Long()
  external int ru_oublock;

  @pkg_ffi.Long()
  external int ru_msgsnd;

  @pkg_ffi.Long()
  external int ru_msgrcv;

  @pkg_ffi.Long()
  external int ru_nsignals;

  @pkg_ffi.Long()
  external int ru_nvcsw;

  @pkg_ffi.Long()
  external int ru_nivcsw;
}

class rusage_info_v0 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;
}

class rusage_info_v1 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;
}

class rusage_info_v2 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;
}

class rusage_info_v3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;
}

class rusage_info_v4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;
}

class rusage_info_v5 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> ri_uuid;

  @ffi.Uint64()
  external int ri_user_time;

  @ffi.Uint64()
  external int ri_system_time;

  @ffi.Uint64()
  external int ri_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_interrupt_wkups;

  @ffi.Uint64()
  external int ri_pageins;

  @ffi.Uint64()
  external int ri_wired_size;

  @ffi.Uint64()
  external int ri_resident_size;

  @ffi.Uint64()
  external int ri_phys_footprint;

  @ffi.Uint64()
  external int ri_proc_start_abstime;

  @ffi.Uint64()
  external int ri_proc_exit_abstime;

  @ffi.Uint64()
  external int ri_child_user_time;

  @ffi.Uint64()
  external int ri_child_system_time;

  @ffi.Uint64()
  external int ri_child_pkg_idle_wkups;

  @ffi.Uint64()
  external int ri_child_interrupt_wkups;

  @ffi.Uint64()
  external int ri_child_pageins;

  @ffi.Uint64()
  external int ri_child_elapsed_abstime;

  @ffi.Uint64()
  external int ri_diskio_bytesread;

  @ffi.Uint64()
  external int ri_diskio_byteswritten;

  @ffi.Uint64()
  external int ri_cpu_time_qos_default;

  @ffi.Uint64()
  external int ri_cpu_time_qos_maintenance;

  @ffi.Uint64()
  external int ri_cpu_time_qos_background;

  @ffi.Uint64()
  external int ri_cpu_time_qos_utility;

  @ffi.Uint64()
  external int ri_cpu_time_qos_legacy;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_initiated;

  @ffi.Uint64()
  external int ri_cpu_time_qos_user_interactive;

  @ffi.Uint64()
  external int ri_billed_system_time;

  @ffi.Uint64()
  external int ri_serviced_system_time;

  @ffi.Uint64()
  external int ri_logical_writes;

  @ffi.Uint64()
  external int ri_lifetime_max_phys_footprint;

  @ffi.Uint64()
  external int ri_instructions;

  @ffi.Uint64()
  external int ri_cycles;

  @ffi.Uint64()
  external int ri_billed_energy;

  @ffi.Uint64()
  external int ri_serviced_energy;

  @ffi.Uint64()
  external int ri_interval_max_phys_footprint;

  @ffi.Uint64()
  external int ri_runnable_time;

  @ffi.Uint64()
  external int ri_flags;
}

class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

typedef rlim_t = __uint64_t;

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

typedef id_t = __darwin_id_t;
typedef __darwin_id_t = __uint32_t;

class wait extends ffi.Opaque {}

class div_t extends ffi.Struct {
  @pkg_ffi.Int()
  external int quot;

  @pkg_ffi.Int()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @pkg_ffi.Long()
  external int quot;

  @pkg_ffi.Long()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @pkg_ffi.LongLong()
  external int quot;

  @pkg_ffi.LongLong()
  external int rem;
}

typedef dev_t = __darwin_dev_t;
typedef __darwin_dev_t = __int32_t;
typedef mode_t = __darwin_mode_t;
typedef __darwin_mode_t = __uint16_t;
typedef __uint16_t = pkg_ffi.UnsignedShort;
typedef errno_t = pkg_ffi.Int;
typedef rsize_t = __darwin_size_t;

class timespec extends ffi.Struct {
  @__darwin_time_t()
  external int tv_sec;

  @pkg_ffi.Long()
  external int tv_nsec;
}

class tm extends ffi.Struct {
  @pkg_ffi.Int()
  external int tm_sec;

  @pkg_ffi.Int()
  external int tm_min;

  @pkg_ffi.Int()
  external int tm_hour;

  @pkg_ffi.Int()
  external int tm_mday;

  @pkg_ffi.Int()
  external int tm_mon;

  @pkg_ffi.Int()
  external int tm_year;

  @pkg_ffi.Int()
  external int tm_wday;

  @pkg_ffi.Int()
  external int tm_yday;

  @pkg_ffi.Int()
  external int tm_isdst;

  @pkg_ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<pkg_ffi.Char> tm_zone;
}

typedef clock_t = __darwin_clock_t;
typedef __darwin_clock_t = pkg_ffi.UnsignedLong;
typedef time_t = __darwin_time_t;

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

typedef intmax_t = pkg_ffi.Long;

class imaxdiv_t extends ffi.Struct {
  @intmax_t()
  external int quot;

  @intmax_t()
  external int rem;
}

typedef uintmax_t = pkg_ffi.UnsignedLong;

class CFBagCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFBagRetainCallBack retain;

  external CFBagReleaseCallBack release;

  external CFBagCopyDescriptionCallBack copyDescription;

  external CFBagEqualCallBack equal;

  external CFBagHashCallBack hash;
}

typedef CFBagRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFBagCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFBagEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFBagHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFBag extends ffi.Opaque {}

typedef CFBagRef = ffi.Pointer<__CFBag>;
typedef CFMutableBagRef = ffi.Pointer<__CFBag>;
typedef CFBagApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class CFBinaryHeapCompareContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class CFBinaryHeapCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> retain;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>> release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
      ffi.NativeFunction<
          CFComparisonResult Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>> compare;
}

class __CFBinaryHeap extends ffi.Opaque {}

typedef CFBinaryHeapRef = ffi.Pointer<__CFBinaryHeap>;
typedef CFBinaryHeapApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFBitVector extends ffi.Opaque {}

typedef CFBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFMutableBitVectorRef = ffi.Pointer<__CFBitVector>;
typedef CFBit = UInt32;

abstract class __CFByteOrder {
  static const int CFByteOrderUnknown = 0;
  static const int CFByteOrderLittleEndian = 1;
  static const int CFByteOrderBigEndian = 2;
}

class CFSwappedFloat32 extends ffi.Struct {
  @ffi.Uint32()
  external int v;
}

class CFSwappedFloat64 extends ffi.Struct {
  @ffi.Uint64()
  external int v;
}

class CFDictionaryKeyCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;

  external CFDictionaryHashCallBack hash;
}

typedef CFDictionaryRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFDictionaryHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class CFDictionaryValueCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFDictionaryRetainCallBack retain;

  external CFDictionaryReleaseCallBack release;

  external CFDictionaryCopyDescriptionCallBack copyDescription;

  external CFDictionaryEqualCallBack equal;
}

class __CFDictionary extends ffi.Opaque {}

typedef CFDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFMutableDictionaryRef = ffi.Pointer<__CFDictionary>;
typedef CFDictionaryApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;

class __CFNotificationCenter extends ffi.Opaque {}

typedef CFNotificationCenterRef = ffi.Pointer<__CFNotificationCenter>;
typedef CFNotificationCallback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFNotificationCenterRef, ffi.Pointer<ffi.Void>,
            CFNotificationName, ffi.Pointer<ffi.Void>, CFDictionaryRef)>>;
typedef CFNotificationName = CFStringRef;
typedef CFNotificationSuspensionBehavior = CFIndex;

class __CFLocale extends ffi.Opaque {}

typedef CFLocaleRef = ffi.Pointer<__CFLocale>;
typedef CFLocaleIdentifier = CFStringRef;
typedef LangCode = SInt16;
typedef RegionCode = SInt16;
typedef CFLocaleLanguageDirection = CFIndex;
typedef CFLocaleKey = CFStringRef;
typedef CFCalendarIdentifier = CFStringRef;
typedef CFAbsoluteTime = CFTimeInterval;
typedef CFTimeInterval = ffi.Double;

class __CFDate extends ffi.Opaque {}

typedef CFDateRef = ffi.Pointer<__CFDate>;

class __CFTimeZone extends ffi.Opaque {}

class CFGregorianDate extends ffi.Struct {
  @SInt32()
  external int year;

  @SInt8()
  external int month;

  @SInt8()
  external int day;

  @SInt8()
  external int hour;

  @SInt8()
  external int minute;

  @ffi.Double()
  external double second;
}

typedef SInt8 = pkg_ffi.SignedChar;

class CFGregorianUnits extends ffi.Struct {
  @SInt32()
  external int years;

  @SInt32()
  external int months;

  @SInt32()
  external int days;

  @SInt32()
  external int hours;

  @SInt32()
  external int minutes;

  @ffi.Double()
  external double seconds;
}

typedef CFTimeZoneRef = ffi.Pointer<__CFTimeZone>;

class __CFData extends ffi.Opaque {}

typedef CFDataRef = ffi.Pointer<__CFData>;
typedef CFMutableDataRef = ffi.Pointer<__CFData>;
typedef CFDataSearchFlags = CFOptionFlags;

class __CFCharacterSet extends ffi.Opaque {}

typedef CFCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef CFCharacterSetPredefinedSet = CFIndex;
typedef CFMutableCharacterSetRef = ffi.Pointer<__CFCharacterSet>;
typedef UniChar = UInt16;
typedef UTF32Char = UInt32;
typedef CFStringEncoding = UInt32;
typedef CFMutableStringRef = ffi.Pointer<__CFString>;
typedef StringPtr = ffi.Pointer<pkg_ffi.UnsignedChar>;
typedef ConstStringPtr = ffi.Pointer<pkg_ffi.UnsignedChar>;
typedef CFStringCompareFlags = CFOptionFlags;
typedef CFStringNormalizationForm = CFIndex;

class CFStringInlineBuffer extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<UniChar> buffer;

  external CFStringRef theString;

  external ffi.Pointer<UniChar> directUniCharBuffer;

  external ffi.Pointer<pkg_ffi.Char> directCStringBuffer;

  external CFRange rangeToBuffer;

  @CFIndex()
  external int bufferedRangeStart;

  @CFIndex()
  external int bufferedRangeEnd;
}

typedef CFTimeZoneNameStyle = CFIndex;

class __CFCalendar extends ffi.Opaque {}

typedef CFCalendarRef = ffi.Pointer<__CFCalendar>;
typedef CFCalendarUnit = CFOptionFlags;

class __CFDateFormatter extends ffi.Opaque {}

typedef CFDateFormatterRef = ffi.Pointer<__CFDateFormatter>;
typedef CFISO8601DateFormatOptions = CFOptionFlags;
typedef CFDateFormatterStyle = CFIndex;
typedef CFDateFormatterKey = CFStringRef;

class __CFError extends ffi.Opaque {}

typedef CFErrorDomain = CFStringRef;
typedef CFErrorRef = ffi.Pointer<__CFError>;

class __CFBoolean extends ffi.Opaque {}

typedef CFBooleanRef = ffi.Pointer<__CFBoolean>;

class __CFNumber extends ffi.Opaque {}

typedef CFNumberRef = ffi.Pointer<__CFNumber>;
typedef CFNumberType = CFIndex;

class __CFNumberFormatter extends ffi.Opaque {}

typedef CFNumberFormatterRef = ffi.Pointer<__CFNumberFormatter>;
typedef CFNumberFormatterStyle = CFIndex;
typedef CFNumberFormatterKey = CFStringRef;
typedef CFPropertyListRef = CFTypeRef;

class __CFURL extends ffi.Opaque {}

typedef CFURLRef = ffi.Pointer<__CFURL>;
typedef CFURLPathStyle = CFIndex;
typedef CFURLComponentType = CFIndex;

class FSRef extends ffi.Opaque {}

typedef CFURLBookmarkCreationOptions = CFOptionFlags;
typedef CFURLBookmarkResolutionOptions = CFOptionFlags;
typedef CFURLBookmarkFileCreationOptions = CFOptionFlags;

class mach_port_status extends ffi.Struct {
  @mach_port_rights_t()
  external int mps_pset;

  @mach_port_seqno_t()
  external int mps_seqno;

  @mach_port_mscount_t()
  external int mps_mscount;

  @mach_port_msgcount_t()
  external int mps_qlimit;

  @mach_port_msgcount_t()
  external int mps_msgcount;

  @mach_port_rights_t()
  external int mps_sorights;

  @boolean_t()
  external int mps_srights;

  @boolean_t()
  external int mps_pdrequest;

  @boolean_t()
  external int mps_nsrequest;

  @natural_t()
  external int mps_flags;
}

typedef mach_port_rights_t = natural_t;
typedef natural_t = __darwin_natural_t;
typedef __darwin_natural_t = pkg_ffi.UnsignedInt;
typedef mach_port_seqno_t = natural_t;
typedef mach_port_mscount_t = natural_t;
typedef mach_port_msgcount_t = natural_t;
typedef boolean_t = pkg_ffi.Int;

class mach_port_limits extends ffi.Struct {
  @mach_port_msgcount_t()
  external int mpl_qlimit;
}

class mach_port_info_ext extends ffi.Struct {
  external mach_port_status_t mpie_status;

  @mach_port_msgcount_t()
  external int mpie_boost_cnt;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Uint32> reserved;
}

typedef mach_port_status_t = mach_port_status;

class mach_port_guard_info extends ffi.Struct {
  @ffi.Uint64()
  external int mpgi_guard;
}

class mach_port_qos extends ffi.Opaque {}

class mach_service_port_info extends ffi.Struct {
  @ffi.Array.multi([255])
  external ffi.Array<pkg_ffi.Char> mspi_string_name;

  @ffi.Uint8()
  external int mspi_domain_type;
}

class mach_port_options extends ffi.Struct {
  @ffi.Uint32()
  external int flags;

  external mach_port_limits_t mpl;
}

typedef mach_port_limits_t = mach_port_limits;

abstract class mach_port_guard_exception_codes {
  static const int kGUARD_EXC_DESTROY = 1;
  static const int kGUARD_EXC_MOD_REFS = 2;
  static const int kGUARD_EXC_SET_CONTEXT = 4;
  static const int kGUARD_EXC_UNGUARDED = 8;
  static const int kGUARD_EXC_INCORRECT_GUARD = 16;
  static const int kGUARD_EXC_IMMOVABLE = 32;
  static const int kGUARD_EXC_STRICT_REPLY = 64;
  static const int kGUARD_EXC_MSG_FILTERED = 128;
  static const int kGUARD_EXC_INVALID_RIGHT = 256;
  static const int kGUARD_EXC_INVALID_NAME = 512;
  static const int kGUARD_EXC_INVALID_VALUE = 1024;
  static const int kGUARD_EXC_INVALID_ARGUMENT = 2048;
  static const int kGUARD_EXC_RIGHT_EXISTS = 4096;
  static const int kGUARD_EXC_KERN_NO_SPACE = 8192;
  static const int kGUARD_EXC_KERN_FAILURE = 16384;
  static const int kGUARD_EXC_KERN_RESOURCE = 32768;
  static const int kGUARD_EXC_SEND_INVALID_REPLY = 65536;
  static const int kGUARD_EXC_SEND_INVALID_VOUCHER = 131072;
  static const int kGUARD_EXC_SEND_INVALID_RIGHT = 262144;
  static const int kGUARD_EXC_RCV_INVALID_NAME = 524288;
  static const int kGUARD_EXC_RCV_GUARDED_DESC = 1048576;
  static const int kGUARD_EXC_MOD_REFS_NON_FATAL = 2097152;
  static const int kGUARD_EXC_IMMOVABLE_NON_FATAL = 4194304;
}

class __CFRunLoop extends ffi.Opaque {}

class __CFRunLoopSource extends ffi.Opaque {}

class __CFRunLoopObserver extends ffi.Opaque {}

class __CFRunLoopTimer extends ffi.Opaque {}

typedef CFRunLoopMode = CFStringRef;
typedef CFRunLoopRef = ffi.Pointer<__CFRunLoop>;
typedef CFRunLoopRunResult = SInt32;
typedef CFRunLoopSourceRef = ffi.Pointer<__CFRunLoopSource>;
typedef CFRunLoopObserverRef = ffi.Pointer<__CFRunLoopObserver>;
typedef CFRunLoopTimerRef = ffi.Pointer<__CFRunLoopTimer>;

class CFRunLoopSourceContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> schedule;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>, CFRunLoopRef, CFRunLoopMode)>> cancel;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      perform;
}

class CFRunLoopSourceContext1 extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;

  external ffi.Pointer<
          ffi.NativeFunction<
              Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
      equal;

  external ffi.Pointer<
      ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>> hash;

  external ffi.Pointer<
      ffi.NativeFunction<mach_port_t Function(ffi.Pointer<ffi.Void>)>> getPort;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, CFIndex,
              CFAllocatorRef, ffi.Pointer<ffi.Void>)>> perform;
}

typedef mach_port_t = __darwin_mach_port_t;
typedef __darwin_mach_port_t = __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t = __darwin_natural_t;

class CFRunLoopObserverContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopObserverCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFRunLoopObserverRef, CFRunLoopActivity, ffi.Pointer<ffi.Void>)>>;
typedef CFRunLoopActivity = CFOptionFlags;

class CFRunLoopTimerContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFRunLoopTimerCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFRunLoopTimerRef, ffi.Pointer<ffi.Void>)>>;

class __CFSocket extends ffi.Opaque {}

class CFSocketSignature extends ffi.Struct {
  @SInt32()
  external int protocolFamily;

  @SInt32()
  external int socketType;

  @SInt32()
  external int protocol;

  external CFDataRef address;
}

class CFSocketContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFSocketRef = ffi.Pointer<__CFSocket>;
typedef CFSocketCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFSocketRef, CFSocketCallBackType, CFDataRef,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSocketCallBackType = CFOptionFlags;
typedef CFSocketNativeHandle = pkg_ffi.Int;
typedef CFSocketError = CFIndex;

class accessx_descriptor extends ffi.Struct {
  @pkg_ffi.UnsignedInt()
  external int ad_name_offset;

  @pkg_ffi.Int()
  external int ad_flags;

  @ffi.Array.multi([2])
  external ffi.Array<pkg_ffi.Int> ad_pad;
}

typedef gid_t = __darwin_gid_t;
typedef __darwin_gid_t = __uint32_t;
typedef useconds_t = __darwin_useconds_t;
typedef __darwin_useconds_t = __uint32_t;

class fssearchblock extends ffi.Opaque {}

class searchstate extends ffi.Opaque {}

class flock extends ffi.Struct {
  @off_t()
  external int l_start;

  @off_t()
  external int l_len;

  @pid_t()
  external int l_pid;

  @pkg_ffi.Short()
  external int l_type;

  @pkg_ffi.Short()
  external int l_whence;
}

class flocktimeout extends ffi.Struct {
  external flock fl;

  external timespec timeout;
}

class radvisory extends ffi.Struct {
  @off_t()
  external int ra_offset;

  @pkg_ffi.Int()
  external int ra_count;
}

class fsignatures extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  external ffi.Pointer<ffi.Void> fs_blob_start;

  @pkg_ffi.Size()
  external int fs_blob_size;

  @pkg_ffi.Size()
  external int fs_fsignatures_size;

  @ffi.Array.multi([20])
  external ffi.Array<pkg_ffi.Char> fs_cdhash;

  @pkg_ffi.Int()
  external int fs_hash_type;
}

class fsupplement extends ffi.Struct {
  @off_t()
  external int fs_file_start;

  @off_t()
  external int fs_blob_start;

  @pkg_ffi.Size()
  external int fs_blob_size;

  @pkg_ffi.Int()
  external int fs_orig_fd;
}

class fchecklv extends ffi.Struct {
  @off_t()
  external int lv_file_start;

  @pkg_ffi.Size()
  external int lv_error_message_size;

  external ffi.Pointer<ffi.Void> lv_error_message;
}

class fgetsigsinfo extends ffi.Struct {
  @off_t()
  external int fg_file_start;

  @pkg_ffi.Int()
  external int fg_info_request;

  @pkg_ffi.Int()
  external int fg_sig_is_platform;
}

class fstore extends ffi.Struct {
  @pkg_ffi.UnsignedInt()
  external int fst_flags;

  @pkg_ffi.Int()
  external int fst_posmode;

  @off_t()
  external int fst_offset;

  @off_t()
  external int fst_length;

  @off_t()
  external int fst_bytesalloc;
}

class fpunchhole extends ffi.Struct {
  @pkg_ffi.UnsignedInt()
  external int fp_flags;

  @pkg_ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fp_offset;

  @off_t()
  external int fp_length;
}

class ftrimactivefile extends ffi.Struct {
  @off_t()
  external int fta_offset;

  @off_t()
  external int fta_length;
}

class fspecread extends ffi.Struct {
  @pkg_ffi.UnsignedInt()
  external int fsr_flags;

  @pkg_ffi.UnsignedInt()
  external int reserved;

  @off_t()
  external int fsr_offset;

  @off_t()
  external int fsr_length;
}

class fbootstraptransfer extends ffi.Struct {
  @off_t()
  external int fbt_offset;

  @pkg_ffi.Size()
  external int fbt_length;

  external ffi.Pointer<ffi.Void> fbt_buffer;
}

@ffi.Packed(4)
class log2phys extends ffi.Struct {
  @pkg_ffi.UnsignedInt()
  external int l2p_flags;

  @off_t()
  external int l2p_contigbytes;

  @off_t()
  external int l2p_devoffset;
}

class _filesec extends ffi.Opaque {}

abstract class filesec_property_t {
  static const int FILESEC_OWNER = 1;
  static const int FILESEC_GROUP = 2;
  static const int FILESEC_UUID = 3;
  static const int FILESEC_MODE = 4;
  static const int FILESEC_ACL = 5;
  static const int FILESEC_GRPUUID = 6;
  static const int FILESEC_ACL_RAW = 100;
  static const int FILESEC_ACL_ALLOCSIZE = 101;
}

typedef filesec_t = ffi.Pointer<_filesec>;

abstract class os_clockid_t {
  static const int OS_CLOCK_MACH_ABSOLUTE_TIME = 32;
}

class os_workgroup_attr_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([60])
  external ffi.Array<pkg_ffi.Char> opaque;
}

class os_workgroup_interval_data_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([56])
  external ffi.Array<pkg_ffi.Char> opaque;
}

class os_workgroup_join_token_opaque_s extends ffi.Struct {
  @ffi.Uint32()
  external int sig;

  @ffi.Array.multi([36])
  external ffi.Array<pkg_ffi.Char> opaque;
}

class os_workgroup_s extends ffi.Opaque {}

typedef os_workgroup_t = ffi.Pointer<os_workgroup_s>;
typedef os_workgroup_join_token_t
    = ffi.Pointer<os_workgroup_join_token_opaque_s>;
typedef os_workgroup_working_arena_destructor_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef os_workgroup_index = ffi.Uint32;

class os_workgroup_max_parallel_threads_attr_s extends ffi.Opaque {}

typedef os_workgroup_mpt_attr_t
    = ffi.Pointer<os_workgroup_max_parallel_threads_attr_s>;
typedef os_workgroup_interval_t = os_workgroup_t;
typedef os_workgroup_interval_data_t
    = ffi.Pointer<os_workgroup_interval_data_opaque_s>;
typedef os_workgroup_parallel_t = os_workgroup_t;
typedef os_workgroup_attr_t = ffi.Pointer<os_workgroup_attr_opaque_s>;

class time_value extends ffi.Struct {
  @integer_t()
  external int seconds;

  @integer_t()
  external int microseconds;
}

typedef integer_t = pkg_ffi.Int;

class mach_timespec extends ffi.Struct {
  @pkg_ffi.UnsignedInt()
  external int tv_sec;

  @clock_res_t()
  external int tv_nsec;
}

typedef clock_res_t = pkg_ffi.Int;
typedef dispatch_time_t = ffi.Uint64;
typedef qos_class_t = pkg_ffi.UnsignedInt;

class dispatch_object_t extends ffi.Union {
  external ffi.Pointer<_os_object_s> _os_obj;

  external ffi.Pointer<dispatch_object_s> _do;

  external ffi.Pointer<dispatch_queue_s> _dq;

  external ffi.Pointer<dispatch_queue_attr_s> _dqa;

  external ffi.Pointer<dispatch_group_s> _dg;

  external ffi.Pointer<dispatch_source_s> _ds;

  external ffi.Pointer<dispatch_channel_s> _dch;

  external ffi.Pointer<dispatch_mach_s> _dm;

  external ffi.Pointer<dispatch_mach_msg_s> _dmsg;

  external ffi.Pointer<dispatch_semaphore_s> _dsema;

  external ffi.Pointer<dispatch_data_s> _ddata;

  external ffi.Pointer<dispatch_io_s> _dchannel;
}

class _os_object_s extends ffi.Opaque {}

class dispatch_object_s extends ffi.Opaque {}

class dispatch_queue_s extends ffi.Opaque {}

class dispatch_queue_attr_s extends ffi.Opaque {}

class dispatch_group_s extends ffi.Opaque {}

class dispatch_source_s extends ffi.Opaque {}

class dispatch_channel_s extends ffi.Opaque {}

class dispatch_mach_s extends ffi.Opaque {}

class dispatch_mach_msg_s extends ffi.Opaque {}

class dispatch_semaphore_s extends ffi.Opaque {}

class dispatch_data_s extends ffi.Opaque {}

class dispatch_io_s extends ffi.Opaque {}

typedef dispatch_function_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef dispatch_qos_class_t = qos_class_t;
typedef dispatch_queue_t = ffi.Pointer<dispatch_queue_s>;
typedef dispatch_queue_global_t = dispatch_queue_t;
typedef uintptr_t = pkg_ffi.UnsignedLong;
typedef dispatch_queue_attr_t = ffi.Pointer<dispatch_queue_attr_s>;

abstract class dispatch_autorelease_frequency_t {
  static const int DISPATCH_AUTORELEASE_FREQUENCY_INHERIT = 0;
  static const int DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM = 1;
  static const int DISPATCH_AUTORELEASE_FREQUENCY_NEVER = 2;
}

abstract class dispatch_block_flags_t {
  static const int DISPATCH_BLOCK_BARRIER = 1;
  static const int DISPATCH_BLOCK_DETACHED = 2;
  static const int DISPATCH_BLOCK_ASSIGN_CURRENT = 4;
  static const int DISPATCH_BLOCK_NO_QOS_CLASS = 8;
  static const int DISPATCH_BLOCK_INHERIT_QOS_CLASS = 16;
  static const int DISPATCH_BLOCK_ENFORCE_QOS_CLASS = 32;
}

class mach_msg_type_descriptor_t extends ffi.Opaque {}

class mach_msg_port_descriptor_t extends ffi.Opaque {}

class mach_msg_ool_descriptor32_t extends ffi.Opaque {}

class mach_msg_ool_descriptor64_t extends ffi.Opaque {}

class mach_msg_ool_descriptor_t extends ffi.Opaque {}

class mach_msg_ool_ports_descriptor32_t extends ffi.Opaque {}

class mach_msg_ool_ports_descriptor64_t extends ffi.Opaque {}

class mach_msg_ool_ports_descriptor_t extends ffi.Opaque {}

class mach_msg_guarded_port_descriptor32_t extends ffi.Opaque {}

class mach_msg_guarded_port_descriptor64_t extends ffi.Opaque {}

class mach_msg_guarded_port_descriptor_t extends ffi.Opaque {}

class mach_msg_descriptor_t extends ffi.Opaque {}

class mach_msg_body_t extends ffi.Struct {
  @mach_msg_size_t()
  external int msgh_descriptor_count;
}

typedef mach_msg_size_t = natural_t;

class mach_msg_header_t extends ffi.Struct {
  @mach_msg_bits_t()
  external int msgh_bits;

  @mach_msg_size_t()
  external int msgh_size;

  @mach_port_t()
  external int msgh_remote_port;

  @mach_port_t()
  external int msgh_local_port;

  @mach_port_name_t()
  external int msgh_voucher_port;

  @mach_msg_id_t()
  external int msgh_id;
}

typedef mach_msg_bits_t = pkg_ffi.UnsignedInt;
typedef mach_port_name_t = natural_t;
typedef mach_msg_id_t = integer_t;

class mach_msg_base_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_body_t body;
}

class mach_msg_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;
}

typedef mach_msg_trailer_type_t = pkg_ffi.UnsignedInt;
typedef mach_msg_trailer_size_t = pkg_ffi.UnsignedInt;

class mach_msg_seqno_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;
}

class security_token_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<pkg_ffi.UnsignedInt> val;
}

class mach_msg_security_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;
}

class audit_token_t extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<pkg_ffi.UnsignedInt> val;
}

class mach_msg_audit_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;
}

@ffi.Packed(4)
class mach_msg_context_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;
}

typedef mach_port_context_t = vm_offset_t;
typedef vm_offset_t = uintptr_t;

class msg_labels_t extends ffi.Struct {
  @mach_port_name_t()
  external int sender;
}

@ffi.Packed(4)
class mach_msg_mac_trailer_t extends ffi.Struct {
  @mach_msg_trailer_type_t()
  external int msgh_trailer_type;

  @mach_msg_trailer_size_t()
  external int msgh_trailer_size;

  @mach_port_seqno_t()
  external int msgh_seqno;

  external security_token_t msgh_sender;

  external audit_token_t msgh_audit;

  @mach_port_context_t()
  external int msgh_context;

  @mach_msg_filter_id()
  external int msgh_ad;

  external msg_labels_t msgh_labels;
}

typedef mach_msg_filter_id = pkg_ffi.Int;

class mach_msg_empty_send_t extends ffi.Struct {
  external mach_msg_header_t header;
}

class mach_msg_empty_rcv_t extends ffi.Struct {
  external mach_msg_header_t header;

  external mach_msg_trailer_t trailer;
}

class mach_msg_empty_t extends ffi.Union {
  external mach_msg_empty_send_t send;

  external mach_msg_empty_rcv_t rcv;
}

typedef mach_msg_return_t = kern_return_t;
typedef kern_return_t = pkg_ffi.Int;
typedef mach_msg_option_t = integer_t;
typedef mach_msg_timeout_t = natural_t;

class dispatch_source_type_s extends ffi.Opaque {}

typedef dispatch_source_t = ffi.Pointer<dispatch_source_s>;
typedef dispatch_source_type_t = ffi.Pointer<dispatch_source_type_s>;
typedef dispatch_group_t = ffi.Pointer<dispatch_group_s>;
typedef dispatch_semaphore_t = ffi.Pointer<dispatch_semaphore_s>;
typedef dispatch_once_t = ffi.IntPtr;
typedef dispatch_data_t = ffi.Pointer<dispatch_data_s>;
typedef dispatch_io_t = ffi.Pointer<dispatch_io_s>;
typedef dispatch_io_close_flags_t = pkg_ffi.UnsignedLong;
typedef dispatch_fd_t = pkg_ffi.Int;
typedef dispatch_io_interval_flags_t = pkg_ffi.UnsignedLong;
typedef dispatch_workloop_t = dispatch_queue_t;

class CFStreamError extends ffi.Struct {
  @CFIndex()
  external int domain;

  @SInt32()
  external int error;
}

class CFStreamClientContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

class __CFReadStream extends ffi.Opaque {}

class __CFWriteStream extends ffi.Opaque {}

typedef CFStreamPropertyKey = CFStringRef;
typedef CFReadStreamRef = ffi.Pointer<__CFReadStream>;
typedef CFWriteStreamRef = ffi.Pointer<__CFWriteStream>;
typedef CFStreamStatus = CFIndex;
typedef CFReadStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFReadStreamRef, CFStreamEventType, ffi.Pointer<ffi.Void>)>>;
typedef CFStreamEventType = CFOptionFlags;
typedef CFWriteStreamClientCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFWriteStreamRef, CFStreamEventType, ffi.Pointer<ffi.Void>)>>;
typedef CFPropertyListFormat = CFIndex;

class CFSetCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFSetRetainCallBack retain;

  external CFSetReleaseCallBack release;

  external CFSetCopyDescriptionCallBack copyDescription;

  external CFSetEqualCallBack equal;

  external CFSetHashCallBack hash;
}

typedef CFSetRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetReleaseCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFAllocatorRef, ffi.Pointer<ffi.Void>)>>;
typedef CFSetCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;
typedef CFSetEqualCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFSetHashCallBack = ffi
    .Pointer<ffi.NativeFunction<CFHashCode Function(ffi.Pointer<ffi.Void>)>>;

class __CFSet extends ffi.Opaque {}

typedef CFSetRef = ffi.Pointer<__CFSet>;
typedef CFMutableSetRef = ffi.Pointer<__CFSet>;
typedef CFSetApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class CFTreeContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFTreeRetainCallBack retain;

  external CFTreeReleaseCallBack release;

  external CFTreeCopyDescriptionCallBack copyDescription;
}

typedef CFTreeRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFTreeCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

class __CFTree extends ffi.Opaque {}

typedef CFTreeRef = ffi.Pointer<__CFTree>;
typedef CFTreeApplierFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;

class __CFUUID extends ffi.Opaque {}

class CFUUIDBytes extends ffi.Struct {
  @UInt8()
  external int byte0;

  @UInt8()
  external int byte1;

  @UInt8()
  external int byte2;

  @UInt8()
  external int byte3;

  @UInt8()
  external int byte4;

  @UInt8()
  external int byte5;

  @UInt8()
  external int byte6;

  @UInt8()
  external int byte7;

  @UInt8()
  external int byte8;

  @UInt8()
  external int byte9;

  @UInt8()
  external int byte10;

  @UInt8()
  external int byte11;

  @UInt8()
  external int byte12;

  @UInt8()
  external int byte13;

  @UInt8()
  external int byte14;

  @UInt8()
  external int byte15;
}

typedef CFUUIDRef = ffi.Pointer<__CFUUID>;

class __CFBundle extends ffi.Opaque {}

typedef CFBundleRef = ffi.Pointer<__CFBundle>;
typedef cpu_type_t = integer_t;
typedef CFPlugInRef = ffi.Pointer<__CFBundle>;
typedef CFBundleRefNum = pkg_ffi.Int;

class __CFMessagePort extends ffi.Opaque {}

class CFMessagePortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMessagePortRef = ffi.Pointer<__CFMessagePort>;
typedef CFMessagePortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(
            CFMessagePortRef, SInt32, CFDataRef, ffi.Pointer<ffi.Void>)>>;
typedef CFMessagePortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMessagePortRef, ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInFactoryFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CFAllocatorRef, CFUUIDRef)>>;

class __CFPlugInInstance extends ffi.Opaque {}

typedef CFPlugInInstanceRef = ffi.Pointer<__CFPlugInInstance>;
typedef CFPlugInInstanceDeallocateInstanceDataFunction
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFPlugInInstanceGetInterfaceFunction = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(CFPlugInInstanceRef, CFStringRef,
            ffi.Pointer<ffi.Pointer<ffi.Void>>)>>;

class __CFMachPort extends ffi.Opaque {}

class CFMachPortContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFMachPortRef = ffi.Pointer<__CFMachPort>;
typedef CFMachPortCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>, CFIndex,
            ffi.Pointer<ffi.Void>)>>;
typedef CFMachPortInvalidationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFMachPortRef, ffi.Pointer<ffi.Void>)>>;

class __CFAttributedString extends ffi.Opaque {}

typedef CFAttributedStringRef = ffi.Pointer<__CFAttributedString>;
typedef CFMutableAttributedStringRef = ffi.Pointer<__CFAttributedString>;

class __CFURLEnumerator extends ffi.Opaque {}

typedef CFURLEnumeratorRef = ffi.Pointer<__CFURLEnumerator>;
typedef CFURLEnumeratorOptions = CFOptionFlags;
typedef CFURLEnumeratorResult = CFIndex;

class guid_t extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<pkg_ffi.UnsignedChar> g_guid;

  @ffi.Array.multi([4])
  external ffi.Array<pkg_ffi.UnsignedInt> g_guid_asint;
}

@ffi.Packed(1)
class ntsid_t extends ffi.Struct {
  @u_int8_t()
  external int sid_kind;

  @u_int8_t()
  external int sid_authcount;

  @ffi.Array.multi([6])
  external ffi.Array<u_int8_t> sid_authority;

  @ffi.Array.multi([16])
  external ffi.Array<u_int32_t> sid_authorities;
}

typedef u_int8_t = pkg_ffi.UnsignedChar;
typedef u_int32_t = pkg_ffi.UnsignedInt;

class kauth_identity_extlookup extends ffi.Struct {
  @u_int32_t()
  external int el_seqno;

  @u_int32_t()
  external int el_result;

  @u_int32_t()
  external int el_flags;

  @__darwin_pid_t()
  external int el_info_pid;

  @u_int64_t()
  external int el_extend;

  @u_int32_t()
  external int el_info_reserved_1;

  @uid_t()
  external int el_uid;

  external guid_t el_uguid;

  @u_int32_t()
  external int el_uguid_valid;

  external ntsid_t el_usid;

  @u_int32_t()
  external int el_usid_valid;

  @gid_t()
  external int el_gid;

  external guid_t el_gguid;

  @u_int32_t()
  external int el_gguid_valid;

  external ntsid_t el_gsid;

  @u_int32_t()
  external int el_gsid_valid;

  @u_int32_t()
  external int el_member_valid;

  @u_int32_t()
  external int el_sup_grp_cnt;

  @ffi.Array.multi([16])
  external ffi.Array<gid_t> el_sup_groups;
}

typedef u_int64_t = pkg_ffi.UnsignedLongLong;

class kauth_cache_sizes extends ffi.Struct {
  @u_int32_t()
  external int kcs_group_size;

  @u_int32_t()
  external int kcs_id_size;
}

class kauth_ace extends ffi.Struct {
  external guid_t ace_applicable;

  @u_int32_t()
  external int ace_flags;

  @kauth_ace_rights_t()
  external int ace_rights;
}

typedef kauth_ace_rights_t = u_int32_t;

class kauth_acl extends ffi.Struct {
  @u_int32_t()
  external int acl_entrycount;

  @u_int32_t()
  external int acl_flags;

  @ffi.Array.multi([1])
  external ffi.Array<kauth_ace> acl_ace;
}

class kauth_filesec extends ffi.Struct {
  @u_int32_t()
  external int fsec_magic;

  external guid_t fsec_owner;

  external guid_t fsec_group;

  external kauth_acl fsec_acl;
}

abstract class acl_perm_t {
  static const int ACL_READ_DATA = 2;
  static const int ACL_LIST_DIRECTORY = 2;
  static const int ACL_WRITE_DATA = 4;
  static const int ACL_ADD_FILE = 4;
  static const int ACL_EXECUTE = 8;
  static const int ACL_SEARCH = 8;
  static const int ACL_DELETE = 16;
  static const int ACL_APPEND_DATA = 32;
  static const int ACL_ADD_SUBDIRECTORY = 32;
  static const int ACL_DELETE_CHILD = 64;
  static const int ACL_READ_ATTRIBUTES = 128;
  static const int ACL_WRITE_ATTRIBUTES = 256;
  static const int ACL_READ_EXTATTRIBUTES = 512;
  static const int ACL_WRITE_EXTATTRIBUTES = 1024;
  static const int ACL_READ_SECURITY = 2048;
  static const int ACL_WRITE_SECURITY = 4096;
  static const int ACL_CHANGE_OWNER = 8192;
  static const int ACL_SYNCHRONIZE = 1048576;
}

abstract class acl_tag_t {
  static const int ACL_UNDEFINED_TAG = 0;
  static const int ACL_EXTENDED_ALLOW = 1;
  static const int ACL_EXTENDED_DENY = 2;
}

abstract class acl_type_t {
  static const int ACL_TYPE_EXTENDED = 256;
  static const int ACL_TYPE_ACCESS = 0;
  static const int ACL_TYPE_DEFAULT = 1;
  static const int ACL_TYPE_AFS = 2;
  static const int ACL_TYPE_CODA = 3;
  static const int ACL_TYPE_NTFS = 4;
  static const int ACL_TYPE_NWFS = 5;
}

abstract class acl_entry_id_t {
  static const int ACL_FIRST_ENTRY = 0;
  static const int ACL_NEXT_ENTRY = -1;
  static const int ACL_LAST_ENTRY = -2;
}

abstract class acl_flag_t {
  static const int ACL_FLAG_DEFER_INHERIT = 1;
  static const int ACL_FLAG_NO_INHERIT = 131072;
  static const int ACL_ENTRY_INHERITED = 16;
  static const int ACL_ENTRY_FILE_INHERIT = 32;
  static const int ACL_ENTRY_DIRECTORY_INHERIT = 64;
  static const int ACL_ENTRY_LIMIT_INHERIT = 128;
  static const int ACL_ENTRY_ONLY_INHERIT = 256;
}

class _acl extends ffi.Opaque {}

class _acl_entry extends ffi.Opaque {}

class _acl_permset extends ffi.Opaque {}

class _acl_flagset extends ffi.Opaque {}

typedef acl_t = ffi.Pointer<_acl>;
typedef acl_entry_t = ffi.Pointer<_acl_entry>;
typedef acl_permset_t = ffi.Pointer<_acl_permset>;
typedef acl_permset_mask_t = u_int64_t;
typedef acl_flagset_t = ffi.Pointer<_acl_flagset>;

class __CFFileSecurity extends ffi.Opaque {}

typedef CFFileSecurityRef = ffi.Pointer<__CFFileSecurity>;
typedef CFFileSecurityClearOptions = CFOptionFlags;

class __CFStringTokenizer extends ffi.Opaque {}

typedef CFStringTokenizerRef = ffi.Pointer<__CFStringTokenizer>;
typedef CFStringTokenizerTokenType = CFOptionFlags;

class __CFFileDescriptor extends ffi.Opaque {}

class CFFileDescriptorContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>> retain;

  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      release;

  external ffi.Pointer<
          ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>
      copyDescription;
}

typedef CFFileDescriptorRef = ffi.Pointer<__CFFileDescriptor>;
typedef CFFileDescriptorNativeDescriptor = pkg_ffi.Int;
typedef CFFileDescriptorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFFileDescriptorRef, CFOptionFlags, ffi.Pointer<ffi.Void>)>>;

class __CFUserNotification extends ffi.Opaque {}

typedef CFUserNotificationRef = ffi.Pointer<__CFUserNotification>;
typedef CFUserNotificationCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFUserNotificationRef, CFOptionFlags)>>;

class __CFXMLNode extends ffi.Opaque {}

class CFXMLElementInfo extends ffi.Struct {
  external CFDictionaryRef attributes;

  external CFArrayRef attributeOrder;

  @Boolean()
  external int isEmpty;

  @ffi.Array.multi([3])
  external ffi.Array<pkg_ffi.Char> _reserved;
}

class CFXMLProcessingInstructionInfo extends ffi.Struct {
  external CFStringRef dataString;
}

class CFXMLDocumentInfo extends ffi.Struct {
  external CFURLRef sourceURL;

  @CFStringEncoding()
  external int encoding;
}

class CFXMLExternalID extends ffi.Struct {
  external CFURLRef systemID;

  external CFStringRef publicID;
}

class CFXMLDocumentTypeInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLNotationInfo extends ffi.Struct {
  external CFXMLExternalID externalID;
}

class CFXMLElementTypeDeclarationInfo extends ffi.Struct {
  external CFStringRef contentDescription;
}

class CFXMLAttributeDeclarationInfo extends ffi.Struct {
  external CFStringRef attributeName;

  external CFStringRef typeString;

  external CFStringRef defaultString;
}

class CFXMLAttributeListDeclarationInfo extends ffi.Struct {
  @CFIndex()
  external int numberOfAttributes;

  external ffi.Pointer<CFXMLAttributeDeclarationInfo> attributes;
}

class CFXMLEntityInfo extends ffi.Struct {
  @CFXMLEntityTypeCode()
  external int entityType;

  external CFStringRef replacementText;

  external CFXMLExternalID entityID;

  external CFStringRef notationName;
}

typedef CFXMLEntityTypeCode = CFIndex;

class CFXMLEntityReferenceInfo extends ffi.Struct {
  @CFXMLEntityTypeCode()
  external int entityType;
}

typedef CFXMLNodeRef = ffi.Pointer<__CFXMLNode>;
typedef CFXMLNodeTypeCode = CFIndex;
typedef CFXMLTreeRef = CFTreeRef;

class __CFXMLParser extends ffi.Opaque {}

class CFXMLParserCallBacks extends ffi.Struct {
  @CFIndex()
  external int version;

  external CFXMLParserCreateXMLStructureCallBack createXMLStructure;

  external CFXMLParserAddChildCallBack addChild;

  external CFXMLParserEndXMLStructureCallBack endXMLStructure;

  external CFXMLParserResolveExternalEntityCallBack resolveExternalEntity;

  external CFXMLParserHandleErrorCallBack handleError;
}

typedef CFXMLParserCreateXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            CFXMLParserRef, CFXMLNodeRef, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserRef = ffi.Pointer<__CFXMLParser>;
typedef CFXMLParserAddChildCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(CFXMLParserRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserEndXMLStructureCallBack = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            CFXMLParserRef, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserResolveExternalEntityCallBack = ffi.Pointer<
    ffi.NativeFunction<
        CFDataRef Function(CFXMLParserRef, ffi.Pointer<CFXMLExternalID>,
            ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserHandleErrorCallBack = ffi.Pointer<
    ffi.NativeFunction<
        Boolean Function(
            CFXMLParserRef, CFXMLParserStatusCode, ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserStatusCode = CFIndex;

class CFXMLParserContext extends ffi.Struct {
  @CFIndex()
  external int version;

  external ffi.Pointer<ffi.Void> info;

  external CFXMLParserRetainCallBack retain;

  external CFXMLParserReleaseCallBack release;

  external CFXMLParserCopyDescriptionCallBack copyDescription;
}

typedef CFXMLParserRetainCallBack = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserReleaseCallBack
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef CFXMLParserCopyDescriptionCallBack = ffi
    .Pointer<ffi.NativeFunction<CFStringRef Function(ffi.Pointer<ffi.Void>)>>;

class __SecTrust extends ffi.Opaque {}

typedef SecTrustRef = ffi.Pointer<__SecTrust>;
typedef SecTrustResultType = ffi.Uint32;
typedef SecKeyRef = ffi.Pointer<__SecKey>;
typedef SecCertificateRef = ffi.Pointer<__SecCertificate>;

class cssm_data extends ffi.Struct {
  @pkg_ffi.Size()
  external int Length;

  external ffi.Pointer<ffi.Uint8> Data;
}

class SecAsn1AlgId extends ffi.Struct {
  external SecAsn1Oid algorithm;

  external SecAsn1Item parameters;
}

typedef SecAsn1Oid = cssm_data;
typedef SecAsn1Item = cssm_data;

class SecAsn1PubKeyInfo extends ffi.Struct {
  external SecAsn1AlgId algorithm;

  external SecAsn1Item subjectPublicKey;
}

class SecAsn1Template_struct extends ffi.Struct {
  @ffi.Uint32()
  external int kind;

  @ffi.Uint32()
  external int offset;

  external ffi.Pointer<ffi.Void> sub;

  @ffi.Uint32()
  external int size;
}

class cssm_guid extends ffi.Struct {
  @uint32()
  external int Data1;

  @uint16()
  external int Data2;

  @uint16()
  external int Data3;

  @ffi.Array.multi([8])
  external ffi.Array<uint8> Data4;
}

typedef uint32 = ffi.Uint32;
typedef uint16 = ffi.Uint16;
typedef uint8 = ffi.Uint8;

class cssm_version extends ffi.Struct {
  @uint32()
  external int Major;

  @uint32()
  external int Minor;
}

class cssm_subservice_uid extends ffi.Struct {
  external CSSM_GUID Guid;

  external CSSM_VERSION Version;

  @uint32()
  external int SubserviceId;

  @CSSM_SERVICE_TYPE()
  external int SubserviceType;
}

typedef CSSM_GUID = cssm_guid;
typedef CSSM_VERSION = cssm_version;
typedef CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;
typedef CSSM_SERVICE_MASK = uint32;

class cssm_net_address extends ffi.Struct {
  @CSSM_NET_ADDRESS_TYPE()
  external int AddressType;

  external SecAsn1Item Address;
}

typedef CSSM_NET_ADDRESS_TYPE = uint32;

class cssm_crypto_data extends ffi.Struct {
  external SecAsn1Item Param;

  external CSSM_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(CSSM_DATA_PTR, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_RETURN = sint32;
typedef sint32 = ffi.Int32;
typedef CSSM_DATA_PTR = ffi.Pointer<SecAsn1Item>;

class cssm_list_element extends ffi.Struct {
  external ffi.Pointer<cssm_list_element> NextElement;

  @CSSM_WORDID_TYPE()
  external int WordID;

  @CSSM_LIST_ELEMENT_TYPE()
  external int ElementType;

  external UnnamedUnion1 Element;
}

typedef CSSM_WORDID_TYPE = sint32;
typedef CSSM_LIST_ELEMENT_TYPE = uint32;

class UnnamedUnion1 extends ffi.Union {
  external CSSM_LIST Sublist;

  external SecAsn1Item Word;
}

typedef CSSM_LIST = cssm_list;

class cssm_list extends ffi.Struct {
  @CSSM_LIST_TYPE()
  external int ListType;

  external CSSM_LIST_ELEMENT_PTR Head;

  external CSSM_LIST_ELEMENT_PTR Tail;
}

typedef CSSM_LIST_TYPE = uint32;
typedef CSSM_LIST_ELEMENT_PTR = ffi.Pointer<cssm_list_element>;

class CSSM_TUPLE extends ffi.Struct {
  external CSSM_LIST Issuer;

  external CSSM_LIST Subject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_LIST AuthorizationTag;

  external CSSM_LIST ValidityPeriod;
}

typedef CSSM_BOOL = sint32;

class cssm_tuplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfTuples;

  external CSSM_TUPLE_PTR Tuples;
}

typedef CSSM_TUPLE_PTR = ffi.Pointer<CSSM_TUPLE>;

class cssm_sample extends ffi.Struct {
  external CSSM_LIST TypedSample;

  external ffi.Pointer<CSSM_SUBSERVICE_UID> Verifier;
}

typedef CSSM_SUBSERVICE_UID = cssm_subservice_uid;

class cssm_samplegroup extends ffi.Struct {
  @uint32()
  external int NumberOfSamples;

  external ffi.Pointer<CSSM_SAMPLE> Samples;
}

typedef CSSM_SAMPLE = cssm_sample;

class cssm_memory_funcs extends ffi.Struct {
  external CSSM_MALLOC malloc_func;

  external CSSM_FREE free_func;

  external CSSM_REALLOC realloc_func;

  external CSSM_CALLOC calloc_func;

  external ffi.Pointer<ffi.Void> AllocRef;
}

typedef CSSM_MALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_SIZE = pkg_ffi.Size;
typedef CSSM_FREE = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_REALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            ffi.Pointer<ffi.Void>, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;
typedef CSSM_CALLOC = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(
            uint32, CSSM_SIZE, ffi.Pointer<ffi.Void>)>>;

class cssm_encoded_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  external SecAsn1Item CertBlob;
}

typedef CSSM_CERT_TYPE = uint32;
typedef CSSM_CERT_ENCODING = uint32;

class cssm_parsed_cert extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_PARSE_FORMAT()
  external int ParsedCertFormat;

  external ffi.Pointer<ffi.Void> ParsedCert;
}

typedef CSSM_CERT_PARSE_FORMAT = uint32;

class cssm_cert_pair extends ffi.Struct {
  external CSSM_ENCODED_CERT EncodedCert;

  external CSSM_PARSED_CERT ParsedCert;
}

typedef CSSM_ENCODED_CERT = cssm_encoded_cert;
typedef CSSM_PARSED_CERT = cssm_parsed_cert;

class cssm_certgroup extends ffi.Struct {
  @CSSM_CERT_TYPE()
  external int CertType;

  @CSSM_CERT_ENCODING()
  external int CertEncoding;

  @uint32()
  external int NumCerts;

  external UnnamedUnion2 GroupList;

  @CSSM_CERTGROUP_TYPE()
  external int CertGroupType;

  external ffi.Pointer<ffi.Void> Reserved;
}

class UnnamedUnion2 extends ffi.Union {
  external CSSM_DATA_PTR CertList;

  external CSSM_ENCODED_CERT_PTR EncodedCertList;

  external CSSM_PARSED_CERT_PTR ParsedCertList;

  external CSSM_CERT_PAIR_PTR PairCertList;
}

typedef CSSM_ENCODED_CERT_PTR = ffi.Pointer<cssm_encoded_cert>;
typedef CSSM_PARSED_CERT_PTR = ffi.Pointer<cssm_parsed_cert>;
typedef CSSM_CERT_PAIR_PTR = ffi.Pointer<cssm_cert_pair>;
typedef CSSM_CERTGROUP_TYPE = uint32;

class cssm_base_certs extends ffi.Struct {
  @CSSM_TP_HANDLE()
  external int TPHandle;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_CERTGROUP Certs;
}

typedef CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_MODULE_HANDLE = CSSM_HANDLE;
typedef CSSM_HANDLE = CSSM_INTPTR;
typedef CSSM_INTPTR = ffi.IntPtr;
typedef CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_CERTGROUP = cssm_certgroup;

class cssm_access_credentials extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> EntryTag;

  external CSSM_BASE_CERTS BaseCerts;

  external CSSM_SAMPLEGROUP Samples;

  external CSSM_CHALLENGE_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerCtx;
}

typedef CSSM_BASE_CERTS = cssm_base_certs;
typedef CSSM_SAMPLEGROUP = cssm_samplegroup;
typedef CSSM_CHALLENGE_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(ffi.Pointer<CSSM_LIST>, CSSM_SAMPLEGROUP_PTR,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CSSM_MEMORY_FUNCS>)>>;
typedef CSSM_SAMPLEGROUP_PTR = ffi.Pointer<cssm_samplegroup>;
typedef CSSM_MEMORY_FUNCS = cssm_memory_funcs;

class cssm_authorizationgroup extends ffi.Struct {
  @uint32()
  external int NumberOfAuthTags;

  external ffi.Pointer<CSSM_ACL_AUTHORIZATION_TAG> AuthTags;
}

typedef CSSM_ACL_AUTHORIZATION_TAG = sint32;

class cssm_acl_validity_period extends ffi.Struct {
  external SecAsn1Item StartDate;

  external SecAsn1Item EndDate;
}

class cssm_acl_entry_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;

  external CSSM_AUTHORIZATIONGROUP Authorization;

  external CSSM_ACL_VALIDITY_PERIOD TimeRange;

  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> EntryTag;
}

typedef CSSM_AUTHORIZATIONGROUP = cssm_authorizationgroup;
typedef CSSM_ACL_VALIDITY_PERIOD = cssm_acl_validity_period;

class cssm_acl_owner_prototype extends ffi.Struct {
  external CSSM_LIST TypedSubject;

  @CSSM_BOOL()
  external int Delegate;
}

class cssm_acl_entry_input extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE Prototype;

  external CSSM_ACL_SUBJECT_CALLBACK Callback;

  external ffi.Pointer<ffi.Void> CallerContext;
}

typedef CSSM_ACL_ENTRY_PROTOTYPE = cssm_acl_entry_prototype;
typedef CSSM_ACL_SUBJECT_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(ffi.Pointer<CSSM_LIST>, CSSM_LIST_PTR,
            ffi.Pointer<ffi.Void>, ffi.Pointer<CSSM_MEMORY_FUNCS>)>>;
typedef CSSM_LIST_PTR = ffi.Pointer<cssm_list>;

class cssm_resource_control_context extends ffi.Struct {
  external CSSM_ACCESS_CREDENTIALS_PTR AccessCred;

  external CSSM_ACL_ENTRY_INPUT InitialAclEntry;
}

typedef CSSM_ACCESS_CREDENTIALS_PTR = ffi.Pointer<cssm_access_credentials>;
typedef CSSM_ACL_ENTRY_INPUT = cssm_acl_entry_input;

class cssm_acl_entry_info extends ffi.Struct {
  external CSSM_ACL_ENTRY_PROTOTYPE EntryPublicInfo;

  @CSSM_ACL_HANDLE()
  external int EntryHandle;
}

typedef CSSM_ACL_HANDLE = CSSM_HANDLE;

class cssm_acl_edit extends ffi.Struct {
  @CSSM_ACL_EDIT_MODE()
  external int EditMode;

  @CSSM_ACL_HANDLE()
  external int OldEntryHandle;

  external ffi.Pointer<CSSM_ACL_ENTRY_INPUT> NewEntry;
}

typedef CSSM_ACL_EDIT_MODE = uint32;

class cssm_func_name_addr extends ffi.Struct {
  @ffi.Array.multi([68])
  external ffi.Array<pkg_ffi.Char> Name;

  external CSSM_PROC_ADDR Address;
}

typedef CSSM_PROC_ADDR = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;

class cssm_date extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<uint8> Year;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Month;

  @ffi.Array.multi([2])
  external ffi.Array<uint8> Day;
}

class cssm_range extends ffi.Struct {
  @uint32()
  external int Min;

  @uint32()
  external int Max;
}

class cssm_query_size_data extends ffi.Struct {
  @uint32()
  external int SizeInputBlock;

  @uint32()
  external int SizeOutputBlock;
}

class cssm_key_size extends ffi.Struct {
  @uint32()
  external int LogicalKeySizeInBits;

  @uint32()
  external int EffectiveKeySizeInBits;
}

class cssm_keyheader extends ffi.Struct {
  @CSSM_HEADERVERSION()
  external int HeaderVersion;

  external CSSM_GUID CspId;

  @CSSM_KEYBLOB_TYPE()
  external int BlobType;

  @CSSM_KEYBLOB_FORMAT()
  external int Format;

  @CSSM_ALGORITHMS()
  external int AlgorithmId;

  @CSSM_KEYCLASS()
  external int KeyClass;

  @uint32()
  external int LogicalKeySizeInBits;

  @CSSM_KEYATTR_FLAGS()
  external int KeyAttr;

  @CSSM_KEYUSE()
  external int KeyUsage;

  external CSSM_DATE StartDate;

  external CSSM_DATE EndDate;

  @CSSM_ALGORITHMS()
  external int WrapAlgorithmId;

  @CSSM_ENCRYPT_MODE()
  external int WrapMode;

  @uint32()
  external int Reserved;
}

typedef CSSM_HEADERVERSION = uint32;
typedef CSSM_KEYBLOB_TYPE = uint32;
typedef CSSM_KEYBLOB_FORMAT = uint32;
typedef CSSM_ALGORITHMS = uint32;
typedef CSSM_KEYCLASS = uint32;
typedef CSSM_KEYATTR_FLAGS = uint32;
typedef CSSM_KEYUSE = uint32;
typedef CSSM_DATE = cssm_date;
typedef CSSM_ENCRYPT_MODE = uint32;

class cssm_key extends ffi.Struct {
  external CSSM_KEYHEADER KeyHeader;

  external SecAsn1Item KeyData;
}

typedef CSSM_KEYHEADER = cssm_keyheader;

class cssm_dl_db_handle extends ffi.Struct {
  @CSSM_DL_HANDLE()
  external int DLHandle;

  @CSSM_DB_HANDLE()
  external int DBHandle;
}

typedef CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;
typedef CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;

class cssm_context_attribute extends ffi.Struct {
  @CSSM_ATTRIBUTE_TYPE()
  external int AttributeType;

  @uint32()
  external int AttributeLength;

  external cssm_context_attribute_value Attribute;
}

typedef CSSM_ATTRIBUTE_TYPE = uint32;

class cssm_context_attribute_value extends ffi.Union {
  external ffi.Pointer<pkg_ffi.Char> String;

  @uint32()
  external int Uint32;

  external CSSM_ACCESS_CREDENTIALS_PTR AccessCredentials;

  external CSSM_KEY_PTR Key;

  external CSSM_DATA_PTR Data;

  @CSSM_PADDING()
  external int Padding;

  external CSSM_DATE_PTR Date;

  external CSSM_RANGE_PTR Range;

  external CSSM_CRYPTO_DATA_PTR CryptoData;

  external CSSM_VERSION_PTR Version;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;

  external ffi.Pointer<cssm_kr_profile> KRProfile;
}

typedef CSSM_KEY_PTR = ffi.Pointer<cssm_key>;
typedef CSSM_PADDING = uint32;
typedef CSSM_DATE_PTR = ffi.Pointer<cssm_date>;
typedef CSSM_RANGE_PTR = ffi.Pointer<cssm_range>;
typedef CSSM_CRYPTO_DATA_PTR = ffi.Pointer<cssm_crypto_data>;
typedef CSSM_VERSION_PTR = ffi.Pointer<cssm_version>;
typedef CSSM_DL_DB_HANDLE_PTR = ffi.Pointer<cssm_dl_db_handle>;

class cssm_kr_profile extends ffi.Opaque {}

class cssm_context extends ffi.Struct {
  @CSSM_CONTEXT_TYPE()
  external int ContextType;

  @CSSM_ALGORITHMS()
  external int AlgorithmType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_CONTEXT_ATTRIBUTE_PTR ContextAttributes;

  @CSSM_CSP_HANDLE()
  external int CSPHandle;

  @CSSM_BOOL()
  external int Privileged;

  @uint32()
  external int EncryptionProhibited;

  @uint32()
  external int WorkFactor;

  @uint32()
  external int Reserved;
}

typedef CSSM_CONTEXT_TYPE = uint32;
typedef CSSM_CONTEXT_ATTRIBUTE_PTR = ffi.Pointer<cssm_context_attribute>;
typedef CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;

class cssm_pkcs1_oaep_params extends ffi.Struct {
  @uint32()
  external int HashAlgorithm;

  external SecAsn1Item HashParams;

  @CSSM_PKCS_OAEP_MGF()
  external int MGF;

  external SecAsn1Item MGFParams;

  @CSSM_PKCS_OAEP_PSOURCE()
  external int PSource;

  external SecAsn1Item PSourceParams;
}

typedef CSSM_PKCS_OAEP_MGF = uint32;
typedef CSSM_PKCS_OAEP_PSOURCE = uint32;

class cssm_csp_operational_statistics extends ffi.Struct {
  @CSSM_BOOL()
  external int UserAuthenticated;

  @CSSM_CSP_FLAGS()
  external int DeviceFlags;

  @uint32()
  external int TokenMaxSessionCount;

  @uint32()
  external int TokenOpenedSessionCount;

  @uint32()
  external int TokenMaxRWSessionCount;

  @uint32()
  external int TokenOpenedRWSessionCount;

  @uint32()
  external int TokenTotalPublicMem;

  @uint32()
  external int TokenFreePublicMem;

  @uint32()
  external int TokenTotalPrivateMem;

  @uint32()
  external int TokenFreePrivateMem;
}

typedef CSSM_CSP_FLAGS = uint32;

class cssm_pkcs5_pbkdf1_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  external SecAsn1Item InitVector;
}

class cssm_pkcs5_pbkdf2_params extends ffi.Struct {
  external SecAsn1Item Passphrase;

  @CSSM_PKCS5_PBKDF2_PRF()
  external int PseudoRandomFunction;
}

typedef CSSM_PKCS5_PBKDF2_PRF = uint32;

class cssm_kea_derive_params extends ffi.Struct {
  external SecAsn1Item Rb;

  external SecAsn1Item Yb;
}

class cssm_tp_authority_id extends ffi.Struct {
  external ffi.Pointer<SecAsn1Item> AuthorityCert;

  external CSSM_NET_ADDRESS_PTR AuthorityLocation;
}

typedef CSSM_NET_ADDRESS_PTR = ffi.Pointer<cssm_net_address>;

class cssm_field extends ffi.Struct {
  external SecAsn1Oid FieldOid;

  external SecAsn1Item FieldValue;
}

class cssm_tp_policyinfo extends ffi.Struct {
  @uint32()
  external int NumberOfPolicyIds;

  external CSSM_FIELD_PTR PolicyIds;

  external ffi.Pointer<ffi.Void> PolicyControl;
}

typedef CSSM_FIELD_PTR = ffi.Pointer<cssm_field>;

class cssm_dl_db_list extends ffi.Struct {
  @uint32()
  external int NumHandles;

  external CSSM_DL_DB_HANDLE_PTR DLDBHandle;
}

class cssm_tp_callerauth_context extends ffi.Struct {
  external CSSM_TP_POLICYINFO Policy;

  external CSSM_TIMESTRING VerifyTime;

  @CSSM_TP_STOP_ON()
  external int VerificationAbortOn;

  external CSSM_TP_VERIFICATION_RESULTS_CALLBACK CallbackWithVerifiedCert;

  @uint32()
  external int NumberOfAnchorCerts;

  external CSSM_DATA_PTR AnchorCerts;

  external CSSM_DL_DB_LIST_PTR DBList;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_POLICYINFO = cssm_tp_policyinfo;
typedef CSSM_TIMESTRING = ffi.Pointer<pkg_ffi.Char>;
typedef CSSM_TP_STOP_ON = uint32;
typedef CSSM_TP_VERIFICATION_RESULTS_CALLBACK = ffi.Pointer<
    ffi.NativeFunction<
        CSSM_RETURN Function(
            CSSM_MODULE_HANDLE, ffi.Pointer<ffi.Void>, CSSM_DATA_PTR)>>;
typedef CSSM_DL_DB_LIST_PTR = ffi.Pointer<cssm_dl_db_list>;

class cssm_encoded_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  external SecAsn1Item CrlBlob;
}

typedef CSSM_CRL_TYPE = uint32;
typedef CSSM_CRL_ENCODING = uint32;

class cssm_parsed_crl extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_PARSE_FORMAT()
  external int ParsedCrlFormat;

  external ffi.Pointer<ffi.Void> ParsedCrl;
}

typedef CSSM_CRL_PARSE_FORMAT = uint32;

class cssm_crl_pair extends ffi.Struct {
  external CSSM_ENCODED_CRL EncodedCrl;

  external CSSM_PARSED_CRL ParsedCrl;
}

typedef CSSM_ENCODED_CRL = cssm_encoded_crl;
typedef CSSM_PARSED_CRL = cssm_parsed_crl;

class cssm_crlgroup extends ffi.Struct {
  @CSSM_CRL_TYPE()
  external int CrlType;

  @CSSM_CRL_ENCODING()
  external int CrlEncoding;

  @uint32()
  external int NumberOfCrls;

  external UnnamedUnion3 GroupCrlList;

  @CSSM_CRLGROUP_TYPE()
  external int CrlGroupType;
}

class UnnamedUnion3 extends ffi.Union {
  external CSSM_DATA_PTR CrlList;

  external CSSM_ENCODED_CRL_PTR EncodedCrlList;

  external CSSM_PARSED_CRL_PTR ParsedCrlList;

  external CSSM_CRL_PAIR_PTR PairCrlList;
}

typedef CSSM_ENCODED_CRL_PTR = ffi.Pointer<cssm_encoded_crl>;
typedef CSSM_PARSED_CRL_PTR = ffi.Pointer<cssm_parsed_crl>;
typedef CSSM_CRL_PAIR_PTR = ffi.Pointer<cssm_crl_pair>;
typedef CSSM_CRLGROUP_TYPE = uint32;

class cssm_fieldgroup extends ffi.Struct {
  @pkg_ffi.Int()
  external int NumberOfFields;

  external CSSM_FIELD_PTR Fields;
}

class cssm_evidence extends ffi.Struct {
  @CSSM_EVIDENCE_FORM()
  external int EvidenceForm;

  external ffi.Pointer<ffi.Void> Evidence;
}

typedef CSSM_EVIDENCE_FORM = uint32;

class cssm_tp_verify_context extends ffi.Struct {
  @CSSM_TP_ACTION()
  external int Action;

  external SecAsn1Item ActionData;

  external CSSM_CRLGROUP Crls;

  external CSSM_TP_CALLERAUTH_CONTEXT_PTR Cred;
}

typedef CSSM_TP_ACTION = uint32;
typedef CSSM_CRLGROUP = cssm_crlgroup;
typedef CSSM_TP_CALLERAUTH_CONTEXT_PTR
    = ffi.Pointer<cssm_tp_callerauth_context>;

class cssm_tp_verify_context_result extends ffi.Struct {
  @uint32()
  external int NumberOfEvidences;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_EVIDENCE_PTR = ffi.Pointer<cssm_evidence>;

class cssm_tp_request_set extends ffi.Struct {
  @uint32()
  external int NumberOfRequests;

  external ffi.Pointer<ffi.Void> Requests;
}

class cssm_tp_result_set extends ffi.Struct {
  @uint32()
  external int NumberOfResults;

  external ffi.Pointer<ffi.Void> Results;
}

class cssm_tp_confirm_response extends ffi.Struct {
  @uint32()
  external int NumberOfResponses;

  external CSSM_TP_CONFIRM_STATUS_PTR Responses;
}

typedef CSSM_TP_CONFIRM_STATUS_PTR = ffi.Pointer<uint32>;

class cssm_tp_certissue_input extends ffi.Struct {
  external CSSM_SUBSERVICE_UID CSPSubserviceUid;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfTemplateFields;

  external CSSM_FIELD_PTR SubjectCertFields;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

typedef CSSM_TP_SERVICES = uint32;

class cssm_tp_certissue_output extends ffi.Struct {
  @CSSM_TP_CERTISSUE_STATUS()
  external int IssueStatus;

  external CSSM_CERTGROUP_PTR CertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTISSUE_STATUS = uint32;
typedef CSSM_CERTGROUP_PTR = ffi.Pointer<cssm_certgroup>;

class cssm_tp_certchange_input extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_ACTION()
  external int Action;

  @CSSM_TP_CERTCHANGE_REASON()
  external int Reason;

  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_FIELD_PTR ChangeInfo;

  external CSSM_TIMESTRING StartTime;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

typedef CSSM_TP_CERTCHANGE_ACTION = uint32;
typedef CSSM_TP_CERTCHANGE_REASON = uint32;

class cssm_tp_certchange_output extends ffi.Struct {
  @CSSM_TP_CERTCHANGE_STATUS()
  external int ActionStatus;

  external CSSM_FIELD RevokeInfo;
}

typedef CSSM_TP_CERTCHANGE_STATUS = uint32;
typedef CSSM_FIELD = cssm_field;

class cssm_tp_certverify_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  external CSSM_DATA_PTR Cert;

  external CSSM_TP_VERIFY_CONTEXT_PTR VerifyContext;
}

typedef CSSM_TP_VERIFY_CONTEXT_PTR = ffi.Pointer<cssm_tp_verify_context>;

class cssm_tp_certverify_output extends ffi.Struct {
  @CSSM_TP_CERTVERIFY_STATUS()
  external int VerifyStatus;

  @uint32()
  external int NumberOfEvidence;

  external CSSM_EVIDENCE_PTR Evidence;
}

typedef CSSM_TP_CERTVERIFY_STATUS = uint32;

class cssm_tp_certnotarize_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfFields;

  external CSSM_FIELD_PTR MoreFields;

  external CSSM_FIELD_PTR SignScope;

  @uint32()
  external int ScopeSize;

  @CSSM_TP_SERVICES()
  external int MoreServiceRequests;

  @uint32()
  external int NumberOfServiceControls;

  external CSSM_FIELD_PTR ServiceControls;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

class cssm_tp_certnotarize_output extends ffi.Struct {
  @CSSM_TP_CERTNOTARIZE_STATUS()
  external int NotarizeStatus;

  external CSSM_CERTGROUP_PTR NotarizedCertGroup;

  @CSSM_TP_SERVICES()
  external int PerformedServiceRequests;
}

typedef CSSM_TP_CERTNOTARIZE_STATUS = uint32;

class cssm_tp_certreclaim_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int NumberOfSelectionFields;

  external CSSM_FIELD_PTR SelectionFields;

  external CSSM_ACCESS_CREDENTIALS_PTR UserCredentials;
}

class cssm_tp_certreclaim_output extends ffi.Struct {
  @CSSM_TP_CERTRECLAIM_STATUS()
  external int ReclaimStatus;

  external CSSM_CERTGROUP_PTR ReclaimedCertGroup;

  @CSSM_LONG_HANDLE()
  external int KeyCacheHandle;
}

typedef CSSM_TP_CERTRECLAIM_STATUS = uint32;
typedef CSSM_LONG_HANDLE = uint64;
typedef uint64 = ffi.Uint64;

class cssm_tp_crlissue_input extends ffi.Struct {
  @CSSM_CL_HANDLE()
  external int CLHandle;

  @uint32()
  external int CrlIdentifier;

  external CSSM_TIMESTRING CrlThisTime;

  external CSSM_FIELD_PTR PolicyIdentifier;

  external CSSM_ACCESS_CREDENTIALS_PTR CallerCredentials;
}

class cssm_tp_crlissue_output extends ffi.Struct {
  @CSSM_TP_CRLISSUE_STATUS()
  external int IssueStatus;

  external CSSM_ENCODED_CRL_PTR Crl;

  external CSSM_TIMESTRING CrlNextTime;
}

typedef CSSM_TP_CRLISSUE_STATUS = uint32;

class cssm_cert_bundle_header extends ffi.Struct {
  @CSSM_CERT_BUNDLE_TYPE()
  external int BundleType;

  @CSSM_CERT_BUNDLE_ENCODING()
  external int BundleEncoding;
}

typedef CSSM_CERT_BUNDLE_TYPE = uint32;
typedef CSSM_CERT_BUNDLE_ENCODING = uint32;

class cssm_cert_bundle extends ffi.Struct {
  external CSSM_CERT_BUNDLE_HEADER BundleHeader;

  external SecAsn1Item Bundle;
}

typedef CSSM_CERT_BUNDLE_HEADER = cssm_cert_bundle_header;

class cssm_db_attribute_info extends ffi.Struct {
  @CSSM_DB_ATTRIBUTE_NAME_FORMAT()
  external int AttributeNameFormat;

  external cssm_db_attribute_label Label;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int AttributeFormat;
}

typedef CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;

class cssm_db_attribute_label extends ffi.Union {
  external ffi.Pointer<pkg_ffi.Char> AttributeName;

  external SecAsn1Oid AttributeOID;

  @uint32()
  external int AttributeID;
}

typedef CSSM_DB_ATTRIBUTE_FORMAT = uint32;

class cssm_db_attribute_data extends ffi.Struct {
  external CSSM_DB_ATTRIBUTE_INFO Info;

  @uint32()
  external int NumberOfValues;

  external CSSM_DATA_PTR Value;
}

typedef CSSM_DB_ATTRIBUTE_INFO = cssm_db_attribute_info;

class cssm_db_record_attribute_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_INFO_PTR AttributeInfo;
}

typedef CSSM_DB_RECORDTYPE = uint32;
typedef CSSM_DB_ATTRIBUTE_INFO_PTR = ffi.Pointer<cssm_db_attribute_info>;

class cssm_db_record_attribute_data extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int SemanticInformation;

  @uint32()
  external int NumberOfAttributes;

  external CSSM_DB_ATTRIBUTE_DATA_PTR AttributeData;
}

typedef CSSM_DB_ATTRIBUTE_DATA_PTR = ffi.Pointer<cssm_db_attribute_data>;

class cssm_db_parsing_module_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  external CSSM_SUBSERVICE_UID ModuleSubserviceUid;
}

class cssm_db_index_info extends ffi.Struct {
  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;

  external CSSM_DB_ATTRIBUTE_INFO Info;
}

typedef CSSM_DB_INDEX_TYPE = uint32;
typedef CSSM_DB_INDEXED_DATA_LOCATION = uint32;

class cssm_db_unique_record extends ffi.Struct {
  external CSSM_DB_INDEX_INFO RecordLocator;

  external SecAsn1Item RecordIdentifier;
}

typedef CSSM_DB_INDEX_INFO = cssm_db_index_info;

class cssm_db_record_index_info extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int DataRecordType;

  @uint32()
  external int NumberOfIndexes;

  external CSSM_DB_INDEX_INFO_PTR IndexInfo;
}

typedef CSSM_DB_INDEX_INFO_PTR = ffi.Pointer<cssm_db_index_info>;

class cssm_dbinfo extends ffi.Struct {
  @uint32()
  external int NumberOfRecordTypes;

  external CSSM_DB_PARSING_MODULE_INFO_PTR DefaultParsingModules;

  external CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR RecordAttributeNames;

  external CSSM_DB_RECORD_INDEX_INFO_PTR RecordIndexes;

  @CSSM_BOOL()
  external int IsLocal;

  external ffi.Pointer<pkg_ffi.Char> AccessPath;

  external ffi.Pointer<ffi.Void> Reserved;
}

typedef CSSM_DB_PARSING_MODULE_INFO_PTR
    = ffi.Pointer<cssm_db_parsing_module_info>;
typedef CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR
    = ffi.Pointer<cssm_db_record_attribute_info>;
typedef CSSM_DB_RECORD_INDEX_INFO_PTR = ffi.Pointer<cssm_db_record_index_info>;

class cssm_selection_predicate extends ffi.Struct {
  @CSSM_DB_OPERATOR()
  external int DbOperator;

  external CSSM_DB_ATTRIBUTE_DATA Attribute;
}

typedef CSSM_DB_OPERATOR = uint32;
typedef CSSM_DB_ATTRIBUTE_DATA = cssm_db_attribute_data;

class cssm_query_limits extends ffi.Struct {
  @uint32()
  external int TimeLimit;

  @uint32()
  external int SizeLimit;
}

class cssm_query extends ffi.Struct {
  @CSSM_DB_RECORDTYPE()
  external int RecordType;

  @CSSM_DB_CONJUNCTIVE()
  external int Conjunctive;

  @uint32()
  external int NumSelectionPredicates;

  external CSSM_SELECTION_PREDICATE_PTR SelectionPredicate;

  external CSSM_QUERY_LIMITS QueryLimits;

  @CSSM_QUERY_FLAGS()
  external int QueryFlags;
}

typedef CSSM_DB_CONJUNCTIVE = uint32;
typedef CSSM_SELECTION_PREDICATE_PTR = ffi.Pointer<cssm_selection_predicate>;
typedef CSSM_QUERY_LIMITS = cssm_query_limits;
typedef CSSM_QUERY_FLAGS = uint32;

class cssm_dl_pkcs11_attributes extends ffi.Struct {
  @uint32()
  external int DeviceAccessFlags;
}

class cssm_name_list extends ffi.Struct {
  @uint32()
  external int NumStrings;

  external ffi.Pointer<ffi.Pointer<pkg_ffi.Char>> String;
}

class cssm_db_schema_attribute_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  external ffi.Pointer<pkg_ffi.Char> AttributeName;

  external SecAsn1Oid AttributeNameID;

  @CSSM_DB_ATTRIBUTE_FORMAT()
  external int DataType;
}

class cssm_db_schema_index_info extends ffi.Struct {
  @uint32()
  external int AttributeId;

  @uint32()
  external int IndexId;

  @CSSM_DB_INDEX_TYPE()
  external int IndexType;

  @CSSM_DB_INDEXED_DATA_LOCATION()
  external int IndexedDataLocation;
}

class cssm_x509_type_value_pair extends ffi.Struct {
  external SecAsn1Oid type;

  @CSSM_BER_TAG()
  external int valueType;

  external SecAsn1Item value;
}

typedef CSSM_BER_TAG = uint8;

class cssm_x509_rdn extends ffi.Struct {
  @uint32()
  external int numberOfPairs;

  external CSSM_X509_TYPE_VALUE_PAIR_PTR AttributeTypeAndValue;
}

typedef CSSM_X509_TYPE_VALUE_PAIR_PTR = ffi.Pointer<cssm_x509_type_value_pair>;

class cssm_x509_name extends ffi.Struct {
  @uint32()
  external int numberOfRDNs;

  external CSSM_X509_RDN_PTR RelativeDistinguishedName;
}

typedef CSSM_X509_RDN_PTR = ffi.Pointer<cssm_x509_rdn>;

class cssm_x509_time extends ffi.Struct {
  @CSSM_BER_TAG()
  external int timeType;

  external SecAsn1Item time;
}

class x509_validity extends ffi.Struct {
  external CSSM_X509_TIME notBefore;

  external CSSM_X509_TIME notAfter;
}

typedef CSSM_X509_TIME = cssm_x509_time;

class cssm_x509ext_basicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_X509_OPTION()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

typedef CSSM_X509_OPTION = CSSM_BOOL;

abstract class extension_data_format {
  static const int CSSM_X509_DATAFORMAT_ENCODED = 0;
  static const int CSSM_X509_DATAFORMAT_PARSED = 1;
  static const int CSSM_X509_DATAFORMAT_PAIR = 2;
}

class cssm_x509_extensionTagAndValue extends ffi.Struct {
  @CSSM_BER_TAG()
  external int type;

  external SecAsn1Item value;
}

class cssm_x509ext_pair extends ffi.Struct {
  external CSSM_X509EXT_TAGandVALUE tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;
}

typedef CSSM_X509EXT_TAGandVALUE = cssm_x509_extensionTagAndValue;

class cssm_x509_extension extends ffi.Struct {
  external SecAsn1Oid extnId;

  @CSSM_BOOL()
  external int critical;

  @ffi.Int32()
  external int format;

  external cssm_x509ext_value value;

  external SecAsn1Item BERvalue;
}

class cssm_x509ext_value extends ffi.Union {
  external ffi.Pointer<CSSM_X509EXT_TAGandVALUE> tagAndValue;

  external ffi.Pointer<ffi.Void> parsedValue;

  external ffi.Pointer<CSSM_X509EXT_PAIR> valuePair;
}

typedef CSSM_X509EXT_PAIR = cssm_x509ext_pair;

class cssm_x509_extensions extends ffi.Struct {
  @uint32()
  external int numberOfExtensions;

  external CSSM_X509_EXTENSION_PTR extensions;
}

typedef CSSM_X509_EXTENSION_PTR = ffi.Pointer<cssm_x509_extension>;

class cssm_x509_tbs_certificate extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1Item serialNumber;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_VALIDITY validity;

  external CSSM_X509_NAME subject;

  external SecAsn1PubKeyInfo subjectPublicKeyInfo;

  external SecAsn1Item issuerUniqueIdentifier;

  external SecAsn1Item subjectUniqueIdentifier;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_NAME = cssm_x509_name;
typedef CSSM_X509_VALIDITY = x509_validity;
typedef CSSM_X509_EXTENSIONS = cssm_x509_extensions;

class cssm_x509_signature extends ffi.Struct {
  external SecAsn1AlgId algorithmIdentifier;

  external SecAsn1Item encrypted;
}

class cssm_x509_signed_certificate extends ffi.Struct {
  external CSSM_X509_TBS_CERTIFICATE certificate;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTIFICATE = cssm_x509_tbs_certificate;
typedef CSSM_X509_SIGNATURE = cssm_x509_signature;

class cssm_x509ext_policyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item value;
}

class cssm_x509ext_policyQualifiers extends ffi.Struct {
  @uint32()
  external int numberOfPolicyQualifiers;

  external ffi.Pointer<CSSM_X509EXT_POLICYQUALIFIERINFO> policyQualifier;
}

typedef CSSM_X509EXT_POLICYQUALIFIERINFO = cssm_x509ext_policyQualifierInfo;

class cssm_x509ext_policyInfo extends ffi.Struct {
  external SecAsn1Oid policyIdentifier;

  external CSSM_X509EXT_POLICYQUALIFIERS policyQualifiers;
}

typedef CSSM_X509EXT_POLICYQUALIFIERS = cssm_x509ext_policyQualifiers;

class cssm_x509_revoked_cert_entry extends ffi.Struct {
  external SecAsn1Item certificateSerialNumber;

  external CSSM_X509_TIME revocationDate;

  external CSSM_X509_EXTENSIONS extensions;
}

class cssm_x509_revoked_cert_list extends ffi.Struct {
  @uint32()
  external int numberOfRevokedCertEntries;

  external CSSM_X509_REVOKED_CERT_ENTRY_PTR revokedCertEntry;
}

typedef CSSM_X509_REVOKED_CERT_ENTRY_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_entry>;

class cssm_x509_tbs_certlist extends ffi.Struct {
  external SecAsn1Item version;

  external SecAsn1AlgId signature;

  external CSSM_X509_NAME issuer;

  external CSSM_X509_TIME thisUpdate;

  external CSSM_X509_TIME nextUpdate;

  external CSSM_X509_REVOKED_CERT_LIST_PTR revokedCertificates;

  external CSSM_X509_EXTENSIONS extensions;
}

typedef CSSM_X509_REVOKED_CERT_LIST_PTR
    = ffi.Pointer<cssm_x509_revoked_cert_list>;

class cssm_x509_signed_crl extends ffi.Struct {
  external CSSM_X509_TBS_CERTLIST tbsCertList;

  external CSSM_X509_SIGNATURE signature;
}

typedef CSSM_X509_TBS_CERTLIST = cssm_x509_tbs_certlist;

abstract class __CE_GeneralNameType {
  static const int GNT_OtherName = 0;
  static const int GNT_RFC822Name = 1;
  static const int GNT_DNSName = 2;
  static const int GNT_X400Address = 3;
  static const int GNT_DirectoryName = 4;
  static const int GNT_EdiPartyName = 5;
  static const int GNT_URI = 6;
  static const int GNT_IPAddress = 7;
  static const int GNT_RegisteredID = 8;
}

class __CE_OtherName extends ffi.Struct {
  external SecAsn1Oid typeId;

  external SecAsn1Item value;
}

class __CE_GeneralName extends ffi.Struct {
  @ffi.Int32()
  external int nameType;

  @CSSM_BOOL()
  external int berEncoded;

  external SecAsn1Item name;
}

class __CE_GeneralNames extends ffi.Struct {
  @uint32()
  external int numNames;

  external ffi.Pointer<CE_GeneralName> generalName;
}

typedef CE_GeneralName = __CE_GeneralName;

class __CE_AuthorityKeyID extends ffi.Struct {
  @CSSM_BOOL()
  external int keyIdentifierPresent;

  external SecAsn1Item keyIdentifier;

  @CSSM_BOOL()
  external int generalNamesPresent;

  external ffi.Pointer<CE_GeneralNames> generalNames;

  @CSSM_BOOL()
  external int serialNumberPresent;

  external SecAsn1Item serialNumber;
}

typedef CE_GeneralNames = __CE_GeneralNames;

class __CE_ExtendedKeyUsage extends ffi.Struct {
  @uint32()
  external int numPurposes;

  external CSSM_OID_PTR purposes;
}

typedef CSSM_OID_PTR = ffi.Pointer<SecAsn1Oid>;

class __CE_BasicConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int cA;

  @CSSM_BOOL()
  external int pathLenConstraintPresent;

  @uint32()
  external int pathLenConstraint;
}

class __CE_PolicyQualifierInfo extends ffi.Struct {
  external SecAsn1Oid policyQualifierId;

  external SecAsn1Item qualifier;
}

class __CE_PolicyInformation extends ffi.Struct {
  external SecAsn1Oid certPolicyId;

  @uint32()
  external int numPolicyQualifiers;

  external ffi.Pointer<CE_PolicyQualifierInfo> policyQualifiers;
}

typedef CE_PolicyQualifierInfo = __CE_PolicyQualifierInfo;

class __CE_CertPolicies extends ffi.Struct {
  @uint32()
  external int numPolicies;

  external ffi.Pointer<CE_PolicyInformation> policies;
}

typedef CE_PolicyInformation = __CE_PolicyInformation;

abstract class __CE_CrlDistributionPointNameType {
  static const int CE_CDNT_FullName = 0;
  static const int CE_CDNT_NameRelativeToCrlIssuer = 1;
}

class __CE_DistributionPointName extends ffi.Struct {
  @ffi.Int32()
  external int nameType;

  external UnnamedUnion4 dpn;
}

class UnnamedUnion4 extends ffi.Union {
  external ffi.Pointer<CE_GeneralNames> fullName;

  external CSSM_X509_RDN_PTR rdn;
}

class __CE_CRLDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int reasonsPresent;

  @CE_CrlDistReasonFlags()
  external int reasons;

  external ffi.Pointer<CE_GeneralNames> crlIssuer;
}

typedef CE_DistributionPointName = __CE_DistributionPointName;
typedef CE_CrlDistReasonFlags = uint8;

class __CE_CRLDistPointsSyntax extends ffi.Struct {
  @uint32()
  external int numDistPoints;

  external ffi.Pointer<CE_CRLDistributionPoint> distPoints;
}

typedef CE_CRLDistributionPoint = __CE_CRLDistributionPoint;

class __CE_AccessDescription extends ffi.Struct {
  external SecAsn1Oid accessMethod;

  external CE_GeneralName accessLocation;
}

class __CE_AuthorityInfoAccess extends ffi.Struct {
  @uint32()
  external int numAccessDescriptions;

  external ffi.Pointer<CE_AccessDescription> accessDescriptions;
}

typedef CE_AccessDescription = __CE_AccessDescription;

class __CE_SemanticsInformation extends ffi.Struct {
  external ffi.Pointer<SecAsn1Oid> semanticsIdentifier;

  external ffi.Pointer<CE_NameRegistrationAuthorities>
      nameRegistrationAuthorities;
}

typedef CE_NameRegistrationAuthorities = CE_GeneralNames;

class __CE_QC_Statement extends ffi.Struct {
  external SecAsn1Oid statementId;

  external ffi.Pointer<CE_SemanticsInformation> semanticsInfo;

  external ffi.Pointer<SecAsn1Item> otherInfo;
}

typedef CE_SemanticsInformation = __CE_SemanticsInformation;

class __CE_QC_Statements extends ffi.Struct {
  @uint32()
  external int numQCStatements;

  external ffi.Pointer<CE_QC_Statement> qcStatements;
}

typedef CE_QC_Statement = __CE_QC_Statement;

class __CE_IssuingDistributionPoint extends ffi.Struct {
  external ffi.Pointer<CE_DistributionPointName> distPointName;

  @CSSM_BOOL()
  external int onlyUserCertsPresent;

  @CSSM_BOOL()
  external int onlyUserCerts;

  @CSSM_BOOL()
  external int onlyCACertsPresent;

  @CSSM_BOOL()
  external int onlyCACerts;

  @CSSM_BOOL()
  external int onlySomeReasonsPresent;

  @CE_CrlDistReasonFlags()
  external int onlySomeReasons;

  @CSSM_BOOL()
  external int indirectCrlPresent;

  @CSSM_BOOL()
  external int indirectCrl;
}

class __CE_GeneralSubtree extends ffi.Struct {
  external ffi.Pointer<CE_GeneralNames> base;

  @uint32()
  external int minimum;

  @CSSM_BOOL()
  external int maximumPresent;

  @uint32()
  external int maximum;
}

class __CE_GeneralSubtrees extends ffi.Struct {
  @uint32()
  external int numSubtrees;

  external ffi.Pointer<CE_GeneralSubtree> subtrees;
}

typedef CE_GeneralSubtree = __CE_GeneralSubtree;

class __CE_NameConstraints extends ffi.Struct {
  external ffi.Pointer<CE_GeneralSubtrees> permitted;

  external ffi.Pointer<CE_GeneralSubtrees> excluded;
}

typedef CE_GeneralSubtrees = __CE_GeneralSubtrees;

class __CE_PolicyMapping extends ffi.Struct {
  external SecAsn1Oid issuerDomainPolicy;

  external SecAsn1Oid subjectDomainPolicy;
}

class __CE_PolicyMappings extends ffi.Struct {
  @uint32()
  external int numPolicyMappings;

  external ffi.Pointer<CE_PolicyMapping> policyMappings;
}

typedef CE_PolicyMapping = __CE_PolicyMapping;

class __CE_PolicyConstraints extends ffi.Struct {
  @CSSM_BOOL()
  external int requireExplicitPolicyPresent;

  @uint32()
  external int requireExplicitPolicy;

  @CSSM_BOOL()
  external int inhibitPolicyMappingPresent;

  @uint32()
  external int inhibitPolicyMapping;
}

abstract class __CE_DataType {
  static const int DT_AuthorityKeyID = 0;
  static const int DT_SubjectKeyID = 1;
  static const int DT_KeyUsage = 2;
  static const int DT_SubjectAltName = 3;
  static const int DT_IssuerAltName = 4;
  static const int DT_ExtendedKeyUsage = 5;
  static const int DT_BasicConstraints = 6;
  static const int DT_CertPolicies = 7;
  static const int DT_NetscapeCertType = 8;
  static const int DT_CrlNumber = 9;
  static const int DT_DeltaCrl = 10;
  static const int DT_CrlReason = 11;
  static const int DT_CrlDistributionPoints = 12;
  static const int DT_IssuingDistributionPoint = 13;
  static const int DT_AuthorityInfoAccess = 14;
  static const int DT_Other = 15;
  static const int DT_QC_Statements = 16;
  static const int DT_NameConstraints = 17;
  static const int DT_PolicyMappings = 18;
  static const int DT_PolicyConstraints = 19;
  static const int DT_InhibitAnyPolicy = 20;
}

class CE_Data extends ffi.Union {
  external CE_AuthorityKeyID authorityKeyID;

  external CE_SubjectKeyID subjectKeyID;

  @CE_KeyUsage()
  external int keyUsage;

  external CE_GeneralNames subjectAltName;

  external CE_GeneralNames issuerAltName;

  external CE_ExtendedKeyUsage extendedKeyUsage;

  external CE_BasicConstraints basicConstraints;

  external CE_CertPolicies certPolicies;

  @CE_NetscapeCertType()
  external int netscapeCertType;

  @CE_CrlNumber()
  external int crlNumber;

  @CE_DeltaCrl()
  external int deltaCrl;

  @CE_CrlReason()
  external int crlReason;

  external CE_CRLDistPointsSyntax crlDistPoints;

  external CE_IssuingDistributionPoint issuingDistPoint;

  external CE_AuthorityInfoAccess authorityInfoAccess;

  external CE_QC_Statements qualifiedCertStatements;

  external CE_NameConstraints nameConstraints;

  external CE_PolicyMappings policyMappings;

  external CE_PolicyConstraints policyConstraints;

  @CE_InhibitAnyPolicy()
  external int inhibitAnyPolicy;

  external SecAsn1Item rawData;
}

typedef CE_AuthorityKeyID = __CE_AuthorityKeyID;
typedef CE_SubjectKeyID = SecAsn1Item;
typedef CE_KeyUsage = uint16;
typedef CE_ExtendedKeyUsage = __CE_ExtendedKeyUsage;
typedef CE_BasicConstraints = __CE_BasicConstraints;
typedef CE_CertPolicies = __CE_CertPolicies;
typedef CE_NetscapeCertType = uint16;
typedef CE_CrlNumber = uint32;
typedef CE_DeltaCrl = uint32;
typedef CE_CrlReason = uint32;
typedef CE_CRLDistPointsSyntax = __CE_CRLDistPointsSyntax;
typedef CE_IssuingDistributionPoint = __CE_IssuingDistributionPoint;
typedef CE_AuthorityInfoAccess = __CE_AuthorityInfoAccess;
typedef CE_QC_Statements = __CE_QC_Statements;
typedef CE_NameConstraints = __CE_NameConstraints;
typedef CE_PolicyMappings = __CE_PolicyMappings;
typedef CE_PolicyConstraints = __CE_PolicyConstraints;
typedef CE_InhibitAnyPolicy = uint32;

class __CE_DataAndType extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external CE_Data extension1;

  @CSSM_BOOL()
  external int critical;
}

class cssm_acl_process_subject_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int mask;

  @uint32()
  external int uid;

  @uint32()
  external int gid;
}

class cssm_acl_keychain_prompt_selector extends ffi.Struct {
  @uint16()
  external int version;

  @uint16()
  external int flags;
}

abstract class cssm_appledl_open_parameters_mask {
  static const int kCSSM_APPLEDL_MASK_MODE = 1;
}

class cssm_appledl_open_parameters extends ffi.Struct {
  @uint32()
  external int length;

  @uint32()
  external int version;

  @CSSM_BOOL()
  external int autoCommit;

  @uint32()
  external int mask;

  @mode_t()
  external int mode;
}

class cssm_applecspdl_db_settings_parameters extends ffi.Struct {
  @uint32()
  external int idleTimeout;

  @uint8()
  external int lockOnSleep;
}

class cssm_applecspdl_db_is_locked_parameters extends ffi.Struct {
  @uint8()
  external int isLocked;
}

class cssm_applecspdl_db_change_password_parameters extends ffi.Struct {
  external ffi.Pointer<CSSM_ACCESS_CREDENTIALS> accessCredentials;
}

typedef CSSM_ACCESS_CREDENTIALS = cssm_access_credentials;

class CSSM_APPLE_TP_NAME_OID extends ffi.Struct {
  external ffi.Pointer<pkg_ffi.Char> string;

  external ffi.Pointer<SecAsn1Oid> oid;
}

class CSSM_APPLE_TP_CERT_REQUEST extends ffi.Struct {
  @CSSM_CSP_HANDLE()
  external int cspHand;

  @CSSM_CL_HANDLE()
  external int clHand;

  @uint32()
  external int serialNumber;

  @uint32()
  external int numSubjectNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> subjectNames;

  @uint32()
  external int numIssuerNames;

  external ffi.Pointer<CSSM_APPLE_TP_NAME_OID> issuerNames;

  external CSSM_X509_NAME_PTR issuerNameX509;

  external ffi.Pointer<CSSM_KEY> certPublicKey;

  external ffi.Pointer<CSSM_KEY> issuerPrivateKey;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @uint32()
  external int notBefore;

  @uint32()
  external int notAfter;

  @uint32()
  external int numExtensions;

  external ffi.Pointer<CE_DataAndType> extensions;

  external ffi.Pointer<pkg_ffi.Char> challengeString;
}

typedef CSSM_X509_NAME_PTR = ffi.Pointer<cssm_x509_name>;
typedef CSSM_KEY = cssm_key;
typedef CE_DataAndType = __CE_DataAndType;

class CSSM_APPLE_TP_SSL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @uint32()
  external int ServerNameLen;

  external ffi.Pointer<pkg_ffi.Char> ServerName;

  @uint32()
  external int Flags;
}

class CSSM_APPLE_TP_CRL_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_CRL_OPT_FLAGS()
  external int CrlFlags;

  external CSSM_DL_DB_HANDLE_PTR crlStore;
}

typedef CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;

class CSSM_APPLE_TP_SMIME_OPTIONS extends ffi.Struct {
  @uint32()
  external int Version;

  @CE_KeyUsage()
  external int IntendedUsage;

  @uint32()
  external int SenderEmailLen;

  external ffi.Pointer<pkg_ffi.Char> SenderEmail;
}

class CSSM_APPLE_TP_ACTION_DATA extends ffi.Struct {
  @uint32()
  external int Version;

  @CSSM_APPLE_TP_ACTION_FLAGS()
  external int ActionFlags;
}

typedef CSSM_APPLE_TP_ACTION_FLAGS = uint32;

class CSSM_TP_APPLE_EVIDENCE_INFO extends ffi.Struct {
  @CSSM_TP_APPLE_CERT_STATUS()
  external int StatusBits;

  @uint32()
  external int NumStatusCodes;

  external ffi.Pointer<CSSM_RETURN> StatusCodes;

  @uint32()
  external int Index;

  external CSSM_DL_DB_HANDLE DlDbHandle;

  external CSSM_DB_UNIQUE_RECORD_PTR UniqueRecord;
}

typedef CSSM_TP_APPLE_CERT_STATUS = uint32;
typedef CSSM_DL_DB_HANDLE = cssm_dl_db_handle;
typedef CSSM_DB_UNIQUE_RECORD_PTR = ffi.Pointer<cssm_db_unique_record>;

class CSSM_TP_APPLE_EVIDENCE_HEADER extends ffi.Struct {
  @uint32()
  external int Version;
}

class CSSM_APPLE_CL_CSR_REQUEST extends ffi.Struct {
  external CSSM_X509_NAME_PTR subjectNameX509;

  @CSSM_ALGORITHMS()
  external int signatureAlg;

  external SecAsn1Oid signatureOid;

  @CSSM_CSP_HANDLE()
  external int cspHand;

  external ffi.Pointer<CSSM_KEY> subjectPublicKey;

  external ffi.Pointer<CSSM_KEY> subjectPrivateKey;

  external ffi.Pointer<pkg_ffi.Char> challengeString;
}

typedef SecTrustOptionFlags = ffi.Uint32;
typedef CSSM_TP_VERIFY_CONTEXT_RESULT_PTR
    = ffi.Pointer<cssm_tp_verify_context_result>;
typedef SecKeychainRef = ffi.Pointer<__SecKeychain>;
typedef SecIdentityRef = ffi.Pointer<__SecIdentity>;

class sec_trust extends ffi.Opaque {}

class sec_identity extends ffi.Opaque {}

class sec_certificate extends ffi.Opaque {}

typedef sec_trust_t = ffi.Pointer<sec_trust>;
typedef sec_identity_t = ffi.Pointer<sec_identity>;
typedef sec_certificate_t = ffi.Pointer<sec_certificate>;

class sec_protocol_metadata extends ffi.Opaque {}

typedef sec_protocol_metadata_t = ffi.Pointer<sec_protocol_metadata>;
typedef tls_protocol_version_t = ffi.Uint16;
typedef SSLProtocol = pkg_ffi.Int;
typedef tls_ciphersuite_t = ffi.Uint16;
typedef SSLCipherSuite = ffi.Uint16;

class sec_protocol_options extends ffi.Opaque {}

typedef sec_protocol_options_t = ffi.Pointer<sec_protocol_options>;
typedef tls_ciphersuite_group_t = ffi.Uint16;
typedef SSLCiphersuiteGroup = pkg_ffi.Int;

class SSLContext extends ffi.Opaque {}

typedef SSLContextRef = ffi.Pointer<SSLContext>;
typedef SSLProtocolSide = pkg_ffi.Int;
typedef SSLConnectionType = pkg_ffi.Int;
typedef SSLSessionState = pkg_ffi.Int;
typedef SSLSessionOption = pkg_ffi.Int;
typedef SSLReadFunc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(SSLConnectionRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<pkg_ffi.Size>)>>;
typedef SSLConnectionRef = ffi.Pointer<ffi.Void>;
typedef SSLWriteFunc = ffi.Pointer<
    ffi.NativeFunction<
        OSStatus Function(SSLConnectionRef, ffi.Pointer<ffi.Void>,
            ffi.Pointer<pkg_ffi.Size>)>>;
typedef SSLAuthenticate = pkg_ffi.Int;
typedef SSLClientCertificateState = pkg_ffi.Int;

const int NSOrderedAscending = -1;

const int NSOrderedSame = 0;

const int NSOrderedDescending = 1;

const int NSEnumerationConcurrent = 1;

const int NSEnumerationReverse = 2;

const int NSSortConcurrent = 1;

const int NSSortStable = 16;

const int NSQualityOfServiceUserInteractive = 33;

const int NSQualityOfServiceUserInitiated = 25;

const int NSQualityOfServiceUtility = 17;

const int NSQualityOfServiceBackground = 9;

const int NSQualityOfServiceDefault = -1;

const int noErr = 0;

const int kNilOptions = 0;

const int kVariableLengthArray = 1;

const int kUnknownType = 1061109567;

const int normal = 0;

const int bold = 1;

const int italic = 2;

const int underline = 4;

const int outline = 8;

const int shadow = 16;

const int condense = 32;

const int extend = 64;

const int developStage = 32;

const int alphaStage = 64;

const int betaStage = 96;

const int finalStage = 128;

const int kCFCompareLessThan = -1;

const int kCFCompareEqualTo = 0;

const int kCFCompareGreaterThan = 1;

const int NSScannedOption = 1;

const int NSCollectorDisabledOption = 2;

const int NSURLRequestUseProtocolCachePolicy = 0;

const int NSURLRequestReloadIgnoringLocalCacheData = 1;

const int NSURLRequestReloadIgnoringLocalAndRemoteCacheData = 4;

const int NSURLRequestReloadIgnoringCacheData = 1;

const int NSURLRequestReturnCacheDataElseLoad = 2;

const int NSURLRequestReturnCacheDataDontLoad = 3;

const int NSURLRequestReloadRevalidatingCacheData = 5;

const int NSURLNetworkServiceTypeDefault = 0;

const int NSURLNetworkServiceTypeVoIP = 1;

const int NSURLNetworkServiceTypeVideo = 2;

const int NSURLNetworkServiceTypeBackground = 3;

const int NSURLNetworkServiceTypeVoice = 4;

const int NSURLNetworkServiceTypeResponsiveData = 6;

const int NSURLNetworkServiceTypeAVStreaming = 8;

const int NSURLNetworkServiceTypeResponsiveAV = 9;

const int NSURLNetworkServiceTypeCallSignaling = 11;

const int NSURLRequestAttributionDeveloper = 0;

const int NSURLRequestAttributionUser = 1;

const int NSHTTPCookieAcceptPolicyAlways = 0;

const int NSHTTPCookieAcceptPolicyNever = 1;

const int NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain = 2;

const int errSecSuccess = 0;

const int errSecUnimplemented = -4;

const int errSecDiskFull = -34;

const int errSecDskFull = -34;

const int errSecIO = -36;

const int errSecOpWr = -49;

const int errSecParam = -50;

const int errSecWrPerm = -61;

const int errSecAllocate = -108;

const int errSecUserCanceled = -128;

const int errSecBadReq = -909;

const int errSecInternalComponent = -2070;

const int errSecCoreFoundationUnknown = -4960;

const int errSecMissingEntitlement = -34018;

const int errSecRestrictedAPI = -34020;

const int errSecNotAvailable = -25291;

const int errSecReadOnly = -25292;

const int errSecAuthFailed = -25293;

const int errSecNoSuchKeychain = -25294;

const int errSecInvalidKeychain = -25295;

const int errSecDuplicateKeychain = -25296;

const int errSecDuplicateCallback = -25297;

const int errSecInvalidCallback = -25298;

const int errSecDuplicateItem = -25299;

const int errSecItemNotFound = -25300;

const int errSecBufferTooSmall = -25301;

const int errSecDataTooLarge = -25302;

const int errSecNoSuchAttr = -25303;

const int errSecInvalidItemRef = -25304;

const int errSecInvalidSearchRef = -25305;

const int errSecNoSuchClass = -25306;

const int errSecNoDefaultKeychain = -25307;

const int errSecInteractionNotAllowed = -25308;

const int errSecReadOnlyAttr = -25309;

const int errSecWrongSecVersion = -25310;

const int errSecKeySizeNotAllowed = -25311;

const int errSecNoStorageModule = -25312;

const int errSecNoCertificateModule = -25313;

const int errSecNoPolicyModule = -25314;

const int errSecInteractionRequired = -25315;

const int errSecDataNotAvailable = -25316;

const int errSecDataNotModifiable = -25317;

const int errSecCreateChainFailed = -25318;

const int errSecInvalidPrefsDomain = -25319;

const int errSecInDarkWake = -25320;

const int errSecACLNotSimple = -25240;

const int errSecPolicyNotFound = -25241;

const int errSecInvalidTrustSetting = -25242;

const int errSecNoAccessForItem = -25243;

const int errSecInvalidOwnerEdit = -25244;

const int errSecTrustNotAvailable = -25245;

const int errSecUnsupportedFormat = -25256;

const int errSecUnknownFormat = -25257;

const int errSecKeyIsSensitive = -25258;

const int errSecMultiplePrivKeys = -25259;

const int errSecPassphraseRequired = -25260;

const int errSecInvalidPasswordRef = -25261;

const int errSecInvalidTrustSettings = -25262;

const int errSecNoTrustSettings = -25263;

const int errSecPkcs12VerifyFailure = -25264;

const int errSecNotSigner = -26267;

const int errSecDecode = -26275;

const int errSecServiceNotAvailable = -67585;

const int errSecInsufficientClientID = -67586;

const int errSecDeviceReset = -67587;

const int errSecDeviceFailed = -67588;

const int errSecAppleAddAppACLSubject = -67589;

const int errSecApplePublicKeyIncomplete = -67590;

const int errSecAppleSignatureMismatch = -67591;

const int errSecAppleInvalidKeyStartDate = -67592;

const int errSecAppleInvalidKeyEndDate = -67593;

const int errSecConversionError = -67594;

const int errSecAppleSSLv2Rollback = -67595;

const int errSecQuotaExceeded = -67596;

const int errSecFileTooBig = -67597;

const int errSecInvalidDatabaseBlob = -67598;

const int errSecInvalidKeyBlob = -67599;

const int errSecIncompatibleDatabaseBlob = -67600;

const int errSecIncompatibleKeyBlob = -67601;

const int errSecHostNameMismatch = -67602;

const int errSecUnknownCriticalExtensionFlag = -67603;

const int errSecNoBasicConstraints = -67604;

const int errSecNoBasicConstraintsCA = -67605;

const int errSecInvalidAuthorityKeyID = -67606;

const int errSecInvalidSubjectKeyID = -67607;

const int errSecInvalidKeyUsageForPolicy = -67608;

const int errSecInvalidExtendedKeyUsage = -67609;

const int errSecInvalidIDLinkage = -67610;

const int errSecPathLengthConstraintExceeded = -67611;

const int errSecInvalidRoot = -67612;

const int errSecCRLExpired = -67613;

const int errSecCRLNotValidYet = -67614;

const int errSecCRLNotFound = -67615;

const int errSecCRLServerDown = -67616;

const int errSecCRLBadURI = -67617;

const int errSecUnknownCertExtension = -67618;

const int errSecUnknownCRLExtension = -67619;

const int errSecCRLNotTrusted = -67620;

const int errSecCRLPolicyFailed = -67621;

const int errSecIDPFailure = -67622;

const int errSecSMIMEEmailAddressesNotFound = -67623;

const int errSecSMIMEBadExtendedKeyUsage = -67624;

const int errSecSMIMEBadKeyUsage = -67625;

const int errSecSMIMEKeyUsageNotCritical = -67626;

const int errSecSMIMENoEmailAddress = -67627;

const int errSecSMIMESubjAltNameNotCritical = -67628;

const int errSecSSLBadExtendedKeyUsage = -67629;

const int errSecOCSPBadResponse = -67630;

const int errSecOCSPBadRequest = -67631;

const int errSecOCSPUnavailable = -67632;

const int errSecOCSPStatusUnrecognized = -67633;

const int errSecEndOfData = -67634;

const int errSecIncompleteCertRevocationCheck = -67635;

const int errSecNetworkFailure = -67636;

const int errSecOCSPNotTrustedToAnchor = -67637;

const int errSecRecordModified = -67638;

const int errSecOCSPSignatureError = -67639;

const int errSecOCSPNoSigner = -67640;

const int errSecOCSPResponderMalformedReq = -67641;

const int errSecOCSPResponderInternalError = -67642;

const int errSecOCSPResponderTryLater = -67643;

const int errSecOCSPResponderSignatureRequired = -67644;

const int errSecOCSPResponderUnauthorized = -67645;

const int errSecOCSPResponseNonceMismatch = -67646;

const int errSecCodeSigningBadCertChainLength = -67647;

const int errSecCodeSigningNoBasicConstraints = -67648;

const int errSecCodeSigningBadPathLengthConstraint = -67649;

const int errSecCodeSigningNoExtendedKeyUsage = -67650;

const int errSecCodeSigningDevelopment = -67651;

const int errSecResourceSignBadCertChainLength = -67652;

const int errSecResourceSignBadExtKeyUsage = -67653;

const int errSecTrustSettingDeny = -67654;

const int errSecInvalidSubjectName = -67655;

const int errSecUnknownQualifiedCertStatement = -67656;

const int errSecMobileMeRequestQueued = -67657;

const int errSecMobileMeRequestRedirected = -67658;

const int errSecMobileMeServerError = -67659;

const int errSecMobileMeServerNotAvailable = -67660;

const int errSecMobileMeServerAlreadyExists = -67661;

const int errSecMobileMeServerServiceErr = -67662;

const int errSecMobileMeRequestAlreadyPending = -67663;

const int errSecMobileMeNoRequestPending = -67664;

const int errSecMobileMeCSRVerifyFailure = -67665;

const int errSecMobileMeFailedConsistencyCheck = -67666;

const int errSecNotInitialized = -67667;

const int errSecInvalidHandleUsage = -67668;

const int errSecPVCReferentNotFound = -67669;

const int errSecFunctionIntegrityFail = -67670;

const int errSecInternalError = -67671;

const int errSecMemoryError = -67672;

const int errSecInvalidData = -67673;

const int errSecMDSError = -67674;

const int errSecInvalidPointer = -67675;

const int errSecSelfCheckFailed = -67676;

const int errSecFunctionFailed = -67677;

const int errSecModuleManifestVerifyFailed = -67678;

const int errSecInvalidGUID = -67679;

const int errSecInvalidHandle = -67680;

const int errSecInvalidDBList = -67681;

const int errSecInvalidPassthroughID = -67682;

const int errSecInvalidNetworkAddress = -67683;

const int errSecCRLAlreadySigned = -67684;

const int errSecInvalidNumberOfFields = -67685;

const int errSecVerificationFailure = -67686;

const int errSecUnknownTag = -67687;

const int errSecInvalidSignature = -67688;

const int errSecInvalidName = -67689;

const int errSecInvalidCertificateRef = -67690;

const int errSecInvalidCertificateGroup = -67691;

const int errSecTagNotFound = -67692;

const int errSecInvalidQuery = -67693;

const int errSecInvalidValue = -67694;

const int errSecCallbackFailed = -67695;

const int errSecACLDeleteFailed = -67696;

const int errSecACLReplaceFailed = -67697;

const int errSecACLAddFailed = -67698;

const int errSecACLChangeFailed = -67699;

const int errSecInvalidAccessCredentials = -67700;

const int errSecInvalidRecord = -67701;

const int errSecInvalidACL = -67702;

const int errSecInvalidSampleValue = -67703;

const int errSecIncompatibleVersion = -67704;

const int errSecPrivilegeNotGranted = -67705;

const int errSecInvalidScope = -67706;

const int errSecPVCAlreadyConfigured = -67707;

const int errSecInvalidPVC = -67708;

const int errSecEMMLoadFailed = -67709;

const int errSecEMMUnloadFailed = -67710;

const int errSecAddinLoadFailed = -67711;

const int errSecInvalidKeyRef = -67712;

const int errSecInvalidKeyHierarchy = -67713;

const int errSecAddinUnloadFailed = -67714;

const int errSecLibraryReferenceNotFound = -67715;

const int errSecInvalidAddinFunctionTable = -67716;

const int errSecInvalidServiceMask = -67717;

const int errSecModuleNotLoaded = -67718;

const int errSecInvalidSubServiceID = -67719;

const int errSecAttributeNotInContext = -67720;

const int errSecModuleManagerInitializeFailed = -67721;

const int errSecModuleManagerNotFound = -67722;

const int errSecEventNotificationCallbackNotFound = -67723;

const int errSecInputLengthError = -67724;

const int errSecOutputLengthError = -67725;

const int errSecPrivilegeNotSupported = -67726;

const int errSecDeviceError = -67727;

const int errSecAttachHandleBusy = -67728;

const int errSecNotLoggedIn = -67729;

const int errSecAlgorithmMismatch = -67730;

const int errSecKeyUsageIncorrect = -67731;

const int errSecKeyBlobTypeIncorrect = -67732;

const int errSecKeyHeaderInconsistent = -67733;

const int errSecUnsupportedKeyFormat = -67734;

const int errSecUnsupportedKeySize = -67735;

const int errSecInvalidKeyUsageMask = -67736;

const int errSecUnsupportedKeyUsageMask = -67737;

const int errSecInvalidKeyAttributeMask = -67738;

const int errSecUnsupportedKeyAttributeMask = -67739;

const int errSecInvalidKeyLabel = -67740;

const int errSecUnsupportedKeyLabel = -67741;

const int errSecInvalidKeyFormat = -67742;

const int errSecUnsupportedVectorOfBuffers = -67743;

const int errSecInvalidInputVector = -67744;

const int errSecInvalidOutputVector = -67745;

const int errSecInvalidContext = -67746;

const int errSecInvalidAlgorithm = -67747;

const int errSecInvalidAttributeKey = -67748;

const int errSecMissingAttributeKey = -67749;

const int errSecInvalidAttributeInitVector = -67750;

const int errSecMissingAttributeInitVector = -67751;

const int errSecInvalidAttributeSalt = -67752;

const int errSecMissingAttributeSalt = -67753;

const int errSecInvalidAttributePadding = -67754;

const int errSecMissingAttributePadding = -67755;

const int errSecInvalidAttributeRandom = -67756;

const int errSecMissingAttributeRandom = -67757;

const int errSecInvalidAttributeSeed = -67758;

const int errSecMissingAttributeSeed = -67759;

const int errSecInvalidAttributePassphrase = -67760;

const int errSecMissingAttributePassphrase = -67761;

const int errSecInvalidAttributeKeyLength = -67762;

const int errSecMissingAttributeKeyLength = -67763;

const int errSecInvalidAttributeBlockSize = -67764;

const int errSecMissingAttributeBlockSize = -67765;

const int errSecInvalidAttributeOutputSize = -67766;

const int errSecMissingAttributeOutputSize = -67767;

const int errSecInvalidAttributeRounds = -67768;

const int errSecMissingAttributeRounds = -67769;

const int errSecInvalidAlgorithmParms = -67770;

const int errSecMissingAlgorithmParms = -67771;

const int errSecInvalidAttributeLabel = -67772;

const int errSecMissingAttributeLabel = -67773;

const int errSecInvalidAttributeKeyType = -67774;

const int errSecMissingAttributeKeyType = -67775;

const int errSecInvalidAttributeMode = -67776;

const int errSecMissingAttributeMode = -67777;

const int errSecInvalidAttributeEffectiveBits = -67778;

const int errSecMissingAttributeEffectiveBits = -67779;

const int errSecInvalidAttributeStartDate = -67780;

const int errSecMissingAttributeStartDate = -67781;

const int errSecInvalidAttributeEndDate = -67782;

const int errSecMissingAttributeEndDate = -67783;

const int errSecInvalidAttributeVersion = -67784;

const int errSecMissingAttributeVersion = -67785;

const int errSecInvalidAttributePrime = -67786;

const int errSecMissingAttributePrime = -67787;

const int errSecInvalidAttributeBase = -67788;

const int errSecMissingAttributeBase = -67789;

const int errSecInvalidAttributeSubprime = -67790;

const int errSecMissingAttributeSubprime = -67791;

const int errSecInvalidAttributeIterationCount = -67792;

const int errSecMissingAttributeIterationCount = -67793;

const int errSecInvalidAttributeDLDBHandle = -67794;

const int errSecMissingAttributeDLDBHandle = -67795;

const int errSecInvalidAttributeAccessCredentials = -67796;

const int errSecMissingAttributeAccessCredentials = -67797;

const int errSecInvalidAttributePublicKeyFormat = -67798;

const int errSecMissingAttributePublicKeyFormat = -67799;

const int errSecInvalidAttributePrivateKeyFormat = -67800;

const int errSecMissingAttributePrivateKeyFormat = -67801;

const int errSecInvalidAttributeSymmetricKeyFormat = -67802;

const int errSecMissingAttributeSymmetricKeyFormat = -67803;

const int errSecInvalidAttributeWrappedKeyFormat = -67804;

const int errSecMissingAttributeWrappedKeyFormat = -67805;

const int errSecStagedOperationInProgress = -67806;

const int errSecStagedOperationNotStarted = -67807;

const int errSecVerifyFailed = -67808;

const int errSecQuerySizeUnknown = -67809;

const int errSecBlockSizeMismatch = -67810;

const int errSecPublicKeyInconsistent = -67811;

const int errSecDeviceVerifyFailed = -67812;

const int errSecInvalidLoginName = -67813;

const int errSecAlreadyLoggedIn = -67814;

const int errSecInvalidDigestAlgorithm = -67815;

const int errSecInvalidCRLGroup = -67816;

const int errSecCertificateCannotOperate = -67817;

const int errSecCertificateExpired = -67818;

const int errSecCertificateNotValidYet = -67819;

const int errSecCertificateRevoked = -67820;

const int errSecCertificateSuspended = -67821;

const int errSecInsufficientCredentials = -67822;

const int errSecInvalidAction = -67823;

const int errSecInvalidAuthority = -67824;

const int errSecVerifyActionFailed = -67825;

const int errSecInvalidCertAuthority = -67826;

const int errSecInvalidCRLAuthority = -67827;

const int errSecInvaldCRLAuthority = -67827;

const int errSecInvalidCRLEncoding = -67828;

const int errSecInvalidCRLType = -67829;

const int errSecInvalidCRL = -67830;

const int errSecInvalidFormType = -67831;

const int errSecInvalidID = -67832;

const int errSecInvalidIdentifier = -67833;

const int errSecInvalidIndex = -67834;

const int errSecInvalidPolicyIdentifiers = -67835;

const int errSecInvalidTimeString = -67836;

const int errSecInvalidReason = -67837;

const int errSecInvalidRequestInputs = -67838;

const int errSecInvalidResponseVector = -67839;

const int errSecInvalidStopOnPolicy = -67840;

const int errSecInvalidTuple = -67841;

const int errSecMultipleValuesUnsupported = -67842;

const int errSecNotTrusted = -67843;

const int errSecNoDefaultAuthority = -67844;

const int errSecRejectedForm = -67845;

const int errSecRequestLost = -67846;

const int errSecRequestRejected = -67847;

const int errSecUnsupportedAddressType = -67848;

const int errSecUnsupportedService = -67849;

const int errSecInvalidTupleGroup = -67850;

const int errSecInvalidBaseACLs = -67851;

const int errSecInvalidTupleCredentials = -67852;

const int errSecInvalidTupleCredendtials = -67852;

const int errSecInvalidEncoding = -67853;

const int errSecInvalidValidityPeriod = -67854;

const int errSecInvalidRequestor = -67855;

const int errSecRequestDescriptor = -67856;

const int errSecInvalidBundleInfo = -67857;

const int errSecInvalidCRLIndex = -67858;

const int errSecNoFieldValues = -67859;

const int errSecUnsupportedFieldFormat = -67860;

const int errSecUnsupportedIndexInfo = -67861;

const int errSecUnsupportedLocality = -67862;

const int errSecUnsupportedNumAttributes = -67863;

const int errSecUnsupportedNumIndexes = -67864;

const int errSecUnsupportedNumRecordTypes = -67865;

const int errSecFieldSpecifiedMultiple = -67866;

const int errSecIncompatibleFieldFormat = -67867;

const int errSecInvalidParsingModule = -67868;

const int errSecDatabaseLocked = -67869;

const int errSecDatastoreIsOpen = -67870;

const int errSecMissingValue = -67871;

const int errSecUnsupportedQueryLimits = -67872;

const int errSecUnsupportedNumSelectionPreds = -67873;

const int errSecUnsupportedOperator = -67874;

const int errSecInvalidDBLocation = -67875;

const int errSecInvalidAccessRequest = -67876;

const int errSecInvalidIndexInfo = -67877;

const int errSecInvalidNewOwner = -67878;

const int errSecInvalidModifyMode = -67879;

const int errSecMissingRequiredExtension = -67880;

const int errSecExtendedKeyUsageNotCritical = -67881;

const int errSecTimestampMissing = -67882;

const int errSecTimestampInvalid = -67883;

const int errSecTimestampNotTrusted = -67884;

const int errSecTimestampServiceNotAvailable = -67885;

const int errSecTimestampBadAlg = -67886;

const int errSecTimestampBadRequest = -67887;

const int errSecTimestampBadDataFormat = -67888;

const int errSecTimestampTimeNotAvailable = -67889;

const int errSecTimestampUnacceptedPolicy = -67890;

const int errSecTimestampUnacceptedExtension = -67891;

const int errSecTimestampAddInfoNotAvailable = -67892;

const int errSecTimestampSystemFailure = -67893;

const int errSecSigningTimeMissing = -67894;

const int errSecTimestampRejection = -67895;

const int errSecTimestampWaiting = -67896;

const int errSecTimestampRevocationWarning = -67897;

const int errSecTimestampRevocationNotification = -67898;

const int errSecCertificatePolicyNotAllowed = -67899;

const int errSecCertificateNameNotAllowed = -67900;

const int errSecCertificateValidityPeriodTooLong = -67901;

const int errSecCertificateIsCA = -67902;

const int errSecCertificateDuplicateExtension = -67903;

const int errSSLProtocol = -9800;

const int errSSLNegotiation = -9801;

const int errSSLFatalAlert = -9802;

const int errSSLWouldBlock = -9803;

const int errSSLSessionNotFound = -9804;

const int errSSLClosedGraceful = -9805;

const int errSSLClosedAbort = -9806;

const int errSSLXCertChainInvalid = -9807;

const int errSSLBadCert = -9808;

const int errSSLCrypto = -9809;

const int errSSLInternal = -9810;

const int errSSLModuleAttach = -9811;

const int errSSLUnknownRootCert = -9812;

const int errSSLNoRootCert = -9813;

const int errSSLCertExpired = -9814;

const int errSSLCertNotYetValid = -9815;

const int errSSLClosedNoNotify = -9816;

const int errSSLBufferOverflow = -9817;

const int errSSLBadCipherSuite = -9818;

const int errSSLPeerUnexpectedMsg = -9819;

const int errSSLPeerBadRecordMac = -9820;

const int errSSLPeerDecryptionFail = -9821;

const int errSSLPeerRecordOverflow = -9822;

const int errSSLPeerDecompressFail = -9823;

const int errSSLPeerHandshakeFail = -9824;

const int errSSLPeerBadCert = -9825;

const int errSSLPeerUnsupportedCert = -9826;

const int errSSLPeerCertRevoked = -9827;

const int errSSLPeerCertExpired = -9828;

const int errSSLPeerCertUnknown = -9829;

const int errSSLIllegalParam = -9830;

const int errSSLPeerUnknownCA = -9831;

const int errSSLPeerAccessDenied = -9832;

const int errSSLPeerDecodeError = -9833;

const int errSSLPeerDecryptError = -9834;

const int errSSLPeerExportRestriction = -9835;

const int errSSLPeerProtocolVersion = -9836;

const int errSSLPeerInsufficientSecurity = -9837;

const int errSSLPeerInternalError = -9838;

const int errSSLPeerUserCancelled = -9839;

const int errSSLPeerNoRenegotiation = -9840;

const int errSSLPeerAuthCompleted = -9841;

const int errSSLClientCertRequested = -9842;

const int errSSLHostNameMismatch = -9843;

const int errSSLConnectionRefused = -9844;

const int errSSLDecryptionFail = -9845;

const int errSSLBadRecordMac = -9846;

const int errSSLRecordOverflow = -9847;

const int errSSLBadConfiguration = -9848;

const int errSSLUnexpectedRecord = -9849;

const int errSSLWeakPeerEphemeralDHKey = -9850;

const int errSSLClientHelloReceived = -9851;

const int errSSLTransportReset = -9852;

const int errSSLNetworkTimeout = -9853;

const int errSSLConfigurationFailed = -9854;

const int errSSLUnsupportedExtension = -9855;

const int errSSLUnexpectedMessage = -9856;

const int errSSLDecompressFail = -9857;

const int errSSLHandshakeFail = -9858;

const int errSSLDecodeError = -9859;

const int errSSLInappropriateFallback = -9860;

const int errSSLMissingExtension = -9861;

const int errSSLBadCertificateStatusResponse = -9862;

const int errSSLCertificateRequired = -9863;

const int errSSLUnknownPSKIdentity = -9864;

const int errSSLUnrecognizedName = -9865;

const int errSSLATSViolation = -9880;

const int errSSLATSMinimumVersionViolation = -9881;

const int errSSLATSCiphersuiteViolation = -9882;

const int errSSLATSMinimumKeySizeViolation = -9883;

const int errSSLATSLeafCertificateHashAlgorithmViolation = -9884;

const int errSSLATSCertificateHashAlgorithmViolation = -9885;

const int errSSLATSCertificateTrustViolation = -9886;

const int errSSLEarlyDataRejected = -9890;

const int OSUnknownByteOrder = 0;

const int OSLittleEndian = 1;

const int OSBigEndian = 2;

const int CFNotificationSuspensionBehaviorDrop = 1;

const int CFNotificationSuspensionBehaviorCoalesce = 2;

const int CFNotificationSuspensionBehaviorHold = 3;

const int CFNotificationSuspensionBehaviorDeliverImmediately = 4;

const int kCFNotificationDeliverImmediately = 1;

const int kCFNotificationPostToAllSessions = 2;

const int kCFLocaleLanguageDirectionUnknown = 0;

const int kCFLocaleLanguageDirectionLeftToRight = 1;

const int kCFLocaleLanguageDirectionRightToLeft = 2;

const int kCFLocaleLanguageDirectionTopToBottom = 3;

const int kCFLocaleLanguageDirectionBottomToTop = 4;

const int kCFGregorianUnitsYears = 1;

const int kCFGregorianUnitsMonths = 2;

const int kCFGregorianUnitsDays = 4;

const int kCFGregorianUnitsHours = 8;

const int kCFGregorianUnitsMinutes = 16;

const int kCFGregorianUnitsSeconds = 32;

const int kCFGregorianAllUnits = 16777215;

const int kCFDataSearchBackwards = 1;

const int kCFDataSearchAnchored = 2;

const int kCFCharacterSetControl = 1;

const int kCFCharacterSetWhitespace = 2;

const int kCFCharacterSetWhitespaceAndNewline = 3;

const int kCFCharacterSetDecimalDigit = 4;

const int kCFCharacterSetLetter = 5;

const int kCFCharacterSetLowercaseLetter = 6;

const int kCFCharacterSetUppercaseLetter = 7;

const int kCFCharacterSetNonBase = 8;

const int kCFCharacterSetDecomposable = 9;

const int kCFCharacterSetAlphaNumeric = 10;

const int kCFCharacterSetPunctuation = 11;

const int kCFCharacterSetCapitalizedLetter = 13;

const int kCFCharacterSetSymbol = 14;

const int kCFCharacterSetNewline = 15;

const int kCFCharacterSetIllegal = 12;

const int kCFStringEncodingMacRoman = 0;

const int kCFStringEncodingWindowsLatin1 = 1280;

const int kCFStringEncodingISOLatin1 = 513;

const int kCFStringEncodingNextStepLatin = 2817;

const int kCFStringEncodingASCII = 1536;

const int kCFStringEncodingUnicode = 256;

const int kCFStringEncodingUTF8 = 134217984;

const int kCFStringEncodingNonLossyASCII = 3071;

const int kCFStringEncodingUTF16 = 256;

const int kCFStringEncodingUTF16BE = 268435712;

const int kCFStringEncodingUTF16LE = 335544576;

const int kCFStringEncodingUTF32 = 201326848;

const int kCFStringEncodingUTF32BE = 402653440;

const int kCFStringEncodingUTF32LE = 469762304;

const int kCFCompareCaseInsensitive = 1;

const int kCFCompareBackwards = 4;

const int kCFCompareAnchored = 8;

const int kCFCompareNonliteral = 16;

const int kCFCompareLocalized = 32;

const int kCFCompareNumerically = 64;

const int kCFCompareDiacriticInsensitive = 128;

const int kCFCompareWidthInsensitive = 256;

const int kCFCompareForcedOrdering = 512;

const int kCFStringNormalizationFormD = 0;

const int kCFStringNormalizationFormKD = 1;

const int kCFStringNormalizationFormC = 2;

const int kCFStringNormalizationFormKC = 3;

const int kCFTimeZoneNameStyleStandard = 0;

const int kCFTimeZoneNameStyleShortStandard = 1;

const int kCFTimeZoneNameStyleDaylightSaving = 2;

const int kCFTimeZoneNameStyleShortDaylightSaving = 3;

const int kCFTimeZoneNameStyleGeneric = 4;

const int kCFTimeZoneNameStyleShortGeneric = 5;

const int kCFCalendarUnitEra = 2;

const int kCFCalendarUnitYear = 4;

const int kCFCalendarUnitMonth = 8;

const int kCFCalendarUnitDay = 16;

const int kCFCalendarUnitHour = 32;

const int kCFCalendarUnitMinute = 64;

const int kCFCalendarUnitSecond = 128;

const int kCFCalendarUnitWeek = 256;

const int kCFCalendarUnitWeekday = 512;

const int kCFCalendarUnitWeekdayOrdinal = 1024;

const int kCFCalendarUnitQuarter = 2048;

const int kCFCalendarUnitWeekOfMonth = 4096;

const int kCFCalendarUnitWeekOfYear = 8192;

const int kCFCalendarUnitYearForWeekOfYear = 16384;

const int kCFCalendarComponentsWrap = 1;

const int kCFDateFormatterNoStyle = 0;

const int kCFDateFormatterShortStyle = 1;

const int kCFDateFormatterMediumStyle = 2;

const int kCFDateFormatterLongStyle = 3;

const int kCFDateFormatterFullStyle = 4;

const int kCFISO8601DateFormatWithYear = 1;

const int kCFISO8601DateFormatWithMonth = 2;

const int kCFISO8601DateFormatWithWeekOfYear = 4;

const int kCFISO8601DateFormatWithDay = 16;

const int kCFISO8601DateFormatWithTime = 32;

const int kCFISO8601DateFormatWithTimeZone = 64;

const int kCFISO8601DateFormatWithSpaceBetweenDateAndTime = 128;

const int kCFISO8601DateFormatWithDashSeparatorInDate = 256;

const int kCFISO8601DateFormatWithColonSeparatorInTime = 512;

const int kCFISO8601DateFormatWithColonSeparatorInTimeZone = 1024;

const int kCFISO8601DateFormatWithFractionalSeconds = 2048;

const int kCFISO8601DateFormatWithFullDate = 275;

const int kCFISO8601DateFormatWithFullTime = 1632;

const int kCFISO8601DateFormatWithInternetDateTime = 1907;

const int kCFNumberSInt8Type = 1;

const int kCFNumberSInt16Type = 2;

const int kCFNumberSInt32Type = 3;

const int kCFNumberSInt64Type = 4;

const int kCFNumberFloat32Type = 5;

const int kCFNumberFloat64Type = 6;

const int kCFNumberCharType = 7;

const int kCFNumberShortType = 8;

const int kCFNumberIntType = 9;

const int kCFNumberLongType = 10;

const int kCFNumberLongLongType = 11;

const int kCFNumberFloatType = 12;

const int kCFNumberDoubleType = 13;

const int kCFNumberCFIndexType = 14;

const int kCFNumberNSIntegerType = 15;

const int kCFNumberCGFloatType = 16;

const int kCFNumberMaxType = 16;

const int kCFNumberFormatterNoStyle = 0;

const int kCFNumberFormatterDecimalStyle = 1;

const int kCFNumberFormatterCurrencyStyle = 2;

const int kCFNumberFormatterPercentStyle = 3;

const int kCFNumberFormatterScientificStyle = 4;

const int kCFNumberFormatterSpellOutStyle = 5;

const int kCFNumberFormatterOrdinalStyle = 6;

const int kCFNumberFormatterCurrencyISOCodeStyle = 8;

const int kCFNumberFormatterCurrencyPluralStyle = 9;

const int kCFNumberFormatterCurrencyAccountingStyle = 10;

const int kCFNumberFormatterParseIntegersOnly = 1;

const int kCFNumberFormatterRoundCeiling = 0;

const int kCFNumberFormatterRoundFloor = 1;

const int kCFNumberFormatterRoundDown = 2;

const int kCFNumberFormatterRoundUp = 3;

const int kCFNumberFormatterRoundHalfEven = 4;

const int kCFNumberFormatterRoundHalfDown = 5;

const int kCFNumberFormatterRoundHalfUp = 6;

const int kCFNumberFormatterPadBeforePrefix = 0;

const int kCFNumberFormatterPadAfterPrefix = 1;

const int kCFNumberFormatterPadBeforeSuffix = 2;

const int kCFNumberFormatterPadAfterSuffix = 3;

const int kCFURLPOSIXPathStyle = 0;

const int kCFURLHFSPathStyle = 1;

const int kCFURLWindowsPathStyle = 2;

const int kCFURLComponentScheme = 1;

const int kCFURLComponentNetLocation = 2;

const int kCFURLComponentPath = 3;

const int kCFURLComponentResourceSpecifier = 4;

const int kCFURLComponentUser = 5;

const int kCFURLComponentPassword = 6;

const int kCFURLComponentUserInfo = 7;

const int kCFURLComponentHost = 8;

const int kCFURLComponentPort = 9;

const int kCFURLComponentParameterString = 10;

const int kCFURLComponentQuery = 11;

const int kCFURLComponentFragment = 12;

const int kCFURLBookmarkCreationMinimalBookmarkMask = 512;

const int kCFURLBookmarkCreationSuitableForBookmarkFile = 1024;

const int kCFURLBookmarkCreationWithSecurityScope = 2048;

const int kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess = 4096;

const int kCFURLBookmarkCreationWithoutImplicitSecurityScope = 536870912;

const int kCFURLBookmarkCreationPreferFileIDResolutionMask = 256;

const int kCFURLBookmarkResolutionWithoutUIMask = 256;

const int kCFURLBookmarkResolutionWithoutMountingMask = 512;

const int kCFURLBookmarkResolutionWithSecurityScope = 1024;

const int kCFURLBookmarkResolutionWithoutImplicitStartAccessing = 32768;

const int kCFBookmarkResolutionWithoutUIMask = 256;

const int kCFBookmarkResolutionWithoutMountingMask = 512;

const int kCFRunLoopRunFinished = 1;

const int kCFRunLoopRunStopped = 2;

const int kCFRunLoopRunTimedOut = 3;

const int kCFRunLoopRunHandledSource = 4;

const int kCFRunLoopEntry = 1;

const int kCFRunLoopBeforeTimers = 2;

const int kCFRunLoopBeforeSources = 4;

const int kCFRunLoopBeforeWaiting = 32;

const int kCFRunLoopAfterWaiting = 64;

const int kCFRunLoopExit = 128;

const int kCFRunLoopAllActivities = 268435455;

const int kCFSocketSuccess = 0;

const int kCFSocketError = -1;

const int kCFSocketTimeout = -2;

const int kCFSocketNoCallBack = 0;

const int kCFSocketReadCallBack = 1;

const int kCFSocketAcceptCallBack = 2;

const int kCFSocketDataCallBack = 3;

const int kCFSocketConnectCallBack = 4;

const int kCFSocketWriteCallBack = 8;

const int kCFSocketAutomaticallyReenableReadCallBack = 1;

const int kCFSocketAutomaticallyReenableAcceptCallBack = 2;

const int kCFSocketAutomaticallyReenableDataCallBack = 3;

const int kCFSocketAutomaticallyReenableWriteCallBack = 8;

const int kCFSocketLeaveErrors = 64;

const int kCFSocketCloseOnInvalidate = 128;

const int DISPATCH_WALLTIME_NOW = -2;

const int QOS_CLASS_USER_INTERACTIVE = 33;

const int QOS_CLASS_USER_INITIATED = 25;

const int QOS_CLASS_DEFAULT = 21;

const int QOS_CLASS_UTILITY = 17;

const int QOS_CLASS_BACKGROUND = 9;

const int QOS_CLASS_UNSPECIFIED = 0;

const int kCFStreamStatusNotOpen = 0;

const int kCFStreamStatusOpening = 1;

const int kCFStreamStatusOpen = 2;

const int kCFStreamStatusReading = 3;

const int kCFStreamStatusWriting = 4;

const int kCFStreamStatusAtEnd = 5;

const int kCFStreamStatusClosed = 6;

const int kCFStreamStatusError = 7;

const int kCFStreamEventNone = 0;

const int kCFStreamEventOpenCompleted = 1;

const int kCFStreamEventHasBytesAvailable = 2;

const int kCFStreamEventCanAcceptBytes = 4;

const int kCFStreamEventErrorOccurred = 8;

const int kCFStreamEventEndEncountered = 16;

const int kCFStreamErrorDomainCustom = -1;

const int kCFStreamErrorDomainPOSIX = 1;

const int kCFStreamErrorDomainMacOSStatus = 2;

const int kCFPropertyListImmutable = 0;

const int kCFPropertyListMutableContainers = 1;

const int kCFPropertyListMutableContainersAndLeaves = 2;

const int kCFPropertyListOpenStepFormat = 1;

const int kCFPropertyListXMLFormat_v1_0 = 100;

const int kCFPropertyListBinaryFormat_v1_0 = 200;

const int kCFPropertyListReadCorruptError = 3840;

const int kCFPropertyListReadUnknownVersionError = 3841;

const int kCFPropertyListReadStreamError = 3842;

const int kCFPropertyListWriteStreamError = 3851;

const int kCFStringEncodingMacJapanese = 1;

const int kCFStringEncodingMacChineseTrad = 2;

const int kCFStringEncodingMacKorean = 3;

const int kCFStringEncodingMacArabic = 4;

const int kCFStringEncodingMacHebrew = 5;

const int kCFStringEncodingMacGreek = 6;

const int kCFStringEncodingMacCyrillic = 7;

const int kCFStringEncodingMacDevanagari = 9;

const int kCFStringEncodingMacGurmukhi = 10;

const int kCFStringEncodingMacGujarati = 11;

const int kCFStringEncodingMacOriya = 12;

const int kCFStringEncodingMacBengali = 13;

const int kCFStringEncodingMacTamil = 14;

const int kCFStringEncodingMacTelugu = 15;

const int kCFStringEncodingMacKannada = 16;

const int kCFStringEncodingMacMalayalam = 17;

const int kCFStringEncodingMacSinhalese = 18;

const int kCFStringEncodingMacBurmese = 19;

const int kCFStringEncodingMacKhmer = 20;

const int kCFStringEncodingMacThai = 21;

const int kCFStringEncodingMacLaotian = 22;

const int kCFStringEncodingMacGeorgian = 23;

const int kCFStringEncodingMacArmenian = 24;

const int kCFStringEncodingMacChineseSimp = 25;

const int kCFStringEncodingMacTibetan = 26;

const int kCFStringEncodingMacMongolian = 27;

const int kCFStringEncodingMacEthiopic = 28;

const int kCFStringEncodingMacCentralEurRoman = 29;

const int kCFStringEncodingMacVietnamese = 30;

const int kCFStringEncodingMacExtArabic = 31;

const int kCFStringEncodingMacSymbol = 33;

const int kCFStringEncodingMacDingbats = 34;

const int kCFStringEncodingMacTurkish = 35;

const int kCFStringEncodingMacCroatian = 36;

const int kCFStringEncodingMacIcelandic = 37;

const int kCFStringEncodingMacRomanian = 38;

const int kCFStringEncodingMacCeltic = 39;

const int kCFStringEncodingMacGaelic = 40;

const int kCFStringEncodingMacFarsi = 140;

const int kCFStringEncodingMacUkrainian = 152;

const int kCFStringEncodingMacInuit = 236;

const int kCFStringEncodingMacVT100 = 252;

const int kCFStringEncodingMacHFS = 255;

const int kCFStringEncodingISOLatin2 = 514;

const int kCFStringEncodingISOLatin3 = 515;

const int kCFStringEncodingISOLatin4 = 516;

const int kCFStringEncodingISOLatinCyrillic = 517;

const int kCFStringEncodingISOLatinArabic = 518;

const int kCFStringEncodingISOLatinGreek = 519;

const int kCFStringEncodingISOLatinHebrew = 520;

const int kCFStringEncodingISOLatin5 = 521;

const int kCFStringEncodingISOLatin6 = 522;

const int kCFStringEncodingISOLatinThai = 523;

const int kCFStringEncodingISOLatin7 = 525;

const int kCFStringEncodingISOLatin8 = 526;

const int kCFStringEncodingISOLatin9 = 527;

const int kCFStringEncodingISOLatin10 = 528;

const int kCFStringEncodingDOSLatinUS = 1024;

const int kCFStringEncodingDOSGreek = 1029;

const int kCFStringEncodingDOSBalticRim = 1030;

const int kCFStringEncodingDOSLatin1 = 1040;

const int kCFStringEncodingDOSGreek1 = 1041;

const int kCFStringEncodingDOSLatin2 = 1042;

const int kCFStringEncodingDOSCyrillic = 1043;

const int kCFStringEncodingDOSTurkish = 1044;

const int kCFStringEncodingDOSPortuguese = 1045;

const int kCFStringEncodingDOSIcelandic = 1046;

const int kCFStringEncodingDOSHebrew = 1047;

const int kCFStringEncodingDOSCanadianFrench = 1048;

const int kCFStringEncodingDOSArabic = 1049;

const int kCFStringEncodingDOSNordic = 1050;

const int kCFStringEncodingDOSRussian = 1051;

const int kCFStringEncodingDOSGreek2 = 1052;

const int kCFStringEncodingDOSThai = 1053;

const int kCFStringEncodingDOSJapanese = 1056;

const int kCFStringEncodingDOSChineseSimplif = 1057;

const int kCFStringEncodingDOSKorean = 1058;

const int kCFStringEncodingDOSChineseTrad = 1059;

const int kCFStringEncodingWindowsLatin2 = 1281;

const int kCFStringEncodingWindowsCyrillic = 1282;

const int kCFStringEncodingWindowsGreek = 1283;

const int kCFStringEncodingWindowsLatin5 = 1284;

const int kCFStringEncodingWindowsHebrew = 1285;

const int kCFStringEncodingWindowsArabic = 1286;

const int kCFStringEncodingWindowsBalticRim = 1287;

const int kCFStringEncodingWindowsVietnamese = 1288;

const int kCFStringEncodingWindowsKoreanJohab = 1296;

const int kCFStringEncodingANSEL = 1537;

const int kCFStringEncodingJIS_X0201_76 = 1568;

const int kCFStringEncodingJIS_X0208_83 = 1569;

const int kCFStringEncodingJIS_X0208_90 = 1570;

const int kCFStringEncodingJIS_X0212_90 = 1571;

const int kCFStringEncodingJIS_C6226_78 = 1572;

const int kCFStringEncodingShiftJIS_X0213 = 1576;

const int kCFStringEncodingShiftJIS_X0213_MenKuTen = 1577;

const int kCFStringEncodingGB_2312_80 = 1584;

const int kCFStringEncodingGBK_95 = 1585;

const int kCFStringEncodingGB_18030_2000 = 1586;

const int kCFStringEncodingKSC_5601_87 = 1600;

const int kCFStringEncodingKSC_5601_92_Johab = 1601;

const int kCFStringEncodingCNS_11643_92_P1 = 1617;

const int kCFStringEncodingCNS_11643_92_P2 = 1618;

const int kCFStringEncodingCNS_11643_92_P3 = 1619;

const int kCFStringEncodingISO_2022_JP = 2080;

const int kCFStringEncodingISO_2022_JP_2 = 2081;

const int kCFStringEncodingISO_2022_JP_1 = 2082;

const int kCFStringEncodingISO_2022_JP_3 = 2083;

const int kCFStringEncodingISO_2022_CN = 2096;

const int kCFStringEncodingISO_2022_CN_EXT = 2097;

const int kCFStringEncodingISO_2022_KR = 2112;

const int kCFStringEncodingEUC_JP = 2336;

const int kCFStringEncodingEUC_CN = 2352;

const int kCFStringEncodingEUC_TW = 2353;

const int kCFStringEncodingEUC_KR = 2368;

const int kCFStringEncodingShiftJIS = 2561;

const int kCFStringEncodingKOI8_R = 2562;

const int kCFStringEncodingBig5 = 2563;

const int kCFStringEncodingMacRomanLatin1 = 2564;

const int kCFStringEncodingHZ_GB_2312 = 2565;

const int kCFStringEncodingBig5_HKSCS_1999 = 2566;

const int kCFStringEncodingVISCII = 2567;

const int kCFStringEncodingKOI8_U = 2568;

const int kCFStringEncodingBig5_E = 2569;

const int kCFStringEncodingNextStepJapanese = 2818;

const int kCFStringEncodingEBCDIC_US = 3073;

const int kCFStringEncodingEBCDIC_CP037 = 3074;

const int kCFStringEncodingUTF7 = 67109120;

const int kCFStringEncodingUTF7_IMAP = 2576;

const int kCFStringEncodingShiftJIS_X0213_00 = 1576;

const int kCFURLUnknownError = -10;

const int kCFURLUnknownSchemeError = -11;

const int kCFURLResourceNotFoundError = -12;

const int kCFURLResourceAccessViolationError = -13;

const int kCFURLRemoteHostUnavailableError = -14;

const int kCFURLImproperArgumentsError = -15;

const int kCFURLUnknownPropertyKeyError = -16;

const int kCFURLPropertyKeyUnavailableError = -17;

const int kCFURLTimeoutError = -18;

const int kCFBundleExecutableArchitectureI386 = 7;

const int kCFBundleExecutableArchitecturePPC = 18;

const int kCFBundleExecutableArchitectureX86_64 = 16777223;

const int kCFBundleExecutableArchitecturePPC64 = 16777234;

const int kCFBundleExecutableArchitectureARM64 = 16777228;

const int kCFMessagePortSuccess = 0;

const int kCFMessagePortSendTimeout = -1;

const int kCFMessagePortReceiveTimeout = -2;

const int kCFMessagePortIsInvalid = -3;

const int kCFMessagePortTransportError = -4;

const int kCFMessagePortBecameInvalidError = -5;

const int kCFURLEnumeratorDefaultBehavior = 0;

const int kCFURLEnumeratorDescendRecursively = 1;

const int kCFURLEnumeratorSkipInvisibles = 2;

const int kCFURLEnumeratorGenerateFileReferenceURLs = 4;

const int kCFURLEnumeratorSkipPackageContents = 8;

const int kCFURLEnumeratorIncludeDirectoriesPreOrder = 16;

const int kCFURLEnumeratorIncludeDirectoriesPostOrder = 32;

const int kCFURLEnumeratorGenerateRelativePathURLs = 64;

const int kCFURLEnumeratorSuccess = 1;

const int kCFURLEnumeratorEnd = 2;

const int kCFURLEnumeratorError = 3;

const int kCFURLEnumeratorDirectoryPostOrderSuccess = 4;

const int kCFFileSecurityClearOwner = 1;

const int kCFFileSecurityClearGroup = 2;

const int kCFFileSecurityClearMode = 4;

const int kCFFileSecurityClearOwnerUUID = 8;

const int kCFFileSecurityClearGroupUUID = 16;

const int kCFFileSecurityClearAccessControlList = 32;

const int kCFStringTokenizerUnitWord = 0;

const int kCFStringTokenizerUnitSentence = 1;

const int kCFStringTokenizerUnitParagraph = 2;

const int kCFStringTokenizerUnitLineBreak = 3;

const int kCFStringTokenizerUnitWordBoundary = 4;

const int kCFStringTokenizerAttributeLatinTranscription = 65536;

const int kCFStringTokenizerAttributeLanguage = 131072;

const int kCFStringTokenizerTokenNone = 0;

const int kCFStringTokenizerTokenNormal = 1;

const int kCFStringTokenizerTokenHasSubTokensMask = 2;

const int kCFStringTokenizerTokenHasDerivedSubTokensMask = 4;

const int kCFStringTokenizerTokenHasHasNumbersMask = 8;

const int kCFStringTokenizerTokenHasNonLettersMask = 16;

const int kCFStringTokenizerTokenIsCJWordMask = 32;

const int kCFFileDescriptorReadCallBack = 1;

const int kCFFileDescriptorWriteCallBack = 2;

const int kCFUserNotificationStopAlertLevel = 0;

const int kCFUserNotificationNoteAlertLevel = 1;

const int kCFUserNotificationCautionAlertLevel = 2;

const int kCFUserNotificationPlainAlertLevel = 3;

const int kCFUserNotificationDefaultResponse = 0;

const int kCFUserNotificationAlternateResponse = 1;

const int kCFUserNotificationOtherResponse = 2;

const int kCFUserNotificationCancelResponse = 3;

const int kCFUserNotificationNoDefaultButtonFlag = 32;

const int kCFUserNotificationUseRadioButtonsFlag = 64;

const int kCFXMLNodeCurrentVersion = 1;

const int kCFXMLNodeTypeDocument = 1;

const int kCFXMLNodeTypeElement = 2;

const int kCFXMLNodeTypeAttribute = 3;

const int kCFXMLNodeTypeProcessingInstruction = 4;

const int kCFXMLNodeTypeComment = 5;

const int kCFXMLNodeTypeText = 6;

const int kCFXMLNodeTypeCDATASection = 7;

const int kCFXMLNodeTypeDocumentFragment = 8;

const int kCFXMLNodeTypeEntity = 9;

const int kCFXMLNodeTypeEntityReference = 10;

const int kCFXMLNodeTypeDocumentType = 11;

const int kCFXMLNodeTypeWhitespace = 12;

const int kCFXMLNodeTypeNotation = 13;

const int kCFXMLNodeTypeElementTypeDeclaration = 14;

const int kCFXMLNodeTypeAttributeListDeclaration = 15;

const int kCFXMLEntityTypeParameter = 0;

const int kCFXMLEntityTypeParsedInternal = 1;

const int kCFXMLEntityTypeParsedExternal = 2;

const int kCFXMLEntityTypeUnparsed = 3;

const int kCFXMLEntityTypeCharacter = 4;

const int kCFXMLParserValidateDocument = 1;

const int kCFXMLParserSkipMetaData = 2;

const int kCFXMLParserReplacePhysicalEntities = 4;

const int kCFXMLParserSkipWhitespace = 8;

const int kCFXMLParserResolveExternalEntities = 16;

const int kCFXMLParserAddImpliedAttributes = 32;

const int kCFXMLParserAllOptions = 16777215;

const int kCFXMLParserNoOptions = 0;

const int kCFXMLStatusParseNotBegun = -2;

const int kCFXMLStatusParseInProgress = -1;

const int kCFXMLStatusParseSuccessful = 0;

const int kCFXMLErrorUnexpectedEOF = 1;

const int kCFXMLErrorUnknownEncoding = 2;

const int kCFXMLErrorEncodingConversionFailure = 3;

const int kCFXMLErrorMalformedProcessingInstruction = 4;

const int kCFXMLErrorMalformedDTD = 5;

const int kCFXMLErrorMalformedName = 6;

const int kCFXMLErrorMalformedCDSect = 7;

const int kCFXMLErrorMalformedCloseTag = 8;

const int kCFXMLErrorMalformedStartTag = 9;

const int kCFXMLErrorMalformedDocument = 10;

const int kCFXMLErrorElementlessDocument = 11;

const int kCFXMLErrorMalformedComment = 12;

const int kCFXMLErrorMalformedCharacterReference = 13;

const int kCFXMLErrorMalformedParsedCharacterData = 14;

const int kCFXMLErrorNoData = 15;

const int kSecTrustResultInvalid = 0;

const int kSecTrustResultProceed = 1;

const int kSecTrustResultConfirm = 2;

const int kSecTrustResultDeny = 3;

const int kSecTrustResultUnspecified = 4;

const int kSecTrustResultRecoverableTrustFailure = 5;

const int kSecTrustResultFatalTrustFailure = 6;

const int kSecTrustResultOtherError = 7;

const int CSSM_INVALID_HANDLE = 0;

const int CSSM_FALSE = 0;

const int CSSM_TRUE = 1;

const int CSSM_OK = 0;

const int CSSM_MODULE_STRING_SIZE = 64;

const int CSSM_KEY_HIERARCHY_NONE = 0;

const int CSSM_KEY_HIERARCHY_INTEG = 1;

const int CSSM_KEY_HIERARCHY_EXPORT = 2;

const int CSSM_PVC_NONE = 0;

const int CSSM_PVC_APP = 1;

const int CSSM_PVC_SP = 2;

const int CSSM_PRIVILEGE_SCOPE_NONE = 0;

const int CSSM_PRIVILEGE_SCOPE_PROCESS = 1;

const int CSSM_PRIVILEGE_SCOPE_THREAD = 2;

const int CSSM_SERVICE_CSSM = 1;

const int CSSM_SERVICE_CSP = 2;

const int CSSM_SERVICE_DL = 4;

const int CSSM_SERVICE_CL = 8;

const int CSSM_SERVICE_TP = 16;

const int CSSM_SERVICE_AC = 32;

const int CSSM_SERVICE_KR = 64;

const int CSSM_NOTIFY_INSERT = 1;

const int CSSM_NOTIFY_REMOVE = 2;

const int CSSM_NOTIFY_FAULT = 3;

const int CSSM_ATTACH_READ_ONLY = 1;

const int CSSM_USEE_LAST = 255;

const int CSSM_USEE_NONE = 0;

const int CSSM_USEE_DOMESTIC = 1;

const int CSSM_USEE_FINANCIAL = 2;

const int CSSM_USEE_KRLE = 3;

const int CSSM_USEE_KRENT = 4;

const int CSSM_USEE_SSL = 5;

const int CSSM_USEE_AUTHENTICATION = 6;

const int CSSM_USEE_KEYEXCH = 7;

const int CSSM_USEE_MEDICAL = 8;

const int CSSM_USEE_INSURANCE = 9;

const int CSSM_USEE_WEAK = 10;

const int CSSM_ADDR_NONE = 0;

const int CSSM_ADDR_CUSTOM = 1;

const int CSSM_ADDR_URL = 2;

const int CSSM_ADDR_SOCKADDR = 3;

const int CSSM_ADDR_NAME = 4;

const int CSSM_NET_PROTO_NONE = 0;

const int CSSM_NET_PROTO_CUSTOM = 1;

const int CSSM_NET_PROTO_UNSPECIFIED = 2;

const int CSSM_NET_PROTO_LDAP = 3;

const int CSSM_NET_PROTO_LDAPS = 4;

const int CSSM_NET_PROTO_LDAPNS = 5;

const int CSSM_NET_PROTO_X500DAP = 6;

const int CSSM_NET_PROTO_FTP = 7;

const int CSSM_NET_PROTO_FTPS = 8;

const int CSSM_NET_PROTO_OCSP = 9;

const int CSSM_NET_PROTO_CMP = 10;

const int CSSM_NET_PROTO_CMPS = 11;

const int CSSM_WORDID__UNK_ = -1;

const int CSSM_WORDID__NLU_ = 0;

const int CSSM_WORDID__STAR_ = 1;

const int CSSM_WORDID_A = 2;

const int CSSM_WORDID_ACL = 3;

const int CSSM_WORDID_ALPHA = 4;

const int CSSM_WORDID_B = 5;

const int CSSM_WORDID_BER = 6;

const int CSSM_WORDID_BINARY = 7;

const int CSSM_WORDID_BIOMETRIC = 8;

const int CSSM_WORDID_C = 9;

const int CSSM_WORDID_CANCELED = 10;

const int CSSM_WORDID_CERT = 11;

const int CSSM_WORDID_COMMENT = 12;

const int CSSM_WORDID_CRL = 13;

const int CSSM_WORDID_CUSTOM = 14;

const int CSSM_WORDID_D = 15;

const int CSSM_WORDID_DATE = 16;

const int CSSM_WORDID_DB_DELETE = 17;

const int CSSM_WORDID_DB_EXEC_STORED_QUERY = 18;

const int CSSM_WORDID_DB_INSERT = 19;

const int CSSM_WORDID_DB_MODIFY = 20;

const int CSSM_WORDID_DB_READ = 21;

const int CSSM_WORDID_DBS_CREATE = 22;

const int CSSM_WORDID_DBS_DELETE = 23;

const int CSSM_WORDID_DECRYPT = 24;

const int CSSM_WORDID_DELETE = 25;

const int CSSM_WORDID_DELTA_CRL = 26;

const int CSSM_WORDID_DER = 27;

const int CSSM_WORDID_DERIVE = 28;

const int CSSM_WORDID_DISPLAY = 29;

const int CSSM_WORDID_DO = 30;

const int CSSM_WORDID_DSA = 31;

const int CSSM_WORDID_DSA_SHA1 = 32;

const int CSSM_WORDID_E = 33;

const int CSSM_WORDID_ELGAMAL = 34;

const int CSSM_WORDID_ENCRYPT = 35;

const int CSSM_WORDID_ENTRY = 36;

const int CSSM_WORDID_EXPORT_CLEAR = 37;

const int CSSM_WORDID_EXPORT_WRAPPED = 38;

const int CSSM_WORDID_G = 39;

const int CSSM_WORDID_GE = 40;

const int CSSM_WORDID_GENKEY = 41;

const int CSSM_WORDID_HASH = 42;

const int CSSM_WORDID_HASHED_PASSWORD = 43;

const int CSSM_WORDID_HASHED_SUBJECT = 44;

const int CSSM_WORDID_HAVAL = 45;

const int CSSM_WORDID_IBCHASH = 46;

const int CSSM_WORDID_IMPORT_CLEAR = 47;

const int CSSM_WORDID_IMPORT_WRAPPED = 48;

const int CSSM_WORDID_INTEL = 49;

const int CSSM_WORDID_ISSUER = 50;

const int CSSM_WORDID_ISSUER_INFO = 51;

const int CSSM_WORDID_K_OF_N = 52;

const int CSSM_WORDID_KEA = 53;

const int CSSM_WORDID_KEYHOLDER = 54;

const int CSSM_WORDID_L = 55;

const int CSSM_WORDID_LE = 56;

const int CSSM_WORDID_LOGIN = 57;

const int CSSM_WORDID_LOGIN_NAME = 58;

const int CSSM_WORDID_MAC = 59;

const int CSSM_WORDID_MD2 = 60;

const int CSSM_WORDID_MD2WITHRSA = 61;

const int CSSM_WORDID_MD4 = 62;

const int CSSM_WORDID_MD5 = 63;

const int CSSM_WORDID_MD5WITHRSA = 64;

const int CSSM_WORDID_N = 65;

const int CSSM_WORDID_NAME = 66;

const int CSSM_WORDID_NDR = 67;

const int CSSM_WORDID_NHASH = 68;

const int CSSM_WORDID_NOT_AFTER = 69;

const int CSSM_WORDID_NOT_BEFORE = 70;

const int CSSM_WORDID_NULL = 71;

const int CSSM_WORDID_NUMERIC = 72;

const int CSSM_WORDID_OBJECT_HASH = 73;

const int CSSM_WORDID_ONE_TIME = 74;

const int CSSM_WORDID_ONLINE = 75;

const int CSSM_WORDID_OWNER = 76;

const int CSSM_WORDID_P = 77;

const int CSSM_WORDID_PAM_NAME = 78;

const int CSSM_WORDID_PASSWORD = 79;

const int CSSM_WORDID_PGP = 80;

const int CSSM_WORDID_PREFIX = 81;

const int CSSM_WORDID_PRIVATE_KEY = 82;

const int CSSM_WORDID_PROMPTED_BIOMETRIC = 83;

const int CSSM_WORDID_PROMPTED_PASSWORD = 84;

const int CSSM_WORDID_PROPAGATE = 85;

const int CSSM_WORDID_PROTECTED_BIOMETRIC = 86;

const int CSSM_WORDID_PROTECTED_PASSWORD = 87;

const int CSSM_WORDID_PROTECTED_PIN = 88;

const int CSSM_WORDID_PUBLIC_KEY = 89;

const int CSSM_WORDID_PUBLIC_KEY_FROM_CERT = 90;

const int CSSM_WORDID_Q = 91;

const int CSSM_WORDID_RANGE = 92;

const int CSSM_WORDID_REVAL = 93;

const int CSSM_WORDID_RIPEMAC = 94;

const int CSSM_WORDID_RIPEMD = 95;

const int CSSM_WORDID_RIPEMD160 = 96;

const int CSSM_WORDID_RSA = 97;

const int CSSM_WORDID_RSA_ISO9796 = 98;

const int CSSM_WORDID_RSA_PKCS = 99;

const int CSSM_WORDID_RSA_PKCS_MD5 = 100;

const int CSSM_WORDID_RSA_PKCS_SHA1 = 101;

const int CSSM_WORDID_RSA_PKCS1 = 102;

const int CSSM_WORDID_RSA_PKCS1_MD5 = 103;

const int CSSM_WORDID_RSA_PKCS1_SHA1 = 104;

const int CSSM_WORDID_RSA_PKCS1_SIG = 105;

const int CSSM_WORDID_RSA_RAW = 106;

const int CSSM_WORDID_SDSIV1 = 107;

const int CSSM_WORDID_SEQUENCE = 108;

const int CSSM_WORDID_SET = 109;

const int CSSM_WORDID_SEXPR = 110;

const int CSSM_WORDID_SHA1 = 111;

const int CSSM_WORDID_SHA1WITHDSA = 112;

const int CSSM_WORDID_SHA1WITHECDSA = 113;

const int CSSM_WORDID_SHA1WITHRSA = 114;

const int CSSM_WORDID_SIGN = 115;

const int CSSM_WORDID_SIGNATURE = 116;

const int CSSM_WORDID_SIGNED_NONCE = 117;

const int CSSM_WORDID_SIGNED_SECRET = 118;

const int CSSM_WORDID_SPKI = 119;

const int CSSM_WORDID_SUBJECT = 120;

const int CSSM_WORDID_SUBJECT_INFO = 121;

const int CSSM_WORDID_TAG = 122;

const int CSSM_WORDID_THRESHOLD = 123;

const int CSSM_WORDID_TIME = 124;

const int CSSM_WORDID_URI = 125;

const int CSSM_WORDID_VERSION = 126;

const int CSSM_WORDID_X509_ATTRIBUTE = 127;

const int CSSM_WORDID_X509V1 = 128;

const int CSSM_WORDID_X509V2 = 129;

const int CSSM_WORDID_X509V3 = 130;

const int CSSM_WORDID_X9_ATTRIBUTE = 131;

const int CSSM_WORDID_VENDOR_START = 65536;

const int CSSM_WORDID_VENDOR_END = 2147418112;

const int CSSM_LIST_ELEMENT_DATUM = 0;

const int CSSM_LIST_ELEMENT_SUBLIST = 1;

const int CSSM_LIST_ELEMENT_WORDID = 2;

const int CSSM_LIST_TYPE_UNKNOWN = 0;

const int CSSM_LIST_TYPE_CUSTOM = 1;

const int CSSM_LIST_TYPE_SEXPR = 2;

const int CSSM_SAMPLE_TYPE_PASSWORD = 79;

const int CSSM_SAMPLE_TYPE_HASHED_PASSWORD = 43;

const int CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_SAMPLE_TYPE_SIGNED_NONCE = 117;

const int CSSM_SAMPLE_TYPE_SIGNED_SECRET = 118;

const int CSSM_SAMPLE_TYPE_BIOMETRIC = 8;

const int CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_SAMPLE_TYPE_THRESHOLD = 123;

const int CSSM_CERT_UNKNOWN = 0;

const int CSSM_CERT_X_509v1 = 1;

const int CSSM_CERT_X_509v2 = 2;

const int CSSM_CERT_X_509v3 = 3;

const int CSSM_CERT_PGP = 4;

const int CSSM_CERT_SPKI = 5;

const int CSSM_CERT_SDSIv1 = 6;

const int CSSM_CERT_Intel = 8;

const int CSSM_CERT_X_509_ATTRIBUTE = 9;

const int CSSM_CERT_X9_ATTRIBUTE = 10;

const int CSSM_CERT_TUPLE = 11;

const int CSSM_CERT_ACL_ENTRY = 12;

const int CSSM_CERT_MULTIPLE = 32766;

const int CSSM_CERT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_TYPE = 32768;

const int CSSM_CERT_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_ENCODING_CUSTOM = 1;

const int CSSM_CERT_ENCODING_BER = 2;

const int CSSM_CERT_ENCODING_DER = 3;

const int CSSM_CERT_ENCODING_NDR = 4;

const int CSSM_CERT_ENCODING_SEXPR = 5;

const int CSSM_CERT_ENCODING_PGP = 6;

const int CSSM_CERT_ENCODING_MULTIPLE = 32766;

const int CSSM_CERT_ENCODING_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_ENCODING = 32768;

const int CSSM_CERT_PARSE_FORMAT_NONE = 0;

const int CSSM_CERT_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CERT_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CERT_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CERT_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CERT_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CERT_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CERT_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_PARSE_FORMAT = 32768;

const int CSSM_CERTGROUP_DATA = 0;

const int CSSM_CERTGROUP_ENCODED_CERT = 1;

const int CSSM_CERTGROUP_PARSED_CERT = 2;

const int CSSM_CERTGROUP_CERT_PAIR = 3;

const int CSSM_ACL_SUBJECT_TYPE_ANY = 1;

const int CSSM_ACL_SUBJECT_TYPE_THRESHOLD = 123;

const int CSSM_ACL_SUBJECT_TYPE_PASSWORD = 79;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD = 87;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD = 84;

const int CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY = 89;

const int CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT = 44;

const int CSSM_ACL_SUBJECT_TYPE_BIOMETRIC = 8;

const int CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC = 86;

const int CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC = 83;

const int CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME = 58;

const int CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME = 78;

const int CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START = 65536;

const int CSSM_ACL_AUTHORIZATION_ANY = 1;

const int CSSM_ACL_AUTHORIZATION_LOGIN = 57;

const int CSSM_ACL_AUTHORIZATION_GENKEY = 41;

const int CSSM_ACL_AUTHORIZATION_DELETE = 25;

const int CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED = 38;

const int CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR = 37;

const int CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED = 48;

const int CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR = 47;

const int CSSM_ACL_AUTHORIZATION_SIGN = 115;

const int CSSM_ACL_AUTHORIZATION_ENCRYPT = 35;

const int CSSM_ACL_AUTHORIZATION_DECRYPT = 24;

const int CSSM_ACL_AUTHORIZATION_MAC = 59;

const int CSSM_ACL_AUTHORIZATION_DERIVE = 28;

const int CSSM_ACL_AUTHORIZATION_DBS_CREATE = 22;

const int CSSM_ACL_AUTHORIZATION_DBS_DELETE = 23;

const int CSSM_ACL_AUTHORIZATION_DB_READ = 21;

const int CSSM_ACL_AUTHORIZATION_DB_INSERT = 19;

const int CSSM_ACL_AUTHORIZATION_DB_MODIFY = 20;

const int CSSM_ACL_AUTHORIZATION_DB_DELETE = 17;

const int CSSM_ACL_EDIT_MODE_ADD = 1;

const int CSSM_ACL_EDIT_MODE_DELETE = 2;

const int CSSM_ACL_EDIT_MODE_REPLACE = 3;

const int CSSM_KEYHEADER_VERSION = 2;

const int CSSM_KEYBLOB_RAW = 0;

const int CSSM_KEYBLOB_REFERENCE = 2;

const int CSSM_KEYBLOB_WRAPPED = 3;

const int CSSM_KEYBLOB_OTHER = -1;

const int CSSM_KEYBLOB_RAW_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS1 = 1;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS3 = 2;

const int CSSM_KEYBLOB_RAW_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_RAW_FORMAT_PGP = 4;

const int CSSM_KEYBLOB_RAW_FORMAT_FIPS186 = 5;

const int CSSM_KEYBLOB_RAW_FORMAT_BSAFE = 6;

const int CSSM_KEYBLOB_RAW_FORMAT_CCA = 9;

const int CSSM_KEYBLOB_RAW_FORMAT_PKCS8 = 10;

const int CSSM_KEYBLOB_RAW_FORMAT_SPKI = 11;

const int CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING = 12;

const int CSSM_KEYBLOB_RAW_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_NONE = 0;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8 = 1;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7 = 2;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI = 3;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER = -1;

const int CSSM_KEYBLOB_REF_FORMAT_INTEGER = 0;

const int CSSM_KEYBLOB_REF_FORMAT_STRING = 1;

const int CSSM_KEYBLOB_REF_FORMAT_SPKI = 2;

const int CSSM_KEYBLOB_REF_FORMAT_OTHER = -1;

const int CSSM_KEYCLASS_PUBLIC_KEY = 0;

const int CSSM_KEYCLASS_PRIVATE_KEY = 1;

const int CSSM_KEYCLASS_SESSION_KEY = 2;

const int CSSM_KEYCLASS_SECRET_PART = 3;

const int CSSM_KEYCLASS_OTHER = -1;

const int CSSM_KEYATTR_RETURN_DEFAULT = 0;

const int CSSM_KEYATTR_RETURN_DATA = 268435456;

const int CSSM_KEYATTR_RETURN_REF = 536870912;

const int CSSM_KEYATTR_RETURN_NONE = 1073741824;

const int CSSM_KEYATTR_PERMANENT = 1;

const int CSSM_KEYATTR_PRIVATE = 2;

const int CSSM_KEYATTR_MODIFIABLE = 4;

const int CSSM_KEYATTR_SENSITIVE = 8;

const int CSSM_KEYATTR_EXTRACTABLE = 32;

const int CSSM_KEYATTR_ALWAYS_SENSITIVE = 16;

const int CSSM_KEYATTR_NEVER_EXTRACTABLE = 64;

const int CSSM_KEYUSE_ANY = -2147483648;

const int CSSM_KEYUSE_ENCRYPT = 1;

const int CSSM_KEYUSE_DECRYPT = 2;

const int CSSM_KEYUSE_SIGN = 4;

const int CSSM_KEYUSE_VERIFY = 8;

const int CSSM_KEYUSE_SIGN_RECOVER = 16;

const int CSSM_KEYUSE_VERIFY_RECOVER = 32;

const int CSSM_KEYUSE_WRAP = 64;

const int CSSM_KEYUSE_UNWRAP = 128;

const int CSSM_KEYUSE_DERIVE = 256;

const int CSSM_ALGID_NONE = 0;

const int CSSM_ALGID_CUSTOM = 1;

const int CSSM_ALGID_DH = 2;

const int CSSM_ALGID_PH = 3;

const int CSSM_ALGID_KEA = 4;

const int CSSM_ALGID_MD2 = 5;

const int CSSM_ALGID_MD4 = 6;

const int CSSM_ALGID_MD5 = 7;

const int CSSM_ALGID_SHA1 = 8;

const int CSSM_ALGID_NHASH = 9;

const int CSSM_ALGID_HAVAL = 10;

const int CSSM_ALGID_RIPEMD = 11;

const int CSSM_ALGID_IBCHASH = 12;

const int CSSM_ALGID_RIPEMAC = 13;

const int CSSM_ALGID_DES = 14;

const int CSSM_ALGID_DESX = 15;

const int CSSM_ALGID_RDES = 16;

const int CSSM_ALGID_3DES_3KEY_EDE = 17;

const int CSSM_ALGID_3DES_2KEY_EDE = 18;

const int CSSM_ALGID_3DES_1KEY_EEE = 19;

const int CSSM_ALGID_3DES_3KEY = 17;

const int CSSM_ALGID_3DES_3KEY_EEE = 20;

const int CSSM_ALGID_3DES_2KEY = 18;

const int CSSM_ALGID_3DES_2KEY_EEE = 21;

const int CSSM_ALGID_3DES_1KEY = 20;

const int CSSM_ALGID_IDEA = 22;

const int CSSM_ALGID_RC2 = 23;

const int CSSM_ALGID_RC5 = 24;

const int CSSM_ALGID_RC4 = 25;

const int CSSM_ALGID_SEAL = 26;

const int CSSM_ALGID_CAST = 27;

const int CSSM_ALGID_BLOWFISH = 28;

const int CSSM_ALGID_SKIPJACK = 29;

const int CSSM_ALGID_LUCIFER = 30;

const int CSSM_ALGID_MADRYGA = 31;

const int CSSM_ALGID_FEAL = 32;

const int CSSM_ALGID_REDOC = 33;

const int CSSM_ALGID_REDOC3 = 34;

const int CSSM_ALGID_LOKI = 35;

const int CSSM_ALGID_KHUFU = 36;

const int CSSM_ALGID_KHAFRE = 37;

const int CSSM_ALGID_MMB = 38;

const int CSSM_ALGID_GOST = 39;

const int CSSM_ALGID_SAFER = 40;

const int CSSM_ALGID_CRAB = 41;

const int CSSM_ALGID_RSA = 42;

const int CSSM_ALGID_DSA = 43;

const int CSSM_ALGID_MD5WithRSA = 44;

const int CSSM_ALGID_MD2WithRSA = 45;

const int CSSM_ALGID_ElGamal = 46;

const int CSSM_ALGID_MD2Random = 47;

const int CSSM_ALGID_MD5Random = 48;

const int CSSM_ALGID_SHARandom = 49;

const int CSSM_ALGID_DESRandom = 50;

const int CSSM_ALGID_SHA1WithRSA = 51;

const int CSSM_ALGID_CDMF = 52;

const int CSSM_ALGID_CAST3 = 53;

const int CSSM_ALGID_CAST5 = 54;

const int CSSM_ALGID_GenericSecret = 55;

const int CSSM_ALGID_ConcatBaseAndKey = 56;

const int CSSM_ALGID_ConcatKeyAndBase = 57;

const int CSSM_ALGID_ConcatBaseAndData = 58;

const int CSSM_ALGID_ConcatDataAndBase = 59;

const int CSSM_ALGID_XORBaseAndData = 60;

const int CSSM_ALGID_ExtractFromKey = 61;

const int CSSM_ALGID_SSL3PrePrimaryGen = 62;

const int CSSM_ALGID_SSL3PreMasterGen = 62;

const int CSSM_ALGID_SSL3PrimaryDerive = 63;

const int CSSM_ALGID_SSL3MasterDerive = 63;

const int CSSM_ALGID_SSL3KeyAndMacDerive = 64;

const int CSSM_ALGID_SSL3MD5_MAC = 65;

const int CSSM_ALGID_SSL3SHA1_MAC = 66;

const int CSSM_ALGID_PKCS5_PBKDF1_MD5 = 67;

const int CSSM_ALGID_PKCS5_PBKDF1_MD2 = 68;

const int CSSM_ALGID_PKCS5_PBKDF1_SHA1 = 69;

const int CSSM_ALGID_WrapLynks = 70;

const int CSSM_ALGID_WrapSET_OAEP = 71;

const int CSSM_ALGID_BATON = 72;

const int CSSM_ALGID_ECDSA = 73;

const int CSSM_ALGID_MAYFLY = 74;

const int CSSM_ALGID_JUNIPER = 75;

const int CSSM_ALGID_FASTHASH = 76;

const int CSSM_ALGID_3DES = 77;

const int CSSM_ALGID_SSL3MD5 = 78;

const int CSSM_ALGID_SSL3SHA1 = 79;

const int CSSM_ALGID_FortezzaTimestamp = 80;

const int CSSM_ALGID_SHA1WithDSA = 81;

const int CSSM_ALGID_SHA1WithECDSA = 82;

const int CSSM_ALGID_DSA_BSAFE = 83;

const int CSSM_ALGID_ECDH = 84;

const int CSSM_ALGID_ECMQV = 85;

const int CSSM_ALGID_PKCS12_SHA1_PBE = 86;

const int CSSM_ALGID_ECNRA = 87;

const int CSSM_ALGID_SHA1WithECNRA = 88;

const int CSSM_ALGID_ECES = 89;

const int CSSM_ALGID_ECAES = 90;

const int CSSM_ALGID_SHA1HMAC = 91;

const int CSSM_ALGID_FIPS186Random = 92;

const int CSSM_ALGID_ECC = 93;

const int CSSM_ALGID_MQV = 94;

const int CSSM_ALGID_NRA = 95;

const int CSSM_ALGID_IntelPlatformRandom = 96;

const int CSSM_ALGID_UTC = 97;

const int CSSM_ALGID_HAVAL3 = 98;

const int CSSM_ALGID_HAVAL4 = 99;

const int CSSM_ALGID_HAVAL5 = 100;

const int CSSM_ALGID_TIGER = 101;

const int CSSM_ALGID_MD5HMAC = 102;

const int CSSM_ALGID_PKCS5_PBKDF2 = 103;

const int CSSM_ALGID_RUNNING_COUNTER = 104;

const int CSSM_ALGID_LAST = 2147483647;

const int CSSM_ALGID_VENDOR_DEFINED = -2147483648;

const int CSSM_ALGMODE_NONE = 0;

const int CSSM_ALGMODE_CUSTOM = 1;

const int CSSM_ALGMODE_ECB = 2;

const int CSSM_ALGMODE_ECBPad = 3;

const int CSSM_ALGMODE_CBC = 4;

const int CSSM_ALGMODE_CBC_IV8 = 5;

const int CSSM_ALGMODE_CBCPadIV8 = 6;

const int CSSM_ALGMODE_CFB = 7;

const int CSSM_ALGMODE_CFB_IV8 = 8;

const int CSSM_ALGMODE_CFBPadIV8 = 9;

const int CSSM_ALGMODE_OFB = 10;

const int CSSM_ALGMODE_OFB_IV8 = 11;

const int CSSM_ALGMODE_OFBPadIV8 = 12;

const int CSSM_ALGMODE_COUNTER = 13;

const int CSSM_ALGMODE_BC = 14;

const int CSSM_ALGMODE_PCBC = 15;

const int CSSM_ALGMODE_CBCC = 16;

const int CSSM_ALGMODE_OFBNLF = 17;

const int CSSM_ALGMODE_PBC = 18;

const int CSSM_ALGMODE_PFB = 19;

const int CSSM_ALGMODE_CBCPD = 20;

const int CSSM_ALGMODE_PUBLIC_KEY = 21;

const int CSSM_ALGMODE_PRIVATE_KEY = 22;

const int CSSM_ALGMODE_SHUFFLE = 23;

const int CSSM_ALGMODE_ECB64 = 24;

const int CSSM_ALGMODE_CBC64 = 25;

const int CSSM_ALGMODE_OFB64 = 26;

const int CSSM_ALGMODE_CFB32 = 28;

const int CSSM_ALGMODE_CFB16 = 29;

const int CSSM_ALGMODE_CFB8 = 30;

const int CSSM_ALGMODE_WRAP = 31;

const int CSSM_ALGMODE_PRIVATE_WRAP = 32;

const int CSSM_ALGMODE_RELAYX = 33;

const int CSSM_ALGMODE_ECB128 = 34;

const int CSSM_ALGMODE_ECB96 = 35;

const int CSSM_ALGMODE_CBC128 = 36;

const int CSSM_ALGMODE_OAEP_HASH = 37;

const int CSSM_ALGMODE_PKCS1_EME_V15 = 38;

const int CSSM_ALGMODE_PKCS1_EME_OAEP = 39;

const int CSSM_ALGMODE_PKCS1_EMSA_V15 = 40;

const int CSSM_ALGMODE_ISO_9796 = 41;

const int CSSM_ALGMODE_X9_31 = 42;

const int CSSM_ALGMODE_LAST = 2147483647;

const int CSSM_ALGMODE_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_SOFTWARE = 1;

const int CSSM_CSP_HARDWARE = 2;

const int CSSM_CSP_HYBRID = 3;

const int CSSM_ALGCLASS_NONE = 0;

const int CSSM_ALGCLASS_CUSTOM = 1;

const int CSSM_ALGCLASS_SIGNATURE = 2;

const int CSSM_ALGCLASS_SYMMETRIC = 3;

const int CSSM_ALGCLASS_DIGEST = 4;

const int CSSM_ALGCLASS_RANDOMGEN = 5;

const int CSSM_ALGCLASS_UNIQUEGEN = 6;

const int CSSM_ALGCLASS_MAC = 7;

const int CSSM_ALGCLASS_ASYMMETRIC = 8;

const int CSSM_ALGCLASS_KEYGEN = 9;

const int CSSM_ALGCLASS_DERIVEKEY = 10;

const int CSSM_ATTRIBUTE_DATA_NONE = 0;

const int CSSM_ATTRIBUTE_DATA_UINT32 = 268435456;

const int CSSM_ATTRIBUTE_DATA_CSSM_DATA = 536870912;

const int CSSM_ATTRIBUTE_DATA_CRYPTO_DATA = 805306368;

const int CSSM_ATTRIBUTE_DATA_KEY = 1073741824;

const int CSSM_ATTRIBUTE_DATA_STRING = 1342177280;

const int CSSM_ATTRIBUTE_DATA_DATE = 1610612736;

const int CSSM_ATTRIBUTE_DATA_RANGE = 1879048192;

const int CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS = -2147483648;

const int CSSM_ATTRIBUTE_DATA_VERSION = 16777216;

const int CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE = 33554432;

const int CSSM_ATTRIBUTE_DATA_KR_PROFILE = 50331648;

const int CSSM_ATTRIBUTE_TYPE_MASK = -16777216;

const int CSSM_ATTRIBUTE_NONE = 0;

const int CSSM_ATTRIBUTE_CUSTOM = 536870913;

const int CSSM_ATTRIBUTE_DESCRIPTION = 1342177282;

const int CSSM_ATTRIBUTE_KEY = 1073741827;

const int CSSM_ATTRIBUTE_INIT_VECTOR = 536870916;

const int CSSM_ATTRIBUTE_SALT = 536870917;

const int CSSM_ATTRIBUTE_PADDING = 268435462;

const int CSSM_ATTRIBUTE_RANDOM = 536870919;

const int CSSM_ATTRIBUTE_SEED = 805306376;

const int CSSM_ATTRIBUTE_PASSPHRASE = 805306377;

const int CSSM_ATTRIBUTE_KEY_LENGTH = 268435466;

const int CSSM_ATTRIBUTE_KEY_LENGTH_RANGE = 1879048203;

const int CSSM_ATTRIBUTE_BLOCK_SIZE = 268435468;

const int CSSM_ATTRIBUTE_OUTPUT_SIZE = 268435469;

const int CSSM_ATTRIBUTE_ROUNDS = 268435470;

const int CSSM_ATTRIBUTE_IV_SIZE = 268435471;

const int CSSM_ATTRIBUTE_ALG_PARAMS = 536870928;

const int CSSM_ATTRIBUTE_LABEL = 536870929;

const int CSSM_ATTRIBUTE_KEY_TYPE = 268435474;

const int CSSM_ATTRIBUTE_MODE = 268435475;

const int CSSM_ATTRIBUTE_EFFECTIVE_BITS = 268435476;

const int CSSM_ATTRIBUTE_START_DATE = 1610612757;

const int CSSM_ATTRIBUTE_END_DATE = 1610612758;

const int CSSM_ATTRIBUTE_KEYUSAGE = 268435479;

const int CSSM_ATTRIBUTE_KEYATTR = 268435480;

const int CSSM_ATTRIBUTE_VERSION = 16777241;

const int CSSM_ATTRIBUTE_PRIME = 536870938;

const int CSSM_ATTRIBUTE_BASE = 536870939;

const int CSSM_ATTRIBUTE_SUBPRIME = 536870940;

const int CSSM_ATTRIBUTE_ALG_ID = 268435485;

const int CSSM_ATTRIBUTE_ITERATION_COUNT = 268435486;

const int CSSM_ATTRIBUTE_ROUNDS_RANGE = 1879048223;

const int CSSM_ATTRIBUTE_KRPROFILE_LOCAL = 50331680;

const int CSSM_ATTRIBUTE_KRPROFILE_REMOTE = 50331681;

const int CSSM_ATTRIBUTE_CSP_HANDLE = 268435490;

const int CSSM_ATTRIBUTE_DL_DB_HANDLE = 33554467;

const int CSSM_ATTRIBUTE_ACCESS_CREDENTIALS = -2147483612;

const int CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT = 268435493;

const int CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT = 268435494;

const int CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT = 268435495;

const int CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT = 268435496;

const int CSSM_PADDING_NONE = 0;

const int CSSM_PADDING_CUSTOM = 1;

const int CSSM_PADDING_ZERO = 2;

const int CSSM_PADDING_ONE = 3;

const int CSSM_PADDING_ALTERNATE = 4;

const int CSSM_PADDING_FF = 5;

const int CSSM_PADDING_PKCS5 = 6;

const int CSSM_PADDING_PKCS7 = 7;

const int CSSM_PADDING_CIPHERSTEALING = 8;

const int CSSM_PADDING_RANDOM = 9;

const int CSSM_PADDING_PKCS1 = 10;

const int CSSM_PADDING_SIGRAW = 11;

const int CSSM_PADDING_VENDOR_DEFINED = -2147483648;

const int CSSM_CSP_TOK_RNG = 1;

const int CSSM_CSP_TOK_CLOCK_EXISTS = 64;

const int CSSM_CSP_RDR_TOKENPRESENT = 1;

const int CSSM_CSP_RDR_EXISTS = 2;

const int CSSM_CSP_RDR_HW = 4;

const int CSSM_CSP_TOK_WRITE_PROTECTED = 2;

const int CSSM_CSP_TOK_LOGIN_REQUIRED = 4;

const int CSSM_CSP_TOK_USER_PIN_INITIALIZED = 8;

const int CSSM_CSP_TOK_PROT_AUTHENTICATION = 256;

const int CSSM_CSP_TOK_USER_PIN_EXPIRED = 1048576;

const int CSSM_CSP_TOK_SESSION_KEY_PASSWORD = 2097152;

const int CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD = 4194304;

const int CSSM_CSP_STORES_PRIVATE_KEYS = 16777216;

const int CSSM_CSP_STORES_PUBLIC_KEYS = 33554432;

const int CSSM_CSP_STORES_SESSION_KEYS = 67108864;

const int CSSM_CSP_STORES_CERTIFICATES = 134217728;

const int CSSM_CSP_STORES_GENERIC = 268435456;

const int CSSM_PKCS_OAEP_MGF_NONE = 0;

const int CSSM_PKCS_OAEP_MGF1_SHA1 = 1;

const int CSSM_PKCS_OAEP_MGF1_MD5 = 2;

const int CSSM_PKCS_OAEP_PSOURCE_NONE = 0;

const int CSSM_PKCS_OAEP_PSOURCE_Pspecified = 1;

const int CSSM_VALUE_NOT_AVAILABLE = -1;

const int CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1 = 0;

const int CSSM_TP_AUTHORITY_REQUEST_CERTISSUE = 1;

const int CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE = 2;

const int CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND = 3;

const int CSSM_TP_AUTHORITY_REQUEST_CERTRESUME = 4;

const int CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY = 5;

const int CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE = 6;

const int CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER = 7;

const int CSSM_TP_AUTHORITY_REQUEST_CRLISSUE = 256;

const int CSSM_TP_KEY_ARCHIVE = 1;

const int CSSM_TP_CERT_PUBLISH = 2;

const int CSSM_TP_CERT_NOTIFY_RENEW = 4;

const int CSSM_TP_CERT_DIR_UPDATE = 8;

const int CSSM_TP_CRL_DISTRIBUTE = 16;

const int CSSM_TP_ACTION_DEFAULT = 0;

const int CSSM_TP_STOP_ON_POLICY = 0;

const int CSSM_TP_STOP_ON_NONE = 1;

const int CSSM_TP_STOP_ON_FIRST_PASS = 2;

const int CSSM_TP_STOP_ON_FIRST_FAIL = 3;

const int CSSM_CRL_PARSE_FORMAT_NONE = 0;

const int CSSM_CRL_PARSE_FORMAT_CUSTOM = 1;

const int CSSM_CRL_PARSE_FORMAT_SEXPR = 2;

const int CSSM_CRL_PARSE_FORMAT_COMPLEX = 3;

const int CSSM_CRL_PARSE_FORMAT_OID_NAMED = 4;

const int CSSM_CRL_PARSE_FORMAT_TUPLE = 5;

const int CSSM_CRL_PARSE_FORMAT_MULTIPLE = 32766;

const int CSSM_CRL_PARSE_FORMAT_LAST = 32767;

const int CSSM_CL_CUSTOM_CRL_PARSE_FORMAT = 32768;

const int CSSM_CRL_TYPE_UNKNOWN = 0;

const int CSSM_CRL_TYPE_X_509v1 = 1;

const int CSSM_CRL_TYPE_X_509v2 = 2;

const int CSSM_CRL_TYPE_SPKI = 3;

const int CSSM_CRL_TYPE_MULTIPLE = 32766;

const int CSSM_CRL_ENCODING_UNKNOWN = 0;

const int CSSM_CRL_ENCODING_CUSTOM = 1;

const int CSSM_CRL_ENCODING_BER = 2;

const int CSSM_CRL_ENCODING_DER = 3;

const int CSSM_CRL_ENCODING_BLOOM = 4;

const int CSSM_CRL_ENCODING_SEXPR = 5;

const int CSSM_CRL_ENCODING_MULTIPLE = 32766;

const int CSSM_CRLGROUP_DATA = 0;

const int CSSM_CRLGROUP_ENCODED_CRL = 1;

const int CSSM_CRLGROUP_PARSED_CRL = 2;

const int CSSM_CRLGROUP_CRL_PAIR = 3;

const int CSSM_EVIDENCE_FORM_UNSPECIFIC = 0;

const int CSSM_EVIDENCE_FORM_CERT = 1;

const int CSSM_EVIDENCE_FORM_CRL = 2;

const int CSSM_EVIDENCE_FORM_CERT_ID = 3;

const int CSSM_EVIDENCE_FORM_CRL_ID = 4;

const int CSSM_EVIDENCE_FORM_VERIFIER_TIME = 5;

const int CSSM_EVIDENCE_FORM_CRL_THISTIME = 6;

const int CSSM_EVIDENCE_FORM_CRL_NEXTTIME = 7;

const int CSSM_EVIDENCE_FORM_POLICYINFO = 8;

const int CSSM_EVIDENCE_FORM_TUPLEGROUP = 9;

const int CSSM_TP_CONFIRM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CONFIRM_ACCEPT = 1;

const int CSSM_TP_CONFIRM_REJECT = 2;

const int CSSM_ESTIMATED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_UNKNOWN = -1;

const int CSSM_ELAPSED_TIME_COMPLETE = -2;

const int CSSM_TP_CERTISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTISSUE_OK = 1;

const int CSSM_TP_CERTISSUE_OKWITHCERTMODS = 2;

const int CSSM_TP_CERTISSUE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTISSUE_REJECTED = 4;

const int CSSM_TP_CERTISSUE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTISSUE_WILL_BE_REVOKED = 6;

const int CSSM_TP_CERTCHANGE_NONE = 0;

const int CSSM_TP_CERTCHANGE_REVOKE = 1;

const int CSSM_TP_CERTCHANGE_HOLD = 2;

const int CSSM_TP_CERTCHANGE_RELEASE = 3;

const int CSSM_TP_CERTCHANGE_REASON_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE = 1;

const int CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE = 2;

const int CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION = 3;

const int CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE = 4;

const int CSSM_TP_CERTCHANGE_REASON_SUPERCEDED = 5;

const int CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE = 6;

const int CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE = 7;

const int CSSM_TP_CERTCHANGE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTCHANGE_OK = 1;

const int CSSM_TP_CERTCHANGE_OKWITHNEWTIME = 2;

const int CSSM_TP_CERTCHANGE_WRONGCA = 3;

const int CSSM_TP_CERTCHANGE_REJECTED = 4;

const int CSSM_TP_CERTCHANGE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTVERIFY_UNKNOWN = 0;

const int CSSM_TP_CERTVERIFY_VALID = 1;

const int CSSM_TP_CERTVERIFY_INVALID = 2;

const int CSSM_TP_CERTVERIFY_REVOKED = 3;

const int CSSM_TP_CERTVERIFY_SUSPENDED = 4;

const int CSSM_TP_CERTVERIFY_EXPIRED = 5;

const int CSSM_TP_CERTVERIFY_NOT_VALID_YET = 6;

const int CSSM_TP_CERTVERIFY_INVALID_AUTHORITY = 7;

const int CSSM_TP_CERTVERIFY_INVALID_SIGNATURE = 8;

const int CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE = 9;

const int CSSM_TP_CERTVERIFY_INVALID_CERTGROUP = 10;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY = 11;

const int CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS = 12;

const int CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS = 13;

const int CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT = 14;

const int CSSM_TP_CERTVERIFY_INVALID_NAME_TREE = 15;

const int CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT = 16;

const int CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTNOTARIZE_OK = 1;

const int CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS = 2;

const int CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS = 3;

const int CSSM_TP_CERTNOTARIZE_REJECTED = 4;

const int CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED = 5;

const int CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN = 0;

const int CSSM_TP_CERTRECLAIM_OK = 1;

const int CSSM_TP_CERTRECLAIM_NOMATCH = 2;

const int CSSM_TP_CERTRECLAIM_REJECTED = 3;

const int CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED = 4;

const int CSSM_TP_CRLISSUE_STATUS_UNKNOWN = 0;

const int CSSM_TP_CRLISSUE_OK = 1;

const int CSSM_TP_CRLISSUE_NOT_CURRENT = 2;

const int CSSM_TP_CRLISSUE_INVALID_DOMAIN = 3;

const int CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER = 4;

const int CSSM_TP_CRLISSUE_REJECTED = 5;

const int CSSM_TP_CRLISSUE_NOT_AUTHORIZED = 6;

const int CSSM_TP_FORM_TYPE_GENERIC = 0;

const int CSSM_TP_FORM_TYPE_REGISTRATION = 1;

const int CSSM_CL_TEMPLATE_INTERMEDIATE_CERT = 1;

const int CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE = 2;

const int CSSM_CERT_BUNDLE_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA = 2;

const int CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA = 3;

const int CSSM_CERT_BUNDLE_PKCS12 = 4;

const int CSSM_CERT_BUNDLE_PFX = 5;

const int CSSM_CERT_BUNDLE_SPKI_SEQUENCE = 6;

const int CSSM_CERT_BUNDLE_PGP_KEYRING = 7;

const int CSSM_CERT_BUNDLE_LAST = 32767;

const int CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE = 32768;

const int CSSM_CERT_BUNDLE_ENCODING_UNKNOWN = 0;

const int CSSM_CERT_BUNDLE_ENCODING_CUSTOM = 1;

const int CSSM_CERT_BUNDLE_ENCODING_BER = 2;

const int CSSM_CERT_BUNDLE_ENCODING_DER = 3;

const int CSSM_CERT_BUNDLE_ENCODING_SEXPR = 4;

const int CSSM_CERT_BUNDLE_ENCODING_PGP = 5;

const int CSSM_FIELDVALUE_COMPLEX_DATA_TYPE = -1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_STRING = 0;

const int CSSM_DB_ATTRIBUTE_NAME_AS_OID = 1;

const int CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_STRING = 0;

const int CSSM_DB_ATTRIBUTE_FORMAT_SINT32 = 1;

const int CSSM_DB_ATTRIBUTE_FORMAT_UINT32 = 2;

const int CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM = 3;

const int CSSM_DB_ATTRIBUTE_FORMAT_REAL = 4;

const int CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE = 5;

const int CSSM_DB_ATTRIBUTE_FORMAT_BLOB = 6;

const int CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32 = 7;

const int CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX = 8;

const int CSSM_DB_RECORDTYPE_SCHEMA_START = 0;

const int CSSM_DB_RECORDTYPE_SCHEMA_END = 4;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_START = 10;

const int CSSM_DB_RECORDTYPE_OPEN_GROUP_END = 18;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_START = -2147483648;

const int CSSM_DB_RECORDTYPE_APP_DEFINED_END = -1;

const int CSSM_DL_DB_SCHEMA_INFO = 0;

const int CSSM_DL_DB_SCHEMA_INDEXES = 1;

const int CSSM_DL_DB_SCHEMA_ATTRIBUTES = 2;

const int CSSM_DL_DB_SCHEMA_PARSING_MODULE = 3;

const int CSSM_DL_DB_RECORD_ANY = 10;

const int CSSM_DL_DB_RECORD_CERT = 11;

const int CSSM_DL_DB_RECORD_CRL = 12;

const int CSSM_DL_DB_RECORD_POLICY = 13;

const int CSSM_DL_DB_RECORD_GENERIC = 14;

const int CSSM_DL_DB_RECORD_PUBLIC_KEY = 15;

const int CSSM_DL_DB_RECORD_PRIVATE_KEY = 16;

const int CSSM_DL_DB_RECORD_SYMMETRIC_KEY = 17;

const int CSSM_DL_DB_RECORD_ALL_KEYS = 18;

const int CSSM_DB_CERT_USE_TRUSTED = 1;

const int CSSM_DB_CERT_USE_SYSTEM = 2;

const int CSSM_DB_CERT_USE_OWNER = 4;

const int CSSM_DB_CERT_USE_REVOKED = 8;

const int CSSM_DB_CERT_USE_SIGNING = 16;

const int CSSM_DB_CERT_USE_PRIVACY = 32;

const int CSSM_DB_INDEX_UNIQUE = 0;

const int CSSM_DB_INDEX_NONUNIQUE = 1;

const int CSSM_DB_INDEX_ON_UNKNOWN = 0;

const int CSSM_DB_INDEX_ON_ATTRIBUTE = 1;

const int CSSM_DB_INDEX_ON_RECORD = 2;

const int CSSM_DB_ACCESS_READ = 1;

const int CSSM_DB_ACCESS_WRITE = 2;

const int CSSM_DB_ACCESS_PRIVILEGED = 4;

const int CSSM_DB_MODIFY_ATTRIBUTE_NONE = 0;

const int CSSM_DB_MODIFY_ATTRIBUTE_ADD = 1;

const int CSSM_DB_MODIFY_ATTRIBUTE_DELETE = 2;

const int CSSM_DB_MODIFY_ATTRIBUTE_REPLACE = 3;

const int CSSM_DB_EQUAL = 0;

const int CSSM_DB_NOT_EQUAL = 1;

const int CSSM_DB_LESS_THAN = 2;

const int CSSM_DB_GREATER_THAN = 3;

const int CSSM_DB_CONTAINS = 4;

const int CSSM_DB_CONTAINS_INITIAL_SUBSTRING = 5;

const int CSSM_DB_CONTAINS_FINAL_SUBSTRING = 6;

const int CSSM_DB_NONE = 0;

const int CSSM_DB_AND = 1;

const int CSSM_DB_OR = 2;

const int CSSM_QUERY_TIMELIMIT_NONE = 0;

const int CSSM_QUERY_SIZELIMIT_NONE = 0;

const int CSSM_QUERY_RETURN_DATA = 1;

const int CSSM_DL_UNKNOWN = 0;

const int CSSM_DL_CUSTOM = 1;

const int CSSM_DL_LDAP = 2;

const int CSSM_DL_ODBC = 3;

const int CSSM_DL_PKCS11 = 4;

const int CSSM_DL_FFS = 5;

const int CSSM_DL_MEMORY = 6;

const int CSSM_DL_REMOTEDIR = 7;

const int CSSM_DB_DATASTORES_UNKNOWN = -1;

const int CSSM_DB_TRANSACTIONAL_MODE = 0;

const int CSSM_DB_FILESYSTEMSCAN_MODE = 1;

const int CSSM_BASE_ERROR = -2147418112;

const int CSSM_ERRORCODE_MODULE_EXTENT = 2048;

const int CSSM_ERRORCODE_CUSTOM_OFFSET = 1024;

const int CSSM_ERRORCODE_COMMON_EXTENT = 256;

const int CSSM_CSSM_BASE_ERROR = -2147418112;

const int CSSM_CSSM_PRIVATE_ERROR = -2147417088;

const int CSSM_CSP_BASE_ERROR = -2147416064;

const int CSSM_CSP_PRIVATE_ERROR = -2147415040;

const int CSSM_DL_BASE_ERROR = -2147414016;

const int CSSM_DL_PRIVATE_ERROR = -2147412992;

const int CSSM_CL_BASE_ERROR = -2147411968;

const int CSSM_CL_PRIVATE_ERROR = -2147410944;

const int CSSM_TP_BASE_ERROR = -2147409920;

const int CSSM_TP_PRIVATE_ERROR = -2147408896;

const int CSSM_KR_BASE_ERROR = -2147407872;

const int CSSM_KR_PRIVATE_ERROR = -2147406848;

const int CSSM_AC_BASE_ERROR = -2147405824;

const int CSSM_AC_PRIVATE_ERROR = -2147404800;

const int CSSM_MDS_BASE_ERROR = -2147414016;

const int CSSM_MDS_PRIVATE_ERROR = -2147412992;

const int CSSMERR_CSSM_INVALID_ADDIN_HANDLE = -2147417855;

const int CSSMERR_CSSM_NOT_INITIALIZED = -2147417854;

const int CSSMERR_CSSM_INVALID_HANDLE_USAGE = -2147417853;

const int CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND = -2147417852;

const int CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL = -2147417851;

const int CSSM_ERRCODE_INTERNAL_ERROR = 1;

const int CSSM_ERRCODE_MEMORY_ERROR = 2;

const int CSSM_ERRCODE_MDS_ERROR = 3;

const int CSSM_ERRCODE_INVALID_POINTER = 4;

const int CSSM_ERRCODE_INVALID_INPUT_POINTER = 5;

const int CSSM_ERRCODE_INVALID_OUTPUT_POINTER = 6;

const int CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED = 7;

const int CSSM_ERRCODE_SELF_CHECK_FAILED = 8;

const int CSSM_ERRCODE_OS_ACCESS_DENIED = 9;

const int CSSM_ERRCODE_FUNCTION_FAILED = 10;

const int CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED = 11;

const int CSSM_ERRCODE_INVALID_GUID = 12;

const int CSSM_ERRCODE_OPERATION_AUTH_DENIED = 32;

const int CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED = 33;

const int CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED = 34;

const int CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED = 35;

const int CSSM_ERRCODE_OBJECT_ACL_REQUIRED = 36;

const int CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS = 37;

const int CSSM_ERRCODE_INVALID_ACL_BASE_CERTS = 38;

const int CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED = 39;

const int CSSM_ERRCODE_INVALID_SAMPLE_VALUE = 40;

const int CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED = 41;

const int CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE = 42;

const int CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED = 43;

const int CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK = 44;

const int CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED = 45;

const int CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG = 46;

const int CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND = 47;

const int CSSM_ERRCODE_INVALID_ACL_EDIT_MODE = 48;

const int CSSM_ERRCODE_ACL_CHANGE_FAILED = 49;

const int CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY = 50;

const int CSSM_ERRCODE_INVALID_NEW_ACL_OWNER = 51;

const int CSSM_ERRCODE_ACL_DELETE_FAILED = 52;

const int CSSM_ERRCODE_ACL_REPLACE_FAILED = 53;

const int CSSM_ERRCODE_ACL_ADD_FAILED = 54;

const int CSSM_ERRCODE_INVALID_CONTEXT_HANDLE = 64;

const int CSSM_ERRCODE_INCOMPATIBLE_VERSION = 65;

const int CSSM_ERRCODE_INVALID_CERTGROUP_POINTER = 66;

const int CSSM_ERRCODE_INVALID_CERT_POINTER = 67;

const int CSSM_ERRCODE_INVALID_CRL_POINTER = 68;

const int CSSM_ERRCODE_INVALID_FIELD_POINTER = 69;

const int CSSM_ERRCODE_INVALID_DATA = 70;

const int CSSM_ERRCODE_CRL_ALREADY_SIGNED = 71;

const int CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS = 72;

const int CSSM_ERRCODE_VERIFICATION_FAILURE = 73;

const int CSSM_ERRCODE_INVALID_DB_HANDLE = 74;

const int CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED = 75;

const int CSSM_ERRCODE_INVALID_DB_LIST = 76;

const int CSSM_ERRCODE_INVALID_DB_LIST_POINTER = 77;

const int CSSM_ERRCODE_UNKNOWN_FORMAT = 78;

const int CSSM_ERRCODE_UNKNOWN_TAG = 79;

const int CSSM_ERRCODE_INVALID_CSP_HANDLE = 80;

const int CSSM_ERRCODE_INVALID_DL_HANDLE = 81;

const int CSSM_ERRCODE_INVALID_CL_HANDLE = 82;

const int CSSM_ERRCODE_INVALID_TP_HANDLE = 83;

const int CSSM_ERRCODE_INVALID_KR_HANDLE = 84;

const int CSSM_ERRCODE_INVALID_AC_HANDLE = 85;

const int CSSM_ERRCODE_INVALID_PASSTHROUGH_ID = 86;

const int CSSM_ERRCODE_INVALID_NETWORK_ADDR = 87;

const int CSSM_ERRCODE_INVALID_CRYPTO_DATA = 88;

const int CSSMERR_CSSM_INTERNAL_ERROR = -2147418111;

const int CSSMERR_CSSM_MEMORY_ERROR = -2147418110;

const int CSSMERR_CSSM_MDS_ERROR = -2147418109;

const int CSSMERR_CSSM_INVALID_POINTER = -2147418108;

const int CSSMERR_CSSM_INVALID_INPUT_POINTER = -2147418107;

const int CSSMERR_CSSM_INVALID_OUTPUT_POINTER = -2147418106;

const int CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED = -2147418105;

const int CSSMERR_CSSM_SELF_CHECK_FAILED = -2147418104;

const int CSSMERR_CSSM_OS_ACCESS_DENIED = -2147418103;

const int CSSMERR_CSSM_FUNCTION_FAILED = -2147418102;

const int CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED = -2147418101;

const int CSSMERR_CSSM_INVALID_GUID = -2147418100;

const int CSSMERR_CSSM_INVALID_CONTEXT_HANDLE = -2147418048;

const int CSSMERR_CSSM_INCOMPATIBLE_VERSION = -2147418047;

const int CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED = -2147418037;

const int CSSM_CSSM_BASE_CSSM_ERROR = -2147417840;

const int CSSMERR_CSSM_SCOPE_NOT_SUPPORTED = -2147417839;

const int CSSMERR_CSSM_PVC_ALREADY_CONFIGURED = -2147417838;

const int CSSMERR_CSSM_INVALID_PVC = -2147417837;

const int CSSMERR_CSSM_EMM_LOAD_FAILED = -2147417836;

const int CSSMERR_CSSM_EMM_UNLOAD_FAILED = -2147417835;

const int CSSMERR_CSSM_ADDIN_LOAD_FAILED = -2147417834;

const int CSSMERR_CSSM_INVALID_KEY_HIERARCHY = -2147417833;

const int CSSMERR_CSSM_ADDIN_UNLOAD_FAILED = -2147417832;

const int CSSMERR_CSSM_LIB_REF_NOT_FOUND = -2147417831;

const int CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE = -2147417830;

const int CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED = -2147417829;

const int CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED = -2147417828;

const int CSSMERR_CSSM_INVALID_SERVICE_MASK = -2147417827;

const int CSSMERR_CSSM_MODULE_NOT_LOADED = -2147417826;

const int CSSMERR_CSSM_INVALID_SUBSERVICEID = -2147417825;

const int CSSMERR_CSSM_BUFFER_TOO_SMALL = -2147417824;

const int CSSMERR_CSSM_INVALID_ATTRIBUTE = -2147417823;

const int CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT = -2147417822;

const int CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL = -2147417821;

const int CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND = -2147417820;

const int CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND = -2147417819;

const int CSSMERR_CSP_INTERNAL_ERROR = -2147416063;

const int CSSMERR_CSP_MEMORY_ERROR = -2147416062;

const int CSSMERR_CSP_MDS_ERROR = -2147416061;

const int CSSMERR_CSP_INVALID_POINTER = -2147416060;

const int CSSMERR_CSP_INVALID_INPUT_POINTER = -2147416059;

const int CSSMERR_CSP_INVALID_OUTPUT_POINTER = -2147416058;

const int CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED = -2147416057;

const int CSSMERR_CSP_SELF_CHECK_FAILED = -2147416056;

const int CSSMERR_CSP_OS_ACCESS_DENIED = -2147416055;

const int CSSMERR_CSP_FUNCTION_FAILED = -2147416054;

const int CSSMERR_CSP_OPERATION_AUTH_DENIED = -2147416032;

const int CSSMERR_CSP_OBJECT_USE_AUTH_DENIED = -2147416031;

const int CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED = -2147416030;

const int CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED = -2147416029;

const int CSSMERR_CSP_OBJECT_ACL_REQUIRED = -2147416028;

const int CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS = -2147416027;

const int CSSMERR_CSP_INVALID_ACL_BASE_CERTS = -2147416026;

const int CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED = -2147416025;

const int CSSMERR_CSP_INVALID_SAMPLE_VALUE = -2147416024;

const int CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED = -2147416023;

const int CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE = -2147416022;

const int CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147416021;

const int CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK = -2147416020;

const int CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED = -2147416019;

const int CSSMERR_CSP_INVALID_ACL_ENTRY_TAG = -2147416018;

const int CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND = -2147416017;

const int CSSMERR_CSP_INVALID_ACL_EDIT_MODE = -2147416016;

const int CSSMERR_CSP_ACL_CHANGE_FAILED = -2147416015;

const int CSSMERR_CSP_INVALID_NEW_ACL_ENTRY = -2147416014;

const int CSSMERR_CSP_INVALID_NEW_ACL_OWNER = -2147416013;

const int CSSMERR_CSP_ACL_DELETE_FAILED = -2147416012;

const int CSSMERR_CSP_ACL_REPLACE_FAILED = -2147416011;

const int CSSMERR_CSP_ACL_ADD_FAILED = -2147416010;

const int CSSMERR_CSP_INVALID_CONTEXT_HANDLE = -2147416000;

const int CSSMERR_CSP_PRIVILEGE_NOT_GRANTED = -2147415989;

const int CSSMERR_CSP_INVALID_DATA = -2147415994;

const int CSSMERR_CSP_INVALID_PASSTHROUGH_ID = -2147415978;

const int CSSMERR_CSP_INVALID_CRYPTO_DATA = -2147415976;

const int CSSM_CSP_BASE_CSP_ERROR = -2147415808;

const int CSSMERR_CSP_INPUT_LENGTH_ERROR = -2147415807;

const int CSSMERR_CSP_OUTPUT_LENGTH_ERROR = -2147415806;

const int CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED = -2147415805;

const int CSSMERR_CSP_DEVICE_ERROR = -2147415804;

const int CSSMERR_CSP_DEVICE_MEMORY_ERROR = -2147415803;

const int CSSMERR_CSP_ATTACH_HANDLE_BUSY = -2147415802;

const int CSSMERR_CSP_NOT_LOGGED_IN = -2147415801;

const int CSSMERR_CSP_INVALID_KEY = -2147415792;

const int CSSMERR_CSP_INVALID_KEY_REFERENCE = -2147415791;

const int CSSMERR_CSP_INVALID_KEY_CLASS = -2147415790;

const int CSSMERR_CSP_ALGID_MISMATCH = -2147415789;

const int CSSMERR_CSP_KEY_USAGE_INCORRECT = -2147415788;

const int CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT = -2147415787;

const int CSSMERR_CSP_KEY_HEADER_INCONSISTENT = -2147415786;

const int CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT = -2147415785;

const int CSSMERR_CSP_UNSUPPORTED_KEY_SIZE = -2147415784;

const int CSSMERR_CSP_INVALID_KEY_POINTER = -2147415783;

const int CSSMERR_CSP_INVALID_KEYUSAGE_MASK = -2147415782;

const int CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK = -2147415781;

const int CSSMERR_CSP_INVALID_KEYATTR_MASK = -2147415780;

const int CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK = -2147415779;

const int CSSMERR_CSP_INVALID_KEY_LABEL = -2147415778;

const int CSSMERR_CSP_UNSUPPORTED_KEY_LABEL = -2147415777;

const int CSSMERR_CSP_INVALID_KEY_FORMAT = -2147415776;

const int CSSMERR_CSP_INVALID_DATA_COUNT = -2147415768;

const int CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED = -2147415767;

const int CSSMERR_CSP_INVALID_INPUT_VECTOR = -2147415766;

const int CSSMERR_CSP_INVALID_OUTPUT_VECTOR = -2147415765;

const int CSSMERR_CSP_INVALID_CONTEXT = -2147415760;

const int CSSMERR_CSP_INVALID_ALGORITHM = -2147415759;

const int CSSMERR_CSP_INVALID_ATTR_KEY = -2147415754;

const int CSSMERR_CSP_MISSING_ATTR_KEY = -2147415753;

const int CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR = -2147415752;

const int CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR = -2147415751;

const int CSSMERR_CSP_INVALID_ATTR_SALT = -2147415750;

const int CSSMERR_CSP_MISSING_ATTR_SALT = -2147415749;

const int CSSMERR_CSP_INVALID_ATTR_PADDING = -2147415748;

const int CSSMERR_CSP_MISSING_ATTR_PADDING = -2147415747;

const int CSSMERR_CSP_INVALID_ATTR_RANDOM = -2147415746;

const int CSSMERR_CSP_MISSING_ATTR_RANDOM = -2147415745;

const int CSSMERR_CSP_INVALID_ATTR_SEED = -2147415744;

const int CSSMERR_CSP_MISSING_ATTR_SEED = -2147415743;

const int CSSMERR_CSP_INVALID_ATTR_PASSPHRASE = -2147415742;

const int CSSMERR_CSP_MISSING_ATTR_PASSPHRASE = -2147415741;

const int CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH = -2147415740;

const int CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH = -2147415739;

const int CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE = -2147415738;

const int CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE = -2147415737;

const int CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE = -2147415708;

const int CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE = -2147415707;

const int CSSMERR_CSP_INVALID_ATTR_ROUNDS = -2147415706;

const int CSSMERR_CSP_MISSING_ATTR_ROUNDS = -2147415705;

const int CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS = -2147415704;

const int CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS = -2147415703;

const int CSSMERR_CSP_INVALID_ATTR_LABEL = -2147415702;

const int CSSMERR_CSP_MISSING_ATTR_LABEL = -2147415701;

const int CSSMERR_CSP_INVALID_ATTR_KEY_TYPE = -2147415700;

const int CSSMERR_CSP_MISSING_ATTR_KEY_TYPE = -2147415699;

const int CSSMERR_CSP_INVALID_ATTR_MODE = -2147415698;

const int CSSMERR_CSP_MISSING_ATTR_MODE = -2147415697;

const int CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS = -2147415696;

const int CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS = -2147415695;

const int CSSMERR_CSP_INVALID_ATTR_START_DATE = -2147415694;

const int CSSMERR_CSP_MISSING_ATTR_START_DATE = -2147415693;

const int CSSMERR_CSP_INVALID_ATTR_END_DATE = -2147415692;

const int CSSMERR_CSP_MISSING_ATTR_END_DATE = -2147415691;

const int CSSMERR_CSP_INVALID_ATTR_VERSION = -2147415690;

const int CSSMERR_CSP_MISSING_ATTR_VERSION = -2147415689;

const int CSSMERR_CSP_INVALID_ATTR_PRIME = -2147415688;

const int CSSMERR_CSP_MISSING_ATTR_PRIME = -2147415687;

const int CSSMERR_CSP_INVALID_ATTR_BASE = -2147415686;

const int CSSMERR_CSP_MISSING_ATTR_BASE = -2147415685;

const int CSSMERR_CSP_INVALID_ATTR_SUBPRIME = -2147415684;

const int CSSMERR_CSP_MISSING_ATTR_SUBPRIME = -2147415683;

const int CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT = -2147415682;

const int CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT = -2147415681;

const int CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE = -2147415680;

const int CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE = -2147415679;

const int CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS = -2147415678;

const int CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS = -2147415677;

const int CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT = -2147415676;

const int CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT = -2147415675;

const int CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT = -2147415674;

const int CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT = -2147415673;

const int CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT = -2147415672;

const int CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT = -2147415671;

const int CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT = -2147415670;

const int CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT = -2147415669;

const int CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS = -2147415736;

const int CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED = -2147415735;

const int CSSMERR_CSP_VERIFY_FAILED = -2147415734;

const int CSSMERR_CSP_INVALID_SIGNATURE = -2147415733;

const int CSSMERR_CSP_QUERY_SIZE_UNKNOWN = -2147415732;

const int CSSMERR_CSP_BLOCK_SIZE_MISMATCH = -2147415731;

const int CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND = -2147415730;

const int CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT = -2147415729;

const int CSSMERR_CSP_DEVICE_VERIFY_FAILED = -2147415728;

const int CSSMERR_CSP_INVALID_LOGIN_NAME = -2147415727;

const int CSSMERR_CSP_ALREADY_LOGGED_IN = -2147415726;

const int CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS = -2147415725;

const int CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS = -2147415724;

const int CSSMERR_CSP_INVALID_DIGEST_ALGORITHM = -2147415723;

const int CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED = -2147415722;

const int CSSMERR_TP_INTERNAL_ERROR = -2147409919;

const int CSSMERR_TP_MEMORY_ERROR = -2147409918;

const int CSSMERR_TP_MDS_ERROR = -2147409917;

const int CSSMERR_TP_INVALID_POINTER = -2147409916;

const int CSSMERR_TP_INVALID_INPUT_POINTER = -2147409915;

const int CSSMERR_TP_INVALID_OUTPUT_POINTER = -2147409914;

const int CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED = -2147409913;

const int CSSMERR_TP_SELF_CHECK_FAILED = -2147409912;

const int CSSMERR_TP_OS_ACCESS_DENIED = -2147409911;

const int CSSMERR_TP_FUNCTION_FAILED = -2147409910;

const int CSSMERR_TP_INVALID_CONTEXT_HANDLE = -2147409856;

const int CSSMERR_TP_INVALID_DATA = -2147409850;

const int CSSMERR_TP_INVALID_DB_LIST = -2147409844;

const int CSSMERR_TP_INVALID_CERTGROUP_POINTER = -2147409854;

const int CSSMERR_TP_INVALID_CERT_POINTER = -2147409853;

const int CSSMERR_TP_INVALID_CRL_POINTER = -2147409852;

const int CSSMERR_TP_INVALID_FIELD_POINTER = -2147409851;

const int CSSMERR_TP_INVALID_NETWORK_ADDR = -2147409833;

const int CSSMERR_TP_CRL_ALREADY_SIGNED = -2147409849;

const int CSSMERR_TP_INVALID_NUMBER_OF_FIELDS = -2147409848;

const int CSSMERR_TP_VERIFICATION_FAILURE = -2147409847;

const int CSSMERR_TP_INVALID_DB_HANDLE = -2147409846;

const int CSSMERR_TP_UNKNOWN_FORMAT = -2147409842;

const int CSSMERR_TP_UNKNOWN_TAG = -2147409841;

const int CSSMERR_TP_INVALID_PASSTHROUGH_ID = -2147409834;

const int CSSMERR_TP_INVALID_CSP_HANDLE = -2147409840;

const int CSSMERR_TP_INVALID_DL_HANDLE = -2147409839;

const int CSSMERR_TP_INVALID_CL_HANDLE = -2147409838;

const int CSSMERR_TP_INVALID_DB_LIST_POINTER = -2147409843;

const int CSSM_TP_BASE_TP_ERROR = -2147409664;

const int CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER = -2147409663;

const int CSSMERR_TP_INVALID_IDENTIFIER_POINTER = -2147409662;

const int CSSMERR_TP_INVALID_KEYCACHE_HANDLE = -2147409661;

const int CSSMERR_TP_INVALID_CERTGROUP = -2147409660;

const int CSSMERR_TP_INVALID_CRLGROUP = -2147409659;

const int CSSMERR_TP_INVALID_CRLGROUP_POINTER = -2147409658;

const int CSSMERR_TP_AUTHENTICATION_FAILED = -2147409657;

const int CSSMERR_TP_CERTGROUP_INCOMPLETE = -2147409656;

const int CSSMERR_TP_CERTIFICATE_CANT_OPERATE = -2147409655;

const int CSSMERR_TP_CERT_EXPIRED = -2147409654;

const int CSSMERR_TP_CERT_NOT_VALID_YET = -2147409653;

const int CSSMERR_TP_CERT_REVOKED = -2147409652;

const int CSSMERR_TP_CERT_SUSPENDED = -2147409651;

const int CSSMERR_TP_INSUFFICIENT_CREDENTIALS = -2147409650;

const int CSSMERR_TP_INVALID_ACTION = -2147409649;

const int CSSMERR_TP_INVALID_ACTION_DATA = -2147409648;

const int CSSMERR_TP_INVALID_ANCHOR_CERT = -2147409646;

const int CSSMERR_TP_INVALID_AUTHORITY = -2147409645;

const int CSSMERR_TP_VERIFY_ACTION_FAILED = -2147409644;

const int CSSMERR_TP_INVALID_CERTIFICATE = -2147409643;

const int CSSMERR_TP_INVALID_CERT_AUTHORITY = -2147409642;

const int CSSMERR_TP_INVALID_CRL_AUTHORITY = -2147409641;

const int CSSMERR_TP_INVALID_CRL_ENCODING = -2147409640;

const int CSSMERR_TP_INVALID_CRL_TYPE = -2147409639;

const int CSSMERR_TP_INVALID_CRL = -2147409638;

const int CSSMERR_TP_INVALID_FORM_TYPE = -2147409637;

const int CSSMERR_TP_INVALID_ID = -2147409636;

const int CSSMERR_TP_INVALID_IDENTIFIER = -2147409635;

const int CSSMERR_TP_INVALID_INDEX = -2147409634;

const int CSSMERR_TP_INVALID_NAME = -2147409633;

const int CSSMERR_TP_INVALID_POLICY_IDENTIFIERS = -2147409632;

const int CSSMERR_TP_INVALID_TIMESTRING = -2147409631;

const int CSSMERR_TP_INVALID_REASON = -2147409630;

const int CSSMERR_TP_INVALID_REQUEST_INPUTS = -2147409629;

const int CSSMERR_TP_INVALID_RESPONSE_VECTOR = -2147409628;

const int CSSMERR_TP_INVALID_SIGNATURE = -2147409627;

const int CSSMERR_TP_INVALID_STOP_ON_POLICY = -2147409626;

const int CSSMERR_TP_INVALID_CALLBACK = -2147409625;

const int CSSMERR_TP_INVALID_TUPLE = -2147409624;

const int CSSMERR_TP_NOT_SIGNER = -2147409623;

const int CSSMERR_TP_NOT_TRUSTED = -2147409622;

const int CSSMERR_TP_NO_DEFAULT_AUTHORITY = -2147409621;

const int CSSMERR_TP_REJECTED_FORM = -2147409620;

const int CSSMERR_TP_REQUEST_LOST = -2147409619;

const int CSSMERR_TP_REQUEST_REJECTED = -2147409618;

const int CSSMERR_TP_UNSUPPORTED_ADDR_TYPE = -2147409617;

const int CSSMERR_TP_UNSUPPORTED_SERVICE = -2147409616;

const int CSSMERR_TP_INVALID_TUPLEGROUP_POINTER = -2147409615;

const int CSSMERR_TP_INVALID_TUPLEGROUP = -2147409614;

const int CSSMERR_AC_INTERNAL_ERROR = -2147405823;

const int CSSMERR_AC_MEMORY_ERROR = -2147405822;

const int CSSMERR_AC_MDS_ERROR = -2147405821;

const int CSSMERR_AC_INVALID_POINTER = -2147405820;

const int CSSMERR_AC_INVALID_INPUT_POINTER = -2147405819;

const int CSSMERR_AC_INVALID_OUTPUT_POINTER = -2147405818;

const int CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED = -2147405817;

const int CSSMERR_AC_SELF_CHECK_FAILED = -2147405816;

const int CSSMERR_AC_OS_ACCESS_DENIED = -2147405815;

const int CSSMERR_AC_FUNCTION_FAILED = -2147405814;

const int CSSMERR_AC_INVALID_CONTEXT_HANDLE = -2147405760;

const int CSSMERR_AC_INVALID_DATA = -2147405754;

const int CSSMERR_AC_INVALID_DB_LIST = -2147405748;

const int CSSMERR_AC_INVALID_PASSTHROUGH_ID = -2147405738;

const int CSSMERR_AC_INVALID_DL_HANDLE = -2147405743;

const int CSSMERR_AC_INVALID_CL_HANDLE = -2147405742;

const int CSSMERR_AC_INVALID_TP_HANDLE = -2147405741;

const int CSSMERR_AC_INVALID_DB_HANDLE = -2147405750;

const int CSSMERR_AC_INVALID_DB_LIST_POINTER = -2147405747;

const int CSSM_AC_BASE_AC_ERROR = -2147405568;

const int CSSMERR_AC_INVALID_BASE_ACLS = -2147405567;

const int CSSMERR_AC_INVALID_TUPLE_CREDENTIALS = -2147405566;

const int CSSMERR_AC_INVALID_ENCODING = -2147405565;

const int CSSMERR_AC_INVALID_VALIDITY_PERIOD = -2147405564;

const int CSSMERR_AC_INVALID_REQUESTOR = -2147405563;

const int CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR = -2147405562;

const int CSSMERR_CL_INTERNAL_ERROR = -2147411967;

const int CSSMERR_CL_MEMORY_ERROR = -2147411966;

const int CSSMERR_CL_MDS_ERROR = -2147411965;

const int CSSMERR_CL_INVALID_POINTER = -2147411964;

const int CSSMERR_CL_INVALID_INPUT_POINTER = -2147411963;

const int CSSMERR_CL_INVALID_OUTPUT_POINTER = -2147411962;

const int CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED = -2147411961;

const int CSSMERR_CL_SELF_CHECK_FAILED = -2147411960;

const int CSSMERR_CL_OS_ACCESS_DENIED = -2147411959;

const int CSSMERR_CL_FUNCTION_FAILED = -2147411958;

const int CSSMERR_CL_INVALID_CONTEXT_HANDLE = -2147411904;

const int CSSMERR_CL_INVALID_CERTGROUP_POINTER = -2147411902;

const int CSSMERR_CL_INVALID_CERT_POINTER = -2147411901;

const int CSSMERR_CL_INVALID_CRL_POINTER = -2147411900;

const int CSSMERR_CL_INVALID_FIELD_POINTER = -2147411899;

const int CSSMERR_CL_INVALID_DATA = -2147411898;

const int CSSMERR_CL_CRL_ALREADY_SIGNED = -2147411897;

const int CSSMERR_CL_INVALID_NUMBER_OF_FIELDS = -2147411896;

const int CSSMERR_CL_VERIFICATION_FAILURE = -2147411895;

const int CSSMERR_CL_UNKNOWN_FORMAT = -2147411890;

const int CSSMERR_CL_UNKNOWN_TAG = -2147411889;

const int CSSMERR_CL_INVALID_PASSTHROUGH_ID = -2147411882;

const int CSSM_CL_BASE_CL_ERROR = -2147411712;

const int CSSMERR_CL_INVALID_BUNDLE_POINTER = -2147411711;

const int CSSMERR_CL_INVALID_CACHE_HANDLE = -2147411710;

const int CSSMERR_CL_INVALID_RESULTS_HANDLE = -2147411709;

const int CSSMERR_CL_INVALID_BUNDLE_INFO = -2147411708;

const int CSSMERR_CL_INVALID_CRL_INDEX = -2147411707;

const int CSSMERR_CL_INVALID_SCOPE = -2147411706;

const int CSSMERR_CL_NO_FIELD_VALUES = -2147411705;

const int CSSMERR_CL_SCOPE_NOT_SUPPORTED = -2147411704;

const int CSSMERR_DL_INTERNAL_ERROR = -2147414015;

const int CSSMERR_DL_MEMORY_ERROR = -2147414014;

const int CSSMERR_DL_MDS_ERROR = -2147414013;

const int CSSMERR_DL_INVALID_POINTER = -2147414012;

const int CSSMERR_DL_INVALID_INPUT_POINTER = -2147414011;

const int CSSMERR_DL_INVALID_OUTPUT_POINTER = -2147414010;

const int CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED = -2147414009;

const int CSSMERR_DL_SELF_CHECK_FAILED = -2147414008;

const int CSSMERR_DL_OS_ACCESS_DENIED = -2147414007;

const int CSSMERR_DL_FUNCTION_FAILED = -2147414006;

const int CSSMERR_DL_INVALID_CSP_HANDLE = -2147413936;

const int CSSMERR_DL_INVALID_DL_HANDLE = -2147413935;

const int CSSMERR_DL_INVALID_CL_HANDLE = -2147413934;

const int CSSMERR_DL_INVALID_DB_LIST_POINTER = -2147413939;

const int CSSMERR_DL_OPERATION_AUTH_DENIED = -2147413984;

const int CSSMERR_DL_OBJECT_USE_AUTH_DENIED = -2147413983;

const int CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED = -2147413982;

const int CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED = -2147413981;

const int CSSMERR_DL_OBJECT_ACL_REQUIRED = -2147413980;

const int CSSMERR_DL_INVALID_ACCESS_CREDENTIALS = -2147413979;

const int CSSMERR_DL_INVALID_ACL_BASE_CERTS = -2147413978;

const int CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED = -2147413977;

const int CSSMERR_DL_INVALID_SAMPLE_VALUE = -2147413976;

const int CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED = -2147413975;

const int CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE = -2147413974;

const int CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED = -2147413973;

const int CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK = -2147413972;

const int CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED = -2147413971;

const int CSSMERR_DL_INVALID_ACL_ENTRY_TAG = -2147413970;

const int CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND = -2147413969;

const int CSSMERR_DL_INVALID_ACL_EDIT_MODE = -2147413968;

const int CSSMERR_DL_ACL_CHANGE_FAILED = -2147413967;

const int CSSMERR_DL_INVALID_NEW_ACL_ENTRY = -2147413966;

const int CSSMERR_DL_INVALID_NEW_ACL_OWNER = -2147413965;

const int CSSMERR_DL_ACL_DELETE_FAILED = -2147413964;

const int CSSMERR_DL_ACL_REPLACE_FAILED = -2147413963;

const int CSSMERR_DL_ACL_ADD_FAILED = -2147413962;

const int CSSMERR_DL_INVALID_DB_HANDLE = -2147413942;

const int CSSMERR_DL_INVALID_PASSTHROUGH_ID = -2147413930;

const int CSSMERR_DL_INVALID_NETWORK_ADDR = -2147413929;

const int CSSM_DL_BASE_DL_ERROR = -2147413760;

const int CSSMERR_DL_DATABASE_CORRUPT = -2147413759;

const int CSSMERR_DL_INVALID_RECORD_INDEX = -2147413752;

const int CSSMERR_DL_INVALID_RECORDTYPE = -2147413751;

const int CSSMERR_DL_INVALID_FIELD_NAME = -2147413750;

const int CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT = -2147413749;

const int CSSMERR_DL_UNSUPPORTED_INDEX_INFO = -2147413748;

const int CSSMERR_DL_UNSUPPORTED_LOCALITY = -2147413747;

const int CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES = -2147413746;

const int CSSMERR_DL_UNSUPPORTED_NUM_INDEXES = -2147413745;

const int CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES = -2147413744;

const int CSSMERR_DL_UNSUPPORTED_RECORDTYPE = -2147413743;

const int CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE = -2147413742;

const int CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT = -2147413741;

const int CSSMERR_DL_INVALID_PARSING_MODULE = -2147413740;

const int CSSMERR_DL_INVALID_DB_NAME = -2147413738;

const int CSSMERR_DL_DATASTORE_DOESNOT_EXIST = -2147413737;

const int CSSMERR_DL_DATASTORE_ALREADY_EXISTS = -2147413736;

const int CSSMERR_DL_DB_LOCKED = -2147413735;

const int CSSMERR_DL_DATASTORE_IS_OPEN = -2147413734;

const int CSSMERR_DL_RECORD_NOT_FOUND = -2147413733;

const int CSSMERR_DL_MISSING_VALUE = -2147413732;

const int CSSMERR_DL_UNSUPPORTED_QUERY = -2147413731;

const int CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS = -2147413730;

const int CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS = -2147413729;

const int CSSMERR_DL_UNSUPPORTED_OPERATOR = -2147413727;

const int CSSMERR_DL_INVALID_RESULTS_HANDLE = -2147413726;

const int CSSMERR_DL_INVALID_DB_LOCATION = -2147413725;

const int CSSMERR_DL_INVALID_ACCESS_REQUEST = -2147413724;

const int CSSMERR_DL_INVALID_INDEX_INFO = -2147413723;

const int CSSMERR_DL_INVALID_SELECTION_TAG = -2147413722;

const int CSSMERR_DL_INVALID_NEW_OWNER = -2147413721;

const int CSSMERR_DL_INVALID_RECORD_UID = -2147413720;

const int CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA = -2147413719;

const int CSSMERR_DL_INVALID_MODIFY_MODE = -2147413718;

const int CSSMERR_DL_INVALID_OPEN_PARAMETERS = -2147413717;

const int CSSMERR_DL_RECORD_MODIFIED = -2147413716;

const int CSSMERR_DL_ENDOFDATA = -2147413715;

const int CSSMERR_DL_INVALID_QUERY = -2147413714;

const int CSSMERR_DL_INVALID_VALUE = -2147413713;

const int CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED = -2147413712;

const int CSSMERR_DL_STALE_UNIQUE_RECORD = -2147413711;

const int CSSM_WORDID_KEYCHAIN_PROMPT = 65536;

const int CSSM_WORDID_KEYCHAIN_LOCK = 65537;

const int CSSM_WORDID_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_WORDID_PROCESS = 65539;

const int CSSM_WORDID__RESERVED_1 = 65540;

const int CSSM_WORDID_SYMMETRIC_KEY = 65541;

const int CSSM_WORDID_SYSTEM = 65542;

const int CSSM_WORDID_KEY = 65543;

const int CSSM_WORDID_PIN = 65544;

const int CSSM_WORDID_PREAUTH = 65545;

const int CSSM_WORDID_PREAUTH_SOURCE = 65546;

const int CSSM_WORDID_ASYMMETRIC_KEY = 65547;

const int CSSM_WORDID_PARTITION = 65548;

const int CSSM_WORDID_KEYBAG_KEY = 65549;

const int CSSM_WORDID__FIRST_UNUSED = 65550;

const int CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_ACL_SUBJECT_TYPE_PROCESS = 65539;

const int CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE = 116;

const int CSSM_ACL_SUBJECT_TYPE_COMMENT = 12;

const int CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH = 65545;

const int CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE = 65546;

const int CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_ACL_SUBJECT_TYPE_PARTITION = 65548;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT = 65536;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK = 65537;

const int CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK = 65538;

const int CSSM_SAMPLE_TYPE_PROCESS = 65539;

const int CSSM_SAMPLE_TYPE_COMMENT = 12;

const int CSSM_SAMPLE_TYPE_RETRY_ID = 85;

const int CSSM_SAMPLE_TYPE_SYMMETRIC_KEY = 65541;

const int CSSM_SAMPLE_TYPE_PREAUTH = 65545;

const int CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY = 65547;

const int CSSM_SAMPLE_TYPE_KEYBAG_KEY = 65549;

const int CSSM_ACL_AUTHORIZATION_CHANGE_ACL = 65536;

const int CSSM_ACL_AUTHORIZATION_CHANGE_OWNER = 65537;

const int CSSM_ACL_AUTHORIZATION_PARTITION_ID = 65538;

const int CSSM_ACL_AUTHORIZATION_INTEGRITY = 65539;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_BASE = 16842752;

const int CSSM_ACL_AUTHORIZATION_PREAUTH_END = 16908288;

const int CSSM_ACL_CODE_SIGNATURE_INVALID = 0;

const int CSSM_ACL_CODE_SIGNATURE_OSX = 1;

const int CSSM_ACL_MATCH_UID = 1;

const int CSSM_ACL_MATCH_GID = 2;

const int CSSM_ACL_MATCH_HONOR_ROOT = 256;

const int CSSM_ACL_MATCH_BITS = 3;

const int CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION = 257;

const int CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE = 1;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED = 16;

const int CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT = 32;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID = 64;

const int CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT = 128;

const int CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK = 255;

const int CSSM_ACL_PREAUTH_TRACKING_BLOCKED = 0;

const int CSSM_ACL_PREAUTH_TRACKING_UNKNOWN = 1073741824;

const int CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED = -2147483648;

const int CSSM_DB_ACCESS_RESET = 65536;

const int CSSM_ALGID_APPLE_YARROW = -2147483648;

const int CSSM_ALGID_AES = -2147483647;

const int CSSM_ALGID_FEE = -2147483646;

const int CSSM_ALGID_FEE_MD5 = -2147483645;

const int CSSM_ALGID_FEE_SHA1 = -2147483644;

const int CSSM_ALGID_FEED = -2147483643;

const int CSSM_ALGID_FEEDEXP = -2147483642;

const int CSSM_ALGID_ASC = -2147483641;

const int CSSM_ALGID_SHA1HMAC_LEGACY = -2147483640;

const int CSSM_ALGID_KEYCHAIN_KEY = -2147483639;

const int CSSM_ALGID_PKCS12_PBE_ENCR = -2147483638;

const int CSSM_ALGID_PKCS12_PBE_MAC = -2147483637;

const int CSSM_ALGID_SECURE_PASSPHRASE = -2147483636;

const int CSSM_ALGID_PBE_OPENSSL_MD5 = -2147483635;

const int CSSM_ALGID_SHA256 = -2147483634;

const int CSSM_ALGID_SHA384 = -2147483633;

const int CSSM_ALGID_SHA512 = -2147483632;

const int CSSM_ALGID_ENTROPY_DEFAULT = -2147483631;

const int CSSM_ALGID_SHA224 = -2147483630;

const int CSSM_ALGID_SHA224WithRSA = -2147483629;

const int CSSM_ALGID_SHA256WithRSA = -2147483628;

const int CSSM_ALGID_SHA384WithRSA = -2147483627;

const int CSSM_ALGID_SHA512WithRSA = -2147483626;

const int CSSM_ALGID_OPENSSH1 = -2147483625;

const int CSSM_ALGID_SHA224WithECDSA = -2147483624;

const int CSSM_ALGID_SHA256WithECDSA = -2147483623;

const int CSSM_ALGID_SHA384WithECDSA = -2147483622;

const int CSSM_ALGID_SHA512WithECDSA = -2147483621;

const int CSSM_ALGID_ECDSA_SPECIFIED = -2147483620;

const int CSSM_ALGID_ECDH_X963_KDF = -2147483619;

const int CSSM_ALGID__FIRST_UNUSED = -2147483618;

const int CSSM_PADDING_APPLE_SSLv2 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_X509 = -2147483648;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH = -2147483647;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSL = -2147483646;

const int CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2 = -2147483645;

const int CSSM_CUSTOM_COMMON_ERROR_EXTENT = 224;

const int CSSM_ERRCODE_NO_USER_INTERACTION = 224;

const int CSSM_ERRCODE_USER_CANCELED = 225;

const int CSSM_ERRCODE_SERVICE_NOT_AVAILABLE = 226;

const int CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION = 227;

const int CSSM_ERRCODE_DEVICE_RESET = 228;

const int CSSM_ERRCODE_DEVICE_FAILED = 229;

const int CSSM_ERRCODE_IN_DARK_WAKE = 230;

const int CSSMERR_CSSM_NO_USER_INTERACTION = -2147417888;

const int CSSMERR_AC_NO_USER_INTERACTION = -2147405600;

const int CSSMERR_CSP_NO_USER_INTERACTION = -2147415840;

const int CSSMERR_CL_NO_USER_INTERACTION = -2147411744;

const int CSSMERR_DL_NO_USER_INTERACTION = -2147413792;

const int CSSMERR_TP_NO_USER_INTERACTION = -2147409696;

const int CSSMERR_CSSM_USER_CANCELED = -2147417887;

const int CSSMERR_AC_USER_CANCELED = -2147405599;

const int CSSMERR_CSP_USER_CANCELED = -2147415839;

const int CSSMERR_CL_USER_CANCELED = -2147411743;

const int CSSMERR_DL_USER_CANCELED = -2147413791;

const int CSSMERR_TP_USER_CANCELED = -2147409695;

const int CSSMERR_CSSM_SERVICE_NOT_AVAILABLE = -2147417886;

const int CSSMERR_AC_SERVICE_NOT_AVAILABLE = -2147405598;

const int CSSMERR_CSP_SERVICE_NOT_AVAILABLE = -2147415838;

const int CSSMERR_CL_SERVICE_NOT_AVAILABLE = -2147411742;

const int CSSMERR_DL_SERVICE_NOT_AVAILABLE = -2147413790;

const int CSSMERR_TP_SERVICE_NOT_AVAILABLE = -2147409694;

const int CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147417885;

const int CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147405597;

const int CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147415837;

const int CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147411741;

const int CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147413789;

const int CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION = -2147409693;

const int CSSMERR_CSSM_DEVICE_RESET = -2147417884;

const int CSSMERR_AC_DEVICE_RESET = -2147405596;

const int CSSMERR_CSP_DEVICE_RESET = -2147415836;

const int CSSMERR_CL_DEVICE_RESET = -2147411740;

const int CSSMERR_DL_DEVICE_RESET = -2147413788;

const int CSSMERR_TP_DEVICE_RESET = -2147409692;

const int CSSMERR_CSSM_DEVICE_FAILED = -2147417883;

const int CSSMERR_AC_DEVICE_FAILED = -2147405595;

const int CSSMERR_CSP_DEVICE_FAILED = -2147415835;

const int CSSMERR_CL_DEVICE_FAILED = -2147411739;

const int CSSMERR_DL_DEVICE_FAILED = -2147413787;

const int CSSMERR_TP_DEVICE_FAILED = -2147409691;

const int CSSMERR_CSSM_IN_DARK_WAKE = -2147417882;

const int CSSMERR_AC_IN_DARK_WAKE = -2147405594;

const int CSSMERR_CSP_IN_DARK_WAKE = -2147415834;

const int CSSMERR_CL_IN_DARK_WAKE = -2147411738;

const int CSSMERR_DL_IN_DARK_WAKE = -2147413786;

const int CSSMERR_TP_IN_DARK_WAKE = -2147409690;

const int CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT = -2147415040;

const int CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE = -2147415039;

const int CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH = -2147415038;

const int CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE = -2147415037;

const int CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE = -2147415036;

const int CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR = -2147415035;

const int CSSMERR_CSP_APPLE_SSLv2_ROLLBACK = -2147415034;

const int CSSM_DL_DB_RECORD_GENERIC_PASSWORD = -2147483648;

const int CSSM_DL_DB_RECORD_INTERNET_PASSWORD = -2147483647;

const int CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD = -2147483646;

const int CSSM_DL_DB_RECORD_X509_CERTIFICATE = -2147479552;

const int CSSM_DL_DB_RECORD_USER_TRUST = -2147479551;

const int CSSM_DL_DB_RECORD_X509_CRL = -2147479550;

const int CSSM_DL_DB_RECORD_UNLOCK_REFERRAL = -2147479549;

const int CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE = -2147479548;

const int CSSM_DL_DB_RECORD_METADATA = -2147450880;

const int CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT = 0;

const int CSSM_APPLEFILEDL_COMMIT = 1;

const int CSSM_APPLEFILEDL_ROLLBACK = 2;

const int CSSM_APPLEFILEDL_TAKE_FILE_LOCK = 3;

const int CSSM_APPLEFILEDL_MAKE_BACKUP = 4;

const int CSSM_APPLEFILEDL_MAKE_COPY = 5;

const int CSSM_APPLEFILEDL_DELETE_FILE = 6;

const int CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT = 1;

const int CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE = 2;

const int CSSM_APPLE_UNLOCK_TYPE_KEYBAG = 3;

const int CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS = -2147412992;

const int CSSMERR_APPLEDL_DISK_FULL = -2147412991;

const int CSSMERR_APPLEDL_QUOTA_EXCEEDED = -2147412990;

const int CSSMERR_APPLEDL_FILE_TOO_BIG = -2147412989;

const int CSSMERR_APPLEDL_INVALID_DATABASE_BLOB = -2147412988;

const int CSSMERR_APPLEDL_INVALID_KEY_BLOB = -2147412987;

const int CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB = -2147412986;

const int CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB = -2147412985;

const int CSSMERR_APPLETP_HOSTNAME_MISMATCH = -2147408896;

const int CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN = -2147408895;

const int CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS = -2147408894;

const int CSSMERR_APPLETP_INVALID_CA = -2147408893;

const int CSSMERR_APPLETP_INVALID_AUTHORITY_ID = -2147408892;

const int CSSMERR_APPLETP_INVALID_SUBJECT_ID = -2147408891;

const int CSSMERR_APPLETP_INVALID_KEY_USAGE = -2147408890;

const int CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE = -2147408889;

const int CSSMERR_APPLETP_INVALID_ID_LINKAGE = -2147408888;

const int CSSMERR_APPLETP_PATH_LEN_CONSTRAINT = -2147408887;

const int CSSMERR_APPLETP_INVALID_ROOT = -2147408886;

const int CSSMERR_APPLETP_CRL_EXPIRED = -2147408885;

const int CSSMERR_APPLETP_CRL_NOT_VALID_YET = -2147408884;

const int CSSMERR_APPLETP_CRL_NOT_FOUND = -2147408883;

const int CSSMERR_APPLETP_CRL_SERVER_DOWN = -2147408882;

const int CSSMERR_APPLETP_CRL_BAD_URI = -2147408881;

const int CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN = -2147408880;

const int CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN = -2147408879;

const int CSSMERR_APPLETP_CRL_NOT_TRUSTED = -2147408878;

const int CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT = -2147408877;

const int CSSMERR_APPLETP_CRL_POLICY_FAIL = -2147408876;

const int CSSMERR_APPLETP_IDP_FAIL = -2147408875;

const int CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER = -2147408874;

const int CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER = -2147408873;

const int CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND = -2147408872;

const int CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE = -2147408871;

const int CSSMERR_APPLETP_SMIME_BAD_KEY_USE = -2147408870;

const int CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL = -2147408869;

const int CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS = -2147408868;

const int CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT = -2147408867;

const int CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE = -2147408866;

const int CSSMERR_APPLETP_OCSP_BAD_RESPONSE = -2147408865;

const int CSSMERR_APPLETP_OCSP_BAD_REQUEST = -2147408864;

const int CSSMERR_APPLETP_OCSP_UNAVAILABLE = -2147408863;

const int CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED = -2147408862;

const int CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK = -2147408861;

const int CSSMERR_APPLETP_NETWORK_FAILURE = -2147408860;

const int CSSMERR_APPLETP_OCSP_NOT_TRUSTED = -2147408859;

const int CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT = -2147408858;

const int CSSMERR_APPLETP_OCSP_SIG_ERROR = -2147408857;

const int CSSMERR_APPLETP_OCSP_NO_SIGNER = -2147408856;

const int CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ = -2147408855;

const int CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR = -2147408854;

const int CSSMERR_APPLETP_OCSP_RESP_TRY_LATER = -2147408853;

const int CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED = -2147408852;

const int CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED = -2147408851;

const int CSSMERR_APPLETP_OCSP_NONCE_MISMATCH = -2147408850;

const int CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH = -2147408849;

const int CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS = -2147408848;

const int CSSMERR_APPLETP_CS_BAD_PATH_LENGTH = -2147408847;

const int CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE = -2147408846;

const int CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT = -2147408845;

const int CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH = -2147408844;

const int CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE = -2147408843;

const int CSSMERR_APPLETP_TRUST_SETTING_DENY = -2147408842;

const int CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT = -2147408841;

const int CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT = -2147408840;

const int CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION = -2147408839;

const int CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL = -2147408838;

const int CSSMERR_APPLETP_IDENTIFIER_MISSING = -2147408837;

const int CSSMERR_APPLETP_CA_PIN_MISMATCH = -2147408836;

const int CSSMERR_APPLETP_LEAF_PIN_MISMATCH = -2147408835;

const int CSSMERR_APPLE_DOTMAC_REQ_QUEUED = -2147408796;

const int CSSMERR_APPLE_DOTMAC_REQ_REDIRECT = -2147408795;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR = -2147408794;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM = -2147408793;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH = -2147408792;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL = -2147408791;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL = -2147408790;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST = -2147408789;

const int CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR = -2147408788;

const int CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING = -2147408787;

const int CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING = -2147408786;

const int CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL = -2147408785;

const int CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK = -2147408784;

const int CSSM_APPLEDL_OPEN_PARAMETERS_VERSION = 1;

const int CSSM_APPLECSPDL_DB_LOCK = 0;

const int CSSM_APPLECSPDL_DB_UNLOCK = 1;

const int CSSM_APPLECSPDL_DB_GET_SETTINGS = 2;

const int CSSM_APPLECSPDL_DB_SET_SETTINGS = 3;

const int CSSM_APPLECSPDL_DB_IS_LOCKED = 4;

const int CSSM_APPLECSPDL_DB_CHANGE_PASSWORD = 5;

const int CSSM_APPLECSPDL_DB_GET_HANDLE = 6;

const int CSSM_APPLESCPDL_CSP_GET_KEYHANDLE = 7;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_8 = 8;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_9 = 9;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_10 = 10;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_11 = 11;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_12 = 12;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_13 = 13;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_14 = 14;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_15 = 15;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_16 = 16;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_17 = 17;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_18 = 18;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_19 = 19;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_20 = 20;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_21 = 21;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_22 = 22;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_23 = 23;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_24 = 24;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_25 = 25;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_26 = 26;

const int CSSM_APPLE_PRIVATE_CSPDL_CODE_27 = 27;

const int CSSM_APPLECSP_KEYDIGEST = 256;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM = 100;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL = 101;

const int CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1 = 102;

const int CSSM_ATTRIBUTE_VENDOR_DEFINED = 8388608;

const int CSSM_ATTRIBUTE_PUBLIC_KEY = 1082130432;

const int CSSM_ATTRIBUTE_FEE_PRIME_TYPE = 276824065;

const int CSSM_ATTRIBUTE_FEE_CURVE_TYPE = 276824066;

const int CSSM_ATTRIBUTE_ASC_OPTIMIZATION = 276824067;

const int CSSM_ATTRIBUTE_RSA_BLINDING = 276824068;

const int CSSM_ATTRIBUTE_PARAM_KEY = 1082130437;

const int CSSM_ATTRIBUTE_PROMPT = 545259526;

const int CSSM_ATTRIBUTE_ALERT_TITLE = 545259527;

const int CSSM_ATTRIBUTE_VERIFY_PASSPHRASE = 276824072;

const int CSSM_FEE_PRIME_TYPE_DEFAULT = 0;

const int CSSM_FEE_PRIME_TYPE_MERSENNE = 1;

const int CSSM_FEE_PRIME_TYPE_FEE = 2;

const int CSSM_FEE_PRIME_TYPE_GENERAL = 3;

const int CSSM_FEE_CURVE_TYPE_DEFAULT = 0;

const int CSSM_FEE_CURVE_TYPE_MONTGOMERY = 1;

const int CSSM_FEE_CURVE_TYPE_WEIERSTRASS = 2;

const int CSSM_FEE_CURVE_TYPE_ANSI_X9_62 = 3;

const int CSSM_ASC_OPTIMIZE_DEFAULT = 0;

const int CSSM_ASC_OPTIMIZE_SIZE = 1;

const int CSSM_ASC_OPTIMIZE_SECURITY = 2;

const int CSSM_ASC_OPTIMIZE_TIME = 3;

const int CSSM_ASC_OPTIMIZE_TIME_SIZE = 4;

const int CSSM_ASC_OPTIMIZE_ASCII = 5;

const int CSSM_KEYATTR_PARTIAL = 65536;

const int CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT = 131072;

const int CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT = 1;

const int CSSM_TP_ACTION_FETCH_CRL_FROM_NET = 2;

const int CSSM_TP_ACTION_CRL_SUFFICIENT = 4;

const int CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT = 8;

const int CSSM_TP_ACTION_ALLOW_EXPIRED = 1;

const int CSSM_TP_ACTION_LEAF_IS_CA = 2;

const int CSSM_TP_ACTION_FETCH_CERT_FROM_NET = 4;

const int CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT = 8;

const int CSSM_TP_ACTION_REQUIRE_REV_PER_CERT = 16;

const int CSSM_TP_ACTION_TRUST_SETTINGS = 32;

const int CSSM_TP_ACTION_IMPLICIT_ANCHORS = 64;

const int CSSM_CERT_STATUS_EXPIRED = 1;

const int CSSM_CERT_STATUS_NOT_VALID_YET = 2;

const int CSSM_CERT_STATUS_IS_IN_INPUT_CERTS = 4;

const int CSSM_CERT_STATUS_IS_IN_ANCHORS = 8;

const int CSSM_CERT_STATUS_IS_ROOT = 16;

const int CSSM_CERT_STATUS_IS_FROM_NET = 32;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER = 64;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN = 128;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM = 256;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST = 512;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_DENY = 1024;

const int CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR = 2048;

const int CSSM_EVIDENCE_FORM_APPLE_HEADER = -2147483648;

const int CSSM_EVIDENCE_FORM_APPLE_CERTGROUP = -2147483647;

const int CSSM_EVIDENCE_FORM_APPLE_CERT_INFO = -2147483646;

const int CSSM_APPLEX509CL_OBTAIN_CSR = 0;

const int CSSM_APPLEX509CL_VERIFY_CSR = 1;

const int kSecTrustOptionAllowExpired = 1;

const int kSecTrustOptionLeafIsCA = 2;

const int kSecTrustOptionFetchIssuerFromNet = 4;

const int kSecTrustOptionAllowExpiredRoot = 8;

const int kSecTrustOptionRequireRevPerCert = 16;

const int kSecTrustOptionUseTrustSettings = 32;

const int kSecTrustOptionImplicitAnchors = 64;

const int kSecSubjectItemAttr = 1937072746;

const int kSecIssuerItemAttr = 1769173877;

const int kSecSerialNumberItemAttr = 1936614002;

const int kSecPublicKeyHashItemAttr = 1752198009;

const int kSecSubjectKeyIdentifierItemAttr = 1936419172;

const int kSecCertTypeItemAttr = 1668577648;

const int kSecCertEncodingItemAttr = 1667591779;

const int kSecKeyUsageUnspecified = 0;

const int kSecKeyUsageDigitalSignature = 1;

const int kSecKeyUsageNonRepudiation = 2;

const int kSecKeyUsageContentCommitment = 2;

const int kSecKeyUsageKeyEncipherment = 4;

const int kSecKeyUsageDataEncipherment = 8;

const int kSecKeyUsageKeyAgreement = 16;

const int kSecKeyUsageKeyCertSign = 32;

const int kSecKeyUsageCRLSign = 64;

const int kSecKeyUsageEncipherOnly = 128;

const int kSecKeyUsageDecipherOnly = 256;

const int kSecKeyUsageCritical = -2147483648;

const int kSecKeyUsageAll = 2147483647;

const int SSL_NULL_WITH_NULL_NULL = 0;

const int SSL_RSA_WITH_NULL_MD5 = 1;

const int SSL_RSA_WITH_NULL_SHA = 2;

const int SSL_RSA_EXPORT_WITH_RC4_40_MD5 = 3;

const int SSL_RSA_WITH_RC4_128_MD5 = 4;

const int SSL_RSA_WITH_RC4_128_SHA = 5;

const int SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 6;

const int SSL_RSA_WITH_IDEA_CBC_SHA = 7;

const int SSL_RSA_EXPORT_WITH_DES40_CBC_SHA = 8;

const int SSL_RSA_WITH_DES_CBC_SHA = 9;

const int SSL_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 11;

const int SSL_DH_DSS_WITH_DES_CBC_SHA = 12;

const int SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 14;

const int SSL_DH_RSA_WITH_DES_CBC_SHA = 15;

const int SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 17;

const int SSL_DHE_DSS_WITH_DES_CBC_SHA = 18;

const int SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 20;

const int SSL_DHE_RSA_WITH_DES_CBC_SHA = 21;

const int SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int SSL_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23;

const int SSL_DH_anon_WITH_RC4_128_MD5 = 24;

const int SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25;

const int SSL_DH_anon_WITH_DES_CBC_SHA = 26;

const int SSL_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int SSL_FORTEZZA_DMS_WITH_NULL_SHA = 28;

const int SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA = 29;

const int TLS_RSA_WITH_AES_128_CBC_SHA = 47;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA = 48;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA = 49;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 50;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA = 52;

const int TLS_RSA_WITH_AES_256_CBC_SHA = 53;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA = 54;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA = 55;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 56;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA = 58;

const int TLS_ECDH_ECDSA_WITH_NULL_SHA = 49153;

const int TLS_ECDH_ECDSA_WITH_RC4_128_SHA = 49154;

const int TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = 49155;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 49156;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 49157;

const int TLS_ECDHE_ECDSA_WITH_NULL_SHA = 49158;

const int TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = 49159;

const int TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 49160;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 49161;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 49162;

const int TLS_ECDH_RSA_WITH_NULL_SHA = 49163;

const int TLS_ECDH_RSA_WITH_RC4_128_SHA = 49164;

const int TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = 49165;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = 49166;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = 49167;

const int TLS_ECDHE_RSA_WITH_NULL_SHA = 49168;

const int TLS_ECDHE_RSA_WITH_RC4_128_SHA = 49169;

const int TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 49170;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 49171;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 49172;

const int TLS_ECDH_anon_WITH_NULL_SHA = 49173;

const int TLS_ECDH_anon_WITH_RC4_128_SHA = 49174;

const int TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = 49175;

const int TLS_ECDH_anon_WITH_AES_128_CBC_SHA = 49176;

const int TLS_ECDH_anon_WITH_AES_256_CBC_SHA = 49177;

const int TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = 49205;

const int TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = 49206;

const int TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52395;

const int TLS_NULL_WITH_NULL_NULL = 0;

const int TLS_RSA_WITH_NULL_MD5 = 1;

const int TLS_RSA_WITH_NULL_SHA = 2;

const int TLS_RSA_WITH_RC4_128_MD5 = 4;

const int TLS_RSA_WITH_RC4_128_SHA = 5;

const int TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int TLS_RSA_WITH_NULL_SHA256 = 59;

const int TLS_RSA_WITH_AES_128_CBC_SHA256 = 60;

const int TLS_RSA_WITH_AES_256_CBC_SHA256 = 61;

const int TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13;

const int TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16;

const int TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19;

const int TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22;

const int TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 62;

const int TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 63;

const int TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 64;

const int TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103;

const int TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 104;

const int TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 105;

const int TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 106;

const int TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107;

const int TLS_DH_anon_WITH_RC4_128_MD5 = 24;

const int TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27;

const int TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108;

const int TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109;

const int TLS_PSK_WITH_RC4_128_SHA = 138;

const int TLS_PSK_WITH_3DES_EDE_CBC_SHA = 139;

const int TLS_PSK_WITH_AES_128_CBC_SHA = 140;

const int TLS_PSK_WITH_AES_256_CBC_SHA = 141;

const int TLS_DHE_PSK_WITH_RC4_128_SHA = 142;

const int TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 143;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 144;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 145;

const int TLS_RSA_PSK_WITH_RC4_128_SHA = 146;

const int TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 147;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 148;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 149;

const int TLS_PSK_WITH_NULL_SHA = 44;

const int TLS_DHE_PSK_WITH_NULL_SHA = 45;

const int TLS_RSA_PSK_WITH_NULL_SHA = 46;

const int TLS_RSA_WITH_AES_128_GCM_SHA256 = 156;

const int TLS_RSA_WITH_AES_256_GCM_SHA384 = 157;

const int TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158;

const int TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159;

const int TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 160;

const int TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 161;

const int TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 162;

const int TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 163;

const int TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 164;

const int TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 165;

const int TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166;

const int TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167;

const int TLS_PSK_WITH_AES_128_GCM_SHA256 = 168;

const int TLS_PSK_WITH_AES_256_GCM_SHA384 = 169;

const int TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 170;

const int TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 171;

const int TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 172;

const int TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 173;

const int TLS_PSK_WITH_AES_128_CBC_SHA256 = 174;

const int TLS_PSK_WITH_AES_256_CBC_SHA384 = 175;

const int TLS_PSK_WITH_NULL_SHA256 = 176;

const int TLS_PSK_WITH_NULL_SHA384 = 177;

const int TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 178;

const int TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 179;

const int TLS_DHE_PSK_WITH_NULL_SHA256 = 180;

const int TLS_DHE_PSK_WITH_NULL_SHA384 = 181;

const int TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 182;

const int TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 183;

const int TLS_RSA_PSK_WITH_NULL_SHA256 = 184;

const int TLS_RSA_PSK_WITH_NULL_SHA384 = 185;

const int TLS_AES_128_GCM_SHA256 = 4865;

const int TLS_AES_256_GCM_SHA384 = 4866;

const int TLS_CHACHA20_POLY1305_SHA256 = 4867;

const int TLS_AES_128_CCM_SHA256 = 4868;

const int TLS_AES_128_CCM_8_SHA256 = 4869;

const int TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187;

const int TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 49188;

const int TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = 49189;

const int TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = 49190;

const int TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191;

const int TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 49192;

const int TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = 49193;

const int TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = 49194;

const int TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 49195;

const int TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 49196;

const int TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 49197;

const int TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 49198;

const int TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 49199;

const int TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 49200;

const int TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 49201;

const int TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 49202;

const int TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52392;

const int TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 52393;

const int TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 255;

const int SSL_RSA_WITH_RC2_CBC_MD5 = 65408;

const int SSL_RSA_WITH_IDEA_CBC_MD5 = 65409;

const int SSL_RSA_WITH_DES_CBC_MD5 = 65410;

const int SSL_RSA_WITH_3DES_EDE_CBC_MD5 = 65411;

const int SSL_NO_SUCH_CIPHERSUITE = 65535;

const int kSSLCiphersuiteGroupDefault = 0;

const int kSSLCiphersuiteGroupCompatibility = 1;

const int kSSLCiphersuiteGroupLegacy = 2;

const int kSSLCiphersuiteGroupATS = 3;

const int kSSLCiphersuiteGroupATSCompatibility = 4;

const int tls_protocol_version_TLSv10 = 769;

const int tls_protocol_version_TLSv11 = 770;

const int tls_protocol_version_TLSv12 = 771;

const int tls_protocol_version_TLSv13 = 772;

const int tls_protocol_version_DTLSv10 = 65279;

const int tls_protocol_version_DTLSv12 = 65277;

const int tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA = 10;

const int tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA = 47;

const int tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA = 53;

const int tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256 = 156;

const int tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384 = 157;

const int tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256 = 60;

const int tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256 = 61;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 49160;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 49161;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 49162;

const int tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 49170;

const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA = 49171;

const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA = 49172;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 49188;

const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191;

const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 49192;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 49195;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 49196;

const int tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 49199;

const int tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 49200;

const int tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52392;

const int tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 52393;

const int tls_ciphersuite_AES_128_GCM_SHA256 = 4865;

const int tls_ciphersuite_AES_256_GCM_SHA384 = 4866;

const int tls_ciphersuite_CHACHA20_POLY1305_SHA256 = 4867;

const int tls_ciphersuite_group_default = 0;

const int tls_ciphersuite_group_compatibility = 1;

const int tls_ciphersuite_group_legacy = 2;

const int tls_ciphersuite_group_ats = 3;

const int tls_ciphersuite_group_ats_compatibility = 4;

const int kSSLProtocolUnknown = 0;

const int kTLSProtocol1 = 4;

const int kTLSProtocol11 = 7;

const int kTLSProtocol12 = 8;

const int kDTLSProtocol1 = 9;

const int kTLSProtocol13 = 10;

const int kDTLSProtocol12 = 11;

const int kTLSProtocolMaxSupported = 999;

const int kSSLProtocol2 = 1;

const int kSSLProtocol3 = 2;

const int kSSLProtocol3Only = 3;

const int kTLSProtocol1Only = 5;

const int kSSLProtocolAll = 6;

const int kSSLSessionOptionBreakOnServerAuth = 0;

const int kSSLSessionOptionBreakOnCertRequested = 1;

const int kSSLSessionOptionBreakOnClientAuth = 2;

const int kSSLSessionOptionFalseStart = 3;

const int kSSLSessionOptionSendOneByteRecord = 4;

const int kSSLSessionOptionAllowServerIdentityChange = 5;

const int kSSLSessionOptionFallback = 6;

const int kSSLSessionOptionBreakOnClientHello = 7;

const int kSSLSessionOptionAllowRenegotiation = 8;

const int kSSLSessionOptionEnableSessionTickets = 9;

const int kSSLIdle = 0;

const int kSSLHandshake = 1;

const int kSSLConnected = 2;

const int kSSLClosed = 3;

const int kSSLAborted = 4;

const int kSSLClientCertNone = 0;

const int kSSLClientCertRequested = 1;

const int kSSLClientCertSent = 2;

const int kSSLClientCertRejected = 3;

const int kSSLServerSide = 0;

const int kSSLClientSide = 1;

const int kSSLStreamType = 0;

const int kSSLDatagramType = 1;

const int kNeverAuthenticate = 0;

const int kAlwaysAuthenticate = 1;

const int kTryAuthenticate = 2;

const int NSURLSessionTaskStateRunning = 0;

const int NSURLSessionTaskStateSuspended = 1;

const int NSURLSessionTaskStateCanceling = 2;

const int NSURLSessionTaskStateCompleted = 3;

const int NSURLSessionWebSocketMessageTypeData = 0;

const int NSURLSessionWebSocketMessageTypeString = 1;

const int NSURLSessionWebSocketCloseCodeInvalid = 0;

const int NSURLSessionWebSocketCloseCodeNormalClosure = 1000;

const int NSURLSessionWebSocketCloseCodeGoingAway = 1001;

const int NSURLSessionWebSocketCloseCodeProtocolError = 1002;

const int NSURLSessionWebSocketCloseCodeUnsupportedData = 1003;

const int NSURLSessionWebSocketCloseCodeNoStatusReceived = 1005;

const int NSURLSessionWebSocketCloseCodeAbnormalClosure = 1006;

const int NSURLSessionWebSocketCloseCodeInvalidFramePayloadData = 1007;

const int NSURLSessionWebSocketCloseCodePolicyViolation = 1008;

const int NSURLSessionWebSocketCloseCodeMessageTooBig = 1009;

const int NSURLSessionWebSocketCloseCodeMandatoryExtensionMissing = 1010;

const int NSURLSessionWebSocketCloseCodeInternalServerError = 1011;

const int NSURLSessionWebSocketCloseCodeTLSHandshakeFailure = 1015;

const int NSURLSessionMultipathServiceTypeNone = 0;

const int NSURLSessionMultipathServiceTypeHandover = 1;

const int NSURLSessionMultipathServiceTypeInteractive = 2;

const int NSURLSessionMultipathServiceTypeAggregate = 3;

const int NSURLSessionDelayedRequestContinueLoading = 0;

const int NSURLSessionDelayedRequestUseNewRequest = 1;

const int NSURLSessionDelayedRequestCancel = 2;

const int NSURLSessionAuthChallengeUseCredential = 0;

const int NSURLSessionAuthChallengePerformDefaultHandling = 1;

const int NSURLSessionAuthChallengeCancelAuthenticationChallenge = 2;

const int NSURLSessionAuthChallengeRejectProtectionSpace = 3;

const int NSURLSessionResponseCancel = 0;

const int NSURLSessionResponseAllow = 1;

const int NSURLSessionResponseBecomeDownload = 2;

const int NSURLSessionResponseBecomeStream = 3;

const int NSURLSessionTaskMetricsResourceFetchTypeUnknown = 0;

const int NSURLSessionTaskMetricsResourceFetchTypeNetworkLoad = 1;

const int NSURLSessionTaskMetricsResourceFetchTypeServerPush = 2;

const int NSURLSessionTaskMetricsResourceFetchTypeLocalCache = 3;

const int NSURLSessionTaskMetricsDomainResolutionProtocolUnknown = 0;

const int NSURLSessionTaskMetricsDomainResolutionProtocolUDP = 1;

const int NSURLSessionTaskMetricsDomainResolutionProtocolTCP = 2;

const int NSURLSessionTaskMetricsDomainResolutionProtocolTLS = 3;

const int NSURLSessionTaskMetricsDomainResolutionProtocolHTTPS = 4;

const int DYNAMIC_TARGETS_ENABLED = 0;

const int TARGET_OS_MAC = 1;

const int TARGET_OS_WIN32 = 0;

const int TARGET_OS_WINDOWS = 0;

const int TARGET_OS_UNIX = 0;

const int TARGET_OS_LINUX = 0;

const int TARGET_OS_OSX = 1;

const int TARGET_OS_IPHONE = 0;

const int TARGET_OS_IOS = 0;

const int TARGET_OS_WATCH = 0;

const int TARGET_OS_TV = 0;

const int TARGET_OS_MACCATALYST = 0;

const int TARGET_OS_UIKITFORMAC = 0;

const int TARGET_OS_SIMULATOR = 0;

const int TARGET_OS_EMBEDDED = 0;

const int TARGET_OS_RTKIT = 0;

const int TARGET_OS_DRIVERKIT = 0;

const int TARGET_IPHONE_SIMULATOR = 0;

const int TARGET_OS_NANO = 0;

const int TARGET_ABI_USES_IOS_VALUES = 1;

const int TARGET_CPU_PPC = 0;

const int TARGET_CPU_PPC64 = 0;

const int TARGET_CPU_68K = 0;

const int TARGET_CPU_X86 = 0;

const int TARGET_CPU_X86_64 = 0;

const int TARGET_CPU_ARM = 0;

const int TARGET_CPU_ARM64 = 1;

const int TARGET_CPU_MIPS = 0;

const int TARGET_CPU_SPARC = 0;

const int TARGET_CPU_ALPHA = 0;

const int TARGET_RT_MAC_CFM = 0;

const int TARGET_RT_MAC_MACHO = 1;

const int TARGET_RT_LITTLE_ENDIAN = 1;

const int TARGET_RT_BIG_ENDIAN = 0;

const int TARGET_RT_64_BIT = 1;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __MAC_11_3 = 110300;

const int __MAC_11_4 = 110400;

const int __MAC_11_5 = 110500;

const int __MAC_11_6 = 110600;

const int __MAC_12_0 = 120000;

const int __MAC_12_1 = 120100;

const int __MAC_12_2 = 120200;

const int __MAC_12_3 = 120300;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __IPHONE_14_5 = 140500;

const int __IPHONE_14_6 = 140600;

const int __IPHONE_14_7 = 140700;

const int __IPHONE_14_8 = 140800;

const int __IPHONE_15_0 = 150000;

const int __IPHONE_15_1 = 150100;

const int __IPHONE_15_2 = 150200;

const int __IPHONE_15_3 = 150300;

const int __IPHONE_15_4 = 150400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __TVOS_14_5 = 140500;

const int __TVOS_14_6 = 140600;

const int __TVOS_14_7 = 140700;

const int __TVOS_15_0 = 150000;

const int __TVOS_15_1 = 150100;

const int __TVOS_15_2 = 150200;

const int __TVOS_15_3 = 150300;

const int __TVOS_15_4 = 150400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int __WATCHOS_7_3 = 70300;

const int __WATCHOS_7_4 = 70400;

const int __WATCHOS_7_5 = 70500;

const int __WATCHOS_7_6 = 70600;

const int __WATCHOS_8_0 = 80000;

const int __WATCHOS_8_1 = 80100;

const int __WATCHOS_8_3 = 80300;

const int __WATCHOS_8_4 = 80400;

const int __WATCHOS_8_5 = 80500;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int MAC_OS_VERSION_12_0 = 120000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __DRIVERKIT_21_0 = 210000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 120000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 120300;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int USER_ADDR_NULL = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int MAC_OS_VERSION_11_1 = 110100;

const int MAC_OS_VERSION_11_3 = 110300;

const int MAC_OS_X_VERSION_MIN_REQUIRED = 120000;

const int MAC_OS_X_VERSION_MAX_ALLOWED = 120000;

const int __AVAILABILITY_MACROS_USES_AVAILABILITY = 1;

const int OBJC_API_VERSION = 2;

const int OBJC_NO_GC = 1;

const int NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER = 1;

const int OBJC_OLD_DISPATCH_PROTOTYPES = 0;

const int true1 = 1;

const int false1 = 0;

const int __bool_true_false_are_defined = 1;

const int OBJC_BOOL_IS_BOOL = 1;

const int YES = 1;

const int NO = 0;

const int ARITH_SHIFT = 32;

const int NSIntegerMax = 9223372036854775807;

const int NSIntegerMin = -9223372036854775808;

const int NSUIntegerMax = -1;

const int NSINTEGER_DEFINED = 1;

const int __GNUC_VA_LIST = 1;

const int __DARWIN_CLK_TCK = 100;

const int CHAR_BIT = 8;

const int MB_LEN_MAX = 6;

const int CLK_TCK = 100;

const int SCHAR_MAX = 127;

const int SCHAR_MIN = -128;

const int UCHAR_MAX = 255;

const int CHAR_MAX = 127;

const int CHAR_MIN = -128;

const int USHRT_MAX = 65535;

const int SHRT_MAX = 32767;

const int SHRT_MIN = -32768;

const int UINT_MAX = 4294967295;

const int INT_MAX = 2147483647;

const int INT_MIN = -2147483648;

const int ULONG_MAX = -1;

const int LONG_MAX = 9223372036854775807;

const int LONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LONG_BIT = 64;

const int SSIZE_MAX = 9223372036854775807;

const int WORD_BIT = 32;

const int SIZE_T_MAX = -1;

const int UQUAD_MAX = -1;

const int QUAD_MAX = 9223372036854775807;

const int QUAD_MIN = -9223372036854775808;

const int ARG_MAX = 1048576;

const int CHILD_MAX = 266;

const int GID_MAX = 2147483647;

const int LINK_MAX = 32767;

const int MAX_CANON = 1024;

const int MAX_INPUT = 1024;

const int NAME_MAX = 255;

const int NGROUPS_MAX = 16;

const int UID_MAX = 2147483647;

const int OPEN_MAX = 10240;

const int PATH_MAX = 1024;

const int PIPE_BUF = 512;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int CHARCLASS_NAME_MAX = 14;

const int COLL_WEIGHTS_MAX = 2;

const int EQUIV_CLASS_MAX = 2;

const int EXPR_NEST_MAX = 32;

const int LINE_MAX = 2048;

const int RE_DUP_MAX = 255;

const int NZERO = 20;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_EQUIV_CLASS_MAX = 2;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_KEYS_MAX = 512;

const int PTHREAD_STACK_MIN = 16384;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_SS_REPL_MAX = 4;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_TRACE_EVENT_NAME_MAX = 30;

const int _POSIX_TRACE_NAME_MAX = 8;

const int _POSIX_TRACE_SYS_MAX = 8;

const int _POSIX_TRACE_USER_EVENT_MAX = 32;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX_RE_DUP_MAX = 255;

const int OFF_MIN = -9223372036854775808;

const int OFF_MAX = 9223372036854775807;

const int PASS_MAX = 128;

const int NL_ARGMAX = 9;

const int NL_LANGMAX = 14;

const int NL_MSGMAX = 32767;

const int NL_NMAX = 1;

const int NL_SETMAX = 255;

const int NL_TEXTMAX = 2048;

const int _XOPEN_IOV_MAX = 16;

const int IOV_MAX = 1024;

const int _XOPEN_NAME_MAX = 255;

const int _XOPEN_PATH_MAX = 1024;

const int NS_BLOCKS_AVAILABLE = 1;

const int __COREFOUNDATION_CFAVAILABILITY__ = 1;

const int API_TO_BE_DEPRECATED = 100000;

const int __CF_ENUM_FIXED_IS_AVAILABLE = 1;

const double NSFoundationVersionNumber10_0 = 397.4;

const double NSFoundationVersionNumber10_1 = 425.0;

const double NSFoundationVersionNumber10_1_1 = 425.0;

const double NSFoundationVersionNumber10_1_2 = 425.0;

const double NSFoundationVersionNumber10_1_3 = 425.0;

const double NSFoundationVersionNumber10_1_4 = 425.0;

const double NSFoundationVersionNumber10_2 = 462.0;

const double NSFoundationVersionNumber10_2_1 = 462.0;

const double NSFoundationVersionNumber10_2_2 = 462.0;

const double NSFoundationVersionNumber10_2_3 = 462.0;

const double NSFoundationVersionNumber10_2_4 = 462.0;

const double NSFoundationVersionNumber10_2_5 = 462.0;

const double NSFoundationVersionNumber10_2_6 = 462.0;

const double NSFoundationVersionNumber10_2_7 = 462.7;

const double NSFoundationVersionNumber10_2_8 = 462.7;

const double NSFoundationVersionNumber10_3 = 500.0;

const double NSFoundationVersionNumber10_3_1 = 500.0;

const double NSFoundationVersionNumber10_3_2 = 500.3;

const double NSFoundationVersionNumber10_3_3 = 500.54;

const double NSFoundationVersionNumber10_3_4 = 500.56;

const double NSFoundationVersionNumber10_3_5 = 500.56;

const double NSFoundationVersionNumber10_3_6 = 500.56;

const double NSFoundationVersionNumber10_3_7 = 500.56;

const double NSFoundationVersionNumber10_3_8 = 500.56;

const double NSFoundationVersionNumber10_3_9 = 500.58;

const double NSFoundationVersionNumber10_4 = 567.0;

const double NSFoundationVersionNumber10_4_1 = 567.0;

const double NSFoundationVersionNumber10_4_2 = 567.12;

const double NSFoundationVersionNumber10_4_3 = 567.21;

const double NSFoundationVersionNumber10_4_4_Intel = 567.23;

const double NSFoundationVersionNumber10_4_4_PowerPC = 567.21;

const double NSFoundationVersionNumber10_4_5 = 567.25;

const double NSFoundationVersionNumber10_4_6 = 567.26;

const double NSFoundationVersionNumber10_4_7 = 567.27;

const double NSFoundationVersionNumber10_4_8 = 567.28;

const double NSFoundationVersionNumber10_4_9 = 567.29;

const double NSFoundationVersionNumber10_4_10 = 567.29;

const double NSFoundationVersionNumber10_4_11 = 567.36;

const double NSFoundationVersionNumber10_5 = 677.0;

const double NSFoundationVersionNumber10_5_1 = 677.1;

const double NSFoundationVersionNumber10_5_2 = 677.15;

const double NSFoundationVersionNumber10_5_3 = 677.19;

const double NSFoundationVersionNumber10_5_4 = 677.19;

const double NSFoundationVersionNumber10_5_5 = 677.21;

const double NSFoundationVersionNumber10_5_6 = 677.22;

const double NSFoundationVersionNumber10_5_7 = 677.24;

const double NSFoundationVersionNumber10_5_8 = 677.26;

const double NSFoundationVersionNumber10_6 = 751.0;

const double NSFoundationVersionNumber10_6_1 = 751.0;

const double NSFoundationVersionNumber10_6_2 = 751.14;

const double NSFoundationVersionNumber10_6_3 = 751.21;

const double NSFoundationVersionNumber10_6_4 = 751.29;

const double NSFoundationVersionNumber10_6_5 = 751.42;

const double NSFoundationVersionNumber10_6_6 = 751.53;

const double NSFoundationVersionNumber10_6_7 = 751.53;

const double NSFoundationVersionNumber10_6_8 = 751.62;

const double NSFoundationVersionNumber10_7 = 833.1;

const double NSFoundationVersionNumber10_7_1 = 833.1;

const double NSFoundationVersionNumber10_7_2 = 833.2;

const double NSFoundationVersionNumber10_7_3 = 833.24;

const double NSFoundationVersionNumber10_7_4 = 833.25;

const double NSFoundationVersionNumber10_8 = 945.0;

const double NSFoundationVersionNumber10_8_1 = 945.0;

const double NSFoundationVersionNumber10_8_2 = 945.11;

const double NSFoundationVersionNumber10_8_3 = 945.16;

const double NSFoundationVersionNumber10_8_4 = 945.18;

const int NSFoundationVersionNumber10_9 = 1056;

const int NSFoundationVersionNumber10_9_1 = 1056;

const double NSFoundationVersionNumber10_9_2 = 1056.13;

const double NSFoundationVersionNumber10_10 = 1151.16;

const double NSFoundationVersionNumber10_10_1 = 1151.16;

const double NSFoundationVersionNumber10_10_2 = 1152.14;

const double NSFoundationVersionNumber10_10_3 = 1153.2;

const double NSFoundationVersionNumber10_10_4 = 1153.2;

const int NSFoundationVersionNumber10_10_5 = 1154;

const int NSFoundationVersionNumber10_10_Max = 1199;

const int NSFoundationVersionNumber10_11 = 1252;

const double NSFoundationVersionNumber10_11_1 = 1255.1;

const double NSFoundationVersionNumber10_11_2 = 1256.1;

const double NSFoundationVersionNumber10_11_3 = 1256.1;

const int NSFoundationVersionNumber10_11_4 = 1258;

const int NSFoundationVersionNumber10_11_Max = 1299;

const int __COREFOUNDATION_CFBASE__ = 1;

const int UNIVERSAL_INTERFACES_VERSION = 1024;

const int PRAGMA_IMPORT = 0;

const int PRAGMA_ONCE = 0;

const int PRAGMA_STRUCT_PACK = 1;

const int PRAGMA_STRUCT_PACKPUSH = 1;

const int PRAGMA_STRUCT_ALIGN = 0;

const int PRAGMA_ENUM_PACK = 0;

const int PRAGMA_ENUM_ALWAYSINT = 0;

const int PRAGMA_ENUM_OPTIONS = 0;

const int TYPE_EXTENDED = 0;

const int TYPE_LONGDOUBLE_IS_DOUBLE = 0;

const int TYPE_LONGLONG = 1;

const int FUNCTION_PASCAL = 0;

const int FUNCTION_DECLSPEC = 0;

const int FUNCTION_WIN32CC = 0;

const int TARGET_API_MAC_OS8 = 0;

const int TARGET_API_MAC_CARBON = 1;

const int TARGET_API_MAC_OSX = 1;

const int TARGET_CARBON = 1;

const int OLDROUTINENAMES = 0;

const int OPAQUE_TOOLBOX_STRUCTS = 1;

const int OPAQUE_UPP_TYPES = 1;

const int ACCESSOR_CALLS_ARE_FUNCTIONS = 1;

const int CALL_NOT_IN_CARBON = 0;

const int MIXEDMODE_CALLS_ARE_FUNCTIONS = 1;

const int ALLOW_OBSOLETE_CARBON_MACMEMORY = 0;

const int ALLOW_OBSOLETE_CARBON_OSUTILS = 0;

const int NULL = 0;

const int kInvalidID = 0;

const int TRUE = 1;

const int FALSE = 0;

const double kCFCoreFoundationVersionNumber10_0 = 196.4;

const double kCFCoreFoundationVersionNumber10_0_3 = 196.5;

const double kCFCoreFoundationVersionNumber10_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_1 = 226.0;

const double kCFCoreFoundationVersionNumber10_1_2 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_3 = 227.2;

const double kCFCoreFoundationVersionNumber10_1_4 = 227.3;

const double kCFCoreFoundationVersionNumber10_2 = 263.0;

const double kCFCoreFoundationVersionNumber10_2_1 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_2 = 263.1;

const double kCFCoreFoundationVersionNumber10_2_3 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_4 = 263.3;

const double kCFCoreFoundationVersionNumber10_2_5 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_6 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_7 = 263.5;

const double kCFCoreFoundationVersionNumber10_2_8 = 263.5;

const double kCFCoreFoundationVersionNumber10_3 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_1 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_2 = 299.0;

const double kCFCoreFoundationVersionNumber10_3_3 = 299.3;

const double kCFCoreFoundationVersionNumber10_3_4 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_5 = 299.31;

const double kCFCoreFoundationVersionNumber10_3_6 = 299.32;

const double kCFCoreFoundationVersionNumber10_3_7 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_8 = 299.33;

const double kCFCoreFoundationVersionNumber10_3_9 = 299.35;

const double kCFCoreFoundationVersionNumber10_4 = 368.0;

const double kCFCoreFoundationVersionNumber10_4_1 = 368.1;

const double kCFCoreFoundationVersionNumber10_4_2 = 368.11;

const double kCFCoreFoundationVersionNumber10_4_3 = 368.18;

const double kCFCoreFoundationVersionNumber10_4_4_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_4_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_5_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_5_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_6_Intel = 368.26;

const double kCFCoreFoundationVersionNumber10_4_6_PowerPC = 368.25;

const double kCFCoreFoundationVersionNumber10_4_7 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_8 = 368.27;

const double kCFCoreFoundationVersionNumber10_4_9 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_10 = 368.28;

const double kCFCoreFoundationVersionNumber10_4_11 = 368.31;

const double kCFCoreFoundationVersionNumber10_5 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_1 = 476.0;

const double kCFCoreFoundationVersionNumber10_5_2 = 476.1;

const double kCFCoreFoundationVersionNumber10_5_3 = 476.13;

const double kCFCoreFoundationVersionNumber10_5_4 = 476.14;

const double kCFCoreFoundationVersionNumber10_5_5 = 476.15;

const double kCFCoreFoundationVersionNumber10_5_6 = 476.17;

const double kCFCoreFoundationVersionNumber10_5_7 = 476.18;

const double kCFCoreFoundationVersionNumber10_5_8 = 476.19;

const double kCFCoreFoundationVersionNumber10_6 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_1 = 550.0;

const double kCFCoreFoundationVersionNumber10_6_2 = 550.13;

const double kCFCoreFoundationVersionNumber10_6_3 = 550.19;

const double kCFCoreFoundationVersionNumber10_6_4 = 550.29;

const double kCFCoreFoundationVersionNumber10_6_5 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_6 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_7 = 550.42;

const double kCFCoreFoundationVersionNumber10_6_8 = 550.43;

const double kCFCoreFoundationVersionNumber10_7 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_1 = 635.0;

const double kCFCoreFoundationVersionNumber10_7_2 = 635.15;

const double kCFCoreFoundationVersionNumber10_7_3 = 635.19;

const double kCFCoreFoundationVersionNumber10_7_4 = 635.21;

const double kCFCoreFoundationVersionNumber10_7_5 = 635.21;

const double kCFCoreFoundationVersionNumber10_8 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_1 = 744.0;

const double kCFCoreFoundationVersionNumber10_8_2 = 744.12;

const double kCFCoreFoundationVersionNumber10_8_3 = 744.18;

const double kCFCoreFoundationVersionNumber10_8_4 = 744.19;

const double kCFCoreFoundationVersionNumber10_9 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_1 = 855.11;

const double kCFCoreFoundationVersionNumber10_9_2 = 855.14;

const double kCFCoreFoundationVersionNumber10_10 = 1151.16;

const double kCFCoreFoundationVersionNumber10_10_1 = 1151.16;

const int kCFCoreFoundationVersionNumber10_10_2 = 1152;

const double kCFCoreFoundationVersionNumber10_10_3 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_4 = 1153.18;

const double kCFCoreFoundationVersionNumber10_10_5 = 1153.18;

const int kCFCoreFoundationVersionNumber10_10_Max = 1199;

const int kCFCoreFoundationVersionNumber10_11 = 1253;

const double kCFCoreFoundationVersionNumber10_11_1 = 1255.1;

const double kCFCoreFoundationVersionNumber10_11_2 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_3 = 1256.14;

const double kCFCoreFoundationVersionNumber10_11_4 = 1258.1;

const int kCFCoreFoundationVersionNumber10_11_Max = 1299;

const int ISA_PTRAUTH_DISCRIMINATOR = 27361;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const double NSTimeIntervalSince1970 = 978307200.0;

const int __COREFOUNDATION_CFARRAY__ = 1;

const int OS_OBJECT_HAVE_OBJC_SUPPORT = 0;

const int OS_OBJECT_USE_OBJC = 0;

const int OS_OBJECT_SWIFT3 = 0;

const int OS_OBJECT_USE_OBJC_RETAIN_RELEASE = 0;

const int SEC_OS_IPHONE = 0;

const int SEC_OS_OSX = 1;

const int SEC_OS_OSX_INCLUDES = 1;

const int SECURITY_TYPE_UNIFICATION = 1;

const int __COREFOUNDATION_COREFOUNDATION__ = 1;

const int __COREFOUNDATION__ = 1;

const String __ASSERT_FILE_NAME = 'temp_for_macros.hpp';

const int _CACHED_RUNES = 256;

const int _CRMASK = -256;

const String _RUNE_MAGIC_A = 'RuneMagA';

const int _CTYPE_A = 256;

const int _CTYPE_C = 512;

const int _CTYPE_D = 1024;

const int _CTYPE_G = 2048;

const int _CTYPE_L = 4096;

const int _CTYPE_P = 8192;

const int _CTYPE_S = 16384;

const int _CTYPE_U = 32768;

const int _CTYPE_X = 65536;

const int _CTYPE_B = 131072;

const int _CTYPE_R = 262144;

const int _CTYPE_I = 524288;

const int _CTYPE_T = 1048576;

const int _CTYPE_Q = 2097152;

const int _CTYPE_SW0 = 536870912;

const int _CTYPE_SW1 = 1073741824;

const int _CTYPE_SW2 = 2147483648;

const int _CTYPE_SW3 = 3221225472;

const int _CTYPE_SWM = 3758096384;

const int _CTYPE_SWS = 30;

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EDEADLK = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int ENOTBLK = 15;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int EINVAL = 22;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int ETXTBSY = 26;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int ERANGE = 34;

const int EAGAIN = 35;

const int EWOULDBLOCK = 35;

const int EINPROGRESS = 36;

const int EALREADY = 37;

const int ENOTSOCK = 38;

const int EDESTADDRREQ = 39;

const int EMSGSIZE = 40;

const int EPROTOTYPE = 41;

const int ENOPROTOOPT = 42;

const int EPROTONOSUPPORT = 43;

const int ESOCKTNOSUPPORT = 44;

const int ENOTSUP = 45;

const int EPFNOSUPPORT = 46;

const int EAFNOSUPPORT = 47;

const int EADDRINUSE = 48;

const int EADDRNOTAVAIL = 49;

const int ENETDOWN = 50;

const int ENETUNREACH = 51;

const int ENETRESET = 52;

const int ECONNABORTED = 53;

const int ECONNRESET = 54;

const int ENOBUFS = 55;

const int EISCONN = 56;

const int ENOTCONN = 57;

const int ESHUTDOWN = 58;

const int ETOOMANYREFS = 59;

const int ETIMEDOUT = 60;

const int ECONNREFUSED = 61;

const int ELOOP = 62;

const int ENAMETOOLONG = 63;

const int EHOSTDOWN = 64;

const int EHOSTUNREACH = 65;

const int ENOTEMPTY = 66;

const int EPROCLIM = 67;

const int EUSERS = 68;

const int EDQUOT = 69;

const int ESTALE = 70;

const int EREMOTE = 71;

const int EBADRPC = 72;

const int ERPCMISMATCH = 73;

const int EPROGUNAVAIL = 74;

const int EPROGMISMATCH = 75;

const int EPROCUNAVAIL = 76;

const int ENOLCK = 77;

const int ENOSYS = 78;

const int EFTYPE = 79;

const int EAUTH = 80;

const int ENEEDAUTH = 81;

const int EPWROFF = 82;

const int EDEVERR = 83;

const int EOVERFLOW = 84;

const int EBADEXEC = 85;

const int EBADARCH = 86;

const int ESHLIBVERS = 87;

const int EBADMACHO = 88;

const int ECANCELED = 89;

const int EIDRM = 90;

const int ENOMSG = 91;

const int EILSEQ = 92;

const int ENOATTR = 93;

const int EBADMSG = 94;

const int EMULTIHOP = 95;

const int ENODATA = 96;

const int ENOLINK = 97;

const int ENOSR = 98;

const int ENOSTR = 99;

const int EPROTO = 100;

const int ETIME = 101;

const int EOPNOTSUPP = 102;

const int ENOPOLICY = 103;

const int ENOTRECOVERABLE = 104;

const int EOWNERDEAD = 105;

const int EQFULL = 106;

const int ELAST = 106;

const int FLT_EVAL_METHOD = 0;

const int FLT_RADIX = 2;

const int FLT_MANT_DIG = 24;

const int DBL_MANT_DIG = 53;

const int LDBL_MANT_DIG = 53;

const int FLT_DIG = 6;

const int DBL_DIG = 15;

const int LDBL_DIG = 15;

const int FLT_MIN_EXP = -125;

const int DBL_MIN_EXP = -1021;

const int LDBL_MIN_EXP = -1021;

const int FLT_MIN_10_EXP = -37;

const int DBL_MIN_10_EXP = -307;

const int LDBL_MIN_10_EXP = -307;

const int FLT_MAX_EXP = 128;

const int DBL_MAX_EXP = 1024;

const int LDBL_MAX_EXP = 1024;

const int FLT_MAX_10_EXP = 38;

const int DBL_MAX_10_EXP = 308;

const int LDBL_MAX_10_EXP = 308;

const double FLT_MAX = 3.4028234663852886e+38;

const double DBL_MAX = 1.7976931348623157e+308;

const double LDBL_MAX = 1.7976931348623157e+308;

const double FLT_EPSILON = 1.1920928955078125e-7;

const double DBL_EPSILON = 2.220446049250313e-16;

const double LDBL_EPSILON = 2.220446049250313e-16;

const double FLT_MIN = 1.1754943508222875e-38;

const double DBL_MIN = 2.2250738585072014e-308;

const double LDBL_MIN = 2.2250738585072014e-308;

const int DECIMAL_DIG = 17;

const int FLT_HAS_SUBNORM = 1;

const int DBL_HAS_SUBNORM = 1;

const int LDBL_HAS_SUBNORM = 1;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const double DBL_TRUE_MIN = 5e-324;

const double LDBL_TRUE_MIN = 5e-324;

const int FLT_DECIMAL_DIG = 9;

const int DBL_DECIMAL_DIG = 17;

const int LDBL_DECIMAL_DIG = 17;

const int LC_ALL = 0;

const int LC_COLLATE = 1;

const int LC_CTYPE = 2;

const int LC_MONETARY = 3;

const int LC_NUMERIC = 4;

const int LC_TIME = 5;

const int LC_MESSAGES = 6;

const int _LC_LAST = 7;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const double INFINITY = double.infinity;

const int FP_NAN = 1;

const int FP_INFINITE = 2;

const int FP_ZERO = 3;

const int FP_NORMAL = 4;

const int FP_SUBNORMAL = 5;

const int FP_SUPERNORMAL = 6;

const int FP_FAST_FMA = 1;

const int FP_FAST_FMAF = 1;

const int FP_FAST_FMAL = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const double M_E = 2.718281828459045;

const double M_LOG2E = 1.4426950408889634;

const double M_LOG10E = 0.4342944819032518;

const double M_LN2 = 0.6931471805599453;

const double M_LN10 = 2.302585092994046;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_SQRT2 = 1.4142135623730951;

const double M_SQRT1_2 = 0.7071067811865476;

const double MAXFLOAT = 3.4028234663852886e+38;

const int FP_SNAN = 1;

const int FP_QNAN = 1;

const double HUGE = 3.4028234663852886e+38;

const double X_TLOSS = 14148475504056880.0;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int _JBLEN = 48;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _ARM_SIGNAL_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int __DARWIN_OPAQUE_ARM_THREAD_STATE64 = 0;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int RENAME_RESERVED1 = 8;

const int RENAME_NOFOLLOW_ANY = 16;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = 7;

const int IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = 8;

const int IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = 9;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int IOPOL_VFS_IGNORE_PERMISSIONS_OFF = 0;

const int IOPOL_VFS_IGNORE_PERMISSIONS_ON = 1;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = 0;

const int IOPOL_VFS_SKIP_MTIME_UPDATE_ON = 1;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = 0;

const int IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const int TIME_UTC = 1;

const int __COREFOUNDATION_CFBAG__ = 1;

const int __COREFOUNDATION_CFBINARYHEAP__ = 1;

const int __COREFOUNDATION_CFBITVECTOR__ = 1;

const int __COREFOUNDATION_CFBYTEORDER__ = 1;

const int CF_USE_OSBYTEORDER_H = 1;

const int __COREFOUNDATION_CFCALENDAR__ = 1;

const int __COREFOUNDATION_CFLOCALE__ = 1;

const int __COREFOUNDATION_CFDICTIONARY__ = 1;

const int __COREFOUNDATION_CFNOTIFICATIONCENTER__ = 1;

const int __COREFOUNDATION_CFDATE__ = 1;

const int __COREFOUNDATION_CFTIMEZONE__ = 1;

const int __COREFOUNDATION_CFDATA__ = 1;

const int __COREFOUNDATION_CFSTRING__ = 1;

const int __COREFOUNDATION_CFCHARACTERSET__ = 1;

const int kCFStringEncodingInvalidId = 4294967295;

const int __kCFStringInlineBufferLength = 64;

const int __COREFOUNDATION_CFDATEFORMATTER__ = 1;

const int __COREFOUNDATION_CFERROR__ = 1;

const int __COREFOUNDATION_CFNUMBER__ = 1;

const int __COREFOUNDATION_CFNUMBERFORMATTER__ = 1;

const int __COREFOUNDATION_CFPREFERENCES__ = 1;

const int __COREFOUNDATION_CFPROPERTYLIST__ = 1;

const int __COREFOUNDATION_CFSTREAM__ = 1;

const int __COREFOUNDATION_CFURL__ = 1;

const int __COREFOUNDATION_CFRUNLOOP__ = 1;

const int MACH_PORT_NULL = 0;

const int MACH_PORT_DEAD = 4294967295;

const int MACH_PORT_RIGHT_SEND = 0;

const int MACH_PORT_RIGHT_RECEIVE = 1;

const int MACH_PORT_RIGHT_SEND_ONCE = 2;

const int MACH_PORT_RIGHT_PORT_SET = 3;

const int MACH_PORT_RIGHT_DEAD_NAME = 4;

const int MACH_PORT_RIGHT_LABELH = 5;

const int MACH_PORT_RIGHT_NUMBER = 6;

const int MACH_PORT_TYPE_NONE = 0;

const int MACH_PORT_TYPE_SEND = 65536;

const int MACH_PORT_TYPE_RECEIVE = 131072;

const int MACH_PORT_TYPE_SEND_ONCE = 262144;

const int MACH_PORT_TYPE_PORT_SET = 524288;

const int MACH_PORT_TYPE_DEAD_NAME = 1048576;

const int MACH_PORT_TYPE_LABELH = 2097152;

const int MACH_PORT_TYPE_SEND_RECEIVE = 196608;

const int MACH_PORT_TYPE_SEND_RIGHTS = 327680;

const int MACH_PORT_TYPE_PORT_RIGHTS = 458752;

const int MACH_PORT_TYPE_PORT_OR_DEAD = 1507328;

const int MACH_PORT_TYPE_ALL_RIGHTS = 2031616;

const int MACH_PORT_TYPE_DNREQUEST = 2147483648;

const int MACH_PORT_TYPE_SPREQUEST = 1073741824;

const int MACH_PORT_TYPE_SPREQUEST_DELAYED = 536870912;

const int MACH_PORT_SRIGHTS_NONE = 0;

const int MACH_PORT_SRIGHTS_PRESENT = 1;

const int MACH_PORT_QLIMIT_ZERO = 0;

const int MACH_PORT_QLIMIT_BASIC = 5;

const int MACH_PORT_QLIMIT_SMALL = 16;

const int MACH_PORT_QLIMIT_LARGE = 1024;

const int MACH_PORT_QLIMIT_KERNEL = 65534;

const int MACH_PORT_QLIMIT_MIN = 0;

const int MACH_PORT_QLIMIT_DEFAULT = 5;

const int MACH_PORT_QLIMIT_MAX = 1024;

const int MACH_PORT_STATUS_FLAG_TEMPOWNER = 1;

const int MACH_PORT_STATUS_FLAG_GUARDED = 2;

const int MACH_PORT_STATUS_FLAG_STRICT_GUARD = 4;

const int MACH_PORT_STATUS_FLAG_IMP_DONATION = 8;

const int MACH_PORT_STATUS_FLAG_REVIVE = 16;

const int MACH_PORT_STATUS_FLAG_TASKPTR = 32;

const int MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE = 64;

const int MACH_PORT_STATUS_FLAG_NO_GRANT = 128;

const int MACH_PORT_LIMITS_INFO = 1;

const int MACH_PORT_RECEIVE_STATUS = 2;

const int MACH_PORT_DNREQUESTS_SIZE = 3;

const int MACH_PORT_TEMPOWNER = 4;

const int MACH_PORT_IMPORTANCE_RECEIVER = 5;

const int MACH_PORT_DENAP_RECEIVER = 6;

const int MACH_PORT_INFO_EXT = 7;

const int MACH_PORT_GUARD_INFO = 8;

const int MACH_PORT_LIMITS_INFO_COUNT = 1;

const int MACH_PORT_RECEIVE_STATUS_COUNT = 10;

const int MACH_PORT_DNREQUESTS_SIZE_COUNT = 1;

const int MACH_PORT_INFO_EXT_COUNT = 17;

const int MACH_PORT_GUARD_INFO_COUNT = 2;

const int MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN = 255;

const int MACH_SERVICE_PORT_INFO_COUNT = 0;

const int MPO_CONTEXT_AS_GUARD = 1;

const int MPO_QLIMIT = 2;

const int MPO_TEMPOWNER = 4;

const int MPO_IMPORTANCE_RECEIVER = 8;

const int MPO_INSERT_SEND_RIGHT = 16;

const int MPO_STRICT = 32;

const int MPO_DENAP_RECEIVER = 64;

const int MPO_IMMOVABLE_RECEIVE = 128;

const int MPO_FILTER_MSG = 256;

const int MPO_TG_BLOCK_TRACKING = 512;

const int MPO_SERVICE_PORT = 1024;

const int MPO_CONNECTION_PORT = 2048;

const int GUARD_TYPE_MACH_PORT = 1;

const int MAX_FATAL_kGUARD_EXC_CODE = 128;

const int MPG_FLAGS_NONE = 0;

const int MAX_OPTIONAL_kGUARD_EXC_CODE = 524288;

const int MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP = 72057594037927936;

const int MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT = 144115188075855872;

const int MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER = 288230376151711744;

const int MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR = 576460752303423488;

const int MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA = 1152921504606846976;

const int MPG_FLAGS_STRICT_REPLY_MASK = -72057594037927936;

const int MPG_FLAGS_MOD_REFS_PINNED_DEALLOC = 72057594037927936;

const int MPG_FLAGS_MOD_REFS_PINNED_DESTROY = 144115188075855872;

const int MPG_FLAGS_MOD_REFS_PINNED_COPYIN = 288230376151711744;

const int MPG_FLAGS_IMMOVABLE_PINNED = 72057594037927936;

const int MPG_STRICT = 1;

const int MPG_IMMOVABLE_RECEIVE = 2;

const int __COREFOUNDATION_CFSOCKET__ = 1;

const int _POSIX_VERSION = 200112;

const int _POSIX2_VERSION = 200112;

const int _POSIX_VDISABLE = 255;

const int F_OK = 0;

const int X_OK = 1;

const int W_OK = 2;

const int R_OK = 4;

const int _READ_OK = 512;

const int _WRITE_OK = 1024;

const int _EXECUTE_OK = 2048;

const int _DELETE_OK = 4096;

const int _APPEND_OK = 8192;

const int _RMFILE_OK = 16384;

const int _RATTR_OK = 32768;

const int _WATTR_OK = 65536;

const int _REXT_OK = 131072;

const int _WEXT_OK = 262144;

const int _RPERM_OK = 524288;

const int _WPERM_OK = 1048576;

const int _CHOWN_OK = 2097152;

const int _ACCESS_EXTENDED_MASK = 4193792;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int ACCESSX_MAX_DESCRIPTORS = 100;

const int ACCESSX_MAX_TABLESIZE = 16384;

const int _PC_LINK_MAX = 1;

const int _PC_MAX_CANON = 2;

const int _PC_MAX_INPUT = 3;

const int _PC_NAME_MAX = 4;

const int _PC_PATH_MAX = 5;

const int _PC_PIPE_BUF = 6;

const int _PC_CHOWN_RESTRICTED = 7;

const int _PC_NO_TRUNC = 8;

const int _PC_VDISABLE = 9;

const int _PC_NAME_CHARS_MAX = 10;

const int _PC_CASE_SENSITIVE = 11;

const int _PC_CASE_PRESERVING = 12;

const int _PC_EXTENDED_SECURITY_NP = 13;

const int _PC_AUTH_OPAQUE_NP = 14;

const int _PC_2_SYMLINKS = 15;

const int _PC_ALLOC_SIZE_MIN = 16;

const int _PC_ASYNC_IO = 17;

const int _PC_FILESIZEBITS = 18;

const int _PC_PRIO_IO = 19;

const int _PC_REC_INCR_XFER_SIZE = 20;

const int _PC_REC_MAX_XFER_SIZE = 21;

const int _PC_REC_MIN_XFER_SIZE = 22;

const int _PC_REC_XFER_ALIGN = 23;

const int _PC_SYMLINK_MAX = 24;

const int _PC_SYNC_IO = 25;

const int _PC_XATTR_SIZE_BITS = 26;

const int _PC_MIN_HOLE_SIZE = 27;

const int _CS_PATH = 1;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _XOPEN_VERSION = 600;

const int _XOPEN_XCU_VERSION = 4;

const int _POSIX_ADVISORY_INFO = -1;

const int _POSIX_ASYNCHRONOUS_IO = -1;

const int _POSIX_BARRIERS = -1;

const int _POSIX_CHOWN_RESTRICTED = 200112;

const int _POSIX_CLOCK_SELECTION = -1;

const int _POSIX_CPUTIME = -1;

const int _POSIX_FSYNC = 200112;

const int _POSIX_IPV6 = 200112;

const int _POSIX_JOB_CONTROL = 200112;

const int _POSIX_MAPPED_FILES = 200112;

const int _POSIX_MEMLOCK = -1;

const int _POSIX_MEMLOCK_RANGE = -1;

const int _POSIX_MEMORY_PROTECTION = 200112;

const int _POSIX_MESSAGE_PASSING = -1;

const int _POSIX_MONOTONIC_CLOCK = -1;

const int _POSIX_NO_TRUNC = 200112;

const int _POSIX_PRIORITIZED_IO = -1;

const int _POSIX_PRIORITY_SCHEDULING = -1;

const int _POSIX_RAW_SOCKETS = -1;

const int _POSIX_READER_WRITER_LOCKS = 200112;

const int _POSIX_REALTIME_SIGNALS = -1;

const int _POSIX_REGEXP = 200112;

const int _POSIX_SAVED_IDS = 200112;

const int _POSIX_SEMAPHORES = -1;

const int _POSIX_SHARED_MEMORY_OBJECTS = -1;

const int _POSIX_SHELL = 200112;

const int _POSIX_SPAWN = -1;

const int _POSIX_SPIN_LOCKS = -1;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_SYNCHRONIZED_IO = -1;

const int _POSIX_THREAD_ATTR_STACKADDR = 200112;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200112;

const int _POSIX_THREAD_CPUTIME = -1;

const int _POSIX_THREAD_PRIO_INHERIT = -1;

const int _POSIX_THREAD_PRIO_PROTECT = -1;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = -1;

const int _POSIX_THREAD_PROCESS_SHARED = 200112;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200112;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_THREADS = 200112;

const int _POSIX_TIMEOUTS = -1;

const int _POSIX_TIMERS = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX2_C_BIND = 200112;

const int _POSIX2_C_DEV = 200112;

const int _POSIX2_CHAR_TERM = 200112;

const int _POSIX2_FORT_DEV = -1;

const int _POSIX2_FORT_RUN = 200112;

const int _POSIX2_LOCALEDEF = 200112;

const int _POSIX2_PBS = -1;

const int _POSIX2_PBS_ACCOUNTING = -1;

const int _POSIX2_PBS_CHECKPOINT = -1;

const int _POSIX2_PBS_LOCATE = -1;

const int _POSIX2_PBS_MESSAGE = -1;

const int _POSIX2_PBS_TRACK = -1;

const int _POSIX2_SW_DEV = 200112;

const int _POSIX2_UPE = 200112;

const int __ILP32_OFF32 = -1;

const int __ILP32_OFFBIG = -1;

const int __LP64_OFF64 = 1;

const int __LPBIG_OFFBIG = 1;

const int _POSIX_V6_ILP32_OFF32 = -1;

const int _POSIX_V6_ILP32_OFFBIG = -1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _POSIX_V6_LPBIG_OFFBIG = 1;

const int _POSIX_V7_ILP32_OFF32 = -1;

const int _POSIX_V7_ILP32_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V7_LPBIG_OFFBIG = 1;

const int _V6_ILP32_OFF32 = -1;

const int _V6_ILP32_OFFBIG = -1;

const int _V6_LP64_OFF64 = 1;

const int _V6_LPBIG_OFFBIG = 1;

const int _XBS5_ILP32_OFF32 = -1;

const int _XBS5_ILP32_OFFBIG = -1;

const int _XBS5_LP64_OFF64 = 1;

const int _XBS5_LPBIG_OFFBIG = 1;

const int _XOPEN_CRYPT = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = -1;

const int _XOPEN_REALTIME = -1;

const int _XOPEN_REALTIME_THREADS = -1;

const int _XOPEN_SHM = 1;

const int _XOPEN_STREAMS = -1;

const int _XOPEN_UNIX = 1;

const int _SC_ARG_MAX = 1;

const int _SC_CHILD_MAX = 2;

const int _SC_CLK_TCK = 3;

const int _SC_NGROUPS_MAX = 4;

const int _SC_OPEN_MAX = 5;

const int _SC_JOB_CONTROL = 6;

const int _SC_SAVED_IDS = 7;

const int _SC_VERSION = 8;

const int _SC_BC_BASE_MAX = 9;

const int _SC_BC_DIM_MAX = 10;

const int _SC_BC_SCALE_MAX = 11;

const int _SC_BC_STRING_MAX = 12;

const int _SC_COLL_WEIGHTS_MAX = 13;

const int _SC_EXPR_NEST_MAX = 14;

const int _SC_LINE_MAX = 15;

const int _SC_RE_DUP_MAX = 16;

const int _SC_2_VERSION = 17;

const int _SC_2_C_BIND = 18;

const int _SC_2_C_DEV = 19;

const int _SC_2_CHAR_TERM = 20;

const int _SC_2_FORT_DEV = 21;

const int _SC_2_FORT_RUN = 22;

const int _SC_2_LOCALEDEF = 23;

const int _SC_2_SW_DEV = 24;

const int _SC_2_UPE = 25;

const int _SC_STREAM_MAX = 26;

const int _SC_TZNAME_MAX = 27;

const int _SC_ASYNCHRONOUS_IO = 28;

const int _SC_PAGESIZE = 29;

const int _SC_MEMLOCK = 30;

const int _SC_MEMLOCK_RANGE = 31;

const int _SC_MEMORY_PROTECTION = 32;

const int _SC_MESSAGE_PASSING = 33;

const int _SC_PRIORITIZED_IO = 34;

const int _SC_PRIORITY_SCHEDULING = 35;

const int _SC_REALTIME_SIGNALS = 36;

const int _SC_SEMAPHORES = 37;

const int _SC_FSYNC = 38;

const int _SC_SHARED_MEMORY_OBJECTS = 39;

const int _SC_SYNCHRONIZED_IO = 40;

const int _SC_TIMERS = 41;

const int _SC_AIO_LISTIO_MAX = 42;

const int _SC_AIO_MAX = 43;

const int _SC_AIO_PRIO_DELTA_MAX = 44;

const int _SC_DELAYTIMER_MAX = 45;

const int _SC_MQ_OPEN_MAX = 46;

const int _SC_MAPPED_FILES = 47;

const int _SC_RTSIG_MAX = 48;

const int _SC_SEM_NSEMS_MAX = 49;

const int _SC_SEM_VALUE_MAX = 50;

const int _SC_SIGQUEUE_MAX = 51;

const int _SC_TIMER_MAX = 52;

const int _SC_NPROCESSORS_CONF = 57;

const int _SC_NPROCESSORS_ONLN = 58;

const int _SC_2_PBS = 59;

const int _SC_2_PBS_ACCOUNTING = 60;

const int _SC_2_PBS_CHECKPOINT = 61;

const int _SC_2_PBS_LOCATE = 62;

const int _SC_2_PBS_MESSAGE = 63;

const int _SC_2_PBS_TRACK = 64;

const int _SC_ADVISORY_INFO = 65;

const int _SC_BARRIERS = 66;

const int _SC_CLOCK_SELECTION = 67;

const int _SC_CPUTIME = 68;

const int _SC_FILE_LOCKING = 69;

const int _SC_GETGR_R_SIZE_MAX = 70;

const int _SC_GETPW_R_SIZE_MAX = 71;

const int _SC_HOST_NAME_MAX = 72;

const int _SC_LOGIN_NAME_MAX = 73;

const int _SC_MONOTONIC_CLOCK = 74;

const int _SC_MQ_PRIO_MAX = 75;

const int _SC_READER_WRITER_LOCKS = 76;

const int _SC_REGEXP = 77;

const int _SC_SHELL = 78;

const int _SC_SPAWN = 79;

const int _SC_SPIN_LOCKS = 80;

const int _SC_SPORADIC_SERVER = 81;

const int _SC_THREAD_ATTR_STACKADDR = 82;

const int _SC_THREAD_ATTR_STACKSIZE = 83;

const int _SC_THREAD_CPUTIME = 84;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;

const int _SC_THREAD_KEYS_MAX = 86;

const int _SC_THREAD_PRIO_INHERIT = 87;

const int _SC_THREAD_PRIO_PROTECT = 88;

const int _SC_THREAD_PRIORITY_SCHEDULING = 89;

const int _SC_THREAD_PROCESS_SHARED = 90;

const int _SC_THREAD_SAFE_FUNCTIONS = 91;

const int _SC_THREAD_SPORADIC_SERVER = 92;

const int _SC_THREAD_STACK_MIN = 93;

const int _SC_THREAD_THREADS_MAX = 94;

const int _SC_TIMEOUTS = 95;

const int _SC_THREADS = 96;

const int _SC_TRACE = 97;

const int _SC_TRACE_EVENT_FILTER = 98;

const int _SC_TRACE_INHERIT = 99;

const int _SC_TRACE_LOG = 100;

const int _SC_TTY_NAME_MAX = 101;

const int _SC_TYPED_MEMORY_OBJECTS = 102;

const int _SC_V6_ILP32_OFF32 = 103;

const int _SC_V6_ILP32_OFFBIG = 104;

const int _SC_V6_LP64_OFF64 = 105;

const int _SC_V6_LPBIG_OFFBIG = 106;

const int _SC_IPV6 = 118;

const int _SC_RAW_SOCKETS = 119;

const int _SC_SYMLOOP_MAX = 120;

const int _SC_ATEXIT_MAX = 107;

const int _SC_IOV_MAX = 56;

const int _SC_PAGE_SIZE = 29;

const int _SC_XOPEN_CRYPT = 108;

const int _SC_XOPEN_ENH_I18N = 109;

const int _SC_XOPEN_LEGACY = 110;

const int _SC_XOPEN_REALTIME = 111;

const int _SC_XOPEN_REALTIME_THREADS = 112;

const int _SC_XOPEN_SHM = 113;

const int _SC_XOPEN_STREAMS = 114;

const int _SC_XOPEN_UNIX = 115;

const int _SC_XOPEN_VERSION = 116;

const int _SC_XOPEN_XCU_VERSION = 121;

const int _SC_XBS5_ILP32_OFF32 = 122;

const int _SC_XBS5_ILP32_OFFBIG = 123;

const int _SC_XBS5_LP64_OFF64 = 124;

const int _SC_XBS5_LPBIG_OFFBIG = 125;

const int _SC_SS_REPL_MAX = 126;

const int _SC_TRACE_EVENT_NAME_MAX = 127;

const int _SC_TRACE_NAME_MAX = 128;

const int _SC_TRACE_SYS_MAX = 129;

const int _SC_TRACE_USER_EVENT_MAX = 130;

const int _SC_PASS_MAX = 131;

const int _SC_PHYS_PAGES = 200;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 10;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 20;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;

const int _CS_XBS5_ILP32_OFF32_LIBS = 22;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 26;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 28;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 29;

const int _CS_XBS5_LP64_OFF64_LIBS = 30;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;

const int _CS_DARWIN_USER_DIR = 65536;

const int _CS_DARWIN_USER_TEMP_DIR = 65537;

const int _CS_DARWIN_USER_CACHE_DIR = 65538;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int SYNC_VOLUME_FULLSYNC = 1;

const int SYNC_VOLUME_WAIT = 2;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_ACCMODE = 3;

const int FREAD = 1;

const int FWRITE = 2;

const int O_NONBLOCK = 4;

const int O_APPEND = 8;

const int O_SYNC = 128;

const int O_SHLOCK = 16;

const int O_EXLOCK = 32;

const int O_ASYNC = 64;

const int O_FSYNC = 128;

const int O_NOFOLLOW = 256;

const int O_CREAT = 512;

const int O_TRUNC = 1024;

const int O_EXCL = 2048;

const int O_EVTONLY = 32768;

const int O_NOCTTY = 131072;

const int O_DIRECTORY = 1048576;

const int O_SYMLINK = 2097152;

const int O_DSYNC = 4194304;

const int O_CLOEXEC = 16777216;

const int O_NOFOLLOW_ANY = 536870912;

const int AT_FDCWD = -2;

const int AT_EACCESS = 16;

const int AT_SYMLINK_NOFOLLOW = 32;

const int AT_SYMLINK_FOLLOW = 64;

const int AT_REMOVEDIR = 128;

const int AT_REALDEV = 512;

const int AT_FDONLY = 1024;

const int AT_SYMLINK_NOFOLLOW_ANY = 2048;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int FAPPEND = 8;

const int FASYNC = 64;

const int FFSYNC = 128;

const int FFDSYNC = 4194304;

const int FNONBLOCK = 4;

const int FNDELAY = 4;

const int O_NDELAY = 4;

const int CPF_OVERWRITE = 1;

const int CPF_IGNORE_MODE = 2;

const int CPF_MASK = 3;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int F_GETOWN = 5;

const int F_SETOWN = 6;

const int F_GETLK = 7;

const int F_SETLK = 8;

const int F_SETLKW = 9;

const int F_SETLKWTIMEOUT = 10;

const int F_FLUSH_DATA = 40;

const int F_CHKCLEAN = 41;

const int F_PREALLOCATE = 42;

const int F_SETSIZE = 43;

const int F_RDADVISE = 44;

const int F_RDAHEAD = 45;

const int F_NOCACHE = 48;

const int F_LOG2PHYS = 49;

const int F_GETPATH = 50;

const int F_FULLFSYNC = 51;

const int F_PATHPKG_CHECK = 52;

const int F_FREEZE_FS = 53;

const int F_THAW_FS = 54;

const int F_GLOBAL_NOCACHE = 55;

const int F_ADDSIGS = 59;

const int F_ADDFILESIGS = 61;

const int F_NODIRECT = 62;

const int F_GETPROTECTIONCLASS = 63;

const int F_SETPROTECTIONCLASS = 64;

const int F_LOG2PHYS_EXT = 65;

const int F_GETLKPID = 66;

const int F_SETBACKINGSTORE = 70;

const int F_GETPATH_MTMINFO = 71;

const int F_GETCODEDIR = 72;

const int F_SETNOSIGPIPE = 73;

const int F_GETNOSIGPIPE = 74;

const int F_TRANSCODEKEY = 75;

const int F_SINGLE_WRITER = 76;

const int F_GETPROTECTIONLEVEL = 77;

const int F_FINDSIGS = 78;

const int F_ADDFILESIGS_FOR_DYLD_SIM = 83;

const int F_BARRIERFSYNC = 85;

const int F_ADDFILESIGS_RETURN = 97;

const int F_CHECK_LV = 98;

const int F_PUNCHHOLE = 99;

const int F_TRIM_ACTIVE_FILE = 100;

const int F_SPECULATIVE_READ = 101;

const int F_GETPATH_NOFIRMLINK = 102;

const int F_ADDFILESIGS_INFO = 103;

const int F_ADDFILESUPPL = 104;

const int F_GETSIGSINFO = 105;

const int F_FSRESERVED = 106;

const int FCNTL_FS_SPECIFIC_BASE = 65536;

const int F_DUPFD_CLOEXEC = 67;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 1;

const int F_UNLCK = 2;

const int F_WRLCK = 3;

const int S_IFMT = 61440;

const int S_IFIFO = 4096;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_IFWHT = 57344;

const int S_IRWXU = 448;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXG = 56;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXO = 7;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_ISTXT = 512;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int F_ALLOCATECONTIG = 2;

const int F_ALLOCATEALL = 4;

const int F_PEOFPOSMODE = 3;

const int F_VOLPOSMODE = 4;

const int USER_FSIGNATURES_CDHASH_LEN = 20;

const int GETSIGSINFO_PLATFORM_BINARY = 1;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int O_POPUP = 2147483648;

const int O_ALERT = 536870912;

const int FILESEC_GUID = 3;

const int DISPATCH_API_VERSION = 20181008;

const int __OS_WORKGROUP_ATTR_SIZE__ = 60;

const int __OS_WORKGROUP_INTERVAL_DATA_SIZE__ = 56;

const int __OS_WORKGROUP_JOIN_TOKEN_SIZE__ = 36;

const int _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT = 799564724;

const int _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT = 799564740;

const int _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT = 1386695757;

const int DISPATCH_SWIFT3_OVERLAY = 0;

const int TIME_MICROS_MAX = 1000000;

const int SYSTEM_CLOCK = 0;

const int CALENDAR_CLOCK = 1;

const int REALTIME_CLOCK = 0;

const int CLOCK_GET_TIME_RES = 1;

const int CLOCK_ALARM_CURRES = 3;

const int CLOCK_ALARM_MINRES = 4;

const int CLOCK_ALARM_MAXRES = 5;

const int NSEC_PER_USEC = 1000;

const int USEC_PER_SEC = 1000000;

const int NSEC_PER_SEC = 1000000000;

const int NSEC_PER_MSEC = 1000000;

const int ALRMTYPE = 255;

const int TIME_ABSOLUTE = 0;

const int TIME_RELATIVE = 1;

const int DISPATCH_TIME_NOW = 0;

const int DISPATCH_TIME_FOREVER = -1;

const int QOS_MIN_RELATIVE_PRIORITY = -15;

const int DISPATCH_APPLY_AUTO_AVAILABLE = 1;

const int DISPATCH_QUEUE_PRIORITY_HIGH = 2;

const int DISPATCH_QUEUE_PRIORITY_DEFAULT = 0;

const int DISPATCH_QUEUE_PRIORITY_LOW = -2;

const int DISPATCH_QUEUE_PRIORITY_BACKGROUND = -32768;

const int DISPATCH_QUEUE_SERIAL = 0;

const int DISPATCH_TARGET_QUEUE_DEFAULT = 0;

const int DISPATCH_CURRENT_QUEUE_LABEL = 0;

const int KERN_SUCCESS = 0;

const int KERN_INVALID_ADDRESS = 1;

const int KERN_PROTECTION_FAILURE = 2;

const int KERN_NO_SPACE = 3;

const int KERN_INVALID_ARGUMENT = 4;

const int KERN_FAILURE = 5;

const int KERN_RESOURCE_SHORTAGE = 6;

const int KERN_NOT_RECEIVER = 7;

const int KERN_NO_ACCESS = 8;

const int KERN_MEMORY_FAILURE = 9;

const int KERN_MEMORY_ERROR = 10;

const int KERN_ALREADY_IN_SET = 11;

const int KERN_NOT_IN_SET = 12;

const int KERN_NAME_EXISTS = 13;

const int KERN_ABORTED = 14;

const int KERN_INVALID_NAME = 15;

const int KERN_INVALID_TASK = 16;

const int KERN_INVALID_RIGHT = 17;

const int KERN_INVALID_VALUE = 18;

const int KERN_UREFS_OVERFLOW = 19;

const int KERN_INVALID_CAPABILITY = 20;

const int KERN_RIGHT_EXISTS = 21;

const int KERN_INVALID_HOST = 22;

const int KERN_MEMORY_PRESENT = 23;

const int KERN_MEMORY_DATA_MOVED = 24;

const int KERN_MEMORY_RESTART_COPY = 25;

const int KERN_INVALID_PROCESSOR_SET = 26;

const int KERN_POLICY_LIMIT = 27;

const int KERN_INVALID_POLICY = 28;

const int KERN_INVALID_OBJECT = 29;

const int KERN_ALREADY_WAITING = 30;

const int KERN_DEFAULT_SET = 31;

const int KERN_EXCEPTION_PROTECTED = 32;

const int KERN_INVALID_LEDGER = 33;

const int KERN_INVALID_MEMORY_CONTROL = 34;

const int KERN_INVALID_SECURITY = 35;

const int KERN_NOT_DEPRESSED = 36;

const int KERN_TERMINATED = 37;

const int KERN_LOCK_SET_DESTROYED = 38;

const int KERN_LOCK_UNSTABLE = 39;

const int KERN_LOCK_OWNED = 40;

const int KERN_LOCK_OWNED_SELF = 41;

const int KERN_SEMAPHORE_DESTROYED = 42;

const int KERN_RPC_SERVER_TERMINATED = 43;

const int KERN_RPC_TERMINATE_ORPHAN = 44;

const int KERN_RPC_CONTINUE_ORPHAN = 45;

const int KERN_NOT_SUPPORTED = 46;

const int KERN_NODE_DOWN = 47;

const int KERN_NOT_WAITING = 48;

const int KERN_OPERATION_TIMED_OUT = 49;

const int KERN_CODESIGN_ERROR = 50;

const int KERN_POLICY_STATIC = 51;

const int KERN_INSUFFICIENT_BUFFER_SIZE = 52;

const int KERN_DENIED = 53;

const int KERN_MISSING_KC = 54;

const int KERN_INVALID_KC = 55;

const int KERN_NOT_FOUND = 56;

const int KERN_RETURN_MAX = 256;

const int MACH_MSG_TIMEOUT_NONE = 0;

const int MACH_MSGH_BITS_ZERO = 0;

const int MACH_MSGH_BITS_REMOTE_MASK = 31;

const int MACH_MSGH_BITS_LOCAL_MASK = 7936;

const int MACH_MSGH_BITS_VOUCHER_MASK = 2031616;

const int MACH_MSGH_BITS_PORTS_MASK = 2039583;

const int MACH_MSGH_BITS_COMPLEX = 2147483648;

const int MACH_MSGH_BITS_USER = 2149523231;

const int MACH_MSGH_BITS_RAISEIMP = 536870912;

const int MACH_MSGH_BITS_DENAP = 536870912;

const int MACH_MSGH_BITS_IMPHOLDASRT = 268435456;

const int MACH_MSGH_BITS_DENAPHOLDASRT = 268435456;

const int MACH_MSGH_BITS_CIRCULAR = 268435456;

const int MACH_MSGH_BITS_USED = 2954829599;

const int MACH_MSG_PRIORITY_UNSPECIFIED = 0;

const int MACH_MSG_TYPE_MOVE_RECEIVE = 16;

const int MACH_MSG_TYPE_MOVE_SEND = 17;

const int MACH_MSG_TYPE_MOVE_SEND_ONCE = 18;

const int MACH_MSG_TYPE_COPY_SEND = 19;

const int MACH_MSG_TYPE_MAKE_SEND = 20;

const int MACH_MSG_TYPE_MAKE_SEND_ONCE = 21;

const int MACH_MSG_TYPE_COPY_RECEIVE = 22;

const int MACH_MSG_TYPE_DISPOSE_RECEIVE = 24;

const int MACH_MSG_TYPE_DISPOSE_SEND = 25;

const int MACH_MSG_TYPE_DISPOSE_SEND_ONCE = 26;

const int MACH_MSG_PHYSICAL_COPY = 0;

const int MACH_MSG_VIRTUAL_COPY = 1;

const int MACH_MSG_ALLOCATE = 2;

const int MACH_MSG_OVERWRITE = 3;

const int MACH_MSG_GUARD_FLAGS_NONE = 0;

const int MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE = 1;

const int MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND = 2;

const int MACH_MSG_GUARD_FLAGS_MASK = 3;

const int MACH_MSG_PORT_DESCRIPTOR = 0;

const int MACH_MSG_OOL_DESCRIPTOR = 1;

const int MACH_MSG_OOL_PORTS_DESCRIPTOR = 2;

const int MACH_MSG_OOL_VOLATILE_DESCRIPTOR = 3;

const int MACH_MSG_GUARDED_PORT_DESCRIPTOR = 4;

const int MACH_MSG_TRAILER_FORMAT_0 = 0;

const int MACH_MSG_FILTER_POLICY_ALLOW = 0;

const int MACH_MSG_TRAILER_MINIMUM_SIZE = 8;

const int MAX_TRAILER_SIZE = 68;

const int MACH_MSG_TRAILER_FORMAT_0_SIZE = 20;

const int MACH_MSG_SIZE_MAX = 4294967295;

const int MACH_MSG_SIZE_RELIABLE = 262144;

const int MACH_MSGH_KIND_NORMAL = 0;

const int MACH_MSGH_KIND_NOTIFICATION = 1;

const int MACH_MSG_TYPE_PORT_NONE = 0;

const int MACH_MSG_TYPE_PORT_NAME = 15;

const int MACH_MSG_TYPE_PORT_RECEIVE = 16;

const int MACH_MSG_TYPE_PORT_SEND = 17;

const int MACH_MSG_TYPE_PORT_SEND_ONCE = 18;

const int MACH_MSG_TYPE_LAST = 22;

const int MACH_MSG_TYPE_POLYMORPHIC = 4294967295;

const int MACH_MSG_OPTION_NONE = 0;

const int MACH_SEND_MSG = 1;

const int MACH_RCV_MSG = 2;

const int MACH_RCV_LARGE = 4;

const int MACH_RCV_LARGE_IDENTITY = 8;

const int MACH_SEND_TIMEOUT = 16;

const int MACH_SEND_OVERRIDE = 32;

const int MACH_SEND_INTERRUPT = 64;

const int MACH_SEND_NOTIFY = 128;

const int MACH_SEND_ALWAYS = 65536;

const int MACH_SEND_FILTER_NONFATAL = 65536;

const int MACH_SEND_TRAILER = 131072;

const int MACH_SEND_NOIMPORTANCE = 262144;

const int MACH_SEND_NODENAP = 262144;

const int MACH_SEND_IMPORTANCE = 524288;

const int MACH_SEND_SYNC_OVERRIDE = 1048576;

const int MACH_SEND_PROPAGATE_QOS = 2097152;

const int MACH_SEND_SYNC_USE_THRPRI = 2097152;

const int MACH_SEND_KERNEL = 4194304;

const int MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = 8388608;

const int MACH_RCV_TIMEOUT = 256;

const int MACH_RCV_NOTIFY = 0;

const int MACH_RCV_INTERRUPT = 1024;

const int MACH_RCV_VOUCHER = 2048;

const int MACH_RCV_OVERWRITE = 0;

const int MACH_RCV_GUARDED_DESC = 4096;

const int MACH_RCV_SYNC_WAIT = 16384;

const int MACH_RCV_SYNC_PEEK = 32768;

const int MACH_MSG_STRICT_REPLY = 512;

const int MACH_RCV_TRAILER_NULL = 0;

const int MACH_RCV_TRAILER_SEQNO = 1;

const int MACH_RCV_TRAILER_SENDER = 2;

const int MACH_RCV_TRAILER_AUDIT = 3;

const int MACH_RCV_TRAILER_CTX = 4;

const int MACH_RCV_TRAILER_AV = 7;

const int MACH_RCV_TRAILER_LABELS = 8;

const int MACH_RCV_TRAILER_MASK = 251658240;

const int MACH_MSG_SUCCESS = 0;

const int MACH_MSG_MASK = 15872;

const int MACH_MSG_IPC_SPACE = 8192;

const int MACH_MSG_VM_SPACE = 4096;

const int MACH_MSG_IPC_KERNEL = 2048;

const int MACH_MSG_VM_KERNEL = 1024;

const int MACH_SEND_IN_PROGRESS = 268435457;

const int MACH_SEND_INVALID_DATA = 268435458;

const int MACH_SEND_INVALID_DEST = 268435459;

const int MACH_SEND_TIMED_OUT = 268435460;

const int MACH_SEND_INVALID_VOUCHER = 268435461;

const int MACH_SEND_INTERRUPTED = 268435463;

const int MACH_SEND_MSG_TOO_SMALL = 268435464;

const int MACH_SEND_INVALID_REPLY = 268435465;

const int MACH_SEND_INVALID_RIGHT = 268435466;

const int MACH_SEND_INVALID_NOTIFY = 268435467;

const int MACH_SEND_INVALID_MEMORY = 268435468;

const int MACH_SEND_NO_BUFFER = 268435469;

const int MACH_SEND_TOO_LARGE = 268435470;

const int MACH_SEND_INVALID_TYPE = 268435471;

const int MACH_SEND_INVALID_HEADER = 268435472;

const int MACH_SEND_INVALID_TRAILER = 268435473;

const int MACH_SEND_INVALID_CONTEXT = 268435474;

const int MACH_SEND_INVALID_RT_OOL_SIZE = 268435477;

const int MACH_SEND_NO_GRANT_DEST = 268435478;

const int MACH_SEND_MSG_FILTERED = 268435479;

const int MACH_RCV_IN_PROGRESS = 268451841;

const int MACH_RCV_INVALID_NAME = 268451842;

const int MACH_RCV_TIMED_OUT = 268451843;

const int MACH_RCV_TOO_LARGE = 268451844;

const int MACH_RCV_INTERRUPTED = 268451845;

const int MACH_RCV_PORT_CHANGED = 268451846;

const int MACH_RCV_INVALID_NOTIFY = 268451847;

const int MACH_RCV_INVALID_DATA = 268451848;

const int MACH_RCV_PORT_DIED = 268451849;

const int MACH_RCV_IN_SET = 268451850;

const int MACH_RCV_HEADER_ERROR = 268451851;

const int MACH_RCV_BODY_ERROR = 268451852;

const int MACH_RCV_INVALID_TYPE = 268451853;

const int MACH_RCV_SCATTER_SMALL = 268451854;

const int MACH_RCV_INVALID_TRAILER = 268451855;

const int MACH_RCV_IN_PROGRESS_TIMED = 268451857;

const int MACH_RCV_INVALID_REPLY = 268451858;

const int DISPATCH_MACH_SEND_DEAD = 1;

const int DISPATCH_MEMORYPRESSURE_NORMAL = 1;

const int DISPATCH_MEMORYPRESSURE_WARN = 2;

const int DISPATCH_MEMORYPRESSURE_CRITICAL = 4;

const int DISPATCH_PROC_EXIT = 2147483648;

const int DISPATCH_PROC_FORK = 1073741824;

const int DISPATCH_PROC_EXEC = 536870912;

const int DISPATCH_PROC_SIGNAL = 134217728;

const int DISPATCH_VNODE_DELETE = 1;

const int DISPATCH_VNODE_WRITE = 2;

const int DISPATCH_VNODE_EXTEND = 4;

const int DISPATCH_VNODE_ATTRIB = 8;

const int DISPATCH_VNODE_LINK = 16;

const int DISPATCH_VNODE_RENAME = 32;

const int DISPATCH_VNODE_REVOKE = 64;

const int DISPATCH_VNODE_FUNLOCK = 256;

const int DISPATCH_TIMER_STRICT = 1;

const int DISPATCH_ONCE_INLINE_FASTPATH = 1;

const int DISPATCH_DATA_DESTRUCTOR_DEFAULT = 0;

const int DISPATCH_IO_STREAM = 0;

const int DISPATCH_IO_RANDOM = 1;

const int DISPATCH_IO_STOP = 1;

const int DISPATCH_IO_STRICT_INTERVAL = 1;

const int __COREFOUNDATION_CFSET__ = 1;

const int __COREFOUNDATION_CFSTRINGENCODINGEXT__ = 1;

const int __COREFOUNDATION_CFTREE__ = 1;

const int __COREFOUNDATION_CFURLACCESS__ = 1;

const int __COREFOUNDATION_CFUUID__ = 1;

const int __COREFOUNDATION_CFUTILITIES__ = 1;

const int __COREFOUNDATION_CFBUNDLE__ = 1;

const int CPU_STATE_MAX = 4;

const int CPU_STATE_USER = 0;

const int CPU_STATE_SYSTEM = 1;

const int CPU_STATE_IDLE = 2;

const int CPU_STATE_NICE = 3;

const int CPU_ARCH_MASK = 4278190080;

const int CPU_ARCH_ABI64 = 16777216;

const int CPU_ARCH_ABI64_32 = 33554432;

const int CPU_TYPE_ANY = -1;

const int CPU_TYPE_VAX = 1;

const int CPU_TYPE_MC680x0 = 6;

const int CPU_TYPE_X86 = 7;

const int CPU_TYPE_I386 = 7;

const int CPU_TYPE_X86_64 = 16777223;

const int CPU_TYPE_MC98000 = 10;

const int CPU_TYPE_HPPA = 11;

const int CPU_TYPE_ARM = 12;

const int CPU_TYPE_ARM64 = 16777228;

const int CPU_TYPE_ARM64_32 = 33554444;

const int CPU_TYPE_MC88000 = 13;

const int CPU_TYPE_SPARC = 14;

const int CPU_TYPE_I860 = 15;

const int CPU_TYPE_POWERPC = 18;

const int CPU_TYPE_POWERPC64 = 16777234;

const int CPU_SUBTYPE_MASK = 4278190080;

const int CPU_SUBTYPE_LIB64 = 2147483648;

const int CPU_SUBTYPE_PTRAUTH_ABI = 2147483648;

const int CPU_SUBTYPE_ANY = -1;

const int CPU_SUBTYPE_MULTIPLE = -1;

const int CPU_SUBTYPE_LITTLE_ENDIAN = 0;

const int CPU_SUBTYPE_BIG_ENDIAN = 1;

const int CPU_THREADTYPE_NONE = 0;

const int CPU_SUBTYPE_VAX_ALL = 0;

const int CPU_SUBTYPE_VAX780 = 1;

const int CPU_SUBTYPE_VAX785 = 2;

const int CPU_SUBTYPE_VAX750 = 3;

const int CPU_SUBTYPE_VAX730 = 4;

const int CPU_SUBTYPE_UVAXI = 5;

const int CPU_SUBTYPE_UVAXII = 6;

const int CPU_SUBTYPE_VAX8200 = 7;

const int CPU_SUBTYPE_VAX8500 = 8;

const int CPU_SUBTYPE_VAX8600 = 9;

const int CPU_SUBTYPE_VAX8650 = 10;

const int CPU_SUBTYPE_VAX8800 = 11;

const int CPU_SUBTYPE_UVAXIII = 12;

const int CPU_SUBTYPE_MC680x0_ALL = 1;

const int CPU_SUBTYPE_MC68030 = 1;

const int CPU_SUBTYPE_MC68040 = 2;

const int CPU_SUBTYPE_MC68030_ONLY = 3;

const int CPU_SUBTYPE_I386_ALL = 3;

const int CPU_SUBTYPE_386 = 3;

const int CPU_SUBTYPE_486 = 4;

const int CPU_SUBTYPE_486SX = 132;

const int CPU_SUBTYPE_586 = 5;

const int CPU_SUBTYPE_PENT = 5;

const int CPU_SUBTYPE_PENTPRO = 22;

const int CPU_SUBTYPE_PENTII_M3 = 54;

const int CPU_SUBTYPE_PENTII_M5 = 86;

const int CPU_SUBTYPE_CELERON = 103;

const int CPU_SUBTYPE_CELERON_MOBILE = 119;

const int CPU_SUBTYPE_PENTIUM_3 = 8;

const int CPU_SUBTYPE_PENTIUM_3_M = 24;

const int CPU_SUBTYPE_PENTIUM_3_XEON = 40;

const int CPU_SUBTYPE_PENTIUM_M = 9;

const int CPU_SUBTYPE_PENTIUM_4 = 10;

const int CPU_SUBTYPE_PENTIUM_4_M = 26;

const int CPU_SUBTYPE_ITANIUM = 11;

const int CPU_SUBTYPE_ITANIUM_2 = 27;

const int CPU_SUBTYPE_XEON = 12;

const int CPU_SUBTYPE_XEON_MP = 28;

const int CPU_SUBTYPE_INTEL_FAMILY_MAX = 15;

const int CPU_SUBTYPE_INTEL_MODEL_ALL = 0;

const int CPU_SUBTYPE_X86_ALL = 3;

const int CPU_SUBTYPE_X86_64_ALL = 3;

const int CPU_SUBTYPE_X86_ARCH1 = 4;

const int CPU_SUBTYPE_X86_64_H = 8;

const int CPU_THREADTYPE_INTEL_HTT = 1;

const int CPU_SUBTYPE_MIPS_ALL = 0;

const int CPU_SUBTYPE_MIPS_R2300 = 1;

const int CPU_SUBTYPE_MIPS_R2600 = 2;

const int CPU_SUBTYPE_MIPS_R2800 = 3;

const int CPU_SUBTYPE_MIPS_R2000a = 4;

const int CPU_SUBTYPE_MIPS_R2000 = 5;

const int CPU_SUBTYPE_MIPS_R3000a = 6;

const int CPU_SUBTYPE_MIPS_R3000 = 7;

const int CPU_SUBTYPE_MC98000_ALL = 0;

const int CPU_SUBTYPE_MC98601 = 1;

const int CPU_SUBTYPE_HPPA_ALL = 0;

const int CPU_SUBTYPE_HPPA_7100 = 0;

const int CPU_SUBTYPE_HPPA_7100LC = 1;

const int CPU_SUBTYPE_MC88000_ALL = 0;

const int CPU_SUBTYPE_MC88100 = 1;

const int CPU_SUBTYPE_MC88110 = 2;

const int CPU_SUBTYPE_SPARC_ALL = 0;

const int CPU_SUBTYPE_I860_ALL = 0;

const int CPU_SUBTYPE_I860_860 = 1;

const int CPU_SUBTYPE_POWERPC_ALL = 0;

const int CPU_SUBTYPE_POWERPC_601 = 1;

const int CPU_SUBTYPE_POWERPC_602 = 2;

const int CPU_SUBTYPE_POWERPC_603 = 3;

const int CPU_SUBTYPE_POWERPC_603e = 4;

const int CPU_SUBTYPE_POWERPC_603ev = 5;

const int CPU_SUBTYPE_POWERPC_604 = 6;

const int CPU_SUBTYPE_POWERPC_604e = 7;

const int CPU_SUBTYPE_POWERPC_620 = 8;

const int CPU_SUBTYPE_POWERPC_750 = 9;

const int CPU_SUBTYPE_POWERPC_7400 = 10;

const int CPU_SUBTYPE_POWERPC_7450 = 11;

const int CPU_SUBTYPE_POWERPC_970 = 100;

const int CPU_SUBTYPE_ARM_ALL = 0;

const int CPU_SUBTYPE_ARM_V4T = 5;

const int CPU_SUBTYPE_ARM_V6 = 6;

const int CPU_SUBTYPE_ARM_V5TEJ = 7;

const int CPU_SUBTYPE_ARM_XSCALE = 8;

const int CPU_SUBTYPE_ARM_V7 = 9;

const int CPU_SUBTYPE_ARM_V7F = 10;

const int CPU_SUBTYPE_ARM_V7S = 11;

const int CPU_SUBTYPE_ARM_V7K = 12;

const int CPU_SUBTYPE_ARM_V8 = 13;

const int CPU_SUBTYPE_ARM_V6M = 14;

const int CPU_SUBTYPE_ARM_V7M = 15;

const int CPU_SUBTYPE_ARM_V7EM = 16;

const int CPU_SUBTYPE_ARM_V8M = 17;

const int CPU_SUBTYPE_ARM64_ALL = 0;

const int CPU_SUBTYPE_ARM64_V8 = 1;

const int CPU_SUBTYPE_ARM64E = 2;

const int CPU_SUBTYPE_ARM64_PTR_AUTH_MASK = 251658240;

const int CPU_SUBTYPE_ARM64_32_ALL = 0;

const int CPU_SUBTYPE_ARM64_32_V8 = 1;

const int CPUFAMILY_UNKNOWN = 0;

const int CPUFAMILY_POWERPC_G3 = 3471054153;

const int CPUFAMILY_POWERPC_G4 = 2009171118;

const int CPUFAMILY_POWERPC_G5 = 3983988906;

const int CPUFAMILY_INTEL_6_13 = 2855483691;

const int CPUFAMILY_INTEL_PENRYN = 2028621756;

const int CPUFAMILY_INTEL_NEHALEM = 1801080018;

const int CPUFAMILY_INTEL_WESTMERE = 1463508716;

const int CPUFAMILY_INTEL_SANDYBRIDGE = 1418770316;

const int CPUFAMILY_INTEL_IVYBRIDGE = 526772277;

const int CPUFAMILY_INTEL_HASWELL = 280134364;

const int CPUFAMILY_INTEL_BROADWELL = 1479463068;

const int CPUFAMILY_INTEL_SKYLAKE = 939270559;

const int CPUFAMILY_INTEL_KABYLAKE = 260141638;

const int CPUFAMILY_INTEL_ICELAKE = 943936839;

const int CPUFAMILY_INTEL_COMETLAKE = 486055998;

const int CPUFAMILY_ARM_9 = 3878847406;

const int CPUFAMILY_ARM_11 = 2415272152;

const int CPUFAMILY_ARM_XSCALE = 1404044789;

const int CPUFAMILY_ARM_12 = 3172666089;

const int CPUFAMILY_ARM_13 = 214503012;

const int CPUFAMILY_ARM_14 = 2517073649;

const int CPUFAMILY_ARM_15 = 2823887818;

const int CPUFAMILY_ARM_SWIFT = 506291073;

const int CPUFAMILY_ARM_CYCLONE = 933271106;

const int CPUFAMILY_ARM_TYPHOON = 747742334;

const int CPUFAMILY_ARM_TWISTER = 2465937352;

const int CPUFAMILY_ARM_HURRICANE = 1741614739;

const int CPUFAMILY_ARM_MONSOON_MISTRAL = 3894312694;

const int CPUFAMILY_ARM_VORTEX_TEMPEST = 131287967;

const int CPUFAMILY_ARM_LIGHTNING_THUNDER = 1176831186;

const int CPUFAMILY_ARM_FIRESTORM_ICESTORM = 458787763;

const int CPUFAMILY_ARM_BLIZZARD_AVALANCHE = 3660830781;

const int CPUSUBFAMILY_UNKNOWN = 0;

const int CPUSUBFAMILY_ARM_HP = 1;

const int CPUSUBFAMILY_ARM_HG = 2;

const int CPUSUBFAMILY_ARM_M = 3;

const int CPUSUBFAMILY_ARM_HS = 4;

const int CPUSUBFAMILY_ARM_HC_HD = 5;

const int CPUFAMILY_INTEL_6_23 = 2028621756;

const int CPUFAMILY_INTEL_6_26 = 1801080018;

const int __COREFOUNDATION_CFMESSAGEPORT__ = 1;

const int __COREFOUNDATION_CFPLUGIN__ = 1;

const int COREFOUNDATION_CFPLUGINCOM_SEPARATE = 1;

const int __COREFOUNDATION_CFMACHPORT__ = 1;

const int __COREFOUNDATION_CFATTRIBUTEDSTRING__ = 1;

const int __COREFOUNDATION_CFURLENUMERATOR__ = 1;

const int __COREFOUNDATION_CFFILESECURITY__ = 1;

const int KAUTH_UID_NONE = 4294967195;

const int KAUTH_GID_NONE = 4294967195;

const int KAUTH_GUID_SIZE = 16;

const int KAUTH_NTSID_MAX_AUTHORITIES = 16;

const int KAUTH_NTSID_HDRSIZE = 8;

const int KAUTH_EXTLOOKUP_SUCCESS = 0;

const int KAUTH_EXTLOOKUP_BADRQ = 1;

const int KAUTH_EXTLOOKUP_FAILURE = 2;

const int KAUTH_EXTLOOKUP_FATAL = 3;

const int KAUTH_EXTLOOKUP_INPROG = 100;

const int KAUTH_EXTLOOKUP_VALID_UID = 1;

const int KAUTH_EXTLOOKUP_VALID_UGUID = 2;

const int KAUTH_EXTLOOKUP_VALID_USID = 4;

const int KAUTH_EXTLOOKUP_VALID_GID = 8;

const int KAUTH_EXTLOOKUP_VALID_GGUID = 16;

const int KAUTH_EXTLOOKUP_VALID_GSID = 32;

const int KAUTH_EXTLOOKUP_WANT_UID = 64;

const int KAUTH_EXTLOOKUP_WANT_UGUID = 128;

const int KAUTH_EXTLOOKUP_WANT_USID = 256;

const int KAUTH_EXTLOOKUP_WANT_GID = 512;

const int KAUTH_EXTLOOKUP_WANT_GGUID = 1024;

const int KAUTH_EXTLOOKUP_WANT_GSID = 2048;

const int KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = 4096;

const int KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = 8192;

const int KAUTH_EXTLOOKUP_ISMEMBER = 16384;

const int KAUTH_EXTLOOKUP_VALID_PWNAM = 32768;

const int KAUTH_EXTLOOKUP_WANT_PWNAM = 65536;

const int KAUTH_EXTLOOKUP_VALID_GRNAM = 131072;

const int KAUTH_EXTLOOKUP_WANT_GRNAM = 262144;

const int KAUTH_EXTLOOKUP_VALID_SUPGRPS = 524288;

const int KAUTH_EXTLOOKUP_WANT_SUPGRPS = 1048576;

const int KAUTH_EXTLOOKUP_REGISTER = 0;

const int KAUTH_EXTLOOKUP_RESULT = 1;

const int KAUTH_EXTLOOKUP_WORKER = 2;

const int KAUTH_EXTLOOKUP_DEREGISTER = 4;

const int KAUTH_GET_CACHE_SIZES = 8;

const int KAUTH_SET_CACHE_SIZES = 16;

const int KAUTH_CLEAR_CACHES = 32;

const String IDENTITYSVC_ENTITLEMENT = 'com.apple.private.identitysvc';

const int KAUTH_ACE_KINDMASK = 15;

const int KAUTH_ACE_PERMIT = 1;

const int KAUTH_ACE_DENY = 2;

const int KAUTH_ACE_AUDIT = 3;

const int KAUTH_ACE_ALARM = 4;

const int KAUTH_ACE_INHERITED = 16;

const int KAUTH_ACE_FILE_INHERIT = 32;

const int KAUTH_ACE_DIRECTORY_INHERIT = 64;

const int KAUTH_ACE_LIMIT_INHERIT = 128;

const int KAUTH_ACE_ONLY_INHERIT = 256;

const int KAUTH_ACE_SUCCESS = 512;

const int KAUTH_ACE_FAILURE = 1024;

const int KAUTH_ACE_INHERIT_CONTROL_FLAGS = 480;

const int KAUTH_ACE_GENERIC_ALL = 2097152;

const int KAUTH_ACE_GENERIC_EXECUTE = 4194304;

const int KAUTH_ACE_GENERIC_WRITE = 8388608;

const int KAUTH_ACE_GENERIC_READ = 16777216;

const int KAUTH_ACL_MAX_ENTRIES = 128;

const int KAUTH_ACL_FLAGS_PRIVATE = 65535;

const int KAUTH_ACL_DEFER_INHERIT = 65536;

const int KAUTH_ACL_NO_INHERIT = 131072;

const int KAUTH_FILESEC_NOACL = 4294967295;

const int KAUTH_FILESEC_MAGIC = 19710317;

const int KAUTH_FILESEC_FLAGS_PRIVATE = 65535;

const int KAUTH_FILESEC_DEFER_INHERIT = 65536;

const int KAUTH_FILESEC_NO_INHERIT = 131072;

const String KAUTH_FILESEC_XATTR = 'com.apple.system.Security';

const int KAUTH_ENDIAN_HOST = 1;

const int KAUTH_ENDIAN_DISK = 2;

const int KAUTH_VNODE_READ_DATA = 2;

const int KAUTH_VNODE_LIST_DIRECTORY = 2;

const int KAUTH_VNODE_WRITE_DATA = 4;

const int KAUTH_VNODE_ADD_FILE = 4;

const int KAUTH_VNODE_EXECUTE = 8;

const int KAUTH_VNODE_SEARCH = 8;

const int KAUTH_VNODE_DELETE = 16;

const int KAUTH_VNODE_APPEND_DATA = 32;

const int KAUTH_VNODE_ADD_SUBDIRECTORY = 32;

const int KAUTH_VNODE_DELETE_CHILD = 64;

const int KAUTH_VNODE_READ_ATTRIBUTES = 128;

const int KAUTH_VNODE_WRITE_ATTRIBUTES = 256;

const int KAUTH_VNODE_READ_EXTATTRIBUTES = 512;

const int KAUTH_VNODE_WRITE_EXTATTRIBUTES = 1024;

const int KAUTH_VNODE_READ_SECURITY = 2048;

const int KAUTH_VNODE_WRITE_SECURITY = 4096;

const int KAUTH_VNODE_TAKE_OWNERSHIP = 8192;

const int KAUTH_VNODE_CHANGE_OWNER = 8192;

const int KAUTH_VNODE_SYNCHRONIZE = 1048576;

const int KAUTH_VNODE_LINKTARGET = 33554432;

const int KAUTH_VNODE_CHECKIMMUTABLE = 67108864;

const int KAUTH_VNODE_ACCESS = 2147483648;

const int KAUTH_VNODE_NOIMMUTABLE = 1073741824;

const int KAUTH_VNODE_SEARCHBYANYONE = 536870912;

const int KAUTH_VNODE_GENERIC_READ_BITS = 2690;

const int KAUTH_VNODE_GENERIC_WRITE_BITS = 5492;

const int KAUTH_VNODE_GENERIC_EXECUTE_BITS = 8;

const int KAUTH_VNODE_GENERIC_ALL_BITS = 8190;

const int KAUTH_VNODE_WRITE_RIGHTS = 100676980;

const int __DARWIN_ACL_READ_DATA = 2;

const int __DARWIN_ACL_LIST_DIRECTORY = 2;

const int __DARWIN_ACL_WRITE_DATA = 4;

const int __DARWIN_ACL_ADD_FILE = 4;

const int __DARWIN_ACL_EXECUTE = 8;

const int __DARWIN_ACL_SEARCH = 8;

const int __DARWIN_ACL_DELETE = 16;

const int __DARWIN_ACL_APPEND_DATA = 32;

const int __DARWIN_ACL_ADD_SUBDIRECTORY = 32;

const int __DARWIN_ACL_DELETE_CHILD = 64;

const int __DARWIN_ACL_READ_ATTRIBUTES = 128;

const int __DARWIN_ACL_WRITE_ATTRIBUTES = 256;

const int __DARWIN_ACL_READ_EXTATTRIBUTES = 512;

const int __DARWIN_ACL_WRITE_EXTATTRIBUTES = 1024;

const int __DARWIN_ACL_READ_SECURITY = 2048;

const int __DARWIN_ACL_WRITE_SECURITY = 4096;

const int __DARWIN_ACL_CHANGE_OWNER = 8192;

const int __DARWIN_ACL_SYNCHRONIZE = 1048576;

const int __DARWIN_ACL_EXTENDED_ALLOW = 1;

const int __DARWIN_ACL_EXTENDED_DENY = 2;

const int __DARWIN_ACL_ENTRY_INHERITED = 16;

const int __DARWIN_ACL_ENTRY_FILE_INHERIT = 32;

const int __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT = 64;

const int __DARWIN_ACL_ENTRY_LIMIT_INHERIT = 128;

const int __DARWIN_ACL_ENTRY_ONLY_INHERIT = 256;

const int __DARWIN_ACL_FLAG_NO_INHERIT = 131072;

const int ACL_MAX_ENTRIES = 128;

const int ACL_UNDEFINED_ID = 0;

const int __COREFOUNDATION_CFSTRINGTOKENIZER__ = 1;

const int __COREFOUNDATION_CFFILEDESCRIPTOR__ = 1;

const int __COREFOUNDATION_CFUSERNOTIFICATION__ = 1;

const int __COREFOUNDATION_CFXMLNODE__ = 1;

const int __COREFOUNDATION_CFXMLPARSER__ = 1;

const int _CSSMTYPE_H_ = 1;

const int _CSSMCONFIG_H_ = 1;

const int SEC_ASN1_TAG_MASK = 255;

const int SEC_ASN1_TAGNUM_MASK = 31;

const int SEC_ASN1_BOOLEAN = 1;

const int SEC_ASN1_INTEGER = 2;

const int SEC_ASN1_BIT_STRING = 3;

const int SEC_ASN1_OCTET_STRING = 4;

const int SEC_ASN1_NULL = 5;

const int SEC_ASN1_OBJECT_ID = 6;

const int SEC_ASN1_OBJECT_DESCRIPTOR = 7;

const int SEC_ASN1_REAL = 9;

const int SEC_ASN1_ENUMERATED = 10;

const int SEC_ASN1_EMBEDDED_PDV = 11;

const int SEC_ASN1_UTF8_STRING = 12;

const int SEC_ASN1_SEQUENCE = 16;

const int SEC_ASN1_SET = 17;

const int SEC_ASN1_NUMERIC_STRING = 18;

const int SEC_ASN1_PRINTABLE_STRING = 19;

const int SEC_ASN1_T61_STRING = 20;

const int SEC_ASN1_VIDEOTEX_STRING = 21;

const int SEC_ASN1_IA5_STRING = 22;

const int SEC_ASN1_UTC_TIME = 23;

const int SEC_ASN1_GENERALIZED_TIME = 24;

const int SEC_ASN1_GRAPHIC_STRING = 25;

const int SEC_ASN1_VISIBLE_STRING = 26;

const int SEC_ASN1_GENERAL_STRING = 27;

const int SEC_ASN1_UNIVERSAL_STRING = 28;

const int SEC_ASN1_BMP_STRING = 30;

const int SEC_ASN1_HIGH_TAG_NUMBER = 31;

const int SEC_ASN1_TELETEX_STRING = 20;

const int SEC_ASN1_METHOD_MASK = 32;

const int SEC_ASN1_PRIMITIVE = 0;

const int SEC_ASN1_CONSTRUCTED = 32;

const int SEC_ASN1_CLASS_MASK = 192;

const int SEC_ASN1_UNIVERSAL = 0;

const int SEC_ASN1_APPLICATION = 64;

const int SEC_ASN1_CONTEXT_SPECIFIC = 128;

const int SEC_ASN1_PRIVATE = 192;

const int SEC_ASN1_OPTIONAL = 256;

const int SEC_ASN1_EXPLICIT = 512;

const int SEC_ASN1_ANY = 1024;

const int SEC_ASN1_INLINE = 2048;

const int SEC_ASN1_POINTER = 4096;

const int SEC_ASN1_GROUP = 8192;

const int SEC_ASN1_DYNAMIC = 16384;

const int SEC_ASN1_SKIP = 32768;

const int SEC_ASN1_INNER = 65536;

const int SEC_ASN1_SAVE = 131072;

const int SEC_ASN1_SKIP_REST = 524288;

const int SEC_ASN1_CHOICE = 1048576;

const int SEC_ASN1_SIGNED_INT = 8388608;

const int SEC_ASN1_SEQUENCE_OF = 8208;

const int SEC_ASN1_SET_OF = 8209;

const int SEC_ASN1_ANY_CONTENTS = 66560;

const int _CSSMAPPLE_H_ = 1;

const int _CSSMERR_H_ = 1;

const int _X509DEFS_H_ = 1;

const int BER_TAG_UNKNOWN = 0;

const int BER_TAG_BOOLEAN = 1;

const int BER_TAG_INTEGER = 2;

const int BER_TAG_BIT_STRING = 3;

const int BER_TAG_OCTET_STRING = 4;

const int BER_TAG_NULL = 5;

const int BER_TAG_OID = 6;

const int BER_TAG_OBJECT_DESCRIPTOR = 7;

const int BER_TAG_EXTERNAL = 8;

const int BER_TAG_REAL = 9;

const int BER_TAG_ENUMERATED = 10;

const int BER_TAG_PKIX_UTF8_STRING = 12;

const int BER_TAG_SEQUENCE = 16;

const int BER_TAG_SET = 17;

const int BER_TAG_NUMERIC_STRING = 18;

const int BER_TAG_PRINTABLE_STRING = 19;

const int BER_TAG_T61_STRING = 20;

const int BER_TAG_TELETEX_STRING = 20;

const int BER_TAG_VIDEOTEX_STRING = 21;

const int BER_TAG_IA5_STRING = 22;

const int BER_TAG_UTC_TIME = 23;

const int BER_TAG_GENERALIZED_TIME = 24;

const int BER_TAG_GRAPHIC_STRING = 25;

const int BER_TAG_ISO646_STRING = 26;

const int BER_TAG_GENERAL_STRING = 27;

const int BER_TAG_VISIBLE_STRING = 26;

const int BER_TAG_PKIX_UNIVERSAL_STRING = 28;

const int BER_TAG_PKIX_BMP_STRING = 30;

const int CSSM_X509_OPTION_PRESENT = 1;

const int CSSM_X509_OPTION_NOT_PRESENT = 0;

const int CE_KU_DigitalSignature = 32768;

const int CE_KU_NonRepudiation = 16384;

const int CE_KU_KeyEncipherment = 8192;

const int CE_KU_DataEncipherment = 4096;

const int CE_KU_KeyAgreement = 2048;

const int CE_KU_KeyCertSign = 1024;

const int CE_KU_CRLSign = 512;

const int CE_KU_EncipherOnly = 256;

const int CE_KU_DecipherOnly = 128;

const int CE_CR_Unspecified = 0;

const int CE_CR_KeyCompromise = 1;

const int CE_CR_CACompromise = 2;

const int CE_CR_AffiliationChanged = 3;

const int CE_CR_Superseded = 4;

const int CE_CR_CessationOfOperation = 5;

const int CE_CR_CertificateHold = 6;

const int CE_CR_RemoveFromCRL = 8;

const int CE_CD_Unspecified = 128;

const int CE_CD_KeyCompromise = 64;

const int CE_CD_CACompromise = 32;

const int CE_CD_AffiliationChanged = 16;

const int CE_CD_Superseded = 8;

const int CE_CD_CessationOfOperation = 4;

const int CE_CD_CertificateHold = 2;

const int CSSM_APPLE_TP_SSL_OPTS_VERSION = 1;

const int CSSM_APPLE_TP_SSL_CLIENT = 1;

const int CSSM_APPLE_TP_CRL_OPTS_VERSION = 0;

const int CSSM_APPLE_TP_SMIME_OPTS_VERSION = 0;

const int CSSM_APPLE_TP_ACTION_VERSION = 0;

const int CSSM_TP_APPLE_EVIDENCE_VERSION = 0;

const int CSSM_EVIDENCE_FORM_APPLE_CUSTOM = 2147483648;

const String CSSM_APPLE_CRL_END_OF_TIME = '99991231235959';

const String kKeychainSuffix = '.keychain';

const String kKeychainDbSuffix = '.keychain-db';

const String kSystemKeychainName = 'System.keychain';

const String kSystemKeychainDir = '/Library/Keychains/';

const String kSystemUnlockFile = '/var/db/SystemKey';

const String kSystemKeychainPath = '/Library/Keychains/System.keychain';

const String CSSM_APPLE_ACL_TAG_PARTITION_ID = '___PARTITION___';

const String CSSM_APPLE_ACL_TAG_INTEGRITY = '___INTEGRITY___';

const int errSecErrnoBase = 100000;

const int errSecErrnoLimit = 100255;

const int SEC_PROTOCOL_CERT_COMPRESSION_DEFAULT = 1;

const int errSSLServerAuthCompleted = -9841;

const int errSSLClientAuthCompleted = -9841;

const int errSSLLast = -9849;
